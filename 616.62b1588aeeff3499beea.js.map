{"version":3,"file":"616.62b1588aeeff3499beea.js","mappings":"gOAoDO,SAASA,EAAqBC,GACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,OAAKC,GAAWC,GAIhBF,GAASI,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,GACzDF,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,OAAUI,IAJxDN,GA3CXO,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,GAAKC,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,OAGzDK,EAAAA,EAAAA,IAAiB,uBAAwBR,IAEzCQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAM,MAAEQ,GAAUD,EACZE,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,GAAiBb,EAAOc,gBAAgBC,gBAAgBJ,IAAkB,GAQzF,OANID,IAAUG,IACZb,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,EAAUc,EAAAA,KAG1DZ,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,EAAMQ,OAKjEH,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAM,UAAEgB,GAAcR,EACtB,OAAOS,EAAAA,EAAAA,IAA2BlB,EAAQC,EAAQgB,OCvCpDV,EAAAA,EAAAA,IAAiB,YAAY,CAACP,EAAQQ,EAASC,KAC7C,MAAM,GACJU,EADI,SAEJjB,EAAWkB,EAAAA,GAFP,KAGJC,EAAO,SAHH,qBAIJC,GAAuB,GACrBb,EAEEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GA8BpD,OA5BKuB,GAEDA,EAAmBtB,SAAWkB,GAC3BI,EAAmBrB,WAAaA,GAChCqB,EAAmBF,OAASA,IAE7BF,IACFnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQmB,EAAIjB,EAAU,aAAc,KAIlEF,EAASD,EADTC,GAASyB,EAAAA,EAAAA,IAAsBzB,IAG/BA,EAAS,IACJA,EACH0B,mBAAmB,EACnBC,SAAU,IACL3B,EAAO2B,SACVC,0BAAsBtB,MAEpBa,IAAOnB,EAAO6B,gBAAgBC,UAAY,CAC5CD,gBAAiB,MAIrBE,EAAAA,EAAAA,IAAU/B,KAGLgC,EAAAA,EAAAA,IAAyBhC,EAAQmB,EAAIjB,EAAUmB,EAAMC,OAG9Df,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7BgC,EAAAA,EAAAA,IAAyBhC,OAAQM,MAG1CC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,MACrDsB,EAAAA,EAAAA,IAAU,IACL/B,EACHiC,iBAAiB,IAGnBzB,EAAQ0B,SAASzB,OAGnBF,EAAAA,EAAAA,IAAiB,qBAAsBP,IAC9B,IACFA,EACHmC,kBAAc7B,OAIlBC,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAC1D,IACFT,EACHoC,uBAAwB3B,OAI5BF,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,iBAAE4B,EAAF,WAAoBC,GAAe7B,GAEnC,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,IAAKC,EAEH,YADAO,EAAQ0B,SAAS,CAAEf,GAAImB,EAAW,KAIpC,MAAMC,EAAWD,EAAWE,QAAQvC,GAEpC,IAAkB,IAAdsC,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErC7B,EAAQ0B,SAAS,CAAEf,GAAIsB,EAAQnB,sBAAsB,O,iFCjDvD,MACMoB,EAA8BC,EAAAA,GAA2BC,EAAAA,GAI/D,IAAIC,EA0nBJ,SAASC,EAAoB9C,EAAqBC,EAAgB8C,GAChE,MAAM,SAAE7C,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACnDgD,EAAOC,EAAAA,GAEPC,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,IAAKiD,IAAiBhD,EAAU,OAChC,MAKMkD,EALWL,EACdM,KAAKlC,GAAO+B,EAAa/B,KACzBmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAUuD,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASxC,GAAKyC,EAASzC,KAE/B0C,QAAO,CAACC,EAAKP,KACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAIpC,OAHAO,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,GAAU,OACtDD,EAAIG,KAAM,IAAEE,EAAAA,EAAAA,IAAsBnB,EAAMO,GAAS,EAAO,OAAGjD,GAAW,QAE/DwD,IACN,KAEHM,EAAAA,EAAAA,IAAoBhB,EAAOiB,KAAK,QA3oBlC9D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,SAAUC,EAAV,aAAoBoE,GAAiB7D,EAE3C,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBoE,OAGtE/D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,OAAOC,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBqE,OAGtEhE,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAC7BiD,EAAqB,cAATnD,EAAuB,qBAAuB,YAEhE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWD,OAGjEhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,KACJgE,EADI,OACExE,EADF,SACUC,EADV,KACoBmB,GACtBZ,EAEE+D,EAAqB,cAATnD,EAAuB,wBAA0B,eAEnE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWC,OAGjElE,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcvD,GAC/C2D,QAAQ5B,EAAa/B,KAAOqC,EAAAA,EAAAA,IAA4BxD,EAAQkD,EAAa/B,GAAKjB,GAAU6E,WAGrG,OAAKH,GAIEpD,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAa0E,QAJjE,MAOFrE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,iBAAE4B,GAAqB5B,GACvB,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAGxD,IAAIqE,EAEJ,IAJiBW,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,IAItC8E,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAKnC,GAE9BoC,EADiBH,EAAgB3C,QAAQwC,EAAaO,YAC1BlD,EAClCkC,EAAYe,GAAYH,EAAgBK,OAAS,GAAKF,GAAY,EAC9DG,OAAON,EAAgBG,SACvBhF,OAfJ,GAAIJ,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCsE,EAAYmB,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC1B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpDqE,EAAYsB,MAAAA,OAAH,EAAGA,EAAYE,cAU5BvF,EAAQwF,gBAAgB,CAAEzB,UAAAA,IAC1B/D,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,QAItBhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,OACyB2B,EADzB,OACiCC,EADjC,aACyCC,EADzC,QACuDC,GACzD5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,CACXrG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACA2B,OAAQA,MAAAA,EAAAA,EAAUlG,EAAOsG,YAAYJ,OACrCC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAOsG,YAAYH,OACrCC,aAAcA,GAAgBpG,EAAOsG,YAAYF,aACjDC,QAASA,GAAWrG,EAAOsG,YAAYD,cAK7C9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVH,OAAAA,QAKN5F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVF,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVD,QAAAA,QAKN9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJyF,GACEzF,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVJ,OAAAA,QAKN3F,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHsG,YAAa,CACXH,OAAQnG,EAAOsG,YAAYH,OAC3BC,aAAcpG,EAAOsG,YAAYF,aACjCC,QAASrG,EAAOsG,YAAYD,cAKlC9F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAI9B,IAF4B8F,EAAAA,EAAAA,IAAyBvG,IAe9C,GAAIC,IAAWD,EAAOwG,YAAYvG,QAAUsE,IAAcvE,EAAOwG,YAAYjC,UAClF,MAAO,IACFvE,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,UAlBZC,OAAOC,YAAW,KAChB3G,GAAS4G,EAAAA,EAAAA,OAET7E,EAAAA,EAAAA,IAAU,IACL/B,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,QAlNgB,SAoOlClG,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHwG,YAAa,QAIjBjG,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,KAC5C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,IAAIwE,EACJ,GAAI7F,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC8F,EAAgBL,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC9B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpD6F,EAAgBF,MAAAA,OAAH,EAAGA,EAAYE,cAGzBA,GAILvF,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAWwB,EAAec,aAAa,QAI7DtG,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,KAC1C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAEvBuF,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,GAEpD,GAAK4G,GAAoC,IAAtBA,EAAWtB,OAEvB,CACL,MAAMjB,EAAYuC,EAAWE,MAE7BhH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,KAExE/E,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,SAXF/D,EAAQyG,uBAkBZ1G,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OACJR,EADI,SACIC,EAAWkB,EAAAA,GADf,gBAC+B8F,EAAkB,SADjD,YAC2DL,EAD3D,UACwEM,EADxE,cACmFC,EADnF,eAEJC,EAFI,oBAEYC,GACd7G,EAEJ,IAAI,UAAE8D,GAAc9D,EAEpB,QAAkBH,IAAd6G,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmCxH,EAAQoH,EAAeD,GAClEI,MAAAA,GAAAA,EAAK/B,UACLjB,GAAagD,GAInB,MAAMhG,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAC9CyH,GAAoBlG,GACxBtB,IAAWsB,EAAmBtB,QAC3BC,IAAaqB,EAAmBrB,UAChCgH,IAAoB3F,EAAmBF,KAiB5C,GAdIwB,IACF6E,aAAa7E,GACbA,OAAcvC,GAEhBuC,EAAc6D,OAAOC,YAAW,KAC9B,IAAIgB,GAAYf,EAAAA,EAAAA,MAChBe,GAAYC,EAAAA,EAAAA,IAAqBD,GACjCA,GAAYE,EAAAA,EAAAA,IAAqBF,IACjC5F,EAAAA,EAAAA,IAAU4F,KACTd,EAAcnE,EArUI,MAuUrB1C,GAAS4H,EAAAA,EAAAA,IAAqB5H,EAAQC,EAAQsE,EAAWsC,EAAaS,GACtEtH,GAAS6H,EAAAA,EAAAA,IAAqB7H,OAAQM,GAElC+G,EAAgB,CAClB,MAAMP,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,IAAa,GACjEF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,EAAYO,IAGlFI,IACFzH,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQ8H,EAAAA,GAAAA,SAGxC,MAAMpD,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,GAAIwE,GAAeA,EAAYqD,SAASxD,GAGtC,OAFAxC,EAAAA,EAAAA,IAAU/B,QACVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAUjC,GANIuH,IACFzH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,IAGvEN,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GAEjEoE,IAAgB+C,EAAkB,CACpC,MAAMO,EAAYzD,EAAYG,EAAY,GAAKoD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrE9H,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQgI,IAGxCjG,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAC/BM,EAAQyH,2BAIV1H,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,WAAEyH,EAAF,WAAcnF,EAAd,UAA0BoE,GAAc1G,EAC9C,IAAI0H,EAIJ,OAHIhB,IACFgB,GAAoBC,EAAAA,EAAAA,IAA0BpI,EAAQkI,EAAYf,IAE7D,IACFnH,EACH6B,gBAAiB,CACfqG,WAAAA,EACAnF,WAAYoF,GAAqBpF,EACjCsF,cAAc,QAKpB9H,EAAAA,EAAAA,IAAiB,mBAAoBP,KACnC+B,EAAAA,EAAAA,IAAU,IACL/B,EACH6B,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,GAAEU,GAAOV,GAEfsB,EAAAA,EAAAA,IAAU,IACL/B,EACH6B,gBAAiB,IACZ7B,EAAO6B,gBACVC,SAAUX,EACVkH,cAAc,KAIlB7H,EAAQ0B,SAAS,CAAEf,GAAAA,IACnBX,EAAQ8H,mBACR9H,EAAQiB,4BAGVlB,EAAAA,EAAAA,IAAiB,sCAAsC,CAACP,EAAQQ,KAC9D,IAAKR,EAAOuI,iBACV,OAGF,MAAQtI,OAAQiI,EAAV,WAAsBnF,GAAe/C,EAAOuI,iBAElD/H,EAAQgI,gBAAgB,CAAEN,WAAAA,EAAYnF,WAAAA,QAGxCxC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,QAAE8C,GAAY9C,EAEdgI,EAAWzI,EAAO0I,gBAAgBD,SAASlF,EAAQtD,QACpDwI,GAAaA,EAASjD,SAE3BzD,EAAAA,EAAAA,IAAU,IACL/B,EACH0I,gBAAiB,CACfD,SAAU,IACLzI,EAAO0I,gBAAgBD,SAC1B,CAAClF,EAAQtD,QAASwI,EAASnF,QAAQnC,GAAOA,IAAOoC,EAAQpC,aAMjEZ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,QAAE8C,GAAY9C,EACf8C,IAELxB,EAAAA,EAAAA,IAAU,IACL/B,EACH0I,gBAAiB,CACfD,SAAU,IACLzI,EAAO0I,gBAAgBD,SAC1B,CAAClF,EAAQtD,QAAS,IAAKD,EAAO0I,gBAAgBD,SAASlF,EAAQtD,SAAW,GAAKsD,EAAQpC,YAM/FZ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,IAAKR,EAAOuI,iBACV,OAGF,MAAM,OAAEtI,EAAF,WAAU8C,GAAe/C,EAAOuI,kBAChC,SAAErI,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAEnDkD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC3CiD,GAAiBhD,GACL6C,EAAWM,KAAKlC,GAAO+B,EAAa/B,KAClDmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAUyI,cACrEC,SAASrF,GAAY/C,EAAQqI,qBAAqB,CAAEtF,QAAAA,UAG/DhD,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UAAE8D,GAAc9D,GAAW,GAC3ByB,GAAW4G,EAAAA,EAAAA,IAAkB9I,GACnC,OAAKkC,GAIE6G,EAAAA,EAAAA,IAAuB/I,EAAQkC,EAASf,GAAIoD,GAH1CvE,MAMXO,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UACJ8D,EADI,UAEJ4C,EAFI,gBAGJ6B,EAHI,UAIJC,GACExI,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAEpDvB,GAASkJ,EAAAA,EAAAA,IACPlJ,EAAQC,EAAQC,EAAUgH,EAAiB3C,EAAW4C,EAAW6B,EAAiBC,IAGpFlH,EAAAA,EAAAA,IAAU/B,GAENA,EAAOmJ,4BACT3I,EAAQ4I,yBACR5I,EAAQ6I,iBAAiB,CAEvB9F,QAAU,mDAAkD+F,EAAAA,GAAe,WAAa,qCAK9F/I,EAAAA,EAAAA,IAAiB,0BAA2BP,IAC1C,GAAKA,EAAOmJ,0BAIZ,MAAO,IACFnJ,EACHmJ,2BAA2B,OAI/B5I,EAAAA,EAAAA,IAAiB,wBAAyBkB,EAAAA,KAE1ClB,EAAAA,EAAAA,IAAiB,iBAAkBP,IAC1B,IACFA,EACHuJ,iBAAiB,OAIrBhJ,EAAAA,EAAAA,IAAiB,kBAAmBP,IAC3B,IACFA,EACHuJ,iBAAiB,OAIrBhJ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,MAAMgJ,EAAiBC,EAAAA,GAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAGrF,KAAK,MACzD,qBAAEsF,GAAyB3J,EAEjC,GAAI2J,EAAqBC,MAAK,QAAC,QAAEC,GAAH,SAAiBA,IAAYL,KACzD,OAGF,MAAMjG,EAAkC,CACtCtD,OAAQ6J,EAAAA,GACRC,MAAMC,EAAAA,EAAAA,GAAchK,EAAOiK,kBAC3BC,QAAS,CACPzF,MAAM0F,EAAAA,EAAAA,GAAkBC,IAE1BC,YAAY,GAGd7J,EAAQ8J,0BAA0B,CAChC/G,QAAAA,EACAsG,QAASL,QAIbjJ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAAY,MAC1E,MAAM,QAAE8C,EAAF,QAAWsG,GAAYpJ,GACvB,qBAAEkJ,GAAyB3J,EAC3BuK,GAAc5E,EAAAA,EAAAA,IAAW3F,EAAQ8J,EAAAA,IAEjCU,EAAQC,KAAKC,KACjB,UAAAH,EAAY3E,mBAAZ,eAAyBzE,KAAM,KAC5BwI,EAAqBtG,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEpCwJ,GAAkBhB,EAAqBnE,OAAS,GA5iBf,IA8iBjCrE,EAAKsJ,KAAKG,MAAMJ,GAASG,EAE/BpH,EAAQpC,GAAKA,EAEb,MAAM0J,EAAsB,CAC1B1J,GAAAA,EACAoC,QAAAA,EACAsG,QAAAA,EACAiB,UAAU,IAGZ/I,EAAAA,EAAAA,IAAU,IACL/B,EACH2J,qBAAsB,IACjBA,EAAqBD,OA5jBW,KA6jBnCmB,KAIJrK,EAAQuK,UAAU,CAChB,QAAS,aACT5J,GAAIoC,EAAQpC,GACZlB,OAAQsD,EAAQtD,OAChBsD,QAAAA,QAIJhD,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHgL,aAAc,CAAE/K,OAAAA,EAAQsE,UAAAA,QAI5BhE,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACHgL,kBAAc1K,OAIlBC,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHiL,YAAa,CAAEhL,OAAAA,EAAQsE,UAAAA,QAI3BhE,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHiL,iBAAa3K,OAIjBC,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,IAAKA,EAAOuI,iBACV,OAGF,MAAM,OAAEtI,EAAF,WAAU8C,GAAe/C,EAAOuI,iBACtCzF,EAAoB9C,EAAQC,EAAQ8C,OAGtCxC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,WAAEsC,GAAetC,EACjBiF,GAAOoD,EAAAA,EAAAA,IAAkB9I,GAC1B+C,GAAoC,IAAtBA,EAAWyC,QAAiBE,GAI/C5C,EAAoB9C,EAAQ0F,EAAKvE,GAAI4B,OCpqBvCxC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAEC,GAAUD,GACZ,OAAER,GAAWD,EAAOkL,aAE1B,OAAOC,EAAAA,EAAAA,IAAmBnL,EAAQ,CAChCoL,cAAe,GACfC,aAAc,GACdC,mBAAehL,KACXI,EAAQ,CAAE6K,eAAgB,CAAEC,OAAQvL,EAAQ0B,UAAU,IAAW,CAAE4J,oBAAgBjL,GACvFI,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,GAAEU,GAAOV,GACT,qBAAEgL,GAAyBzL,EAAOkL,aAExC,IAAKO,EACH,OAAON,EAAAA,EAAAA,IAAmBnL,EAAQ,CAAEyL,qBAAsB,CAACtK,KAG7D,MAAMuK,EAAeD,EAAqBnI,QAAQrD,GAAWA,IAAWkB,IAMxE,OALAuK,EAAaC,QAAQxK,GACjBuK,EAAalG,OAzBY,IA0B3BkG,EAAa1E,OAGRmE,EAAAA,EAAAA,IAAmBnL,EAAQ,CAAEyL,qBAAsBC,QAG5DnL,EAAAA,EAAAA,IAAiB,2BAA4BP,IACpCmL,EAAAA,EAAAA,IAAmBnL,EAAQ,CAAEyL,0BAAsBnL,OAG5DC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,QAAEyJ,GAAYzJ,EAEpB,OAAOmL,EAAAA,EAAAA,IAA0B5L,EAAQkK,OAG3C3J,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,GAAEU,GAAOV,EAEf,OAAO0K,EAAAA,EAAAA,IAAmBnL,EAAQ,CAAEC,OAAQkB,EAAIT,WAAOJ,EAAWgL,mBAAehL,QC/CnFC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACH6L,SAAU,IACL7L,EAAO6L,SACVC,OAAQ,CACNpL,MAAAA,EACAqL,eAAWzL,SAMnBC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACHgM,KAAM,IACDhM,EAAOgM,KACVF,OAAQ,CACNpL,MAAAA,EACAuL,cAAU3L,EACV4L,aAAS5L,SCvBjBC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAElB,OAAO0L,EAAAA,EAAAA,IAAiBnM,EAAQ,CAC9BoM,mBAAe9L,EACf+L,kBAAc/L,EACdiL,eAAgBzG,QAAQpE,GACxBA,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAE6L,GAAW7L,EAEnB,MAAO,IACFT,EACHuM,WAAY,CAAED,OAAAA,QAIlB/L,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACHuM,WAAY,CACVC,iBAAiB,QAKvBjM,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClCyM,EAAAA,EAAAA,IAAsBzM,K,iCCvB/BO,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ0M,EAAQjM,KAC3C,IACFT,EACHiC,qBAA6B3B,IAAZG,EAAwBA,GAAWT,EAAOiC,qBAI/D1B,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAGhD,IACFT,EACH2M,gBAJsBlM,OAQ1BF,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH2M,qBAAiBrM,OAIrBC,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACH4M,WAAY,CACVnE,SAAU,IACLzI,EAAO4M,WAAWnE,SACrB,CAACxI,GAAS,IACLD,EAAO4M,WAAWnE,SAASxI,GAC9B4M,WAAY7M,EAAO4M,WAAWnE,SAASxI,IAAW,IAAI4M,iBAOhEtM,EAAAA,EAAAA,IAAiB,+BAA+B,CAACP,EAAQQ,EAASC,KAChE,MAAM,OAAEqM,GAAWrM,GAAW,IACxB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACH4M,WAAY,CACVnE,SAAU,IACLzI,EAAO4M,WAAWnE,SACrB,CAACxI,GAAS,IACLD,EAAO4M,WAAWnE,SAASxI,GAC9B4M,UAAU,EACVE,WAAYD,UAOtBvM,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACH4M,WAAY,CACVnE,SAAU,IACLzI,EAAO4M,WAAWnE,SACrB,CAACxI,GAAS,IACLD,EAAO4M,WAAWnE,SAASxI,GAC9B4M,UAAU,UAOpBtM,EAAAA,EAAAA,IAAiB,YAAaP,IAC5B,GAAKgN,EAAAA,IAA4BC,EAAAA,GAIjC,MAAO,IACFjN,EACHkN,kBAA2D,IAAxClN,EAAO2B,SAASwL,aAAa3H,YAIpDjF,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACH0B,mBAAoB1B,EAAO0B,uBAI/BnB,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHkN,mBAAoBlN,EAAOkN,uBAI/B3M,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ0M,EAAQjM,KAClD,MAAM,MAAE2M,GAAU3M,GACZ,aAAE4M,GAAiBrN,EACzB,IAAKqN,EACH,MAAO,IACFrN,EACHqN,aAAc,CAACD,IAInB,MAAME,EAAYD,EAAa/J,QAAQiK,GAAMA,IAAMH,IAMnD,OALAE,EAAU3B,QAAQyB,GACdE,EAAU9H,OA/HU,IAgItB8H,EAAUtG,MAGL,IACFhH,EACHqN,aAAcC,OAIlB/M,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQ0M,EAAQjM,KACpD,MAAM,QAAE+M,GAAY/M,GACd,OAAEgN,GAAWzN,EAAO6L,SAC1B,IAAK4B,EACH,MAAO,IACFzN,EACH6L,SAAU,IACL7L,EAAO6L,SACV4B,OAAQ,CACNC,KAAM,IACN7B,SAAU,CAAC2B,MAMnB,MAAMG,EAAcF,EAAO5B,SAASvI,QAAQsK,GAAMA,EAAEzM,KAAOqM,EAAQrM,KAGnE,OAFAwM,EAAYhC,QAAQ6B,GAEb,IACFxN,EACH6L,SAAU,IACL7L,EAAO6L,SACV4B,OAAQ,IACHA,EACH5B,SAAU8B,SAMlBpN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMoN,EAAepN,EACrBoN,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,IAErC,MAAMC,EAAmB,IAAIhO,EAAOiO,eAC9BC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAE7K,UAAYsK,EAAatK,UAO/F,OANmC,IAA/B2K,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiB/J,KAAK4J,GAEf,IACF7N,EACHiO,cAAeD,OAInBzN,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAMuN,EAAmBhO,EAAOiO,cAAc3K,QAAO,QAAC,QAAEwK,GAAH,SAAiBA,IAAYrN,EAAQqN,WAE1F,MAAO,IACF9N,EACHiO,cAAeD,OAInBzN,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,KAAE6N,GAAS7N,EAGjB,GAAI,YAAa6N,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAOtO,EAGT,MAAMyO,EAAa,IAAIzO,EAAO0O,SAC9B,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWN,WAAWS,GAASA,EAAiBrL,UAAY+K,EAAK/K,WAChE,IAAxBoL,GACFF,EAAWJ,OAAOM,EAAoB,GAM1C,OAFAF,EAAWxK,KAAKqK,GAET,IACFtO,EACH0O,QAASD,OAIblO,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAMyO,EAAa,IAAIzO,EAAO0O,SAI9B,OAFAD,EAAWzH,MAEJ,IACFhH,EACH0O,QAASD,OAIblO,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAQoO,IAAKC,GAAqBrO,EAElC,MAAO,IACFT,EACH8O,iBAAAA,OAIJvO,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,WAAEsO,GAAetO,EAEvB,MAAO,IACFT,EACHgP,0BAA2BD,OAI/BxO,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACHgP,+BAA2B1O,OChQ/BC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAC9B,MAAO,IACFT,EACHiP,QAAS,IACJjP,EAAOiP,QACVhP,OAAAA,EACAsE,UAAAA,EACA2K,oBAAoB,QAK1B3O,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrCA,GAASmP,EAAAA,EAAAA,IAAanP,IACboP,EAAAA,EAAAA,IAAapP,OAIxBO,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,MAAE4O,GAAU5O,EAElB,MAAO,IACFT,EACHiP,QAAS,IACJjP,EAAOiP,QACVI,MAAAA,O,SC5BN9O,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,cACyB+K,EADzB,kBACwCC,EADxC,OAC2DrJ,EAD3D,OACmEC,EADnE,aAC2EC,EAD3E,QACyFC,GAC3F5F,EAEJ,MAAO,IACFT,EACHwP,YAAa,IACRxP,EAAOwP,YACVvP,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACA+K,cAAAA,EACAC,kBAAAA,EACArJ,OAAAA,EACAC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAOwP,YAAYrJ,OACrCC,aAAcA,GAAgBpG,EAAOwP,YAAYpJ,aACjDC,QAASA,GAAWrG,EAAOwP,YAAYnJ,SAEzCxE,gBAAiB,QAIrBtB,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEmG,EAAF,QAAUE,EAAV,aAAmBD,GAAiBpG,EAAOwP,YACjD,MAAO,IACFxP,EACHwP,YAAa,CACXrJ,OAAAA,EACAE,QAAAA,EACAD,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACHwP,YAAa,IACRxP,EAAOwP,YACVrJ,OAAAA,QAKN5F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACHwP,YAAa,IACRxP,EAAOwP,YACVpJ,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACHwP,YAAa,IACRxP,EAAOwP,YACVnJ,QAAAA,O,wCCJN,MAAMoJ,EAA0B,IAAIC,IAE9BC,GAA0BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GA6mB5DC,eAAe7H,EACbvC,EACAxF,EACA+L,EACAjE,GAGA,IAFA+H,EAEA,wDADAC,EACA,wDACA,MAAM/P,EAASyF,EAAKvE,GAEpB,IAAI8O,EACJ,OAAQjI,GACN,KAAKkI,EAAAA,GAAAA,UACHD,OAAY3P,EACZ,MACF,KAAK4P,EAAAA,GAAAA,OACHD,IAAcxF,KAAK0F,MAAMC,EAAAA,GAAqB,GAAK,GACnD,MACF,KAAKF,EAAAA,GAAAA,SACHD,IAAcG,EAAAA,GAAqB,GAIvC,MAAMhN,QAAeiN,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C3K,MAAM4K,EAAAA,EAAAA,KAAuB1J,EAAAA,EAAAA,MAAa3G,EAAQC,GAClD+L,SAAAA,EACAgE,UAAAA,EACAM,MAAOH,EAAAA,GACPlQ,SAAAA,IAGF,IAAKkD,EACH,OAGF,MAAM,SACJzB,EADI,MACM6O,EADN,MACahF,EADb,YACoBiF,GACtBrN,EAEJ,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb,MAAM8J,EAAgBzQ,IAAW6J,EAAAA,GAC7B9J,EAAO2J,qBAAqBtG,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEoN,EAAe,GAAoBC,OAAOjP,EAAU+O,GACpDG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCpJ,EAAMnC,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAElCzF,GAAS+Q,EAAAA,EAAAA,IAAoB/Q,EAAQC,EAAQ4Q,GAC7C7Q,EAAS+P,GACLiB,EAAAA,EAAAA,IAAkBhR,EAAQC,EAAQC,EAAUqH,IAC5C0J,EAAAA,EAAAA,IAAgBjR,EAAQC,EAAQC,EAAUqH,GAE9CvH,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxQ,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,OACtDxL,GAASoR,EAAAA,EAAAA,IAAkBpR,EAAQC,EAAQwQ,GAE3C,IAAIY,GAAYC,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQC,GAChD,MAAMqR,GAAcC,EAAAA,EAAAA,IAAkBxR,EAAQC,EAAQC,GAWtD,GATI6P,GAAcsB,GAAaE,IACxBA,EAAY/L,UAAUiM,EAAAA,EAAAA,IAA4BJ,EAAWE,KAChEvR,GAASiR,EAAAA,EAAAA,IAAgBjR,EAAQC,EAAQC,EAAUqR,GACnDF,GAAYC,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQC,GAC5CF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GACrEyP,GAAa,KAIZC,EAAiB,CACpB,MAAM0B,EAAa3B,EAAawB,EAAeF,GACzC,eAAEM,GAAmBC,EAAiBF,EAAYzF,EAAUjE,GAClEhI,GAAS6R,EAAAA,EAAAA,IAAuB7R,EAAQC,EAAQC,EAAUyR,IAG5D5P,EAAAA,EAAAA,IAAU/B,GA8CZ,SAAS4R,EACPE,EACA7F,EACAjE,GAEA,MAAM,OAAExC,GAAWsM,EACbC,EAAQ9F,EArBhB,SAA0B6F,EAAqB7F,GAC7C,OAAIA,EAAW6F,EAAU,GAChB,EAGL7F,EAAW6F,EAAUA,EAAUtM,OAAS,GACnCsM,EAAUtM,OAAS,EAGrBsM,EAAU3D,WAAU,CAAChN,EAAI6Q,IAC9B7Q,IAAO8K,GACH9K,EAAK8K,GAAY6F,EAAUE,EAAI,GAAK/F,IAUjBgG,CAAiBH,EAAW7F,IAAa,EAE5DiG,EADclK,IAAckI,EAAAA,GAAAA,UACM6B,EAASA,EAAQ,GAAMvM,EACzD2M,EAAOD,EAAoB9B,EAAAA,GAC3BgC,EAAKF,EAAoB9B,EAAAA,GAAqB,EAC9CuB,EAAiBG,EAAUpI,MAAMe,KAAKC,IAAI,EAAGyH,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQtK,GACN,KAAKkI,EAAAA,GAAAA,UACHmC,EAAeH,EAAoB,EACnCI,EAAcH,GAAQ,EACtB,MACF,KAAKjC,EAAAA,GAAAA,SACHmC,EAAeH,EAAoB1M,EACnC8M,EAAcF,GAAM5M,EAAS,EAC7B,MACF,KAAK0K,EAAAA,GAAAA,OACL,QACEmC,EAAeV,EAAenM,OAAS,EACvC8M,EAAcX,EAAenM,SAAW4K,EAAAA,GAI5C,MAAO,CAAEuB,eAAAA,EAAgBU,aAAAA,EAAcC,YAAAA,GAGzCxC,eAAeyC,EAAYC,GAczB,IAAI1E,EACJ,MAAM2E,EAAmBD,EAAOE,WAAa,CAACC,EAAkBC,KACzDnD,EAAwBoD,IAAID,KAC/B9E,EAAU8E,EACVnD,EAAwBqD,IAAIF,EAAgBH,IAG9C,MAAMzS,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACH+S,YAAa,CACXC,iBAAkB,IACbhT,EAAO+S,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,SAAAA,aAIxBrS,GAGAkS,EAAOS,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGR,MAAMnT,GAAS4G,EAAAA,EAAAA,MACf4L,EAAOvI,iBAAmBjK,EAAOiK,iBACjC,MAAM1I,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,SAAErB,GAAaqB,EAEhBiR,EAAOS,YAAc/S,IAAakB,EAAAA,KACrCoR,EAAOS,YAAaG,EAAAA,EAAAA,IAAyBpT,EAAQwS,EAAO9M,KAAKvE,GAAIjB,UAGjEmQ,EAAAA,EAAAA,IAAQ,cAAemC,EAAQC,GAEjCA,GAAoB3E,GACtB2B,EAAwB4D,OAAOvF,IA5zBnCvN,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJuH,EAAYkI,EAAAA,GAAAA,OADR,gBAEJF,GAAkB,GAChBvP,GAAW,GAEf,IAAI,OAAER,EAAF,SAAUC,GAAaO,GAAW,GAEtC,IAAKR,EAAQ,CACX,MAAMsB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGFtB,EAASsB,EAAmBtB,OAC5BC,EAAWqB,EAAmBrB,SAGhC,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,IAAKyF,GAAQA,EAAK4N,aAChB,OAGF,MAAM5O,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChDmR,GAAYC,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQC,GAC5CqR,GAAcC,EAAAA,EAAAA,IAAkBxR,EAAQC,EAAQC,GAEtD,GAAKwE,GAAgBA,EAAYc,QAAUwC,IAAckI,EAAAA,GAAAA,OAelD,CACL,MAAMjE,EAAWjE,IAAckI,EAAAA,GAAAA,UAA8BxL,EAAY,GAAKA,EAAYA,EAAYc,OAAS,GACzGuK,EAAajL,QAAQyM,GACrBG,EAAc3B,EAAawB,EAAcF,GACzC,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAYzF,EAAUjE,GAQ3C,GANIqK,IACFrS,GAAS6R,EAAAA,EAAAA,IAAuB7R,EAAQC,EAAQC,EAAUyR,IAahE7B,eACEtP,EACA8R,EAAsBvC,EAAqBC,EAC3CtK,EAAexF,EAAkB8H,EAA8BiE,GAE1DqG,SACGrK,EACJvC,EAAMxF,EAAU+L,EAAUjE,EAAW+H,EAAYC,GAIhDA,UAEGuD,QAAQC,UACdhT,EAAQyH,qBAAqB,CAC3BhI,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAU8H,UAAAA,EAAWgI,iBAAiB,KAzBpDyD,CAAejT,EAAS8R,EAAavC,EAAYC,EAAiBtK,EAAMxF,EAAU8H,EAAWiE,GAE9F+D,EACF,WA9B+E,CACjF,MAAM/D,GAAWyH,EAAAA,EAAAA,IAAuB1T,EAAQC,KAAW0T,EAAAA,EAAAA,IAAqB3T,EAAQC,EAAQC,GAC1F6P,EAAajL,QAAQmH,GAAYoF,IAAcA,EAAUtJ,SAASkE,IAClEyF,GAAc3B,EAAawB,EAAcF,IAAc,IACvD,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAYzF,EAAUiE,EAAAA,GAAAA,QAEvCmC,GAAgBV,EAAenM,QAAU4K,EAAAA,KAC3CpQ,GAAS6R,EAAAA,EAAAA,IAAuB7R,EAAQC,EAAQC,EAAUyR,IAGvDW,GACErK,EAAqBvC,EAAMxF,EAAU+L,EAAUiE,EAAAA,GAAAA,OAA0BH,EAAYC,GAqB9F,OAAOhQ,MAuBTO,EAAAA,EAAAA,IAAiB,eAAeuP,MAAO9P,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,iBACeqP,EADf,aACiCC,GACnCpT,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMnC,QA0lBRuM,eAA2BpK,EAAenB,EAAmBqP,GAC3D,MAAMxQ,QAAeiN,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3K,KAAAA,EAAMnB,UAAAA,IACrD,IAAKnB,EACH,OAGF,GAAIA,IAAW0Q,EAAAA,GAAiB,CAC9B,GAAIF,EAAkB,CACpB,IAAI5T,GAAS4G,EAAAA,EAAAA,MACb,MAAMmN,GAAeC,EAAAA,EAAAA,IAAkBhU,EAAQ0F,EAAKvE,GAAIyS,GACxD5T,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQ0F,EAAKvE,GAAIyS,EAAkB,IACzDG,EACHG,sBAAkB5T,KAEpByB,EAAAA,EAAAA,IAAU/B,GAGZ,OAGF,IAAIA,GAAS4G,EAAAA,EAAAA,MAKb,OAJA5G,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQ0F,EAAKvE,GAAIoD,EAAWnB,EAAOG,SAC9DvD,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,QAC7DzO,EAAAA,EAAAA,IAAU/B,GAEHoD,EAAOG,QAnnBQ4Q,CAAYzO,EAAMnB,EAAWqP,GACnD,GAAIrQ,GAAWsQ,EAAc,CAC3B,MAAM,cAAE9N,EAAF,WAAiBqO,GAAeP,EAEtC,OAAOQ,EAAAA,EAAAA,KACLzN,EAAAA,EAAAA,MACArD,EACAtD,EACA8F,EACAqO,QAON7T,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAMc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAEnC,GAAa,cAATF,IAAyBZ,EAAQ6T,YACnC,MAAO,IACFtU,EACH2B,SAAU,IACL3B,EAAO2B,SACVC,qBAAsBnB,IAK5B,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1BuS,EAAS,IACV/R,EACHiF,KAAAA,EACAuN,YAAYhO,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/CqU,WAAWC,EAAAA,EAAAA,IAAgBxU,EAAQC,EAAQC,GAC3CuU,QAAQC,EAAAA,EAAAA,IAAa1U,EAAQC,IAG/BO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQmU,oBAAoB,CAAE1U,OAAAA,EAAQC,SAAAA,EAAU0U,OAAO,IAEvD,MAAMC,GAAYpU,EAAQqU,aAAerU,EAAQqU,YAAYtP,QAAU,EACjEuP,GAAaF,GAAYpU,EAAQqU,aAAerU,EAAQqU,YAAYtP,OAAS,EAEnF,GAAIqP,EAAU,CACZ,MAAM,YAAEC,KAAgBE,GAAexC,EACvCD,EAAY,IACPyC,EACHtC,WAAYoC,EAAcA,EAAY,QAAKxU,SAExC,GAAIyU,EAAW,CACpB,MAAM,KACJtQ,EADI,SACEwQ,EADF,YACYH,KAAgBI,GAC9B1C,EACE2C,GAAqBC,EAAAA,EAAAA,IAAMN,EAAaO,EAAAA,IAC9C,IAAK,IAAIrD,EAAI,EAAGA,EAAImD,EAAmB3P,OAAQwM,IAAK,CAClD,MAAOsD,KAAoBC,GAAmBJ,EAAmBnD,GAC3D7K,EAAa,GAAEqO,KAAKC,QAAQzD,IAElCO,EAAY,IACP2C,EACHzQ,KAAY,IAANuN,EAAUvN,OAAOnE,EACvB2U,SAAgB,IAANjD,EAAUiD,OAAW3U,EAC/BoS,WAAY4C,EACZnO,UAAWoO,EAAgB/P,OAAS,EAAI2B,OAAY7G,IAGtDiV,EAAgB3M,SAAS8J,IACvBH,EAAY,IACP2C,EACHxC,WAAAA,EACAvL,UAAAA,YAID,CACL,MAAM,KACJ1C,EADI,SACEwQ,EADF,YACYH,EADZ,WACyB7B,KAAeiC,GAC1C1C,EAEA/N,GACF8N,EAAY,IACP2C,EACHzQ,KAAAA,EACAwQ,SAAAA,EACAhC,WAAAA,IAIJ6B,EAAYlM,SAAS8J,IACnBH,EAAY,IACP2C,EACHxC,WAAAA,YAQRnS,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,iBAAEwJ,GAAqBjK,GACvB,KAAEyE,EAAF,SAAQwQ,GAAaxU,EAErBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUmS,EAAAA,EAAAA,IAAqB1V,EAAQC,EAAQC,EAAUgH,GAC1DxB,GAASnC,KAIT8M,EAAAA,EAAAA,IAAQ,cAAe,CAC1B3K,KAAAA,EAAMnC,QAAAA,EAASkB,KAAAA,EAAMwQ,SAAAA,EAAUV,WAAWC,EAAAA,EAAAA,IAAgBxU,EAAQC,EAAQC,GAAW+J,iBAAAA,IAGvFzJ,EAAQmV,aAAa,CAAEpR,eAAWjE,SAGpCC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxB8C,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,GAC5CkO,EAAmBlP,GAAWkM,EAAwBmG,IAAIrS,EAAQsS,iBAAmBtS,EAAQpC,IAC/FsR,IACFqD,EAAAA,EAAAA,IAAkBrD,GAGpBjS,EAAQuK,UAAU,CAChB,QAAS,iBACTxD,IAAK,CAAChD,GACNtE,OAAAA,QAIJM,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASC,KAC9C,MAAM,OAAER,EAAF,SAAUC,EAAV,MAAoB6V,GAAUtV,EACpC,IAAKsV,EACH,OAGF,MAAM,KAAEtR,EAAF,SAAQwQ,GAAac,EACrBrQ,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAchC,OAZIC,IAAakB,EAAAA,KACViP,EAAAA,EAAAA,IAAQ,YAAa,CACxB3K,KAAAA,EACAjB,KAAAA,EACAwQ,SAAAA,EACAe,cAAc/Q,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,KAIrDF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,QAAS6V,IACtDE,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAEiW,UAAWzL,KAAK0F,MAAMqF,KAAKC,MAAQ,WAK3ElV,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoBiW,GAAc1V,EACxC,KAAK2V,EAAAA,EAAAA,IAAYpW,EAAQC,EAAQC,GAC/B,OAGF,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAShC,OAPKkW,GAAajW,IAAakB,EAAAA,KACxBiP,EAAAA,EAAAA,IAAQ,aAAc3K,GAG7B1F,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAASI,IACtD2V,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAEiW,eAAW5V,QAKnDC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoBqU,GAAc9T,EAExC,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAaqU,OAGnEhU,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAMiF,GAAOoD,EAAAA,EAAAA,IAAkB9I,GAC/B,IAAK0F,EACH,OAGF,MAAM,UACJnB,EADI,QACO8R,EADP,UACgBC,EADhB,SAC2BC,GAC7B9V,GAEC4P,EAAAA,EAAAA,IAAQ,aAAc,CACzB3K,KAAAA,EAAMnB,UAAAA,EAAW8R,QAAAA,EAASC,UAAAA,EAAWC,SAAAA,QAIzChW,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQS,EAAQR,QACnCyF,GAOPoK,eAAgCpK,SACxB2K,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3K,KAAAA,IACpC,IAAI1F,GAAS4G,EAAAA,EAAAA,MACb5G,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAa,KAC1EW,EAAAA,EAAAA,IAAU/B,GAPLwW,CAAiB9Q,OAUxBnF,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,WAAEsC,EAAF,mBAAc0T,GAAuBhW,EACrCc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3BoQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3K,KAAAA,EAAM3C,WAAAA,EAAY0T,mBAAAA,IAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgB3W,EAAQC,EAAQC,GAC9C6C,EAAWgF,SAAS2O,IACtBlW,EAAQmV,aAAa,CAAEpR,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,WAAEsC,GAAetC,EACjBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3BoQ,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3K,KAAAA,EAAM3C,WAAAA,IAEhD,MAAM2T,GAAYE,EAAAA,EAAAA,IAAyB5W,EAAQC,GAC/C8C,EAAWgF,SAAS2O,IACtBlW,EAAQmV,aAAa,CAAEpR,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,iBAAiBuP,MAAO9P,EAAQQ,EAASC,KAAY,MACpE,MAAM,OAAER,EAAF,mBAAUwW,GAAuBhW,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAM8E,EAAK,UAAG9E,EAAKE,mBAAR,aAAG,EAAkBzE,SAE1BkP,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3K,KAAAA,EAAM+Q,mBAAAA,EAAoBjM,MAAAA,IAE3D,MAAMqM,GAAa1W,EAAAA,EAAAA,IAAyBH,GACxC6W,GAAcA,EAAW5W,SAAWA,GACtCO,EAAQ0B,SAAS,CAAEf,QAAIb,QAI3BC,EAAAA,EAAAA,IAAiB,kBAAkBuP,MAAO9P,EAAQQ,EAASC,KACzD,MAAM,WACJsC,EADI,OACQ+T,EADR,YACgBC,GAClBtW,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1BmD,QAAeiN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C2G,KAAMtR,EAAM3C,WAAAA,EAAY+T,OAAAA,EAAQC,YAAAA,IAGlCvW,EAAQ6I,iBAAiB,CACvB9F,QAASH,EACL,uDACA,uEAIR7C,EAAAA,EAAAA,IAAiB,qBAAqBuP,MAAO9P,EAAQQ,EAASC,KAC5D,MAAM,OAAEiM,EAAF,OAAUzM,EAAV,SAAkBC,GAAaO,EACrC,GAAIR,IAAWD,EAAOiX,cAAe,OAErC,MAAMvR,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,SAEC2K,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC2G,KAAMtR,EAAMxF,SAAAA,EAAUwM,OAAAA,QAI1BnM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,iBAAEwJ,GAAqBjK,EACvBuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAO4K,EAAAA,EAAAA,IAAuBtQ,EAAQC,EAAQC,GACpD,IAAKwF,EACH,OAGF,MAAM,MAAE8E,GAAU/J,EASlB,GAPAkP,GAAwB,MACjBU,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCpG,iBAAAA,EAAkBvE,KAAAA,EAAMxF,SAAAA,EAAUsK,MAAAA,OAKlCtK,IAAakB,EAAAA,GACf,OAGEnB,IAAW6J,EAAAA,KACb9J,EAAS,IACJA,EACH2J,qBAAsB3J,EAAO2J,qBAAqBtG,KAAKwK,GAC9CA,EAAa/C,UAAY+C,EAAa1M,IAAMqJ,EAAQ,IAAKqD,EAAc/C,UAAU,GAAU+C,MAKxG,MAAMnJ,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChDgX,GAAQC,EAAAA,EAAAA,IAAoBnX,EAAQC,EAAQC,GAClD,IAAKwE,IAAgBwS,IAAUxR,EAAK0R,YAClC,OAAOpX,EAGT,MAAMqX,EA8iBR,SAAwB9P,EAAe4K,EAAcC,GACnD,IAAIkF,EAAQ,EAEZ,IAAK,IAAItF,EAAI,EAAGuF,EAAIhQ,EAAI/B,OAAQwM,EAAIuF,IAC9BhQ,EAAIyK,IAAMG,GAAQ5K,EAAIyK,IAAMI,GAC9BkF,MAGE/P,EAAIyK,IAAMI,IALuBJ,KAUvC,OAAOsF,EA3jBWE,CAAe9S,EAAcwS,EAAO1M,GACtD,OAAK6M,GAIEpB,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAChCwX,uBAAwBjN,EACxB4M,YAAa3M,KAAKC,IAAI,EAAGhF,EAAK0R,YAAcC,KALrCrX,MASXO,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOoD,EAAAA,EAAAA,IAAkB9I,GAC/B,IAAK0F,EACH,OAGF,MAAM,WAAE3C,GAAetC,GAElB4P,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3K,KAAAA,EAAM3C,WAAAA,QAG3CxC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,KAAEgE,GAAShE,GA6InBqP,eAAkCvM,GAChC,MAAMmU,QAAuBrH,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9M,QAAAA,KAE9DxB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACH8Q,eAAAA,IAjJGC,CAAmBlT,OAG1BlE,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,GAAKA,EAAO0X,eAIZ,MAAO,IACF1X,EACH0X,oBAAgBpX,OAIpBC,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAER,EAAF,UAAUsE,EAAV,QAAqBqT,GAAYnX,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE5ByF,IACG2K,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3K,KAAAA,EAAMnB,UAAAA,EAAWqT,QAAAA,QAIpDrX,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KACJiF,EADI,UACEnB,EADF,OACasT,EADb,OACqBC,EADrB,MAC6BvH,EAD7B,kBACoCwH,GACtCtX,GAgVNqP,eACEpK,EACAnB,EACAsT,EACAC,EACAvH,EACAwH,GAEA,MAAM3U,QAAeiN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD3K,KAAAA,EAAMnB,UAAAA,EAAWsT,OAAAA,EAAQC,OAAAA,EAAQvH,MAAAA,IAGnC,IAAKnN,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb5G,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,OAC7D,MAAM,OAAE/J,GAAWzG,EAAOwG,aAE1BzE,EAAAA,EAAAA,IAAU,IACL/B,EACHwG,YAAa,IACRxG,EAAOwG,YACVC,OAAQ,IACHA,EACH,CAACoR,IAASG,EAAAA,EAAAA,IAAO,KACVD,GAAqBtR,GAAUA,EAAOoR,GAAUpR,EAAOoR,GAAU,MAClEzU,GAAUA,EAAOoN,MAAMnN,KAAK4U,GAASA,EAAK9W,QAGlD+W,QAAS,IACHlY,EAAOwG,YAAY0R,QAAUlY,EAAOwG,YAAY0R,QAAU,GAC9D,CAACL,GAASzU,EAAO+U,YAAc,OAhXhCC,CAAsB1S,EAAMnB,EAAWsT,EAAQC,EAAQvH,EAAOwH,OAGrExX,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQ0M,EAAQjM,KACnD,MAAM,WAAEyH,EAAF,WAAcnF,EAAd,SAA0BjB,GAAa9B,EAAO6B,gBAC9CwW,EAAWnQ,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,EACzDgY,EAASxW,GAAW6D,EAAAA,EAAAA,IAAW3F,EAAQ8B,QAAYxB,EACnDqB,EAAWuG,GAAcnF,EAC3BA,EACCW,MAAK,CAAC6U,EAAGC,IAAMD,EAAIC,IACnBnV,KAAKlC,IAAO6S,EAAAA,EAAAA,IAAkBhU,EAAQkI,EAAY/G,KAAKmC,OAAmBwB,cAC3ExE,EAEJ,IAAK+X,IAAaC,IAAW3W,EAC3B,OAGF,MAAM,SAAE4U,EAAF,YAAYjC,GAAgB7T,EAC5BgU,GAASC,EAAAA,EAAAA,IAAa1U,EAAQ8B,GAE9B2W,EAAe9W,EAAS2B,QAAQoV,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAajT,SACV6K,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9BgI,SAAAA,EACAC,OAAAA,EACA3W,SAAU8W,EACVxO,kBAAkBrD,EAAAA,EAAAA,MAAYqD,iBAC9BsM,SAAAA,EACAjC,YAAAA,EACAG,OAAAA,IAIJ9S,EACG2B,QAAQoV,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3C9P,SAASrF,IACR,MAAM,KAAEkB,EAAF,SAAQwQ,GAAa1R,EAAQ2G,QAAQzF,MAAQ,IAC7C,QAAE+I,EAAF,KAAWoL,GAASrV,EAAQ2G,QAE7BqI,EAAY,CACf7M,KAAM4S,EACN7T,KAAAA,EACAwQ,SAAAA,EACAzH,QAAAA,EACAoL,KAAAA,EACArC,SAAAA,EACAjC,YAAAA,EACAG,OAAAA,QAIN1S,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACH/E,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GA+YPoK,eAAoCpK,GAClC,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3K,KAAAA,IACxD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,GAAayB,EAEfyN,GAAOC,EAAAA,EAAAA,IAAqBnP,EAAU,MACtC4F,EAAMnC,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAAQ/B,MAAK,CAAC6U,EAAGC,IAAMA,EAAID,IAE7D,IAAIvY,GAAS4G,EAAAA,EAAAA,MACb5G,GAAS6Y,EAAAA,EAAAA,IAAyB7Y,EAAQ0F,EAAKvE,GAAI0P,GACnD7Q,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,eAAgBmG,IAC7ExF,EAAAA,EAAAA,IAAU/B,GAzZL8Y,CAAqBpT,OAG5BnF,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,OACJR,EADI,GACIkB,GACNV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAIA2K,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC3K,KAAAA,EACA6B,IAAK,CAACpG,SAIVZ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,YACe+P,GACjB7T,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,EAAUmC,IAAQqT,EAAAA,EAAAA,IAAuB/Y,EAAQ0F,EAAKvE,GAAIoD,GAC3DmB,GAASnC,IAIT8M,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC3K,KAAAA,EACAnC,QAAAA,EACA+Q,YAAAA,QAIJ/T,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,GAAaO,EACvBiF,GAAO4K,EAAAA,EAAAA,IAAuBtQ,EAAQC,EAAQC,GAC/CwF,IAIA2K,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3K,KAAAA,EAAMxF,SAAAA,QAyQlDK,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GA+DPoK,eAAkCpK,GAChC,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE3K,KAAAA,IACtD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,EAAF,MAAY6J,EAAZ,MAAmBgF,GAAUpN,EAE7ByN,GAAOC,EAAAA,EAAAA,IAAqBnP,EAAU,MACtC4F,EAAMnC,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAAQ/B,MAAK,CAAC6U,EAAGC,IAAMA,EAAID,IAE7D,IAAIvY,GAAS4G,EAAAA,EAAAA,MACb5G,GAAS+Q,EAAAA,EAAAA,IAAoB/Q,EAAQ0F,EAAKvE,GAAI0P,GAC9C7Q,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAamG,GAC1EvH,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxQ,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,QACtDzJ,EAAAA,EAAAA,IAAU/B,GA3ELgZ,CAAmBtT,OAG1BnF,EAAAA,EAAAA,IAAiB,cAAcuP,MAAO9P,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,cAAe,CAAE3K,KAAAA,EAAMnB,UAAAA,IACpD,OAAKnB,GAIE6Q,EAAAA,EAAAA,KAAkBrN,EAAAA,EAAAA,MAAa3G,EAAQsE,EAAW,CACvD0U,cAAe7V,SALjB,MASF7C,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OAAER,EAAF,SAAUiZ,GAAazY,EACvBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BkZ,GAAaxT,EAAAA,EAAAA,IAAW3F,EAAQkZ,KAAaE,EAAAA,EAAAA,IAAWpZ,EAAQkZ,GACtE,GAAKxT,GAASyT,EAMd,OAFK9I,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEoE,OAAQ0E,EAAYzT,KAAAA,KAEjDuQ,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAChCoZ,SAAU,IACL3T,EAAK2T,SACRH,SAAAA,SAKN3Y,EAAAA,EAAAA,IAAiB,cAAcuP,MAAO9P,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,cAAe,CAAE3K,KAAAA,IAC9C,OAAKtC,GAMLpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,OAC7DxQ,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoI,MAAO,OAC7DxL,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAEqZ,UAAWlW,EAAOmE,QAR/C0O,EAAAA,EAAAA,KAAWrP,EAAAA,EAAAA,MAAa3G,EAAQ,CACrCqZ,UAAW,SA+CjB/Y,EAAAA,EAAAA,IAAiB,yBAAyBuP,MAAO9P,EAAQQ,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE3K,KAAAA,IACzD,OAAKtC,GAILpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASuZ,EAAAA,EAAAA,IAAuBvZ,EAAQC,EAAQmD,EAAOzB,SAAS,IAChE3B,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,OAC7DxQ,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoI,MAAO,aAP7D,MAWFjL,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUiW,EAAAA,EAAAA,IAAuBxZ,EAAQC,GAC1CyF,GAASnC,IAIT8M,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE3K,KAAAA,EAAM+T,OAAQlW,EAAQmW,c,cCliC/D,MAGMC,GAAkBC,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GA+ZpDC,eAAe+J,EAAWnZ,EAAeoX,GACvC,MAAM1U,QAAeiN,EAAAA,EAAAA,IAAQ,aAAc,CAAE3P,MAAAA,EAAOoX,OAAAA,IAC/C1U,IAILrB,EAAAA,EAAAA,KAAU+X,EAAAA,EAAAA,KAAgBlT,EAAAA,EAAAA,OAAckR,EAAQ1U,EAAO4I,KAAM5I,EAAO+U,cAnatE5X,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,KAAE0N,GAAS1N,EAAO6L,SAASkO,OAAS,IAkM5CjK,eAA+BpC,GAC7B,MAAMsM,QAAsB3J,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3C,KAAAA,IACrDsM,IAILjY,EAAAA,EAAAA,KAAUkY,EAAAA,EAAAA,KACRrT,EAAAA,EAAAA,MACA,QACAoT,EAActM,KACdsM,EAAcE,OA3MXC,CAAgBzM,OAGvBnN,EAAAA,EAAAA,IAAiB,qBAAqBuP,MAAO9P,EAAQQ,KACnD,MAAQ4Z,OAAQC,GAAgBra,EAAO6L,SAASkO,MAC1CO,EAASta,EAAO6L,SAAS0O,SAC/B,GAAKF,GAAgBA,EAAY7U,OAIjC,IAAK,IAAIwM,EAAI,EAAGA,EAAIqI,EAAY7U,OAAQwM,IAAK,CAC3C,MAAM7Q,EAAKkZ,EAAYrI,GACnBsI,EAAOnZ,GAAI0K,WAGfrL,EAAQga,aAAa,CAAEC,aAActZ,IAEjC6Q,EAvB0B,IAuBQ,GAAKA,EAAI,SACvC0I,EAAAA,EAAAA,IAzBgB,WA8B5Bna,EAAAA,EAAAA,IAAiB,sBAAuBP,IACtC,MAAM,KAAE0N,GAAS1N,EAAO6L,SAAS4B,QAAU,IAuL7CqC,eAAkCpC,GAChC,MAAMiN,QAAuBtK,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE3C,KAAAA,IAC9D,IAAKiN,EACH,OAGF,MAAM3a,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACH6L,SAAU,IACL7L,EAAO6L,SACV4B,OAAQkN,KAlMPC,CAAmBlN,OAG1BnN,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAE0N,GAAS1N,EAAO6L,SAASgP,UAAY,IAmM/C/K,eAAoCpC,GAClC,MAAMoN,QAAyBzK,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3C,KAAAA,IAClE,IAAKoN,EACH,OAGF,MAAM9a,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACH6L,SAAU,IACL7L,EAAO6L,SACVgP,SAAUC,KA9MTC,CAAqBrN,OAG5BnN,EAAAA,EAAAA,IAAiB,wBAAwBuP,MAAAA,IACvC,MAAM,KAAEpC,GAAS1N,EAAO6L,SAASmP,UAAY,GAEvCA,QAAiB3K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEjD,MAAO,OAAQM,KAAAA,IACzE,GAAKsN,EAML,OAFAhb,GAAS4G,EAAAA,EAAAA,MAEF,IACF5G,EACH6L,SAAU,IACL7L,EAAO6L,SACVmP,SAAU,CACRtN,KAAMsN,EAAStN,KACf7B,SAAUmP,EAASnP,SAASvI,QAAQkK,GAA8B,OAAlBA,EAAQJ,eAMhE7M,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAE0N,GAAS1N,EAAO6L,SAASoP,UAAY,IAyL/CnL,eAAoCpC,GAClC,MAAMwN,QAAyB7K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3C,KAAAA,IAC7DwN,IAILnZ,EAAAA,EAAAA,KAAUkY,EAAAA,EAAAA,KACRrT,EAAAA,EAAAA,MACA,WACAsU,EAAiBxN,KACjBwN,EAAiBhB,OAlMdiB,CAAqBzN,OAG5BnN,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,aAAEga,EAAF,oBAAgBW,GAAwB3a,EAC9C,IAAI,qBAAE4a,GAAyB5a,EAE/B,IAAK4a,IAAyBD,EAAqB,CACjD,MAAME,GAAaC,EAAAA,EAAAA,IAAiBvb,EAAQya,GAC5C,IAAKa,EACH,OAGFD,EAAuBC,EAAWE,YAyLtC1L,eAA4B2K,EAAsBe,EAAoBJ,GACpE,MAAME,QAAmBjL,EAAAA,EAAAA,IACvB,gBACA,CAAE+K,oBAAAA,EAAqBX,aAAAA,EAAce,WAAAA,IAEvC,IAAKF,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOjH,EAAP,MAAiB4P,GAAUH,EAEjC,IAAItb,GAAS4G,EAAAA,EAAAA,MAEb5G,GAAS0b,EAAAA,EAAAA,IAAiB1b,EAAQ8S,EAAI3R,GAAI,IAAK2R,EAAKjH,SAAAA,EAAU4P,MAAAA,IAE9D,MAAME,EAAe3b,EAAO6L,SAAS+P,SAASxO,MAC1CuO,GAAgBF,EAAME,KACxB3b,GAAS6b,EAAAA,EAAAA,IAAwB7b,KAGnC+B,EAAAA,EAAAA,IAAU/B,GA1MLwa,CAAaC,EAAcY,EAAsBD,OAGxD7a,EAAAA,EAAAA,IAAiB,sBAAsB,MA0MvCuP,iBACE,MAAMwL,QAAmBjL,EAAAA,EAAAA,IAAQ,uBACjC,IAAKiL,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOjH,GAAayP,GAE1BvZ,EAAAA,EAAAA,KAAU+Z,EAAAA,EAAAA,KAAsBlV,EAAAA,EAAAA,MAAa,IAAKkM,EAAKjH,SAAAA,KAjNlDkQ,GAoNPjM,iBACE,MAAMwL,QAAmBjL,EAAAA,EAAAA,IAAQ,6BACjC,IAAKiL,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOjH,GAAayP,GAE1BvZ,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHoV,qBAAsB,IAAKlJ,EAAKjH,SAAAA,KA7N7BoQ,OAGP1b,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAM,KAAE0N,GAAS1N,EAAOgM,KAAKkQ,OAkV/BpM,eAA6BpC,GAC3B,MAAMyO,QAAkB9L,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3C,KAAAA,IACpD,IAAKyO,EACH,OAGF,MAAMnc,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHgM,KAAM,IACDhM,EAAOgM,KACVkQ,MAAOC,KA7VNC,CAAc1O,OAGrBnN,EAAAA,EAAAA,IAAiB,WAAWuP,MAAO9P,EAAQQ,EAASC,KAAY,MAC9D,MAAM,IAAE4b,EAAF,aAAOC,GAAiB7b,EAE9B,UADqB4P,EAAAA,EAAAA,IAAQ,UAAW,CAAEgM,IAAAA,EAAKC,aAAAA,IAE7C,OAIF,MAAMtQ,GAAO,WADbhM,GAAS4G,EAAAA,EAAAA,OACWoF,KAAKkQ,MAAMlQ,YAAlB,eAAwB1I,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAOkb,EAAIlb,QAAO,GACpEob,EAAUD,EAAetQ,EAAO,CAACqQ,KAAQrQ,GAE/C,MAAO,IACFhM,EACHgM,KAAM,IACDhM,EAAOgM,KACVkQ,MAAO,IACFlc,EAAOgM,KAAKkQ,MACflQ,KAAMuQ,SAMdhc,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,QAAE+M,GAAY/M,EAEhB+M,IACG6C,EAAAA,EAAAA,IAAQ,cAAe,CAAE7C,QAAAA,QAIlCjN,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,QAAE+M,GAAY/M,EAEhB+M,GAuLN,SAAuBA,GACrB,MAAMxN,GAAS4G,EAAAA,EAAAA,OAIf7E,EAAAA,EAAAA,IAAU,IACL/B,EACH6L,SAAU,IACL7L,EAAO6L,SACVgP,SAAU,IACL7a,EAAO6L,SAASgP,SACnBhP,SAAU7L,EAAO6L,SAASgP,SAAShP,SAASvI,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAOqM,EAAQrM,WAK/EkP,EAAAA,EAAAA,IAAQ,cAAe,CAAE7C,QAAAA,EAASgP,QAAQ,IAtMxCC,CAAcjP,OAIvBjN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,aAAEga,GAAiBha,EACnB6a,GAAaC,EAAAA,EAAAA,IAAiBvb,EAAQya,GAC5C,IAAKa,EACH,OAGF,MAAM,WAAEE,EAAF,cAAckB,GAAkBpB,GAEjCjL,EAAAA,EAAAA,IAASqM,EAAsC,sBAAtB,oBAA6C,CAAEjC,aAAAA,EAAce,WAAAA,QAG7Fjb,EAAAA,EAAAA,IAAiB,qBAAqBuP,MAAO9P,EAAQQ,EAASC,KAAoC,QAChG,MAAM,SAAEkc,GAAalc,EAErB,IAAImc,EAAuB5c,EAAO6c,cAAcF,GAChD,aAAIC,SAAJ,OAAI,EAAsBE,UACxB,QAGF/a,EAAAA,EAAAA,IAAU,IACL/B,EACH6c,cAAe,IACV7c,EAAO6c,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAKjB,MAAMD,QAAsBxM,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDsM,SAAAA,EACAI,YAAaH,EAAuBA,EAAqB/S,QAAU,IAMrE,OAFA+S,GADA5c,GAAS4G,EAAAA,EAAAA,OACqBiW,cAAcF,GAEvCE,EAaE,IACF7c,EACH6c,cAAe,IACV7c,EAAO6c,cACV,CAACF,GAAW,CACVG,WAAW,EACXjT,QAASgT,EAAchT,QACvBmT,SAAU,IACR,UAAIJ,SAAJ,aAAI,EAAsBI,YACvBH,EAAcG,aArBhB,IACFhd,EACH6c,cAAe,IACV7c,EAAO6c,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,SAuJrBvc,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAEdC,GACGiZ,GAAgB,MAqDzB7J,eAA8BpP,EAAegN,GAC3C,MAAMtK,QAAeiN,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3P,MAAAA,EAAOgN,UArDpDuP,IAuDJ,IAAK7Z,EACH,OAGF,MAAMpD,GAAS4G,EAAAA,EAAAA,OACT,SAAE2T,EAAF,MAAYR,GAAU/Z,EAAO6L,SAE7BE,EAAY3I,EAAO8W,KAAK7W,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAE1C4Y,EAAMK,QACRL,EAAMK,OAAOxR,SAASzH,IACpB,IAAK4K,EAAUhE,SAAS5G,GAAK,CAC3B,MAAM,MAAE+b,GAAU3C,EAASpZ,IAAO,GAC9B+b,IAASC,EAAAA,EAAAA,GAAYD,EAAOxc,IAC9BqL,EAAUJ,QAAQxK,QAM1BY,EAAAA,EAAAA,KAAUkY,EAAAA,EAAAA,IACRja,EACA,SACAoD,EAAOsK,KACPtK,EAAO8W,KACPnO,IAhFEkR,CAAevc,UAKrBH,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAEG,iBAAVC,GACJiZ,GAAgB,KACnBE,EAAWnZ,UAKjBH,EAAAA,EAAAA,IAAiB,kBAAmBP,IAClC,MAAM,MAAEU,EAAF,OAASoX,GAAW9X,EAAOgM,KAAKF,OAEjB,iBAAVpL,GACJiZ,GAAgB,KACnBE,EAAWnZ,EAAOoX,UAKxBvX,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAE2M,GAAU3M,GACZ,KAAEiN,GAAS1N,EAAO6L,SAAS+P,SAE5BjC,GAAgB,MAiFvB7J,eAAoC1C,EAAeM,GACjD,IAAI1N,GAAS4G,EAAAA,EAAAA,OACb7E,EAAAA,EAAAA,IAAU,IACL/B,EACH6L,SAAU,IACL7L,EAAO6L,SACV+P,SAAU,IACL5b,EAAO6L,SAAS+P,SACnBxO,MAAAA,MAKN,MAAMhK,QAAeiN,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEjD,MAAAA,EAAOM,KAAAA,IAE/D1N,GAAS4G,EAAAA,EAAAA,MAEJxD,GAAUpD,EAAO6L,SAAS+P,SAASxO,QAAUA,IAIlDpN,GAASod,EAAAA,EAAAA,IAAuBpd,EAAQoN,EAAOhK,EAAOyI,SAAUzI,EAAOsK,OAEvE3L,EAAAA,EAAAA,IAAU/B,IAvGRqd,CAAqBjQ,EAAOM,UAIhCnN,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACH6L,SAAU,IACL7L,EAAO6L,SACV+P,SAAU,SAKhBrb,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,oBAAE2a,GAAwB3a,EAChC,MAAO,IACFT,EACHsd,0BAA2BlC,M,aC5X/B,MAAMzB,GAAkBC,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAuFpDC,eAAeyN,IAEb,IACIna,EAFJ1C,EACA,uDADQ,GAAIW,EACZ,uCAD8Cmc,EAC9C,uCADmE9X,EACnE,uCADmF+X,EACnF,uCADqGC,EACrG,uCAGA,GAAIhY,EAAM,CACR,MAAMiY,QAAoBtN,EAAAA,EAAAA,IAAQ,sBAAuB,CACvD3K,KAAAA,EACAhF,MAAAA,EACAW,KAAAA,EACAkP,MAAOqN,EAAAA,GACP3R,SAAUuR,EACVE,QAAAA,EACAD,QAAAA,IAGF,GAAIE,EAAa,CACf,MAAM,SACJhc,EADI,MACM6O,EADN,WACaqN,EADb,aACyBC,GAC3BH,EAEJva,EAAS,CACPzB,SAAAA,EACA6O,MAAAA,EACAhF,MAAO,GACPqS,WAAAA,EACAE,SAAUD,SAId1a,QAAeiN,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C3P,MAAAA,EACA8c,WAAAA,EACAjN,MAAOqN,EAAAA,GACPvc,KAAAA,EACAoc,QAAAA,EACAC,QAAAA,IAIJ,IAAI1d,GAAS4G,EAAAA,EAAAA,MACb,MAAMoX,GAAqBC,EAAAA,EAAAA,IAA+Bje,GAC1D,IAAKoD,GAAqB,KAAV1C,GAAgBA,IAAUsd,EAExC,YADAjc,EAAAA,EAAAA,KAAUmc,EAAAA,EAAAA,IAAiCle,EAAQ,CAAE2B,UAAU,KAIjE,MAAM,SACJA,EADI,MACM6O,EADN,MACahF,EADb,WACoBqS,EADpB,SACgCE,GAClC3a,EAEAoI,EAAMhG,SACRxF,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,QAGpDgF,EAAMhL,SACRxF,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,QAGpD7O,EAAS6D,SACXxF,GAASme,EAAAA,EAAAA,IAAYne,EAAQ2B,IAG/B3B,GAASoe,EAAAA,EAAAA,IACPpe,EACA2B,EACAkc,EACAxc,EACA0c,IAGFhc,EAAAA,EAAAA,IAAU/B,GC/CZ8P,eAAeuO,EACb3Y,EACArE,EACA4K,GAEA,IADA+D,EACA,wDACA,MAAM5M,QAAeiN,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3K,KAAAA,EACArE,KAAAA,EACAkP,MAA4B,EAArB+N,EAAAA,GACPrS,SAAAA,IAGF,IAAK7I,EACH,OAGF,MAAM,MACJoI,EADI,MACGgF,EADH,SACU7O,EADV,WACoBkc,EADpB,aACgCC,GAClC1a,EAEEyN,GAAOC,EAAAA,EAAAA,IAAqBnP,EAAU,MACtC4c,EAAcnZ,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAM4X,GAAgBC,EAAAA,EAAAA,IAAyBze,GAC1Cwe,IAILxe,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,OACtDxL,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxQ,GAAS+Q,EAAAA,EAAAA,IAAoB/Q,EAAQ0F,EAAKvE,GAAI0P,GAC9C7Q,GAAS0e,EAAAA,EAAAA,IAA8B1e,EAAQ0F,EAAKvE,GAAIE,EAAMkd,EAAaV,EAAYC,IACvF/b,EAAAA,EAAAA,IAAU/B,GAELgQ,GACHqO,EAAkB3Y,EAAMrE,EAAMyc,GAAc,KDnJhDvd,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWD,EAAOkL,cACpB,MAAExK,GAAUD,EAEdC,IAAUT,GACP0Z,GAAgB,MA0CzB7J,eAA2BpP,GACzB,MAAM0C,QAAeiN,EAAAA,EAAAA,IAAQ,cAAe,CAAE3P,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMoX,GAAqBC,EAAAA,EAAAA,IAA+Bje,GAC1D,IAAKoD,IAAW4a,GAAuBtd,IAAUsd,EAE/C,YADAjc,EAAAA,EAAAA,KAAUmc,EAAAA,EAAAA,IAAiCle,EAAQ,CAAEwL,OAAO,KAI9D,MAAM,WACJmT,EADI,WACQC,EADR,YACoBC,EADpB,YACiCC,GACnC1b,GAEAub,EAAWnZ,QAAUqZ,EAAYrZ,UACnCxF,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqB,IAAI6N,KAAeE,GAAc,SAG9ED,EAAWpZ,QAAUsZ,EAAYtZ,UACnCxF,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB,IAAI8N,KAAeE,GAAc,QAGlF9e,GAASke,EAAAA,EAAAA,IAAiCle,EAAQ,CAAEwL,OAAO,IAC3DxL,GAASmL,EAAAA,EAAAA,IAAmBnL,EAAQ,CAClCqL,aAAc,CACZ0T,QAASJ,EAAWtb,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACpC6d,QAASJ,EAAWvb,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEtCiK,cAAe,IACVpL,EAAOkL,aAAaE,cACvB2T,QAASF,EAAYxb,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACrC6d,QAASF,EAAYzb,KAAI,QAAC,GAAElC,GAAH,SAAYA,SAIzCY,EAAAA,EAAAA,IAAU/B,GA5ENif,CAAYve,UAKlBH,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,KAAEsJ,GAAStJ,EACXgd,EAAU1T,GAAOmV,EAAAA,EAAAA,IAAiBnV,GAAQA,EAEhD/J,GAASmL,EAAAA,EAAAA,IAAmBnL,EAAQ,CAClC+J,KAAAA,EACArJ,MAAO,GACP4K,cAAe,IACVtL,EAAOkL,aAAaI,cACvB7G,KAAM,CACJoZ,gBAAYvd,EACZ6e,SAAU,GACVrB,aAAc,OAIpB/b,EAAAA,EAAAA,IAAU/B,GAEV,MAAM,OAAEC,GAAWD,EAAOkL,aAE1BqS,EAAqB,GAAI,YAAQjd,EADpBL,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EACDmd,EAAS1T,OAG7DxJ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KAAY,MACrE,MAAM,MACJC,EADI,cACG4K,EADH,OACkBrL,EADlB,KAC0B8J,GAC5B/J,EAAOkL,aACLuS,EAAU1T,GAAOmV,EAAAA,EAAAA,IAAiBnV,GAAQA,GAC1C,KAAE1I,GAASZ,EAKjB8c,EAAqB7c,EAAOW,EAJNiK,MAAAA,GAAJ,UAAIA,EAAgBjK,UAApB,aAAG,EAAuDyc,aAE/D7d,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAEGmd,EAAS1T,OCxCjExJ,EAAAA,EAAAA,IAAiB,2BAA4BP,IAC3C,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7Cke,GAAgBY,EAAAA,EAAAA,IAAwBpf,GAC9C,IAAK0F,IAAS8Y,IAAkBte,EAC9B,OAGF,MAAM,MAAEQ,EAAF,QAASwL,GAAYsS,EACrBvS,EAAWC,MAAAA,OAAH,EAAGA,EAAS4R,aAE1B,IAAIuB,EACJ,GAAInf,IAAakB,EAAAA,GAAgB,CAC/B,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAASC,GACrDmf,EAAexZ,MAAAA,OAAH,EAAGA,EAAYwZ,cA8C/BvP,eACEpK,EACAxF,EACAmf,EACA3e,EACAuL,GAEA,IAAKvL,EACH,OAGF,MAAM0C,QAAeiN,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3K,KAAAA,EACArE,KAAM,OACNX,MAAAA,EACA2e,aAAAA,EACA9O,MAAO+O,EAAAA,GACPrT,SAAAA,IAGF,IAAK7I,EACH,OAGF,MAAM,MACJoI,EADI,MACGgF,EADH,SACU7O,EADV,WACoBkc,EADpB,aACgCC,GAClC1a,EAEEyN,GAAOC,EAAAA,EAAAA,IAAqBnP,EAAU,MACtC4c,EAAcnZ,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAM4X,GAAgBY,EAAAA,EAAAA,IAAwBpf,GACzCwe,GAAiB9d,IAAU8d,EAAc9d,QAI9CV,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,OACtDxL,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxQ,GAAS+Q,EAAAA,EAAAA,IAAoB/Q,EAAQ0F,EAAKvE,GAAI0P,GAC9C7Q,GAASuf,EAAAA,EAAAA,IAA6Bvf,EAAQ0F,EAAKvE,GAAIjB,EAAUqe,EAAaV,EAAYC,IAC1F/b,EAAAA,EAAAA,IAAU/B,IArFLwf,CAAmB9Z,EAAMxF,EAAUmf,EAAc3e,EAAOuL,OAG/D1L,EAAAA,EAAAA,IAAiB,4BAA6BP,IAC5C,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1Bue,GAAgBC,EAAAA,EAAAA,IAAyBze,GAE/C,IAAK0F,IAAS8Y,EACZ,OAGF,MAAQiB,YAAape,EAAf,cAAqBiK,GAAkBkT,EACvCkB,EAAiBre,GAAQiK,GAAiBA,EAAcjK,GACxD4K,EAAWyT,MAAAA,OAAH,EAAGA,EAAgB5B,aAE5Bzc,GAIAgd,EAAkB3Y,EAAMrE,EAAM4K,OAGrC1L,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UAAEkf,GAAclf,GAEhB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GA8FPoK,eAAoCpK,EAAeia,GACjD,MAAMpb,QAAkB8L,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D3K,KAAAA,EACAia,UAAAA,IAGGpb,IAILqb,EAAAA,EAAAA,MAAa3Z,aAAa,CACxBhG,OAAQyF,EAAKvE,GACboD,UAAAA,IAtGGsb,CAAqBna,EAAMia,OC1ElCpf,EAAAA,EAAAA,IAAiB,mBAAmBuP,MAAO9P,EAAQQ,EAASC,KAC1D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAIF,GAAID,EAAO4M,WAAW+F,WAAamN,EAAAA,GAAAA,WACjC,OAGF,MAAM,SAAEC,GAAatf,EAErBT,GAASggB,EAAAA,EAAAA,IAAyBhgB,EAAQ8f,EAAAA,GAAAA,YAC1C9f,GAASigB,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CAAEigB,yBAAqB5f,KACjEyB,EAAAA,EAAAA,IAAU/B,GAEV,MAAMkgB,QAA4B7P,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE0P,SAAAA,IAOjE,OALA/f,GAAS4G,EAAAA,EAAAA,MACT5G,GAASggB,EAAAA,EAAAA,IACPhgB,EAAQkgB,EAAsBJ,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,QAErDG,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CAAEigB,oBAAAA,QAI9C3f,EAAAA,EAAAA,IAAiB,oBAAoBuP,MAAO9P,EAAQQ,EAASC,KAC3D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAI0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACxC,IAAKA,IAAWyF,EACd,OAGF,MAAM,SAAEqa,GAAatf,EAKrB,GAHAT,GAASggB,EAAAA,EAAAA,IAAyBhgB,EAAQ8f,EAAAA,GAAAA,aAC1C/d,EAAAA,EAAAA,IAAU/B,IAENmgB,EAAAA,EAAAA,IAAiBza,GAAO,CAG1B,GAFAA,QAAa2K,EAAAA,EAAAA,IAAQ,cAAe3K,IAE/BA,EACH,OAGFlF,EAAQ0B,SAAS,CAAEf,GAAIuE,EAAKvE,KAG9B,MAAMiC,QAAeiN,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE3K,KAAAA,EAAMqa,SAAAA,IAKxD,OAHA/f,GAAS4G,EAAAA,EAAAA,MACT5G,GAASggB,EAAAA,EAAAA,IAAyBhgB,EAAQoD,EAAS0c,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,QACxEG,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CAAEigB,yBAAqB5f,QAInEC,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjD0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCA,GAAWyF,IAIhB2K,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE3K,KAAAA,QAGjCnF,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,EAASC,KAC7D,MAAM,OAAER,EAAF,OAAUmgB,GAAW3f,GAE3BsB,EAAAA,EAAAA,KAAUke,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CAAEogB,cAAeD,SAG9D7f,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OAAER,EAAF,OAAUmgB,GAAW3f,EAErB6f,EAASF,EAAS,CAAEG,WAAY,CAAEH,OAAAA,IAAa,CAAEG,gBAAYjgB,IAEnEyB,EAAAA,EAAAA,KAAUke,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQqgB,QAG7C/f,EAAAA,EAAAA,IAAiB,2BAA2BuP,MAAO9P,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,QACIugB,EADJ,UACaC,EADb,MACwBlQ,GAC1B9P,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BygB,GAAQtH,EAAAA,EAAAA,IAAWpZ,EAAQwgB,GAAWxgB,EAAOiX,eACnD,IAAKD,IAAS0J,EAAO,OAErB,MAAMtd,QAAeiN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2G,KAAAA,EAAM0J,MAAAA,EAAOD,UAAAA,EAAWlQ,MAAAA,IAE1B,IAAKnN,EACH,OAGF,MAAMkd,EAASG,EAAY,CAAEE,eAAgBvd,GAAW,CAAEwd,QAASxd,GAEnE,OAAO6c,EAAAA,EAAAA,KAAiBrZ,EAAAA,EAAAA,MAAa3G,EAAQqgB,OAG/C/f,EAAAA,EAAAA,IAAiB,0BAA0BuP,MAAO9P,EAAQQ,EAASC,KACjE,MAAM,OACJR,EADI,KACI4gB,EADJ,UACUJ,EADV,WACqBK,EADrB,WACiCC,EADjC,gBAC6CC,EAD7C,MAC8D9D,GAChEzc,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK+W,EAAM,OAEX,MAAM5T,QAAeiN,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD2G,KAAAA,EACA6J,KAAAA,EACAJ,UAAAA,EACAK,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAK9Z,EACH,OAGF,MAAM,UAAE6d,EAAF,UAAaC,GAAc9d,EAG3Bwd,IADN5gB,GAAS4G,EAAAA,EAAAA,OACegG,WAAWnE,SAASxI,GAAQ2gB,SAAW,IAC5Dtd,QAAQ6d,GAAYA,EAAQN,OAASI,EAAUJ,OAC5CF,EAAiB,IAAK3gB,EAAO4M,WAAWnE,SAASxI,GAAQ0gB,gBAAkB,IAQjF,OANIO,EAAUT,UACZE,EAAehV,QAAQuV,GAEvBN,EAAQ3c,KAAKid,IAGRjB,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtC2gB,QAAAA,EACAD,eAAAA,QAIJpgB,EAAAA,EAAAA,IAAiB,oBAAoBuP,MAAO9P,EAAQQ,EAASC,KAC3D,MAAM,OACJR,EADI,WACI6gB,EADJ,WACgBC,EADhB,gBAC4BC,EAD5B,MAC6C9D,GAC/Czc,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK+W,EAAM,OAEX,MAAM5T,QAAeiN,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C2G,KAAAA,EACA8J,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAK9Z,EACH,OAIF,MAAMwd,GADN5gB,GAAS4G,EAAAA,EAAAA,OACcgG,WAAWnE,SAASxI,GAAQ2gB,SAAW,GAC9D,OAAOX,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtC2gB,QAAS,IAAIA,EAASxd,SAI1B7C,EAAAA,EAAAA,IAAiB,4BAA4BuP,MAAO9P,EAAQQ,EAASC,KAAY,QAC/E,MAAM,OACJR,EADI,KACI4gB,GACNpgB,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK+W,EAAM,OAMX,UAJqB3G,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2G,KAAAA,EACA6J,KAAAA,IAGA,OAIF,MAAMO,GADNphB,GAAS4G,EAAAA,EAAAA,OACsBgG,WAAWnE,SAASxI,GACnD,OAAOggB,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtC2gB,QAASQ,MAAAA,GAAF,UAAEA,EAAiBR,eAAnB,aAAE,EAA0Btd,QAAQ8c,GAAWA,EAAOS,OAASA,IACtEF,eAAgBS,MAAAA,GAAF,UAAEA,EAAiBT,sBAAnB,aAAE,EAAiCrd,QAAQ8c,GAAWA,EAAOS,OAASA,UAIxFtgB,EAAAA,EAAAA,IAAiB,oCAAoCuP,MAAO9P,EAAQQ,EAASC,KAC3E,MAAM,OACJR,EADI,QACIugB,GACN/f,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BygB,GAAQtH,EAAAA,EAAAA,IAAWpZ,EAAQwgB,GAAWxgB,EAAOiX,eACnD,GAAKD,GAAS0J,EAMd,aAJqBrQ,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D2G,KAAAA,EACA0J,MAAAA,KAMF1gB,GAAS4G,EAAAA,EAAAA,OACFqZ,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtC0gB,eAAgB,WANlB,MAUFpgB,EAAAA,EAAAA,IAAiB,2BAA2BuP,MAAO9P,EAAQQ,EAASC,KAAY,MAC9E,MAAM,OACJR,EADI,KACI4gB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC/Q,GACtC9P,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BshB,GAAanI,EAAAA,EAAAA,IAAWpZ,EAAQshB,GACtC,IAAKtK,GAASsK,IAAiBC,EAAa,OAE5C,MAAMne,QAAeiN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2G,KAAAA,EACA6J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,IAEF,IAAKnN,EACH,OAIF,MAAMoe,EAAiB,WADvBxhB,GAAS4G,EAAAA,EAAAA,OACwBgG,WAAWnE,SAASxI,UAA9B,aAAG,EAAoCsgB,WAC9D,OAAKiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,GAI7DZ,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtCsgB,WAAY,IACPiB,EACHC,UAAWre,UAPf,MAYF7C,EAAAA,EAAAA,IAAiB,4BAA4BuP,MAAO9P,EAAQQ,EAASC,KAAY,MAC/E,MAAM,OACJR,EADI,KACI4gB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC/Q,GACtC9P,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BshB,GAAanI,EAAAA,EAAAA,IAAWpZ,EAAQshB,GACtC,IAAKtK,GAASsK,IAAiBC,EAAa,OAE5C,MAAMne,QAAeiN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2G,KAAAA,EACA6J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,EACAmR,aAAa,IAEf,IAAKte,EACH,OAIF,MAAMoe,EAAiB,WADvBxhB,GAAS4G,EAAAA,EAAAA,OACwBgG,WAAWnE,SAASxI,UAA9B,aAAG,EAAoCsgB,WAC9D,OAAKiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,GAI7DZ,EAAAA,EAAAA,IAAiBjgB,EAAQC,EAAQ,CACtCsgB,WAAY,IACPiB,EACHG,WAAYve,UAPhB,MAYF7C,EAAAA,EAAAA,IAAiB,wBAAwBuP,MAAO9P,EAAQQ,EAASC,KAC/D,MAAM,OACJR,EADI,WACIohB,EADJ,aACgBC,EADhB,MAC8B/Q,GAChC9P,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BshB,GAAanI,EAAAA,EAAAA,IAAWpZ,EAAQshB,GACtC,IAAKtK,GAASsK,IAAiBC,EAAa,OAE5C,MAAMne,QAAeiN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2G,KAAAA,EACAqK,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,EACAmR,aAAa,IAEf,OAAKte,GAILpD,GAAS4G,EAAAA,EAAAA,OACFqP,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAE2hB,aAAcxe,UALlD,MAQF7C,EAAAA,EAAAA,IAAiB,uBAAuBuP,MAAO9P,EAAQQ,EAASC,KAAY,MAC1E,MAAM,OACJR,EADI,OACIqM,EADJ,WACYuV,GACdphB,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BgY,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQsM,GAChC,IAAK0K,IAASiB,EAAM,OAOpB,UALqB5H,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD2G,KAAAA,EACAiB,KAAAA,EACA4J,WAAAA,IAEW,OAEb7hB,GAAS4G,EAAAA,EAAAA,MACT,MAAMkb,GAAanc,EAAAA,EAAAA,IAAW3F,EAAQC,GACtC,OAAK6hB,GAEE7L,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAChC2hB,aAAY,UAAEE,EAAWF,oBAAb,aAAE,EAAyBte,QAAQye,GAAaA,EAASzV,SAAWA,WAHlF,MAOF/L,EAAAA,EAAAA,IAAiB,2BAA2BuP,MAAO9P,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,WACI4hB,EADJ,KACgBhB,GAClBpgB,EACEuW,GAAOrR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK+W,EAAM,OAOX,UALqB3G,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD2G,KAAAA,EACA6K,WAAAA,EACAhB,KAAAA,IAEW,OAEb7gB,GAAS4G,EAAAA,EAAAA,MACT,MAAMkb,GAAanc,EAAAA,EAAAA,IAAW3F,EAAQC,GACtC,OAAK6hB,GAEE7L,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAChC2hB,aAAc,GACdvI,SAAU,IACLyI,EAAWzI,SACd2I,mBAAoB,GACpBC,gBAAiB,UAPrB,MAYF1hB,EAAAA,EAAAA,IAAiB,uBAAuBuP,MAAO9P,EAAQQ,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,EAGL,aADqB2K,EAAAA,EAAAA,IAAQ,sBAAuB3K,IAG7CuQ,EAAAA,EAAAA,KAAWrP,EAAAA,EAAAA,MAAa3G,EAAQ,CACrCiiB,cAAU5hB,SAHZ,K,cC3UF,IAAI6hB,EAoKJ,SAASC,EAAgB1c,GACvB,OAAO2K,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B3K,KAAAA,EACAxF,SAAUkB,EAAAA,GACV6K,SAAUvG,EAAK+R,uBACfxH,YAAaxF,KAAK0F,MAAMC,EAAAA,GAAqB,GAAK,GAClDG,MAAOH,EAAAA,MAxKX7P,EAAAA,EAAAA,IAAiB,QAAQ,KACnB8hB,EAAAA,IAEFC,QAAQC,IAAI,kBAGVJ,GACFza,aAAaya,IAGfpgB,EAAAA,EAAAA,IAAU,KAAK6E,EAAAA,EAAAA,MAAa4b,WAAW,IAGvCL,EAAuBzb,OAAOC,YAAW,MACvC5E,EAAAA,EAAAA,IAAU,KAAK6E,EAAAA,EAAAA,MAAa4b,WAAW,IACvCL,OAAuB7hB,IAnBI,MAsB7B,MAAM,aAAEmiB,EAAF,uBAAgBC,IAA2B9C,EAAAA,EAAAA,MAEjD6C,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAW/S,gBAsBfA,iBACE,IAAIgT,GAAoB,EAEpB9iB,GAAS4G,EAAAA,EAAAA,MAGb,MACMmc,EADe3d,OAAOC,KAAKrF,EAAO2B,SAAS8G,UACb5E,QAAwC,CAACC,EAAK7D,KAChF6D,EAAI7D,GAAU,GACd6D,EAAI7D,GAAQ8V,OAAQK,EAAAA,EAAAA,IAAYpW,EAAQC,EAAQmB,EAAAA,IAChD0C,EAAI7D,GAAQyW,WAAYC,EAAAA,EAAAA,IAAgB3W,EAAQC,EAAQmB,EAAAA,IACxD0C,EAAI7D,GAAQ+iB,cAAeC,EAAAA,EAAAA,GAAmBjjB,EAAQC,EAAQmB,EAAAA,IAEvD0C,IACN,KAEK7D,OAAQijB,EAAehjB,SAAUijB,IAAoBhjB,EAAAA,EAAAA,IAAyBH,IAAW,GAC3FojB,EAAcF,EAAgBljB,EAAOwL,MAAMqF,KAAKqS,QAAiB5iB,EACvE,GAAI4iB,GAAiBE,EAAa,CAChC,MAAMhgB,QAAegf,EAAgBgB,GACrCpjB,GAAS4G,EAAAA,EAAAA,MACT,MAAQ3G,OAAQojB,IAAqBljB,EAAAA,EAAAA,IAAyBH,IAAW,GACnE6F,EAAasd,IAAmBrd,EAAAA,EAAAA,IAAiB9F,EAAQkjB,EAAeC,GAE9E,GAAI/f,GAAUigB,IAAqBH,EAAe,CAChD,MAAMI,EAAyBtjB,EAAO2B,SAAS8G,SAASya,GAClDxS,EAAgBwS,IAAkBpZ,EAAAA,GACpC9J,EAAO2J,qBAAqBtG,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEoN,EAAe,GAAoBC,OAAOxN,EAAOzB,SAAU+O,GAC3DG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCU,EAAYjM,OAAOC,KAAKwL,GAAMxN,IAAIoC,QAcxC,GAZAzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV8G,SAAU,KAIdzI,GAAS+Q,EAAAA,EAAAA,IAAoB/Q,EAAQkjB,EAAerS,GACpD7Q,GAASiR,EAAAA,EAAAA,IAAgBjR,EAAQkjB,EAAe9hB,EAAAA,GAAgBiQ,GAChErR,GAAS6R,EAAAA,EAAAA,IAAuB7R,EAAQkjB,EAAe9hB,EAAAA,GAAgBiQ,GAEnE8R,GAAmBtd,GAAcA,EAAW0d,gBAAiB,CAC/D,MAAM,gBAAEA,GAAoB1d,EACtB2d,EAA+BxjB,EAAO2B,SAAS8G,SAAS8a,GACxDE,QAAqBrB,EAAgBpiB,EAAOwL,MAAMqF,KAAK0S,IAC7D,GAAIE,EAAc,CAChB,MAAMC,GAAa5S,EAAAA,EAAAA,IAAqB2S,EAAa9hB,SAAU,MACzDgiB,EAAkBve,OAAOC,KAAKqe,GAAYrgB,IAAIoC,QAEpDzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV8G,SAAU,IACLzI,EAAO2B,SAAS8G,SACnB,CAAC5C,EAAW0d,iBAAkB,CAC5B1S,KAAM6S,EACNE,YAAa,CACX,CAACxiB,EAAAA,IAAiB,IACZoiB,MAAAA,OAAJ,EAAIA,EAA8BI,YAAYxiB,EAAAA,IAC9CiQ,UAAWsS,EACXjf,YAAaif,EACbpS,iBAAajR,KAInB,CAAC4iB,GAAgB,IACZljB,EAAO2B,SAAS8G,SAASya,GAC5BU,YAAa,IACR5jB,EAAO2B,SAAS8G,SAASya,GAAeU,YAC3C,CAACT,GAAkB,IACbG,MAAAA,OAAJ,EAAIA,EAAwBM,YAAYT,GACxC5R,iBAAajR,SAU7BN,GAAS6jB,EAAAA,EAAAA,IAAY7jB,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoI,MAAO,OAChExL,GAAS8jB,EAAAA,EAAAA,IAAY9jB,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,OAChExQ,GAASoR,EAAAA,EAAAA,IAAkBpR,EAAQkjB,EAAe9f,EAAOqN,aAEzDqS,GAAoB,GAInBA,IACH9iB,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV8G,SAAU,MAMhBrD,OAAOC,KAAK0d,GAAgBna,SAAS3I,IACnCD,GAAS+jB,EAAAA,EAAAA,IAAa/jB,EAAQC,EAAQmB,EAAAA,GAAgB2hB,EAAe9iB,QAGvE8B,EAAAA,EAAAA,IAAU/B,GAEV,MAAQC,OAAQ+jB,EAAazf,UAAW0f,GAAmBjkB,EAAOsG,YAC9D0d,GAAeC,KAAmBjQ,EAAAA,EAAAA,IAAkBhU,EAAQgkB,EAAaC,KAC3ErE,EAAAA,EAAAA,MAAasE,mBAtILC,IAENpiB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHwd,aAAc5O,KAAKC,MACnB+M,WAAW,IAGTH,EAAAA,IAEFC,QAAQC,IAAI,oBAGd8B,EAAAA,EAAAA,MACA5B,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/CvS,EAAAA,EAAAA,IAAQ,oBACbqS,UC1DN,MAAM4B,GAA+B1U,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAAO,GAElE0U,GAAwB3K,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GClBnD,SAAS2U,EACdxkB,EAAqB+f,EAAkB0E,GAEvC,MAAO,IACFzkB,EACH0kB,WAAY,IACP1kB,EAAO0kB,WACVC,WAAY,IACP3kB,EAAO0kB,WAAWC,WACrB,CAAC5E,GAAW0E,KAMb,SAASG,EAA2B5kB,EAAqB8c,GAC9D,MAAO,IACF9c,EACH0kB,WAAY,IACP1kB,EAAO0kB,WACV5H,UAAAA,KDANvc,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAE6L,GAAW7L,EACbwX,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQsM,GAChC,IAAK2L,EACH,OAGF,MAAM,GAAE9W,EAAF,WAAMqa,GAAevD,EAE3BqM,GAA6B,KAAMjU,EAAAA,EAAAA,IAAQ,gBAAiB,CAAElP,GAAAA,EAAIqa,WAAAA,UAGpEjb,EAAAA,EAAAA,IAAiB,YAAYuP,MAAO9P,EAAQQ,EAASC,KACnD,MAAM,OAAE6L,GAAW7L,EACbwX,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQsM,GAChC,IAAK2L,EACH,OAGF,MAAM7U,QAAeiN,EAAAA,EAAAA,IAAQ,aAAc,CAAEG,MAAO,CAACyH,KACrD,IAAK7U,EACH,OAGF,MAAM,MAAEoN,EAAF,iBAASqU,GAAqBzhB,EAUpC,OARApD,GAAS4G,EAAAA,EAAAA,MAET5G,GAAS8jB,EAAAA,EAAAA,IAAY9jB,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,QAChDsU,EAAAA,EAAAA,IAAoB9kB,EAAQ,IAChCA,EAAOwQ,MAAMuU,gBACbF,QAMPtkB,EAAAA,EAAAA,IAAiB,gBAAiBP,IAChC,MAAQglB,UAAU,gBAAEC,IAAsBjlB,IAErCilB,IAAmBjb,EAAAA,EAAAA,GAAchK,EAAOiK,kBAAoBgb,EA3ChC,KAoGnCnV,iBACE,MAAM1M,QAAeiN,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKjN,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOiJ,GAAUpN,EAEvB,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb5G,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxQ,EAAS,IACJA,EACHglB,SAAU,IACLhlB,EAAOglB,SACVhG,QAASzX,EACT0d,iBAAiBjb,EAAAA,EAAAA,GAAchK,EAAOiK,qBAG1ClI,EAAAA,EAAAA,IAAU/B,GA1EHklB,OAIT3kB,EAAAA,EAAAA,IAAiB,mBAAmB,MAyEpCuP,iBACE,MAAMqV,QAAoB9U,EAAAA,EAAAA,IAAQ,oBAClC,IAAK8U,EACH,OAGF,IAAInlB,GAASkR,EAAAA,EAAAA,KAAStK,EAAAA,EAAAA,OAAakK,EAAAA,EAAAA,IAAqBqU,EAAY3U,MAAO,OAC3ExQ,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBqU,EAAY3Z,MAAO,OAGlE,MAAM4Z,EAAoBnN,GAAmBA,EAAKoN,UAAYpN,EAAKqN,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAY3U,MAAM9M,MAAK,CAAC6U,EAAGC,IAC7C+M,EAASI,QAAQP,EAAiB7M,GAAI6M,EAAiB5M,MACtDlV,QAAQ2U,IAAUA,EAAK2N,UAE1B7jB,EAAAA,EAAAA,IAAU,IACL/B,EACHmlB,YAAa,CACXnG,QAAS0G,EAAYriB,KAAK4U,GAASA,EAAK9W,QA5FvC0kB,OAGPtlB,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7B8P,EAAAA,EAAAA,IAAQ,wBAGf9P,EAAAA,EAAAA,IAAiB,mBAAmBuP,MAAAA,IAAkB,UACpD,MAAM,OAAE7P,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjDiY,EAAOhY,GAASmZ,EAAAA,EAAAA,IAAWpZ,EAAQC,QAAUK,EACnD,IAAK2X,IAAQ6N,EAAAA,EAAAA,IAAU7N,IAAnB,UAA4BA,EAAK8N,mBAAjC,OAA4B,EAAkBC,cAChD,OAGF,MAAMxb,EAAK,UAAGyN,EAAK8N,mBAAR,aAAG,EAAkBvb,MAC1BpH,QAAeiN,EAAAA,EAAAA,IAAQ,mBAAoB4H,EAAK9W,GAAI8W,EAAKuD,WAAahR,GAC5E,IAAKpH,EACH,OAGF,MAAM,MAAEoI,EAAF,QAASuT,EAAT,cAAkBiH,GAAkB5iB,EAc1C,OAZApD,GAAS4G,EAAAA,EAAAA,MACL4E,EAAMhG,SACRxF,GAASmR,EAAAA,EAAAA,IAASnR,GAAQ8Q,EAAAA,EAAAA,IAAqBtF,EAAO,SAE/Cya,EAAAA,EAAAA,IAAWjmB,EAAQiY,EAAK9W,GAAI,CACnC4kB,YAAa,CACXvb,MAAOuU,EAAQvZ,OAASuZ,EAAQA,EAAQvZ,OAAS,GAAK,IACtD+B,KAAKyQ,EAAAA,EAAAA,MAAQ,UAAAC,EAAK8N,mBAAL,eAAkBxe,MAAO,IAAIqJ,OAAOmO,IACjDiH,cAAAA,SAONzlB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OACJ6L,EADI,QACIjG,GAAU,EADd,UACqBif,EADrB,SACgCD,EADhC,uBAC0Ca,GAC5CzlB,GAyDNqP,eACExD,EACAjG,EACAif,EACAD,EACAa,GAEA,IAAIlmB,GAAS4G,EAAAA,EAAAA,MACb,MAAMqR,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQsM,GAChC,IAAK2L,EACH,OAOF,IAAI7U,EACJ,IALAwc,EAAAA,EAAAA,MAAauG,qBAAqB,CAAElmB,OAAQqM,EAAQjG,QAAAA,KAEpDtE,EAAAA,EAAAA,KAAUie,EAAAA,EAAAA,KAAyBpZ,EAAAA,EAAAA,MAAakZ,EAAAA,GAAAA,cAG3C7H,EAAKmO,WAAanO,EAAKoO,YAC1BjjB,QAAeiN,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEiW,MAAOrO,EAAKoO,YAAaf,UAAAA,EAAWD,SAAAA,QACzE,CACL,MAAM,GAAElkB,EAAF,WAAMqa,GAAevD,EAC3B7U,QAAeiN,EAAAA,EAAAA,IAAQ,gBAAiB,CACtClP,GAAAA,EACAqa,WAAAA,EACA6K,YAAa,GACbf,UAAAA,EACAD,SAAAA,EACAa,uBAAAA,IAIJlmB,GAAS4G,EAAAA,EAAAA,MACLxD,KACFwc,EAAAA,EAAAA,MAAa2G,iBAAiB,CAAEtmB,OAAQqM,KAExCvK,EAAAA,EAAAA,KAAUkkB,EAAAA,EAAAA,IACRjmB,EACAiY,EAAK9W,GACL,CACEmkB,UAAAA,EACAD,SAAAA,MAKNrlB,GAASggB,EAAAA,EAAAA,IAAyBhgB,EAAQ8f,EAAAA,GAAAA,UAC1C9f,GAASyM,EAAAA,EAAAA,IAAsBzM,IAC/B+B,EAAAA,EAAAA,IAAU/B,GAvGLwmB,CAAcla,EAAQjG,EAASif,EAAWD,EAAUa,OAG3D3lB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OAAE6L,GAAW7L,GAsGrBqP,eAA6BxD,GAC3B,MAAMtM,GAAS4G,EAAAA,EAAAA,MACTqR,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQsM,GAEhC,IAAK2L,EACH,OAGF,MAAM,GAAE9W,EAAF,WAAMqa,GAAevD,QAErB5H,EAAAA,EAAAA,IAAQ,gBAAiB,CAAElP,GAAAA,EAAIqa,WAAAA,IA9GhCiL,CAAcna,OAiHrB/L,EAAAA,EAAAA,IAAiB,qBAAqBuP,MAAO9P,EAAQQ,EAASC,KAC5D,MAAM,UAAEimB,GAAcjmB,EAChBkmB,GAAYC,EAAAA,EAAAA,IAASF,GAErBzO,EAAO0O,GAAYvN,EAAAA,EAAAA,IAAWpZ,EAAQ0mB,QAAapmB,EACnDoF,EAAQihB,OAA4CrmB,GAAhCqF,EAAAA,EAAAA,IAAW3F,EAAQ0mB,GAC7C,IAAKzO,IAASvS,EACZ,OAGF,MAAMtC,QAAeiN,EAAAA,EAAAA,IAAQ,qBAAsB4H,EAAMvS,GACzD,OAAKtC,GAAWA,EAAOyjB,QAIvB7mB,GAAS4G,EAAAA,EAAAA,MAEL+f,EACF3mB,GAASimB,EAAAA,EAAAA,IAAWjmB,EAAQ0mB,EAAW,CAAEG,OAAQzjB,EAAOyjB,UAExD7mB,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAQ,OAC9DxQ,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQ0mB,EAAW,CAAEG,OAAQzjB,EAAOyjB,UAGnD7mB,QAbP,MAgBFO,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAEbC,GAEA6jB,GAAsB,MAiC7BzU,eAA2BpP,GACzB,MAAM0C,QAAeiN,EAAAA,EAAAA,IAAQ,cAAe,CAAE3P,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMoX,EAAqBhe,EAAO8mB,WAAWpmB,MAE7C,IAAK0C,IAAW4a,GAAuBtd,IAAUsd,EAE/C,YADAjc,EAAAA,EAAAA,KAAUglB,EAAAA,EAAAA,IAA+B/mB,GAAQ,IAInD,MAAM,WAAE4e,EAAF,YAAcE,GAAgB1b,EAEpC,IAAIiJ,EACAD,EACAwS,EAAWpZ,SACbxF,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB8N,EAAY,OAC3DvS,EAAeuS,EAAWvb,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAExC2d,EAAYtZ,SACdxF,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBgO,EAAa,OAC5D1S,EAAgB0S,EAAYzb,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAG9CnB,GAAS+mB,EAAAA,EAAAA,IAA+B/mB,GAAQ,GAChDA,GAASmM,EAAAA,EAAAA,IAAiBnM,EAAQ,CAAEqM,aAAAA,EAAcD,cAAAA,KAElDrK,EAAAA,EAAAA,IAAU/B,GA3DRgnB,CAAYtmB,UAIhBH,EAAAA,EAAAA,IAAiB,iBAAiBuP,MAAO9P,EAAQQ,EAASC,KACxD,MAAQ4lB,YAAaC,EAAf,UAAsBhB,EAAtB,SAAiCD,GAAa5kB,EAE9C2C,QAAeiN,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEiW,MAAAA,EAAOhB,UAAAA,EAAWD,SAAAA,IAElE,GAAIjiB,EAGF,OAFA5C,EAAQ0B,SAAS,CAAEf,GAAIiC,KAEhBqJ,EAAAA,EAAAA,KAAsB7F,EAAAA,EAAAA,OAG/BpG,EAAQ6I,iBAAiB,CACvB9F,QAASN,EAAAA,GAA4B,2CAMzC1C,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbwmB,GAAaL,EAAAA,EAAAA,IAAS3mB,IAAUmZ,EAAAA,EAAAA,IAAWpZ,EAAQC,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACjFgnB,IAIA5W,EAAAA,EAAAA,IAAQ,aAAc4W,ME/Q7B,MACMC,GAAwBtX,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAwS1DC,eAAeqX,EACbzhB,EAAeuR,EAAuBmQ,EAAiBnU,EAAqBwB,SAEtEpE,EAAAA,EAAAA,IAAQ,cAAe,CAC3B3K,KAAAA,EACAjB,KAAM2iB,EACNnU,WAAAA,EACAwB,OAAAA,KA7SJlU,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OAAE4mB,GAAW5mB,EAEnB,OAAQ4mB,EAAOhmB,MACb,IAAK,UACHb,EAAQ2mB,eAAe,CAAEC,QAASC,EAAOzS,QACzC,MACF,IAAK,MACCyS,EAAOzS,MAAM0S,MAAMC,EAAAA,KAAgBF,EAAOzS,MAAM0S,MAAME,EAAAA,IACxDhnB,EAAQinB,iBAAiB,CAAE5Y,IAAKwY,EAAOzS,QAEvCpU,EAAQknB,oBAAoB,CAAE7Y,IAAKwY,EAAOzS,QAE5C,MACF,IAAK,WAAY,CACf,MAAMlP,GAAOoD,EAAAA,EAAAA,IAAkB9I,GAC/B,IAAK0F,EACH,QAgSRoK,eAAoCpK,EAAenB,EAAmB+J,GACpE,MAAMlL,QAAeiN,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDpQ,OAAQyF,EAAKvE,GACbqa,WAAY9V,EAAK8V,WACjBjX,UAAAA,EACA+J,KAAAA,IAGF,IAAKlL,EACH,OAGF,MAAM,WAAEukB,EAAF,iBAActe,EAAd,oBAAgCqe,IAAwB9H,EAAAA,EAAAA,OACxD,QAAErc,EAASqkB,MAAOC,EAAlB,IAA2BhZ,GAAQzL,EAErCykB,EACFF,EAAW,CAAErZ,KAAM,CAAE/K,QAASA,GAAW,WAChCA,EACT8F,EAAiB,CAAE9F,QAAAA,IACVsL,GACT6Y,EAAoB,CAAE7Y,IAAAA,IAjTfiZ,CAAqBpiB,EAAM2hB,EAAO9iB,UAAW8iB,EAAOzS,OACzD,MAEF,IAAK,cACHpU,EAAQunB,gBACR,MACF,IAAK,qBAAsB,CACzB,MAAM9P,EAAOjY,EAAOiX,eAAgBmC,EAAAA,EAAAA,IAAWpZ,EAAQA,EAAOiX,oBAAiB3W,EAC/E,IAAK2X,EACH,OAEFzX,EAAQmnB,WAAW,CACjBrZ,KAAM,CACJ+X,YAAapO,EAAKoO,YAClBf,UAAWrN,EAAKqN,UAChBD,SAAUpN,EAAKoN,SACf/Y,OAAQ2L,EAAK9W,MAGjB,MAEF,IAAK,MAAO,CACV,MAAMuE,GAAOoD,EAAAA,EAAAA,IAAkB9I,IACzB,UAAEuE,EAAF,MAAaqQ,GAAUyS,EAC7B,IAAK3hB,EACH,OAGEkP,EACFpU,EAAQwnB,WAAW,CAAEC,iBAAkBrT,EAAO3U,OAAQyF,EAAKvE,GAAIoD,UAAAA,KAE/D/D,EAAQ0nB,eAAe,CAAExiB,KAAAA,EAAMnB,UAAAA,IAC/B/D,EAAQ2nB,uBAAsBnU,EAAAA,EAAAA,IAAkBhU,EAAQ0F,EAAKvE,GAAIoD,IACjE/D,EAAQ4nB,iBAAiB,CAAEnoB,OAAQyF,EAAKvE,GAAIoD,UAAAA,KAE9C,YAKNhE,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,QAAE2mB,EAAF,OAAWnnB,GAAWQ,GACtB,cAAEwW,GAAkBjX,EACpB0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,IAAU6I,EAAAA,EAAAA,IAAkB9I,GAC/DuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAEpD,IAAKiX,IAAkBvR,IAASnE,EAC9B,OAGF,MAAM,SAAErB,GAAaqB,EACrBf,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQmU,oBAAoB,CAAE1U,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAU0U,OAAO,IAE3DuS,EACHzhB,EAAMuR,EAAemQ,GAASniB,EAAAA,EAAAA,IAAmBjF,EAAQ0F,EAAKvE,GAAIjB,IAAWwU,EAAAA,EAAAA,IAAa1U,EAAQC,QAItGM,EAAAA,EAAAA,IAAiB,cAAcuP,MAAO9P,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,GACb,cAAEwW,GAAkBjX,EACpB0F,GAAOoD,EAAAA,EAAAA,IAAkB9I,GACzBqoB,EAAMpR,IAAiBqR,EAAAA,EAAAA,IAActoB,EAAQC,GAC9CgX,GAAkBvR,GAAS2iB,SAIXhY,EAAAA,EAAAA,IAAQ,iBAAkBgY,EAAIlnB,GAAIknB,EAAI7M,eAK3DzZ,EAAAA,EAAAA,KAAUwmB,EAAAA,EAAAA,KAAqB3hB,EAAAA,EAAAA,MAAayhB,EAAIlnB,KAC3CgmB,EAAezhB,EAAMuR,EAAe,cAAU3W,GAAWoU,EAAAA,EAAAA,IAAa1U,EAAQC,SAGrFM,EAAAA,EAAAA,IAAiB,qBAAqBuP,MAAAA,IACpC,MAAM,gBAAEmV,GAAoBjlB,EAAOwoB,cACnC,GAAIvD,IAAmBjb,EAAAA,EAAAA,GAAchK,EAAOiK,kBAAoBgb,EAtG/B,GAuG/B,OAGF,MAAM7hB,QAAeiN,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKjN,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOiJ,GAAUpN,EAYvB,OAVApD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqBN,EAAO,OAC7C,IACJxQ,EACHwoB,cAAe,IACVxoB,EAAOwoB,cACVxJ,QAASzX,EACT0d,iBAAiBjb,EAAAA,EAAAA,GAAchK,EAAOiK,wBAM5C1J,EAAAA,EAAAA,IAAiB,kBAAkBuP,MAAO9P,EAAQQ,EAASC,KACzD,MAAM,OACJR,EADI,SACI8f,EADJ,MACcrf,EADd,OACqBoX,GACvBrX,EAEJ,IAAIgoB,EAAgBzoB,EAAO0kB,WAAWC,WAAW5E,GACjD,IAAsB,IAAlB0I,EAAJ,CAIA,QAAsBnoB,IAAlBmoB,EAA6B,CAC/B,MAAQxQ,KAAMyQ,EAAR,KAAmBhjB,SAAe2K,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE0P,SAAAA,KAAe,GAEnF,GADA/f,GAAS4G,EAAAA,EAAAA,OACJ8hB,IAAchjB,EAEjB,YADA3D,EAAAA,EAAAA,IAAUyiB,EAAyBxkB,EAAQ+f,GAAU,IAIvD/f,GAASkR,EAAAA,EAAAA,IAASlR,EAAQ,CAAE,CAAC0oB,EAAUvnB,IAAKunB,IAC5C1oB,GAASmR,EAAAA,EAAAA,IAASnR,EAAQ,CAAE,CAAC0F,EAAKvE,IAAKuE,IACvC+iB,EAAgB,CACdtnB,GAAIunB,EAAUvnB,GACdT,MAAO,GACPoX,OAAQ,GACR6Q,cAAUroB,EACVsoB,aAAa,EACb1c,QAAS,IAGXlM,EAASwkB,EAAyBxkB,EAAQ+f,EAAU0I,IACpD1mB,EAAAA,EAAAA,IAAU/B,IAGRU,IAAU+nB,EAAc/nB,OAAU+nB,EAAcG,cAI/C1B,GAAsB,MAyE7BpX,eAAA,GAYG,IAZ4B,SAC7BiQ,EAD6B,cAE7B0I,EAF6B,OAG7BxoB,EAH6B,MAI7BS,EAJ6B,OAK7BoX,GAOC,EACG9X,GAAS4G,EAAAA,EAAAA,MACb,MAAMyhB,GAAMjP,EAAAA,EAAAA,IAAWpZ,EAAQyoB,EAActnB,IACvCuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKooB,IAAQ3iB,EACX,OAGF,MAAMmjB,EAAwBJ,EAAc/nB,QAAUA,EACtDV,EAAS4kB,EAA2B5kB,GAAQ,GAC5CA,EAASwkB,EAAyBxkB,EAAQ+f,EAAU,IAC/C0I,EACH/nB,MAAAA,KACImoB,GAAyB,CAAE/Q,YAAQxX,EAAW4L,QAAS,OAE7DnK,EAAAA,EAAAA,IAAU/B,GAEV,MAAMoD,QAAeiN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgY,IAAAA,EACA3iB,KAAAA,EACAhF,MAAAA,EACAoX,OAAQ+Q,OAAwBvoB,EAAYwX,IAGxCgR,EAAmB9oB,EAAO0kB,WAAWC,WAAW5E,GAEtD,GADA/f,EAAS4kB,GAA2Bhe,EAAAA,EAAAA,OAAa,IAC5CxD,IAAW0lB,GAAoBpoB,IAAUooB,EAAiBpoB,MAE7D,YADAqB,EAAAA,EAAAA,IAAU/B,GAIZ,MAAM+oB,EAAa,IAAIC,KAAKF,EAAiB5c,SAAW,IAAI7I,KAAKiL,GAASA,EAAKnN,MACzE8nB,EAAa7lB,EAAO8I,QAAQ5I,QAAQgL,IAAUya,EAAWlW,IAAIvE,EAAKnN,MAExEnB,EAASwkB,EAAyBxkB,EAAQ+f,EAAU,IAC/C+I,EACHI,KAAM9lB,EAAO8lB,QACTD,EAAWzjB,QAAU,CAAE2jB,UAAW/lB,EAAO+lB,cACzC/lB,EAAOulB,UAAY,CAAEA,SAAUvlB,EAAOulB,UAC1CC,YAAaxlB,EAAO8I,QAAQ1G,OAAS,GAAKV,QAAQ1B,EAAO+U,YACzDjM,QAAqC,KAA5B4c,EAAiBhR,QAAiBgR,EAAiBhR,SAAW1U,EAAO+U,WAC1E/U,EAAO8I,SACN4c,EAAiB5c,SAAW,IAAI0E,OAAOqY,GAC5CnR,OAAQmR,EAAWzjB,OAASpC,EAAO+U,WAAa,MAGlDpW,EAAAA,EAAAA,IAAU/B,GAlIRopB,CAAgB,CACdrJ,SAAAA,EACA0I,cAAeA,EACfxoB,OAAAA,EACAS,MAAAA,EACAoX,OAAAA,YAKNvX,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,GACJU,EADI,QACAkoB,EADA,SACS9S,EADT,YACmBjC,GACrB7T,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,IAAuBJ,EAC1B,OAGF,MAAM,OAAElB,EAAF,SAAUC,GAAaqB,EAEvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQmU,oBAAoB,CAAE1U,OAAAA,EAAQC,SAAAA,EAAU0U,OAAO,KAElDvE,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC3K,KAAAA,EACA4jB,SAAUnoB,EACVkoB,QAAAA,EACApW,YAAYhO,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/CuU,QAAQC,EAAAA,EAAAA,IAAa1U,EAAQC,GAC7BsW,SAAAA,EACAgT,aAAcjV,QAIlB/T,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,SAAEsf,GAAatf,EAErB,IAAIgoB,EAAgBzoB,EAAO0kB,WAAWC,WAAW5E,GAE5C0I,IAILA,EAAgB,CACdtnB,GAAIsnB,EAActnB,GAClBT,MAAO,GACPoX,OAAQ,GACR6Q,cAAUroB,EACVsoB,aAAa,EACb1c,QAAS,KAGXnK,EAAAA,EAAAA,IAAUyiB,EAAyBxkB,EAAQ+f,EAAU0I,SAGvDloB,EAAAA,EAAAA,IAAiB,YAAYuP,MAAO9P,EAAQQ,EAASC,KACnD,MAAM,MAAE+oB,EAAF,MAASC,GAAUhpB,EAEnB4nB,GAAMjP,EAAAA,EAAAA,IAAWpZ,EAAQwpB,GAC1BnB,SAIChY,EAAAA,EAAAA,IAAQ,WAAY,CACxBgY,IAAAA,EACAqB,WAAYD,O,SCxPhBlpB,EAAAA,EAAAA,IAAiB,oBAAoBuP,MAAAA,IACnC,MAAM1M,QAAeiN,EAAAA,EAAAA,IAAQ,mBAC7B,GAAKjN,EAOL,OAHApD,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS2pB,EAAAA,EAAAA,IAAgB3pB,EAAQ,CAAE4pB,YAAaxmB,EAAOwmB,eAC9CC,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAE8pB,KAAM1mB,EAAO0mB,WAItDvpB,EAAAA,EAAAA,IAAiB,iBAAiBuP,MAAO9P,EAAQQ,EAASC,KACxD,MAAM,gBAAEspB,EAAF,UAAmBC,GAAcvpB,GAEvCsB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAE8c,WAAW,EAAMzN,WAAO/O,KAEhE,MAAM2pB,QAAkB5Z,EAAAA,EAAAA,IAAQ,gBAAiB0Z,IAEjDhoB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,KAAoBjjB,EAAAA,EAAAA,MAAa,CAAEkW,WAAW,KAEpDmN,GACFD,QAIJzpB,EAAAA,EAAAA,IAAiB,iBAAiBuP,MAAO9P,EAAQQ,EAASC,KACxD,MAAM,gBAAEspB,EAAF,UAAmBC,GAAcvpB,GAEvCsB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAE8c,WAAW,EAAMzN,WAAO/O,KAEhE,MAAM2pB,QAAkB5Z,EAAAA,EAAAA,IAAQ,gBAAiB0Z,IAEjDhoB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,KAAoBjjB,EAAAA,EAAAA,MAAa,CAAEkW,WAAW,KAEpDmN,GACFD,QAIJzpB,EAAAA,EAAAA,IAAiB,kBAAkBuP,MAAO9P,EAAQQ,EAASC,KACzD,MAAM,gBACJspB,EADI,SACaG,EADb,KACuBJ,EADvB,MAC6BK,EAD7B,UACoCH,GACtCvpB,GAEJsB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAE8c,WAAW,EAAMzN,WAAO/O,KAEhE,MAAM2pB,QAAkB5Z,EAAAA,EAAAA,IAAQ,iBAAkB0Z,EAAiBG,EAAUJ,EAAMK,IAEnFpoB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,KAAoBjjB,EAAAA,EAAAA,MAAa,CAAEkW,WAAW,KAEpDmN,GACFD,QAIJzpB,EAAAA,EAAAA,IAAiB,uBAAuBuP,MAAO9P,EAAQQ,EAASC,KAC9D,MAAM,gBACJspB,EADI,MACaI,EADb,UACoBH,GACtBvpB,GAEJsB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAE8c,WAAW,EAAMzN,WAAO/O,KAEhE,MAAM2pB,QAAkB5Z,EAAAA,EAAAA,IAAQ,sBAAuB0Z,EAAiBI,IAExEpoB,EAAAA,EAAAA,KAAU8nB,EAAAA,EAAAA,KAAoBjjB,EAAAA,EAAAA,MAAa,CAAEkW,WAAW,EAAOsN,4BAAwB9pB,KAEnF2pB,GACFD,QAIJzpB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KAAE4pB,GAAS5pB,GAEZ4P,EAAAA,EAAAA,IAAQ,2BAA4Bga,OAG3C9pB,EAAAA,EAAAA,IAAiB,mBAAoBP,IAC5B6pB,EAAAA,EAAAA,IAAoB7pB,EAAQ,CAAEqP,WAAO/O,OCjD9CC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,YAAE6pB,EAAF,SAAeC,GAAa9pB,EAC5BR,GAASuqB,EAAAA,EAAAA,IAAoBxqB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAYkmB,EAAAA,EAAAA,IAAuBzqB,GACpC0F,GAASnB,GAMhBuL,eAAqCpK,EAAenB,EAAmB+lB,EAAkBI,GACvF,MAAMtnB,QAAeiN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD3K,KAAAA,EAAMnB,UAAAA,EAAW+lB,YAAAA,EAAaI,WAAAA,IAEhC,IAAKtnB,EACH,OAGF,MAAM,GAAEjC,EAAF,gBAAMwpB,GAAoBvnB,EAChC,IAAKjC,EACH,OAGF,IAAInB,GAAS4qB,EAAAA,EAAAA,KAAiBhkB,EAAAA,EAAAA,MAAazF,GACvCwpB,GACF3qB,GAAS6qB,EAAAA,EAAAA,IAAsB7qB,EAAQ2qB,GACvC3qB,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQ+qB,EAAAA,GAAAA,WAEhC/qB,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQ+qB,EAAAA,GAAAA,cAElChpB,EAAAA,EAAAA,IAAU/B,GAvBLgrB,CAAsBtlB,EAAMnB,EAAW+lB,EAAaC,OA0B3DhqB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,KAAEiF,EAAF,UAAQnB,GAAc9D,EACvBiF,GAASnB,GAMhBuL,eAA8BpK,EAAenB,GAC3C,MAAMnB,QAAeiN,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3K,KAAAA,EAAMnB,UAAAA,IACvD,IAAKnB,EACH,OAEF,IAAIpD,GAASirB,EAAAA,EAAAA,KAAerkB,EAAAA,EAAAA,MAAaxD,GACrC8nB,EAAOH,EAAAA,GAAAA,YACP/qB,EAAOiP,QAAQkc,UACbnrB,EAAOiP,QAAQkc,QAAQC,0BACxBprB,EAAOiP,QAAQkc,QAAQE,eACvBrrB,EAAOiP,QAAQkc,QAAQG,gBACvBtrB,EAAOiP,QAAQkc,QAAQI,kBAC1BL,EAAOH,EAAAA,GAAAA,cAET/qB,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQkrB,IAChCnpB,EAAAA,EAAAA,IAAU/B,GAlBLkoB,CAAexiB,EAAMnB,OAqB5BhE,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,iBAAEwnB,EAAF,OAAoBhoB,EAApB,UAA4BsE,GAAc9D,EAC1CiF,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCsE,GAAc0jB,GAAqBviB,GAO1CoK,eAA0BpK,EAAenB,EAAmB0jB,GAC1D,MAAM7kB,QAAeiN,EAAAA,EAAAA,IAAQ,aAAc3K,EAAMuiB,GACjD,IAAK7kB,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb,MAAMrD,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQ0F,EAAKvE,GAAIoD,GACnDvE,GAASwrB,EAAAA,EAAAA,IAAWxrB,EAAQoD,EAAQG,IACpCxB,EAAAA,EAAAA,IAAU/B,GAZLgoB,CAAWtiB,EAAMnB,EAAW0jB,OAenC1nB,EAAAA,EAAAA,IAAiB,qBAAsBP,KACrC+B,EAAAA,EAAAA,IAAU,IACL/B,EACHiP,QAAS,IACJjP,EAAOiP,QACVI,WAAO/O,SAKbC,EAAAA,EAAAA,IAAiB,gBAAiBP,KAChC+B,EAAAA,EAAAA,IAAU,IACL/B,EACHiP,QAAS,IACJjP,EAAOiP,QACVwc,aAASnrB,SAKfC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,eAAEirB,GAAmB1rB,EAAOiP,SAC5B,YAAE0c,GAAgBlrB,GAClB,KAAE6N,GAASqd,EAEjB,GAAuB,WAAnBD,EAA6B,CAC/B,MAAME,GAAiBC,EAAAA,EAAAA,IAA6B7rB,GACpD,IAAK4rB,EACH,QAgCN9b,eACExB,EASAsd,GAEA,MAAMlrB,EC7LD,SAA0B4N,GAC/B,MAAM5N,EAAQ0E,OAAOC,KAAKiJ,GAAMjL,KAAKyoB,GAAO,GAAEA,KAAKxd,EAAKwd,OAAMznB,KAAK,KACnE,OAAO3D,EAAM8E,OAAS,EAAK,IAAG9E,IAAU,GD2L1BqrB,CAAiB,CAC7B,eAAgBzd,EAAK0d,WACrB,kBAAmB1d,EAAK2d,YACxB,iBAAkB3d,EAAK4d,WACvB,YAAa5d,EAAK6d,IAClB,oBAAqB7d,EAAK8d,IAC1B,wBAAyB9d,EAAK+d,UAG1BC,QAAiBC,MAAO,mCAAkC7rB,IAAS,CACvE8rB,OAAQ,OACRb,YAAa,cACbc,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASd,OAGvBxoB,QAAekpB,EAASK,OAC9B,GAAIvpB,EAAOiM,MAAO,CAChB,MAAMA,GAAQud,EAAAA,EAAAA,IAAexpB,EAAOiM,OAC9BrP,GAAS4G,EAAAA,EAAAA,MAUf,YATA7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiP,QAAS,IACJjP,EAAOiP,QACVI,MAAO,IACFA,MAMX,IAAIrP,GAAS6sB,EAAAA,EAAAA,KAAkBjmB,EAAAA,EAAAA,MAAa,CAC1CvF,KAAM+B,EAAO/B,KACbF,GAAIiC,EAAOjC,KAEbnB,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQ+qB,EAAAA,GAAAA,WAChChpB,EAAAA,EAAAA,IAAU/B,GA/EH8sB,CAAsBxe,EAAMsd,QAC5B,GAAuB,gBAAnBF,EAAkC,CAC3C,MAAMqB,GAAcC,EAAAA,EAAAA,IAA0BhtB,GAC9C,IAAK+sB,EACH,QA8ENjd,eACExB,EAOAye,GAEA,MAAMva,EAAS,CACbya,KAAM,CACJC,OAAQ5e,EAAK0d,WAAWmB,QAAQ,UAAW,IAC3CC,iBAAkB9e,EAAK2d,YACvBoB,gBAAiB/e,EAAK4d,WACtBoB,cAAehf,EAAK6d,IAAIgB,QAAQ,UAAW,MAGzCte,EAAM0e,EAAAA,GACR,+DACA,oDAEEjB,QAAiBC,MAAM1d,EAAK,CAChC2d,OAAQ,OACRC,QAAS,CACPe,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBT,GAEpBU,KAAMC,KAAKC,UAAUnb,KAEjBpP,QAAekpB,EAASK,OAE9B,GAAsB,OAAlBvpB,EAAOwqB,OAAiB,CAE1B,MAAMve,EAAQ,CAAE0H,YAAa,iBACvB/W,GAAS4G,EAAAA,EAAAA,MAUf,YATA7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiP,QAAS,IACJjP,EAAOiP,QACVI,MAAO,IACFA,MAOX,IAAIrP,GAAS6tB,EAAAA,EAAAA,KAAuBjnB,EAAAA,EAAAA,MAAa,CAC/CvF,KAAM,OACNysB,MAAO1qB,EAAOkL,KAAKwf,QAErB9tB,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQ+qB,EAAAA,GAAAA,WAChChpB,EAAAA,EAAAA,IAAU/B,GAlIH+tB,CAA2Bzf,EAAMye,QAI1CxsB,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,iBAAEutB,EAAF,gBAAoBC,GAAoBxtB,EACxCR,GAASuqB,EAAAA,EAAAA,IAAoBxqB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAYkmB,EAAAA,EAAAA,IAAuBzqB,GACnCkuB,GAASC,EAAAA,EAAAA,IAAoBnuB,GAC7BouB,GAAgBC,EAAAA,EAAAA,IAAuBruB,IACvC,eAAE0rB,GAAmB1rB,EAAOiP,QAC5B2c,EAAoC,WAAnBF,GACnBG,EAAAA,EAAAA,IAA6B7rB,IAAUgtB,EAAAA,EAAAA,IAA0BhtB,GAChE0F,GAASnB,GAAcqnB,GAAmBsC,GAAWxC,GAuH5D5b,eACEpK,EACAnB,EACAmnB,EACAwC,EACAvC,EACA2C,EACAN,GAMA,IAAe,UAJM3d,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C3K,KAAAA,EAAMnB,UAAAA,EAAW2pB,OAAAA,EAAQvC,YAAAA,EAAa2C,gBAAAA,EAAiBN,iBAAAA,IAGpC,CACnB,MAAMhuB,GAASmP,EAAAA,EAAAA,KAAavI,EAAAA,EAAAA,QAC5B7E,EAAAA,EAAAA,KAAUqN,EAAAA,EAAAA,IAAapP,KAlIpBuuB,CAAgB7oB,EAAMnB,EAAWmnB,EAAgBwC,EAAQ,CAC5DM,KAAMP,EACN3f,KAAyB,WAAnBod,GAA8B+C,EAAAA,EAAAA,IAAwBzuB,IAAU0uB,EAAAA,EAAAA,IAA6B1uB,IAClGouB,EAAeJ,OAmIpBztB,EAAAA,EAAAA,IAAiB,kBAAkB,SAACP,EAAQQ,GAA0B,IAAjBC,EAAiB,uDAAP,GAC7D,OAAOqqB,EAAAA,EAAAA,IAAe9qB,EAAQS,EAAQyqB,MAAQH,EAAAA,GAAAA,kBAGhDxqB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KACnD0nB,EAAAA,EAAAA,IAAsBnoB,EAAQS,K,uBEhTvC,MAEMkuB,EAA0B,IACnBC,EAAwB,IACxBC,EAAwB,I,cCmB9B,SAASC,GAA6B9uB,EAAqB+uB,GAChE,OAAOA,GAAM/uB,EAAOkN,oBAAsBF,EAAAA,GACtChN,EAAO2M,mBApBeqiB,EAoBuBC,EAAAA,EAAAA,MAAiBC,OAnBhDC,EAAAA,GACT1kB,KAAK2kB,IACV3kB,KAAKC,IAAkB,IAAdskB,EAAoBH,GACf,IAAdG,GAIAA,EAAcK,EAAAA,GACT5kB,KAAK2kB,IACV3kB,KAAKC,IAAkB,IAAdskB,EAAoBH,GACf,GAAdG,GAIGJ,GAMH,GArBN,IAA4BI,ECQ5B,IAAIM,GAAqB,GAEzB/uB,EAAAA,EAAAA,IAAiB,0BAA0BuP,UACzC,MAAM1M,QAAeiN,EAAAA,EAAAA,IAAQ,yBAC7B,GAAKjN,EAcL,OATAA,EAAOwF,SAAS2mB,IACVA,EAAkBC,iBACpBC,EAAAA,GAAmB,UAASF,EAAkBC,gBAAgBruB,KAAMuuB,EAAAA,GAAAA,QAElEH,EAAkBI,YACpBF,EAAAA,GAAmB,UAASF,EAAkBI,WAAWxuB,KAAMuuB,EAAAA,GAAAA,WAI5D,KACF9oB,EAAAA,EAAAA,MACHgpB,mBAAoBxsB,OAIxB7C,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAC9D,MAAM,MACJ2M,EADI,EACG2hB,EADH,EACMc,EADN,YACSC,EADT,UACsBC,EADtB,WACiCC,GACnCvvB,EAEEwvB,EAAyB,CAC7B9uB,GAAImuB,KACJY,eAAgB9iB,GAAS0iB,EACzBf,EAAGD,GAA6B9uB,EAAQ+uB,GAlCV,GAkCetkB,KAAKgP,SAClB0W,GAChCN,EAAGA,EApC2B,GAoCvBplB,KAAKgP,SAAuC0W,GACnDJ,UAAAA,EACAC,WAAAA,GAGF,MAAO,IACFhwB,EACHowB,wBAAyB,IAAKpwB,EAAOowB,yBAA2B,GAAKH,QAIzE1vB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJ8D,EADI,OACOtE,EADP,MACemN,EADf,aACsBijB,EADtB,YACoCP,GACtCrvB,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAAU0H,GAAU0iB,IAAgB7vB,IAAWD,EAAOiX,gBAItD5G,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC3K,KAAAA,EACAnB,UAAAA,EACA+rB,SAAUljB,IAASmjB,EAAAA,EAAAA,IAAqCT,GACxDU,WAAYH,QAIhB9vB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OACJR,EADI,UACIsE,EADJ,EACewqB,EADf,EACkBc,GACpBpvB,EACEgwB,GAAWC,EAAAA,EAAAA,IAAsB1wB,EAAQC,GACzCsD,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,GAE7CksB,GAAaltB,KAAWotB,EAAAA,EAAAA,IAAeptB,IAE5C/C,EAAQowB,aAAa,CACnB3wB,OAAAA,EACAsE,UAAAA,EACAksB,SAAAA,EACA1B,EAAAA,EACAc,EAAAA,QAIJtvB,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KAAY,UAC7D,MAAM,OACJR,GACsBQ,EACxB,IAAI,UAAE8D,GAAc9D,GAEhB,SAAEgwB,GAAahwB,EAEnB,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAIsD,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,GAEhD,IAAKmB,IAASnC,EACZ,OAGF,MAAMstB,EAAoB/rB,QAAQvB,EAAQ4D,aAAe5D,EAAQutB,UAC3DC,EAA8BF,GAChCzoB,EAAAA,EAAAA,IAA0BpI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACJiD,EAAUstB,IACN7c,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQ8wB,IAClCxtB,EACJgB,GAAmB,QAAP,EAAAhB,SAAA,eAASpC,KAAMoD,EAE3B,UAAIhB,EAAQytB,iBAAZ,iBAAI,EAAmB9kB,eAAvB,OAAI,EAA4B+kB,MAAM1Z,GAAMA,EAAEkZ,WAAaA,GAAYlZ,EAAE2Z,aACvET,OAAWnwB,IAGR+P,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3K,KAAAA,EAAMnB,UAAAA,EAAWksB,SAAAA,IAEhD,MAAM,eAAEU,GAAmBnxB,EAAOkiB,SAASkP,MAiB3C,OAfID,IAAmBE,EAAAA,KACrBrxB,EAAS,IACJA,EACHsxB,gBAAiB,IACXb,EAAWzwB,EAAOsxB,iBAAkBC,EAAAA,EAAAA,IAAKvxB,EAAOsxB,gBAAiB,CAAC/sB,OAClEksB,GAAY,CACd,CAAClsB,GAAY,CACXksB,SAAAA,EACAlsB,UAAAA,OD1GL,SAA4BvE,EAAqBC,EAAgBsE,EAAmBksB,GACzF,MAAM,UAAEO,IAAchd,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,IAAc,GAEtE,IAAKysB,EACH,OAAOhxB,EAIT,IAAIkM,EAAU8kB,EAAU9kB,QAAQ7I,KAAKkU,GAAOA,EAAEkZ,WAAaA,EACvD,IACGlZ,EACHD,MAAOC,EAAE2Z,SAAW3Z,EAAED,MAAQC,EAAED,MAAQ,EACxC4Z,UAAU,GACP3Z,EAAE2Z,SAAW,IACb3Z,EACH2Z,UAAU,EACV5Z,MAAOC,EAAED,MAAQ,GACfC,IACHjU,QAAQiU,GAAMA,EAAED,MAAQ,KAEvB,gBAAEka,GAAoBR,EAE1B,GAAIP,IAAavkB,EAAQ+kB,MAAM1Z,GAAMA,EAAEkZ,WAAaA,IAAW,CAC7D,MAAM,cAAExZ,GAAkBjX,EAE1BkM,EAAU,IAAIA,EAAS,CACrBukB,SAAAA,EACAS,UAAU,EACV5Z,MAAO,IAGL0Z,EAAUS,aACZD,EAAkB,IAAKA,GAAmB,GAAK,CAC7CllB,OAAQ2K,EACRwZ,SAAAA,KAKN,OAAOxc,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQsE,EAAW,CAClDysB,UAAW,IACNA,EACH9kB,QAAAA,EACAslB,gBAAAA,KCsEGE,CAAmB1xB,EAAQC,EAAQsE,EAAWksB,OAGvDlwB,EAAAA,EAAAA,IAAiB,YAAaP,IACrB,IACFA,EACHsxB,gBAAiB,QAIrB/wB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KAAY,MACpE,MAAM,UAAE8D,EAAF,SAAaksB,GAAahwB,GAC1B,eAAE0wB,GAAmBnxB,EAAOkiB,SAASkP,MAE3C,OAAID,IAAmBE,EAAAA,KAEnB,UAAArxB,EAAOsxB,gBAAgB/sB,UAAvB,eAAmCksB,YAAaA,EAFDzwB,EAM5C,IACFA,EACHsxB,gBAAiB,IACXb,EAAWzwB,EAAOsxB,iBAAkBC,EAAAA,EAAAA,IAAKvxB,EAAOsxB,gBAAiB,CAAC/sB,OAClEksB,GAAY,CACd,CAAClsB,GAAY,CACXksB,SAAAA,EACAlsB,UAAAA,UAOVhE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAAY,MACnE,MAAM,UAAE8D,EAAF,SAAaksB,GAAahwB,EAEhC,OAAI,UAAAT,EAAOsxB,gBAAgB/sB,UAAvB,eAAmCksB,YAAaA,EAC3CzwB,EAGF,IACFA,EACHsxB,iBAAiBC,EAAAA,EAAAA,IAAKvxB,EAAOsxB,gBAAiB,CAAC/sB,SAInDhE,EAAAA,EAAAA,IAAiB,sBAAsBuP,MAAO9P,EAAQQ,EAASC,KAC7D,MAAM,SAAEgwB,GAAahwB,EAGrB,SADqB4P,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEogB,SAAAA,IAKrD,MAAO,KACF7pB,EAAAA,EAAAA,MACH+qB,UAAW,IACN3xB,EAAO2xB,UACVC,gBAAiBnB,QAKvBlwB,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAAY,MAC3E,MAAM,GAAEU,GAAOV,EAEf,MAAO,IACFT,EACHowB,wBAAuB,UAAEpwB,EAAOowB,+BAAT,aAAE,EAAgC9sB,QAAQiU,GAAMA,EAAEpW,KAAOA,SAIpFZ,EAAAA,EAAAA,IAAiB,gBAAgBuP,MAAO9P,EAAQQ,EAASC,KAAY,UACnE,MAAM,OAAER,EAAF,UAAUsE,EAAV,SAAqBksB,GAAahwB,EAClCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,GAClD,IAAKmB,IAASnC,EACZ,OAGF,MAAMuU,EAAM,UAAGvU,EAAQsuB,gBAAX,aAAG,EAAkB1Z,WAC3B/U,QAAeiN,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDogB,SAAAA,EACA/qB,KAAAA,EACAnB,UAAAA,EACAuT,OAAAA,IAGF,IAAK1U,EACH,OAGFpD,GAAS4G,EAAAA,EAAAA,MAET,UAAIxD,EAAOoN,aAAX,OAAI,EAAchL,SAChBxF,GAASkR,EAAAA,EAAAA,IAASlR,GAAQ8Q,EAAAA,EAAAA,IAAqB1N,EAAOoN,MAAO,QAG/D,MAAM,WAAE2H,EAAF,MAAcb,EAAd,UAAqB0Z,GAAc5tB,EAEzC,OAAO6Q,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQsE,EAAW,CAClDstB,SAAU,CACR1Z,WAAAA,EACAb,MAAAA,EACA0Z,UAAW,KACL,UAAAztB,EAAQsuB,gBAAR,eAAkBb,YAAa,MAChCA,UAMXzwB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,IAAE8G,EAAF,OAAOtH,GAAWQ,EAElBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAIL2K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9I,IAAAA,EAAK7B,KAAAA,QAG1CnF,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAAY,MAC7E,MAAM,OACJR,EADI,SACIqwB,EADJ,EACcvB,EADd,EACiBc,EADjB,UACoBE,EADpB,WAC+BC,EAD/B,GAC2C7uB,GAC7CV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,GAAKyF,GAAQ,UAAC1F,EAAOowB,+BAAR,OAAC,EAAgCa,MAAM1Z,GAAMA,EAAEpW,KAAOA,KAAOlB,IAAWD,EAAOiX,cAM5F,OAFA5G,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE3K,KAAAA,EAAM4qB,SAAAA,IAEzC,IACFtwB,EACHowB,wBAAyBpwB,EAAOowB,wBAAwB/sB,KAAK4sB,GACvDA,EAAuB9uB,KAAOA,EACzB,IACF8uB,EACHlB,EAAGD,GAA6B9uB,EAAQ+uB,GACxCc,EAAAA,EACAE,UAAAA,EACAC,WAAAA,GAGGC,SCnSb1vB,EAAAA,EAAAA,IAAiB,kBAAkBuP,MAAO9P,EAAQQ,EAASC,KAAY,MACrE,MAAM,OAAER,EAAF,QAAU6xB,GAAYrxB,EACtBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAM2T,SACT,OAGF,MAAMjW,QAAeiN,EAAAA,EAAAA,IAAQyhB,EAAU,uBAAyB,yBAA0B,CAAEpsB,KAAAA,IAC5F,GAAKtC,EAAL,CAMA,GAFApD,GAAS4G,EAAAA,EAAAA,MAET,UAAKxD,EAAgC2uB,yBAArC,OAAI,EAAoDvsB,OAAQ,CAC9D,MAAM7D,GAAWwB,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE3CmD,EAAgC2uB,kBAAqB3uB,EAAgC2uB,kBACnF1uB,KAAKE,IAAD,IAAmBA,KAAY5B,EAAS4B,EAAQyuB,WAKzD,OAFSC,EAAAA,EAAAA,IAAiBjyB,EAAQC,EAAQmD,QAK5C7C,EAAAA,EAAAA,IAAiB,4BAA4BuP,MAAO9P,EAAQQ,EAASC,KACnE,MAAM,OACJR,EADI,MACI6tB,EADJ,KACWoE,EADX,aACiBC,GACnB1xB,EACEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAM2T,SACT,OAGF,MAAM+Y,EAAO1sB,EAAK2T,SAAUgZ,eACtBjvB,QAAeiN,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEyd,MAAAA,EAAOsE,KAAAA,EAAMD,aAAAA,IAEzE,OAAK/uB,GAIEkvB,EAAAA,EAAAA,KAAsB1rB,EAAAA,EAAAA,MAAa3G,EAAQiyB,EAAM9uB,QAJxD,K,uBC7CK,SAASmvB,GAA4BC,EAAWC,GACrD,MAAMC,SAAeF,EAErB,GAAIE,WADiBD,EAEnB,OAAO,EAGT,GAAc,WAAVC,EACF,OAAOF,IAAWC,EAGpB,MAAME,EAAWC,MAAMC,QAAQL,GAG/B,GAAIG,IAFaC,MAAMC,QAAQJ,GAG7B,OAAO,EAGT,GAAIE,EAAU,CACZ,MAAMG,EAASN,EACTO,EAASN,EAEf,OAAIK,EAAOttB,SAAWutB,EAAOvtB,QAItBstB,EAAOE,OAAM,CAACC,EAASjhB,IAAMugB,GAAaU,EAASF,EAAO/gB,MAGnE,MAAMkhB,EAAUV,EACVW,EAAUV,EAGhB,OAFcrtB,OAAOC,KAAK6tB,GAEbF,OAAOI,GAASb,GAAaW,EAAQE,GAAOD,EAAQC,OCNnE7yB,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,aAeH,OAdKA,EAAO+S,oBAAsBC,EAAAA,EAAAA,GAAmBtzB,EAAQsgB,EAAOnf,KAElEX,EAAQ+yB,gBAGVxxB,EAAAA,EAAAA,KAAUkU,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOnf,GAAImf,EAAO5a,KAAM4a,EAAOkT,uBAExDlT,EAAO5a,KAAKvE,KACdsyB,EAAAA,GAAAA,IAA0B,CACxBxzB,OAAQqgB,EAAO5a,KAAKvE,GACpBsW,uBAAwB6I,EAAO5a,KAAK+R,0BAO1C,IAAK,iBAAkB,CACrB,MAAMkL,GAAW+Q,EAAAA,EAAAA,IAAmB1zB,EAAQsgB,EAAOnf,IACnD,IAAKwhB,EACH,OAGF3iB,GAAS2zB,EAAAA,EAAAA,IAAkB3zB,EAAQ2iB,EAAU,CAACrC,EAAOnf,KACrDnB,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOnf,GAAI,CAAEyyB,aAAa,KACtD7xB,EAAAA,EAAAA,IAAU/B,GAEV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsgB,EAAOnf,IAKvC,YAJIuE,GACFlF,EAAQqzB,kBAAkB,CAAE5zB,OAAQyF,EAAKvE,MAM7C,IAAK,kBACH,OAAO2yB,EAAAA,EAAAA,IAAU9zB,EAAQsgB,EAAOnf,IAGlC,IAAK,kBACH,OAAO8U,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOnf,GAAImf,EAAO5a,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEvE,EAAF,aAAM4yB,GAAiBzT,EAW7B,OAVAve,EAAAA,EAAAA,KAAUkU,EAAAA,EAAAA,IAAWjW,EAAQmB,EAAI,CAAE4yB,aAAAA,UAEnCptB,YAAW,KACT3G,GAAS4G,EAAAA,EAAAA,MACT,MAAMlB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQmB,GAC5BuE,GAAQquB,GAAgBruB,EAAKquB,cAAgBruB,EAAKquB,aAAapU,YAAcoU,EAAapU,YAC5F5d,EAAAA,EAAAA,KAAUkU,EAAAA,EAAAA,IAAWjW,EAAQmB,EAAI,CAAE4yB,kBAAczzB,OA1DzB,KAiE9B,IAAK,aAAc,CACjB,MAAM,QAAEiD,GAAY+c,GACZrgB,OAAQijB,EAAV,SAAyBhjB,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GAEvG,GAAIuD,EAAQywB,WAAah0B,EAAOiX,gBAAkB1T,EAAQ0wB,gBACxD,OAGF,MAAMvuB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsgB,EAAOrgB,QACvC,IAAKyF,EACH,OA2BF,MAvBsB,WAApBwB,GACGhH,IAAakB,EAAAA,IACbkf,EAAOrgB,SAAWijB,EAIrBvc,YAAW,KACTnG,EAAQqzB,kBAAkB,CAAE5zB,OAAQqgB,EAAOrgB,WApFnB,OAuF1B8B,EAAAA,EAAAA,KAAUkU,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOrgB,OAAQ,CAC1CmX,YAAa1R,EAAK0R,YAAc1R,EAAK0R,YAAc,EAAI,KACnDkJ,EAAO/c,QAAQ2wB,kBAAoB,CACrCC,oBAAqBzuB,EAAKyuB,oBAAsBzuB,EAAKyuB,oBAAsB,EAAI,WAKrFC,EAAAA,GAAAA,IAAmB,CACjB1uB,KAAAA,EACAnC,QAAAA,IAMJ,IAAK,gBAAiB,CACpB,MAAM,QAAEA,GAAY+c,EACd5a,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsgB,EAAOrgB,QACvC,IAAKyF,EACH,OAUF,aAPI2uB,EAAAA,EAAAA,IAAyB9wB,KAC3B6wB,EAAAA,GAAAA,IAAmB,CACjB1uB,KAAAA,EACAnC,QAAAA,KAON,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEgE,EAAF,cAAO+sB,GAAkBhU,EAC/B,IAAuC,IAAnCgU,EAAcJ,iBAChB,OAaF,OAVA3sB,EAAIqB,SAASzH,IACX,MAAMlB,EAAU,cAAeqgB,EAASA,EAAOiU,WAAYC,EAAAA,EAAAA,IAAsBx0B,EAAQmB,GACnFuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC5ByF,MAAAA,GAAAA,EAAMyuB,sBACRn0B,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAClCk0B,oBAAqBzuB,EAAKyuB,oBAAsB,QAK/Cn0B,EAGT,IAAK,qBAAsB,CACzB,MAAM,SAAEqZ,GAAaiH,EACfwB,EAAa9hB,EAAOwL,MAAMqF,KAAKyP,EAAOnf,IAC5C,IAAK2gB,EACH,OAGF,OAAO7L,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOnf,GAAI,CACnCkY,SAAU,IACLyI,EAAWzI,YACXA,KAKT,IAAK,sBAAuB,CAC1B,MAAM,IAAE9R,EAAF,SAAOktB,GAAanU,EACpBqC,EAAW8R,IAAaC,EAAAA,GAAqB,WAAa,SAEhE,MAAO,IACF10B,EACHwL,MAAO,IACFxL,EAAOwL,MACVmpB,iBAAkB,IACb30B,EAAOwL,MAAMmpB,iBAChB,CAAChS,GAAWpb,EAAI/B,OAAS+B,OAAMjH,KAMvC,IAAK,mBAAoB,CACvB,MAAM,GAAEa,EAAF,SAAMyzB,GAAatU,EACnBqC,GAAW+Q,EAAAA,EAAAA,IAAmB1zB,EAAQmB,GAC5C,IAAKwhB,EACH,OAGF,MAAQ,CAACA,GAAWgS,GAAqB30B,EAAOwL,MAAMmpB,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoB9sB,SAAS5G,GAAK,CAK5C,GAAiB,WAAbwhB,GAAyBkS,EAAoBrvB,QAAUsvB,EAAAA,GAAyB,CAClF,MAAMC,EAAU/0B,EAAOwL,MAAMupB,QAAQC,OACrCH,EAAsBA,EAAoBvxB,QAAQ2xB,GAAaF,GAAWA,EAAQhtB,SAASktB,KAG7FJ,EAAsB,CAAC1zB,KAAO0zB,SAX9BA,EAAsBA,EAAoBvxB,QAAQ2xB,GAAaA,IAAa9zB,IAc9E,MAAO,IACFnB,EACHwL,MAAO,IACFxL,EAAOwL,MACVmpB,iBAAkB,IACb30B,EAAOwL,MAAMmpB,iBAChB,CAAChS,GAAWkS,EAAoBrvB,OAASqvB,OAAsBv0B,KAMvE,IAAK,qBAAsB,CACzB,MAAM,GAAEa,EAAF,SAAMszB,GAAanU,EAEzB,OAAO4U,EAAAA,EAAAA,IAAmBl1B,EAAQmB,EAAIszB,GAGxC,IAAK,mBAAoB,CACvB,MAAM,GAAEtzB,EAAF,OAAMg0B,GAAW7U,GACfzP,KAAMukB,EAAR,WAAyB9yB,GAAetC,EAAOq1B,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAACj0B,GAAKg0B,IAC5BI,EAAAA,EAAAA,IACAH,EACAhwB,OAAOC,KAAK+vB,GAAiB/xB,IAAIoC,QAAQnC,QAAQmxB,GAAaA,IAAatzB,KAGzEq0B,EAAgBL,EAClB7yB,GAAcA,EAAWyF,SAAS5G,GAAMmB,EAAa,IAAKA,GAAc,GAAKnB,GAC7EmB,EAAaA,EAAWgB,QAAQmyB,GAAcA,IAAct0B,SAAMb,EAEtE,MAAO,IACFN,EACHq1B,YAAa,IACRr1B,EAAOq1B,YACVxkB,KAAMykB,EACNhzB,WAAYkzB,IAKlB,IAAK,yBAA0B,CAC7B,MAAM,WAAElzB,GAAege,EAEvB,MAAO,IACFtgB,EACHq1B,YAAa,IACRr1B,EAAOq1B,YACV/yB,WAAAA,IAKN,IAAK,+BAAgC,CACnC,MAAM,QAAEozB,GAAYpV,EAEpB,MAAO,IACFtgB,EACHq1B,YAAa,IACRr1B,EAAOq1B,YACVM,YAAaD,IAKnB,IAAK,oBAAqB,OACxB,MAAM5T,EAAa9hB,EAAOwL,MAAMqF,KAAKyP,EAAOnf,KACtC,gBAAEy0B,EAAF,YAAmBC,EAAnB,gBAAgCC,GAAoBxV,EAC1D,IAAKwB,EACH,OAGF,IAAIiU,GAAe,EACfC,EAAU,UAAAlU,EAAWzI,gBAAX,SAAqB2c,QAC/B,IAAIlU,EAAWzI,SAAS2c,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQxwB,QACLwwB,EAAQ/E,MAAMvY,GAAMA,EAAEpM,SAAWupB,EAAYvpB,WAEjD0pB,EAAQ/xB,KAAK4xB,GACbE,GAAe,QAEZ,GAAIC,EAAQxwB,QAAUswB,EAAiB,CAC5C,MAAMG,EAAcD,EAAQ7nB,WAAWuK,GAAMA,EAAEpM,SAAWwpB,IACtDG,GAAe,IACjBD,EAAQtsB,MAAMusB,EAAa,GAC3BF,GAAe,GAInB,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQ1yB,QAAO,QAAC,QAAE6yB,EAAF,QAAWC,GAAZ,SAA0BD,GAAWC,KAGzE,OAAOngB,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOnf,GAAI,CACnCk1B,aAAcL,EAAQxwB,OACtB6T,SAAU,IACLyI,EAAWzI,SACd2c,QAAAA,EACAE,aAAAA,KAKN,OAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEj2B,EAAF,IAAUsH,GAAQ+Y,EAClB5a,EAAO1F,EAAOwL,MAAMqF,KAAK5Q,GAE/B,OAAIyF,MAAAA,GAAAA,EAAMmhB,QACD5Q,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAChC4mB,OAAQnhB,EAAKmhB,OAAOvjB,QAAQgzB,IAAW/uB,EAAIQ,SAASuuB,EAAMn1B,aAI9D,EAGF,IAAK,eAAgB,CACnB,MAAM,OACJlB,EADI,cACIs2B,EADJ,KACmBxsB,EADnB,aACyB/E,GAC3Bsb,EAEJ,IADatgB,EAAOwL,MAAMqF,KAAK5Q,GAE7B,OAMF,OAHAD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,QAASm1B,GACrEv2B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB4D,GAC5EhF,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAEiW,UAAWnM,IAInD,IAAK,aAAc,CACjB,MAAM,KAAEuE,GAASgS,EAIjB,YAFA9f,EAAQmnB,WAAW,CAAErZ,KAAAA,IAKvB,IAAK,4BAA6B,CAChC,MAAM,OAAErO,EAAF,gBAAUgiB,EAAV,mBAA2BD,GAAuB1B,EAClD5a,EAAO1F,EAAOwL,MAAMqF,KAAK5Q,GAC/B,IAAKyF,EACH,OAGF1F,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAClCoZ,SAAU,IACL3T,EAAK2T,SACR4I,gBAAAA,EACAD,mBAAAA,MAGJjgB,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQg2B,qBAAqB,CAAEv2B,OAAAA,SClVrC,MAAMw2B,GAAkB,IA8cxB,SAASC,GACP12B,EAAqBC,EAAgBkB,EAAYoC,GACjD,IAD+EozB,EAC/E,wDAEA,MAAMC,EAAiBD,GACnB5d,EAAAA,EAAAA,IAAuB/Y,EAAQC,EAAQkB,IACvC6S,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GACtC,GAAIy1B,GAAkBrzB,EAAQ2G,QAAS,CACrC,MAAM,MACJosB,EADI,MACGO,EADH,QACUrpB,EADV,SACmBspB,IACrBC,EAAAA,EAAAA,IAAkBH,GAClBN,GAAS/yB,EAAQ2G,QAAQosB,OAC3B/yB,EAAQ2G,QAAQosB,MAAMU,QAAUV,EAAMU,QACtCzzB,EAAQ2G,QAAQosB,MAAMW,UAAYX,EAAMW,WAC/BJ,GAAStzB,EAAQ2G,QAAQ2sB,MAClCtzB,EAAQ2G,QAAQ2sB,MAAMG,QAAUH,EAAMG,QAC7BxpB,GAAWjK,EAAQ2G,QAAQsD,QACpCjK,EAAQ2G,QAAQsD,QAAQ0pB,oBAAsB1pB,EAAQ0pB,oBAC7CJ,GAAYvzB,EAAQ2G,QAAQ4sB,WACrCvzB,EAAQ2G,QAAQ4sB,SAASK,eAAiBL,EAASK,gBAIvD,OAAOR,GACHS,EAAAA,EAAAA,IAAuBp3B,EAAQC,EAAQkB,EAAIoC,IAC3C0Q,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQkB,EAAIoC,GAG5C,SAAS8zB,GAAmBr3B,EAAqBQ,EAAwB+C,EAAqB6Q,GAC5F,MAAM,OAAEnU,GAAWsD,GAEb,WAAEsC,IAAeyxB,EAAAA,EAAAA,IAAsBt3B,EAAQC,EAAQsD,IAAY,GAEzE,IAAKsC,GAActC,EAAQ2Q,iBAAkB,CAC3C,MAAMqjB,GAAgBvjB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsD,EAAQ2Q,kBAC5DqjB,EACFv3B,GAASqU,EAAAA,EAAAA,IAAuCrU,EAAQu3B,EAAet3B,EAAQsD,EAAQpC,GAAIiT,GAE3F5T,EAAQ2T,YAAY,CAClBlU,OAAAA,EACAsE,UAAWhB,EAAQ2Q,iBACnBL,aAAc,CACZO,WAAAA,EACArO,cAAexC,EAAQpC,MAM/B,OAAOnB,EAGT,SAASw3B,GAA2Bx3B,EAAqBQ,EAAwB+C,GAC/E,MAAM,GAAEpC,EAAF,OAAMlB,GAAWsD,GAEjB,WAAEsC,EAAF,eAAc4xB,IAAmBH,EAAAA,EAAAA,IAAsBt3B,EAAQC,EAAQsD,IAAY,GAEnFmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1By3B,GAAwBhyB,MAAAA,OAAA,EAAAA,EAAM0R,gBAAgB9F,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQmB,EAAAA,IAwBpF,GAtBApB,EAASq3B,GAAmBr3B,EAAQQ,EAAS+C,GAEzCsC,KACE4xB,IAAmB9G,EAAAA,EAAAA,IAAeptB,KACpCvD,GAASiR,EAAAA,EAAAA,IAAgBjR,EAAQC,EAAQ4F,EAAW3F,SAAU,CAACiB,KAE3D+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQ4F,EAAW3F,YACpDF,GAAS23B,EAAAA,EAAAA,IAAc33B,EAAQC,EAAQ4F,EAAW3F,SAAUiB,GAEvDs2B,IACHz3B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,iBAAkBqD,EAAQpC,OAKjGnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,aAAc,IAC1E2F,EACHE,cAAexC,EAAQpC,GACvBy2B,cAAe/xB,EAAW+xB,cAAgB,KAI1CF,EACF,OAAO13B,EAKT,GAFAA,GAASiR,EAAAA,EAAAA,IAAgBjR,EAAQC,EAAQmB,EAAAA,GAAgB,CAACD,KAEtD+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQmB,EAAAA,IAAiB,CAE1D,MAAMy2B,GAAgB1gB,EAAAA,EAAAA,IAAoBnX,EAAQC,EAAQmB,EAAAA,IACpD02B,GAAkBH,EAAAA,EAAAA,IAAc33B,EAAQC,EAAQmB,EAAAA,GAAgBD,GAChEwQ,GAAiBhN,EAAAA,EAAAA,IAAkBmzB,EAAiB73B,EAAQmB,EAAAA,IAE7Dy2B,IAAiBlmB,EAAgB5J,SAAS8vB,KAC7C73B,EAAS83B,GAIb,OAAO93B,EAGT,SAAS+3B,GACP/3B,EACAC,EACAsD,GAEA,UADAy0B,EACA,wDACA,MAAM,MAAExsB,GAAUxL,EACZi4B,EAAkB,UAAGzsB,EAAMqF,KAAK5Q,UAAd,aAAG,EAAoB2F,YAE/C,OAAIqyB,GAAuBD,GAEvBC,EAAmB92B,KAAOoC,EAAQpC,IAAM82B,EAAmB92B,KAAOoC,EAAQsS,iBACvEtS,EAAQpC,GAAK82B,EAAmB92B,IAOhC8U,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAE2F,YAAarC,IAJtCvD,EAOb,SAASk4B,GAAgBl4B,EAAqBC,GAC5C,MAAM4Q,GAAO1N,EAAAA,EAAAA,IAAmBnD,EAAQC,GAClCoR,GAAYC,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQmB,EAAAA,IAElD,IAAKyP,IAASQ,EACZ,OAGF,IAAIW,EAAIX,EAAU7L,OAClB,KAAOwM,KAAK,CACV,MAAMzO,EAAUsN,EAAKQ,EAAUW,IAC/B,IAAKzO,EAAQ6Q,WACX,OAAO7Q,GAOb,SAAS40B,GAAel4B,EAA4BsH,EAAe/G,EAAwBR,GAGzF,GAAIC,EAAQ,CACVsH,EAAIqB,SAASzH,IAKX,MAAMi3B,EAAiBF,GAJvBl4B,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQkB,EAAI,CAC7CiT,YAAY,IAGiCnU,GAC3Cm4B,IACFp4B,EAAS+3B,GAAsB/3B,EAAQC,EAAQm4B,GAAgB,QAInEr2B,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQqzB,kBAAkB,CAAE5zB,OAAAA,IAE5B,MAAMo4B,EAA8B,GA0BpC,OAxBA9wB,EAAIqB,SAASzH,IACX,MAAMoC,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GAClD,IAAKoC,EACH,OAGFvD,EAASq3B,GAAmBr3B,EAAQQ,EAAS+C,GAAS,GAEtD,MAAM,WAAEsC,IAAeyxB,EAAAA,EAAAA,IAAsBt3B,EAAQC,EAAQsD,IAAY,GACrEsC,GACFwyB,EAAkBp0B,KAAK4B,EAAW3F,cAItC6B,EAAAA,EAAAA,IAAU/B,QAEV2G,YAAW,MACT5E,EAAAA,EAAAA,KAAUu2B,EAAAA,EAAAA,KAAmB1xB,EAAAA,EAAAA,MAAa3G,EAAQsH,KAElDyQ,EAAAA,EAAAA,IAAOqgB,GAAmBzvB,SAAS1I,IACjCM,EAAQ+3B,wBAAwB,CAAEt4B,OAAAA,EAAQC,SAAAA,SAE3Cu2B,IAOL,MAAM+B,EAA6B,GAEnCjxB,EAAIqB,SAASzH,IACX,MAAMs3B,GAAkBjE,EAAAA,EAAAA,IAAsBx0B,EAAQmB,GACtD,GAAIs3B,EAAiB,CACnBD,EAAiBv0B,KAAKw0B,GAMtB,MAAML,EAAiBF,GAJvBl4B,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQy4B,EAAiBt3B,EAAI,CACtDiT,YAAY,IAGiCqkB,GAC3CL,IACFp4B,EAAS+3B,GAAsB/3B,EAAQy4B,EAAiBL,GAAgB,IAG1EzxB,YAAW,MACT5E,EAAAA,EAAAA,KAAUu2B,EAAAA,EAAAA,KAAmB1xB,EAAAA,EAAAA,MAAa6xB,EAAiB,CAACt3B,OAC3Ds1B,SAIP10B,EAAAA,EAAAA,IAAU/B,IAEVgY,EAAAA,EAAAA,IAAOwgB,GAAkB5vB,SAASzH,IAChCX,EAAQqzB,kBAAkB,CAAE5zB,OAAQkB,QAtqBxCZ,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJrgB,EADI,GACIkB,EADJ,QACQoC,EADR,iBACiBm1B,GACnBpY,EAEJtgB,EAASw3B,GADTx3B,EAAS02B,GAAqB12B,EAAQC,EAAQkB,EAAIoC,GACN/C,EAAS+C,GAEjDA,EAAQsC,aACV7F,GAAS24B,EAAAA,EAAAA,IACP34B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,cAIZ9D,EAAAA,EAAAA,IAAU/B,GAEV,MAAM44B,GAAa5kB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GAErD,IAAI03B,EAAAA,EAAAA,IAAoC74B,EAAQC,EAAQsD,GAAwB,OAC9E,GAAIA,EAAQ8G,aAAc,UAAE9G,EAAQ2G,eAAV,QAAE,EAAiBwC,QAAS,CACpD,MAAMnL,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAChDuB,GAEFf,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAUqB,EAAmBrB,SAC7BqE,UAAWhB,EAAQpC,GACnB0F,aAAa,EACbS,qBAAqB,IAK3B,MAAM,WAAEzB,IAAeyxB,EAAAA,EAAAA,IAAsBt3B,EAAQC,EAAQsD,IAA0B,GACnFsC,GACFrF,EAAQ+3B,wBAAwB,CAAEt4B,OAAAA,EAAQC,SAAU2F,EAAW3F,YAI5DywB,EAAAA,EAAAA,IAAeptB,IAClBoD,YAAW,KACT,IAAImyB,GAAgBlyB,EAAAA,EAAAA,MAChB8xB,IACFI,GAAgBt3B,EAAAA,EAAAA,IAAmBs3B,EAAe74B,EAAQmB,EAAAA,GAAgB,eAAgBD,KAE5FY,EAAAA,EAAAA,IAAUg2B,GAAsBe,EAAe74B,EAAQ24B,MACtDnC,SAGL10B,EAAAA,EAAAA,IAAUg2B,IAAsBnxB,EAAAA,EAAAA,MAAa3G,EAAQ24B,KAIlDtF,EAAAA,EAAAA,GAAmBtzB,EAAQC,IAC9BO,EAAQ+yB,eAGV,MAGF,IAAK,8BAA+B,OAClC,MAAQtzB,OAAQijB,IAAkB/iB,EAAAA,EAAAA,IAAyBH,IAAW,GAEtE,GAAIkjB,IAAkB5C,EAAOnf,GAAI,OACjC,MAAMoC,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQkjB,EAAe5C,EAAO/b,WAEhE,IAAKhB,EAAS,OAGd,IAAIw1B,EAAAA,EAAAA,IAAex1B,KAAa+c,EAAOlT,MAAO,OAE9C,MAAM4rB,GAAaC,EAAAA,EAAAA,IAAyBj5B,EAAQsgB,EAAOlT,OAE3DpN,EAAS,IACJA,EACHowB,wBAAyB,IAAKpwB,EAAOowB,yBAA2B,GAAK,CACnEjvB,IAAI,UAAAnB,EAAOowB,+BAAP,eAAgC5qB,SAAU,EAC9C0qB,eAAgB8I,GAAaE,EAAAA,EAAAA,IAA+BF,GAAc1Y,EAAOlT,MACjF7I,UAAW+b,EAAO/b,cAItBxC,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAY+c,EAEhCtgB,EAAS02B,GAAqB12B,EAAQC,EAAQkB,EAAIoC,GAAS,GAE3D,MAAM41B,GAAeC,EAAAA,EAAAA,IAAmBp5B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,gBAAgB4W,EAAAA,EAAAA,IAAO,IAAImhB,EAAch4B,MAErGY,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,gBAAiB,SACpB,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAY+c,EAGhC,KADuBtM,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GAEvD,OAGFnB,EAAS02B,GAAqB12B,EAAQC,EAAQkB,EAAIoC,GAElD,MAAMq1B,GAAa5kB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GACjDoC,EAAQsC,aACV7F,GAAS24B,EAAAA,EAAAA,IACP34B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,aAGZ7F,EAAS+3B,GAAsB/3B,EAAQC,EAAQ24B,IAE/C72B,EAAAA,EAAAA,IAAU/B,GAIV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE9ByF,IACInC,EAAQ8G,aACT,UAAA3E,EAAKE,mBAAL,eAAkBzE,MAAOoC,EAAQpC,KACjCk4B,EAAAA,EAAAA,IAAoBr5B,EAAQ0F,KAC5BmzB,EAAAA,EAAAA,IAAoC74B,EAAQC,EAAQsD,KACpD2B,EAAAA,EAAAA,IAAuBlF,EAAQC,GAAQ,UAAAsD,EAAQsC,kBAAR,eAAoB3F,WAAYkB,EAAAA,KAE1EZ,EAAQyG,mBAGV,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEhH,EAAF,GAAUkB,EAAV,QAAcoC,GAAY+c,EAGhC,KADuBvH,EAAAA,EAAAA,IAAuB/Y,EAAQC,EAAQkB,GAE5D,OAGFnB,EAAS02B,GAAqB12B,EAAQC,EAAQkB,EAAIoC,GAAS,GAC3D,MAAMgE,EAAMnC,OAAOC,MAAKi0B,EAAAA,EAAAA,IAAwBt5B,EAAQC,IAAW,IAAIoD,IAAIoC,QAAQ/B,MAAK,CAAC6U,EAAGC,IAAMA,EAAID,IACtGvY,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBmG,IAC5ExF,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,6BAA8B,CACjC,MAAM,OAAEC,EAAF,QAAU6N,EAAV,QAAmBvK,GAAY+c,EAErCtgB,EAASw3B,GAA2Bx3B,EAAQQ,EAAS+C,GAErD,MAAMqzB,GAAiB5iB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQ6N,GAEzD9N,GAASs4B,EAAAA,EAAAA,IAAmBt4B,EAAQC,EAAQ,CAAC6N,IAGzCvK,EAAQozB,cACV32B,GAASu5B,EAAAA,EAAAA,IAA4Bv5B,EAAQC,EAAQ,CAAC6N,KAGxD9N,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQsD,EAAQpC,GAAI,IAClDy1B,KACArzB,EACHsS,gBAAiB/H,IAGnB,MAAM8qB,GAAa5kB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsD,EAAQpC,IAC7DnB,EAAS+3B,GAAsB/3B,EAAQC,EAAQ24B,GAE/C,MAAMY,GAASlC,EAAAA,EAAAA,IAAsBt3B,EAAQC,EAAQsD,GAEjDi2B,MAAAA,GAAAA,EAAQ3zB,aACVrF,EAAQi5B,oBAAoB,CAAEjvB,MAAOjH,EAAQpC,KAE7CnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQu5B,EAAO3zB,WAAW3F,SAAU,aAAc,IACjFs5B,EAAO3zB,WACVE,cAAexC,EAAQpC,GACvBsW,uBAAwBlU,EAAQpC,OAIpCY,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,sCAAuC,CAC1C,MAAM,OAAEC,EAAF,QAAU6N,EAAV,QAAmBvK,GAAY+c,EAC/B6Y,GAAeC,EAAAA,EAAAA,IAAmBp5B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB,IAAI+3B,EAAc51B,EAAQpC,KAEtG,MAAMy1B,GAAiB7d,EAAAA,EAAAA,IAAuB/Y,EAAQC,EAAQ6N,GAE9D9N,GAASu5B,EAAAA,EAAAA,IAA4Bv5B,EAAQC,EAAQ,CAAC6N,IACtD9N,GAASo3B,EAAAA,EAAAA,IAAuBp3B,EAAQC,EAAQsD,EAAQpC,GAAI,IACvDy1B,KACArzB,EACHsS,gBAAiB/H,KAGnB/L,EAAAA,EAAAA,IAAU/B,GACV,MAGF,IAAK,kBAAmB,CACtB,MAAM,OAAEC,EAAF,SAAU20B,EAAV,WAAoB7xB,GAAeud,EAEnCoZ,GAAmBC,EAAAA,EAAAA,IAAgB35B,EAAQC,IAAW,GACtD25B,EAAehF,EACjB,IAAI8E,KAAqB32B,GAAYW,MAAK,CAAC6U,EAAGC,IAAMA,EAAID,IACxDmhB,EAAiBp2B,QAAQnC,IAAQ4B,EAAWgF,SAAS5G,MAEzDY,EAAAA,EAAAA,KAAUP,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,YAAaw4B,IAE1E,MAGF,IAAK,mBAAoB,CACvB,MAAM,OACJ35B,EADI,SACIC,EADJ,WACc2F,EADd,eAC0B4xB,GAC5BnX,EAGEuZ,EAAe,KADK/zB,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,MAGtD2F,GAGL,IAAKg0B,EAAa35B,SAChB,OAGFF,GAAS24B,EAAAA,EAAAA,IAAiB34B,EAAQC,EAAQC,EAAU25B,GAEhDpC,IACFz3B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,iBAAkBu3B,KAG1E11B,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,gBAAiB,CACpB,MAAQmB,GAAIlB,GAAWqgB,EACjBwZ,GAAe32B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE5C65B,KAAiBlT,EAAAA,EAAAA,IAAS3mB,KAC5BD,GAASs4B,EAAAA,EAAAA,IAAmBt4B,EAAQC,EAAQmF,OAAOC,KAAKy0B,GAAcz2B,IAAIoC,UAC1E1D,EAAAA,EAAAA,IAAU/B,GACVQ,EAAQu5B,aAAa,CAAE95B,OAAAA,EAAQ+3B,OAAO,KAGxC,MAGF,IAAK,iBAAkB,CACrB,MAAM,IAAEzwB,EAAF,OAAOtH,GAAWqgB,EAExB6X,GAAel4B,EAAQsH,EAAK/G,EAASR,GACrC,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEuH,EAAF,OAAOtH,GAAWqgB,GAoZ9B,SACErgB,EAA4BsH,EAAe/G,EAAwBR,GAE9DC,IAILsH,EAAIqB,SAASzH,IACXnB,GAASo3B,EAAAA,EAAAA,IAAuBp3B,EAAQC,EAAQkB,EAAI,CAClDiT,YAAY,QAIhBrS,EAAAA,EAAAA,IAAU/B,GAEV2G,YAAW,KACT3G,GAASu5B,EAAAA,EAAAA,KAA4B3yB,EAAAA,EAAAA,MAAa3G,EAAQsH,GAC1D,MAAMyyB,GAAoBV,EAAAA,EAAAA,IAAwBt5B,EAAQC,GAC1DD,GAASwB,EAAAA,EAAAA,IACPxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBgE,OAAOC,KAAK20B,GAAqB,IAAI32B,IAAIoC,UAE3F1D,EAAAA,EAAAA,IAAU/B,KACTy2B,KAxaCwD,CAAwBh6B,EAAQsH,EAAK/G,EAASR,GAC9C,MAGF,IAAK,gBAAiB,CACpB,MAAM,OAAEC,GAAWqgB,EACbpd,EAAelD,EAAO2B,SAAS8G,SAASxI,GAC1CiD,EAEFi1B,GAAel4B,EADHmF,OAAOC,KAAKnC,EAAa2N,MAAMxN,IAAIoC,QACnBjF,EAASR,GAErCQ,EAAQqzB,kBAAkB,CAAE5zB,OAAAA,IAG9B,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEsH,EAAF,cAAO+sB,GAAkBhU,EAE/B/Y,EAAIqB,SAASzH,IACX,MAAMlB,GAASu0B,EAAAA,EAAAA,IAAsBx0B,EAAQmB,GACzClB,IACFD,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQkB,EAAImzB,QAInDvyB,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,wBAAyB,CAC5B,MAAM,UAAEu0B,EAAF,IAAahtB,EAAb,cAAkB+sB,GAAkBhU,EAE1C/Y,EAAIqB,SAASzH,IACXnB,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQu0B,EAAWpzB,EAAImzB,OAGpDvyB,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,oBAAqB,CACxB,MAAM,OAAEk6B,EAAF,WAAUC,GAAe7Z,EAEzB/c,GAAU62B,EAAAA,EAAAA,IAA0Bp6B,EAAQk6B,GAElD,GAAI32B,MAAAA,GAAAA,EAAS2G,QAAQ0O,KAAM,CACzB,MAAMyhB,EAAc,IAAK92B,EAAQ2G,QAAQ0O,QAASuhB,IAG1CjuB,QAASouB,GAAmBD,EAAYnuB,SAAW,GAC3D,GAAIouB,IAAmBA,EAAerJ,MAAO7tB,GAAWA,EAAO8tB,WAAY,CACzE,MAAM,QAAEhlB,GAAY3I,EAAQ2G,QAAQ0O,KAAK1M,QACnCquB,EAAgBruB,GAAWA,EAAQ5I,QAAQF,GAAWA,EAAO8tB,WAC/DqJ,GACFA,EAAc3xB,SAAS4xB,IACrB,MAAMC,EAAoBH,EAAensB,WAAW/K,GAAWA,EAAOyU,SAAW2iB,EAAa3iB,SAC1F4iB,GAAqB,IACvBJ,EAAYnuB,QAAQA,QAASuuB,GAAmBvJ,UAAW,OAMnEnvB,EAAAA,EAAAA,KAAUkS,EAAAA,EAAAA,IACRjU,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACE+I,QAAS,IACJ3G,EAAQ2G,QACX0O,KAAMyhB,MAKd,MAGF,IAAK,wBAAyB,CAC5B,MAAM,OAAEH,EAAF,OAAU5tB,EAAV,QAAkBsL,GAAY0I,EAC9B/c,GAAU62B,EAAAA,EAAAA,IAA0Bp6B,EAAQk6B,GAClD,IAAK32B,IAAYA,EAAQ2G,QAAQ0O,OAASrV,EAAQ2G,QAAQ0O,KAAK1M,QAC7D,MAGF,MAAM,KAAE0M,GAASrV,EAAQ2G,SAEnB,eAAEwwB,EAAF,YAAkBC,EAAlB,QAA+BzuB,GAAY0M,EAAK1M,QAChD0uB,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjD1R,EAAa/c,EAAU,IAAIA,GAAW,GAE5C0uB,EAAkB32B,KAAKqI,GAEvBsL,EAAQhP,SAASiP,IACf,MAAMijB,EAAe7R,EAAWrf,MAAMxG,GAAWA,EAAOyU,SAAWA,IAC7DkjB,EAAoB9R,EAAW9a,WAAW/K,GAAWA,EAAOyU,SAAWA,IACvEmjB,EAA+BF,EAAe,IAAKA,GAAiB,CAAEjjB,OAAAA,EAAQojB,YAAa,GAEjGD,EAAcC,aAAe,EACzB3uB,IAAWtM,EAAOiX,gBACpB+jB,EAAc9J,UAAW,GAGvB6J,EACF9R,EAAW8R,GAAqBC,EAEhC/R,EAAWhlB,KAAK+2B,OAIpBj5B,EAAAA,EAAAA,KAAUkS,EAAAA,EAAAA,IACRjU,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACE+I,QAAS,IACJ3G,EAAQ2G,QACX0O,KAAM,IACDA,EACH1M,QAAS,IACJ0M,EAAK1M,QACRwuB,eAAgBE,EAChBD,YAAaE,EACb3uB,QAAS+c,QAOnB,MAGF,IAAK,4BAA6B,CAChC,MAAM,QAAE1lB,GAAY+c,GAEhB4a,EAAAA,EAAAA,IAAyBl7B,IAC3BQ,EAAQ8J,0BAA0B,CAAE/G,QAAAA,IAGtC,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEtD,EAAF,GAAUkB,EAAV,UAAc6vB,GAAc1Q,EAC5B/c,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GAC5CuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsgB,EAAOrgB,QACjCk7B,EAAmB53B,MAAAA,OAAH,EAAGA,EAASytB,UAGlC,GAAImK,GAAoB5I,GAAavB,EAAWmK,GAC9C,OAIF,MAAMC,GAAeC,EAAAA,EAAAA,IAAqBF,EAAkBnK,EAAWhxB,EAAOiX,eAI9E,GAFAjX,GAASiU,EAAAA,EAAAA,IAAkBjU,EAAQC,EAAQkB,EAAI,CAAE6vB,UAAW1Q,EAAO0Q,YAE/DoK,EAAc,CAChB,MAAMxC,GAAa5kB,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQkB,GACrD,IAAKuE,IAASkzB,EAAY,QAC1BxE,EAAAA,GAAAA,IAAmB,CACjB1uB,KAAAA,EACAnC,QAASq1B,EACT0C,YAAY,KAIhBv5B,EAAAA,EAAAA,IAAU/B,GACV,WCpfN,MAEMu7B,IAA8B3hB,EAAAA,EAAAA,KASpC,WACE,MAAM5Z,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,KAAU+iB,EAAAA,EAAAA,IAAoB9kB,EAAQ,IACjCA,EAAOwQ,MAAMuU,gBACbyW,MAGLA,GAAuB,KAnBM,KAE0D,GAEzF,IAAIA,GAAsD,IAkB1Dj7B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOmG,EAAAA,EAAAA,IAAczmB,EAAQsgB,EAAOnf,IAGtC,IAAK,aACH,OAAO8kB,EAAAA,EAAAA,IAAWjmB,EAAQsgB,EAAOnf,GAAImf,EAAOrI,MAG9C,IAAK,mBAGH,OA7BwB3L,EA4BHgU,EAAOhU,OA5BYmvB,EA4BJnb,EAAOsN,OA3B/C4N,GAAqBlvB,GAAUmvB,OAC/BF,KA8BE,IAAK,qBAAsB,CACzB,MAAM,GAAEp6B,EAAF,SAAMkY,GAAaiH,EACnBob,EAAa17B,EAAOwQ,MAAMK,KAAK1P,GACrC,IAAKu6B,EACH,OAGF,OAAOzV,EAAAA,EAAAA,IAAWjmB,EAAQmB,EAAI,CAC5BkY,SAAU,IACLqiB,EAAWriB,YACXA,MA1Cb,IAA8B/M,EAAgBmvB,MCT9Cl7B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO5E,EAAAA,EAAAA,IAAiB1b,EAAQsgB,EAAOnf,GAAImf,EAAOhF,gBCCxD/a,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOqb,WACFC,EAAAA,EAAAA,KAAkBh1B,EAAAA,EAAAA,MAAa0Z,EAAOnf,KAEtConB,EAAAA,EAAAA,KAAqB3hB,EAAAA,EAAAA,MAAa0Z,EAAOnf,IAGpD,IAAK,0BACHY,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHue,YAAa,CACXnG,QAAS,MAGb,MAEF,IAAK,yBACHxe,EAAQua,uBACR,MAEF,IAAK,gBACH/a,EAAOkiB,SAAS2Z,QAAQvb,EAAOwb,KAAwBxb,EAAOyb,MAC9D,MAEF,IAAK,kCACH/7B,GAASg8B,EAAAA,EAAAA,KAAqBp1B,EAAAA,EAAAA,MAAa0Z,EAAOzR,KAClD7O,GAAS8qB,EAAAA,EAAAA,IAAe9qB,EAAQ+qB,EAAAA,GAAAA,iBAChChpB,EAAAA,EAAAA,IAAU/B,QCjChBO,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAO2b,EAAAA,EAAAA,IAAqBj8B,EAAQsgB,EAAO4b,SAAU5b,EAAO/J,SAAU+J,EAAO6b,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJl8B,EADI,QACIoG,EADJ,SACakQ,EADb,mBACuB4lB,GACzB7b,EACStgB,EAAOwL,MAAMqF,KAAK5Q,KAG7BD,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQC,EAAQ,CAAEoG,QAAAA,MAGxCtE,EAAAA,EAAAA,KAAUq6B,EAAAA,EAAAA,IAAmBp8B,EAAQC,EAAQ,CAAEoG,QAAAA,EAASkQ,SAAAA,EAAU4lB,mBAAAA,KAClE,YCnBN57B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFtgB,EACHq8B,cAAe,IACVr8B,EAAOq8B,cACVvf,WAAW,EACXsN,uBAAwB9J,EAAO9a,SAKrC,IAAK,mBACH,MAAO,IACFxF,EACHq8B,cAAe,IACVr8B,EAAOq8B,cACVhtB,MAAOiR,EAAO/c,c,gBCdxBhD,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,OAAQA,EAAO,UACb,IAAK,kBACH,MAAoC,cAAhCA,EAAOgc,KAAKC,gBACVv8B,EAAOw8B,WAAWC,uBACpBj8B,EAAQk8B,eAAe,CAAEC,cAAc,KAGhCC,EAAAA,GAAAA,IAAgB58B,EAAQsgB,EAAOgc,KAAKn7B,KAIxC07B,EAAAA,GAAAA,IAAgB78B,EACrBsgB,EAAOgc,KAAKn7B,IACZowB,EAAAA,EAAAA,IAAKjR,EAAOgc,KAAM,CAAC,yBACnBh8B,EACAggB,EAAOgc,KAAKQ,mBAEhB,IAAK,wBAAyB,CAC5B,MAAMp3B,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsgB,EAAOrgB,QASvC,OARIyF,IACF1F,GAASiW,EAAAA,EAAAA,IAAWjW,EAAQsgB,EAAOrgB,OAAQ,CACzCoZ,SAAU,IACL3T,EAAK2T,SACR0jB,YAAazc,EAAOgc,KAAKn7B,OAIxBnB,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAE+8B,EAAF,aAAeC,EAAf,WAA6B7kB,GAAemI,GAC5C,cAAErJ,GAAkBjX,EAgB1B,OAbAA,GAAS4G,EAAAA,EAAAA,MACTo2B,EAAap0B,SAASq0B,IAChBA,EAAY97B,KACdnB,GAASk9B,EAAAA,GAAAA,IACPl9B,EAAQ+8B,EAAaE,EAAY97B,GAAI87B,EAAan4B,QAAQqT,IAAelB,IAAkBgmB,EAAY97B,QAIzGgX,IACFnY,GAAS68B,EAAAA,GAAAA,IAAgB78B,EAAQ+8B,EAAa,CAC5C5kB,WAAAA,KAGGnY,QClDbO,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS8f,KAC9C,GACO,gCADCA,EAAO,SAEX,OAAOnR,EAAAA,EAAAA,IAAanP,M,iFCHX,SAASm9B,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACDC,EAAAA,EAAAA,IAAeF,IACrB,CAACA,I,eCJN,MAAMG,GAAezG,SAAS0G,cAAc,yBACtCC,IAAyBF,MAAAA,QAAA,EAAAA,GAAcG,aAAa,aAAc,GAClEC,GAA6B,4EAiCnC,SAASC,GAAarwB,GACpBA,EAAEswB,iB,2DC5BJ,MAmBA,IAAeC,EAAAA,EAAAA,KAnBqB,IAAuB,IAAtB,cAAEC,GAAoB,GACzDC,EAAAA,GAAAA,MACA,MAAMC,GAA2BC,EAAAA,EAAAA,MAQjC,IANAb,EAAAA,EAAAA,KAAU,KACJU,IACFI,EAAAA,GAAAA,GAAeF,KAEhB,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACE,0BAAKG,UAAU,wBAAuBC,EAAAA,GAAAA,IAAqBJ,O,sGCrBxD,IAAKK,GAYG,SAASC,GACtBv7B,EACAu5B,EACA/Z,EACAgc,EACAC,EACAC,GAEA,IAAI9Q,EAUArrB,EAWAkC,EAWJ,OA3BEmpB,EC5BW,WACb,MAAO+Q,EAAUC,IAAeC,EAAAA,EAAAA,IAASn4B,OAAOo4B,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAYl4B,OAAOo4B,UAAUC,QAM/B,OAHAr4B,OAAOu4B,iBAAiB,SAAUD,GAClCt4B,OAAOu4B,iBAAiB,UAAWD,GAE5B,KACLt4B,OAAOw4B,oBAAoB,UAAWF,GACtCt4B,OAAOw4B,oBAAoB,SAAUF,MAEtC,IAEIL,EDOiBQ,IACoB,8BAApB5C,EAEb/Z,EACA8b,GAAiBc,QAEjBd,GAAiBe,OAJjBf,GAAiBgB,kBAS1B/8B,EADEqrB,IAAW0Q,GAAiBe,QAAUX,EAC7B,OACFF,EACE,eACFC,EACE,YAEA,UAIT7Q,IAAW0Q,GAAiBgB,kBAC9B76B,EAAOzB,EAAK,qBACH4qB,IAAW0Q,GAAiBc,UACrC36B,EAAOzB,EAAK,aAGG,iBAAbT,IACFkC,EAAOA,EAAM86B,cAAcpS,QAAQ,OAAQ,KAGtC,CACLqS,iBAAkB5R,EAClB6R,yBAA0Bl9B,EAC1Bm9B,qBAAsBj7B,I,SAvDd65B,GAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,K,0FEYZ,MA0BA,IAAeR,EAAAA,EAAAA,KA1B+B,IAIxC,IAJyC,iBAC7C0B,EAD6C,qBAE7CE,EAF6C,QAG7CC,GACI,EACJ,MAAM38B,GAAO48B,EAAAA,GAAAA,KAEb,OACE,0BAAKz+B,GAAG,0BAA0B0+B,IAAK78B,EAAK88B,MAAQ,WAAQx/B,EAAWq/B,QAASA,GAC9E,mBAACI,GAAA,EAAD,CAASC,MAAM,UACf,0BAAK5B,UAAU,cACb,mBAAC6B,GAAA,EAAD,CAAYC,UAAWV,EAAkBtN,KAAK,cAC3CwN,IAGL,mBAACS,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,OACLJ,MAAM,qBAEN,2BAAM5B,UAAU,oBCyBlBiC,GAA0B,CAAC,EAAG,EAAG,GA2RvC,IAAevC,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MACEU,MAAO6/B,EADH,eACgBh1B,EADhB,OACgCtL,EADhC,KACwC8J,GAC1C/J,EAAOkL,cACL,cAAE+L,EAAF,gBAAiBslB,EAAjB,UAAkC/Z,GAAcxiB,GAC9C6Q,KAAM2vB,GAAcxgC,EAAOwL,OAC7B,4BAAEi1B,EAAF,eAA+BtP,GAAmBnxB,EAAOkiB,SAASkP,MAExE,MAAO,CACLmP,YAAAA,EACAzjB,YAAWvR,GAAiBzG,QAAQyG,EAAeC,OAASD,EAAe5J,UAC3EsV,cAAAA,EACAupB,UAAAA,EACAE,mBAAoBzgC,EACpB0gC,WAAY52B,EACZ62B,OAAOC,EAAAA,EAAAA,IAAY7gC,GACnBmxB,eAAAA,EACAoL,gBAAAA,EACA/Z,UAAAA,EACAse,kBAAmBh8B,SAAQ3E,EAAAA,EAAAA,IAAyBH,IACpDygC,4BAAAA,EACAM,eAAgBj8B,QAAQ9E,EAAOwL,MAAMupB,QAAQC,WAtB/BsL,EArR8B,IAsB5C,IAtB6C,QACjDp2B,EADiD,eAEjD82B,EAFiD,cAGjDC,EAHiD,iBAIjDC,EAJiD,iBAKjDC,EALiD,iBAMjDC,EANiD,QAOjDC,EAPiD,YAQjDd,EARiD,UASjDzjB,EATiD,qBAUjDwkB,EAViD,cAWjDrqB,EAXiD,mBAYjDypB,EAZiD,WAajDC,EAbiD,MAcjDC,EAdiD,eAejDzP,EAfiD,UAgBjDqP,EAhBiD,gBAiBjDjE,EAjBiD,UAkBjD/Z,EAlBiD,kBAmBjDse,EAnBiD,4BAoBjDL,EApBiD,eAqBjDM,GACI,EACJ,MAAM,SACJ7+B,EADI,aAEJq/B,EAFI,oBAGJC,EAHI,iBAIJC,EAJI,sBAKJC,IACE9hB,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,KACP+B,EAAUz3B,IAAY03B,EAAAA,GAAAA,SAGtBC,GAAqBC,EAAAA,EAAAA,KAAQ,IAC1BnB,GACHoB,EAAAA,EAAAA,IAAmB,IAAIvsB,KAAkB,IAAbmrB,SAC5BrgC,GACH,CAACqgC,IACEqB,GAA2BF,EAAAA,EAAAA,KAAQ,IAClCH,GAAYnB,EAIVp7B,OAAO68B,OAAOzB,GAAW38B,QAAO,CAACq+B,EAAOx8B,KACxCy8B,EAAAA,EAAAA,IAAez8B,IAIbA,EAAK0R,YAAc8qB,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACP,EAASnB,KAEP,iBAAEhB,EAAF,qBAAoBE,EAApB,yBAA0CD,GAA6BlB,GAC3Ev7B,EAAMu5B,EAAiB/Z,EAAWse,EAAmBL,GAA8BM,GAG/EqB,EA9DoB,qBA8DA17B,OAAO27B,SAASC,SAEpCC,GAA8DT,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAEU,EAAF,OAAaC,GAAd,SACL,mBAACtC,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,OAAQf,IAAY30B,EAAAA,GACpBozB,KAAK,UACLJ,MAAM,cACN5B,UAAWqE,EAAS,SAAW,GAE/B9C,QAASgC,EAAUa,EAAY,IAAMnB,IACrCsB,UAAWhB,EAAU3+B,EAAK,qBAAuB,uBAEjD,0BAAKo7B,WAAWwE,EAAAA,GAAAA,GACd,sBACCjB,GAAW,aACZL,GAAwB,qBAK7B,CAACK,EAAS3+B,EAAMq+B,EAASC,IAEtBuB,GAAoBC,EAAAA,EAAAA,KAAY,KAC/BvC,GACHU,EAAc,MAEf,CAACV,EAAaU,IAEX8B,GAAyBD,EAAAA,EAAAA,KAAY,KACzCrB,EAAiB,CAAEhB,6BAA8BA,MAChD,CAACA,EAA6BgB,IAE3BuB,GAAoBF,EAAAA,EAAAA,KAAY,KACpC5gC,EAAS,CAAEf,GAAI8V,EAAe3V,sBAAsB,MACnD,CAAC2V,EAAe/U,IAEb+gC,GAAuBH,EAAAA,EAAAA,KAAav1B,IACxCA,EAAE21B,kBACF,MAAMC,EAAqB,UAAVvC,EAAoB,OAAS,QAE9Ca,EAAiB,CAAEb,MAAOuC,IAC1B1B,EAAiB,CAAE2B,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAUhS,IAAmBE,EAAAA,MACxC,CAACF,EAAgBsQ,EAAkBb,IAEhC0C,GAA6BR,EAAAA,EAAAA,KAAav1B,IAC9CA,EAAE21B,kBAEF,MAAMK,EAA8B,IAAnBpS,EAAuB,EAAI,EAC5CkP,GAAwBz3B,SAAQ,CAAC46B,EAAGxxB,KAClC8kB,SAASrJ,KAAKgW,UAAUC,OAAQ,mBAAkB1xB,IAAKuxB,IAAavxB,MAGtEyvB,EAAiB,CAAEtQ,eAAgBoS,MAClC,CAACpS,EAAgBsQ,IAEdkC,GAAqBb,EAAAA,EAAAA,KAAY,MACrCc,EAAAA,GAAAA,GAAuB,MACvBC,EAAAA,GAAAA,OACAC,EAAAA,GAAAA,QACC,IAEGC,GAAqBjB,EAAAA,EAAAA,KAAY,KACrCvB,EAAa,CAAEyC,SAAUhhC,EAAKqnB,SAC7B,CAACrnB,EAAKqnB,KAAMkX,IAET0C,EACJn/B,QAAQ47B,IACLx2B,IAAY03B,EAAAA,GAAAA,cACZ13B,IAAY03B,EAAAA,GAAAA,SAGXsC,EAAyBh6B,IAAY03B,EAAAA,GAAAA,SACvC5+B,EAAK,iBACLA,EAAK,UAET,OACE,0BAAKo7B,UAAU,kBACb,0BAAKj9B,GAAG,iBAAiBi9B,UAAU,eACjC,mBAAC+F,GAAA,EAAD,CACEC,QAAS7B,EACT8B,OAAS,GAAEC,EAAAA,MAAYjiB,EAAAA,GAAQkiB,SAAe96B,EAAAA,MAE9C,mBAAC+6B,GAAA,EAAD,CACEC,KAAK,iBACL9E,QAASqD,GAERhgC,EAAK,kBAER,mBAACwhC,GAAA,EAAD,CACEC,KAAK,UACL9E,QAASyB,GAET,2BAAMhD,UAAU,kBAAkBp7B,EAAK,kBACtCg/B,EAA2B,GAC1B,0BAAK5D,UAAU,kBAAkB4D,IAGrC,mBAACwC,GAAA,EAAD,CACEC,KAAK,OACL9E,QAASwB,GAERn+B,EAAK,aAER,mBAACwhC,GAAA,EAAD,CACEC,KAAK,WACL9E,QAASuB,GAERl+B,EAAK,aAER,mBAACwhC,GAAA,EAAD,CACEC,KAAK,WACL9E,QAASsD,GAET,2BAAM7E,UAAU,kBAAkBp7B,EAAK,wBACvC,mBAAC0hC,GAAA,EAAD,CACEvjC,GAAG,WACHwjC,MAAO3hC,EAAe,SAAV49B,EAAmB,mCAAqC,mCACpEgE,QAAmB,SAAVhE,EACTiE,aAAW,KAGf,mBAACL,GAAA,EAAD,CACEC,KAAK,aACL9E,QAAS2D,GAET,2BAAMlF,UAAU,6BAA6Bp7B,EAAK,yBAAyBu8B,eAC3E,mBAACmF,GAAA,EAAD,CACEvjC,GAAG,aACHwjC,MAAM,oBACNC,QAASzT,EAAiB,KAG9B,mBAACqT,GAAA,EAAD,CACEC,KAAK,OACL9E,QAASoE,GAER/gC,EAAK,qBAER,mBAACwhC,GAAA,EAAD,CACEC,KAAK,MACLK,KAAMC,EAAAA,IAFR,cAMC3C,GACC,sCACE,mBAACoC,GAAA,EAAD,CACEC,KAAK,SACLK,KAnNS,8BAoNTnF,QAASgE,GAHX,uBAOA,mBAACa,GAAA,EAAD,CACEC,KAAK,SACLK,KA3NW,qCA4NXnF,QAASmE,GAAAA,IAHX,2BAUN,mBAACkB,GAAA,EAAD,CACEC,QAAQ,wBACRC,yBAAyB,aACzB9G,UAAWsC,GAAsBC,EAAa,mBAAqB,GACnE/rB,MAAOosB,GAAkBT,EACzB4E,QAASlB,EACTnnB,UAAWA,GAA0C,cAA7B2iB,EACxB2F,aAA2C,cAA7B3F,EAA2C,cAAWn/B,EACpE+kC,uBAAqD,cAA7B5F,GAAsD,UAAVmB,EAAoB,aAAUtgC,EAClGglC,YAAapB,EACbqB,aAAa,MACbC,SAAU1gC,QAAQ47B,GAAsBC,GACxC8E,SAAUxE,EACVI,QAASA,EACTqE,QAAS7C,EACT8C,eAA6C,cAA7BlG,EAA2CsD,OAAyBziC,GAEnFuhC,GACC,mBAAC+D,GAAA,EAAD,CACEnB,KAAK,WACLvnB,MAAO2kB,EACP2D,UAAQ,EACR/G,YAAa35B,QAAQ47B,GACrBtC,UAAU,cACVuB,QAAS6B,EACTqE,SAxNmB,CAAE97B,UAAMzJ,KA2N9BogC,GACC,mBAACkF,GAAA,EAAD,CACEE,aAAcpF,EACdf,QAAS+B,EACT8D,UAAQ,EACRK,SA/NmB,CAAE1kC,QAAIb,MAmO/B,mBAACylC,GAAA,EAAD,CACEtD,OAAqC,YAA7BhD,EACRuG,UAAQ,EACR5H,UAAU,4BAEV,mBAAC,GAAD,CACEoB,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAASoD,W,qCC5SrB,MAkLA,IAAejF,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MACEq1B,aACExkB,KAAMukB,EACN9yB,WAAY2jC,EAFD,iBAGXC,GAJE,cAMJjvB,EANI,aAOJmN,EAPI,4BAQJ+hB,GACEnmC,EAEJ,MAAO,CACLo1B,gBAAAA,EACA6Q,iBAAAA,EACAC,iBAAAA,EACAjvB,cAAAA,EACAmN,aAAAA,EACA+hB,4BAAAA,KAnBc7F,EAhL2B,IASzC,IAT0C,gBAC9C8F,EAD8C,eAE9CC,EAF8C,gBAG9CjR,EAH8C,iBAI9C6Q,EAJ8C,iBAK9CC,EAL8C,cAM9CjvB,EAN8C,aAO9CmN,EAP8C,4BAQ9C+hB,GACI,EACJ,MAAM,gBACJG,EADI,oBAEJC,EAFI,SAGJrkC,IACE0d,EAAAA,EAAAA,MAGE4mB,GAAgBC,EAAAA,EAAAA,IAAuB,MAEvCzjC,GAAO48B,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJjZ,GACFkiB,MAED,CAACliB,EAAckiB,IAElB,MAAMI,GAAmB5E,EAAAA,EAAAA,KAAQ,IACxBmE,EACHA,EAAiB5iC,KAAKlC,GAAOi0B,EAAgBj0B,IAAO,KAAImC,OAAOwB,cAC/DxE,GACH,CAAC80B,EAAiB6Q,IAEfU,GAAqB3I,EAAAA,GAAAA,MACrB4I,GAAa9E,EAAAA,EAAAA,KAAQ,KACzB,GAAK4E,GAAqBA,EAAiBlhC,OAI3C,MAAO,CACL,CACErE,GAAI0lC,EAAAA,GACJ3pB,MAAqB,OAAdla,EAAKqnB,KAAgB,MAAQrnB,EAAK,sBAExC0jC,EAAiBrjC,KAAI,gBAAC,GAAElC,EAAF,MAAM+b,GAAP,QAAoB,CAC1C/b,GAAAA,EACA+b,MAAAA,EACA4pB,WAAU,UAAEH,EAAmBxlC,UAArB,aAAE,EAAwB4lC,WACpCC,cAAeliC,QAAO,UAAC6hC,EAAmBxlC,UAApB,aAAC,EAAwB8lC,2BAGlD,CAACP,EAAkBC,EAAoB3jC,IAEpCkkC,GAAkBpE,EAAAA,EAAAA,KAAa/wB,IACnCw0B,EAAoBx0B,EAAO,CAAEo1B,uBAAuB,MACnD,CAACZ,KAGJlJ,EAAAA,EAAAA,KAAU,KACHuJ,GAAeA,EAAWphC,QAI3B0gC,GAAoBU,EAAWphC,QACjC+gC,EAAoB,KAErB,CAACL,EAAkBU,EAAYL,KAElClJ,EAAAA,EAAAA,KAAU,KACR,GAAKmJ,EAAcrlB,SAAY7X,EAAAA,IAAiBs9B,GAAeA,EAAWphC,OAI1E,OAAO4hC,EAAAA,GAAAA,IAAcZ,EAAcrlB,QAAS,CAC1CkmB,wBAAyB,aACzBC,QAAU,CAAC/5B,EAAGvF,IACRA,IAAcu/B,GAAAA,GAAAA,MAChBhB,EAAoB97B,KAAK2kB,IAAI8W,EAAmB,EAAGU,EAAWphC,OAAS,GAAI,CAAE2hC,uBAAuB,KAC7F,GACEn/B,IAAcu/B,GAAAA,GAAAA,QACvBhB,EAAoB97B,KAAKC,IAAI,EAAGw7B,EAAmB,GAAI,CAAEiB,uBAAuB,KACzE,OAMZ,CAACjB,EAAkBU,EAAYL,IAElC,MAAMiB,GAAmBf,EAAAA,EAAAA,MACzBe,EAAiBrmB,QAA+B,IAArB+kB,GAC3B7I,EAAAA,EAAAA,KAAU,IAAOmK,EAAiBrmB,SAAUsmB,EAAAA,GAAAA,IAAsB,KAC5DD,EAAiBrmB,SACnBolB,EAAoB,WAEnBjmC,GAAY,CAAC4lC,EAAkBK,KAEpCmB,EAAAA,GAAAA,IAAoC,IAArBxB,GAAwB,IAAMK,EAAoB,EAAG,CAAEY,uBAAuB,OAE7F9J,EAAAA,EAAAA,KAAU,KACR,MAAMsK,EAAiBp6B,IACrB,GAAIA,EAAEq6B,SAAWr6B,EAAEs6B,UAAYt6B,EAAE8c,KAAKyd,WAAW,UAAYlB,EAAY,CACvE,MAAO,CAAEmB,GAASx6B,EAAE8c,KAAK/C,MAAM,cAAgB,GAC/C,IAAKygB,EAAO,OAEZ,GA3GsB,MA2GlBA,EAEF,YADA7lC,EAAS,CAAEf,GAAI8V,EAAe3V,sBAAsB,IAItD,MAAM6zB,EAAS1vB,OAAOsiC,GAAS,EAC/B,GAAI5S,EAASyR,EAAWphC,OAAS,EAAG,OAEpC+gC,EAAoBpR,EAAQ,CAAEgS,uBAAuB,IACrD55B,EAAEswB,mBAMN,OAFA/G,SAASmI,iBAAiB,UAAW0I,GAAe,GAE7C,KACL7Q,SAASoI,oBAAoB,UAAWyI,GAAe,OAI3D,MACEK,aAAcC,EADV,qBACmCC,IACrCC,EAAAA,GAAAA,IAAmBlC,OAAkB3lC,GAAW,GAEpD,SAAS8nC,EAAiBv7B,GACxB,MAAMw7B,EAAejjC,OAAO68B,OAAO7M,GAChCxrB,MAAK,QAAC,GAAEzI,GAAH,SAAYA,IAAOylC,EAAYV,GAAkB/kC,MAEzD,OAAKknC,GAAqC,IAArBnC,EAanB,mBAACoC,GAAA,EAAD,CACEC,WAAW,SACX9T,SAAU4T,EAAalnC,GACvB0L,SAAUA,EACVuX,aAAcA,EACdiiB,eAAgBA,EAChBD,gBAAiBA,IAjBjB,mBAACkC,GAAA,EAAD,CACEC,WAAW,MACX17B,SAAUA,EACVuX,aAAcA,EACdgiB,gBAAiBA,EACjBC,eAAgBA,IAiBxB,OACE,0BAAKjI,UAAU,eACZwI,MAAAA,GAAAA,EAAYphC,OACX,mBAACgjC,GAAA,EAAD,CAASC,KAAM7B,EAAY8B,UAAWxC,EAAkByC,YAAazB,IACnEe,EACF,0BAAK7J,WAAWwE,EAAAA,GAAAA,GAAe,mBAAoBsF,UACjD5nC,EACJ,mBAAC2/B,GAAA,EAAD,CACE2I,IAAKpC,EACLtU,KAAMiU,EAA8B,OAASnjC,EAAK88B,MAAQ,sBAAwB,kBAClFI,UAAWgG,EACX2C,YAAajC,EAAaA,EAAWphC,YAASlF,GAE7C8nC,Q,qCC1MT,MAOA,IAAetK,EAAAA,EAAAA,KAPwBgL,IACrC,MAAMC,GAAaC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOF,EAAa,mBAACA,EAAeD,GAAY,mBAACI,GAAA,EAAD,SCGlD,IAAepL,EAAAA,EAAAA,KAPyBgL,IACtC,MAAMK,GAAcH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOE,EAAc,mBAACA,EAAgBL,GAAY,mBAACI,GAAA,EAAD,S,eCSpD,MA0DA,IAAepL,EAAAA,EAAAA,KA1DqB,IAK9B,IAL+B,QACnCsL,EADmC,iBAEnCC,EAFmC,aAGnCC,EAHmC,WAInCC,GACI,EACJ,MAAOC,EAAYC,IAAiB5K,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACH+L,GACHK,GAAc,KAEf,CAACL,IAEJ,MAAMpmC,GAAO48B,EAAAA,GAAAA,KAEP8J,GAAe9G,EAAAA,GAAAA,GACnB,gBACAwG,GAAW,WACXI,GAAc,gBAGVG,GAAmB7G,EAAAA,EAAAA,KAAY,KACnC2G,GAAeD,KACd,CAACA,IAEEI,GAAc9G,EAAAA,EAAAA,KAAY,KAC9B2G,GAAc,KACb,IAEH,OACE,0BAAKrL,UAAWsL,GACd,mBAACvJ,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,UACN5B,UAAWoL,EAAa,SAAW,GACnC7J,QAASgK,EACThH,UAAW3/B,EAAKwmC,EAAa,QAAU,mBACvCK,UAAW,GAEX,wBAAGzL,UAAU,yBACb,wBAAGA,UAAU,gBAEf,mBAAC0L,GAAA,EAAD,CACErH,OAAQ+G,EACRO,UAAU,QACVC,UAAU,SACVC,WAAS,EACTC,QAASN,GAET,mBAACpF,GAAA,EAAD,CAAUC,KAAK,UAAU9E,QAAS2J,GAAetmC,EAAK,eACtD,mBAACwhC,GAAA,EAAD,CAAUC,KAAK,QAAQ9E,QAAS4J,GAAavmC,EAAK,aAClD,mBAACwhC,GAAA,EAAD,CAAUC,KAAK,OAAO9E,QAAS0J,GAAmBrmC,EAAK,yBCpCzDmnC,GAA0B/kC,OAAOC,KAAKu8B,EAAAA,IAAmBp8B,OAAS,EAIxE,IAAI4kC,GAsKJ,UAAetM,EAAAA,EAAAA,KApKgB,IAWzB,IAX0B,QAC9B5zB,EAD8B,YAE9Bq2B,EAF8B,WAG9BI,EAH8B,eAI9BK,EAJ8B,qBAK9BM,EAL8B,gBAM9B8E,EAN8B,cAO9BnF,EAP8B,gBAQ9BoJ,EAR8B,eAS9BhE,EAT8B,QAU9BhF,GACI,EACJ,MAAOiJ,EAAsBC,IAA2B1L,EAAAA,EAAAA,IAASv1B,EAAAA,IAE3DkhC,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBgE,GAAuB3H,EAAAA,EAAAA,KAAY,KACvCuH,EAAgBzI,EAAAA,GAAAA,YACf,CAACyI,IAEEK,GAAuB5H,EAAAA,EAAAA,KAAY,KACvCuH,EAAgBzI,EAAAA,GAAAA,YACf,CAACyI,IAEEM,GAAyB7H,EAAAA,EAAAA,KAAY,KACzCuH,EAAgBzI,EAAAA,GAAAA,mBACf,CAACyI,IAEEO,GAAuB9H,EAAAA,EAAAA,KAAY,KACvCuH,EAAgBzI,EAAAA,GAAAA,iBACf,CAACyI,IAEEQ,GAAuB/H,EAAAA,EAAAA,KAAY,KACvCuH,EAAgBzI,EAAAA,GAAAA,YACf,CAACyI,IAEES,GAAmBhI,EAAAA,EAAAA,KAAY,KAC/B54B,IAAY03B,EAAAA,GAAAA,WAGhB4I,EAAcrpB,SAAU,EACxBopB,GAAwB,MACvB,CAACrgC,IAEE6gC,GAAmBjI,EAAAA,EAAAA,KAAY,KACnC0H,EAAcrpB,SAAU,EAEpBipB,KACF1iC,aAAa0iC,IACbA,QAAe9pC,GAGjB8pC,GAAe1jC,OAAOC,YAAW,KAC1B6jC,EAAcrpB,SACjBopB,GAAwB,KA3DF,OA8DzB,KAEHlN,EAAAA,EAAAA,KAAU,KACR,IAAI2N,EASJ,OARI9gC,IAAY03B,EAAAA,GAAAA,SACdoJ,EAAmBtkC,OAAOC,YAAW,KACnC4jC,GAAwB,KApEF,MAsEfC,EAAcrpB,SAAW7X,EAAAA,KAClCihC,GAAwB,GAGnB,KACDS,IACFtjC,aAAasjC,GACbA,OAAmB1qC,MAGtB,CAAC4J,IAEJ,MAAO+gC,EAA0BC,EAAwBC,GAmE3D,WACE,MAAOC,EAAeC,IAAqBC,EAAAA,GAAAA,IAAQ,IAEnDjO,EAAAA,EAAAA,KAAU,KACR,MAAMkO,EAAU7kC,OAAOC,WAAW0kC,EAxJT,QA0JzB,MAAO,KACL3jC,aAAa6jC,MAEd,CAACF,IAEJ,MAAM,aAAErD,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiD,GAMjE,MAAO,CAACpD,EAAcE,EAJI,KACxBxhC,OAAO27B,SAASmJ,WAjF4DC,GAExEzoC,GAAO48B,EAAAA,GAAAA,KAEb,OACE,0BACEz+B,GAAG,kBACHuqC,aAAepiC,EAAAA,QAAkChJ,EAAnBwqC,EAC9Ba,aAAeriC,EAAAA,QAAkChJ,EAAnByqC,GAE9B,mBAAC,GAAD,CACE7gC,QAASA,EACT82B,eAAgBA,EAChBC,cAAeA,EACfC,iBAAkBuJ,EAClBtJ,iBAAkBuJ,EAClBtJ,iBAAkByJ,EAClBxJ,QAASA,EACTC,qBAAsBA,IAExB,mBAACrB,GAAA,EAAD,CACE/N,KAAMoP,EAAuB,OAAS,YACtCuH,YAAasB,GACbjK,UAAWh2B,EACX0hC,eAAa,EACbC,oBAAqBjK,EAAAA,GAAAA,WAEnB/0B,IACA,OAAQ3C,GACN,KAAK03B,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAayE,eAAgBA,EAAgBD,gBAAiBA,IACvE,KAAKxE,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACErB,YAAaA,EACbI,WAAYA,EACZ9zB,SAAUA,EACVw0B,QAASA,IAGf,KAAKO,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAat+B,OAAQ09B,EAAgBn0B,SAAUA,EAAUw0B,QAASA,IAC3E,QACE,WAIP4J,GACC,mBAAC9K,GAAA,EAAD,CACE2L,OAAK,EACLC,MAAI,EACJ3N,WAAWwE,EAAAA,GAAAA,GAAe,aAAcsI,GACxCvL,QAASwL,GAERnoC,EAAK,wBAGV,mBAAC,GAAD,CACEomC,QAASkB,EACTjB,iBAAkBqB,EAClBpB,aAAcqB,EACdpB,WAAYqB,QCrKpB,IAAe9M,EAAAA,EAAAA,KAPsBgL,IACnC,MAAMkD,GAAWhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO+C,EAAW,mBAACA,EAAalD,GAAY,mBAACI,GAAA,EAAD,SCG9C,IAAepL,EAAAA,EAAAA,KAPqBgL,IAClC,MAAMmD,GAAUjD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAOgD,EAAU,mBAACA,EAAYnD,GAAY,mBAACI,GAAA,EAAD,SCE5C,IAAepL,EAAAA,EAAAA,KAP2BgL,IACxC,MAAMoD,GAAgBlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOiD,EAAgB,mBAACA,EAAkBpD,GAAY,mBAACI,GAAA,EAAD,S,ICkBnDiD,I,SAAAA,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAAehnC,OAAOC,KAAK8mC,IAAa3mC,OAAS,EAgVvD,IAAes4B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MACEkL,cAAc,MACZxK,EADY,KAEZqJ,GAEFsrB,aAAa,iBACX6Q,GANE,4BAQJC,EARI,gBASJx5B,GACE3M,EACJ,MAAO,CACLugC,YAAa7/B,EAAOigC,WAAY52B,EAAMm8B,iBAAAA,EAAkBC,4BAAAA,EAA6Bx5B,gBAAAA,KAdvE2zB,EA7Ue,IAM7B,IAN8B,YAClCC,EADkC,WAElCI,EAFkC,iBAGlCuF,EAHkC,4BAIlCC,EAJkC,gBAKlCx5B,GACI,EACJ,MAAM,qBACJ0/B,EADI,sBAEJ3K,EAFI,kBAGJ4K,EAHI,oBAIJ9K,EAJI,iBAKJ+K,EALI,gBAMJC,EANI,mBAOJC,EAPI,qBAQJC,IACE9sB,EAAAA,EAAAA,MAGE+sB,GAAYlG,EAAAA,EAAAA,IAAuB,OAClCv8B,EAAS0iC,IAAc/N,EAAAA,EAAAA,IAA4B+C,EAAAA,GAAAA,WACnDiL,EAAgBC,IAAqBjO,EAAAA,EAAAA,IAASkO,EAAAA,GAAAA,OAC9C/L,EAAgBgM,IAAqBnO,EAAAA,EAAAA,IAAiB,KACtDoO,EAAc7G,IAAmB8G,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBvO,EAAAA,EAAAA,IAAiB,GAE3D,IAAIwO,EAA2BlB,GAAYmB,KAC3C,OAAQpjC,GACN,KAAK03B,EAAAA,GAAAA,SACHyL,EAAclB,GAAYoB,SAC1B,MACF,KAAK3L,EAAAA,GAAAA,SACHyL,EAAclB,GAAYH,SAC1B,MACF,KAAKpK,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHyL,EAAclB,GAAYqB,WAC1B,MACF,KAAK5L,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHyL,EAAclB,GAAYsB,SAI9B,MAAMC,GAAc5K,EAAAA,EAAAA,KAAa6K,IAC/B,GAAIzjC,IAAY03B,EAAAA,GAAAA,eACV+L,EAMN,GAAIzjC,IAAY03B,EAAAA,GAAAA,iBACV+L,EADN,CAOA,GAAIzjC,IAAY03B,EAAAA,GAAAA,cAAiC,CAC/C,MAAMgM,EAAoB9W,SAAS+W,eAAe,2BAC9CD,GACFA,EAAkBE,OAItB,GAAI5jC,IAAY03B,EAAAA,GAAAA,SACd,OAAQiL,GACN,KAAKE,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,SAEH,YADAD,EAAkBC,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,cAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAD,EAAkBC,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADAD,EAAkBC,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAD,EAAkBC,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADAD,EAAkBC,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAH,EAAWhL,EAAAA,GAAAA,eACXkL,EAAkBC,EAAAA,GAAAA,MAOpB7iC,IAAY03B,EAAAA,GAAAA,UAAmD,IAArBsE,GAK9C0G,EAAWhL,EAAAA,GAAAA,UACXoL,EAAkB,IAClBX,EAAqB,CAAE3rC,MAAO,KAC9B8gC,EAAoB,CAAEz3B,UAAMzJ,IAC5BohC,EAAsB,CAAEvgC,QAAIb,IAC5BgsC,IACA3lC,YAAW,KACTymC,EAAiB53B,KAAKC,SA7LM,MAkL5Bm3B,EAAWhL,EAAAA,GAAAA,mBAvHXgL,EAAWhL,EAAAA,GAAAA,sBAPXgL,EAAWhL,EAAAA,GAAAA,iBA2IZ,CACD13B,EAASg8B,EAAkB2G,EAAgBR,EAAsB7K,EAAqBE,EACtF4K,IAGIyB,GAAoBjL,EAAAA,EAAAA,KAAapiC,IACjCwJ,IAAY03B,EAAAA,GAAAA,UAKhBgL,EAAWhL,EAAAA,GAAAA,cAEPlhC,IAAU6/B,GACZ8L,EAAqB,CAAE3rC,MAAAA,KAPvBssC,EAAkBtsC,KASnB,CAACwJ,EAASq2B,EAAa8L,KAE1BhP,EAAAA,EAAAA,KACE,IAAOnzB,IAAY03B,EAAAA,GAAAA,UAAmD,IAArBsE,GAC7CuB,EAAAA,GAAAA,IAAsB,IAAMiG,WAC5BptC,GACJ,CAAC4lC,EAAkBh8B,EAASwjC,KAG9BrQ,EAAAA,EAAAA,KAAU,KACR,GAAInzB,IAAY03B,EAAAA,GAAAA,aAahB,OAFA9K,SAASmI,iBAAiB,UAAW0I,GAAe,GAE7C,KACL7Q,SAASoI,oBAAoB,UAAWyI,GAAe,IAVzD,SAASA,EAAcp6B,IACfygC,EAAAA,IAAazgC,EAAE0gC,UAAcD,EAAAA,IAAazgC,EAAEq6B,UAAar6B,EAAEs6B,UAAmC,OAAvBqG,EAAAA,GAAAA,GAAgB3gC,KAC3FA,EAAEswB,iBACF+O,EAAWhL,EAAAA,GAAAA,kBASd,CAAC13B,KAEJmzB,EAAAA,EAAAA,KAAU,KACRmP,IAEIK,IAAmBE,EAAAA,GAAAA,SACrBR,MAED,CAACC,EAAiBD,EAAkBM,IAEvC,MAAM,WACJsB,EADI,YACQC,EADR,cACqBC,GCzRtB,SACLC,EACAC,EACAlN,EACAmN,GAEA,MAAO3hC,EAAU4hC,EAAcC,IAAkBpD,EAAAA,GAAAA,MAC1CqD,EAAeC,IAAoB/P,EAAAA,EAAAA,OACnCgQ,EAAqBC,IAA0BjQ,EAAAA,EAAAA,MAUtD,SAASwP,IACPvX,SAASrJ,KAAKgW,UAAUsL,OAAO,oBA+CjC,OAxDA1R,EAAAA,EAAAA,KAAU,KACHiR,EAAWntB,SAAYqtB,IAI5BF,EAAWntB,QAAQ6tB,MAAM9f,MAAS,GAAEsf,SACnC,CAACF,EAAYE,KAsBhBnR,EAAAA,EAAAA,KAAU,KACR,IAAKxwB,EAAU,OAEf,MAAMoiC,EAAmB1hC,IACvB,MAAM2hC,EAAWzkC,KAAK0kC,KAAKN,EAAsBthC,EAAE6hC,QAAUT,GAC7DL,EAAWntB,QAAS6tB,MAAM9f,MAAS,GAAEggB,OAGvC,SAASG,IACPC,IACAf,EAASD,EAAWntB,QAASouB,aAG/B,SAASD,IACPjB,IACAvX,SAASoI,oBAAoB,YAAa+P,GAAiB,GAC3DnY,SAASoI,oBAAoB,UAAWmQ,GAAU,GAClDvY,SAASoI,oBAAoB,OAAQmQ,GAAU,GAC/CX,IAOF,OAJA5X,SAASmI,iBAAiB,YAAagQ,GAAiB,GACxDnY,SAASmI,iBAAiB,UAAWoQ,GAAU,GAC/CvY,SAASmI,iBAAiB,OAAQoQ,GAAU,GAErCC,IACN,CAACT,EAAqBF,EAAeL,EAAYC,EAAU1hC,EAAU6hC,IAEjE,CAAEP,WA5CT,SAAoB5gC,GAClBA,EAAEswB,iBAEF/G,SAASrJ,KAAKgW,UAAU+L,IAAI,oBAE5BZ,EAAiBrhC,EAAE6hC,SACnBN,EAAuBR,EAAWntB,QAASouB,aAC3Cd,KAqCmBL,YAlCrB,SAAqB7gC,GACnBA,EAAEswB,iBACFyQ,EAAWntB,QAAS6tB,MAAM9f,MAAQ,GAClCmS,KA+BgCgN,cAAAA,GDwN9BoB,CAAU9C,EAAWF,EAAoBC,EAAsB//B,GAE7D+iC,GAA6B5M,EAAAA,EAAAA,KAAah2B,IAC9C8/B,EAAWhL,EAAAA,GAAAA,UACXkL,EAAkBhgC,KACjB,IAEH,OACE,0BACE3L,GAAG,aACHynC,IAAK+D,GAEL,mBAAC1M,GAAA,EAAD,CACE/N,KAAMiU,EAA8B,OAASwJ,EAAAA,GAC7C9G,YAAauD,GACblM,UAAWmN,EACXzB,eAAa,EACbC,oBAAqBM,GAAYmB,OAE/BzgC,IACA,OAAQwgC,GACN,KAAKlB,GAAYoB,SACf,OACE,mBAAC,GAAD,CACE1gC,SAAUA,EACVw0B,QAASqM,EACTrD,gBAAiBuC,IAGvB,KAAKT,GAAYH,SACf,OACE,mBAAC,GAAD,CACEn/B,SAAUA,EACV+iC,cAAe/C,EACfI,aAAcA,EACd7G,gBAAiBA,EACjBC,eAAgBqJ,EAChBrO,QAASqM,EACTpM,qBAAsB6E,IAG5B,KAAKgG,GAAYqB,WACf,OACE,mBAAC,GAAD,CACE1R,IAAKqR,EACLtgC,SAAUA,EACVgjC,WAAS,EACT3lC,QAASA,EACTmgC,gBAAiBuC,EACjBvL,QAASqM,IAGf,KAAKvB,GAAYsB,SACf,OACE,mBAAC,GAAD,CACE3R,IAAKqR,EACLtgC,SAAUA,EACV3C,QAASA,EACTmgC,gBAAiBuC,EACjBvL,QAASqM,IAGf,QACE,OACE,mBAAC,GAAD,CACExjC,QAASA,EACTq2B,YAAaA,EACbI,WAAYA,EACZK,eAAgBA,EAChBoF,gBAAiBA,EACjBiE,gBAAiBuC,EACjB3L,cAAe8M,EACf1H,eAAgBqJ,EAChBrO,QAASqM,EACTpM,qBAAsB6E,QAMlC,0BACE/H,UAAU,gBACV0R,YAAa3B,EACb4B,UAAW1B,EACX2B,cAAe5B,S,gDE1WvB,MCkBA,GAlBsB,KACpB,MAAOhO,EAAM6P,IAAWpR,EAAAA,EAAAA,IAAwB5P,EAAAA,EAAAA,OAchD,OAZAoO,EAAAA,EAAAA,KAAU,KACR,MAAM6S,GAAet2B,EAAAA,EAAAA,KAAS,KAC5Bq2B,EAAQhhB,EAAAA,EAAAA,SAPG,KAQA,GAIb,OAFAvoB,OAAOu4B,iBAAiB,SAAUiR,GAE3B,KACLxpC,OAAOw4B,oBAAoB,SAAUgR,MAEtC,IAEI9P,G,4FCjBT,MAQA,IAAetC,EAAAA,EAAAA,KARiCgL,IAC9C,MAAM,OAAErG,GAAWqG,EACbqH,GAAsBnH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,uBAAwBxG,GAGnF,OAAO0N,EAAsB,mBAACA,EAAwBrH,QAAYxoC,KC4QpE,IAAew9B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAA+D,cAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B4vC,EAAY/qC,QAAQY,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,IAEhD,IAAKA,GAAQA,EAAK4N,eAAgB+8B,EAAAA,EAAAA,IAAqBrwC,GACrD,MAAO,CACLswC,QAAQ,GAIZ,MAAMjoB,GAAMC,EAAAA,EAAAA,IAActoB,EAAQC,GAC5BswC,GAAiBC,EAAAA,EAAAA,IAAqBxwC,EAAQC,GAC9CwwC,EAAmC,WAApBvpC,GAAgChH,IAAakB,EAAAA,GAC5DsvC,EAAyC,WAApBxpC,GAAgChH,IAAakB,EAAAA,GAClEuvC,GAAqBpqC,EAAAA,EAAAA,IAAyBvG,GAE9C4wC,EAAgB9rC,QAAQujB,IAAOwoB,EAAAA,EAAAA,IAAoB7wC,EAAQqoB,EAAIlnB,KAC/D2vC,GAAeF,GAAiB9rC,SAAQisC,EAAAA,EAAAA,IAA0B/wC,EAAQC,IAC1E+wC,EAAelsC,QACnB2rC,IAAiBZ,IAAaoB,EAAAA,EAAAA,IAAiBvrC,KAAUA,EAAKkuB,aAE1Dsd,EAAYT,GAAgBC,EAC5BS,EAAUC,EAAAA,KAAuBxqB,EAAAA,EAAAA,IAASlhB,EAAKvE,MAAQovC,IAAmBloB,EAC1EgpB,EAAUZ,IAAiBF,IAAmBS,EAC9CM,EAAWb,IAAiBO,EAC5BO,EAAoBH,EAAAA,IAAuB1rC,EAAK8rC,aAChDC,EAAqBL,EAAAA,KAAwB1rC,EAAK8rC,gBAClD,UAAA9rC,EAAKgsC,mBAAL,eAAkBC,aAAejsC,EAAKksC,YAAazxB,EAAAA,EAAAA,IAAiBza,IAI1E,MAAO,CACL4qC,QAAQ,EACRT,UAAAA,EACAc,mBAAAA,EACAG,YAAAA,EACAF,cAAAA,EACAI,aAAAA,EACAE,UAAAA,EACAC,QAAAA,EACAE,QAAAA,EACAQ,kBAbqB,UAAGnsC,EAAK2T,gBAAR,aAAG,EAAew4B,kBAcvCP,SAAAA,EACAC,kBAAAA,EACAE,mBAAAA,EACAK,oBAhBuB,UAAGpsC,EAAK2T,gBAAR,aAAG,EAAe4I,mBA9B3Bqe,EAzN6B,IAkB3C,IAlB4C,OAChDrgC,EADgD,SAEhDC,EAFgD,OAGhDowC,EAHgD,UAIhDT,EAJgD,YAKhDiB,EALgD,cAMhDF,EANgD,aAOhDI,EAPgD,UAQhDE,EARgD,QAShDC,EATgD,QAUhDE,EAVgD,kBAWhDQ,EAXgD,SAYhDP,EAZgD,kBAahDC,EAbgD,mBAchDE,EAdgD,oBAehDK,EAfgD,mBAgBhDnB,EAhBgD,iBAiBhDoB,GACI,EACJ,MAAM,YACJC,EADI,eAEJ7qB,EAFI,oBAGJ8qB,EAHI,WAIJC,EAJI,wBAKJC,EALI,4BAMJC,IACExyB,EAAAA,EAAAA,MAGEyyB,GAAgB5L,EAAAA,EAAAA,IAA0B,OACzC+C,EAAYC,IAAiB5K,EAAAA,EAAAA,KAAS,IACtCyT,EAAcC,IAAmB1T,EAAAA,EAAAA,SAAsCv+B,GAExEkyC,GAAuB1P,EAAAA,EAAAA,KAAY,KACvC2G,GAAc,GACd,MAAMgJ,EAAOJ,EAAclxB,QAASuxB,wBACpCH,EAAgB,CAAExjB,EAAG0jB,EAAKE,MAAO9iB,EAAG4iB,EAAKG,WACxC,IAEGC,GAAwB/P,EAAAA,EAAAA,KAAY,KACxC2G,GAAc,KACb,IAEGqJ,GAAuBhQ,EAAAA,EAAAA,KAAY,KACvCyP,OAAgBjyC,KACf,IAEGyyC,GAAuBjQ,EAAAA,EAAAA,KAAY,KACvCkP,EAAY,CAAE/xC,OAAAA,MACb,CAAC+xC,EAAa/xC,IAEX+yC,GAAiBlQ,EAAAA,EAAAA,KAAY,KACjC3b,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEE8rB,GAAmBnQ,EAAAA,EAAAA,KAAY,KACnCoP,EAAW,CAAEjyC,OAAAA,MACZ,CAACA,EAAQiyC,IAENgB,GAA0BpQ,EAAAA,EAAAA,KAAY,KAC1CsP,EAA4B,CAAEtlC,OAAQqmC,EAAAA,GAAAA,iBACrC,CAACf,IAEEgB,GAAoBtQ,EAAAA,EAAAA,KAAY,KACpCmP,IAEIjlC,EAAAA,GAEkB8pB,SAAS0G,cAAgC,uBACjD6V,QAEZ1sC,YAAW,KACT,MAAM2sC,EAAcxc,SAAS0G,cAAgC,mCACzD8V,GACFA,EAAYD,UA5EQ,OAgFzB,CAACpB,KAEJ5U,EAAAA,EAAAA,KAAU,KACR,GAAK6T,EAeL,OAFApa,SAASmI,iBAAiB,UAAW0I,GAAe,GAE7C,KACL7Q,SAASoI,oBAAoB,UAAWyI,GAAe,IAZzD,SAASA,EAAcp6B,GAEnBgmC,EAAAA,KAAYvF,EAAAA,IAAazgC,EAAE0gC,UAAcD,EAAAA,IAAazgC,EAAEq6B,WAAcr6B,EAAEs6B,UAAmC,OAAvBqG,EAAAA,GAAAA,GAAgB3gC,KAEpGA,EAAEswB,iBACFuV,QASH,CAAClC,EAAWkC,IAEf,MAAMpwC,GAAO48B,EAAAA,GAAAA,KAEb,OACE,0BAAKxB,UAAU,kBACXpxB,EAAAA,IACA,sCACG+kC,GAAoBf,GACnB,mBAAC7Q,GAAA,EAAD,CACEC,KAAK,OACLsC,QAAM,EACNoJ,OAAK,EACLnM,QAASoT,GAER/vC,EAAK6sC,EAAY,qBAAuB,qBAG5CkC,GAAoBjB,GACnB,mBAAC3Q,GAAA,EAAD,CACEC,KAAK,OACLsC,QAAM,EACNoJ,OAAK,EACLnM,QAASqT,GAERhwC,EAAK,aAGT+uC,GAAoBnB,GACnB,mBAACzQ,GAAA,EAAD,CACEC,KAAK,OACLsC,QAAM,EACNoJ,OAAK,EACLnM,QAASsT,GAERjwC,EAAK,eAGTkuC,GACC,mBAAC/Q,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,OAAQiO,EACR3Q,MAAM,cACNI,KAAK,UACLT,QAASyT,EACTzQ,UAAU,uBAEV,wBAAGvE,UAAU,iBAGhB+S,GACC,mBAAChR,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLT,QAASwS,EACTxP,UAAU,QAEV,wBAAGvE,UAAU,iBAKpBt5B,QAAQgtC,IACP,mBAAC3R,GAAA,EAAD,CACEhwB,OAAK,EACLiuB,UAAU,eACVsE,OAAQiO,EACR3Q,MAAM,cACNI,KAAK,UACLT,QAASuT,EACTvQ,UAAuB3/B,EAAZ6sC,EAAiB,oBAA4B,mBAExD,wBAAGzR,UAAU,cACb,0BAAKA,UAAU,SAAS0T,IAG5B,mBAAC3R,GAAA,EAAD,CACEyI,IAAKyJ,EACLjU,UAAWoL,EAAa,SAAW,GACnCr5B,OAAK,EACLuyB,QAAS11B,EAAAA,GACTozB,KAAK,UACLJ,MAAM,cACNwT,SAAUlD,EACV3N,UAAU,eACVhD,QAAS6S,GAET,wBAAGpU,UAAU,eAEdkU,GACC,mBAAC,GAAD,CACEryC,OAAQA,EACRC,SAAUA,EACVuiC,OAAQ+G,EACRiK,OAAQnB,EACRoB,iBAAkB1mC,EAAAA,KAA4B+kC,EAC9ClC,UAAWA,EACXiB,YAAaA,EACbF,cAAeA,EACfI,aAAcA,EACdE,UAAWA,EACXC,QAASA,EACTE,QAASA,EACTQ,kBAAmBA,EACnBP,SAAUA,EACVC,kBAAmBA,EACnBE,mBAAoBA,EACpBkC,mBAAoBZ,EACpBa,cAAeR,EACflJ,QAAS2I,EACTgB,oBAAqBf,S,oCCvQhB,SAASgB,GAAiBvwC,GAAsB,MAC7D,MAAMwwC,EAAexwC,IAAWywC,EAAAA,EAAAA,IAA4BzwC,GACtDiK,EAAUjK,MAAAA,GAAH,UAAGA,EAAS2G,eAAZ,aAAG,EAAkBsD,QAC5BymC,EAAwBF,GAAgBvmC,KAAY0mC,EAAAA,EAAAA,OAAqBH,EAAahsC,SAAS,eAC9FosC,EAAkBC,IAAuBvV,EAAAA,EAAAA,IAASwV,GAAAA,IACnD9vC,EAAYhB,MAAAA,OAAH,EAAGA,EAASpC,GAiB3B,OAfAmzC,EAAAA,EAAAA,KAAgB,KACTL,IAILM,EAAAA,GAAAA,IAAiB,OAAMhwC,IAAawvC,GACjCS,KAAKJ,GACLK,OAAO7lC,IACFyT,EAAAA,IAEFC,QAAQjT,MAAMT,QAGnB,CAACrK,EAAW0vC,EAAuBF,IAE/BE,EAAwBE,EAAmBJ,E,oCCsJpD,SAASW,GAAS3lB,EAAWc,EAAWX,EAAeylB,EAAgBC,GACrE,MAAQ,IAAG7lB,KAAKc,EAAI+kB,KAAUA,KAAUA,eACtC1lB,OAAWylB,EAAS,EAAIC,KAAUA,KAAUA,YAAiB1lB,OAqCjE,UAAe4O,EAAAA,EAAAA,KA3M+B,IAExC,IAFyC,MAC7CxmB,EAD6C,MACtCvF,GACH,EAEJ,MAAM8iC,GAAepO,EAAAA,EAAAA,IAAuB,MAEtCqO,GAAehT,EAAAA,EAAAA,KAAQ,IA8E/B,SAAyBxqB,EAAevF,GACtC,MAAMgjC,EAAez9B,EAAQvF,EAAQ,EAC/BijC,EAmBR,SAAsB19B,GACpB,IAAI09B,EAAY,EAahB,OAZc,IAAV19B,EACF09B,EAAY,GACO,IAAV19B,EACT09B,EAAY,GACO,IAAV19B,EACT09B,EAAY,IACO,IAAV19B,GAEAA,EAAQ,KADjB09B,EAAY,KAKPA,EAjCWC,CAAa39B,GACzB49B,EAmCR,SAAuB59B,EAAevF,GACpC,IAAIijC,EAAY,GAahB,OAZc,IAAV19B,EACF09B,EAAY,GACO,IAAV19B,EACT09B,EAAY,GACO,IAAV19B,EACT09B,EAAsB,IAAVjjC,EAAc,GAAK,IACZ,IAAVuF,GAEAA,EAAQ,KADjB09B,EAAY,KAKPA,EAjDYG,CAAc79B,EAAOy9B,GAClCK,EAmDR,SAAwB99B,EAAe09B,GACrC,OAAO19B,GAAS,EAAI,GAAK09B,EAAY19B,EAAQ,GAAKA,EAAQ,GApDtC+9B,CAAe/9B,EAAO09B,GAEpCM,EAAc,WAAUh+B,IACxBi+B,EAoDR,SAAqBp0C,EAAY6zC,EAAmB19B,GAGlD,IAAIk+B,EAAI,GACR,GAAc,IAAVl+B,EACFk+B,EAAId,GAAS,EAAG,EAAG,EAAGM,EAJT,GAKTN,GAAS,EAAG,GAAI,EAAGM,EAAY,EALtB,GAMTN,GAAS,EAAG,GAAI,EAAGM,EANV,QAQb,IAAK,IAAIhjC,EAAI,EAAGA,EAAIsF,EAAOtF,IACzBwjC,GAAKd,GAAS,GAAIM,EAAY,GAAKhjC,EAAG,EAAGgjC,EAT9B,GAaf,MACG,iBAAgB7zC,uBACJq0C,yBApEEC,CAAYH,EAAYN,EAAW19B,GAE9Co+B,EA4ER,SAA2B3jC,EAAeijC,EAAmB19B,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVvF,EAAc,EAAIijC,EAAY,EAGzB,IAAV19B,EACY,IAAVvF,EACK,EACY,IAAVA,EACF,GAGF,IAECijC,EAAY,GAAKjjC,EA5FJ4jC,CAAkBZ,EAAcC,EAAW19B,GAC5Ds+B,EA+FR,SAA4B7jC,EAAeuF,EAAe09B,EAAmBI,GAC3E,OAAI99B,GAAS,GAITvF,GAAS,EAHJ,EAKEA,GAASuF,EAAQ,EACnB89B,EAAc,IAGfJ,EAAY,GAAK,GAAKjjC,EAAQ,IAAMijC,EAAY,GA1GhCa,CAAmBd,EAAcz9B,EAAO09B,EAAWI,GAC3E,MAAO,CACLF,WAAAA,EACAK,SAAAA,EACAG,eAAAA,EACAE,gBAAAA,EACAR,YAAAA,EACAE,WAAAA,GA9FOQ,CAAgBx+B,EAAOvF,IAC7B,CAACuF,EAAOvF,IAyCX,IAvCAsrB,EAAAA,EAAAA,KAAU,KACR,IAAKwX,EAAa1zB,QAChB,OAGF,MAAM,YACJi0B,EADI,gBAEJQ,EAFI,WAGJV,EAHI,eAIJQ,EAJI,WAKJJ,EALI,SAMJC,GACET,EAEEiB,EAAalB,EAAa1zB,QAAQ60B,kBACxC,GAAInB,MAAAA,GAAAA,EAAc1zB,QAAS,CACzB,MAAM80B,EAAiBpB,EAAa1zB,SAC9B,MAAE6tB,GAAUiH,EAClBjH,EAAM2F,OAAU,GAAES,MAClBpG,EAAMkH,UAAa,eAAcN,OACjC5G,EAAMuG,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAezY,cAAc,OACnC4Y,EAAMH,EAAezY,cAAc,OACnC6Y,EAAOJ,EAAezY,cAAc,QACrC2Y,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIpH,MAAM2F,OAAU,GAAEO,MACtBkB,EAAIpH,MAAMkH,UAAa,cAAaR,WAGvC,CAACZ,IAEU,IAAVx9B,EACF,OACE,0BAAK8mB,UAAU,yBACb,0BACEA,UAAU,kCACVwK,IAAKiM,KAMb,MAAM,YACJO,EADI,gBACSQ,EADT,WAC0BV,EAD1B,eACsCQ,EADtC,WACsDJ,GACxDR,EAEJ,OACE,0BAAK1W,WAAWwE,EAAAA,GAAAA,GAAe,wBAAyBtrB,EAnElC,GAmE+D,+BACnF,0BACE8mB,UAAU,gCACVwK,IAAKiM,EACL7F,MACG,oBAAmBsG,uCACVF,+BAAyCQ,SAGrD,gCACA,0BACExX,UAAU,6BACV4Q,MAAQ,WAAUkG,8BAAuCQ,eCcnE,IAAe5X,EAAAA,EAAAA,KA9E2B,IAEpC,IAFqC,QACzCv6B,EADyC,MAChC+T,EADgC,MACzBvF,EADyB,YAClBwkC,EADkB,UACLnY,EADK,eACMoY,EADN,QACsB7W,EADtB,iBAC+B8W,GACpE,EACJ,MAAMzzC,GAAO48B,EAAAA,GAAAA,KACP8W,EAAiB5C,GAAiBvwC,GAClCozC,GAAeC,EAAAA,GAAAA,IAASC,EAAAA,EAAAA,IAAoBtzC,EAAS,cAErDkB,GAAOqyC,EAAAA,GAAAA,GAAqB9zC,EAAMO,EAASuB,QAAQ4xC,KAClDK,EAAmBC,EAAiBC,IAAoB3L,EAAAA,GAAAA,KAEzD4L,GAAqBpU,EAAAA,EAAAA,KAAY,KACrCmU,IAEIT,GACFA,EAAejzC,EAAQpC,MAExB,CAAC81C,EAAkBT,EAAgBjzC,EAAQpC,KAE9C,OACE,0BAAKi9B,WAAWwE,EAAAA,GAAAA,GAAe,8BAA+BxE,IAC3D9mB,EAAQ,GACP,mBAAC6oB,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,UACLJ,MAAM,cACN5B,UAAU,kBACVuE,UAAW3/B,EAAK,gCAChB28B,QAAS8W,GAET,wBAAGrY,UAAU,mBAGhBoY,GACC,mBAACrW,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,UACLJ,MAAM,cACN2C,UAAW3/B,EAAK,0BAChBo7B,UAAU,eACVuB,QAASqX,GAET,wBAAG5Y,UAAU,gBAGjB,mBAAC+Y,GAAA,EAAD,CACE1U,OAAQsU,EACR7M,QAAS+M,EACTxyC,KAAK,wCACL2yC,aAAa,QACbC,eAAgBH,IAElB,0BAAK9Y,UAAU,sBAAsBuB,QAASA,EAASE,IAAK78B,EAAK88B,MAAQ,WAAQx/B,GAC/E,mBAAC,GAAD,CACEgX,MAAOA,EACPvF,MAAOA,IAER2kC,GAcT,SAAyB3C,EAAsB/c,GAC7C,MAAM,MAAE9H,EAAF,OAASylB,IAAW2C,EAAAA,GAAAA,MAE1B,OACE,0BAAKC,IAAKvgB,GAAW+c,EAAc7kB,MAAOA,EAAOylB,OAAQA,EAAQ6C,IAAI,KAlB9CC,CAAgBf,EAAgBC,GACnD,0BAAKvY,UAAU,gBACb,0BAAKA,UAAU,QAAQyB,IAAI,QACxB0W,GAAgB,GAAEvzC,EAAK,oBAAoB+O,EAAQ,EAAK,KAAGuF,EAAQvF,GAAU,MAEhF,wBAAG8tB,IAAI,QAAQp7B,IAGjB,mBAACizC,GAAA,EAAD,W,oCC9FD,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAmD,uDAA9B,YACnF,MAAMjpC,EAAM+oC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAI5kC,SAASC,IAClB0kC,EAAIE,OAAS,KACXC,GAAMH,EAAKA,EAAIhpB,MAAQ2oB,EAAOK,EAAIvD,OAASkD,EAAOC,GAC/CtD,MAAM8D,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOP,IAAIC,gBAAgBK,MAE5B9D,KAAKhhC,GACLglC,SAAQ,KACHZ,aAAiBG,MACnBC,IAAIS,gBAAgB5pC,OAI5BqpC,EAAIX,IAAM1oC,KA2BdiB,eAAeuoC,GACbH,EAAuBhpB,EAAeylB,GAChB,IADgCmD,EAChC,uDADqD,YAG3E,KAAI,sBAAuBpxC,QAwBzB,OAAOgyC,GAAaR,EAAKhpB,EAAOylB,OAAQr0C,EAAWw3C,GAvBnD,IACE,MAAMa,QAAejyC,OAAOkyC,kBAAkBV,EAC5C,CAAEW,YAAa3pB,EAAO4pB,aAAcnE,EAAQoE,cAAe,SAC7D,GAAIJ,EAAOhE,SAAWA,GAAUgE,EAAOzpB,QAAUA,EAC/C,MAAM,IAAIqpB,MAAM,sCAElB,aAAa,IAAIhlC,SAASylC,IACxB,MAAMC,EAASniB,SAASoiB,cAAc,UACtCD,EAAO/pB,MAAQypB,EAAOzpB,MACtB+pB,EAAOtE,OAASgE,EAAOhE,OACvB,MAAMwE,EAAMF,EAAOG,WAAW,kBAC1BD,EACFA,EAAIE,wBAAwBV,GAE5BM,EAAOG,WAAW,MAAOE,UAAUX,EAAQ,EAAG,GAEhDM,EAAOM,OAAOP,EAAKlB,MAErB,MAAOvqC,GAEP,OAAOmrC,GAAaR,EAAKhpB,EAAOylB,OAAQr0C,EAAWw3C,IAOzD,SAASY,GACPR,EAAuBhpB,EAAeylB,GAChB,IADgCzpB,EAChC,uDAD+C,GAAK4sB,EACpD,uDADyE,YAE/F,MAAMmB,EAASniB,SAASoiB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MACxBI,EAAK1iB,SAASoiB,cAAc,UAC5BO,EAAOD,EAAGJ,WAAW,MAK3B,GAHAH,EAAO/pB,MAAQA,EACf+pB,EAAOtE,OAASA,EAEZuD,EAAIhpB,MAAQhE,EAAOgE,EAAO,CAC5B,MAAMwqB,EAAM,EAAIxuB,EAChB,IAAIyuB,EAAM,CACRzqB,MAAOzkB,KAAKG,MAAMstC,EAAIhpB,MAAQhE,GAC9BypB,OAAQlqC,KAAKG,MAAMstC,EAAIvD,OAASzpB,IAQlC,IALAsuB,EAAGtqB,MAAQyqB,EAAIzqB,MACfsqB,EAAG7E,OAASgF,EAAIhF,OAEhB8E,EAAKH,UAAUpB,EAAK,EAAG,EAAGyB,EAAIzqB,MAAOyqB,EAAIhF,QAElCgF,EAAIzqB,MAAQhE,EAAOgE,GACxByqB,EAAM,CACJzqB,MAAOzkB,KAAKG,MAAM+uC,EAAIzqB,MAAQhE,GAC9BypB,OAAQlqC,KAAKG,MAAM+uC,EAAIhF,OAASzpB,IAElCuuB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAIzqB,MAAQwqB,EAAKC,EAAIhF,OAAS+E,EAAK,EAAG,EAAGC,EAAIzqB,MAAOyqB,EAAIhF,QAGnFwE,EAAIG,UAAUE,EAAI,EAAG,EAAGG,EAAIzqB,MAAOyqB,EAAIhF,OAAQ,EAAG,EAAGsE,EAAO/pB,MAAO+pB,EAAOtE,aAE1EwE,EAAIG,UAAUpB,EAAK,EAAG,EAAGe,EAAO/pB,MAAO+pB,EAAOtE,QAGhD,OAAO,IAAIphC,SAASC,IAClBylC,EAAOM,OAAO/lC,EAASskC,M,eC/F3B,MAAM8B,GAAkB,CAAE1qB,MAAO,IAAKylB,OAAQ,KACxCkF,GAAe,IAwDrB,GArDgC,CAC9Bt2C,EAAqBQ,EAA4B2B,KAEjD,MAAM,MAAEo0C,EAAF,MAASC,IAAUhjB,EAAAA,EAAAA,IAAkBxzB,GACrC2Z,EAAQ48B,EAASA,EAAM58B,OAAS48B,EAAME,SAAYD,EAAQ,gBAAkB,GAC5EE,EAAUH,GAASA,EAAMI,WAAen2C,IAAUG,EAAAA,EAAAA,IAAei2C,EAAAA,GAAgBp2C,GACjFq2C,EAAS10C,IAAQ20C,EAAAA,EAAAA,GAAaF,EAAAA,GAAgBz0C,IAAU,WAExD40C,EAAkBR,IAASS,EAAAA,EAAAA,IAAiBT,KAAUjD,EAAAA,EAAAA,IAAoBtzC,EAAS,aACnFi3C,EAAaz2C,IAAU02C,EAAAA,EAAAA,IAAkB12C,EAAQ,OACjD2J,EAAQosC,GAASQ,GAAoBP,GAASS,EAC9CE,GAAQ9D,EAAAA,GAAAA,GAASlpC,GAEjB0yB,GAAO0B,EAAAA,EAAAA,KAAQ,IAyBvB,SAAsBgY,EAAkBC,EAAkBlrC,GACxD,IAAKA,EAAK,OAAO+qC,GACjB,GAAIE,EAAO,CACT,IAAKA,EAAMa,gBAAkD,IAAhCb,EAAMa,eAAen1C,OAAc,OAChE,MAAMo1C,EAAYd,EAAMa,eAAe/wC,MAAMw2B,GAAuB,MAAdA,EAAK/+B,OAC3D,OAAOu5C,GAAad,EAAMa,eAAe,GAG3C,OAAIZ,EACKc,GAAAA,QADT,EAhCSC,CAAahB,EAAOC,EAAOW,IACjC,CAACZ,EAAOY,EAAOX,KACV32C,OAAQyL,GCpCM,EAAIksC,EAAsBC,EAAaC,KAC7D,MAAOn+B,EAAWo+B,IAAgBrc,EAAAA,EAAAA,KAAkB,IAC7CxvB,EAAO8rC,IAAYtc,EAAAA,EAAAA,OACnBz7B,EAAQg4C,IAAavc,EAAAA,EAAAA,IAAwBoc,GAkBpD,OAjBA5d,EAAAA,EAAAA,KAAU,KACR6d,GAAa,GACb,IAAIG,GAAe,EAUnB,OD+BJ,SAAyBxsC,EAAcuxB,GACrC,IAAKvxB,EAAK,OAAO0E,QAAQC,QAAQ8nC,IACjC,IAAKlb,EAAM,OD9BN,SACLwX,EAAsB1oB,EAAeylB,GACpB,IADoCmD,EACpC,uDADyD,YAE1E,MAAMjpC,EAAM+oC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAI5kC,SAASC,IAClB0kC,EAAIE,OAAS,KACXC,GAAMH,EAAKhpB,EAAOylB,EAAQmD,GACvBtD,MAAM8D,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOP,IAAIC,gBAAgBK,MAE5B9D,KAAKhhC,GACLglC,SAAQ,KACHZ,aAAiBG,MACnBC,IAAIS,gBAAgB5pC,OAI5BqpC,EAAIX,IAAM1oC,KCWM0sC,CAAY1sC,EAAKgrC,GAAcA,IACjD,MAAMzqB,EAAM3kB,KAAK2kB,IAAIgR,EAAKlR,MAAOkR,EAAKuU,QACtC,OAAIvlB,EAAMyqB,GAEDlC,GAAW9oC,EADJgrC,GAAezqB,GAGxB7b,QAAQC,QAAQ3E,GAnBgB2sC,CAAgBd,EAAOta,GC7BvDoU,MAAMwE,IACLqC,IACJH,GAAa,GACbE,EAAUpC,OACRpqC,IACEysC,IACJH,GAAa,GACbC,EAASvsC,OAEJ,KACLysC,GAAe,KAGhBL,GACI,CAAEl+B,UAAAA,EAAWzN,MAAAA,EAAOjM,OAAAA,IDeHq4C,CAAS,EAAoC,CAACf,EAAOta,GAAOkb,IACpF,OAAOxZ,EAAAA,EAAAA,KAAQ,KACN4Z,EAAAA,GAAAA,IAAmB,CACxBx+B,MAAAA,EACA+8B,OAAAA,EACAG,MAAAA,EACAuB,QAAS,CAAC,CAAEpE,IAAK1oC,OAElB,CAACurC,EAAOH,EAAQ/8B,EAAOrO,K,0BEoO5B,UAAeyxB,EAAAA,EAAAA,KACb,CAACtgC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,SAClC,OAAEkG,EAAF,aAAUC,EAAV,QAAwBC,GAAYrG,EAAOsG,YAEjD,MAAO,CACLvC,OAAAA,EACA2B,KAAAA,EACAS,OAAAA,EACAC,aAAAA,EACAC,QAAAA,KAXN,EAjO+C,IASzC,IAT0C,QAC9C9C,EAD8C,UAE9C66B,EAF8C,KAG9Cwd,EAH8C,OAI9C73C,EAJ8C,KAK9C2B,EAL8C,OAM9CS,EAN8C,aAO9CC,EAP8C,QAQ9CC,GACI,EACJ,MAAM,qBACJw1C,EADI,2BAEJC,EAFI,oBAGJC,EAHI,aAIJ91C,EAJI,iBAKJie,IACEtE,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,MACP,MAAEka,EAAF,MAASC,EAAT,MAAgBljB,IAAUE,EAAAA,EAAAA,IAAkBxzB,GAC5Cy4C,EAAUl3C,QAAQi1C,GAASljB,GAC3BolB,EAAal4C,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,QAAUzD,EACrD47C,EAAYzsB,EAAAA,IAA0BonB,EAAAA,EAAAA,IAAoBtzC,EAAS,WACnE44C,EAAgBC,GAAwB74C,EAASQ,EAAQ2B,IAEzD,UACJ22C,EADI,KAEJC,EAFI,UAGJC,EAHI,iBAIJC,EAJI,qBAKJC,EALI,QAMJC,EANI,OAOJC,EAPI,UAQJC,EARI,YASJC,EATI,gBAUJC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYz5C,IACZ05C,EAAAA,EAAAA,IAAiB15C,GACjBy4C,EAAU,QAAU,QACpBE,OACA57C,EACA67C,OACA77C,GACA,OACAA,OACAA,GACAqwB,EAAAA,EAAAA,IAAeptB,IACf,GAII25C,EAAiBlB,GAAWO,GAClClf,EAAAA,EAAAA,KAAU,KACR,GAAK6f,EAML,OAFAjuB,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACiuB,IAEJ,MAAMC,GAAcra,EAAAA,EAAAA,KAAY,KAC9B78B,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACzD,CAAC8E,EAAc1C,EAAQtD,OAAQsD,EAAQpC,KAEpCyoC,GAAc9G,EAAAA,EAAAA,KAAY,KAC1ByZ,GACFF,IAEFn4B,KACAk5B,EAAAA,GAAAA,MACAd,MACC,CAACp4B,EAAkBq4B,EAAWF,EAAWC,IAEtCe,GAAqBva,EAAAA,EAAAA,KAAaluB,IACtCinC,EAAqB,CAAE11C,OAAQyO,EAAQ,MACvCmnC,EAAoB,CAAE11C,SAAS,IAE/Bu2C,EAAUhoC,EAAQ,OACjB,CAACmnC,EAAqBF,EAAsBe,IAEzCU,GAAoBxa,EAAAA,EAAAA,KAAY,KAChCx5B,EAAAA,KAAiB4J,EAAAA,KACrB2pC,IACAd,EAAoB,CAAE11C,SAAUA,OAC/B,CAACA,EAAS01C,EAAqBc,IAE5BU,GAAsBza,EAAAA,EAAAA,KAAY,KACjB,IAAjB18B,GACF02C,EA/FqB,KAgGrBhB,EAA2B,CAAE11C,aAhGR,QAkGrB02C,EAAgB,GAChBhB,EAA2B,CAAE11C,aAAc,OAE5C,CAACA,EAAc01C,EAA4BgB,IAExCU,GAAa1b,EAAAA,EAAAA,KAAQ,IACV,IAAX37B,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAIu1C,EAIJ,OACE,0BAAKxd,WAAWwE,EAAAA,GAAAA,GAAe,cAAexE,GAAYyB,IAAK78B,EAAK88B,MAAQ,WAAQx/B,GAClF,mBAAC6/B,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,QAAS11B,EAAAA,GACTgzB,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACVoV,SAAUkJ,IACV/c,QAAS8c,EACT9Z,UAAU,kBAEV,wBAAGvE,UAAU,wBAEf,mBAAC+B,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,QAAS11B,EAAAA,GACTgzB,MAAM,cACNI,KAAK,UACLhC,WAAWwE,EAAAA,GAAAA,GAAe,cAAe,gBAAiB2Z,EAAY,QAAU,QAChF5c,QAAS0c,EACT1Z,UAAW4Z,EAAY,cAAgB,cAEvC,wBAAGne,UAAU,cACb,wBAAGA,UAAU,gBAEf,mBAAC+B,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,QAAS11B,EAAAA,GACTgzB,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACVoV,SAAUmJ,IACVhd,QAAS6c,EACT7Z,UAAU,cAEV,wBAAGvE,UAAU,oBAGf,0BAAKA,UAAU,sBAAsBuB,QAASwd,GAC3CrD,EAmDT,SAAqBA,GACnB,MAAM,MAAE58B,EAAF,UAASg9B,EAAT,SAAoBF,GAAaF,EAEvC,OACE,sCACE,0BAAK1b,UAAU,QAAQyB,IAAI,SAAQ4d,EAAAA,GAAAA,GAAWvgC,GAAS88B,IACtDE,GACC,0BAAK9b,UAAU,WAAWyB,IAAI,SAAQ4d,EAAAA,GAAAA,GAAWvD,KA1DxCwD,CAAY5D,GAgE7B,SAAqB6D,EAAkB1B,GACrC,OACE,sCACE,0BAAK7d,UAAU,QAAQyB,IAAI,QAAQoc,IAAcwB,EAAAA,GAAAA,GAAWxB,IAC5D,0BAAK7d,UAAU,WAAWyB,IAAI,QAAQ8d,IApENC,CAAY56C,EAAK,eAAgBi5C,GAC/D,mBAACvE,GAAA,EAAD,OAGF,mBAACvX,GAAA,EAAD,CACEhwB,OAAK,EACLiuB,UAAU,8BACV4B,MAAM,cACNI,KAAK,UACLuC,UAAU,SACVkb,sBAAoB,GAEpB,wBAAGzf,UAAWof,EAAY7d,QAAS2d,KACjCpqC,EAAAA,IACA,sCACE,0BAAKkrB,UAAU,yBACf,0BAAKA,UAAU,iBACb,mBAAC0f,GAAA,EAAD,CAAaC,MAAI,EAACnpC,MAAOvO,EAAU,EAAa,IAATF,EAAcs/B,SAAU4X,OAMtErB,GACC,mBAAC7b,GAAA,EAAD,CACEhwB,OAAK,EACLiuB,WAAWwE,EAAAA,GAAAA,GAAe,kBAAoC,IAAjBx8B,GAAsB,WACnE45B,MAAM,cACNI,KAAK,UACLuC,UAAU,gBACVD,QAAS11B,EAAAA,GACT2yB,QAAS4d,GAET,2BAAMnf,UAAU,yBAAhB,OAIJ,mBAAC+B,GAAA,EAAD,CACEhwB,OAAK,EACLiuB,UAAU,eACV4B,MAAM,cACNI,KAAK,UACLT,QAASiK,EACTjH,UAAU,gBAEV,wBAAGvE,UAAU,oB,yBCzNrB,MA0FA,IAAeN,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAwB,IAAf,OAAEC,GAAa,EACtB,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B+9C,GAAYC,EAAAA,GAAAA,IAAoBj+C,EAAQC,GAC9C,MAAO,CACL+9C,UAAAA,EACAE,UAAWl+C,EAAOwQ,MAAMK,KACxB2vB,UAAWxgC,EAAOwL,MAAMqF,KACxB4rB,kBAAmBz8B,EAAOw8B,WAAWC,kBACrC5vB,UAAamxC,EACRA,EAAUlhB,kBAAoB,GAAKkhB,EAAUG,SADxBz4C,GAAQA,EAAK04C,gBAAkB14C,EAAK8rC,eAExDxxC,EAAOw8B,WAAWC,qBAAsBuhB,MAAAA,OAAxC,EAAwCA,EAAW78C,OAX3Cm/B,EA1FgC,IAO9C,IAP+C,OACnDrgC,EADmD,SAEnD4M,EAFmD,UAGnDmxC,EAHmD,gBAInDK,EAJmD,UAKnDH,EALmD,UAMnD1d,GACI,EACJ,MAAM,cACJ8d,EADI,4BAEJC,IACE3+B,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,KAEP4e,GAAsB1b,EAAAA,EAAAA,KAAY,KACtCwb,EAAc,CACZr+C,OAAAA,MAED,CAACq+C,EAAer+C,IAEb+8B,EAAeghB,MAAAA,OAAH,EAAGA,EAAWhhB,aAE1ByhB,GAAsB3c,EAAAA,EAAAA,KAAQ,IAC9B9E,EACK53B,OAAO68B,OAAOjF,GAAc15B,QAAO,CAACkgC,EAAGxxB,IAAMA,EAAI,IAAG3O,KAAI,IAAoB,IAAnB,GAAElC,EAAF,OAAMu9C,GAAa,EACjF,GAAIA,EAAQ,CACV,IAAKR,EAAU/8C,GACb,OAEF,MAAO,CAAE8W,KAAMimC,EAAU/8C,IAEzB,GAAKq/B,EAAUr/B,GAGf,MAAO,CAAEuE,KAAM86B,EAAUr/B,OAE1BmC,OAAOwB,SACE,IACb,CAAC07B,EAAWxD,EAAckhB,IAmB7B,IAjBA7gB,EAAAA,EAAAA,KAAU,KACR,GAAK2gB,MAAAA,GAAAA,EAAW78C,KACX0L,IAAYmxC,EAAUG,UAO3B,OALAI,EAA4B,CAC1Bp9C,GAAI68C,EAAU78C,GACdw9C,YAAY,IAGP,KACLJ,EAA4B,CAC1Bp9C,GAAI68C,EAAU78C,GACdw9C,YAAY,OAGf,CAACX,MAAAA,OAAD,EAACA,EAAW78C,GAAI68C,MAAAA,OAAhB,EAAgBA,EAAWG,SAAUtxC,EAAU0xC,IAE7CP,EAEL,OACE,0BACE5f,WAAWwE,EAAAA,GAAAA,GACT,mBACAyb,GAAmB,qBAClBxxC,GAAY,aAEf8yB,QAAS6e,GAET,0BAAKpgB,UAAU,QACb,2BAAMA,UAAU,SAASp7B,EAAK,uBAC9B,2BAAMo7B,UAAU,gBAAgBp7B,EAAK,eAAgBg7C,EAAUlhB,mBAAqB,EAAG,OAEzF,0BAAKsB,UAAU,WACZqgB,EAAoBp7C,KAAKu7C,IACxB,GAAKA,EACL,OAAIA,EAAE3mC,KACG,mBAAC4mC,GAAA,EAAD,CAAQ/iB,IAAK8iB,EAAE3mC,KAAK9W,GAAI8W,KAAM2mC,EAAE3mC,OAEhC,mBAAC4mC,GAAA,EAAD,CAAQ/iB,IAAK8iB,EAAEl5C,KAAKvE,GAAIuE,KAAMk5C,EAAEl5C,WAI7C,mBAACy6B,GAAA,EAAD,CAAQhwB,OAAK,EAACiuB,UAAU,QACrBp7B,EAAK,sB,eChFd,MAiJA,IAAe86B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,SAAS,OAAEC,GAAX,QAAqC,CACnCgX,cAAejX,EAAOiX,cACtBvR,MAAMC,EAAAA,EAAAA,IAAW3F,EAAQC,GACzBgY,MAAM2O,EAAAA,EAAAA,IAAS3mB,IAAUmZ,EAAAA,EAAAA,IAAWpZ,EAAQC,QAAUK,KAJtCggC,EAjJ+B,IAE7C,IAF8C,OAClDrgC,EADkD,UAC1Cm+B,EAD0C,KAC/B14B,EAD+B,KACzBuS,EADyB,SACnBiK,EADmB,cACTjL,GACrC,EACJ,MAAM,qBACJ6nC,EADI,aAEJC,EAFI,WAGJC,EAHI,WAIJC,EAJI,aAKJC,EALI,eAMJC,EANI,cAOJC,EAPI,mBAQJC,EARI,oBASJC,IACE1/B,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,MACN2f,EAAsBC,EAAoBC,IAAuBnU,EAAAA,GAAAA,MACjEoU,EAAkBC,IAAuB9gB,EAAAA,EAAAA,KAAkB,IAC3D+gB,EAAkBC,IAAuBhhB,EAAAA,EAAAA,KAAkB,IAC5D,WAAErjB,GAAe9V,GAAQ,IACzB,eACJo6C,EADI,cACYC,EADZ,cAC2BC,EAD3B,gBAC0CC,GAC5C/9B,GAAY,GACVg+B,EAAex6C,IAAQya,EAAAA,EAAAA,IAAiBza,GAExCy6C,GAAmBrd,EAAAA,EAAAA,KAAY,KACnCgc,EAAqB,CAAExyC,OAAQrM,IAC3B6/C,GACFT,EAAmB,CAAEp/C,OAAAA,MAEtB,CAAC6+C,EAAsBgB,EAAgBT,EAAoBp/C,IAExDmgD,GAAqBtd,EAAAA,EAAAA,KAAY,KACrC2c,IACAV,EAAa,CAAEsB,UAAWpgD,EAAQub,WAAAA,IAC9BukC,GAAiBL,GACnBV,EAAW,CAAE/+C,OAAAA,IAEX2/C,GACFX,EAAW,CAAEh/C,OAAAA,MAEd,CACDub,EAAYujC,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkBz/C,IAGdqgD,GAAyBxd,EAAAA,EAAAA,KAAY,KACzCwc,EAAoB,CAAEr/C,OAAAA,MACrB,CAACA,EAAQq/C,IAENiB,GAAuBzd,EAAAA,EAAAA,KAAY,KACvC2c,IACAT,EAAW,CAAE/+C,OAAAA,IACTigD,GACFf,EAAe,CAAEl/C,OAAAA,EAAQqM,OAAQ2K,IACjCmoC,EAAc,CAAEn/C,OAAAA,EAAQwW,oBAAoB,KAE5CyoC,EAAa,CAAEj/C,OAAAA,MAEhB,CACDA,EAAQw/C,EAAqBxoC,EAAekoC,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAK98B,EAIL,OACE,0BAAKkc,WAAWwE,EAAAA,GAAAA,GAAe,kBAAmBxE,GAAYyB,IAAK78B,EAAK88B,MAAQ,WAAQx/B,GACrF0/C,GACC,mBAAC7f,GAAA,EAAD,CACEqgB,QAAM,EACN1U,OAAK,EACL1L,KAAK,OACLhC,UAAU,0BACVuB,QAASwgB,GAERn9C,EAAK,wBAGTi9C,GACC,mBAAC9f,GAAA,EAAD,CACEH,MAAM,SACNwgB,QAAM,EACN1U,OAAK,EACL1L,KAAK,OACLhC,UAAU,0BACVuB,QAAS6f,GAERx8C,EAAK,0BAGT+8C,IAAkBE,GACjB,mBAAC9f,GAAA,EAAD,CACEH,MAAM,SACNwgB,QAAM,EACN1U,OAAK,EACL1L,KAAK,OACLhC,UAAU,0BACVuB,QAAS6f,GAERx8C,EAAK,8BAGV,mBAACm9B,GAAA,EAAD,CACEhwB,OAAK,EACLuyB,QAAM,EACNtC,KAAK,OACLJ,MAAM,cACNL,QAAS2gB,EACT3d,UAAW3/B,EAAK,UAEhB,wBAAGo7B,UAAU,gBAEf,mBAAC+Y,GAAA,EAAD,CACE1U,OAAQ8c,EACRrV,QAASuV,EACTviC,MAAOla,EAAK,iBAAkBiV,GAAOwoC,EAAAA,EAAAA,IAAuBxoC,IAAQoiC,EAAAA,EAAAA,GAAar3C,EAAM0C,IACvFjB,KAAMwT,EACFjV,EAAK,mCAAmC09C,EAAAA,EAAAA,IAAgBzoC,IACxDjV,EAAK,mCACT29C,mBAAiB,EACjBC,sBAAoB,EACpBxJ,aAAcp0C,EAAK,SACnBq0C,eAAgBp/B,EAAOmoC,EAAqBG,GAE3CtoC,GACC,mBAAC4oC,GAAA,EAAD,CACElc,MAAO3hC,EAAK,kBACZ4hC,QAASgb,EACTkB,QAASjB,IAGZ5nC,GAAQ8nC,GACP,mBAACc,GAAA,EAAD,CACElc,MAAO3hC,EAAK,cACZ4hC,QAAS8a,EACToB,QAASnB,UCyQrB,IAAe7hB,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAA+D,IAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAM,kBAAEgG,EAAF,aAAqBkX,EAArB,4BAAmC+hB,GAAgCnmC,EACnE0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAC1B,aAAE8zB,GAAiBruB,GAAQ,IAEzBzF,OAAQ+jB,EAAazf,UAAW0f,GAAmBjkB,EAAOsG,YAC5Dy6C,EAAe/8B,GAAeC,GAChCjQ,EAAAA,EAAAA,IAAkBhU,EAAQgkB,EAAaC,QACvC3jB,EAEJ,IAAIs3B,EACJ,GAAwB,WAApB1wB,EAA8B,CAChC,MAAM85C,GAAYrnB,EAAAA,EAAAA,IAAgB35B,EAAQC,GAC1C23B,EAAgBopB,MAAAA,OAAH,EAAGA,EAAWx7C,YACtB,GAAwB,cAApB0B,EAAiC,CAC1C,MAAMiyB,GAAeC,EAAAA,EAAAA,IAAmBp5B,EAAQC,GAChD23B,EAAgBuB,MAAAA,OAAH,EAAGA,EAAc3zB,YACzB,GAAwB,WAApB0B,GAAgChH,IAAakB,EAAAA,GAAgB,CACtE,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GACpD03B,GAAgB/xB,MAAAA,OAAA,EAAAA,EAAY+xB,gBAAiB,EAG/C,MAAMqpB,EAAoB,CACxBltB,aAAAA,EACA7mB,kBAAAA,EACAyjC,oBAAoBpqC,EAAAA,EAAAA,IAAyBvG,GAC7CkhD,oBAAoB7Q,EAAAA,EAAAA,IAAqBrwC,GACzC+gD,aAAAA,EACAr7C,KAAAA,EACAkyB,cAAAA,EACA2Y,gBAAgBC,EAAAA,EAAAA,IAAqBxwC,EAAQC,GAC7CkhD,cAAez7C,IAAQ2zB,EAAAA,EAAAA,IAAoBr5B,EAAQ0F,GACnD0e,aAAAA,EACA+hB,4BAAAA,EACAib,qBAAsB32C,KAAKC,IAAI,EAAG1K,EAAO2B,SAASwL,aAAa3H,OAAS,GACxE+2B,gBAAiBv8B,EAAOu8B,gBACxB/Z,UAAWxiB,EAAOwiB,WAGdsX,GAAe32B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,GAAwB,WAApBiH,IAAiC4yB,EACnC,OAAOmnB,EAKT,GAFA77C,OAAOi8C,OAAOJ,EAAO,CAAEnnB,aAAAA,IAEnB55B,IAAakB,EAAAA,GAAgB,CAC/B,MAAMkgD,GAAkBluC,EAAAA,EAAAA,IAAyBpT,EAAQC,EAAQC,GAC3DqD,EAAU+9C,GAAkBttC,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQqhD,QAAmBhhD,EACjFihD,EAAmBh+C,GAAUi+C,EAAAA,EAAAA,IAAsBxhD,EAAQuD,QAAWjD,EAE5E,MAAO,IACF2gD,EACHQ,iBAAkBH,EAClBI,UAAU,EACVH,iBAAAA,GAIJ,MAAME,GAAmB9nB,EAAAA,EAAAA,IAAgB35B,EAAQC,GACjD,GAAIwhD,MAAAA,GAAAA,EAAkBj8C,OAAQ,CAC5B,MAAMm8C,EAAqB7nB,EAAa2nB,EAAiB,KACnD,SACJC,GACGC,IAAsBn+C,EAAAA,EAAAA,IAA4BxD,EAAQ2hD,EAAoBzhD,IAAc,GAEjG,MAAO,IACF+gD,EACHQ,iBAAAA,EACAC,SAAAA,GAIJ,OAAOT,IA1ES3gB,EAzV4B,IAuB1C,IAvB2C,OAC/CrgC,EAD+C,SAE/CC,EAF+C,gBAG/CgH,EAH+C,QAI/C06C,EAJ+C,iBAK/CH,EAL+C,aAM/C3nB,EAN+C,SAO/C4nB,EAP+C,iBAQ/CH,EAR+C,aAS/CxtB,EAT+C,mBAU/CmtB,EAV+C,kBAW/Ch0C,EAX+C,mBAY/CyjC,EAZ+C,aAa/CoQ,EAb+C,KAc/Cr7C,EAd+C,cAe/CkyB,EAf+C,eAgB/C2Y,EAhB+C,cAiB/C4Q,EAjB+C,aAkB/C/8B,EAlB+C,4BAmB/C+hB,EAnB+C,qBAoB/Cib,EApB+C,gBAqB/C7kB,EArB+C,UAsB/C/Z,GACI,EACJ,MAAM,iBACJq/B,EADI,WAEJC,EAFI,aAGJ77C,EAHI,SAIJ/D,EAJI,iBAKJ6/C,EALI,mBAMJ/oC,EANI,iBAOJgpC,EAPI,sBAQJvgD,IACEme,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,KACPqiB,GAAqBxb,EAAAA,EAAAA,KAAO,IAE3Byb,EAAoBC,IAAyBtjB,EAAAA,EAAAA,IAAS,GACvDyiB,EAAkB1uB,MAAMC,QAAQ4uB,GAAoBA,EAAiBS,GAAsBT,EAC3FW,EAAgBtoB,GAAgBwnB,EAAkBxnB,EAAawnB,QAAmBhhD,EAClF+hD,EAAsBzvB,MAAMC,QAAQ4uB,GACtCA,EAAiBj8C,OAAUi8C,EAAmB,OAAInhD,EAChDgiD,EAAkB58C,IAAQ20C,EAAAA,EAAAA,GAAar3C,EAAM0C,GAAMF,OACnD+8C,EAAkBhB,GAAmBr9C,EAAAA,EAAAA,IAAelB,EAAMu+C,QAAoBjhD,GAC9E,SAAE4hB,GAAaxc,GAAQ,IAE7B23B,EAAAA,EAAAA,KAAU,KACJn9B,IAAakB,EAAAA,IAAkBgjB,GAAgBw9B,GACjD5oC,EAAmB,CAAE/Y,OAAAA,MAEtB,CAACA,EAAQ+Y,EAAoBoL,EAAclkB,EAAU0hD,KAGxDvkB,EAAAA,EAAAA,KAAU,KACR8kB,EAAsB,KACrB,CAACV,KAEJe,EAAAA,GAAAA,GAAiBviD,EAAQqhD,EAAiBc,GAE1C,MAAQlzB,MAAOF,GAAgByzB,KAEzBC,EAAuB1zB,GAAeK,EAAAA,GACtCszB,EAAwB11C,EAAAA,IAA2BC,EAGnD01C,GAAenc,EAAAA,EAAAA,IAAuB,MACtCoc,GAAqBpc,EAAAA,EAAAA,KAAgB,GAErCqc,GAAoBhgB,EAAAA,EAAAA,KAAY,KACpC+e,EAAiB,CAAE1gD,GAAIlB,MACtB,CAAC4hD,EAAkB5hD,IAEhBi3C,GAAqBpU,EAAAA,EAAAA,KAAav+B,IACtCu9C,EAAW,CAAE7hD,OAAAA,EAAQsE,UAAAA,EAAW8R,SAAS,MACxC,CAACyrC,EAAY7hD,IAEV8iD,IAA2BjgB,EAAAA,EAAAA,KAAY,KAC3C,GAAIsf,EAAe,CACjBn8C,EAAa,CAAEhG,OAAQmiD,EAAcniD,OAAQC,SAAAA,EAAUqE,UAAW69C,EAAcjhD,KAEhF,MAAMmE,GAAW09C,EAAAA,GAAAA,GAAcX,GAAuB,EAAGH,EAAqB,GAC9EC,EAAsB78C,MAEvB,CAAC88C,EAAen8C,EAAc/F,EAAUmiD,EAAqBH,IAE1De,IAAuBngB,EAAAA,EAAAA,KAAY,KACvC5gC,EAAS,CAAEf,GAAIlB,EAAQC,SAAUkB,EAAAA,GAAgBC,KAAM,aACtD,CAACa,EAAUjC,IAERijD,IAAsBpgB,EAAAA,EAAAA,KAAY,KACtCn8B,YAAW,KACTs7C,EAAmB9gC,SAAU,IA1HD,OA4H7B,IAEGgiC,IAAkBrgB,EAAAA,EAAAA,KAAav1B,IACnC,GAAK00C,EAAmB9gC,QAAxB,CAIA,GADA8gC,EAAmB9gC,SAAU,EACzBnU,EAAAA,GAAyB,CAC3B,MAAMo2C,EAAetsB,SAAS+W,eAAewV,EAAAA,IACzCD,GACFA,EAAatV,OAIjB,GAAIoT,EAGF,OAFAz/C,SACAyhD,KAIF,GAAIhjD,IAAakB,EAAAA,IAAsC,WAApB8F,GAAyD,IAAzBk6C,EAUjE,OATIp0C,EAAAA,IAA2B21C,GAC7Bp1C,EAAE21B,kBACFhhC,EAAS,CAAEf,QAAIb,KAEf0hD,SAGFkB,KAKFnB,IACAmB,QACC,CACDhjD,EAAUgH,EAAiBk6C,EAAsBF,EAAoBa,EAAkBY,EACvFzgD,EAAU8/C,EAAkBvgD,EAAuByhD,KAG/CI,GACJt0B,GAAeK,EAAAA,IACZL,EAAcu0B,EAAAA,IAEjBv0B,EAAcw0B,EAAAA,IACXx0B,EAAcK,EAAAA,MACZizB,GAAmBA,EAAkB,IAEtCmB,GAA6BH,IACjCt0B,EAAcG,EAAAA,IACXH,EAAc00B,EAAAA,GAGbC,GAAkB7+C,SAAQod,MAAAA,OAAA,EAAAA,EAAU89B,iBAAiB99B,MAAAA,OAA3B,EAA2BA,EAAU+9B,mBAAmB/9B,MAAAA,OAAxD,EAAwDA,EAAU69B,iBAEhG/X,aAAc4b,GACd1b,qBAAsB2b,KACpB1b,EAAAA,GAAAA,GAAkBwb,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBzhC,OAAW5hB,GAAW,IAGrF0nC,aAAcgc,GACd9b,qBAAsB+b,KACpB9b,EAAAA,GAAAA,GAAkBrjC,QAAQi8C,IAExBmD,IAAwBH,EAAAA,GAAAA,GAAiBhD,GAAc,IAG3D/Y,aAAcmc,GACdjc,qBAAsBkc,KACpBjc,EAAAA,GAAAA,GAAkBrjC,QAAQs9C,IAExBiC,IAAyBN,EAAAA,GAAAA,GAAiB3B,GAAe,GACzDkC,IAA+BP,EAAAA,GAAAA,GAAiB1B,GAAqB,GACrEkC,IAAoBR,EAAAA,GAAAA,GAAiBrC,GAAU,GAC/C8C,IAA8BT,EAAAA,GAAAA,GAAiBxB,GAE/CkC,GAAkBN,IAA6BE,IAC/CL,IAA2BE,IAGjC7mB,EAAAA,EAAAA,KAAU,KACR,MAAMqnB,EAAc9B,EAAazhC,QACjC,GAAKujC,EAIL,OAAKjB,IAA+BgB,QAMhC9T,GAAsB2S,IACpBT,EAAmB1hC,UACrBujC,EAAYjhB,UAAU+L,IAAI,gBAAiB,YAC3CqT,EAAmB1hC,SAAU,GAI/Bxa,YAAW,KACT+9C,EAAYjhB,UAAUsL,OAAO,cAlOV,OAqOrB2V,EAAYjhB,UAAUsL,OAAO,iBAC7B8T,EAAmB1hC,SAAU,KAjB7BujC,EAAYjhB,UAAUsL,OAAO,gBAAiB,iBAC9C8T,EAAmB1hC,SAAU,MAkB9B,CAACsiC,GAA4BgB,GAAgBnB,GAA6B3S,IAE7E,MAAM,qBAAEjR,IAAyBnB,GAAoBv7B,EAAMu5B,EAAiB/Z,GAAW,GAgEvF,SAASmiC,KAA6D,IAA5CC,EAA4C,wDAA3BC,EAA2B,wDACpE,OACE,0BAAKzmB,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,UACLJ,MAAM,cACNL,QAASwjB,GACTxgB,UAAW3/B,EAAK4hD,EAAU,QAAU,SAEpC,0BAAKxmB,WAAWwE,EAAAA,GAAAA,GAAe,uBAAwBgiB,GAAW,iBAEnEC,GAAqB,mBAAC,GAAD,OAK5B,MAAMC,GAAwBhgD,QAAQk/C,IAA2BE,IAEjE,OACE,0BAAK9lB,UAAU,eAAewK,IAAKga,GACjC,mBAAC3iB,GAAA,EAAD,CACE/N,KAAMiU,EAA8B,OAAS,aAC7CjG,UAAWkhB,GAnFO,WAApBl6C,GAAgChH,IAAakB,EAAAA,GA6B7C,uCACIshD,GAAwBtB,EAAuB,IAAMuD,GAAiBhC,GAAuB,GAC/F,0BAAKvkB,UAAU,oBAAoBuB,QAASmjB,IACzCl8B,EAAAA,EAAAA,IAAS3mB,GACR,mBAAC8kD,GAAA,EAAD,CACEz4C,OAAQrM,EACR8zB,aAAcA,EACdnG,OAAQ8R,GACRslB,SAAUlgD,QAAQ46B,IAClBulB,aAAc9D,EACd+D,iBAAe,EACfC,oBAAkB,EAClBC,OAAK,IAGP,mBAACC,GAAA,EAAD,CACEplD,OAAQA,EACR8zB,aAAcA,EACdnG,OAAQ8R,GACRslB,SAAUlgD,QAAQ46B,IAClBwlB,iBAAe,EACfD,cAAY,EACZE,oBAAkB,EAClBC,OAAK,MAlDW,WAApBl+C,EACF,sCACGy9C,KACD,6BACG3hD,EAAK,gBAAiB40B,EAAe,OAGpB,WAApB1wB,EACF,sCACGy9C,KACD,6BACG3hD,EAAK,sBAAuB40B,EAAe,OAG1B,cAApB1wB,EACF,sCACGy9C,KACD,6BACGpU,EAAiBvtC,EAAK,aAAeA,EAAK,WAAY40B,EAAe,YAGxEt3B,GAiEJ,mBAAC,GAAD,CACE+9C,gBACG8F,IAA6Br/C,QAAQu/C,KAClCL,IAA2Bl/C,QAAQo/C,IAEzCjkD,OAAQA,IAGTkkD,IAA6BE,IAC5B,mBAAC,GAAD,CACEvoB,IAAK77B,EACLsD,QAAS8gD,GACT/sC,MAAOgtC,IAAgC,EACvCvyC,MAAOmwC,EACP3L,YAAaiO,GACbpmB,WAAWwE,EAAAA,GAAAA,GAAewhB,GAAyBU,IAAyB,cAC5EtO,eAAgB+N,GAAoBrN,OAAqB52C,EACzDq/B,QAASojB,GACTtM,iBAAkBwM,KAIrBW,IACC,mBAAC,GAAD,CACE9nB,IAAK77B,EACLA,OAAQA,EACRiiB,SAAU4hC,GACV1lB,UAAWylB,KAIf,0BAAKzlB,UAAU,gBACZ0mB,IACC,mBAAC,GAAD,CACEhpB,KAAKwpB,EAAAA,EAAAA,IAAcpB,IACnB3gD,QAAS2gD,GACT9lB,UAAW6lB,KAGf,mBAAC,GAAD,CACEhkD,OAAQA,EACRC,SAAUA,EACVgH,gBAAiBA,EACjB6qC,kBAAmB+S,W,yBC5ZtB,SAASS,GAAQC,GACtB,MAAO,YAAaA,EAGf,SAASC,GAAc9jD,EAAwBk2B,GACpD,IAMI6tB,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAclkD,EAAS,GAAGoI,KAC1B+7C,UAAUC,EAAAA,EAAAA,IAAiC,IAAnBpkD,EAAS,GAAGoI,MACpCi8C,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DAjkD,EAASiH,SAAQ,CAACrF,EAASwO,KACrBxO,EAAQutB,UACL40B,GAOHA,EAAa/jD,SAASsC,KAAKV,GACvBA,EAAQ2G,QAAQzF,OAClBihD,EAAaQ,YAAc3iD,IAR7BmiD,EAAe,CACbS,QAAS5iD,EAAQ4D,UACjBxF,SAAU,CAAC4B,GACX2iD,YAAa3iD,GASjBoiD,EAAmB1hD,KAAKV,GAG1B,MAAM6iD,EAAczkD,EAASoQ,EAAQ,GASrC,IANE2zC,GACKU,GAAgBA,EAAYj/C,WAAai/C,EAAYj/C,YAAcu+C,EAAaS,UAErFR,EAAmB1hD,KAAKyhD,GACxBA,OAAeplD,GAEb8lD,EAAa,CACf,MAAMC,GAAyBN,EAAAA,EAAAA,IAAiC,IAAnBK,EAAYr8C,MACrD67C,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYr8C,KAC1B+7C,SAAUO,EACVL,aAAc,IAEhBC,EAAWhiD,KAAK2hD,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAa/hD,KAAK0hD,KAEnCS,EAAYjlD,KAAO02B,GAChBt0B,EAAQywB,WAAaoyB,EAAYpyB,UACjCzwB,EAAQ8G,aAAe+7C,EAAY/7C,aACnCi8C,EAAAA,EAAAA,IAAgB/iD,KAChB+iD,EAAAA,EAAAA,IAAgBF,IAEjB7iD,EAAQgjD,aAAeH,EAAYG,cAEjChjD,EAAQgjD,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1DjjD,EAAQgjD,YAAYr+C,aAAek+C,EAAYG,YAAYr+C,YAC3D3E,EAAQgjD,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnEljD,EAAQmjD,eACRN,EAAYM,eACXN,EAAYr8C,KAAOxG,EAAQwG,KA9ER,OAgFvB47C,EAAqB,GACrBC,EAAiBI,aAAa/hD,KAAK0hD,QAKlCM,E,sFCrFT,MAAMU,GAAkCC,EAAAA,GAAa,IAAO,IACtDC,GAAgC75C,EAAAA,GAA0B,IAAM,I,eCN/D,SAAS85C,GAAmBC,GACjC,MAA8B,iBAAhBA,ECaT,SAASC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EANwC,IADb,IAQ3BA,EAT+B,IADd,IAajB,SAASC,GAAyB5jD,EAAqB6jD,GAC5D,MAAMC,GAAQC,EAAAA,EAAAA,IAAa/jD,GACrBgkD,GAAcC,EAAAA,EAAAA,IAAmBjkD,GACjC+yB,GAAQmxB,EAAAA,EAAAA,IAAgBlkD,KAAYmkD,EAAAA,EAAAA,IAAuBnkD,GAC3DszB,GAAQ8wB,EAAAA,EAAAA,IAAgBpkD,GAExBqkD,EAAiB9iD,SAAQ4iD,EAAAA,EAAAA,IAAuBnkD,KAChD,MAAE2rB,EAAF,OAASylB,GAAWre,GACtBuxB,EAAAA,GAAAA,IAA+BvxB,EAAO+wB,EAAOE,EAAaK,EAAgBR,IAC1EU,EAAAA,GAAAA,IAAyBjxB,EAAQwwB,EAAOE,EAAaH,GAGnDW,EAAgBf,GADNliD,SAAQi0B,EAAAA,EAAAA,IAAex1B,KAGvC,IAAIykD,EAAgB,EAChB94B,EAAQ64B,GAAiBA,EAAgB74B,EAvBjB,KAwB1B84B,EAAgBD,EAAgB74B,GAE9BylB,EAASqT,EA3BU,OA2B6CrT,EAASqT,EA1BjD,KA2B1BA,EA5BqB,GA4BcrT,GAGrC,MAAMsT,EAAax9C,KAAK0F,MAAM+e,EAAQ84B,GAChCE,EAAcz9C,KAAK0F,MAAMwkC,EAASqT,GAExC,MAAO,CACL94B,MAAO+4B,EACPtT,OAAQuT,EACRC,QAASF,EAAaF,GAAiBG,EArClB,ICkDzB,SAASE,GAAWC,EAAgBC,GAClC,OAAOD,EAAKxkD,QAAO,CAAC0kD,EAAaC,IAASD,EAAcC,GAAMF,GAGhE,SAASG,GAAMC,EAAaC,EAAaC,GACvC,OAAOF,EAAMC,EAAMA,EAAOD,EAAME,EAAOA,EAAOF,EAOhD,SAASG,GAAuBC,GAC9B,MAAMC,EAAwB,CAAE75B,MAAO,EAAGylB,OAAQ,GAalD,OAZAmU,EAAOlgD,SAAQ,IAGT,IAHU,WACdogD,EADc,MAEdC,GACI,EApEC,EAqEDA,IACFF,EAAO75B,MAAQ85B,EAAW95B,MAAQ85B,EAAWj6B,GArEzC,EAuEFk6B,IACFF,EAAOpU,OAASqU,EAAWrU,OAASqU,EAAWn5B,MAI5Ck5B,EAGF,SAASG,GACd7B,EACAE,EACAH,EACAhN,GAEA,MACM+O,EAtDR,SAAmBxnD,GACjB,OAAOA,EAAS0B,KACbE,IACC,MAAMylD,EAAa7B,GAAyB5jD,GAE5C,OAAOylD,EAAW95B,MAAQ85B,EAAWrU,UAiD1ByU,CAAUhP,EAAMz4C,UACzB0nD,EA7CR,SAAwBF,GACtB,OAAOA,EAAO9lD,KAAKw0C,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOxzC,KAAK,IA4C/DilD,CAAeH,GAC7BI,EA1CR,SAAyBJ,GACvB,OAAOA,EAAOtlD,QAAO,CAACT,EAAQy0C,IAAUA,EAAQz0C,GAAQ,GAAK+lD,EAAO3jD,OAyC/CgkD,CAAgBL,GAC/BM,EAAaN,EAAO3jD,OACpBkkD,EAAYP,EAAOl4B,MAAM4mB,GAAUA,EAAQ,IAC3C8R,GAAWC,EAAAA,GAAAA,IAAkBvC,EAAOE,GAAa,EAAOH,IAAcG,EAAc,IAAM,GAAKsC,GAAAA,GAGrG,IAAIf,EAEJ,MAAMt2C,EAAS,CACb22C,OAAAA,EACAE,YAAAA,EACAE,aAAAA,EACAI,SAAAA,EACAG,SAAU,IACVC,UAVgBJ,EAWhBK,QAlBc,GA+BhB,OATElB,EADEW,GAAc,GAAKC,EAgBzB,YAOkB,IANhBP,OAAQc,EADyB,aAEjCV,EAFiC,SAGjCI,EAHiC,SAIjCG,EAJiC,QAKjCE,EALiC,UAMjCD,EAAa,EAAIJ,EAAY,GACb,EAChB,MAAMR,EAxER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAO9lD,KAAKw0C,GAAW0R,EAAe,IAAMd,GAAM5Q,EAAO,EAAG,MAAQ4Q,GAAM5Q,EAAO,MAAQ,KAuEjFqS,CAAWD,EAAgBV,GACpCjyC,EAAQ2yC,EAAezkD,OACvBpC,EAAS,IAAIwvB,MAAMtb,GACnB6yC,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAIxyC,EAAS,EACbuyC,EAAWzhD,SAAS2hD,IAClBD,EAAQrmD,KAXQ,EAAC6T,EAAgB0yC,KACnC,MACMC,EAAMrC,GADUe,EAAOz/C,MAAMoO,EAAQA,EAAS0yC,GACd,GAEtC,OAAQb,GAAYa,EAAe,GAAKR,GAAWS,GAOpCC,CAAY5yC,EAAQyyC,IACjCzyC,GAAUyyC,KAGZJ,EAASlmD,KAAK,CACZomD,WAAAA,EACAC,QAAAA,KAIJ,IAAK,IAAIK,EAAQ,EAAGA,IAAUrzC,IAASqzC,EAAO,CAC5C,MAAMC,EAAStzC,EAAQqzC,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,IAIxB,IAAK,IAAID,EAAQ,EAAGA,IAAUrzC,EAAQ,IAAKqzC,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWtzC,EAAQqzC,IAASC,EAAQ,CACvD,MAAMC,EAAQvzC,EAAQqzC,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,IAKlC,IAAK,IAAIF,EAAQ,EAAGA,IAAUrzC,EAAQ,IAAKqzC,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWtzC,EAAQqzC,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAUvzC,EAAQqzC,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAASxzC,EAAQqzC,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,IAM3C,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIh5C,EAAI,EAAGA,EAAIm4C,EAAS3kD,OAAQwM,IAAK,CACxC,MAAM,QACJs4C,EADI,WAEJD,GACEF,EAASn4C,GACPi5C,EAAYZ,EAAW7kD,OACvB0lD,EAAc9C,GAAWkC,EAAS,GAAKN,GAAWiB,EAAY,GAE9DE,EADgB1gD,KAAK2kB,OAAOk7B,GACLR,EAAW,IAAM,EACxCsB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,GAPI,GASPC,EAAO7gD,KAAK8gD,IAAIL,EAAcnB,GAAaoB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASn4C,GAC1Bg5C,EAAcM,GAIlB,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAchmD,OAC/B,IAAIuM,EAAQ,EACR8d,EAAI,EACR,IAAK,IAAI87B,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5BhX,EAASlqC,KAAK0F,MAAM07C,GAC1B,IAAI98B,EAAI,EAER,IAAK,IAAI+8B,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAlOJ,GAmOW,IAAR0C,EAlOJ,EADC,IAoOGA,IAAQD,EAAW,EAjOpB,EAHF,IAqOW,IAARI,EAjOH,EAJA,IAsOGA,IAAQF,EAAW,EApOrB,EAFD,GAuOI/T,EAAQsR,EAAOp3C,GACfmd,EAAQ48B,IAAQF,EAAW,EAAIjC,EAAW56B,EAAItkB,KAAK0F,MAAM0nC,EAAQgU,GACvEzoD,EAAO2O,GAAS,CACdi3C,WAAY,CACVj6B,EAAAA,EACAc,EAAAA,EACAX,MAAAA,EACAylB,OAAAA,GAEFsU,MAAAA,GAEFl6B,GAAKG,EAAQ86B,IACXj4C,EAEJ8d,GAAK8kB,EAASqV,EAGhB,OAAO5mD,EA1II2oD,CAA0Bv5C,GACX,IAAfi3C,EA4Ib,SAAmBj3C,GACjB,MAAM,OACJ22C,EADI,YAEJE,EAFI,aAGJE,GACE/2C,EACJ,MAAuB,OAAhB62C,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4B32C,GAC1B,MAAM,OACJ22C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACEv3C,EACEmiC,EAASlqC,KAAK0F,MAAM1F,KAAK2kB,IAAIu6B,EAAWR,EAAO,GAAI1+C,KAAK2kB,IAAIu6B,EAAWR,EAAO,IAAKY,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNhB,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAOy6B,EACPhV,OAAAA,GAEFsU,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAG,EACHc,EAAG8kB,EAASqV,EACZ96B,MAAOy6B,EACPhV,OAAAA,GAEFsU,MAAO+C,KA9BLC,CAAmBz5C,GACH,OAAhB62C,GAAwC,OAAhBA,EAiC9B,SAAiC72C,GAC/B,MAAM,OACJ22C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACEv3C,EACE0c,GAASy6B,EAAWK,GAAW,EAC/BrV,EAASlqC,KAAK0F,MAAM1F,KAAK2kB,IAAIF,EAAQi6B,EAAO,GAAI1+C,KAAK2kB,IAAIF,EAAQi6B,EAAO,GAAIY,KAClF,MAAO,CAAC,CACNf,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAAA,EACAylB,OAAAA,GAEFsU,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAGG,EAAQ86B,EACXn6B,EAAG,EACHX,MAAAA,EACAylB,OAAAA,GAEFsU,MAAO+C,IAxDHE,CAAwB15C,GA4DhC,SAA4BA,GAC1B,MAAM,OACJ22C,EADI,SAEJW,EAFI,SAGJH,EAHI,QAIJK,EAJI,UAKJD,GACEv3C,EACE25C,EAAe1hD,KAAK0F,MAAM,IAAM25C,GAChCsC,EAAc3hD,KAAK2kB,IACvB3kB,KAAK0F,MACH1F,KAAKC,IACH,IAAOi/C,EAAWK,IACjBL,EAAWK,GAAWb,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWK,EAAUmC,GAEjBE,EAAa1C,EAAWyC,EAAcpC,EACtCrV,EAASlqC,KAAK2kB,IAAI26B,EAAWt/C,KAAK0F,MAAM1F,KAAK2kB,IAAIi9B,EAAalD,EAAO,GAAIiD,EAAcjD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAOm9B,EACP1X,OAAAA,GAEFsU,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAGs9B,EAAarC,EAChBn6B,EAAG,EACHX,MAAOk9B,EACPzX,OAAAA,GAEFsU,MAAO+C,IA/FHM,CAAmB95C,GArJd+5C,CAAU/5C,GACK,IAAfi3C,EAuPb,SAAqBj3C,GACnB,MAAM,YAAE62C,GAAgB72C,EAExB,MAA0B,MAAnB62C,EAAY,GAKrB,SAAiC72C,GAC/B,MAAM,UACJu3C,EADI,QAEJC,EAFI,OAGJb,EAHI,SAIJQ,EAJI,SAKJG,GACEt3C,EACEg6C,EAAczC,EACd0C,EAAchiD,KAAK0F,MACvB1F,KAAK2kB,KACF26B,EAAYC,GAAW,EACvBb,EAAO,IAAMQ,EAAWK,IAAab,EAAO,GAAKA,EAAO,MAGvDuD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAaliD,KAAKC,IACtBo/C,EACAr/C,KAAK0F,MACH1F,KAAK2kB,KACFu6B,EAAWK,GAAW,EACvBv/C,KAAK2kB,IACHq9B,EAActD,EAAO,GACrBuD,EAAevD,EAAO,OAKxByD,EAAYniD,KAAK2kB,IAAI3kB,KAAK0F,MAAMq8C,EAAcrD,EAAO,IAAKQ,EAAWK,EAAU2C,GAErF,MAAO,CAAC,CACN3D,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAO09B,EACPjY,OAAQ6X,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAG69B,EAAY5C,EACfn6B,EAAG,EACHX,MAAOy9B,EACPhY,OAAQ+X,GAEVzD,MAAO+C,GACN,CACDhD,WAAY,CACVj6B,EAAG69B,EAAY5C,EACfn6B,EAAG68B,EAAe1C,EAClB96B,MAAOy9B,EACPhY,OAAQ8X,GAEVxD,MAAO+C,IAzDLa,CAAwBr6C,GA6D9B,SAAgCA,GAC9B,MAAM,SACJm3C,EADI,OAEJR,EAFI,UAGJY,EAHI,QAIJC,GACEx3C,EACE65C,EAAa1C,EACb6C,EAAc/hD,KAAK0F,MAAM1F,KAAK2kB,IAAIi9B,EAAalD,EAAO,GAAI,KAAQY,EAAYC,KAC9EoC,GAAezC,EAAWK,GAAW,EACrC0C,EAAejiD,KAAK2kB,IACxB26B,EAAYyC,EAAcxC,EAC1Bv/C,KAAK0F,MAAM1F,KAAK2kB,IACdg9B,EAAcjD,EAAO,GACrBiD,EAAcjD,EAAO,MAKzB,MAAO,CAAC,CACNH,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAOm9B,EACP1X,OAAQ6X,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAG,EACHc,EAAG28B,EAAcxC,EACjB96B,MAAOk9B,EACPzX,OAAQ+X,GAEVzD,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAGq9B,EAAcpC,EACjBn6B,EAAG28B,EAAcxC,EACjB96B,MAtBem9B,EAAaD,EAAcpC,EAuB1CrV,OAAQ+X,GAEVzD,MAAO+C,IAtGLc,CAAuBt6C,GA3PhBu6C,CAAYv6C,GAqWzB,SAAoBA,GAClB,MAAM,YAAE62C,GAAgB72C,EAExB,MAA0B,MAAnB62C,EAAY,GAKrB,YAMkB,IANa,SAC7BM,EAD6B,OAE7BR,EAF6B,QAG7Ba,EAH6B,UAI7BD,EAJ6B,SAK7BD,GACgB,EAChB,MAAMkD,EAAIrD,EACJsD,EAAKxiD,KAAK0F,MAAM1F,KAAK2kB,IAAI49B,EAAI7D,EAAO,GAAI,KAAQY,EAAYC,KAC5DkD,EAAIziD,KAAK0F,OAAOw5C,EAAW,EAAIK,IAAYb,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAK1iD,KAAKC,IAAIo/C,EAAUr/C,KAAK0F,MAAM1F,KAAK2kB,IAAI,IAAOu6B,EAAW,EAAIK,GAAUkD,EAAI/D,EAAO,MACvFiE,EAAK3iD,KAAK0F,MAAM1F,KAAKC,IAAID,KAAKC,IAAIo/C,EAAU,KAAQH,EAAW,EAAIK,IAAWkD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIpD,EACvBsD,EAAK7iD,KAAK2kB,IAAI26B,EAAYkD,EAAKjD,EAASkD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAO89B,EACPrY,OAAQsY,GAEVhE,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAG,EACHc,EAAGo9B,EAAKjD,EACR96B,MAAOi+B,EACPxY,OAAQ2Y,GAEVrE,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAGo+B,EAAKnD,EACRn6B,EAAGo9B,EAAKjD,EACR96B,MAAOm+B,EACP1Y,OAAQ2Y,GAEVrE,MAlgBM,GAmgBL,CACDD,WAAY,CACVj6B,EAAGo+B,EAAKnD,EAAUqD,EAAKrD,EACvBn6B,EAAGo9B,EAAKjD,EACR96B,MAAOk+B,EACPzY,OAAQ2Y,GAEVrE,MAAO+C,IAlDLuB,CAAsB/6C,GAsD5B,YAMkB,IANc,UAC9Bu3C,EAD8B,OAE9BZ,EAF8B,SAG9BQ,EAH8B,QAI9BK,EAJ8B,SAK9BF,GACgB,EAChB,MAAMoD,EAAInD,EACJoD,EAAK1iD,KAAK0F,MAAM1F,KAAK2kB,IAAI89B,EAAI/D,EAAO,GAAI,IAAOQ,EAAWK,KAC1DgD,EAAIviD,KAAK0F,OAAO45C,EAAY,EAAIC,IAAY,EAAIb,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAKxiD,KAAK0F,MAAM68C,EAAI7D,EAAO,IAC3BmE,EAAK7iD,KAAK0F,MAAM68C,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAItD,EACvBqD,EAAK5iD,KAAKC,IAAIo/C,EAAUr/C,KAAK2kB,IAAIu6B,EAAWwD,EAAKnD,EAASgD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACVj6B,EAAG,EACHc,EAAG,EACHX,MAAOi+B,EACPxY,OAAQuY,GAEVjE,MAAO+C,IACN,CACDhD,WAAY,CACVj6B,EAAGo+B,EAAKnD,EACRn6B,EAAG,EACHX,MAAOm+B,EACP1Y,OAAQsY,GAEVhE,MAAO+C,GACN,CACDhD,WAAY,CACVj6B,EAAGo+B,EAAKnD,EACRn6B,EAAGo9B,EAAKjD,EACR96B,MAAOm+B,EACP1Y,OAAQ2Y,GAEVrE,MArjBK,GAsjBJ,CACDD,WAAY,CACVj6B,EAAGo+B,EAAKnD,EACRn6B,EAAGo9B,EAAKK,EAAK,EAAItD,EACjB96B,MAAOm+B,EACP1Y,OAAQ6Y,GAEVvE,MAAO+C,IAnGLyB,CAAuBj7C,GAxWhBk7C,CAAWl7C,GAGf,CACLs2C,OAAAA,EACA6E,eAAgB9E,GAAuBC,ICnI3C,IAAI8E,GAEW,SAASC,GAAqBppD,GAiB3C,OAhBKmpD,KACHA,GAAU92B,SAASoiB,cAAc,QAEjC0U,GAAQ5e,MAAM8e,KAAO56C,EAAAA,GAEjB,qHACA,0GACJ06C,GAAQ5e,MAAM+e,WAAa,SAC3BH,GAAQ5e,MAAMzsC,SAAW,WACzBqrD,GAAQ5e,MAAMgf,KAAO,SACrBJ,GAAQ5e,MAAMif,QAAU,MACxBn3B,SAASrJ,KAAKygC,YAAYN,KAG5BA,GAAQtX,UAAY7xC,EAEbmpD,GAAQre,YCZF,SAAS4e,GACtB7f,EACAruC,EACAmuD,EACAC,EACAC,EACAhnD,IAEAgtC,EAAAA,EAAAA,KAAgB,KACd,GAAI8Z,GAAa9f,EAAWntB,QAAS,CACnC,MAAMotC,EAAoBjgB,EAAWntB,QAAQqtC,QAAwB,iBAErEC,EAAAA,GAAAA,GACEF,EACAjgB,EAAWntB,QAEXmtC,EAAmB,MAAQ,cAlBd,QAoBMhuD,IAAnB+tD,EArBuB,SAqBiC/tD,EACxD+tD,OACA/tD,EACAgH,MAGH,CAACgnC,EAAYruC,EAAQmuD,EAAWC,EAAgBC,EAAkBhnD,ICrBvE,MAGMonD,GAA4B,EAAI7E,GAAAA,GAChC8E,GAA6BlpD,OAAOokD,GAAAA,IACpC+E,GAAgC,+BAEvB,SAASC,GACtBC,EACAja,EACAtwC,EACAghD,EACAwJ,EACAC,EACAC,EACAC,EACAC,EACAlvD,EACAmvD,EACAC,EACAhI,EACAiI,GAEA,MAAM,gBAAEtpD,EAAF,oBAAmBupD,IAAwB3vC,EAAAA,EAAAA,OAE1C4vC,EAAwBC,EAA0BC,IAA8BpkB,EAAAA,GAAAA,MAChFqkB,EAAUC,EAAYC,IAAgBvkB,EAAAA,GAAAA,KACvCwkB,GAAsBrpB,EAAAA,EAAAA,MAoJ5B,OAzCApJ,EAAAA,EAAAA,KAAU,KACR,IAAK/zB,EAAAA,IAAgBylD,IAAmBC,GAAYI,EAClD,OAGF,IAAIW,EACJ,OAAO3oB,EAAAA,GAAAA,IAAcyN,EAAa1zB,QAAU,CAC1CkmB,wBAAyB,eACzBC,QAAU,CAAC/5B,EAAGvF,IACRA,IAAcu/B,GAAAA,GAAAA,OACXwoB,IACHA,EAAYv6C,KAAKC,OAGnBm6C,KAEO,GAKXI,UAAW,KACJD,IAIL/pD,EAAgB,CAAEzB,UAAAA,IAElBoC,WAAWkpD,EAAcplD,KAAKC,IAAI,EAjKT,KAiKwC8K,KAAKC,MAAQs6C,KAC9EA,OAAYzvD,QAGf,CACDu0C,EAAcka,EAAgBxqD,EAAWyB,EAAiB4pD,EAAYC,EAAcb,EAAUI,IAQzF,CACLa,gBAAkBlB,OAAmCzuD,EAnJvD,SAAyBiN,IACvB2iD,EAAAA,GAAAA,GAAwB3iD,GACxB4hD,EAAwB5hD,IAkJxB4vC,YAvFF,SAAqB5vC,GACnB,GAAIwhD,EACFD,EAAcvhD,QAIhB,GAAKjE,EAAAA,GAEL,OAAIwmD,EAAoB3uC,SACtBgvC,cAAcL,EAAoB3uC,SAClC2uC,EAAoB3uC,aAAU7gB,OArBlC,SAAyBiN,GACvB,MAAQ6iD,MAAOrhC,EAAGshC,MAAOxgC,GAAMtiB,EAE/BgiD,EAAoB,CAClBtvD,OAAAA,EACAsE,UAAAA,EACAwqB,EAAAA,EACAc,EAAAA,IAeAygC,CAAgB/iD,SAIlBuiD,EAAoB3uC,QAAUxa,YAAW,KACvCmpD,EAAoB3uC,aAAU7gB,EA5ClC,SAAmBiN,GACjB,GAAIq5C,EAAAA,GAAY,CACd,MAAM2J,EAAShjD,EAAEgjD,OACjB,IAAKA,EAAO9sB,UAAU+sB,SAAS,kBAAoBD,EAAO9sB,UAAU+sB,SAAS,WAC3E,OAGEvhC,EAAAA,EAAAA,uBACFtoB,YAAW,KACTuoD,EAAc3hD,KAvEe,KA0E/B2hD,EAAc3hD,IAiChBkjD,CAAUljD,KAzGwB,OAgLpCmjD,kBAAoB3B,EAAsCE,EAAc0B,GAAAA,OAAYrwD,EAnEtF,SAA2BiN,GACzB,GAAIq5C,EAAAA,GAAY,CACd,GAAKr5C,EAAEgjD,OAAuBK,QAAQ,YAAcxB,EAClD,OAGF7hD,EAAEswB,iBACFixB,SAEAI,EAAc3hD,IA2DhBsjD,kBAAoB9B,OAA8CzuD,EAvDpE,WACMgJ,EAAAA,IAEJtD,EAAgB,CAAEzB,UAAAA,KAqDlBusD,yBAA2BxnD,EAAAA,QAAiChJ,EAlD9D,SAAyBiN,GACvBA,EAAE21B,mBAkDF+L,gBAnJF,SAAyB1hC,GACvB,MAAMwjD,EAAY1B,EAAWluC,QAC7B,IAAK4vC,EAAW,OAEhB,MAAM,QAAE3hB,EAAF,QAAW4hB,GAAYzjD,GACvB,EACJwhB,EADI,MACDG,EADC,EACMW,EADN,OACS8kB,GACXoc,EAAUre,wBAERue,EAAaxmD,KAAK8gD,IAAKlE,EAASjY,EAAUrgB,EAAMA,EAAIG,EAAQkgB,GAAasf,GACzEwC,EAAazmD,KAAK8gD,IAAI17B,EAAI8kB,EAASqc,GAAWrC,GAChDsC,GAAcC,EAChBzB,IAEAC,KAsIFyB,wBAlIF,SAAiC5jD,GAC/B,MAAM,EAAEwhB,EAAF,EAAKc,GAAMtiB,EAAE6jD,cAAc1e,wBACjC6c,EAAoB,CAClBtvD,OAAAA,EACAsE,UAAAA,EACAwqB,EAAAA,EACAc,EAAAA,KA6HFkb,iBAbF,SAA0Bx9B,GACxBmiD,IACIJ,GAyBR,SAAuC/hD,GACrC,MAAM8jD,EAAmBC,GAA8B/jD,EAAE6jD,eACrDC,GACFA,EAAiBE,gBAAgB3C,IA5BL4C,CAA8BjkD,IAY1DoiD,SAAAA,EACAH,uBAAAA,EACAiC,8BAAAA,IAIJ,SAASA,GAA8BlkD,GACrC,MAAM8jD,EAAmBC,GAA8B/jD,EAAE6jD,eACrDC,GACFA,EAAiBK,aAAa9C,GAA+B,IAWjE,SAAS0C,GAA8B1D,GACrC,IAAIzsC,EAA0BysC,EAE9B,GACEzsC,EAAUA,EAAQwwC,yBACXxwC,IAAYA,EAAQsiB,UAAU+sB,SAAS,2BAEhD,OAAOrvC,E,eCzNT,MAQA,IAAe2c,EAAAA,EAAAA,KARkCgL,IAC/C,MAAM,OAAErG,GAAWqG,EACb8oB,GAAuB5oB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBxG,GAGrF,OAAOmvB,EAAuB,mBAACA,EAAyB9oB,QAAYxoC,KC2ItE,IAAew9B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAQsN,KAAMqtC,GAAcl+C,EAAOwQ,MAC7BlE,EAAS/I,EAAQywB,UACjB,cAAE69B,EAAF,aAAiBC,GAAiBvuD,EAAQ2G,QAAQwC,QAAU,GAC5DqlD,EAAkBxuD,EAAQ2Q,iBAC1B89C,EAAgBD,GAClB/9C,EAAAA,EAAAA,IAAkBhU,EAAQuD,EAAQtD,OAAQ8xD,QAC1CzxD,EAEE8tD,GAAY6D,EAAAA,EAAAA,IAAuBjyD,EAAQuD,IACzCyE,UAAWqmD,EAAgBxnD,YAAaynD,GAAsBF,GAAapuD,EAAOkyD,gBAAmB,GAEvGxsD,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,QAClCkyD,EAASzsD,KAAS0qC,EAAAA,EAAAA,IAAc1qC,IAAS4G,IAAW/I,EAAQtD,QAIlE,MAAO,CACLi+C,UAAAA,EACAkU,YALkBD,GAAU7lD,GAAS8M,EAAAA,EAAAA,IAAWpZ,EAAQsM,QAAUhM,EAMlE+xD,WALiBF,EAASzsD,OAAOpF,EAMjCwxD,aAAAA,EACAD,cAAAA,EACAG,cAAAA,EACA5D,UAAAA,KACIA,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,MA1BrBhuB,EApG6B,IAe3C,IAf4C,QAChD/8B,EADgD,oBAEhD+uD,EAFgD,WAGhDC,EAHgD,gBAIhDC,EAAkB,EAJ8B,aAKhDC,EALgD,UAMhDvU,EANgD,WAOhDkU,EAPgD,WAQhDC,EARgD,cAShDR,EATgD,cAUhDG,EAVgD,aAWhDF,EAXgD,UAYhD1D,EAZgD,eAahDC,EAbgD,iBAchDC,GACI,EAEJ,MAAM1lB,GAAMnC,EAAAA,EAAAA,IAAuB,OAEnCisB,EAAAA,GAAAA,IAAe9pB,EAAK0pB,IACpB9P,EAAAA,GAAAA,GAAiBj/C,EAAQtD,OAAQsD,EAAQ2Q,iBAAkB89C,GAC3D7D,GAAgBvlB,EAAKrlC,EAAQtD,OAAQmuD,EAAWC,EAAgBC,GAEhE,MAAMtrD,GAAO48B,EAAAA,GAAAA,KAEP+yB,EAAwBH,GAAmB,GAC1CppB,EAASwpB,IAAatnB,EAAAA,GAAAA,GAAQqnB,IACrCt1B,EAAAA,EAAAA,KAAU,KACJs1B,GAIJhsD,WAAWisD,EAlCU,GAkCCJ,KACrB,CAACA,EAAiBI,EAAWD,IAChC,MAAM,qBAAEzqB,IAAyBC,EAAAA,GAAAA,GAAkBiB,OAAS9oC,EAAWqyD,GAAuB,GAExFE,GAAc/wB,EAAAA,EAAAA,KAAQ,IACnB+vB,EACHA,EAAcxuD,KAAKiJ,GAAW4xC,MAAAA,OAAZ,EAAYA,EAAY5xC,KAAShJ,OAAgBwB,cACnExE,GACH,CAACuxD,EAAe3T,IAEbh0C,GAAU4oD,EAAAA,GAAAA,GACd9vD,EACAO,EACA6uD,EACAC,EACAQ,EACAb,EACAF,EACA,CAAEiB,mBAAoBR,KAElB,kBACJS,EADI,oBACeC,EADf,wBAEJ9D,EAFI,kBAEqBuB,EAFrB,uBAGJwC,EAHI,sBAGoBC,IACtBC,EAAAA,GAAAA,GAAuBxqB,GACrBwmB,OAA6C9uD,IAAxB2yD,EAO3B,GAAIV,EACF,OAAO,2BAAMn0B,UAAU,2BAA2Bl0B,GAGpD,MAAMk0B,GAAYwE,EAAAA,GAAAA,GAChB,kCACAwrB,IAAcE,GAAoB,UAClCc,GAAsB,gBACtBqD,GAAgB,eAChBvqB,GAGF,OACE,0BACEU,IAAKA,EACLznC,IAAIkyD,EAAAA,EAAAA,IAAiB9vD,EAAQpC,IAC7Bi9B,UAAWA,EACX,kBAAiB76B,EAAQpC,GACzB2uC,YAvBqBviC,KACvB2iD,EAAAA,GAAAA,GAAwB3iD,GACxB4hD,EAAwB5hD,IAsBtB2hD,cAAewB,GAEf,+BAAOxmD,GACN+oD,GACC,mBAAC,GAAD,CACExwB,OAAQuwB,EACRvf,OAAQwf,EACR1vD,QAASA,EACT2D,gBAAgB,SAChBgjC,QAASgpB,EACTrf,oBAAqBsf,SCvC/B,GApEsC,IAShC,UATiC,UACrC/0B,EADqC,QAErC76B,EAFqC,OAGrCQ,EAHqC,MAIrCmZ,EAJqC,WAKrCo2C,EALqC,YAMrCrE,EANqC,oBAOrCqD,EAPqC,QAQrC3yB,GACI,EAEJ,MAAMiJ,GAAMnC,EAAAA,EAAAA,IAAuB,MAC7B8sB,GAAiBC,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,GAExC3b,GAAeC,EAAAA,GAAAA,GAASrzC,IAAWszC,EAAAA,EAAAA,IAAoBtzC,EAAS,cAAegwD,GAC/E7c,EAAiB5C,GAAiBvwC,GAClCkwD,EAAe3uD,QAAQvB,IAAWmwD,EAAAA,EAAAA,IAAqBnwD,IAEvDP,GAAO48B,EAAAA,GAAAA,KAEP+zB,GAAcpwD,MAAAA,GAAA,UAAAA,EAASgjD,mBAAT,eAAsBE,iBAAmB1iD,IAAUG,EAAAA,EAAAA,IAAelB,EAAMe,GAE5F,OACE,0BACE6kC,IAAKA,EACLxK,WAAWwE,EAAAA,GAAAA,GAAe,kBAAmBxE,GAC7CuB,QAASp8B,EAAUo8B,OAAUr/B,GAE5Bo2C,GAiBP,SACE3C,EACA/c,EACAy8B,EACAxE,GAEA,MAAM,MAAE//B,EAAF,OAASylB,IAAW2C,EAAAA,GAAAA,MAE1B,OACE,sCACE,0BACEC,IAAKvgB,GAAW+c,EAChB7kB,MAAOA,EACPylB,OAAQA,EACR6C,IAAI,GACJpZ,UAAWq1B,EAAe,QAAU,GACpCG,WAAY3E,IAEbA,GAAe,2BAAM7wB,UAAU,eAnCbqZ,CAAgBf,EAAgBC,EAAc8c,EAAcxE,GAC/E,0BAAK7wB,UAAU,gBACb,wBAAGyB,IAAI,QACHt8B,GAEE+iD,EAAAA,EAAAA,IAAgB/iD,GAClB,mBAAC,GAAD,CAAeA,QAASA,EAASgvD,YAAU,KAE3Czb,EAAAA,GAAAA,GAAqB9zC,EAAMO,EAASuB,QAAQ4xC,IAJ5C4c,GAlCC,KAyCL,0BAAKl1B,UAAU,gBAAgByB,IAAI,SAAQ4d,EAAAA,GAAAA,GAAWkW,GAAez2C,GAzChE,S,2DCXb,MAsEA,IAAe4gB,EAAAA,EAAAA,KAnE6B,IAKtC,YALuC,SAC3CrN,EAD2C,eAE3CojC,EAF2C,SAG3CC,EAH2C,mBAI3ClkC,GACI,EACJ,MAAM,mBAAEmkC,IAAuBn0C,EAAAA,EAAAA,MAEzB2P,EAAoBK,MAAAA,OAAH,EAAGA,EAAoBhmB,MAAMoqD,GAAMA,EAAEvjC,WAAaA,IACnEwjC,EAAe1kC,MAAAA,GAAH,UAAGA,EAAmBI,kBAAtB,aAAG,EAA+BxuB,GAC9C+yD,EAAW3kC,MAAAA,GAAH,UAAGA,EAAmBC,uBAAtB,aAAG,EAAoCruB,GAC/CgzD,GAAsBvd,EAAAA,GAAAA,GAAU,UAASqd,KAAiBA,EAAcvkC,EAAAA,GAAAA,QACxE0kC,GAAkBxd,EAAAA,GAAAA,GAAU,UAASsd,KAAaA,EAAUxkC,EAAAA,GAAAA,QAE5D2kC,EAAavvD,SAAQ+uD,MAAAA,OAAA,EAAAA,EAAgBpjC,YAAaA,GAAY0jC,GAAuBC,IAEzFpsB,aAAcssB,EACdpsB,qBAAsBqsB,IACpBpsB,EAAAA,GAAAA,GAAkBksB,OAAY/zD,GAAW,EAAM,QAE7Ck0D,GAAc1xB,EAAAA,EAAAA,KAAY,KAC9BixB,EAAmB,CAAExvD,UAAWsvD,MAAAA,OAAF,EAAEA,EAAgBtvD,UAAWksB,SAAAA,MAC1D,CAACojC,MAAAA,OAAD,EAACA,EAAgBtvD,UAAWksB,EAAUsjC,KAElCU,EAAmBC,EAAqBC,IAAyBrpB,EAAAA,GAAAA,KAClEspB,GAAsBP,IAAeI,EAErCr2B,GAAYwE,EAAAA,GAAAA,GAChB,wBACAkxB,GAAY,UACZQ,GAAyB,gBAG3B,OACE,0BAAKl2B,UAAWA,GACbw2B,GAAsB,mBAACC,GAAA,EAAD,CAAqBpkC,SAAUA,IACrD6jC,GACC,sCACE,mBAACQ,GAAA,EAAD,CACEh5B,IAAKm4B,EACL9yD,GAAK,kBAAiB8yD,IACtB71B,UAAWm2B,EACXn0B,KA7Ca,GA8Cb20B,cAAeZ,EACfa,MAAI,EACJC,QAAM,EACN9tB,uBAAqB,EACrB+tB,OAAQR,EACRS,QAASR,IAEX,mBAACG,GAAA,EAAD,CACEh5B,IAAKo4B,EACL/yD,GAAK,mBAAkB+yD,IACvB91B,WAAWwE,EAAAA,GAAAA,GAAe,SAAU2xB,GACpCn0B,KAxDQ,IAyDR20B,cAAeX,EACfY,MAAI,EACJC,QAAM,EACN9tB,uBAAqB,EACrBguB,QAASX,SCYrB,IAAe12B,EAAAA,EAAAA,KAjEmB,IAI5B,UAJ6B,QACjCv6B,EADiC,eACxB6xD,EADwB,UACRC,EADQ,QACG11B,EADH,cACY21B,EADZ,eAEjCzB,EAFiC,mBAEjB0B,EAFiB,mBAEG3lC,EAFH,gBAGjC4lC,GACI,EACJ,MAAMxyD,GAAO48B,EAAAA,GAAAA,MACN61B,EAAaC,IAAiBpqB,EAAAA,GAAAA,KAE/Bta,EAAYskC,IAAiBE,MAAAA,GAAJ,UAAIA,EAAiBxkC,iBAArB,aAAI,EAA4B9kB,QAAQ5I,QAAQiU,GAAMA,EAAED,MAAQ,KAEzF4F,GAAQ4kB,EAAAA,EAAAA,KAAQ,KACpB,IAAK2zB,EAAa,OAClB,MAAME,GAAiBC,EAAAA,EAAAA,IAAsC,IAAfryD,EAAQwG,KAAa/G,EAAKqnB,MAClEwrC,EAAetyD,EAAQuyD,WAAYF,EAAAA,EAAAA,IAA2C,IAApBryD,EAAQwyD,SAAkB/yD,EAAKqnB,MACzF2rC,EAAoBzyD,EAAQgjD,cAAeqP,EAAAA,EAAAA,IAAkD,IAA3BryD,EAAQgjD,YAAYx8C,KAAa/G,EAAKqnB,MAE9G,IAAI5lB,EAAOkxD,EAUX,OATIE,IACFpxD,GAAQ,KACRA,GAAQzB,EAAK,mBAAmBmqB,QAAQ,SAAU0oC,IAEhDG,IACFvxD,GAAQ,KACRA,GAAQzB,EAAK,sBAAsBmqB,QAAQ,SAAU6oC,IAGhDvxD,IACN,CAACgxD,EAAazyD,EAAMO,IAEvB,OACE,2BACE66B,WAAWwE,EAAAA,GAAAA,GAAe,cAAe2yB,GAAsB,oBAC/D11B,IAAK78B,EAAK88B,MAAQ,MAAQ,MAC1BH,QAASA,GAER3O,GAAaA,EAAU3tB,KAAKkU,GAC3B,mBAAC,GAAD,CACEs8C,eAAgBA,EAChBpjC,SAAUlZ,EAAEkZ,SACZqjC,UAAQ,EACRlkC,mBAAoBA,MAGvB9qB,QAAQvB,EAAQ0yD,QACf,sCACE,2BAAM73B,UAAU,kBACbC,EAAAA,GAAAA,IAAqB96B,EAAQ0yD,QAEhC,wBAAG73B,UAAU,uBAGhBi3B,GACC,2BAAMj3B,UAAU,sBAAqBqf,EAAAA,GAAAA,GAAW4X,IAElD,2BAAMj3B,UAAU,eAAelhB,MAAOA,EAAOwuB,aAAcgqB,GACxDnyD,EAAQuyD,UAAa,GAAE9yD,EAAK,qBAC5BkzD,EAAAA,EAAAA,IAAWlzD,EAAqB,IAAfO,EAAQwG,OAE3BqrD,GACC,mBAACe,GAAA,EAAD,CAAuBvoC,OAAQwnC,Q,yBC9DvC,MA0GA,GA1G8B,IAExB,IAFyB,QAC7B7xD,EAD6B,oBACpB+uD,EADoB,8BACC8D,EADD,WACgCC,EADhC,aAC4CjyC,GACrE,EAEJ,MAAMwkB,GAAMnC,EAAAA,EAAAA,IAAuB,OAE5B6vB,EAAaC,EAAWC,IAAclrB,EAAAA,GAAAA,KAEvC99B,EAAUjK,EAAQ2G,QAAQsD,SAC1B,SAAEipD,EAAF,aAAYh8C,EAAZ,QAA0Bi8C,GAAYlpD,EACtCmpD,EAAkBC,EAAAA,GAClBC,EAAkBp8C,IAAiBq8C,EAAAA,GAEnCC,GAAavD,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,GACpC+B,GAAab,EAAAA,GAAAA,IAAkB5qB,EAAKwtB,GAEpCY,EAAYxpD,EAAQ0pB,oBAAuB,UAAS1pB,EAAQrM,MAAO01C,EAAAA,EAAAA,IAAoBtzC,EAAS,UAChG0zD,EAAmBP,IAAYC,IACnCnpD,EAAQ0pB,oBAAuB,UAAS1pB,EAAQrM,aAAc01C,EAAAA,EAAAA,IAAoBtzC,EAAS,cACvF4zB,GAAiByf,EAAAA,GAAAA,GAASqgB,GAC1BljB,EAAeD,GAAiBvwC,GAChC2zD,EAAa//B,GAAkB4c,EAE/BmI,GAAYtF,EAAAA,GAAAA,GAChBogB,GACCD,GACDI,EAAAA,EAAAA,IAAsB5zD,EAAS,UAC/B6gB,GAGIgzC,EAAgBtyD,QAAQo3C,IACvBmb,EAAgBC,IAAoBhsB,EAAAA,GAAAA,GAAQ8rB,GAC7CG,EAAed,EAAWY,EAAiBD,EAC3ClvB,GAAuBsvB,EAAAA,GAAAA,GAAmBD,IAE1C,MAAEroC,EAAF,OAASylB,IAAW8iB,EAAAA,GAAAA,IAAqBjqD,GACzCkqD,GAAiB90B,EAAAA,GAAAA,GAAe,aAAcmR,GAAgB,SAE9D4jB,GAAmB/0B,EAAAA,GAAAA,GACvB,sBACAi0B,GAAmB,YAcrB,OAXAx5B,EAAAA,EAAAA,KAAU,KACR,IAAKq5B,IAAY9tB,EAAIznB,QAAS,OAC9B,MAAM0V,EAAQ+R,EAAIznB,QAAQqc,cAAc,SACnC3G,IACDw9B,GACFuD,EAAAA,GAAAA,GAAS/gC,GAETA,EAAMnc,WAEP,CAACg8C,EAASrC,IAGX,0BAAKzrB,IAAKA,EAAKxK,UAAWu5B,EAAkBh4B,QAAUk3B,OAA8Bv2D,EAAZi2D,KACnEgB,GAAiBb,IAAYC,IAC9B,0BACEpf,IAAK2f,EACLhoC,MAAOA,EACPylB,OAAQA,EACR6C,IAAI,GACJpZ,UAAWs5B,KAGbjB,IAAaC,GACb,0BACEnf,IAAK2E,EACLhtB,MAAOA,EACPylB,OAAQA,EACR6C,IAAI,GACJpZ,WAAWwE,EAAAA,GAAAA,GAAe,aAAcsF,KAG3CwuB,GAAWC,GAAmBY,GAC7B,4BACEhgB,IAAK2E,EACLhtB,MAAOA,EACPylB,OAAQA,EACRkjB,SAAUxD,EACVyD,aAAW,EACXC,KAAM1B,EACN2B,OAAK,IAGRvB,GAAYW,GACX,mBAACtC,GAAA,EAAD,CACEh5B,IAAKk7B,EACL54B,WAAWwE,EAAAA,GAAAA,GAAe,aAAcsF,GACxC/mC,GAAI61D,EACJjC,cAAe7Y,EACf9b,KAAMlR,EACN8lC,KAAMX,EACNY,QAASoB,EACTnB,OAAQoC,IAGZ,mBAAC,KAAD,CACE70B,OAAQ6zB,EACR2B,YAAazqD,EACb08B,QAASssB,M,qCC3HF,SAAS0B,GAAwB30D,EAAqB40D,GACnE,OAAOC,EAAAA,GAAAA,IACLpkB,EAAAA,EAAAA,IAA4BzwC,GAC5BuB,QAAQqzD,GACRnrD,EAAAA,KAA4BqrD,EAAAA,ICRhC,MAAMC,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBphB,EAAa8P,EAAgBuR,EAAwBC,EAAsBj4B,GAE3E,OAAIi4B,EACKtlD,QAAQC,QAAQ8kD,GAAyB13B,GAAS,SAASymB,EAAQ,WAAa,aAK3Fv3C,eAAyCynC,EAAa8P,GACpD,MAAMnP,EAAM,IAAIC,MAChBD,EAAIX,IAAMA,EAELW,EAAIhpB,aACD,IAAI3b,SAASC,IACjB0kC,EAAIE,OAAS5kC,KAIjB,MAAMylC,EAASniB,SAASoiB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MAE9BH,EAAO/pB,MAAQgpB,EAAIhpB,MACnB+pB,EAAOtE,OAASuD,EAAIvD,OAEpBwE,EAAIG,UAAUpB,EAAK,EAAG,EAAGA,EAAIhpB,MAAOgpB,EAAIvD,QAExC,MAAM5lB,EAAIs4B,EAAQnP,EAAIhpB,MAAQ,EAAI,EAC5BW,EAAIqoB,EAAIvD,OAAS,EAGvB,MAAQ,QADM/hB,MAAMzgB,KAAKgnC,EAAI2f,aAAa/pC,EAAGc,EAAG,EAAG,GAAGvhB,MACjCjK,KAAK,QAzBnB00D,CAA0BxhB,EAAK8P,G,eC6BxC,MAwIA,GAxI4B,IAkBtB,IAlBuB,GAC3BlmD,EAD2B,QAE3BoC,EAF2B,oBAG3B+uD,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,eAM3BjK,EAN2B,WAO3B8J,EAP2B,eAQ3BI,EAR2B,KAS3B74B,EAAO,SAToB,WAU3B4oB,EAV2B,eAW3BkQ,EAX2B,qBAY3BC,EAZ2B,cAa3BC,EAb2B,YAc3BnK,EAd2B,MAe3BruB,EAf2B,QAgB3BjB,EAhB2B,eAiB3B05B,GACI,EAEJ,MAAMzwB,GAAMnC,EAAAA,EAAAA,IAAuB,MAG7B6yB,IADS7R,EAAAA,EAAAA,IAAgBlkD,KAAYmkD,EAAAA,EAAAA,IAAuBnkD,IACvCyzB,QAErBu8B,GAAiBC,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,IAEvCiH,EAAeC,IAAoB36B,EAAAA,EAAAA,IAASm6B,GAC7CjC,EAAawC,GAAiBhG,GAC9B,UACJrX,EADI,aACOud,IACTC,EAAAA,GAAAA,IAAyB7iB,EAAAA,EAAAA,IAAoBtzC,EAAS68B,IAAQ22B,GAC5DoB,EAAgBmB,GAAgBpd,EAChCyd,EAAWzB,GAAwB30D,EAAS40D,IAGhDsB,aAAcG,IACZF,EAAAA,GAAAA,IAAyB7iB,EAAAA,EAAAA,IAAoBtzC,EAAS,aAAc61D,IAElE,YACJS,EADI,eACSC,EADT,iBACyBC,IAC3BC,EAAAA,EAAAA,IACFz2D,EACA01D,IAAmBG,EAAgBQ,EAAmBH,GACtD1C,IAAeoB,GAEX8B,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BrxB,GAAuBsvB,EAAAA,GAAAA,GAAmBW,IAE9CnwB,aAAcmyB,EACdjyB,qBAAsBkyB,IACpBjyB,EAAAA,GAAAA,GAAkB2xB,OAAgBx5D,EAAW25D,EAAiB,SAEhEjyB,aAAcqyB,EACdnyB,qBAAsBoyB,IACpBnyB,EAAAA,GAAAA,IAAmBgwB,IAAkBoB,GAEnCpc,GAAcra,EAAAA,EAAAA,KAAY,KAC1B+2B,EACER,GACFA,EAAe91D,GAEP40D,EAEDx4B,GACTA,EAAQp8B,EAAQpC,IAFhBq4D,GAAkBe,IAAeA,MAIlC,CAACpC,EAAe0B,EAAat2D,EAAS81D,EAAgB15B,IAEnD0nB,GAAQC,EAAAA,EAAAA,IAAa/jD,IAC3B+wC,EAAAA,EAAAA,KAAgB,KACd,IAAK6kB,EACH,OAGF,MAAMqB,EAAY5xB,EAAIznB,QAASqtC,QAAwB,oBAEnD2J,EACFQ,GAAoBR,EAAe9Q,EAAO0H,EAAgB8J,EAAYj4B,GAAO4T,MAAMimB,IACjFD,EAAUxrB,MAAM0rB,YAAY,gBAAiBD,GAC7CD,EAAU9I,aAAaiJ,EAAAA,GAA2B,OAGpDH,EAAU/2B,UAAU+L,IAAI,wBAEzB,CAAC2oB,EAAe9Q,EAAO8R,EAAsBpK,EAAgB8J,EAAYj4B,IAE5E,MAAM,MAAE1R,EAAF,OAASylB,EAAT,QAAiBwT,GAAYa,GAAc7B,GAAyB5jD,EAAS6jD,GAE7EhpB,GAAYwE,EAAAA,GAAAA,GAChB,eACCi3B,IAAgBX,GAAkB,cACnC/Q,GAAW,cACXj5B,IAAUylB,GAAU,gBAGhB3F,EAAQga,EACT,UAAS95B,gBAAoBylB,cAAmBqU,EAAWj6B,aAAai6B,EAAWn5B,OACpF,GAEJ,OACE,0BACE1uB,GAAIA,EACJynC,IAAKA,EACLxK,UAAWA,EACX4Q,MAAOA,EACPrP,QAASk6B,OAAcv5D,EAAY68C,GAEnC,6BACEvU,IAAK+wB,EACLv7B,UAAU,YACV4Q,MAAQ,UAAS9f,gBAAoBylB,QAEvC,0BACE4C,IAAK4gB,EACL/5B,UAAY,cAAa8J,IACzBhZ,MAAOA,EACPylB,OAAQA,EACR6C,IAAI,GACJoc,WAAY3E,IAEbA,GAAe,2BAAM7wB,UAAU,cAC/B+7B,IAAwBE,GACvB,0BAAKj8B,UAAY,iBAAgBg8B,KAC/B,mBAACQ,GAAA,EAAD,CAAiBjoD,SAAUonD,EAAkBp6B,QAASk6B,EAAc1c,OAAc78C,KAGrF+5D,GAA8B,wBAAGj8B,WAAWwE,EAAAA,GAAAA,GAAe,gBAAiB03B,KAC5ER,GACC,2BAAM17B,UAAU,6BAA6B3zB,KAAK0F,MAAyB,IAAnB4pD,GAAxD,O,0BC3KO,SAASc,GAAkBC,EAAiDC,GAAkB,MAC3G,MAAMC,GAAav0B,EAAAA,EAAAA,IAAM,UAACq0B,EAAU35C,eAAX,aAAC,EAAmB85C,QACvCC,GAAaz0B,EAAAA,EAAAA,MACnBy0B,EAAW/5C,QAAU45C,EAErB,MAAMI,GAAgBr4B,EAAAA,EAAAA,KAAY,KAC3Bg4B,EAAU35C,UAIf65C,EAAW75C,SAAW25C,EAAU35C,QAAQ85C,OAEpCD,EAAW75C,SACb25C,EAAU35C,QAAQzG,WAEnB,CAACogD,IAEEM,GAAkBt4B,EAAAA,EAAAA,KAAY,KAEhCg4B,EAAU35C,SAAW65C,EAAW75C,SAAW+5C,EAAW/5C,SAEnD2V,SAASrJ,KAAK+iC,SAASsK,EAAU35C,WAEpCy2C,EAAAA,GAAAA,GAASkD,EAAU35C,WAEpB,CAAC25C,IAEEO,GAAuBv4B,EAAAA,EAAAA,KAAY,MACvCw4B,EAAAA,EAAAA,IAAQF,KACP,CAACA,KAEJG,EAAAA,GAAAA,GAAkBJ,EAAeE,IACjCG,EAAAA,GAAAA,IAAuBL,EAAeC,G,mNCUxC,MAwKA,GAxK4B,IActB,UAduB,GAC3Bj6D,EAD2B,QAE3BoC,EAF2B,oBAG3B+uD,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,YAM3ByC,EAN2B,eAO3BxC,EAP2B,aAQ3B70C,EAR2B,WAS3B4kC,EAT2B,QAU3BrpB,EAV2B,eAW3B05B,EAX2B,cAY3BD,EAZ2B,YAa3BnK,GACI,EAEJ,MAAMrmB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7Bi1B,GAAWj1B,EAAAA,EAAAA,IAAyB,MAEpC5P,GAAS8wB,EAAAA,EAAAA,IAAgBpkD,KAAYo4D,EAAAA,EAAAA,IAAuBp4D,GAC5D+1D,EAAeziC,EAAMG,QAErBu8B,GAAiBC,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,IAEvCiH,EAAeC,IAAoB36B,EAAAA,EAAAA,IAASm6B,GAC7CjC,EAAajyD,QAAQy0D,GAAiBhG,GAAkBnvC,IACvDw3C,EAAeC,IAAoBh9B,EAAAA,EAAAA,IAAS48B,GAE7CtkC,GAAiByf,EAAAA,GAAAA,IACrBC,EAAAA,EAAAA,IAAoBtzC,EAAS,eAC3BgwD,GAAkBnvC,IACpB+yC,EAAAA,EAAAA,IAAsB5zD,EAAS,aAC/B6gB,GAEI03C,GAAoBtE,EAAAA,GAAAA,GAAmBrgC,IAEvC,UAAE+kB,EAAF,aAAaud,IAAiBC,EAAAA,GAAAA,IAClC7iB,EAAAA,EAAAA,IAAoBtzC,EAAS,WAC5BwzD,GACDI,EAAAA,EAAAA,IAAsB5zD,EAAS,UAC/B6gB,GAEI+zC,EAAgBmB,GAAgBpd,EAChC6f,EAAWj3D,QAAQyuD,GAAkB4E,GAErCwB,EAAWzB,GAAwB30D,EAAS4zB,IAE1CsiC,aAAcG,IAAqBF,EAAAA,GAAAA,IACzC7iB,EAAAA,EAAAA,IAAoBtzC,EAAS,aAC5B61D,EACD1pC,EAAAA,GAAAA,QACAtL,IAGI,WAAE43C,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,IAAclD,IAClD,YAAEa,EAAF,eAAeC,EAAf,iBAA+BC,IAAqBC,EAAAA,EAAAA,IACxDz2D,EACA01D,IAAmBG,EAAgBQ,EAAmBH,GACrD1C,IAAeiF,GAAe5C,GAE3Ba,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,IAElCvxB,aAAcmyB,EACdjyB,qBAAsBkyB,IACpBjyB,EAAAA,GAAAA,GAAkB2xB,OAAgBx5D,EAAW25D,IAE/CjyB,aAAcm0B,EACdj0B,qBAAsBk0B,IACpBj0B,EAAAA,GAAAA,GAAkBoxB,IAAkBqC,IAAkBzB,IAEnDkC,EAAcC,IAAmBz9B,EAAAA,EAAAA,IAAiB,GACnD09B,GAAmBz5B,EAAAA,EAAAA,KAAav1B,IACpC+uD,EAAgB7xD,KAAKC,IAAI,EAAG6C,EAAE6jD,cAAcoL,YAAc,MACzD,IAEGC,GAAW,UAACf,EAASv6C,eAAV,aAAC,EAAkBs7C,WAAa5lC,EAAM4lC,UAAY,EAE7DpV,GAAQC,EAAAA,EAAAA,IAAa/jD,GACrBgkD,GAAcC,EAAAA,EAAAA,IAAmBjkD,IACjC,MAAE2rB,GAAF,OAASylB,IAAWqU,IAAclB,EAAAA,GAAAA,IAAyBjxB,EAAOwwB,EAAOE,EAAaH,GAE5FyT,GAAkBa,EAAUK,IAC5BW,EAAAA,GAAAA,GAAgBhB,EAAU,CAACK,IAE3B,MAAM5e,IAAcra,EAAAA,EAAAA,KAAY,KAC1B+2B,EACER,GACFA,EAAe91D,GAER61D,GACTx5C,EAAAA,EAAAA,MAAa+8C,2BAA2B,CAAEp5D,QAAAA,IAChC40D,EAEDA,IAAkByD,GAC3BC,GAAiB,GACjBH,EAASv6C,QAAS6zC,QACTr1B,GACTA,EAAQp8B,EAAQpC,IALhBq4D,GAAkBe,IAAeA,MAOlC,CAACV,EAAaT,EAAejB,EAAeyD,EAAej8B,EAAS05B,EAAgB91D,IAEjF66B,IAAYwE,EAAAA,GAAAA,GAAe,oBAAqBi3B,GAAe,eAC/D7qB,GAAQga,EACT,UAAS95B,iBAAoBylB,eAAmBqU,EAAWj6B,aAAai6B,EAAWn5B,OACpF,GAEJ,OACE,0BACE+Y,IAAKA,EACLznC,GAAIA,EACJi9B,UAAWA,GACX4Q,MAAOA,GACPrP,QAASk6B,OAAcv5D,EAAY68C,IAEnC,6BACEvU,IAAK+wB,EACLv7B,UAAU,YACV4Q,MAAQ,UAAS9f,iBAAoBylB,UAEvC,0BACE4C,IAAKpgB,EACLiH,WAAWwE,EAAAA,GAAAA,GAAe,YAAak5B,GACvC9sB,MAAQ,UAAS9f,iBAAoBylB,QACrC6C,IAAI,GACJoc,WAAY3E,IAEb8M,GACC,+BACEnzB,IAAK8yB,EACLt9B,UAAU,aACVlP,MAAOA,GACPylB,OAAQA,GACRkjB,SAAU+D,EACV5D,OAAK,EACLD,MAAI,EACJD,aAAW,GAEPmE,EAVN,CAWErI,WAAY3E,EACZ2N,aAAcL,IAEd,6BAAQhlB,IAAK4gB,KAGhBlJ,GAAe,2BAAM7wB,UAAU,cAC/B+9B,GAA0B,wBAAG/9B,WAAWwE,EAAAA,GAAAA,GAAe,kBAAmBw5B,KAC1EjC,GACC,0BAAK/7B,WAAWwE,EAAAA,GAAAA,GAAe,gBAAiBw3B,IAC9C,mBAACQ,GAAA,EAAD,CAAiBjoD,SAAUonD,EAAkBp6B,QAASwd,OAGxDoc,GACA,wBAAGn7B,UAAU,kBAEd07B,EACC,2BAAM17B,UAAU,6BACZy7B,GAAeT,EAAkB,GAAE3uD,KAAK0F,MAAyB,IAAnB4pD,MAA6B,OAG/E,0BAAK37B,UAAU,0BACZvH,EAAMgmC,MAAQ,OAAQC,EAAAA,EAAAA,IAAoBryD,KAAKC,IAAI+xD,EAAWJ,EAAc,O,eC5LvF,MA8BA,IAAe/7B,EAAAA,EAAAA,KACb,CAACtgC,EAAD,KAAqC,IAA5B,QAAE+8D,GAA0B,EACnC,MAAQC,aAAeC,WAAYC,IAAoBl9D,EACvD,MAAO,CACLiY,MAAMmB,EAAAA,EAAAA,IAAWpZ,EAAQ+8D,EAAQzwD,QACjC4wD,cAAAA,KALN,EA9B2C,IAErC,IAFsC,QAC1CH,EAD0C,KACjC9kD,EADiC,cAC3BilD,GACX,EACJ,MAAM,SAAEh7D,IAAa0d,EAAAA,EAAAA,OAEf,UACJ0F,EADI,SAEJD,EAFI,YAGJgB,EAHI,OAIJ/Z,GACEywD,EAEE5f,GAAcra,EAAAA,EAAAA,KAAY,KAC9B5gC,EAAS,CAAEf,GAAImL,MACd,CAACpK,EAAUoK,IAEd,OACE,0BACE8xB,WAAWwE,EAAAA,GAAAA,GAAe,UAAW99B,QAAQwH,IAAW,eACxDqzB,QAASrzB,EAAS6wC,OAAc78C,GAEhC,mBAACu+C,GAAA,EAAD,CAAQze,KAAK,QAAQnoB,KAAMA,EAAMxT,KAAM6gB,GAAaD,IACpD,0BAAK+Y,UAAU,gBACb,0BAAKA,UAAU,gBAAgB9Y,EAA/B,IAA2CD,GAC3C,0BAAK+Y,UAAU,kBAAiB++B,EAAAA,GAAAA,IAA0BD,EAAe72C,S,gDCqDjF,SAAS+2C,GAAcxoD,EAAestB,GACpC,OAAOA,EAAQ,GAAMttB,EAAQstB,EAAS,KAAKm7B,UAAY,EAGzD,SAnFiC,IAO3B,IAP4B,OAChCC,EADgC,YAEhCC,EAFgC,YAGhC5iC,EAHgC,eAIhC6iC,EAJgC,eAKhCC,EALgC,cAMhCC,GACI,EACJ,MAAMt6D,EAASm6D,GAAeA,EAAY3zD,MAAMoqD,GAAMA,EAAEn8C,SAAWylD,EAAOzlD,SACpE8lD,EAA0C,IAA1BF,EAAej4D,SAA2D,IAA3Ci4D,EAAej7D,QAAQ86D,EAAOzlD,QAC7E+lD,EAAYH,EAAej4D,OAAS,GAAKm4D,IAAmBv6D,MAAAA,OAAjD,EAAiDA,EAAQ8tB,UACpE2sC,EAAgBz6D,EAASg6D,GAAch6D,EAAO63B,YAAaN,GAAe,GAAK,GAC9EmjC,EAAcC,IAAmBl/B,EAAAA,EAAAA,IAAS6+B,EAAgB,EAAIG,GAE/DG,GAAUv3B,EAAAA,EAAAA,IAAuB,MACjCw3B,EAAY76D,EAASg6D,GAAch6D,EAAO63B,YAAauiC,GAAkB,GAAK,EAC9EU,EAA0BJ,EAAeD,EA0B/C,IAxBAxgC,EAAAA,EAAAA,KAAU,KACJqgC,GACFK,EAAgBF,KAEjB,CAACH,EAAeG,KAEnBxgC,EAAAA,EAAAA,KAAU,KACR,MAAM8gC,EAASH,EAAQ78C,QAEvB,GAAIg9C,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAOnoB,kBAEfhH,EAAQkvB,EAA0B,GAAK,sDACxCE,EAMHA,EAAM1M,aAAa,QAAS1iB,GAL5BmvB,EAAO7nB,UAAa,gFACiDtH,mFAOxE,CAACkvB,EAAyBR,KAExBH,IAAgBn6D,EACnB,OAGF,MAAMi7D,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACE,0BAAK9/B,UAAU,aAAayB,IAAI,OAC9B,0BAAKzB,UAAY,sBAAsC,QAAlBy/B,EAA0B,cAAgB,KAC5EA,EADH,IAEGD,GACC,2BAAMx/B,WAAWwE,EAAAA,GAAAA,GACf,sBACC+6B,GAAiB,QAClBD,GAAiB,YAGjB,wBAAGt/B,UAAWu/B,EAAgB,aAAe,iBAInD,0BAAKv/B,UAAU,qBACb,0BAAKA,UAAU,mBAAmByB,IAAI,SACnC4d,EAAAA,GAAAA,GAAW6f,EAAO74D,OAErB,0BAAK25B,WAAWwE,EAAAA,GAAAA,GAAe,qBAAsBg7B,IAAaD,GAAiB,UACjF,0BAAKv/B,UAAU,qBAAqBwK,IAAKo1B,IACzC,0BACE5/B,UAAU,mBACV4Q,MAAOqvB,QCyQnB,IAAevgC,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAsB,IAAb,KAAE4Y,GAAW,EACpB,MAAM,eAAE8hB,GAAmB9hB,EAAK1M,SAC1B,iBAAEjC,EAAkBuG,OAASK,KAAMqtC,IAAgBl+C,EACzD,OAAK06B,GAA4C,IAA1BA,EAAel1B,OAI/B,CACLk1B,eAAAA,EACAwjB,UAAAA,EACAj0C,iBAAAA,GANO,KALOq2B,EAvToB,IAOlC,IAPmC,QACvC/8B,EADuC,KAEvCqV,EAFuC,eAGvC8hB,EAHuC,UAIvCwjB,EAJuC,WAKvCogB,EALuC,iBAMvCr0D,GACI,EACJ,MAAM,YAAEkK,EAAF,gBAAeoqD,IAAoB3+C,EAAAA,EAAAA,OAEjCze,GAAIoD,EAAN,OAAiBtE,GAAWsD,GAC5B,QAAEi7D,EAAF,QAAWtyD,GAAY0M,GACtB6lD,EAAcC,IAAmB7/B,EAAAA,EAAAA,KAAkB,IACnD8/B,EAAeC,IAAoB//B,EAAAA,EAAAA,IAAmB,KACtDggC,EAAiBC,IAAsBjgC,EAAAA,EAAAA,KAAkB,IACzDkgC,EAAcC,IAAmBngC,EAAAA,EAAAA,KAAkB,IACnDogC,EAAaC,IAAkBrgC,EAAAA,EAAAA,KACnC2/B,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxD30D,KAAK2kB,IAAIovC,EAAQY,UAAY30D,KAAKG,MAAM4K,KAAKC,MAAQ,KAAQxL,EAAkBu0D,EAAQS,aACvF,GAGAI,GAAe54B,EAAAA,EAAAA,IAAuB,OACpCv6B,QAASqxD,EAAX,YAAwB5iC,GAAgBzuB,EACxCozD,EAAW/B,GAAeA,EAAYtsC,MAAM+iC,GAAMA,EAAE9iC,WACpDquC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAYh6D,OAAOyG,EAAQyuB,aAAe,EAC9E+kC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAc9yD,KAAKC,OAAO6yD,EAAYl6D,KAAK2wD,GAAMA,EAAE/4B,eAAgBN,EACpF8iC,EAAiBF,EAAcA,EAAY15D,QAAO,CAAC+7D,EAAmB5L,KACtEA,EAAE6L,WACJD,EAAQ37D,KAAK+vD,EAAEn8C,QAGV+nD,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQv8D,KAAKkV,IAAD,CAClCosB,MAAOpsB,EAAE9T,KACTmQ,MAAO2D,EAAEV,OACTioD,OAAQh7D,QAAQ05D,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxE5hC,EAAAA,EAAAA,KAAU,KAENohC,GACG7lD,EAAK1M,QAAQA,SACb0M,EAAK1M,QAAQA,QAAQ+kB,MAAM7tB,GAAWA,EAAO8tB,YAEhDwtC,GAAgB,KAEjB,CAACD,EAAc7lD,EAAK1M,QAAQA,WAE/BmxB,EAAAA,EAAAA,KAAU,KACJ4hC,EAAc,GAChBt4D,YAAW,IAAMu4D,EAAeD,EAAc,IAAI,KAGpD,MAAMe,EAAcX,EAAal+C,QAEjC,GAAI6+C,EAAa,CACf,MAAMC,EAAgB,GAAQx1D,KAAKy1D,GAC7B9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAYhqB,kBAK5B,GAJIipB,GAAe,GACjBe,EAAYv8B,UAAU+L,IAAI,YAGvB4uB,GAAUgC,EASR,CACL,MAAMC,GAAqB7B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBgB,EACzFG,EAAQE,aAAcxD,EAAAA,EAAAA,IAAoBmC,GACzCb,EAAMpoB,kBAAiC0b,aAAa,oBAAsB,IAAG2O,UAX9EL,EAAY1pB,UAAa,oBACjBwmB,EAAAA,EAAAA,IAAoBmC,2LAGJgB,KAAiBA,yEAU5C,CAAChB,EAAaT,EAAQS,eAEzB5hC,EAAAA,EAAAA,KAAU,KACJmhC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DhrD,EAAY,CAAElU,OAAAA,EAAQsE,UAAAA,MAEvB,CAACtE,EAAQg/D,EAAaK,EAAUnrD,EAAa5P,EAAWi6D,EAAQW,OAAQX,EAAQuB,QAGnF1iC,EAAAA,EAAAA,KAAU,KACR,IAAIkjC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQ75D,OAAOC,YAAW,KACxBwN,EAAY,CAAElU,OAAAA,EAAQsE,UAAAA,MACC,IAAtBi6D,EAAQS,cAGN,KACDsB,GACF75D,OAAOgB,aAAa64D,MAGvB,CAAChB,EAASt/D,EAAQkU,EAAa5P,EAAWi6D,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAe1+B,EAAAA,EAAAA,KAAQ,IACpBpH,EAAiBA,EAAe72B,QAAO,CAACT,EAAmBjC,KAChE,MAAM8W,EAAOimC,EAAU/8C,GAKvB,OAJI8W,GACF7U,EAAOa,KAAKgU,GAGP7U,IACN,IAAM,IACR,CAAC86C,EAAWxjB,IAET+lC,GAAoB39B,EAAAA,EAAAA,KACvBjrB,IACC+mD,EAAiB,CAAC/mD,IAClB6mD,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAACzmD,MACX,CAACymD,IAGAoC,GAAuB59B,EAAAA,EAAAA,KAC1BlrB,IACCgnD,EAAiBhnD,KAChB,IAGC+oD,GAAkB79B,EAAAA,EAAAA,KACtB,KACE47B,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,KACV,CAACL,EAAYK,IAGZiC,GAAyB99B,EAAAA,EAAAA,KAC7B,KACEy7B,EAAgB,CAAEt+D,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAWg6D,IAGnBsC,GAAqB/9B,EAAAA,EAAAA,KAAY,KACrCg8B,GAAmB,KAClB,IAEGgC,GAAqBh+B,EAAAA,EAAAA,KAAY,KACrCg8B,GAAmB,GACnBE,GAAgB,KACf,KAGH3hC,EAAAA,EAAAA,KAAU,KACJ0hC,GAAgBO,GAAYd,EAAQuB,MAAQ7zD,EAAQA,SAAW0M,EAAK1M,QAAQ60D,WACxD70D,EAAQA,QAAQtC,MAAMoqD,GAAMA,EAAE9iC,UAAY8iC,EAAE6L,aAEhEf,GAAmB,MAGtB,CAACQ,EAAUP,EAAc7yD,EAAQA,QAASsyD,EAAQuB,KAAMnnD,EAAK1M,QAAQ60D,WAExE,MAAM/9D,GAAO48B,EAAAA,GAAAA,KA4Cb,OACE,0BAAKxB,UAAU,OAAOyB,IAAK78B,EAAK88B,MAAQ,OAAS,OAZ/C++B,GAAmBjmD,EAAK1M,QAAQ60D,UAC9B,mBAACC,GAAA,EAAD,CACEz9D,SAAS09D,EAAAA,GAAAA,GAAuBroD,EAAK1M,QAAQ60D,SAAUnoD,EAAK1M,QAAQg1D,kBACpEzE,SA7MgB,IA8MhB0E,UAAWL,EACXM,YAhNoB,2BAyNxB,0BAAKhjC,UAAU,kBAAiBqf,EAAAA,GAAAA,GAAW+gB,EAAQ6C,SAAU,CAAC,QAAS,QACvE,0BAAKjjC,UAAU,aACZp7B,EAuET,SAA2Bw7D,GAEzB,YAAgC,IAArBA,EAAQiB,SAlSR,IAsSPjB,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGrCjB,EAAQW,OACH,eAGFX,EAAQiB,SAAW,aAAe,gBArF7B6B,CAAkB9C,IA/B1BgC,EAAah7D,OAAS,GACpB,0BAAK44B,UAAU,sBACZoiC,EAAan9D,KAAK4U,GACjB,mBAAC4mC,GAAA,EAAD,CACEze,KAAK,QACLnoB,KAAMA,OA4BXgnD,EAAc,GAAKM,GAAW,0BAAK32B,IAAKy2B,EAAcjhC,UAAU,mBAChEogC,EAAQuB,MAAQnnD,EAAK1M,QAAQ60D,WAAaxB,GACzC,mBAACp/B,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,OACLJ,MAAM,cACN5B,UAAU,iBACVoV,SAAUqrB,EACVl/B,QAASkhC,EACTl+B,UAAU,iBAEV,wBAAGvE,UAAU,gBAIlBmhC,GACC,0BAAKnhC,UAAU,gBACZshC,EAEG,mBAAC6B,GAAA,EAAD,CACE3pD,QAASgoD,EACTn6B,SAAUi7B,EACVltB,SAAUjwC,EAAQozB,aAAe8nC,EACjC+C,eAAgB/C,EAAeE,OAAgBr+D,EAC/C6P,OAAK,IAIP,mBAACsxD,GAAA,EAAD,CACEvvC,KAAO,QAAO3tB,IACdqT,QAASgoD,EACTn6B,SAAUg7B,EACVjtB,SAAUjwC,EAAQozB,aAAe8nC,EACjCiD,cAAejD,EAAeE,EAAc,QAAKr+D,MAKzDi/D,GACA,0BAAKnhC,UAAU,gBACZogC,EAAQoB,QAAQv8D,KAzFzB,SAA4Bi6D,GAC1B,OACE,mBAAC,GAAD,CACExhC,IAAKwhC,EAAOzlD,OACZ6lD,cAAeqB,EACfzB,OAAQA,EACRC,YAAaA,EACb5iC,YAAaA,EACb6iC,eAAgBA,EAChBC,eAAgBA,SAmFhB+B,IAAkBE,GAClB,0BAAKthC,UAAU,qBA0CvB,SAAgCp7B,EAAc2+D,EAA0BrqD,GACtE,OAAKA,EAIEtU,EAAK2+D,EAAS,SAAW,OAAQrqD,EAAO,KAHtCtU,EAAK2+D,EAAS,4BAA8B,mCA5CXC,CAAuB5+D,EAAMw7D,EAAQuB,KAAM7zD,EAAQyuB,cAExF+kC,GACC,mBAACv/B,GAAA,EAAD,CACEqgB,QAAM,EACNhN,SAAmC,IAAzBmrB,EAAcn5D,OACxB46B,KAAK,OACLT,QAASghC,GAER39D,EAAK,oBAGTw8D,GACC,mBAACr/B,GAAA,EAAD,CACEqgB,QAAM,EACNpgB,KAAK,OACLT,QAASihC,GAER59D,EAAK,yB,wBClThB,MAkHA,IAAe86B,EAAAA,EAAAA,KAjGe,IAaxB,IAbyB,QAC7Bv6B,EAD6B,oBAE7B+uD,EAF6B,UAG7BlL,EAH6B,YAI7B4R,EAJ6B,YAK7ByC,EAL6B,UAM7BoG,EAN6B,aAO7Bz9C,EAP6B,cAQ7Bg1C,GAAgB,EARa,YAS7BnK,EAT6B,MAU7BruB,EAV6B,aAW7BkhC,EAX6B,sBAY7BC,GACI,EACJ,MAAMC,GAAUC,EAAAA,EAAAA,IAAkB1+D,GAElC,IAAI2+D,GAAgB,EACpB,GAAIF,MAAAA,GAAAA,EAAS1rC,QAAU0rC,EAAQnrC,MAAO,CACpC,MAAM,MAAE3H,EAAF,OAASylB,GAAWwS,GAAyB5jD,GACnD2+D,EAAgBhzC,IAAUylB,EAG5B,MAAMwtB,GAAmBr/B,EAAAA,EAAAA,KAAY,KACnCg/B,MACC,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJI,EADI,IAEJvzD,EAFI,WAGJwzD,EAHI,MAIJnlD,EAJI,YAKJnG,EALI,MAMJuf,EANI,MAOJO,GACEmrC,EACEM,GAAsBhsC,GAASO,IAAUirC,IAAiBI,EAC1DK,GAAuBC,EAAAA,GAAAA,GAASzrD,EAzDhB,KA2DhBqnB,GAAYwE,EAAAA,GAAAA,GAChB,UACAs/B,GAAiB,qBAChB5rC,IAAUO,IAAUgrC,GAAa,gBAClChrC,GAAS,cAGX,OACE,0BACEuH,UAAWA,EACX,gBAAegkC,GAAYC,GAAY,GACvCxiC,IAAI,QAEHvJ,IAAUO,GACT,mBAAC,GAAD,CACEtzB,QAASA,EACT+uD,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACb54B,KAAM8hC,EAAgB,YAAc,SACpChJ,gBAAiBoJ,EACjB3iC,QAAS2iC,EAAqBH,OAAmB7hE,EACjD+4D,eAAgB0I,EAChB3I,cAAeA,EACfnK,YAAaA,EACbruB,MAAOA,IAGX,0BAAKxC,UAAU,gBACb,mBAACqkC,GAAA,EAAD,CAAUrkC,UAAU,YAAYvvB,IAAKA,EAAKpK,KAAM29D,GAAYC,KAC1DR,GAAa3kD,GACb,wBAAGkhB,UAAU,eAAcqf,EAAAA,GAAAA,GAAWvgC,IAEvCqlD,GACC,wBAAGnkC,UAAU,qBAAoBqf,EAAAA,GAAAA,GAAW8kB,EAAsB,CAAC,QAAS,UAG9EV,GAAahrC,GACb,mBAAC,GAAD,CACEtzB,QAASA,EACT+uD,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACbyC,YAAaA,EACbr3C,aAAcA,EACdub,QAAS2iC,EAAqBH,OAAmB7hE,EACjD+4D,eAAgB0I,EAChB3I,cAAeA,EACfnK,YAAaA,Q,eC9GvB,MA0CA,IAAenxB,EAAAA,EAAAA,KA1Ce,IAExB,IAFyB,QAC7Bv6B,GACI,EACJ,MAAMP,GAAO48B,EAAAA,GAAAA,KACPzU,GAAUu3C,EAAAA,EAAAA,IAAkBn/D,IAE5B,MACJ2Z,EADI,KAEJzY,EAFI,OAGJk+D,EAHI,SAIJC,EAJI,OAKJC,EALI,SAMJC,GACE33C,EAEJ,OACE,0BACEiT,UAAU,WAETlhB,GACC,wBAAGkhB,UAAU,UAASqf,EAAAA,GAAAA,GAAWvgC,IAElCzY,GACC,6BAAIg5C,EAAAA,GAAAA,GAAWh5C,EAAM,CAAC,QAAS,QAEjC,0BAAK25B,UAAY,gBAAc0kC,EAAW,YAAc,KACrDA,GACC,0BACE1kC,UAAU,gBACVmZ,IAAKurB,EACLtrB,IAAI,KAGR,wBAAGpZ,UAAU,qBACV2kC,EAAAA,GAAAA,GAAeJ,EAAQC,EAAU5/D,EAAKqnB,MACtCw4C,GAAU,+BAAO7/D,EAAK,6B,eClDjC,MAIMggE,GAAe,IAAItzD,IAAItK,OAAO69D,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBC,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCH1F,GAV+B,IAEzB,IAF0B,QAC9BC,EAAU,cADoB,UACLC,EAAY,OADP,MACe70C,EADf,OACsBylB,EADtB,UAC8BvW,GACxD,EACJ,MAAM4lC,GAAaphC,EAAAA,GAAAA,GAAe,WAAYkhC,EAASC,EAAW3lC,GAC5D4Q,GAAS9f,EAAS,UAASA,OAAa,KAAOylB,EAAU,WAAUA,OAAc,IACvF,OACE,0BAAKvW,UAAW4lC,EAAYh1B,MAAOA,K,eCevC,MAAMi1B,GAAiB,KACjBC,GAAqB,CACzBh1C,MAAO,IACPylB,OAAQ,IACRwvB,KAAM,GACN9rB,MAAO,GAIH+rB,GAAU,CAAEC,OAAQ,oyBAkP1B,IAAevmC,EAAAA,EAAAA,KAtOgB,IAQzB,IAR0B,QAC9Bv6B,EAD8B,KAE9ByT,EAF8B,aAG9BoN,EAH8B,eAI9B2qC,EAJ8B,WAK9B8J,EAL8B,MAM9Bj4B,EAN8B,iBAO9B32B,GACI,EAEJ,MAAM2+B,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7B44B,GAAe54B,EAAAA,EAAAA,IAAuB,MACtCzjC,GAAO48B,EAAAA,GAAAA,KACP0kC,GAAcC,EAAAA,GAAAA,KAEdliC,GAAWmiC,EAAAA,EAAAA,IAAmBjhE,IAC9B,KAAElC,EAAF,IAAQojE,GAAQpiC,EAEhBqiC,GAAa16D,EAAAA,EAAAA,GAAcC,GAC3B06D,GAAYC,EAAAA,EAAAA,IAAiBrhE,EAASmhE,GACtCG,EAA6B,YAATxjE,GAAuBsjE,OAC7CrkE,EAD0DiD,EAAQwG,KAAOs4B,EAASyiC,OAASJ,GAGxFK,EAAOC,IAAYnmC,EAAAA,EAAAA,IAAS4lC,GAE7BQ,EAA4B,UAAT5jE,GAA8B,YAATA,IAAuBsjE,GAC/D,MACJz1C,EADI,OACGylB,EADH,KACWwvB,EADX,MACiB9rB,GACnB6rB,GAEElN,EAAYlyD,QAAQsf,KAAiB8gD,EAAAA,EAAAA,IAAmBH,EAAO71C,EAAOylB,EAAQwvB,EAAM9rB,GACpF1B,GAAeC,EAAAA,GAAAA,GAASogB,GACxBmO,GAAmBjL,EAAAA,GAAAA,GAAYvjB,GAC/ByuB,EAAazuB,GAAgBwuB,EAE7BE,EAAaruD,IAAQ4P,EAAAA,EAAAA,IAAS5P,EAAK7V,IACnCmkE,EAActuD,GAAQquD,EAAcruD,OAAkB1W,EACtDilE,EAAcvuD,IAASquD,EAAcruD,OAAkB1W,EAEvD+mD,GAAQC,EAAAA,EAAAA,IAAa/jD,GAErBiiE,GAAmB1jC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAATzgC,IAAuB0jE,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAF,eAAOD,GAAmBV,EAChC,OAAOU,EFtEJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAe15D,KAAKk7D,IAAID,GAAOj7D,KAAKy1D,GAAK,MAAS,GAAKiE,EEoErCyB,CAAkBF,EAAKvB,KAC9C,CAAC9iE,EAAM0jE,EAAOZ,IAOX0B,GAAkB/iC,EAAAA,EAAAA,KAAak9B,IACnC,GAAa,YAAT3+D,EAAoB,OACxB,MACM4+D,EAAgBrrB,GAAanqC,KAAKy1D,GAClC9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAYhqB,kBAEtB8vB,EAAWviE,EAAQwG,KAAOs4B,EAASyiC,QAAS96D,EAAAA,EAAAA,GAAcC,GAC1Do2D,GAAoB,EAAIyF,EAAWzjC,EAASyiC,QAAU7E,EACtDx7D,GAAOshE,EAAAA,EAAAA,IAAqB/iE,EAAiB,IAAX8iE,GAEnC1H,GAAUgC,GAUbA,EAAQE,YAAc77D,EACtB25D,EAAMpoB,kBAAmB0b,aAAa,oBAAsB,IAAG2O,MAV/DL,EAAY1pB,UAAa,8CACY7xC,8LAGXw7D,KAAiBA,uCACfI,qCAO7B,CAACh/D,EAAMkC,EAAQwG,KAAMs4B,EAAUp4B,EAAkBjH,IAuIpD,OArIAsxC,EAAAA,EAAAA,KAAgB,KACV+qB,EAAal+C,SACf0kD,EAAgBxG,EAAal+C,WAE9B,CAAC0kD,KAEJvxB,EAAAA,EAAAA,KAAgB,KACd,GAAI2wB,EAAkB,OACtB,MAAMzK,EAAY5xB,EAAIznB,QAASqtC,QAAwB,oBACnD4W,GACFzM,GAAoByM,EAAY/d,EAAO0H,EAAgB8J,EAAYj4B,GAAO4T,MAAMimB,IAC9ED,EAAUxrB,MAAM0rB,YAAY,gBAAiBD,GAC7CD,EAAU/2B,UAAU+L,IAAI,sBACxBgrB,EAAU9I,aAAaiJ,EAAAA,GAA2B,SAGrD,CAACtT,EAAO0H,EAAgB8J,EAAYj4B,EAAOwkC,EAAYH,KAE1D5nC,EAAAA,EAAAA,KAAU,KAEJ5yB,KAAK8gD,IAAIkZ,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkBx5D,KAAK8gD,IAAIkZ,EAAIuB,KAAOjB,EAAMiB,MAAQ/B,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,KACR,CAACA,EAAKM,KAETkB,EAAAA,GAAAA,IAAW,KACT3B,MACEK,OAA6CrkE,EAAP,KAAzBukE,GAAoB,KAErCqB,EAAAA,GAAAA,IAAY,KACV,MAAMlG,EAAcX,EAAal+C,QAE7B6+C,GACF6F,EAAgB7F,KAEjB6E,EAAmB,SAAOvkE,GA4F3B,0BACEsoC,IAAKA,EACLxK,UAAU,mCACVuB,QAxKgB,KAAM,MACxB,MAAM9wB,EF9EH,SAAuB62D,EAAaM,EAAc7B,GACvD,MAAQ,qCAAoBuB,KAAOM,MAASN,KAAOM,KAAQ7B,KE6E7CgC,CAAcpB,EAAMW,IAAKX,EAAMiB,KAAM7B,GACjD,UAAAz9D,OAAO0/D,KAAKv3D,EAAK,iBAAjB,SAA4BwkC,UAwK1B,0BAAKjV,UAAU,eAlEZgnC,EAEH,0BACEhnC,UAAU,iBACVmZ,IAAK6tB,EACL5tB,IAAI,oBACJtoB,MAAOg1C,GAAmBh1C,MAC1BylB,OAAQuvB,GAAmBvvB,SAPP,mBAAC,GAAD,CAAUzlB,MAAOA,EAAOylB,OAAQA,IA4C1D,WACE,GAAKywB,EAEL,OACE,sCACGtgE,QAAQ0gE,KAAsBb,GAC7B,0BACEvmC,UAAU,oBACV4Q,MAAQ,UAA4B,EAAnBw2B,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMa,GAAezjC,EAAAA,GAAAA,GACnB,MACAvhC,EACAsjE,GAAa,WAEf,GAAa,YAATtjE,EACF,OACE,0BAAK+8B,UAAWioC,EAAcC,wBAAyBlC,IACrD,mBAACvlB,GAAA,EAAD,CAAQn5C,KAAM6/D,EAAYttD,KAAMqtD,EAAYlnC,UAAU,yBAChC99B,IAArB+hC,EAASkkC,SACR,0BAAKnoC,UAAU,YAAY4Q,MAAQ,gBAAe3M,EAASkkC,gBAMnE,GAAa,UAATllE,EAAkB,CACpB,MAAM2+B,EFnML,SAAuB3+B,GAC5B,OAAKA,EACE2hE,GAAaptD,IAAIvU,IACnB2hE,GAAaptD,IAAIvU,EAAK+T,MAAM,KAAK,KACjCyuD,IAGiB2C,EAHYnlE,EAI3BmlE,EAAIpxD,MAAM,IAAIvR,QAAO,CAAC4iE,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrB9C,GAAcr+D,SAHtC,UAMpB,IAAwBghE,EE4LJI,CAAcvkC,EAASwkC,WAC/BpiC,EF3ML,SAAyBpjC,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,GE0MDylE,CAAgBzkC,EAASwkC,WACtC,OACE,0BAAKzoC,UAAWioC,EAAcC,wBAAyBlC,GAASp1B,MAAQ,gBAAehP,KACrF,0BAAKuX,IAAK9S,EAAMrG,UAAU,aAAaoZ,IAAI,MAKjD,OACE,0BAAKpZ,UAAWioC,EAAc9uB,IAAKwvB,GAAQvvB,IAAI,KAe5CwvB,IAaAC,IAjGP,WACE,GAAKhC,EACL,MAAa,UAAT5jE,EAEA,0BAAK+8B,UAAU,iBACb,0BAAKA,UAAU,uBACZiE,EAASnlB,OAEZ,0BAAKkhB,UAAU,0BACZiE,EAAS6kC,UAKL,YAAT7lE,EAEA,0BAAK+8B,UAAU,iBACb,0BAAKA,UAAU,uBAAuBp7B,EAAK,uBAC3C,0BAAKo7B,UAAU,2BACZ+oC,EAAAA,EAAAA,IAAkBnkE,EAAM0hE,EAAYnhE,EAAQwyD,YAE7C4O,GAAa,0BAAKvmC,UAAU,gBAAgBwK,IAAKy2B,UAPzD,EAqFG+H,OC9PQ,SAASC,GAAkBC,GAiDxC,OAAOxpC,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACV,CAACtgC,EAAQunE,KACP,MAAM,QAAEhkE,GAAYgkE,EACpB,MAAO,CACLxY,gBAAgB1e,EAAAA,EAAAA,IAAqBrwC,GACrC64D,YAAY2O,EAAAA,EAAAA,IAAwBxnE,EAAQuD,EAAQpC,OAL9Cm/B,EAhDmDwI,IAC7D,MAAM,eACJimB,EADI,WAEJ8J,EAFI,QAGJt1D,EAHI,WAIJylD,GACElgB,GACE,uBAAE5/B,IAA2B0W,EAAAA,EAAAA,MAE7B6nD,GAAsB3kC,EAAAA,EAAAA,KAAav1B,IACvCA,EAAE21B,kBACFh6B,EAAuB,CAAE3E,UAAWhB,EAAQpC,GAAI8H,UAAWsE,MAAAA,OAAF,EAAEA,EAAGs6B,aAC7D,CAAC3+B,EAAwB3F,IAEtBmkE,GAAW5lC,EAAAA,EAAAA,KAAQ,KACvB,MAAQknB,WAAY2e,EAAd,QAAoBhoC,GAAYmJ,EACtC,MAAO,IACFA,EACHimB,eAAAA,EACA8J,WAAAA,EACA7P,WAAY,IACP2e,EACH54C,EAAG,EACHc,EAAG,GAEL8P,QAASovB,OAAiBzuD,EAAYq/B,KAEvC,CAACmJ,EAAOimB,EAAgB8J,IAE3B,OACE,0BACEz6B,WAAWwE,EAAAA,GAAAA,GAAe,4BAA6Bi2B,GAAc,eACrE7pB,MAAOga,EAAc,SAAQA,EAAWj6B,aAAai6B,EAAWn5B,OAAS,GACzE8P,QAASovB,EAAiB0Y,OAAsBnnE,GAE/CyuD,GACC,0BAAK3wB,UAAU,0BACZy6B,GACC,wBAAGz6B,UAAU,iBAKnB,mBAACkpC,EAAqBI,QChD9B,MAAME,GAAkBP,GAAkBQ,IACpCC,GAAkBT,GAAkBU,IA2G1C,IAAeznC,EAAAA,EAAAA,KACb,CAACtgC,EAAD,KAAmC,IAA1B,MAAEo6C,GAAwB,EACjC,MAAM,OAAEn6C,GAAWm6C,EAAM8L,YACnBtlB,GAAQC,EAAAA,EAAAA,IAAY7gC,GACpBgoE,GAAoBC,EAAAA,EAAAA,IAAwBjoE,EAAQC,GAC1D,MAAO,CACL2gC,MAAAA,EACAsnC,YAAaloE,EAAO+S,YAAYC,iBAChCg1D,kBAAAA,KARN,EAxFyC,IAYnC,IAZoC,MACxC5tB,EADwC,oBAExCkY,EAFwC,kBAGxC6V,EAHwC,aAIxC/jD,EAJwC,MAKxCijC,EALwC,YAMxC4H,EANwC,YAOxCmZ,EAPwC,aAQxCtG,EARwC,YASxCoG,EATwC,kBAUxCF,EAVwC,MAWxCpnC,GACI,EACJ,MAAM,qBAAEynC,IAAyBzoD,EAAAA,EAAAA,MAE3B0oD,EAAaluB,EAAMz4C,SAAS6D,OAE5B+iE,GAAqBzlC,EAAAA,EAAAA,KAAav/B,IACtC8kE,EAAqB,CAAEpoE,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACjE,CAACknE,KAyDIn5C,MAAOs5C,EAAgB7zB,OAAQ8zB,GAAoBL,EAAYza,eAEvE,OACE,0BACEvvB,UAAU,QACV4Q,MAAQ,UAASw5B,gBAA6BC,QAE7CruB,EAAMz4C,SAAS0B,KA9DpB,SAA4BE,EAAqBwO,GAC/C,MAAM,MAAEukB,EAAF,MAASO,IAAUE,EAAAA,EAAAA,IAAkBxzB,GACrCmlE,EAAaR,EAAY3kE,EAAQsS,iBAAmBtS,EAAQpC,IAC5D83D,EAAiByP,MAAAA,OAAH,EAAGA,EAAY/1D,UAC7B,WAAEq2C,EAAF,MAAcC,GAAUmf,EAAYtf,OAAO/2C,GAG3CinD,GAAc2P,EAAAA,EAAAA,KAAuB/hE,EAAAA,EAAAA,MAAarD,GAClDk4D,GAAcmN,EAAAA,EAAAA,KAAuBhiE,EAAAA,EAAAA,MAAarD,GAExD,GAAI+yB,EAAO,CACT,MAAM6iC,EAAuBgP,IAE1B9gB,EAAQt1C,IAAUu2D,EAAa,EAAIxjE,QxB7DpC,EwB6D4CmkD,GxB9D1C,EwB8DwEA,IAG5E,OACE,mBAAC2e,GAAD,CACEzmE,GAAK,gBAAckyD,EAAAA,EAAAA,IAAiB9vD,EAAQpC,MAC5CoC,QAASA,EACT+uD,oBAAqBA,EACrB0G,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChBjQ,WAAYA,EACZiG,YAAaA,EACbtvB,QAASmiC,EACTzI,eAAgBkP,EAChBnP,cAAe4O,EAAkBjgE,SAASxE,EAAQpC,IAClDy/B,MAAOA,IAGN,GAAI/J,EACT,OACE,mBAACixC,GAAD,CACE3mE,GAAK,gBAAckyD,EAAAA,EAAAA,IAAiB9vD,EAAQpC,MAC5CoC,QAASA,EACT+uD,oBAAqBA,EACrB0G,YAAaA,EACbyC,YAAaA,EACbxC,eAAgBA,EAChB70C,aAAcA,EACd4kC,WAAYA,EACZiG,YAAaA,EACbtvB,QAASmiC,EACTzI,eAAgBkP,EAChBnP,cAAe4O,EAAkBjgE,SAASxE,EAAQpC,IAClDy/B,MAAOA,W,mNCvEjB,IAAIioC,GAEJ,MA6MA,GA7MiC,IAM3B,IAN4B,QAChCtlE,EADgC,oBAEhC+uD,EAFgC,YAGhC0G,EAHgC,aAIhC50C,EAJgC,cAKhCg1C,GACI,EAEJ,MAAMxwB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7BqiC,GAAqBriC,EAAAA,EAAAA,IAAuB,MAE5Cq0B,GAAYr0B,EAAAA,EAAAA,IAAyB,MAErC5P,EAAQtzB,EAAQ2G,QAAQ2sB,MAExB08B,GAAiBC,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,IAEvCiH,EAAeC,IAAoB36B,EAAAA,EAAAA,IAASm6B,GAC7CjC,EAAajyD,QAAQy0D,GAAiBhG,GAAkBnvC,IACxD,UAAE83B,EAAF,aAAaud,IAAiBC,EAAAA,GAAAA,IAClC7iB,EAAAA,EAAAA,IAAoBtzC,EAAS,WAC5BwzD,GACDI,EAAAA,EAAAA,IAAsB5zD,EAAS,UAC/B6gB,IAGMq1C,aAAcG,IAAqBF,EAAAA,GAAAA,IACzC7iB,EAAAA,EAAAA,IAAoBtzC,EAAS,aAC5B61D,EACD1pC,EAAAA,GAAAA,QACAtL,GAEIu1C,EAAWzB,GAAwB30D,EAAS24C,IAE5C,WAAE8f,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,KACpCpC,EAAkBP,IAAkByC,GAAe5C,EACnDa,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BrxB,GAAuBsvB,EAAAA,GAAAA,GAAmBtb,IAE9ClU,aAAc+gC,EACd7gC,qBAAsBkyB,IACpBjyB,EAAAA,GAAAA,GAAkB2xB,IAAmBkC,OAAY17D,EAAW25D,IAEzDxE,EAAauT,IAAkBnqC,EAAAA,EAAAA,KAAkB,IACjDlsB,EAAUs2D,IAAepqC,EAAAA,EAAAA,IAAiB,IAEjDxB,EAAAA,EAAAA,KAAU,KACR,IAAKo4B,EACH,OAGF,MAAMyT,EAAYC,GAAAA,GAA4B,EAExClJ,EAA0C,GAAzBiJ,EADL,GACkCz+D,KAAKy1D,GACnDG,EAAmBJ,EAAgBttD,EAAWstD,EAE9CmJ,EAAWtO,EAAU35C,QACrBkoD,EAAoBP,EAAmB3nD,QACvCi9C,EAAQiL,EAAkBrzB,kBAE3BooB,EAUFA,EAAMpoB,kBAAiC0b,aAAa,oBAAqB2O,EAAiB96D,YAT3F8jE,EAAkB/yB,UAAa,yBACf6yB,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnBjJ,KAAiBA,sCAChBA,mCAO7BgJ,EAAYG,EAAS5M,YAAc4M,EAAS3M,YAC3C,CAAChH,EAAa9iD,IAEjB,MAAM0hD,EAAavvD,QAAQo3C,GAAaqX,GAElC+V,GAAcxmC,EAAAA,EAAAA,KAAY,KACzBg4B,EAAU35C,UAIf6nD,GAAe,GACfC,EAAY,IACZrR,EAAAA,GAAAA,GAASkD,EAAU35C,UAEnBm6C,EAAAA,EAAAA,KAAQ,KACNwN,EAAmB3nD,QAASm1B,UAAY,SAEzC,IAEGizB,GAAiBzmC,EAAAA,EAAAA,KAAY,KAAM,MAC3B,QAAZ,EAAA+lC,UAAA,WACAA,GAAeS,IACd,CAACA,KAEJjsC,EAAAA,EAAAA,KAAU,KACHy9B,EAAU35C,UAIXkzC,GACFuD,EAAAA,GAAAA,GAASkD,EAAU35C,SAEnB25C,EAAU35C,QAAQzG,WAEnB,CAAC25C,IAEJwG,GAAkBC,EAAWzG,IAC7BqI,EAAAA,GAAAA,GAAgB5B,EAAW,CAAC5e,IAE5B,MAAMiB,GAAcra,EAAAA,EAAAA,KAAY,KAC9B,IAAKoZ,EAGH,YAFAsd,GAAkBe,IAAeA,IAKnC,GAAInB,EAEF,YADAx5C,EAAAA,EAAAA,MAAa+8C,2BAA2B,CAAEp5D,QAAAA,IAI5C,MAAM6lE,EAAWtO,EAAU35C,QACvBs0C,EACE2T,EAASnO,SACXrD,EAAAA,GAAAA,GAASwR,IACTI,EAAAA,GAAAA,OAEAJ,EAAS1uD,SAGX6uD,IAEAH,EAAS1uD,QACT0uD,EAAS5M,YAAc,GACvB5E,EAAAA,GAAAA,GAASwR,IACTI,EAAAA,GAAAA,MAEAR,GAAe,MAEhB,CAACO,EAAgB9T,EAAa2D,EAAeld,EAAW34C,IAErDg5D,GAAmBz5B,EAAAA,EAAAA,KAAav1B,IACpC,MAAM67D,EAAW77D,EAAE6jD,cAEnB6X,EAAYG,EAAS5M,YAAc4M,EAAS3M,YAC3C,IAEGgN,GAAiB7mC,EAAAA,GAAAA,GAAe,aAAcsF,GAEpD,OACE,0BACEU,IAAKA,EACLxK,UAAU,yBACVuB,QAASwd,GAET,0BAAK/e,UAAU,qBACb,6BACEwK,IAAK+wB,EACLv7B,UAAU,YACV4Q,MAAQ,UAASm6B,GAAAA,iBAAwCA,GAAAA,UAG5DjtB,GACC,0BAAK9d,UAAU,iBAEb,+BACEwK,IAAKkyB,EACL18B,UAAWqrC,EACXv6C,MAAOi6C,GAAAA,GACPx0B,OAAQw0B,GAAAA,GACRtR,UAAQ,EACRG,OAAQvC,EACRsC,MAAOtC,EACPqC,aAAW,EACX3C,QAASM,EAAc6T,OAAchpE,GAEjC27D,EAXN,CAYEW,aAAcnH,EAAc8G,OAAmBj8D,IAE/C,6BAAQi3C,IAAK2E,MAInB,0BAAK9d,UAAU,WAAWwK,IAAKkgC,IAC9BC,GACC,0BAAK3qC,UAAY,iBAAgBg8B,KAC/B,mBAACQ,GAAA,EAAD,CAAiBjoD,SAAUymD,EAAgBQ,EAAmBH,MAGhEvd,IAAcqd,GACd,wBAAGn7B,UAAU,kBAEf,0BAAKA,UAAU,0BACZq3B,GAAcqH,EAAAA,EAAAA,IAAoBhC,EAAU35C,QAASq7C,cAAeM,EAAAA,EAAAA,IAAoBjmC,EAAM4lC,YAC5FhH,GAAeqF,EAAU35C,QAAS85C,SAAW,wBAAG78B,UAAU,kBCtMrE,GA1BoC,IAA0B,IAAzB,QAAE76B,EAAF,QAAWo8B,GAAc,EAC5D,MAAM38B,GAAO48B,EAAAA,GAAAA,KAEb,OACE,0BAAKxB,UAAU,iBACZ76B,EAAQmjD,cAAerjD,KAAKsoD,GAC3B,0BAAKvtB,UAAU,OACZutB,EAAItoD,KAAKgkB,GACR,mBAAC8Y,GAAA,EAAD,CACEC,KAAK,OACLsC,QAAM,EACN8Q,SAA0B,kBAAhBnsB,EAAOhmB,KAEjBs+B,QAAS,IAAMA,EAAQ,CAAEtY,OAAAA,MAExBo2B,EAAAA,GAAAA,GAAWz6C,EAAKqkB,EAAO5iB,OACP,QAAhB4iB,EAAOhmB,MAAkB,wBAAG+8B,UAAU,cACtB,QAAhB/W,EAAOhmB,OAAmBgmB,EAAOzS,MAAO0S,MAAMC,EAAAA,KAAgB,wBAAG6W,UAAU,6BC0D1F,IAAeN,EAAAA,EAAAA,KArEqB,IAG9B,IAH+B,WACnCj4B,EADmC,SAEnC2tC,GACI,EACJ,MAAM,SAAEtxC,IAAa0d,EAAAA,EAAAA,MAEf5c,GAAO48B,EAAAA,GAAAA,MACP,SACJ1/B,EADI,OACMD,EADN,cACc23B,EADd,cAC6B7xB,EAD7B,uBAC4C0R,EAD5C,iBACoEiyD,GACtE7jE,EAEEs3C,GAAcra,EAAAA,EAAAA,KAAY,KAC9B5gC,EAAS,CAAEf,GAAIlB,EAAQC,SAAAA,MACtB,CAACgC,EAAUjC,EAAQC,IAEhBypE,GAAiB7nC,EAAAA,EAAAA,KAAQ,KAC7B,GAAK4nC,MAAAA,IAAAA,EAAkBlkE,OACrB,OAIF,MAAQgL,OAASK,KAAMqtC,GAAa1yC,OAASqF,KAAM2vB,KAAgB55B,EAAAA,EAAAA,MAEnE,OAAO8iE,EAAiBrmE,KAAKumE,IACpBhjD,EAAAA,EAAAA,IAASgjD,GAAU1rB,EAAU0rB,GAAUppC,EAAUopC,KACvDtmE,OAAOwB,WACT,CAAC4kE,IAEJ,QAAsBppE,IAAlBs3B,EACF,OAoBF,MAAMiyC,EAAY/kE,QAAQ2S,GAA0B1R,GAAiB0R,EAAyB1R,GAE9F,OACE,0BACE,YAAUs4B,EAAAA,GAAAA,IAAqBzG,GAC/BwG,WAAWwE,EAAAA,GAAAA,GAAe,gBAAiBinC,GAAa,aAAcr2B,GAAY,YAClF3T,IAAK78B,EAAK88B,MAAQ,MAAQ,MAC1BH,QAASwd,GAET,wBAAG/e,UAAU,4BACVurC,GAA4C,IAA1BA,EAAenkE,SAAiB,wBAAG44B,UAAU,kBAzBlEurC,GAAkBA,EAAenkE,OAAS,GACxC,0BAAK44B,UAAU,kBAAkByB,IAAK78B,EAAK88B,MAAQ,MAAQ,OACxD6pC,EAAetmE,KAAK4U,GACnB,mBAAC4mC,GAAA,EAAD,CACE/iB,IAAK7jB,EAAK9W,GACVi/B,KAAK,QACLnoB,MAAM2O,EAAAA,EAAAA,IAAS3O,EAAK9W,IAAM8W,OAAkB3X,EAC5CoF,MAAOkhB,EAAAA,EAAAA,IAAS3O,EAAK9W,SAAwBb,EAAlB2X,OAoBnC,0BAAKmmB,UAAU,QAAQyB,IAAI,QACxBjI,EAAgB50B,EAAK,WAAY40B,EAAe,KAAO50B,EAAK,kBAE/D,wBAAGo7B,UAAU,kBCTnB,IAAeN,EAAAA,EAAAA,KApDV,IAKC,IALA,SACJrN,EADI,QAEJltB,EAFI,eAGJswD,EAHI,mBAIJjkC,GACI,EACJ,MAAM,aAAEgB,IAAiBhR,EAAAA,EAAAA,OAEnB,gBAAE4R,GAAoBjuB,EAAQytB,UAE9B84C,GAAiBhoC,EAAAA,EAAAA,KAAQ,KAC7B,IAAKtQ,GAAmBf,EAASnZ,MAlBR,EAmBvB,OAIF,MAAM4mC,GAAYt3C,EAAAA,EAAAA,MAAY4J,MAAMK,KAEpC,OAAO2gB,EACJluB,QAAQymE,GAAmBA,EAAet5C,WAAaA,EAASA,WAChEptB,KAAK0mE,GAAmB7rB,EAAU6rB,EAAez9D,UACjDhJ,OAAOwB,WACT,CAAC2rB,EAAUe,IAER2rB,GAAcra,EAAAA,EAAAA,KAAY,KAC9BlS,EAAa,CACXH,SAAUA,EAASS,cAAW5wB,EAAYmwB,EAASA,SACnDxwB,OAAQsD,EAAQtD,OAChBsE,UAAWhB,EAAQpC,OAEpB,CAACoC,EAASktB,EAAUG,IAEvB,OACE,mBAACuP,GAAA,EAAD,CACE/B,WAAWwE,EAAAA,GAAAA,GAAenS,EAASS,UAAY,UAC/CkP,KAAK,OACLT,QAASwd,GAET,mBAAC,GAAD,CACE0W,eAAgBA,EAChBpjC,SAAUA,EAASA,SACnBb,mBAAoBA,IAErBk6C,MAAAA,GAAAA,EAAgBtkE,OACf,0BAAK44B,UAAU,WACZ0rC,EAAezmE,KAAK4U,GAAS,mBAAC4mC,GAAA,EAAD,CAAQ5mC,KAAMA,EAAMmoB,KAAK,cAEvD/B,EAAAA,GAAAA,IAAqB5N,EAASnZ,WC/BxC,IAAewmB,EAAAA,EAAAA,KAvBiB,IAM1B,IAN2B,QAC/Bv6B,EAD+B,UAE/BymE,EAF+B,eAG/BnW,EAH+B,mBAI/BjkC,EAJ+B,aAK/Bq6C,GACI,EACJ,OACE,0BAAK7rC,WAAWwE,EAAAA,GAAAA,GAAe,YAAaonC,GAAa,eACtDzmE,EAAQytB,UAAW9kB,QAAQ7I,KAAKotB,GAC/B,mBAAC,GAAD,CACEqL,IAAKrL,EAASA,SACdA,SAAUA,EACVltB,QAASA,EACTswD,eAAgBA,EAChBjkC,mBAAoBA,MAGvBq6C,M,0BCzBP,MAwEA,IAAensC,EAAAA,EAAAA,KAxD0B,IAUnC,IAVoC,aACxCosC,EADwC,YAExCp6C,EAFwC,MAGxCu3B,EAHwC,QAIxC8iB,EAJwC,KAKxC/pC,EAAO,SALiC,oBAMxCkyB,EANwC,UAOxC/tD,EAPwC,OAQxCtE,EARwC,wBASxCmwB,GACI,EACJ,MAAM,QACJg6C,EADI,IAEJxhC,EAFI,MAGJoG,EAHI,MAIJ9f,EAJI,YAKJiuB,EALI,oBAMJuX,IACE2V,EAAAA,GAAAA,GAAiBjqC,EAAMngC,EAAQsE,EAAW4lE,EAAS/5C,EAAyBi3B,EAAOv3B,GACjF3uB,EAAM,eAAc+oE,IAEpB3W,GAAiBC,EAAAA,GAAAA,IAAkB5qB,EAAK0pB,IAEvCgY,EAA2BC,IAAgC1rC,EAAAA,EAAAA,MASlE,OARAxB,EAAAA,EAAAA,KAAU,KACJ6sC,IACFM,EAAAA,GAAAA,GAAiBN,GAAsD11B,MAAMlmC,IAC3Ei8D,EAA6Bj8D,QAGhC,CAAC47D,IAGF,0BACEthC,IAAKA,EACLxK,UAAU,4BACV4Q,MAAOA,EACPrP,QAASwd,GAERmtB,GACC,mBAACxV,GAAA,EAAD,CACEh5B,IAAK36B,EACLA,GAAIA,EACJ4zD,cAAeuV,EACflqC,KAAMlR,EACNu7C,QA7DM,EA8DNzV,KAAMzB,GAAkB6W,EACxBjjC,uBAAqB,EACrB8tB,QAAM,EACNC,OAAQR,QCmIZgW,GAAe,CAAErG,OAAQ,kvBAEzBsG,GAAmB,CAAEtG,OAAQ,qvBAkvBnC,IAAevmC,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAQunE,KACP,MAAM,eACJrV,EADI,gBACYrwD,EADZ,aAC6BuiB,EAD7B,iBAC2Cna,GAC7CjK,GACE,QACJuD,EADI,MACK62C,EADL,eACYwwB,EADZ,WAC4BC,EAD5B,SACwC3qE,EADxC,gBACkDgH,EADlD,sBACmE4jE,GACrEvD,GACE,GACJpmE,EADI,OACAlB,EADA,SACQ8qE,EADR,cACkBC,EADlB,iBACiC92D,EADjC,WACmD7J,EADnD,WAC+DxE,GACjEtC,EAEEmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BswC,GAAiBC,EAAAA,EAAAA,IAAqBxwC,EAAQC,GAC9CgrE,GAAgBC,EAAAA,EAAAA,IAAqBjrE,GACrC4vC,EAAYnqC,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,GAClCylE,EAAezlE,MAAAA,OAAH,EAAGA,EAAMqa,SAErBqrD,GAAmB76B,IAAkB86B,EAAAA,EAAAA,IAAsB9nE,GAC3D+nE,EAAgBV,GAAkBC,GAAcO,EAChDrnE,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BgoE,GAAe/pB,EAAAA,EAAAA,IAAsBxhD,EAAQuD,GAC7CioE,EAAYT,GAAW3xD,EAAAA,EAAAA,IAAWpZ,EAAQ+qE,QAAYzqE,EAEtDmrE,EAAqBvrE,GAAWkT,EAAAA,EAAAA,IAAyBpT,EAAQC,EAAQC,QAAYI,EACrForE,EAAcnoE,EAAQpC,KAAOsqE,EAE7BE,EAAkBz3D,IAAqBu3D,EACvC13D,EAAeG,IAAqBy3D,GACtC33D,EAAAA,EAAAA,IAAkBhU,EAAQirE,GAAiBD,EAAgBA,EAAgB/qE,EAAQiU,QACnF5T,EACEsrE,EAAqB73D,IAAgB/P,EAAAA,EAAAA,IAAahE,EAAQ+T,GAE1DklD,GAAiB4S,EAAAA,EAAAA,IAAqB7rE,EAAQuD,GAC9C6qD,EAAgC,WAApBlnD,IAChBkzC,EACIA,EAAMz4C,SAASsvB,MAAMvY,IAAMu5C,EAAAA,EAAAA,IAAuBjyD,EAAQ0Y,MAC1Du5C,EAAAA,EAAAA,IAAuBjyD,EAAQuD,KAInCyE,UAAWqmD,EAAgBxnD,YAAaynD,EADpC,oBACsDhnD,GACvD8mD,GAAa8D,GAAmB,GAE/B4Z,EAAejqE,EAAgBkB,YAAclB,EAAgBkB,WAAWgF,SAAS5G,IAE/ET,MAAOqrE,IAAc3sD,EAAAA,EAAAA,IAAwBpf,IAAW,GAE1DgsE,GAAcC,EAAAA,EAAAA,IAAsB1oE,GAC1C,IAAIs1D,EAGFA,EADEze,MAAAA,GAAAA,EAAOz4C,SACIy4C,EAAMz4C,SAASqxB,OAAM,QAAG7xB,GAAIoD,GAAP,SAAuBijE,EAAAA,EAAAA,IAAwBxnE,EAAQuE,OAE5EijE,EAAAA,EAAAA,IAAwBxnE,EAAQmB,GAG/C,MAAM,SAAE6tD,GAAkC,WAApB9nD,IAAgC1D,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,IAAc,GAC3Gk5D,GAAgB8S,EAAAA,EAAAA,IAAoBlsE,EAAQuD,GAC5C4oE,EAAmBtmE,GACrBC,EAAAA,EAAAA,IAAiB9F,EAAQ6F,EAAW5F,OAAQ4F,EAAW3F,WAAa2F,OACpEvF,EAEEuwB,EAAoB/rB,QAAQvB,EAAQ4D,aAAe5D,EAAQutB,UAC3DC,EAA8BF,GAChCzoB,EAAAA,EAAAA,IAA0BpI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACEk1D,EAAkB3kC,EACtBi6C,GAAwB92D,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQ8wB,QAAgCzwB,EACxFiD,EAEE2mE,EAAe8B,GAAc/yC,EAAAA,EAAAA,IAAyBj5B,EAAQgsE,QAAe1rE,EAEnF,MAAO,CACLsgC,OAAOC,EAAAA,EAAAA,IAAY7gC,GACnBmrE,aAAAA,EACAC,gBAAAA,EACArnE,OAAAA,EACAunE,cAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAG,gBAAAA,EACAD,YAAAA,EACA33D,aAAAA,EACA63D,mBAAAA,EACA/6C,kBAAAA,EACAo+B,aAAamd,EAAAA,EAAAA,IAAyBpsE,EAAQuD,GAC9C6qD,UAAAA,EACA0d,aAAAA,EACAtW,gBAAAA,EACAjlB,eAAAA,EACA06B,cAAAA,EACAp7B,UAAAA,EACAmf,SAAAA,EACA5qC,aAAAA,EACAna,iBAAAA,EACA8hE,UAAAA,EACAM,cAAevnE,QAAQknE,GACvBM,cAAeN,GAAcO,EAAAA,EAAAA,IAAoBvsE,EAAQgsE,QAAe1rE,EACxEksE,oBAAqBR,IAAeplD,EAAAA,EAAAA,IAAS3mB,IAAUwsE,EAAAA,EAAAA,IAA0BzsE,EAAQgsE,QAAe1rE,EACxGosE,qBAAsBV,GAAcW,EAAAA,EAAAA,IAAyB3sE,EAAQgsE,QAAe1rE,EACpF4pE,aAAAA,EACAp6C,YAAao6C,IAAgBtjD,EAAAA,EAAAA,IAAS3mB,IAAUi5B,EAAAA,EAAAA,IAA+BgxC,QAAgB5pE,EAC/FyuD,gBAAgB1e,EAAAA,EAAAA,IAAqBrwC,GACrC64D,WAAAA,EACA+T,gBACE9nE,QAAQvB,EAAQ4D,aACZ5D,EAAQutB,YACT+7C,EAAAA,EAAAA,IAA8B7sE,EAAQC,EAAQsD,EAAQ4D,WAE3DjH,SAAAA,EACAk5D,cAAAA,EACA0T,aAAkC,WAApB5lE,EACd6lE,kBAAkBpE,EAAAA,EAAAA,IAAuB3oE,EAAQuD,GACjDypE,kBAAkBpE,EAAAA,EAAAA,IAAuB5oE,EAAQuD,GACjD0pE,sBAAuBjtE,EAAOkiB,SAASkP,MAAM67C,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyBntE,GAC7C6F,WAAYsmE,EACZv8C,mBAAoB5vB,EAAO4vB,mBAC3BgC,iBAAiBjB,EAAAA,EAAAA,IAAeptB,QAAWjD,GAAYowB,EAAAA,EAAAA,IAAsB1wB,EAAQC,GACrF4zD,eAAgB2B,GAAmBx1D,EAAOsxB,gBAAgBkkC,EAAgBr0D,IAC1EivB,wBAAyBpwB,EAAOowB,2BAC5B/lB,GAAc,CAAE+qD,gBAAgBgY,EAAAA,EAAAA,IAAqBptE,EAAQuD,EAA6B,cAApB2D,OAC5C,iBAAnB+xD,GAA+B,CAAEA,eAAAA,MACxC7K,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,EAAkBhnD,oBAAAA,MA5HvCg5B,EA9uBuB,IAkErC,IAlEsC,QAC1C/8B,EAD0C,aAE1C4nE,EAF0C,6BAG1CkC,EAH0C,4BAI1CC,EAJ0C,uCAK1CC,EAL0C,MAM1CnzB,EAN0C,UAO1CgN,EAP0C,WAQ1CyjB,EAR0C,eAS1CD,EAT0C,mBAU1C4C,EAV0C,WAW1CC,EAX0C,gBAY1Cjb,EAZ0C,eAa1Ckb,EAb0C,cAc1CC,EAd0C,uBAe1CC,EAf0C,sBAgB1C9C,EAhB0C,aAiB1CrY,EAjB0C,MAkB1C7xB,EAlB0C,gBAmB1CwqC,EAnB0C,OAoB1CrnE,EApB0C,cAqB1CunE,EArB0C,aAsB1CC,EAtB0C,UAuB1CC,EAvB0C,YAwB1CE,EAxB0C,gBAyB1CC,EAzB0C,aA0B1C53D,EA1B0C,mBA2B1C63D,EA3B0C,eA4B1CxW,EA5B0C,eA6B1C6D,EA7B0C,kBA8B1CpoC,EA9B0C,YA+B1Co+B,EA/B0C,UAgC1Cb,EAhC0C,eAiC1CC,EAjC0C,iBAkC1CC,EAlC0C,oBAmC1ChnD,EAnC0C,aAoC1CwkE,EApC0C,eAqC1Cv7B,EArC0C,cAsC1C06B,EAtC0C,UAuC1Cp7B,EAvC0C,SAwC1Cmf,EAxC0C,aAyC1C5qC,EAzC0C,iBA0C1Cna,EA1C0C,UA2C1C8hE,EA3C0C,cA4C1CO,EA5C0C,aA6C1CpC,EA7C0C,YA8C1Cp6C,EA9C0C,oBA+C1C08C,GA/C0C,qBAgD1CE,GAhD0C,eAiD1C3d,GAjD0C,WAkD1C8J,GAlD0C,gBAmD1C+T,GAnD0C,SAoD1C1sE,GApD0C,gBAqD1Cs1D,GArD0C,mBAsD1C5lC,GAtD0C,gBAuD1CgC,GAvD0C,eAwD1CiiC,GAxD0C,wBAyD1CzjC,GAzD0C,gBA0D1ClpB,GA1D0C,aA2D1C4lE,GA3D0C,cA4D1C1T,GA5D0C,iBA6D1C2T,GA7D0C,iBA8D1CC,GA9D0C,mBA+D1CE,GA/D0C,sBAgE1CD,GAhE0C,WAiE1CpnE,IACI,EACJ,MAAM,uBACJqD,GADI,kBAEJ2kE,GAFI,uBAGJzkE,KACEwW,EAAAA,EAAAA,MAGEgpB,IAAMnC,EAAAA,EAAAA,IAAuB,MAE7BqnC,IAAkBrnC,EAAAA,EAAAA,IAAuB,MAEzC4oB,IAAa5oB,EAAAA,EAAAA,IAAuB,MAEpCzjC,IAAO48B,EAAAA,GAAAA,MAEb8yB,EAAAA,GAAAA,IAAeob,GAAiBT,GAEhC,MAAM,kBACJra,GADI,oBACeC,GADf,wBAEJ9D,GAAyBuB,kBAAmBxB,GAFxC,uBAGJgE,GAHI,sBAGoBC,KACtBC,EAAAA,GAAAA,GAAuBxqB,GAAKt/B,EAAAA,IAAgBylD,IAAgB,EAAMnI,EAAAA,KAEtEvpB,EAAAA,EAAAA,KAAU,KACJ21B,IACF5pD,OAED,CAAC4pD,GAAmB5pD,KAEvB,MAAMupD,GAAwBH,GAAmB,GAC1CppB,GAASwpB,KAAatnB,EAAAA,GAAAA,GAAQqnB,KACrCt1B,EAAAA,EAAAA,KAAU,KACJs1B,IAIJhsD,WAAWisD,GA1GU,GA0GCJ,KACrB,CAACA,EAAiBI,GAAWD,KAChC,MAAM,qBAAEzqB,KAAyBC,EAAAA,GAAAA,GAAkBiB,QAAS9oC,EAAWqyD,IAAuB,IAG5FxxD,GAAIoD,GADA,OACWtE,GADX,YACmBsmD,GADnB,SACgCwkB,IAClCxnE,EAEEwqE,IAAUp9C,EAAAA,EAAAA,IAAeptB,GACzB8jD,IAAQC,EAAAA,EAAAA,IAAa/jD,GACrBozB,GAAkC,cAApBzvB,IAAmC3D,EAAQozB,YACzDq3C,IAAWC,EAAAA,EAAAA,IAAe1qE,KAAaooE,EACvCuC,GAAYppE,QAAQe,KAAmC,WAApBqB,GACnC6/C,IAAconB,EAAAA,EAAAA,IAAsB5qE,GACpC6qE,GAAmBlE,GAAgBoC,EACnC+B,IAAe7Y,MAAAA,QAAA,EAAAA,GAAiBxkC,cAAcs9C,EAAAA,EAAAA,IAAkB9Y,GAAgBxkC,WAChFu9C,GACJhoB,MACKhW,GAAkB5Z,MACnBs0C,IACA1kB,GAAYioB,sBACZznB,GAEAxB,GAAUzgD,QAAQs1C,IAAUA,EAAOz4C,SAAS6D,OAAS,EACrDipE,GAA4B59C,IAAsB+8C,EAClDc,GAA2B79C,IAAsBi6C,EACjD1b,QAA6C9uD,IAAxB2yD,GACrB0b,KACFvf,IAAsBL,IAAkB+c,GACtC4C,IAEAE,GAAa/+B,IAAclZ,GAC3Bk4C,GAAW/pE,QAAQgoE,IACnBvmB,KACEA,GAAYuoB,eAAkBv+B,IAAmB8W,IAAU4jB,IAC5D1kB,GAAYwoB,eAGbC,GAAoBnpE,KAAe6oE,IAAgD,WAApBxnE,KAAiCumE,EAChGwB,IAA2B3lE,EAAAA,KAAiBylD,IAAkBn9B,KAAoB88C,GAElF5f,IAAgBhsB,EAAAA,EAAAA,KAAY,CAACv1B,EAAkDpG,KACnF+B,GAAuB,CACrB3E,UAAAA,GACA4C,UAAAA,MACIoG,MAAAA,OAAA,EAAAA,EAAGs6B,WAAY,CAAE5+B,WAAW,MAC5Bs8C,IAAW,CAAEv8C,gBAAiBoxC,EAAOz4C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,UAEnE,CAAC+H,GAAwB3E,GAAWghD,GAASnL,IAE1C80B,GAAgB5D,EAAgBvnE,OAASzD,EAEzC6uE,GAAa5oB,KAAgBhW,GAAkB06B,IAAkBiE,IAAiB3D,EAAe2D,GACjGE,GAAa7oB,GAAcglB,EAAe2D,IAE1C,gBACJjf,GADI,YAEJ9S,GAFI,kBAGJuT,GAHI,kBAIJG,GAJI,yBAKJC,GALI,gBAMJ7hB,GANI,wBAOJkiB,GAPI,iBAQJpmB,GARI,SASJ4kB,GATI,uBAUJH,GAVI,8BAWJiC,IACE5C,GACFC,GACAlmB,GACArkC,GACAghD,EACAzgD,QAAQiqD,IACRjqD,QAAQkqD,GACRlqD,QAAQmqD,GACRC,GACAC,GACAlvD,GACAmvD,GACAC,GACAhI,GACAqnB,KAGI,kBACJW,GADI,kBAEJC,GAFI,kBAGJC,GAHI,iBAIJC,GAJI,iBAKJrN,GALI,gBAMJsN,GANI,sBAOJC,GAPI,gBAQJC,GARI,gBASJC,GATI,mBAUJrH,GAVI,eAWJsH,GAXI,mBAYJC,GAZI,cAaJC,GAbI,YAcJC,GAdI,qBAeJC,GAfI,6BAgBJC,ICxZW,SACbltE,EACA8rD,EACAvrD,EACAtD,EACAC,EACA2wB,EACA09C,EACA53C,EACAu0C,EACA9wB,EACA+0B,EACAC,EACA5D,GAEA,MAAM,SACJtpE,EADI,iBACMmH,EADN,aACwBpD,EADxB,gBACsCkqE,EADtC,gBACuDC,EADvD,iBAEJC,EAFI,qBAEchI,EAFd,aAEoCiI,EAFpC,gBAEkD9nE,EAFlD,uBAEmE+nE,IACrE3wD,EAAAA,EAAAA,OAGFze,GAAIoD,EADA,YACWgiD,EADX,iBACwBryC,EADxB,cAC0C82D,EAD1C,oBACyDwF,EADzD,UAC8ErpE,GAChF5D,EAEE8rE,GAAoBvsC,EAAAA,EAAAA,KAAY,KAC/BqsC,GAILjtE,EAAS,CAAEf,GAAIguE,EAAWhuE,OACzB,CAACguE,EAAYjtE,IAEVotE,GAAoBxsC,EAAAA,EAAAA,KAAY,KAC/BssC,EAMDb,GAAAA,MAAehoB,GAAAA,EAAakqB,cAC9BxqE,EAAa,CAAEhG,OAAQmvE,EAAWjuE,GAAIoD,UAAWgiD,EAAYkqB,gBAE7DvuE,EAAS,CAAEf,GAAIiuE,EAAWjuE,KAR1BkI,EAAiB,CAAE9F,QAASP,EAAK,kBAUlC,CACDurE,EAAatoE,EAAcsgD,EAAavjD,EAAMd,EAAUktE,EAAY/lE,IAGhEkmE,GAAoBzsC,EAAAA,EAAAA,KAAY,KAC/B0oC,GAILtpE,EAAS,CAAEf,GAAIqqE,EAAUrqE,OACxB,CAACqqE,EAAWtpE,IAETstE,GAAmB1sC,EAAAA,EAAAA,KAAY,KACnC78B,EAAa,CACXhG,OAAQirE,GAAwBF,EAAgBA,EAAgB/qE,EAChEC,SAAAA,EACAqE,UAAW2P,EACX7M,eAAgB6jE,GAAwBF,OAAgB1qE,EAAYiE,MAErE,CAAC0B,EAAcilE,EAAsBF,EAAe/qE,EAAQC,EAAUgU,EAAkB3P,IAErF49D,GAAmBr/B,EAAAA,EAAAA,KAAY,KACnCqtC,EAAgB,CACdlwE,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,EAAW2B,OAAQywB,EAAc+5C,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,WAExF,CAACzwE,EAAQC,EAAUqE,EAAW4rE,EAAiBx5C,IAE5C84C,GAAkB3sC,EAAAA,EAAAA,KAAY,KAClCstC,EAAgB,CAAEnwE,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAW6rE,IAEjBV,GAAwB5sC,EAAAA,EAAAA,KAAa6tC,IACzCR,EAAgB,CACdlwE,OAAAA,EACAC,SAAAA,EACAqE,UAAWosE,EACXzqE,OAAQywB,EAAc+5C,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,UAE1D,CAACzwE,EAAQC,EAAUiwE,EAAiBx5C,IAEjCi5C,GAAkB9sC,EAAAA,EAAAA,KAAY,KAClCutC,EAAiB,CAAEttE,WAAY,CAACwB,OAC/B,CAACA,EAAW8rE,IAET9H,GAAqBzlC,EAAAA,EAAAA,KAAY,KACrCulC,EAAqB,CAAEpoE,OAAAA,EAAQsE,UAAAA,MAC9B,CAAC8jE,EAAsBpoE,EAAQsE,IAE5BsrE,GAAiB/sC,EAAAA,EAAAA,KAAalrB,IAClC04D,EAAa,CAAErwE,OAAAA,EAAQsE,UAAAA,EAAWqT,QAAAA,MACjC,CAAC3X,EAAQsE,EAAW+rE,IAEjBR,GAAqBhtC,EAAAA,EAAAA,KAAY,KACrCt6B,EAAgB,CAAEN,WAAYjI,EAAQkH,UAAAA,MACrC,CAACqB,EAAiBvI,EAAQkH,IAEvB4oE,GAAgBjtC,EAAAA,EAAAA,KAAY,KAChC,GAAIsX,GAASA,EAAMz4C,SAAU,CAC3B,MAAMoB,EAAaq3C,EAAMz4C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAClDqH,EAAgB,CAAEN,WAAYjI,EAAQ8C,WAAAA,SAEtCyF,EAAgB,CAAEN,WAAYjI,EAAQ8C,WAAY,CAACwB,OAEpD,CAAC61C,EAAO5xC,EAAiBvI,EAAQsE,IAE9ByrE,GAAcltC,EAAAA,EAAAA,KAAY,KAC9B78B,EAAa,CACXhG,OAAAA,EAAQC,SAAUkB,EAAAA,GAAgBmD,UAAAA,MAEnC,CAAC0B,EAAchG,EAAQsE,IAEpB0rE,GAAuBntC,EAAAA,EAAAA,KAAY,KACnCjS,EACF5qB,EAAa,CACXhG,OAAQsmD,EAAar+C,WAAYf,UAAAA,EAAWC,cAAenH,IAK3DirE,GAAwBF,EAC1BuF,EAAuB,CACrBtwE,OAAQ+qE,EACR9qE,SAAUswE,EACVjsE,UAAWgiD,EAAawoB,gBAG1B9oE,EAAa,CACXhG,OAAQsmD,EAAar+C,WAAY3D,UAAWgiD,EAAawoB,kBAG5D,CACDl+C,EAAmBq6C,EAAsBF,EAAe/kE,EAAcsgD,EAAap/C,EAAWlH,EAC9FswE,EAAwBC,IAGpBI,GAAsB9tC,EAAAA,EAAAA,KAAav1B,IACvCA,EAAE21B,kBAEF4rB,EAAcvhD,EAAGpG,KAChB,CAAC2nD,EAAe3nD,IAEnB,MAAO,CACLkoE,kBAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACArN,iBAAAA,EACAsN,gBAAAA,EACAC,sBAAAA,EACAC,gBAAiBiB,EACjBhB,gBAAAA,EACArH,mBAAAA,EACAsH,eAAAA,EACAC,mBAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,qBAAAA,EACAC,6BAA8BU,GDwP5BC,CACF7tE,GACA8rD,GACAvrD,EACAtD,GACAC,GACA2wB,EACA09C,GACA53C,GACAs0C,EACA7wB,EACA+0B,GACAC,GACA5D,GAGIsF,IAAqBluC,EAAAA,GAAAA,GACzB,4BACA8qC,GAAkB,iBAClBze,GAAe,eACf0e,GAAiB,gBACjBC,GAA0B,0BAC1B9C,GAAyB,yBACzBrY,GAAgB,eAChBpL,IAAS,MACTviD,QAAQvB,EAAQ0yD,QAAU,YAC1B1yD,EAAQuyD,UAAY,aACpBkY,IAAY,YACZ5e,IAAsB,gBACtBhB,IAAcE,GAAoB,UAClCwd,GAAgB,gBAChBvoE,EAAQ6Q,YAAc,cACtByc,GAAqB,uBACrB00B,IAAW,WACXhiD,EAAQ2wB,kBAAoB,qBAC5B2kC,IAAc,cACd9J,IAAkB,uBAClB2c,GAAe,gBACf5mE,QAAQvB,EAAQmjD,gBAAkB,qBAClCiJ,IAAY,YACZznB,GACApjC,QAAQ+uD,KAAmB,wBAGvB,KACJpvD,GADI,MACE6xB,GADF,MACSO,GADT,MACgBijB,GADhB,MACuBC,GADvB,SAC8BjjB,GAD9B,QACwCtpB,GADxC,QACiDuvD,GADjD,KAC0DnkD,GAD1D,QACgEopD,GADhE,QACyE72C,GADzE,SACkFkX,KACpFtL,EAAAA,EAAAA,IAAkBxzB,GAEhBwtE,GjC1cD,SACLxtE,GAwBA,IAvBA,SACEyqE,EADF,YAEEjnB,EAFF,cAGE4mB,EAHF,YAIEY,EAJF,UAKEL,EALF,gBAME9C,EANF,YAOE4F,EAPF,gBAQEC,EARF,aASE5C,EATF,gBAUE6C,GAaF,uDADI,GAEJ,MAAM,KACJzsE,EADI,MACE6xB,EADF,MACSO,EADT,MACgBijB,EADhB,MACuBC,EADvB,SAC8BjjB,EAD9B,KACwCle,EADxC,QAC8CopD,EAD9C,QACuDjF,EADvD,SACgE16B,IAClEtL,EAAAA,EAAAA,IAAkBxzB,GAEhBygE,EAAa,CAAC,mBACdmN,EAAU76C,GAASO,GAASwL,EAC5B4kB,EAAUxiD,GAA2B,WAAnB49B,MAAAA,OAAA,EAAAA,EAAUhhC,OAAoB6vE,EAChDE,EAAoBD,IAAYlqB,EAChCoqB,EAAWvsE,QAAQvB,EAAQwnE,UAkFjC,OAhFIjkB,GAAmBC,GACrBid,EAAW//D,KAAM,yBAAwB8iD,KAChCE,GACT+c,EAAW//D,KAAK,QAGdgtE,GACFjN,EAAW//D,KAAK,qBAGd8iD,IACFid,EAAW//D,KAAK,gBACZ4yB,MAAAA,GAAAA,EAAOy6C,SACTtN,EAAW//D,KAAK,SAGd+sE,GACFhN,EAAW//D,KAAK,iBAGhBktE,EACFnN,EAAW//D,KAAK,SACP61C,EACTkqB,EAAW//D,KAAK,SACP81C,EACTiqB,EAAW//D,KAAK,SACP6yB,EACTktC,EAAW//D,KAAK,YACP84D,EACTiH,EAAW//D,KAAK,WACP2U,EACTorD,EAAW//D,KAAK,QACP+9D,IACTgC,EAAW//D,KAAK,aAEZ+9D,EAAQ1rC,OAAS0rC,EAAQnrC,QAC3BmtC,EAAW//D,KAAK,UAIhBsqE,GACFvK,EAAW//D,KAAK,gBAGd+pE,GACFhK,EAAW//D,KAAK,YAGdiqE,GACFlK,EAAW//D,KAAK,eAGdoqE,GACFrK,EAAW//D,KAAK,iBAGdotE,GACFrN,EAAW//D,KAAK,cAGdmnE,GACFpH,EAAW//D,KAAK,qBAGb8iD,IACHid,EAAW//D,KAAK,cAEZktE,GAAWH,GACbhN,EAAW//D,KAAK,mBAGd+pE,GAAYO,IAAgB6C,GAAqBC,GAAYjG,IAC/DpH,EAAW//D,KAAK,wBAGd0pE,IAAkBr3C,GAAU+L,IAAa4kB,IAAamqB,IACxDpN,EAAW//D,KAAK,iBAIb+/D,EAAW3/D,KAAK,KiCsVEktE,CAAsBhuE,EAAS,CACtDyqE,SAAAA,GACAjnB,YAAAA,GACA4mB,cAAAA,EACAY,YAAAA,GACAL,UAAAA,GACA9C,gBAAAA,EACA4F,YAAanrE,KAAcA,MAAAA,QAAA,EAAAA,GAAY+xB,eAAgB,EACvDq5C,gBAAiBrC,IAAcC,GAC/BR,aAAAA,GACA6C,gBAAoC,aAAnB7uC,MAAAA,QAAA,EAAAA,GAAUhhC,SAAuBujE,EAAAA,EAAAA,IAAiBrhE,GAASyG,EAAAA,EAAAA,GAAcC,MAGtFunE,GAAeT,GAAiBhpE,SAAS,gBACzC0pE,IAAYC,EAAAA,GAAAA,GAAkBnuE,EAASwoE,EAAWjlB,GAAmBC,KAE3E,IAAI4qB,GASAC,GAPFD,GADEjD,GACa,QACN+C,IAAcrD,IAAqBpM,GAG7B,aAFA,UAMbwL,EACFoE,GAAoB,UACXvD,GACLtnB,KAAiBzwB,IAASO,IAASu3C,MAAsBqD,GAC3DG,GAAoB,UACXrD,IACToD,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,QAGtBpvB,EAAAA,GAAAA,GACEyoB,GAAiB1nE,EAAQynE,cAAgBznE,EAAQynE,cAAgB/qE,GACjE+tE,GAAWzqE,EAAQ2Q,sBAAmB5T,EACtCyT,EACAxQ,EAAQpC,IAEVgtD,GAAgBvlB,GAAK3oC,GAAQmuD,EAAWC,EAAgBC,EAAkBhnD,GAE1E,IACIuqE,GADA7iC,GAAQ,GAER8iC,IAAiB,EACrB,MAAM1J,IAActmC,EAAAA,EAAAA,KAAQ,IACnByjB,GAAU2D,GAAqB7B,GAAOviD,QAAQypE,IAAczpE,QAAQsiD,GAAYhN,QAAU95C,GAChG,CAACilD,GAAS8B,GAAOknB,GAAannB,EAAWhN,IAEtC23B,GAAexD,GAAc,GAAK,EACxC,GAAKhpB,KAAYjvB,KAASO,GAkBfuxC,KACTyJ,GAAkBpnE,KAAKC,IAAIs8C,GAAiBliD,QAAQL,IAAOuqE,IAAoB5G,GAAYza,eAAez+B,OACtG2iD,GAAkBzJ,GAAYza,eAAez+B,MA3UlB,KA4U7B4iD,IAAiB,QArBa,CAChC,IAAI5iD,EACAoH,GACFpH,EAAQi4B,GAAyB5jD,EAAS6jD,GAAWl4B,MAC5C2H,KAEP3H,EADE2H,GAAMy6C,QACAnI,GAAAA,GAEAhiB,GAAyB5jD,EAAS6jD,GAAWl4B,OAIrDA,IACF2iD,GAAkBpnE,KAAKC,IAAIs8C,GAAiBliD,QAAQL,IAAOuqE,IAAoB9/C,GAC3E2iD,GAAkB3iD,EArUO,KAsU3B4iD,IAAiB,IAUnBD,KACF7iC,GAAS,UAAS6iC,GAAkBE,QAGtC,MAAM1c,GAAaxlB,GAAatsC,EAAQyuE,aAAiBzD,KAAehoB,MAAAA,QAAhB,EAAgBA,GAAayrB,kBAAe1xE,EAC9F2xE,IAAsBnwC,EAAAA,EAAAA,KAAQ,IAC3BuzB,GAAYxH,GAAqBwH,SAAa/0D,GACpD,CAAC+0D,KAoBJ,SAAS6c,KACP,MAAMC,EACJ,mBAAC,GAAD,CACE5uE,QAASA,EACTiyD,gBAAiBA,GACjBJ,eAAgBA,EAChBC,UAAWA,GACXC,cAAqC,YAAtBsc,GACfrc,mBAA0C,WAAtBqc,GACpBhiD,mBAAoBA,GACpBikC,eAAgBA,GAChBl0B,QAASgwC,KAIb,MAA0B,WAAtBiC,GACKO,EAIP,mBAAC,GAAD,CACEte,eAAgBA,GAChBtwD,QAASiyD,GACTyU,aAAckI,EACdviD,mBAAoBA,KAyP1B,OACE,0BACEgZ,IAAKA,GACLznC,IAAIkyD,EAAAA,EAAAA,IAAiB9vD,EAAQpC,IAC7Bi9B,UAAW0yC,GACX9hC,MAAOijC,GAAuB,6BAA4BA,YAA0B3xE,EACpF,kBAAiBiE,GACjBurC,YAAamgB,GACbtwB,QAASwd,GACT+R,cAAewB,GACf1gB,cAAe6gB,GACfnlB,aAAcgjC,GAA2Bjd,QAAgCnxD,EACzE8xE,YAAanD,GAA0BhgC,QAAkB3uC,EACzDqrC,aAAesjC,IAA2BP,GAA4B3jC,QAAmBzqC,GAEzF,0BACEsoC,IAAKklC,GACL1vC,UAAU,gBACV,kBAAiB75B,GACjB,uBAAsB61C,EAAQA,EAAMz4C,SAASy4C,EAAMz4C,SAAS6D,OAAS,GAAGrE,QAAKb,EAC7E,0BAAyBiD,EAAQ2wB,oBAEjCrD,GACA,0BAAKuN,UAAU,0BACZy6B,IAAc,wBAAGz6B,UAAU,iBAG/B0sC,GACC,0BACE1sC,WAAWwE,EAAAA,GAAAA,GAAe,sCAAuCgqC,IAAmB,eACpFjtC,QAASuwC,IAERtD,IACC,wBAAGxuC,UAAU,iBAIlBysC,GAxUL,WACE,MAAMwH,EAAmBlD,KAAcvoD,EAAAA,EAAAA,IAASuoD,GAAWhuE,IACrDmkE,EAAc6J,IAAckD,EAAoBlD,QAAwB7uE,EACxEilE,EAAc4J,KAAekD,EAAoBlD,QAAwB7uE,EACzEgyE,GAAenD,IAAc5oB,GAAeA,GAAYE,oBAAiBnmD,EAE/E,OACE,mBAACu+C,GAAA,EAAD,CACEze,KAAK,QACLnoB,KAAMqtD,EACN5/D,KAAM6/D,EACN9gE,KAAM6tE,EACNluD,aAAcA,EACdub,QAAU2lC,GAAcC,EAAc8J,QAAoB/uE,IA2T7CiyE,GACf,0BACEn0C,WAAWwE,EAAAA,GAAAA,GAAe,0BAA2BmuC,GAAiBhpE,SAAS,SAAW,oBAE1F,0BACE6gC,IAAKymB,GACLjxB,UAAW2yC,GACX/hC,MAAOA,GACPnP,IAAI,QAEH0uC,KAAgBE,IACf,0BAAKrwC,UAAU,iBAAiBp7B,GAAK,qBApS/C,WACE,MAAMo7B,GAAYwE,EAAAA,GAAAA,GAChB,gBACA2rC,IAAe,oBACfP,IAAY,gBACZ8D,IAAkB,oBAEd3J,EAAoBwF,IAAkB8D,KAAclD,KAAgBL,GACpEsE,GAAmB5vC,EAAAA,GAAAA,GACvB,eACiB,YAAjB+uC,IAA8B,YAC9Bvc,GAAkB,sBAGpB,OACE,0BAAKh3B,UAAWA,EAAW4R,cAAe8gB,GAA0BjxB,IAAI,QA8K5E,WAME,GAJuBknB,KAAgBgkB,MACpCH,KAFWt0C,IAASO,IAASwL,KAEAksC,IAAexD,IAAYK,IACrDqD,IAA+BT,IAAYjnB,GAG/C,OAGF,IAAI4M,EACA8e,EAWJ,OAVIrD,IAAgBroB,IAAegkB,GAMxBxkB,MAAAA,IAAAA,GAAaE,iBACtBkN,EAAcpN,GAAYE,iBAN1BkN,GAAczvD,EAAAA,EAAAA,IAAelB,GAAMosE,IAE9Bb,KACHkE,EAAe,UAAQC,EAAAA,EAAAA,IAAgBtD,QAOzC,0BAAKhxC,UAAU,gBAAgByB,IAAI,OAChC8zB,EACC,2BACEv1B,WAAWwE,EAAAA,GAAAA,GAAe,cAAe6vC,GACzC9yC,QAAS2vC,GACTzvC,IAAI,SAEH4d,EAAAA,GAAAA,GAAWkW,IAEX6X,OAEDlrE,EA7mBC,IA8mBJkrE,GACC,sCACE,2BAAMptC,UAAU,OAAOp7B,GAAK,WAC5B,2BACEo7B,UAAU,cACVuB,QAAS4vC,KAER9xB,EAAAA,GAAAA,GAAY,IAAG+tB,EAAUzrD,cAI/BwmC,MAAAA,IAAAA,GAAaioB,oBACZ,2BAAMpwC,UAAU,cAAcyB,IAAI,QAAQ78B,GAAK,mBAC7CO,EAAQyuE,aAAeniC,EACzB,2BAAMzR,UAAU,cAAcyB,IAAI,QAAQt8B,EAAQyuE,iBAChD1xE,GA/NHqyE,GACA3E,IACC,mBAAC,GAAD,CACEzqE,QAASwQ,EACTk7C,YAAaA,EACblrD,OAAQ6nE,EACRtZ,oBAAqBgb,EACrB3tC,QAAS6vC,KAGZhiE,IACC,mBAAC,GAAD,CACEjK,QAASA,EACT+uD,oBAAqBgb,EACrBlX,8BAA+BmX,EAC/BlX,WAAY6W,GACZ9oD,aAAcA,IAGjBkoD,GACC,mBAACsG,GAAA,EAAD,CACExyC,KAAK,QACLinB,MAAOA,GACP75C,QAAS8+D,EACTuG,OAAQrG,GACRrC,QAASuC,GACTpa,oBAAqBgb,EACrBlpD,aAAcA,EACd0uD,iBAAkB/E,GAClBxpE,UAAWA,GACXtE,OAAQA,GACRmwB,wBAAyBA,KAG5B85C,GACC,mBAAC,GAAD,CACE9pC,KAAK,QACLinB,MAAOA,GACP6iB,aAAcA,EACdp6C,YAAaA,EACbq6C,QAASuC,GACTpa,oBAAqBgb,EACrBlpD,aAAcA,EACd0uD,iBAAkB/E,GAClBxpE,UAAWA,GACXtE,OAAQA,GACRmwB,wBAAyBA,KAG5Bm1B,IACC,mBAAC,GAAD,CACEnL,MAAOA,EACPguB,YAAaA,GACb9V,oBAAqBgb,EACrBjmB,MAAOA,GACP4H,YAAaA,EACbkZ,kBAAmBA,EACnB/jD,aAAcA,EACd09C,aAAc4N,MAGhBnqB,IAAWjvB,IACX,mBAAC,GAAD,CACE/yB,QAASA,EACT+uD,oBAAqBgb,EACrBlmB,UAAWA,EACX4R,YAAa+T,GACb9T,eAAgBA,EAChBE,qBAAsBgP,EACtBxoC,QAASwiC,GACT9I,eAAgBkP,GAChBnP,cAAeA,GACfnK,YAAaA,EACbruB,MAAOA,KAGT2kB,IAAW1uB,IAASA,GAAMy6C,SAC1B,mBAAC,GAAD,CACE/tE,QAASA,EACT+uD,oBAAqBgb,EACrBtU,YAAa+T,GACb3oD,aAAcA,EACdg1C,cAAeA,MAGjB7T,IAAW1uB,KAAUA,GAAMy6C,SAC3B,mBAAC,GAAD,CACE/tE,QAASA,EACT+uD,oBAAqBgb,EACrBlmB,UAAWA,EACX4R,YAAa+T,GACbtR,YAAauR,GACb/T,eAAgBA,EAChB70C,aAAcA,EACdub,QAASwiC,GACT9I,eAAgBkP,GAChBnP,cAAeA,GACfnK,YAAaA,KAGfnV,IAASC,KACT,mBAACg5B,GAAA,EAAD,CACEnyC,MAAOA,EACPr9B,QAASA,EACT2C,OAAQ8sE,EAAAA,GAAAA,OACR/Z,eAAgBA,EAChB70C,aAAcA,EACd6uD,aAAcpiD,EACdgoC,WAAYA,GACZqa,OAAQzD,GACR0D,aAAap5B,IAAWsN,KAAS9W,OAAoCjwC,EAAlBsvE,GACnDvW,eAAgBkP,GAChBnP,cAAeA,KAGlBtiC,IACC,mBAACs8C,GAAA,EAAD,CACE7vE,QAASA,EACT+uD,oBAAqBgb,EACrBtU,YAAa+T,GACbE,sBAAuBA,GACvBhU,eAAgBA,EAChBga,aAAcpiD,EACdgoC,WAAYA,GACZiJ,aAAcK,GACd9I,eAAgBkP,GAChBnP,cAAeA,KAGlB2D,IACC,mBAAC,GAAD,CAASA,QAASA,KAEnBnkD,IACC,mBAAC,GAAD,CAAMrV,QAASA,EAASqV,KAAMA,GAAM0lD,WAAYuR,MAEhDzB,IAAoBqD,IACpB,wBAAGrzC,UAAWo0C,EAAkB3yC,IAAI,QACjC4xC,GACiB,YAAjBE,IAA8BO,MAIlClQ,IACC,mBAAC,GAAD,CACEz+D,QAASA,EACT+uD,oBAAqBgb,EACrBlmB,UAAWA,EACX4R,YAAa+T,GACbtR,YAAauR,GACb5oD,aAAcA,EACd09C,aAAcK,GACdJ,sBAAuBwG,GACvBnP,cAAeA,GACfnK,YAAaA,EACbruB,MAAOA,IAGVzV,IAAW,mBAAC,GAAD,CAAS5nB,QAASA,IAC7B8+B,IACC,mBAAC,GAAD,CACE9+B,QAASA,EACT6gB,aAAcA,EACd2qC,eAAgBA,GAChB8J,WAAYA,GACZj4B,MAAOA,EACP5pB,KAAMjT,EACNkG,iBAAkBA,KAgHnBopE,IACC3E,IAA6C,eAAjBiD,IAAiCO,KAC9DvD,IAAuBC,GACtB,mBAACzuC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACN7vB,OAAK,EACLiwB,KAAK,OACLuC,UAAW3/B,GAAK,2BAChB28B,QAASmrC,EAAwBgF,GAAqBC,IAEtD,wBAAG3xC,UAAU,uBAEbuwC,IAAuBE,GACzB,mBAAC1uC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACN7vB,OAAK,EACLiwB,KAAK,OACLuC,UAAU,gBACVhD,QAASmtC,GAAekD,GAAcC,IAEtC,wBAAG7xC,UAAU,2BAEb99B,EACH0uE,IAAqB,mBAAC,GAAD,CAAenpE,WAAYA,GAAa2tC,SAAUi6B,IACvE+D,IACC,0BAAKpzC,UAAU,eAAekoC,wBAAyBjf,GAAQqjB,GAAeC,KAE/EsE,IACC,0BACE7wC,WAAWwE,EAAAA,GAAAA,GAAe,iBAAkB4sB,KAA2BqE,IAAkB,WACzFl0B,QAASwxB,IAET,mBAAC0D,GAAA,EAAD,CAAqBpkC,SAAUmB,OAIpCruB,EAAQmjD,eACP,mBAAC,GAAD,CAAenjD,QAASA,EAASo8B,QAASkuC,KAErB,YAAtB+D,IACC,mBAAC,GAAD,CACEruE,QAASiyD,GACTwU,WAAS,EACTnW,eAAgBA,GAChBjkC,mBAAoBA,MAIzBqjC,IACC,mBAAC,GAAD,CACExwB,OAAQuwB,GACRvf,OAAQwf,GACR1vD,QAASA,EACT62C,MAAOA,EACP+wB,aAAcA,EACdjkE,gBAAiBA,GACjBgjC,QAASgpB,GACTrf,oBAAqBsf,UEv0B/B,IAAer1B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAoC,IAA3B,OAAEC,GAAyB,EAClC,MAAMsD,GAAUiW,EAAAA,EAAAA,IAAuBxZ,EAAQC,IACvCA,OAAQiI,EAAV,MAAsBorE,GAAU/vE,GAAW,GAEjD,MAAO,CACLA,QAAAA,EACA8kB,IAAKngB,GAAcorE,GAAQl6D,EAAAA,EAAAA,IAAWpZ,EAAQkI,QAAc5H,EAC5DizE,SAAUD,GAASprE,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,KARnDggC,EAtFgC,IAM9C,IAN+C,OACnDrgC,EADmD,QAEnDsD,EAFmD,aAGnDsxC,EAHmD,IAInDxsB,EAJmD,QAKnDkrD,GACI,EACJ,MAAM,qBACJC,EADI,SAEJtxE,EAFI,iBAGJuxE,EAHI,SAIJC,EAJI,aAKJztE,IACE2Z,EAAAA,EAAAA,MACE5c,GAAO48B,EAAAA,GAAAA,KAEPyvB,GAAa5oB,EAAAA,EAAAA,IAAuB,MACpCktC,EAAgB7uE,QAAQvB,IAE5BqwE,QAASthB,IACPuhB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTk/B,WAxB6B,IAyB7BC,UAAW,KAGb32C,EAAAA,EAAAA,KAAU,IACDs2C,EAAgBrhB,EAAoBjD,EAAWluC,SAAWovC,IAC3DA,EAAOgD,gBACTigB,EAAqB,CAAEvzE,OAAAA,YAEtBK,GACJ,CAACL,EAAQ0zE,EAAerhB,EAAqBkhB,IAEhD,MAAMr2B,GAAcra,EAAAA,EAAAA,KAAY,KACzBv/B,IACDA,EAAQ0wE,eACVR,EAAiB,CAAE/lE,KAAMnK,EAAQ0wE,iBACxB1wE,EAAQktE,cACjBxqE,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQktE,iBAE1DvuE,EAAS,CAAEf,GAAIoC,EAAQtD,SAEnBsD,EAAQmmB,YACVgqD,EAAS,CACPlqD,MAAOjmB,EAAQtD,OACfwpB,MAAOlmB,EAAQmmB,iBAIpB,CAACzjB,EAAc1C,EAASrB,EAAUuxE,EAAkBC,IAEvD,GAAKnwE,EAIL,OACE,0BAAK66B,UAAU,gCAAgCtC,IAAI,qBACjD,0BAAKsC,UAAU,kDAAkDyB,IAAI,QACnE,0BAAKzB,UAAU,gBAAgByB,IAAI,QACjC,0BAAKzB,UAAU,gBAAgByB,IAAI,OAChCxX,IAAOo1B,EAAAA,GAAAA,IAAWiD,EAAAA,EAAAA,IAAgBr4B,IAAQ,IAC1CkrD,IAAW91B,EAAAA,GAAAA,GAAWl6C,EAAQ2wE,kBAAmB75B,EAAAA,EAAAA,GAAar3C,EAAMuwE,EAASlrD,IAAQ,KAGxF,wBAAG+V,UAAU,yBAAyByB,IAAI,OAAO+I,IAAKymB,GACpD,2BAAMjxB,UAAU,qBAAqByB,IAAI,SACtCohC,EAAAA,GAAAA,GAAuB19D,EAAQkB,KAAKA,KAAMlB,EAAQkB,KAAKwQ,WAG1D,2BAAMmpB,UAAU,cAAcyB,IAAI,OAChC,2BAAMzB,UAAU,qBAAqBp7B,EAAK,uBAI9C,mBAACm9B,GAAA,EAAD,CAAQH,MAAM,YAAYI,KAAK,OAAOsC,QAAM,EAAC/C,QAASwd,EAAa/e,UAAU,4BAC1Ep7B,EAAKO,EAAQ+vE,MACV,uBACC/vE,EAAQktE,cAAgB,wBAA0B,oCCuJnE,IAAe3yC,EAAAA,EAAAA,KAlN0B,IAwBnC,IAxBoC,OACxC79B,EADwC,WAExC8C,EAFwC,cAGxCoxE,EAHwC,iBAIxCC,EAJwC,SAKxCtpE,EALwC,UAMxCupE,EANwC,mBAOxC7G,EAPwC,UAQxCpmB,EARwC,aASxCvS,EATwC,YAUxCy/B,EAVwC,6BAWxCC,EAXwC,qBAYxCC,EAZwC,SAaxCt0E,EAbwC,KAcxCmB,EAdwC,QAexCugD,EAfwC,eAgBxC6yB,EAhBwC,uBAiBxCC,EAjBwC,mBAkBxCjJ,EAlBwC,cAmBxCkJ,EAnBwC,WAoBxCC,EApBwC,sBAqBxCjiB,EArBwC,YAsBxCkiB,EAtBwC,cAuBxCC,GACI,EACJ,MAAM,oBAAEC,IAAwBn1D,EAAAA,EAAAA,OAE1B,4BACJ0tD,EADI,8BAEJ0H,EAFI,uCAGJzH,GrCpEW,SACblsE,EACAwzC,EACA2/B,GAEA,MAAM,oBAAE/6C,EAAF,iBAAuB42C,IAAqBzwD,EAAAA,EAAAA,OAGhDg0D,QAAStG,IACPuG,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTogC,WAAYtuB,GACZuuB,OAAQruB,MAIR+sB,QAASoB,EAA+BG,OAAQC,EAAkBC,SAAUC,IAC1EzB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTogC,WArBsC,MAsBpChS,IACF,GAAa,WAAT5hE,EACF,OAGF,IAAImJ,EAAQ,EACZ,MAAM+qE,EAAuB,GAE7BtS,EAAQr6D,SAAS4sE,IACf,MAAM,eAAEjiB,EAAF,OAAkBhD,GAAWilB,EAEnC,IAAKjiB,EACH,OAGF,MAAM,QAAEkiB,GAAYllB,EAEdhsD,EAAYkB,OAAOgwE,EAAQ1vE,eAAiB0vE,EAAQlxE,WACtDA,EAAYiG,IACdA,EAAQjG,GAGNkxE,EAAQvhD,kBACVqhD,EAAWtxE,KAAKM,MAIhBiwE,EAAqBrzD,SAAW3W,GAASgqE,EAAqBrzD,SAChEsY,EAAoB,CAAEjvB,MAAAA,IAGpB+qE,EAAW/vE,QACb6qE,EAAiB,CAAEttE,WAAYwyE,QAInCha,EAAAA,GAAAA,GAAkB6Z,EAAkBE,GAEpC,MAAQ1B,QAASrG,IAA2CsG,EAAAA,GAAAA,IAAwB,CAClFC,QAASj/B,EACTogC,WAAYtuB,KAGd,MAAO,CACL2mB,4BAAAA,EACA0H,8BAAAA,EACAzH,uCAAAA,GqCGEmI,CAAoBr0E,EAAMwzC,EAAc2/B,IAEtC,oBACJmB,EADI,mBAEJC,EAFI,cAGJC,GCtEW,SACbx0E,EACAwzC,EACA9xC,EACAqxE,EACAtpE,EACA+pE,EACAC,EACAlzB,EACA6yB,EACAC,GAEA,MAAM,qBAAEzsE,IAAyB2X,EAAAA,EAAAA,OAE1Bk2D,EAAmBC,IAAoBj0C,EAAAA,EAAAA,KAC5C,IAAgB,WAATzgC,EAAoB,EACzBuO,EAAAA,EAAAA,KAAS,IAAM3H,EAAqB,CAAED,UAAWkI,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FN,EAAAA,EAAAA,KAAS,IAAM3H,EAAqB,CAAED,UAAWkI,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACjI,EAAsBlF,IAInB4yE,GAAsBlvC,EAAAA,EAAAA,IAAuB,MAE7CmvC,GAAqBnvC,EAAAA,EAAAA,IAAuB,MAE5CovC,GAAgBpvC,EAAAA,EAAAA,IAAuB,MAE7C,SAASuvC,IACP,IAAKp0B,EAAS,OAEd,IAAK7+C,IAAeA,EAAWyC,OAG7B,OAFAqvE,GAAY,QACZC,GAAc,GAIhB,IAAKV,EAGH,OAFAS,GAAY,QACZC,GAAc,GAIhB,IAAKjgC,EAAa1zB,QAChB,OAGF,MAAM,aAAE80D,EAAF,aAAgBC,EAAhB,UAA8BC,GAActhC,EAAa1zB,QACzDi1D,EAAe3rE,KAAK0F,MAAM+lE,EAAeC,EAAYF,GAErDI,EAAaD,GAvDC,EAyDpBvB,EAAY/pE,GAAYurE,IAHHD,GAvDH,KA2DlBtB,GAAeuB,GAGjB,MACEzC,QAASthB,IACPuhB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTqgC,OAAQoB,EAAAA,KACNrT,IACF,IAAK8S,IAAqBD,EACxB,OAKF,GAD4B/yE,EAAW,IAAMwzE,EAAAA,GAE3C,OAGF,MAAMC,EAAevT,EAAQr5D,MAAK,QAAC,eAAE2pD,GAAH,SAAwBA,KAC1D,IAAKijB,EACH,OAGF,MAAM,OAAEjmB,GAAWimB,EAEM,sBAArBjmB,EAAOnyB,WAEPq4C,EAAAA,IAA0BhC,EAAetzD,SAAWpe,EAAWyC,QAAU4K,EAAAA,KAEzEskE,EAAuBvzD,SAAU,GAGnC20D,KAC8B,qBAArBvlB,EAAOnyB,WAChB23C,QAIJrjB,EAAAA,GAAAA,IAAeijB,EAAqBrjB,IACpCI,EAAAA,GAAAA,IAAekjB,EAAoBtjB,GAEnC,MACEshB,QAAS8C,EACTvB,OAAQwB,EACRtB,SAAUuB,IACR/C,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTqgC,OAAQ2B,KACPb,IAEHtjB,EAAAA,GAAAA,IAAemjB,EAAea,GAE9B,MACE9C,QAASkD,EACT3B,OAAQ4B,EACR1B,SAAU2B,IACRnD,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTqgC,OArHoB,GAsHnBc,GAqBH,OAnBAtjB,EAAAA,GAAAA,IAAemjB,EAAeiB,IAE9BG,EAAAA,GAAAA,IAAY,KACNr1B,GACFo0B,MAED,CAACp0B,KAGJq1B,EAAAA,GAAAA,IAAY,KACVN,IACAI,IAEApwE,YAAW,KACTqwE,IACAJ,MAtIuB,OAwIxB,CAAC7zE,IAEG,CAAE4yE,oBAAAA,EAAqBC,mBAAAA,EAAoBC,cAAAA,GDjE9CqB,CACF71E,EACAwzC,EACA9xC,EACAqxE,EACAtpE,EACA+pE,EACAC,EACAlzB,EACA6yB,EACAC,GAGI1xE,GAAO48B,EAAAA,GAAAA,KAEPu3C,EACJ,0BAAK/4C,WAAWwE,EAAAA,GAAAA,GAvDS,iBAuD4B,wBAAyB9G,IAAI,mBAChF,+BAAO94B,EAAK,oBAIVo0E,EAAwBzkB,EAAwB,EAAIwhB,EAActwE,QAAO,CAACC,EAAKuzE,IAC5EvzE,GAAMwzE,EAAAA,EAAAA,IAAQD,EAAarxB,cAAcxgD,QAC/C,GACH,IAAI+xE,EAAkB,EAEtB,MAAMtxB,EAAakuB,EAAc9wE,KAAI,CACnCm0E,EACAC,EACAC,KAEA,MAAM1xB,EAAewxB,EAAUxxB,aAAa3iD,KAAI,CAC9Cs0E,EACAC,EACAC,KAEA,GAA2B,IAAvBF,EAAYnyE,SAAiB+/C,GAAQoyB,EAAY,MAAOrxB,EAAAA,EAAAA,IAAgBqxB,EAAY,IAAK,CAC3F,MAAMp0E,EAAUo0E,EAAY,GACtBllB,EACJmlB,IAAqBC,EAAkBryE,OAAS,GAC7CiyE,IAAmBC,EAAgBlyE,OAAS,EAGjD,OAAOsyE,EAAAA,EAAAA,IAAQ,CACbv0E,EAAQpC,KAAOozE,EAA6BpzD,SAAWg2D,EACvD,mBAAC,GAAD,CACEr7C,IAAKv4B,EAAQpC,GACboC,QAASA,EACT+uD,oBAAqB0iB,EACrBxiB,gBAAiB4kB,IAA0BG,EAC3C9kB,aAAcA,MAKpB,IAAIslB,EAEJ,OAAOT,EAAAA,EAAAA,IAAQK,EAAYt0E,KAAI,CAC7BmiD,EACAwyB,KAEA,MAAMz0E,EAAUgiD,GAAQC,GAAkBA,EAAeU,YAAcV,EACjEpL,EAAQmL,GAAQC,GAAkBA,OAAiBllD,EACnD+mD,GAAQC,EAAAA,EAAAA,IAAa/jD,GACrB00E,EAAiB1yB,GAAQC,GACzBY,EAAcuxB,EAAYK,EAAe,GAE3Cz0E,EAAQsS,iBAAmBy+D,EAAYnzD,WAAYkyC,EAAAA,EAAAA,IAAiB9vD,EAAQsS,mBAC9Ey+D,EAAYnzD,SAAUkyC,EAAAA,EAAAA,IAAiB9vD,EAAQpC,KAGjD,MAAM+2E,GAAmBD,GAAkB10E,EAAQ4D,UAAY5D,EAAQ4D,eAAY7G,EAC7E63E,EAAsB/xB,IAAgBb,GAAQa,GAAeA,EAAYj/C,eAAY7G,EAErFiC,EAAW,CACfmrE,eAAiC,IAAjBsK,EAChBrK,cAAeqK,IAAiBL,EAAYnyE,OAAS,EACrDooE,uBAAwB9oE,QAAQozE,GAAmBA,IAAoBH,GACvEjN,sBAAuBhmE,QAAQozE,GAAmBA,IAAoBC,GACtE1lB,aACEulB,IAAiBL,EAAYnyE,OAAS,GACnCoyE,IAAqBC,EAAkBryE,OAAS,GAChDiyE,IAAmBC,EAAgBlyE,OAAS,GAInDuyE,EAAyBG,EAEzB,MAAME,GAAaC,EAAAA,EAAAA,IAAqB90E,GAIlCu4B,EAAe,cAATz6B,EAAuB+2E,EAAc,GAAE70E,EAAQwG,QAAQquE,IAEnE,OAAON,EAAAA,EAAAA,IAAQ,CACbv0E,EAAQpC,KAAOozE,EAA6BpzD,SAAWg2D,EACvD,mBAAC,GAAD,CACEr7C,IAAKA,EACLv4B,QAASA,EACT8pE,6BAA8B2H,EAC9B1H,4BAA6BA,EAC7BC,uCAAwCA,EACxCnzB,MAAOA,EACPgN,UAAWA,EACXyjB,WAAYtoE,EAASorE,eAAiB0G,IAAchtB,KAAW9jD,EAAQpC,KAAOsqE,GAC9Eb,eAAgBroE,EAASmrE,gBAAkB2G,IAAchtB,EACzDmmB,mBAAoBA,EACpBttE,SAAUA,EACVgH,gBAAiB7F,EACjBosE,YAA8B,IAAlBkH,EACZniB,gBAAiB4kB,IAA0BG,EAC3C7J,eAAgBnrE,EAASmrE,eACzBC,cAAeprE,EAASorE,cACxBC,uBAAwBrrE,EAASqrE,uBACjC9C,sBAAuBvoE,EAASuoE,sBAChCrY,aAAclwD,EAASkwD,eAEzBlvD,EAAQpC,KAAOsqE,GACb,0BAAKrtC,UAAU,uBAAuBtC,IAAI,sBACxC,+BAAO94B,EAAK,gCAOtB,OACE,0BACEo7B,UAAU,qBACVtC,IAAK07C,EAAU1xB,SACfhW,YAAaogB,GAAAA,EACbooB,eAAa,GAEb,0BACEl6C,WAAWwE,EAAAA,GAAAA,GAAe,eAAgBgyC,GAAc,eACxD94C,IAAI,cACJgU,YAAaogB,GAAAA,EACbvwB,QAAUi1C,OAA6Et0E,EAAhE,IAAMy0E,EAAoB,CAAEhmE,WAAYyoE,EAAU1xB,YAEzE,2BAAMjmB,IAAI,QACP+0C,GAAc4C,EAAU3xB,eAAiB0yB,EAAAA,IACxCv1E,EAAK,+BAEN4xE,GAAc4C,EAAU3xB,eAAiB0yB,EAAAA,IACxCv1E,EAAK,sBAAsBw1E,EAAAA,EAAAA,IAAgBx1E,EAAMw0E,EAAU1xB,cAAUxlD,GAAW,KAEhFs0E,IAAc4D,EAAAA,EAAAA,IAAgBx1E,EAAMw0E,EAAU1xB,aAGnDwxB,EAAAA,EAAAA,IAAQtxB,OAKf,OACE,0BAAK5nB,UAAU,qBAAqBk6C,eAAa,GAC/C,0BAAK1vC,IAAK+sC,EAAqB75C,IAAI,oBAAoBsC,UAAU,uBAChEk5C,EAAAA,EAAAA,IAAQrxB,GACRmuB,GAAoB,mBAAC,GAAD,CAAkBt4C,IAAK77B,EAAQA,OAAQA,EAAQ40C,aAAcA,IAClF,0BACEjM,IAAKgtC,EACL95C,IAAI,mBACJsC,UAAU,qBAEZ,0BACEwK,IAAKitC,EACL/5C,IAAI,cACJsC,UAAU,oB,eErOlB,MAoEA,IAAeN,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAoC,IAA3B,OAAEsM,GAAyB,EAClC,MAAM,SAAET,GAAa7L,EAAO6L,SAASmP,SAC/By9D,GAAWC,EAAAA,EAAAA,IAAkBpsE,IAAUosE,EAAAA,EAAAA,IAAkB14E,EAAOiX,eAChEzJ,EAAU3B,MAAAA,GAAAA,EAAUrG,OAASqG,EAAS4sE,EAAW5sE,EAASrG,aAAUlF,EACpEoF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQsM,GAChC,OAAK5G,EAIE,CACL8H,QAAAA,EACAmrE,oBAAqBjzE,EAAKE,aAAeF,EAAKE,YAAYzE,KAAOuE,EAAK+R,uBAClE/R,EAAKE,YAAYzE,QACjBb,EACJi8B,gBAAiBv8B,EAAOu8B,iBARjB,KAPO+D,EAlE+B,IAI7C,IAJ8C,QAClD9yB,EADkD,gBAElD+uB,EAFkD,oBAGlDo8C,GACI,EACJ,MAAM,qBACJC,EADI,YAEJrmE,EAFI,oBAGJknB,IACE7Z,EAAAA,EAAAA,MAEE5c,GAAO48B,EAAAA,GAAAA,KAEPiV,GAAepO,EAAAA,EAAAA,IAAuB,OAE1CmtC,QAASthB,IACPuhB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASj/B,EACTk/B,WApB6B,OAsB/B12C,EAAAA,EAAAA,KAAU,KACJ7vB,GAA+B,yBAApB+uB,GAIfq8C,MACC,CAACr8C,EAAiBq8C,EAAsBprE,KAE3C6vB,EAAAA,EAAAA,KAAU,KACgB,yBAApBd,GAA8Co8C,GAChDl/C,EAAoB,CAAEjvB,MAAOmuE,MAE9B,CAACp8C,EAAiB9C,EAAqBk/C,IAE1C,MAAME,GAAsB/1C,EAAAA,EAAAA,KAAag2C,IACvCA,EAAkB,IACbA,EACH5hD,qBAAqB,GAEvB3kB,EAAY,CAAE/E,QAASsrE,MACtB,CAACvmE,IAEJ,OACE,0BAAK6rB,UAAU,kBAAkBwK,IAAKiM,GACpC,0BAAKzW,UAAU,WACb,wBAAGA,UAAU,QAAQyB,IAAI,QAAQ78B,EAAK,kCACtC,wBAAGo7B,UAAU,cAAcyB,IAAI,QAAQ78B,EAAK,8BAE5C,0BAAKo7B,UAAU,WACZ5wB,GACC,mBAACurE,GAAA,EAAD,CACEvrE,QAASA,EACTmyB,QAASk5C,EACThzC,SAAUr4B,EACV8kD,oBAAqBA,EACrBlyB,KAAM,IACNhC,UAAU,QACV46C,eAAa,WCR3B,IAAel7C,EAAAA,EAAAA,KA9DkB,IAE3B,IAF4B,eAChCyS,EADgC,KAChBlvC,EADgB,uBACV43E,GAClB,EACJ,MAAMj2E,GAAO48B,EAAAA,GAAAA,KAEb,MAAa,cAATv+B,EAiBN,SAAyB2B,GACvB,OACE,0BAAKo7B,UAAU,SAAQ,+BAAOp7B,EAAK,wCAlB5Bk2E,CAAgBl2E,GAGrButC,EAmBN,SAA6BvtC,GAC3B,OACE,0BAAKo7B,UAAU,cACb,0BAAKA,UAAU,WACb,wBAAGA,UAAU,6BACb,yBAAIA,UAAU,SAASp7B,EAAK,wCAC5B,yBAAIo7B,UAAU,eACZ,6BAAKp7B,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,kDA5BTm2E,CAAoBn2E,GAGzBi2E,EAgCN,SAAqBj2E,GACnB,OACE,0BAAKo7B,UAAU,cACb,0BAAKA,UAAU,UAAUyB,IAAK78B,EAAK88B,MAAQ,WAAQx/B,GACjD,yBAAI89B,UAAU,SAASp7B,EAAK,yBAC5B,wBAAGo7B,UAAU,eAAep7B,EAAK,4BACjC,yBAAIo7B,UAAU,mBACZ,6BAAKp7B,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,4BAzCTo2E,CAAYp2E,GAInB,0BAAKo7B,UAAU,SAAQ,+BAAOp7B,EAAK,mBCyEjCq2E,IAAwBzpE,EAAAA,EAAAA,KAAUC,GAAOA,KANvB,KAM8C,GAuctE,IAAeiuB,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAoD,IAA3C,OAAEC,EAAF,SAAUC,EAAV,KAAoBmB,GAAuB,EAClD,MAAMqE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,MAAO,GAGT,MAAM3C,GAAau2E,EAAAA,EAAAA,IAAwBt5E,EAAQC,EAAQC,EAAUmB,GAC/Dy4B,EAAwB,cAATz4B,GACjBi4B,EAAAA,EAAAA,IAAwBt5B,EAAQC,IAChCkD,EAAAA,EAAAA,IAAmBnD,EAAQC,GACzBwrE,GAAqBr4D,EAAAA,EAAAA,IAAyBpT,EAAQC,EAAQC,GAEpE,GACEA,IAAakB,EAAAA,MACR04B,GAAgB2xC,GAAsB3xC,EAAa2xC,IAExD,MAAO,GAGT,MAAM,aAAEn4D,EAAF,kBAAgBimE,EAAhB,YAAmC3zE,GAAgBF,EACnD8zE,GAAa9lE,EAAAA,EAAAA,IAAuB1T,EAAQC,GAE5Cw5E,EACJv5E,IAAakB,EAAAA,KACT2B,IAAe2C,EAAK0R,cAAgBoiE,GAAc5zE,IAAgBA,EAAYuB,UAG9EuyE,GAAUpxD,EAAAA,EAAAA,IAActoB,EAAQC,GACtC,IAAI05E,EASJ,OARI5oC,EAAAA,EAAAA,IAA0B/wC,EAAQC,KAElC05E,EADED,EAAQrgE,SACOqgE,EAAQrgE,SAASsgE,gBAAkB,aAEnC,wBAId,CACLC,cAAc,EACdtmE,aAAAA,EACAimE,kBAAAA,EACAM,eAAezpC,EAAAA,EAAAA,IAAc1qC,GAC7Bo0E,aAAaC,EAAAA,EAAAA,IAAYr0E,GACzBksC,UAAWlsC,EAAKksC,UAChBrB,gBAAgBC,EAAAA,EAAAA,IAAqBxwC,EAAQC,GAC7CgrE,eAAeC,EAAAA,EAAAA,IAAqBjrE,GACpCqzE,MAAOxuE,QAAQ40E,GACf32E,WAAAA,EACA+2B,aAAAA,EACAjC,eAAe1gB,EAAAA,EAAAA,IAAoBnX,EAAQC,EAAQC,GACnDk0E,iBAA2B,WAAT/yE,IAAqB6D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,GAC9E85E,sBAAsBC,EAAAA,EAAAA,IAAqBj6E,EAAQC,EAAQC,GAC3Ds5E,WAAAA,EACAt4B,oBAAoB7Q,EAAAA,EAAAA,IAAqBrwC,GACzC25E,eAAAA,EACAlO,mBAAAA,EACAkJ,cAAejvE,EAAK2T,UAAa,iBAAkB3T,EAAK2T,SACpDvU,QAAQY,EAAK2T,SAAS6gE,mBACtB55E,EACJ8jB,aAAcpkB,EAAOokB,gBACjBq1D,GAAiC,CAAE7zE,YAAAA,MA7DzB06B,EArc2B,IA+BzC,oBA/B0C,OAC9CrgC,EAD8C,SAE9CC,EAF8C,KAG9CmB,EAH8C,SAI9C84E,EAJ8C,YAK9CtF,EAL8C,cAM9CC,EAN8C,aAO9C8E,EAP8C,cAQ9CC,EAR8C,YAS9CC,EAT8C,QAU9CM,EAV8C,QAW9Cx4B,EAX8C,eAY9CrR,EAZ8C,cAa9C06B,EAb8C,UAc9Cr5B,EAd8C,MAe9C0hC,EAf8C,WAgB9CvwE,EAhB8C,aAiB9C+2B,EAjB8C,cAkB9CjC,EAlB8C,iBAmB9Cu8C,EAnB8C,qBAoB9C4F,EApB8C,aAqB9C1mE,EArB8C,kBAsB9CimE,EAtB8C,WAuB9CC,EAvB8C,mBAwB9Ct4B,EAxB8C,YAyB9Ct7C,EAzB8C,eA0B9C+zE,EA1B8C,mBA2B9ClO,EA3B8C,cA4B9CkJ,EA5B8C,aA6B9CvwD,EA7B8C,gBA8B9Ci2D,GACI,EACJ,MAAM,qBACJpyE,EADI,gBACkBqyE,EADlB,sBACmCC,EADnC,qBAC0DC,EAD1D,kBACgFC,IAClF76D,EAAAA,EAAAA,MAGEi1B,GAAepO,EAAAA,EAAAA,IAAuB,MAItCi0C,GAAkBj0C,EAAAA,EAAAA,IAAyB,WAATplC,IAAqBs5E,EAAAA,EAAAA,KAAmB/zE,EAAAA,EAAAA,MAAa3G,EAAQC,IAAc,GAC7Go0E,GAAc7tC,EAAAA,EAAAA,MACdm0C,IAAen0C,EAAAA,EAAAA,MACfo0C,IAAsBp0C,EAAAA,EAAAA,MACtB+tC,IAAuB/tC,EAAAA,EAAAA,MACvB8tC,IAA+B9tC,EAAAA,EAAAA,MAC/Bq0C,IAAoBr0C,EAAAA,EAAAA,MACpBs0C,IAA4Bt0C,EAAAA,EAAAA,KAAO,GACnCu0C,IAA6Bv0C,EAAAA,EAAAA,IAAO3hC,QAAQc,KAE3C6iE,GAAiBwS,KAAsBp8C,EAAAA,EAAAA,MAExC/b,GAAoBhe,QAAQ/B,IAElCk0E,EAAAA,GAAAA,IAAY,KAENn0D,KACFo4D,EAAAA,EAAAA,KAAU,KACRF,GAA2B75D,SAAU,OAGxC,CAAC2B,MAGJm0D,EAAAA,GAAAA,IAAY,KACVzC,GAAqBrzD,QAAU0W,IAC9B,CAACA,KAEJo/C,EAAAA,GAAAA,IAAY,KACN4C,GAAiBj4B,GAAWx9B,GAC9Bm2D,EAAsB,CAAEt6E,OAAAA,MAEzB,CAACA,EAAQ2hD,EAASi4B,EAAez1D,KAGpC6yD,EAAAA,GAAAA,IAAY,KACNn0D,KACFyxD,GAA6BpzD,QAAUqzD,GAAqBrzD,WAE7D,CAAC2B,MAEJm0D,EAAAA,GAAAA,IAAY,KACV6D,GAAkB35D,QAAUq4D,IAC3B,CAACA,IC3LiCiB,CAAAA,KACrCp9C,EAAAA,EAAAA,KAAU,KACR,SAAS89C,EAAW5tE,GAClB,IAAMygC,EAAAA,IAAazgC,EAAE0gC,UAAcD,EAAAA,IAAazgC,EAAEq6B,UAAoC,OAAvBsG,EAAAA,GAAAA,GAAgB3gC,GAAY,CACzF,MAAMxK,GAAaq4E,EAAAA,GAAAA,KAEfr4E,GAAcA,EAAWyC,OAAS,IACpC+H,EAAEswB,iBACF48C,EAAkB,CAAE13E,WAAAA,MAO1B,OAFA+zB,SAASmI,iBAAiB,UAAWk8C,GAAY,GAE1C,KACLrkD,SAASoI,oBAAoB,UAAWi8C,GAAY,MAErD,CAACV,KD2KJY,CAA8BZ,GAE9B,MAAMtG,IAAgBryC,EAAAA,EAAAA,KAAQ,KAC5B,IAAK/+B,IAAe+2B,EAClB,OAGF,MAAMp1B,GAAc+mE,GAAwB1oE,EAAW,IAAMi3E,IAAyBj3E,EAAW,GAE7FA,EADA,CAAC0oE,KAAuB1oE,GAG5B,IAAK2B,EAAYc,OACf,OAGF,MAAM81E,EAAiB52E,EAAYrB,KAAKlC,GAAO24B,EAAa34B,KAAKmC,OAAOwB,SACxE,OAAO2gD,IAAc81B,EAAAA,EAAAA,IAAQD,EAAgB,CAAC,OAAQ,OAAQ/G,GAA6BpzD,WAC1F,CAACpe,EAAY+2B,EAAckgD,EAAsBvO,KAEpDvF,EAAAA,GAAAA,IAAY,KACV,IAAKnjE,IAAe+2B,EAClB,OAEF,MAAMvyB,EAAMxE,EAAWO,QAAQiU,IAAD,uBAAOuiB,EAAaviB,UAApB,aAAO,EAAiByZ,aAEjDzpB,EAAI/B,QAETg1E,EAAqB,CAAEv6E,OAAAA,EAAQsH,IAAAA,MA7HQ,MAgIzC,MAAMi0E,IAAiB15C,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAATzgC,EAIJ,OAAOuO,EAAAA,EAAAA,KAAS,IAAM3H,EAAqB,CAAED,UAAWkI,EAAAA,GAAAA,UAA6B,KAAM,GAAM,KAEhG,CAACjI,EAAsBlF,KAEpB,WAAE04E,GAAF,kBAAcC,IE/NP,WAGb,MAAOD,EAAYE,IAAkBrwC,EAAAA,GAAAA,IAAQ,GAEvCswC,GAAeC,EAAAA,GAAAA,GATN,KAS4B,GA4B3C,MAAO,CACLJ,WAAAA,EACAC,mBA5BwB54C,EAAAA,EAAAA,KAAY,CAACiuB,EAA2BopB,KAChEwB,IAEK7kD,SAASrJ,KAAKgW,UAAU+sB,SAAS,2BACpC8K,EAAAA,EAAAA,KAAQ,KACNxkC,SAASrJ,KAAKgW,UAAU+L,IAAI,4BAIhCosC,GAAa,MACXtgB,EAAAA,EAAAA,KAAQ,KACN,MAAMwgB,EAAehlD,SAAS0G,cAAc,UACxCs+C,GACFA,EAAar4C,UAAUsL,OAAO,SAGhC,MAAMgtC,EAgBd,SAAuBhrB,EAAwBopB,GAC7C,MAAM6B,EAAcjrB,EAAUkrB,iBAAiC,gBACzDC,EAAenrB,EAAUolB,UAE/B,OAAOvjD,MAAMzgB,KAAK6pE,GAAapyE,MAAMuyE,IACnC,MAAM,UAAEC,EAAF,aAAanG,GAAiBkG,EAC9BE,EAAMD,EAAYF,EACxB,OAAQjG,GAAgBoG,GAAOA,IAAQlC,EAhDb,GADX,OA0BSmC,CAAcvrB,EAAWopB,GACzC4B,GACFA,EAAYt4C,UAAU+L,IAAI,SAG5B1Y,SAASrJ,KAAKgW,UAAUsL,OAAO,iCAGlC,CAAC4sC,EAAgBC,KFgMsBW,GAEpC9H,IAAiBhuC,EAAAA,EAAAA,MACjBiuC,IAAyBjuC,EAAAA,EAAAA,MAEzB+1C,IAAe15C,EAAAA,EAAAA,KAAY,KAC/B,GAAIi4C,GAA0B55D,QAE5B,YADA45D,GAA0B55D,SAAU,GAItCszD,GAAetzD,SAAU,EAEzB,MAAM4vC,EAAYlc,EAAa1zB,QAE1B25D,GAAkB35D,SACrBu6D,GAAkB3qB,EAAWopB,GAG/Bd,IAAsB,KACpB5E,GAAetzD,SAAU,GAEzBm6C,EAAAA,EAAAA,KAAQ,KACDvK,EAAU0rB,gBAIf/B,EAAgBv5D,QAAU4vC,EAAUmlB,aAAenlB,EAAUolB,UAEhD,WAAT90E,GACFi5E,EAAgB,CAAEr6E,OAAAA,EAAQC,SAAAA,EAAUoE,aAAco2E,EAAgBv5D,mBAIvE,CAACu6D,GAAmBvB,EAAU94E,EAAMi5E,EAAiBr6E,EAAQC,KAGhEm9B,EAAAA,EAAAA,KAAU,KACR,KAAM,mBAAoB32B,QACxB,OAGF,MAAMg2E,EAAW,IAAIC,gBAAe,IAAa,IAAXnH,GAAW,EAEzCA,EAAMjlB,OAA0BqsB,cAItC3B,GAAmBzF,EAAMqH,YAAYloC,WAKvC,OAFA+nC,EAAS9I,QAAQ/+B,EAAa1zB,SAEvB,KACLu7D,EAASI,gBAEV,IAGH,MAAQnoC,OAAQooC,IAAiBt6B,MAEjCplB,EAAAA,EAAAA,KAAU,KACRwX,EAAa1zB,QAASs0D,QAAQuH,aAAeC,OAAOpoC,EAAa1zB,QAAS80D,gBACzE,CAAC8G,GAAc3C,KAGlB/8C,EAAAA,EAAAA,KAAU,KACR,IAAKm+C,KAAmB5B,GAAgBtmE,GAAgBkmE,EACtD,OAKF,GAD2Bz2E,GAAcA,EAAWA,EAAWyC,OAAS,IAAM+wE,EAAAA,GAE5E,OAGF,MAAMxlB,EAAYlc,EAAa1zB,UAE1Bpe,GACHA,EAAWyC,OAAS4K,EAAAA,GAAqB,GACrC2gD,EAAU/a,kBAAqCknC,cAAgBnsB,EAAUklB,eAE7EuF,OAED,CAAC5B,EAAc72E,EAAYy4E,GAAgBhC,EAAYlmE,KAG1D2jE,EAAAA,GAAAA,IAAY,KACV,IAAKl0E,IAAe83E,GAAoB15D,QACtC,OAGF,MAAMg8D,EAAwBtC,GAAoB15D,QAC/C7d,QAAQsqD,GAAY7qD,EAAWgF,SAAStC,OAAOmoD,EAAQ6nB,QAAQlxE,cAI5DkvC,EAAS0pC,EAAsB,IAAMA,EAAsB,GAC5D1pC,IAIL6gC,EAAYnzD,QAAUsyB,EAAOtyC,GAC7By5E,GAAaz5D,QAAUsyB,EAAOf,wBAAwB2pC,OAErD,CAACt5E,EAAYqxE,EAAkB3L,GAAiB0R,KAGnDiD,EAAAA,GAAAA,IAA4B,IAEtB,IADJC,EAAgBC,EAAsBC,GAClC,EACJ,MAAMxsB,EAAYlc,EAAa1zB,QAC/B05D,GAAoB15D,QAAUyR,MAAMzgB,KAAK4+C,EAAUkrB,iBAAiC,uBAEpF,MAAMuB,EACJz6E,GAAcs6E,GAAkBt6E,EAAWA,EAAWyC,OAAS,KAAO63E,EAAeA,EAAe73E,OAAS,GAEzGi4E,GACJ16E,MAAAA,OAAA,EAAAA,EAAa,OAAOs6E,MAAAA,OAApB,EAAoBA,EAAiB,MAAMt6E,MAAAA,OAAA,EAAAA,EAAYyC,UAAY4K,EAAAA,GAAqB,EAAI,EAExFstE,EAAkBF,IAA0BC,EAC5CE,EAAoB56E,GAAc+3E,GAAkB35D,UAAYpe,EAAWA,EAAWyC,OAAS,GAI/Fo4E,EACJxJ,GACGsJ,GACC36E,GAAcA,EAAWyC,OAAS4K,EAAAA,GAAqB,IACvD2gD,EAAU0rB,cAAeh5C,UAAU+sB,SAAS,0BAC5CO,EAAU/a,kBAAsCknC,cAAyC,EAAzBnsB,EAAUklB,aAG5E2H,IACF7sB,EAAU0rB,cAAeh5C,UAAU+L,IAAI,yBAEvC7oC,YAAW,KACLoqD,EAAU0rB,eACZ1rB,EAAU0rB,cAAch5C,UAAUsL,OAAO,2BA/QhB,MAoR/B,MAAM,UAAEonC,EAAF,aAAaD,EAAb,aAA2BD,GAAiBllB,EAC5CzsD,EAAeo2E,EAAgBv5D,QAC/B08D,EAAkBhD,GAAoB15D,QAAQ05D,GAAoB15D,QAAQ3b,OAAS,GAEzF,IAAIs4E,EAAex5E,GAAgBi5E,GAAuBtH,GACtDyH,IAKFI,GADuBD,EAAkBA,EAAgB5H,aAAe,GAG1E,MAAMI,EAAajC,GAAoBkJ,GAAwBQ,GApS1C,GAsSrB,IAAIC,EAEJ,GAAIL,GAAmBrH,IAAesH,IAChCE,IACFviB,EAAAA,EAAAA,KAAQ,MACN7M,EAAAA,GAAAA,GACEsC,EACA8sB,EACA,MAzSgB,OA+StBE,EAAe7H,EAAeD,EAC9ByE,EAAgBv5D,QAAU1W,KAAKC,IAAID,KAAK0kC,KAAK+mC,EAAe6H,GAAe9H,IAGtE2H,GACH,OASJ,MAAMI,OAAoC19E,IAAxBi9E,GAAqCA,IAAwB9U,GACzEh1B,EAAS6gC,EAAYnzD,SAAW4vC,EAAUvzB,cAAe,IAAG82C,EAAYnzD,WACxEg2D,GACH1jC,GACE8gC,GAA6BpzD,SAC7B4vC,EAAUvzB,cAA+B,mBAG9C,GAAI64C,GAAc2H,EAAW,CAC3B,IAAIC,EAAAA,GAAAA,KACF,OAGFF,EAAe7H,EAAeD,OACrBxiC,GACLihC,GAAuBvzD,UACzBuzD,GAAuBvzD,SAAU,GACjC+8D,EAAAA,GAAAA,GAAoBntB,IAItBgtB,EAAe5H,GADM1iC,EAAOf,wBAAwB2pC,KACRzB,GAAaz5D,SAAW,KAEpE48D,EADS5G,EACM1sE,KAAK2kB,IAClB+nD,EAAciF,WAAajC,EAxVG,GADX,IA0VnBjE,EAAe5xE,GAGF4xE,EAAe5xE,GAGhC65E,EAAAA,GAAAA,GAAYptB,EAAWtmD,KAAK0kC,KAAK4uC,IAE5BjD,GAAkB35D,UACrB45D,GAA0B55D,SAAU,GACpCm6C,EAAAA,EAAAA,KAAQ,KACNyf,GAA0B55D,SAAU,MAIxCu5D,EAAgBv5D,QAAU1W,KAAKC,IAAID,KAAK0kC,KAAK+mC,EAAe6H,GAAe9H,KAO1E,CAAClzE,EAAYqxE,EAAkB3L,GAAiB0R,KAEnDiE,EAAAA,GAAAA,IAAsB,IAA8B,IAA5BC,GAA4B,OACnB/9E,IAA3B+9E,IACFC,EAAAA,GAAAA,IA/WiC,IA+W4B17E,EAAAA,MAE9D,CAACs+C,IAEJ,MAAMl+C,IAAO48B,EAAAA,GAAAA,KAEPjZ,GAAY7hB,QAAQ7E,IAAU2mB,EAAAA,EAAAA,IAAS3mB,IACvCo0E,GAAYvvE,SAAU6hB,KAAckzD,GAAkBtpC,GAAkB06B,GACxE7jB,GAAYtiD,SAASuvE,IAAawF,GAClC0E,IAAuB33D,EAAAA,EAAAA,IAAS3mB,KAAYswC,IAAmB+iC,KAG9Da,KAAkBvuE,GAAe7C,KAE7B83E,GAAoB15D,SAAkD,IAAvC05D,GAAoB15D,QAAQ3b,SAEvC,KAAvBzC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,mBAAxDs0B,MAAAA,GAAA,UAAAA,EAAe/2B,EAAW,WAA1B,mBAA+BmH,QAAQwC,cAAvC,eAA+CrL,OACpC,mBAAvCuE,MAAAA,GAAA,UAAAA,EAAasE,eAAb,mBAAsBwC,cAAtB,eAA8BrL,OAGhC43E,GAAyBa,GAAeloC,GAClB,KAAvB7uC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,gBAAxDs0B,MAAAA,GAAA,UAAAA,EAAe/2B,EAAW,WAA1B,mBAA+BmH,QAAQwC,cAAvC,eAA+CrL,MAE1E+8B,IAAYwE,EAAAA,GAAAA,GAChB,4BACAwkB,IAAa,cACZgzB,GAAW,cACH,WAAT/4E,GAAqB,cACrBg5E,GAAmB,oBACnBn5B,GAAsB,qBACtBu6B,IAAc,YACb75B,GAAW,gBAGd,OACE,0BACEhZ,IAAKiM,EACLzW,UAAWA,GACXogD,SAAUhC,GACV1sC,YAAaogB,GAAAA,GAEZ58C,EACC,0BAAK8qB,UAAU,SACb,+BACGm7C,EAAoBA,EAAkB90E,KAAQ,sBAAoBo1E,EAAgB,UAAY,UAGjGF,EACF,0BAAKv7C,UAAU,SAAQ,gCAAOqf,EAAAA,GAAAA,GAAWz6C,GAAK22E,GAAiB,CAAC,KAAM,QAAS,YAC7E4E,GACF,mBAAC,GAAD,CAAiBjyE,OAAQrM,KACvB8C,GAAgBoxE,KAAiB8E,GAO/Bl2E,GAAcoxE,IAAkBvuE,EACpC,mBAAC,GAAD,CACE3F,OAAQA,EACR8C,WAAYA,GAAc,CAAC6C,EAAazE,IACxCgzE,cAAeA,IAAiB1uB,GAAc,CAAC7/C,IAC/CwuE,iBAAkBtvE,QAAQsvE,GAC1BtpE,SAAUhG,QAAQ+yB,GAClBw8C,UAAWA,GACX7G,mBAAoB7mD,GACpBygC,UAAWA,GACXvS,aAAcA,EACdy/B,YAAaA,EACbC,6BAA8BA,GAC9BC,qBAAsBA,GACtBt0E,SAAUA,EACVmB,KAAMA,EACNugD,QAASA,EACT6yB,eAAgBA,GAChBC,uBAAwBA,GACxBjJ,mBAAoBA,EACpBkJ,cAAeA,EACfC,aAAYT,IAAyB,cAAT9yE,EAC5BsxD,uBAAwBwhB,KAAkB6G,GAA2B75D,QACrE0zD,YAAaA,EACbC,cAAeA,IAGjB,mBAAC5rC,GAAA,EAAD,CAASlJ,MAAM,QAAQy+C,gBAAgB,SAjCvC,mBAAC,GAAD,CACEx+E,OAAQA,EACRoB,KAAMA,EACNkvC,eAAgBA,EAChB0oC,uBAAwBA,UGrblC,IAAen7C,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MAAMuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,MAAO,GAGT,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,MAAO,CACLiH,gBAAAA,EACAkQ,YAAa1R,GAAQxF,IAAakB,EAAAA,IAAsC,WAApB8F,EAA+BxB,EAAK0R,iBAAc9W,KAZxFggC,EA1DgC,IAM9C,IAN+C,QACnD8I,EADmD,QAEnDgxC,EAFmD,gBAGnDlzE,EAHmD,YAInDkQ,EAJmD,eAKnDsnE,GACI,EACJ,MAAM,eAAEC,IAAmB/+D,EAAAA,EAAAA,MAErB5c,GAAO48B,EAAAA,GAAAA,KAEP0O,GAAa7H,EAAAA,EAAAA,IAAuB,MAEpC0W,GAAcra,EAAAA,EAAAA,KAAY,KAC9B,GAAKsG,EAIL,GAAwB,WAApBliC,EACFy3E,QACK,CACL,MAAMpwB,EAAoBjgB,EAAWntB,QAASs7D,cAAej/C,cAA8B,gBACrFohD,EAAkBrwB,EAAkB0tB,iBAAiC,sBACrE4C,EAAqBD,EAAgBA,EAAgBp5E,OAAS,GACpE,IAAKq5E,EACH,QAGFpwB,EAAAA,GAAAA,GAAiBF,EAAmBswB,EAAoB,MA9BzC,OAgChB,CAACz1C,EAASliC,EAAiBy3E,IAExBj1C,GAAe9G,EAAAA,GAAAA,GACnB,mBACAwG,GAAW,YACVgxC,GAAW,cACZsE,GAAkB,oBAGpB,OACE,0BAAK91C,IAAK0F,EAAYlQ,UAAWsL,GAC/B,0BAAKtL,UAAU,0BACb,mBAAC+B,GAAA,EAAD,CACEH,MAAM,YACN7vB,OAAK,EACLwvB,QAASwd,EACTxa,UAAW3/B,EAAK,qBAEhB,wBAAGo7B,UAAU,qBAEdt5B,QAAQsS,IACP,0BAAKgnB,UAAU,iBAAgBC,EAAAA,GAAAA,IAAqBjnB,U,eCxE9D,MAAM0nE,GAAqB,KACrBC,GAAiB,YAERjvE,eAAekvE,GAC5BC,EAAkB3mC,EAAY4mC,EAAkBtnE,GAEhD,MAAMof,EAAUghB,IAAIC,gBAAgBK,IAC5Bj3C,KAAM89E,EAAR,KAAkB/+C,GAASkY,EACjC,IAAI8mC,EACAjoD,EAEJ,GAAIkoD,EAAAA,GAAAA,IAAkCF,GACpC,GAAID,EAAS,CACX,MAAMhnC,QAAYonC,EAAAA,GAAAA,IAAatoD,IACzB,MAAE9H,EAAF,OAASylB,GAAWuD,EAE1B,GAAIhpB,EAAQ4vD,IAAsBnqC,EAASmqC,IAAmC,eAAbK,EAA2B,CAC1F,MAAMI,QAAmB5nC,GAAW3gB,EAAS8nD,GAAqBr0E,KAAKC,IAAIwkB,EAAOylB,GAAS,cAG3F,OAFAqD,IAAIS,gBAAgBzhB,GAEbgoD,GAAgBC,QADDO,EAAAA,GAAAA,IAAUD,IACU,EAAM3nE,GAGjC,eAAbunE,IACFF,EAAWA,EAAS9xD,QAAQ4xD,GAAgB,SAG9CK,EAAQ,CAAElwD,MAAAA,EAAOylB,OAAAA,QAEjBxd,EAAiBH,OAEd,GAAIyoD,EAAAA,GAAAA,IAAkCN,GAAW,CACtD,MAAQO,WAAYxwD,EAAOywD,YAAahrC,EAAlC,SAA0C8nB,SAAmBmjB,EAAAA,GAAAA,IAAa5oD,GAChFooD,EAAQ,CAAElwD,MAAAA,EAAOylB,OAAAA,EAAQ8nB,SAAAA,GAEzBtlC,QAAuB0oD,EAAAA,GAAAA,IAAqB7oD,GAG9C,MAAO,CACLA,QAAAA,EACAioD,SAAAA,EACAE,SAAAA,EACA/+C,KAAAA,EACAg/C,MAAAA,EACAjoD,eAAAA,KACGvf,GCvDQ,SAASkoE,GAAsBC,GAC5C,MAAMC,EAAYt5E,OAAOu5E,eAEzB,GAAID,MAAAA,GAAAA,EAAWE,YAAcF,EAAUG,WAAY,CACjD,MAAMC,EAAQJ,EAAUE,WAAW,GACnCE,EAAMC,iBAEN,MAAMC,EAAWF,EAAMG,yBAAyBR,GAC1CS,EAAmBF,EAASG,UAClCL,EAAMM,WAAWJ,GACbE,GACFJ,EAAMO,cAAcH,GACpBJ,EAAMQ,YAAYJ,IAElBJ,EAAMS,UAAS,GAEjBb,EAAUc,kBACVd,EAAUe,SAASX,I,eCfvB,IAAIY,GASW,SAASC,GAA8BC,GACpDF,GAAW3tC,QACX6tC,EAAQ7tC,QATNngC,EAAAA,KACF8tE,GAAalqD,SAASoiB,cAAc,SACpC8nC,GAAWv9C,UAAU+L,IAAI,kCACzB1Y,SAASrJ,KAAKygC,YAAY8yB,K,+CCH5B,MAEMG,GAAmB,CAAEC,YAFP,IAAIppC,IAAI,aAAyDlT,KAE7Cu8C,aAAa,GAC/CC,GAAc,CAAEjgF,KAAM,aAI5B,IAAIkgF,GACAC,GACAC,GAEG3xE,eAAe4xE,KAOpB,OANKH,KACHA,GAAsB,mCACtBC,UAAsBD,IAAqBI,QAC3CF,GAAgB,IAAID,GAAaL,KAG5BI,GAGFzxE,eAAe8xE,GAAMC,SA6C5B/xE,uBACQ4xE,WACAD,GAAcG,QA9CdE,GAEN,MAAM/xB,EAAYv6C,KAAKC,MACvB,IAAIssE,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BR,GAAcS,gBAAmBC,IAC/BH,EAAO/9E,KAAKk+E,IAGd,MAAMC,EAsCR,SAA6BC,EAAyBxyE,GACpD,MAAMyyE,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAtEM,GAuEfL,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEM58E,EAFM48E,EAAUl/E,QAAO,CAACC,EAAKqd,IAAYrd,EAAMqd,GAAS,GAC1C0hE,EACE,IAzDoC18E,CAAAA,IAC1D87E,EAASh+E,KAAc,IAATkC,GACd07E,EAAiB17E,IAyDjB0J,CAAG1J,EAvFY,GAuFU,EAAIA,GAE7Bi9E,sBAAsBF,GAGxBA,GAEO,KACLD,GAAc,GAnEQI,CAAoB5B,IAK5C,MAAO,CACLnlC,KAAM,IAAM,IAAI/oC,SAAgB,CAACC,EAAS8vE,KACxC7B,GAAc8B,OAAS,KACrB/vE,EAAQ,CACN8kC,KAAM,IAAIP,KAAKiqC,EAAQV,IACvB7kB,SAAUhyD,KAAK0F,QAAQ4xE,GAAYvsE,KAAKC,OAASs6C,GAAa,KAC9DkyB,SAAAA,KAGJR,GAAc+B,QAAUF,EAExB,MAAMG,EAAYh5E,KAAKC,IAAI,EAAGqlD,EAhDT,IAgD0Cv6C,KAAKC,OACpE9O,YAAW,KACT86E,GAAcnlC,OACd8lC,MACCqB,MAEL/oE,MAAO,KACL,MAAM+oE,EAAYh5E,KAAKC,IAAI,EAAGqlD,EAvDT,IAuD0Cv6C,KAAKC,OACpE9O,YAAW,KACT86E,GAAc/mE,QACdqnE,EAAWvsE,KAAKC,MAChB2sE,MACCqB,K,eC1DT,MAAMC,GAA2B,CAAC,YAAa,aAAc,aCS7D,IAAIxgE,GACAC,G,0BCVW,SAASwgE,GACtBC,EAAqBC,EAAYC,GAEjC,MAAMlI,GAAeC,EAAAA,GAAAA,GAAYgI,GAAI,IAC9BjvE,EAAOmvE,IAAYllD,EAAAA,EAAAA,OACnBmlD,EAAU7O,EAAQE,IAAY/pC,EAAAA,GAAAA,KAcrC,OAZAkwB,EAAAA,GAAAA,IAAuB2Z,EAAQE,IAE/B4B,EAAAA,GAAAA,IAAY,KACN+M,GAIJpI,GAAa,KACXmI,EAASH,UAEV,IAAIE,EAAcE,IAEdpvE,ECnBT,MACMqvE,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrBpkE,SAAU,GACVrf,MAAO,GACP0jF,aAAa,EACbC,gBAAiB,IAGbC,GAASxtD,SAASoiB,cAAc,OCPtC,MAAMqrC,IAAe3qE,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAC3C20E,GAAa,mB,eCLnB,MAQA,IAAe1mD,EAAAA,EAAAA,KARgCgL,IAC7C,MAAM,OAAErG,GAAWqG,EACb27C,GAAqBz7C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBxG,GAGjF,OAAOgiD,EAAqB,mBAACA,EAAuB37C,QAAYxoC,K,mNCMlE,IAAIokF,GACAC,IAAwB,EAE5B,MAuCA,IAAe7mD,EAAAA,EAAAA,KAvC6B,IAAoC,IAAnC,WAAE8mD,KAAeC,GAAkB,EAC9E,MAAMr6C,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBqE,GAAmBhI,EAAAA,EAAAA,KAAY,KAInC,GAHA0H,EAAcrpB,SAAU,EAGpBwjE,GAGF,OAFAA,IAAwB,OACxBC,IAIEF,KACFh9E,aAAag9E,IACbA,QAAcpkF,GAEhBokF,GAAch+E,OAAOC,YAAW,KAC1B6jC,EAAcrpB,SAChByjE,MAvBsB,OA0BzB,CAACA,IAEE75C,GAAmBjI,EAAAA,EAAAA,KAAY,KACnC0H,EAAcrpB,SAAU,IACvB,IAEH,OACE,mBAACgf,GAAA,EAAD,MAEM0kD,EAFN,CAGEn5C,aAAepiC,EAAAA,QAAkChJ,EAAnBwqC,EAC9Ba,aAAeriC,EAAAA,QAAkChJ,EAAnByqC,EAC9BpL,QAASilD,Q,0BC7Bf,MAgGA,IAAe9mD,EAAAA,EAAAA,KAhGkB,IAE3B,IAF4B,gBAChCgnD,EADgC,eACfC,EADe,eACCC,EADD,aACiBC,EADjB,aAC+BC,GAC3D,EACJ,MAAOC,EAAkBC,EAAgBC,IAAmB/5C,EAAAA,GAAAA,MACrDR,EAAkBC,EAAkBu6C,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,IAE/FhoD,EAAAA,EAAAA,KAAU,KACJ8nD,GACFG,MAED,CAACH,EAAkBG,IAEtB,MAAME,GAAyB1iD,EAAAA,EAAAA,KAAY,KACrCqiD,EACFE,IAEAD,MAED,CAACD,EAAkBC,EAAgBC,IAEhCI,GAAmB3iD,EAAAA,EAAAA,KAAY,CAACv1B,EAAU2xE,KAC9C,MAAM,MAAEwG,GAAUn4E,EAAEgjD,OAEhBm1B,GAASA,EAAMlgF,OAAS,GAC1By/E,EAAaryD,MAAMzgB,KAAKuzE,GAAQxG,KAEjC,CAAC+F,IAEEU,GAAoB7iD,EAAAA,EAAAA,KAAY,MACpC8iD,EAAAA,GAAAA,GACEhzD,MAAMzgB,KAAK0zE,EAAAA,IAA4BxhF,KAAK,MAC3CkJ,GAAMk4E,EAAiBl4E,GAAG,OAE5B,CAACk4E,IAEEK,GAAuBhjD,EAAAA,EAAAA,KAAY,MACvC8iD,EAAAA,GAAAA,GAAsB,KAAMr4E,GAAMk4E,EAAiBl4E,GAAG,OACrD,CAACk4E,IAEEziF,GAAO48B,EAAAA,GAAAA,KAEb,GAAKklD,EAIL,OACE,0BAAK1mD,UAAU,cACb,mBAAC,GAAD,CACEj9B,GAAG,qBACHi9B,UAAW+mD,EAAmB,+BAAiC,qBAC/Dh1E,OAAK,EACL6vB,MAAM,cACN4kD,WAAYY,EACZ7iD,UAAU,oBACVojD,aAAa,uBACbC,UAAQ,GAER,wBAAG5nD,UAAU,iBAEf,mBAAC0L,GAAA,EAAD,CACE3oC,GAAG,uBACHshC,OAAQ0iD,EACRl7C,WAAS,EACTF,UAAU,QACVC,UAAU,SACVE,QAASm7C,EACTjnD,UAAU,yBACVyV,oBAAqBwxC,EACrB35C,aAAepiC,EAAAA,QAAkChJ,EAAnBwqC,EAC9Ba,aAAeriC,EAAAA,QAAkChJ,EAAnByqC,EAC9Bk7C,mBAAoB38E,EAAAA,GACpB48E,eAAe,uBAMbnB,GACA,mBAACvgD,GAAA,EAAD,CAAUpG,UAAU,iBAAiBoV,UAAQ,GAA7C,uDAEDuxC,GACC,sCACE,mBAACvgD,GAAA,EAAD,CAAUC,KAAK,QAAQ9E,QAASgmD,GAC7B3iF,EAAK,gCAER,mBAACwhC,GAAA,EAAD,CAAUC,KAAK,WAAW9E,QAASmmD,GAAuB9iF,EAAK,oBAGlEgiF,GACC,mBAACxgD,GAAA,EAAD,CAAUC,KAAK,OAAO9E,QAASulD,GAAeliF,EAAK,cCpG7D,IAAe86B,EAAAA,EAAAA,KARwBgL,IACrC,MAAM,OAAErG,GAAWqG,EACbq9C,GAAan9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAexG,GAGjE,OAAO0jD,EAAa,mBAACA,EAAer9C,QAAYxoC,KCGlD,IAAew9B,EAAAA,EAAAA,KAR8BgL,IAC3C,MAAM,OAAErG,GAAWqG,EACbs9C,GAAmBp9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBxG,GAG7E,OAAO2jD,EAAmB,mBAACA,EAAqBt9C,QAAYxoC,KCG9D,IAAew9B,EAAAA,EAAAA,KAR4BgL,IACzC,MAAM,OAAErG,GAAWqG,EACbu9C,GAAiBr9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBxG,GAGzE,OAAO4jD,EAAiB,mBAACA,EAAmBv9C,QAAYxoC,K,eCL1D,MAQA,IAAew9B,EAAAA,EAAAA,KAR4BgL,IACzC,MAAM,OAAErG,GAAWqG,EACbw9C,GAAiBt9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBxG,GAGzE,OAAO6jD,EAAiB,mBAACA,EAAmBx9C,QAAYxoC,K,eCL1D,MAQA,IAAew9B,EAAAA,EAAAA,KAR+BgL,IAC5C,MAAM,OAAErG,GAAWqG,EACby9C,GAAoBv9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsBxG,GAG/E,OAAO8jD,EAAoB,mBAACA,EAAsBz9C,QAAYxoC,KCuEhE,IAAew9B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAuC,IAA9B,UAAEuE,GAA4B,EACrC,MAAM,OAAEtE,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,OAAKC,EAIE,CAAEsD,SAASyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQsE,IAH3C,KAJO+7B,EAvD+B,IAE7C,IAF8C,OAClDmC,EADkD,QAC1Cl/B,EAD0C,QACjC2mC,GACb,EACJ,MAAM,kBAAE2jC,IAAsBjuD,EAAAA,EAAAA,OAEvBkrB,EAAkBC,IAAoBw6C,EAAAA,GAAAA,GAAe9iD,EAAQyH,IAC9D,oBAAEs8C,GAAwBjjF,GAAW,IACpCkjF,EAAWC,EAAeC,IAAmBr7C,EAAAA,GAAAA,IAAQ,GAEtD1B,GAAc9G,EAAAA,EAAAA,KAAY,KAC9B6jD,IACAz8C,MACC,CAACA,EAASy8C,IAMb,IAJAtpD,EAAAA,EAAAA,KAAU,KACRqpD,MACC,CAACA,EAAenjF,MAAAA,OAAhB,EAAgBA,EAASqjF,kBAEvBrjF,GAAYA,EAAQqjF,gBAIzB,OACE,mBAAC98C,GAAA,EAAD,CACErH,OAAQA,GAAUgkD,EAClBx8C,UAAWu8C,EACXz8C,UAAU,QACVC,UAAU,SACVE,QAASN,EACTxL,UAAU,kBACVyV,oBAAqBjK,EACrB8B,aAAepiC,EAAAA,QAAkChJ,EAAnBwqC,EAC9Ba,aAAeriC,EAAAA,QAAkChJ,EAAnByqC,EAC9B87C,WAAS,GAET,0BAAKzoD,UAAU,WACZ76B,EAAQqjF,gBAAgBvjF,KAAKsoD,GAC5B,0BAAKvtB,UAAU,OACZutB,EAAItoD,KAAKgkB,GACR,mBAAC8Y,GAAA,EAAD,CACEuC,QAAM,EACN8Q,SAA0B,kBAAhBnsB,EAAOhmB,KAEjBs+B,QAAS,IAAMkuC,EAAkB,CAAExmD,OAAAA,KAElCA,EAAO5iB,iB,0BC5BxB,MA6EA,IAAeq5B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MAAM,OAAEC,EAAF,SAAUC,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GACxF,IAAKC,IAAWC,IAAagH,EAC3B,MAAO,GAGT,MAAM,cACJ+P,EACApV,iBAAiB,WAAEqG,EAAF,SAAcpG,EAAUiB,WAAY+jF,IACnD9mF,EAEEgF,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAClDwW,EAAgC,cAApBxP,GACd0P,EAAAA,EAAAA,IAAyB5W,EAAQC,IACjC0W,EAAAA,EAAAA,IAAgB3W,EAAQC,EAAQC,GAC9Bw9D,EAAgB19D,EAAOkiB,SAASkP,MAAMD,gBAAkB,EACxD26C,EAAehqE,IAAa7B,EAElC,IAAIsD,EASAQ,EACJ,GATIiB,EACFzB,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQ+E,GACnC0R,EACTnT,GAAUmS,EAAAA,EAAAA,IAAqB1V,EAAQC,EAAQC,EAAUgH,GAChD4kE,GAA8C,IAA9Bgb,EAAmBthF,SAC5CjC,GAAUyQ,EAAAA,EAAAA,IAAkBhU,EAAQkI,EAAa4+E,EAAmB,MAIjEhb,GAAgB9mE,IAAiBzB,EAAS,CAC7C,MAAM,YAAEgjD,GAAgBhjD,EAClBgtC,EAAiBtwC,IAAWgX,EAC9BsvC,IAAgBA,EAAYuoB,eAAiBv+B,KAC/CxsC,GAASy9C,EAAAA,EAAAA,IAAsBxhD,EAAQuD,IAGpCQ,IACHA,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,IAG3BQ,IACHA,GAAS6iB,EAAAA,EAAAA,IAAS1e,IAAekR,EAAAA,EAAAA,IAAWpZ,EAAQkI,IAAevC,EAAAA,EAAAA,IAAW3F,EAAQkI,IAI1F,MAAO,CACLlD,aAAAA,EACA0R,UAAAA,EACAnT,QAAAA,EACAQ,OAAAA,EACA25D,cAAAA,EACAqpB,uBAAwBjb,EAAegb,EAAmBthF,YAASlF,KAnDrDggC,EA3EuC,IAQrD,IARsD,aAC1Dt7B,EAD0D,UAE1D0R,EAF0D,QAG1DnT,EAH0D,OAI1DQ,EAJ0D,cAK1D25D,EAL0D,uBAM1DqpB,EAN0D,QAO1DC,GACI,EACJ,MAAM,gBACJhhF,EADI,aAEJ2P,EAFI,aAGJ1P,EAHI,gBAIJghF,IACErnE,EAAAA,EAAAA,MAEEwpB,EAAUtkC,SACZE,GAAgB0R,IAAcnT,GAC5BQ,GAAUgjF,GAEVG,GAAaC,EAAAA,GAAAA,GACjB,CAACJ,GACDA,EAxB4B,SAwBuBzmF,IAG/C,aACJ0nC,EADI,qBACUE,IACZC,EAAAA,GAAAA,GAAkB++C,GAAc99C,OAAS9oC,GAAYo9D,OAAep9D,GAAYo9D,GAE9E0pB,GAAgBtkD,EAAAA,EAAAA,KAAY,KAC5B99B,EACFgB,EAAgB,CAAEzB,eAAWjE,IACpBoW,EACTf,EAAa,CAAEpR,eAAWjE,IACjBymF,GACTE,IAEFD,MAAAA,GAAAA,MACC,CAAChiF,EAAc0R,EAAWqwE,EAAwBC,EAAShhF,EAAiB2P,EAAcsxE,KAE7F5pD,EAAAA,EAAAA,KAAU,IAAO+L,GAAU3B,EAAAA,GAAAA,GAAsB2/C,QAAiB9mF,GAAY,CAAC8oC,EAASg+C,IAExF,MAAMC,GAAqBvkD,EAAAA,EAAAA,KAAY,KACrC78B,EAAa,CAAEhG,OAAQsD,EAAStD,OAAQsE,UAAWhB,EAASpC,OAC3D,CAAC8E,EAAc1C,IAEZ66B,GAAYwE,EAAAA,GAAAA,GAAe,0BAA2BsF,GAEtDorB,EAAayzB,GAA0BA,EAAyB,EACjE,GAAEA,4BACHzmF,EAEJ,GAAK0nC,EAIL,OACE,0BAAK5J,UAAWA,GACd,8BACE,mBAAC+B,GAAA,EAAD,CAAQhwB,OAAK,EAACm3E,OAAK,EAACtnD,MAAM,cAAc2C,UAAU,kBAAkBhD,QAASynD,GAC3E,wBAAGhpD,UAAU,gBAEf,mBAAC,GAAD,CACEA,UAAU,eACV76B,QAASA,EACTQ,OAAQA,EACRuvD,WAAYA,EACZp2C,MAAOxG,EAAY,oBAAiBpW,EACpCq/B,QAAS0nD,UCpGnB,IAAevpD,EAAAA,EAAAA,KAR6BgL,IAC1C,MAAM,YAAEh0B,GAAgBg0B,EAClBy+C,GAAkBv+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBn0B,EAAYtP,QAGvF,OAAO+hF,EAAkB,mBAACA,EAAoBz+C,QAAYxoC,KCG5D,IAAew9B,EAAAA,EAAAA,KAR4BgL,IACzC,MAAM,OAAErG,GAAWqG,EACb0+C,GAAiBx+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBxG,GAGzE,OAAO+kD,EAAiB,mBAACA,EAAmB1+C,QAAYxoC,KCG1D,IAAew9B,EAAAA,EAAAA,KARuBgL,IACpC,MAAM,OAAErG,GAAWqG,EACb2+C,GAAYz+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcxG,GAG/D,OAAOglD,EAAY,mBAACA,EAAc3+C,QAAYxoC,KCGhD,IAAew9B,EAAAA,EAAAA,KARsBgL,IACnC,MAAM,OAAErG,GAAWqG,EACb4+C,GAAW1+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAaxG,GAG7D,OAAOilD,EAAW,mBAACA,EAAa5+C,QAAYxoC,KCyBxCqnF,GAAU,IAAIC,OAAOC,EAAAA,GAAkB,KAgF7C,IAAe/pD,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAA8C,IAArC,OAAEC,EAAF,SAAUC,GAA2B,EAC5C,MAAMqU,GAAYC,EAAAA,EAAAA,IAAgBxU,EAAQC,EAAQC,GAClD,MAAO,CACL0gC,OAAOC,EAAAA,EAAAA,IAAY7gC,GACnB0X,eAAgB1X,EAAO0X,eACvBnD,UAAAA,KANc+rB,EA9E8B,IAQ5C,IAR6C,OACjDrgC,EADiD,SAEjDC,EAFiD,YAGjD4nF,EAHiD,SAIjDt0C,EAJiD,eAKjD97B,EALiD,UAMjDnD,EANiD,MAOjDqsB,GACI,EACJ,MAAM,mBACJjpB,EADI,oBAEJhD,EAFI,qBAGJozE,IACEnoE,EAAAA,EAAAA,MAEEiB,EAAO8iE,IAAiB,KAC5B,MAAM,KAAEl/E,EAAF,SAAQwQ,IAAa9K,EAAAA,EAAAA,GAAkB29E,GAEvCE,EAAa/yE,GAAYA,EAASrL,MAAK,QAAC,KAAEvI,GAAH,SAAcA,IAAS4mF,EAAAA,GAAAA,WACpE,GAAID,EACF,OAAOA,EAAWn5E,IAGpB,MAAMq5E,EAAYzjF,EAAK6iB,MAAMqgE,IAC7B,OAAIO,EACKA,EAAU,QADnB,IA3BgB,IAgCF,CAACJ,KAEjBzqD,EAAAA,EAAAA,KAAU,KACJxc,EACFlJ,EAAmB,CAAElT,KAAMoc,KAE3BlM,IACAozE,EAAqB,CAAE9nF,OAAAA,EAAQC,SAAAA,OAEhC,CAACD,EAAQ8nF,EAAsBpzE,EAAqBkM,EAAMlJ,EAAoBzX,KAEjF+2E,EAAAA,GAAAA,IAAY,KACVtiE,IACAozE,EAAqB,CAAE9nF,OAAAA,EAAQC,SAAAA,MAC9B,CAACD,IAEJ,MAAMmpC,EAAUtkC,QAAQ4S,GAAkBowE,EAAYtiF,SAAW+O,IAAci/B,IACzE,aAAExL,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiB,GAE3D++C,GAAmBpkC,EAAAA,GAAAA,GAAiBrsC,GAAgB,GAEpD0wE,GAA4BtlD,EAAAA,EAAAA,KAAY,KAC5CilD,EAAqB,CAAE9nF,OAAAA,EAAQC,SAAAA,EAAUqU,WAAW,MACnD,CAACtU,EAAQC,EAAU6nF,IAEtB,IAAK//C,IAAiBmgD,EACpB,OAIF,MAAM,MAAE7xD,KAAU+xD,GAAwBF,EACpCG,EAAc,CAClBp+E,QAAS,CACP83D,QAASqmB,IAIb,OACE,0BAAKjqD,WAAWwE,EAAAA,GAAAA,GAAe,iBAAkBsF,IAC/C,8BACE,mBAAC/H,GAAA,EAAD,CAAQhwB,OAAK,EAACm3E,OAAK,EAACtnD,MAAM,cAAc2C,UAAU,wBAAwBhD,QAASyoD,GACjF,wBAAGhqD,UAAU,gBAEf,mBAAC,GAAD,CAAS76B,QAAS+kF,EAAazmB,WAAS,EAACjhC,MAAOA,UChGxD,IAAe9C,EAAAA,EAAAA,KARwBgL,IACrC,MAAM,OAAErG,GAAWqG,EACby/C,GAAav/C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAexG,GAGjE,OAAO8lD,EAAa,mBAACA,EAAez/C,QAAYxoC,K,ICgJ7CkoF,I,SAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,SAAAA,W,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAA2B,8BA+/BjC,IAAe3qD,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAA+D,gBAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1By5E,EAAUz5E,IAAWyoF,EAAAA,IAAkBpgE,EAAAA,EAAAA,IAActoB,EAAQC,QAAUK,EACvE6gD,EAAgBr8C,QAAQ40E,GACxBnpC,GAAiBC,EAAAA,EAAAA,IAAqBxwC,EAAQC,GAC9C0oF,EAA+BxnC,IAAiBynC,EAAAA,EAAAA,IAA0C5oF,EAAQC,GAClGk5B,GAAeC,EAAAA,EAAAA,IAAmBp5B,EAAQC,IAC1C,SAAE0c,EAAF,sBAAYksE,GAA0B7oF,EAAOkiB,SAASkP,MACtD03D,EAAoB9oF,EAAO6c,cAAcksE,EAAAA,IACzClsE,EAAgBF,IAAaosE,EAAAA,GAA0B/oF,EAAO6c,cAAcF,QAAYrc,EACxF0oF,EAAuBL,EAA+BA,EAA6BxnF,QAAKb,EACxF2oF,EAAkBD,GAAuBh1E,EAAAA,EAAAA,IAAkBhU,EAAQC,EAAQ+oF,QAAwB1oF,GACnG,cAAE2W,GAAkBjX,EACpBkpF,EAAkBxjF,MAAAA,GAAAA,EAAM2T,UAAW3T,MAAAA,GAAA,UAAAA,EAAM2T,gBAAN,eAAgBH,WAAYjC,OAAgB3W,EAC/E4Y,EAAWxT,MAAAA,GAAAA,EAAM4T,WAAa4vE,GAAmBxjF,EAAK4T,UAAUvR,SAASmhF,GAC3EA,EACCxjF,MAAAA,GAAA,UAAAA,EAAMgsC,mBAAN,SAAmBy3C,UAAYzjF,MAAAA,OAA/B,EAA+BA,EAAMvE,QAAKb,EACzC8oF,EAAalwE,GAAWE,EAAAA,EAAAA,IAAWpZ,EAAQkZ,QAAY5Y,EACvD6Y,GAAciwE,GAAclwE,GAAWvT,EAAAA,EAAAA,IAAW3F,EAAQkZ,QAAY5Y,EAEtE0iB,EAAmC,cAApB9b,GACjBmiF,EAAAA,EAAAA,IAA4BrpF,EAAQC,IACpCgjB,EAAAA,EAAAA,GAAmBjjB,EAAQC,EAAQC,GAEvC,MAAO,CACLopF,gBAAgB5zE,EAAAA,EAAAA,IAAqB1V,EAAQC,EAAQC,EAAUgH,GAC/Dq1B,gBAAiBv8B,EAAOu8B,gBACxBxmB,OAAOK,EAAAA,EAAAA,IAAYpW,EAAQC,EAAQC,GACnCwF,KAAAA,EACAy7C,cAAAA,EACA5Q,eAAAA,EACAg5C,wBAAwBC,EAAAA,EAAAA,IAA6BxpF,EAAQC,GAC7D4vC,UAAWnqC,GAAO0qC,EAAAA,EAAAA,IAAc1qC,QAAQpF,EACxCqwC,oBAAoBpqC,EAAAA,EAAAA,IAAyBvG,GAC7CkhD,oBAAoB7Q,EAAAA,EAAAA,IAAqBrwC,GACzCypF,oBACEvpF,IAAakB,EAAAA,IACU,WAApB8F,GACApC,QAAQq0B,MAAAA,OAAD,EAACA,EAAc3zB,QAE3BkkF,eAAoC,cAApBxiF,EAChB8hF,qBAAAA,EACAW,uBAAwBV,MAAAA,OAAF,EAAEA,EAAiBW,oBACzC9d,aAAc7rE,IAAWD,EAAO6B,gBAAgBC,SAChDyH,gBAAiBvJ,EAAOuJ,gBACxBsgF,iBAAkB7pF,EAAO6L,SAAS+P,SAAS/P,SAC3Ci+E,iBAAkBpkF,MAAAA,GAAF,UAAEA,EAAM2T,gBAAR,aAAE,EAAgB2c,QAClC+zD,gBAAe,UAAE/pF,EAAOwoB,qBAAT,aAAE,EAAsBxJ,QACvC/H,cAAAA,EACAmN,aAAcpkB,EAAOokB,aACrBxiB,qBAAsB5B,EAAO2B,SAASC,qBACtCinF,sBAAAA,EACAx7E,aAAcrN,EAAOqN,aACrBy7E,kBAAmBA,MAAAA,OAAF,EAAEA,EAAmB9rE,SACtCH,cAAeA,MAAAA,OAAF,EAAEA,EAAeG,SAC9B0H,WAAY1kB,EAAO0kB,WAAWC,WAC9BqlE,mBAAoBhqF,EAAO0kB,WAAW5H,UACtCmtE,gBAAiBvkF,GAAQA,EAAK2T,UAAY3T,EAAK2T,SAAS6wE,YACxDA,YAAaxQ,GAAWA,EAAQrgE,SAAYqgE,EAAQrgE,SAAS6wE,cAAe,OAAS5pF,EACrF8oF,WAAAA,EACAjwE,WAAAA,EACAD,SAAAA,EACA8J,aAAAA,KA/Dcsd,EAn/BwB,IAyCtC,IAzCuC,cAC3C6pD,EAD2C,eAE3CT,EAF2C,uBAG3CH,EAH2C,QAI3C3nC,EAJ2C,WAK3CwoC,EAL2C,eAM3Cd,EAN2C,OAO3CrpF,EAP2C,SAQ3CC,EAR2C,gBAS3CgH,EAT2C,MAU3C6O,EAV2C,KAW3CrQ,EAX2C,gBAY3C62B,EAZ2C,cAa3C4kB,EAb2C,eAc3C5Q,EAd2C,UAe3CV,EAf2C,mBAgB3Cc,EAhB2C,mBAiB3CuQ,EAjB2C,aAkB3C4qB,EAlB2C,gBAmB3CviE,EAnB2C,qBAoB3Cy/E,EApB2C,uBAqB3CW,EArB2C,oBAsB3CF,EAtB2C,iBAuB3CI,EAvB2C,iBAwB3CC,EAxB2C,gBAyB3CC,EAzB2C,cA0B3C9yE,EA1B2C,aA2B3CmN,EA3B2C,qBA4B3CxiB,EA5B2C,sBA6B3CinF,EA7B2C,kBA8B3CC,EA9B2C,cA+B3CjsE,EA/B2C,aAgC3CxP,EAhC2C,WAiC3CqX,EAjC2C,mBAkC3CslE,EAlC2C,YAmC3CE,EAnC2C,gBAoC3CD,EApC2C,WAqC3Cb,EArC2C,WAsC3CjwE,EAtC2C,SAuC3CD,EAvC2C,aAwC3C8J,GACI,EACJ,MAAM,YACJzQ,EADI,WAEJ83E,GAFI,WAGJ1iE,GAHI,sBAIJ2iE,GAJI,kBAKJC,GALI,gBAMJ1oF,GANI,cAOJkmB,GAPI,eAQJyiE,GARI,qBASJ1xE,GATI,SAUJ5W,GAVI,eAWJuoF,GAXI,oBAYJC,GAZI,WAaJC,GAbI,aAcJ5wD,KACEna,EAAAA,EAAAA,MACE5c,IAAO48B,EAAAA,GAAAA,KAGPgrD,IAAcnkD,EAAAA,EAAAA,IAAuB,OACpCs5C,GAAM8K,KAAWhsD,EAAAA,EAAAA,IAAiB,IACnCisD,IAAUC,EAAAA,GAAAA,GAAYhL,IACtBiL,IAA6BvkD,EAAAA,EAAAA,MAC7BwkD,IAAoB/wB,EAAAA,GAAAA,GAAYiwB,IAC9Bj7D,MAAOF,IAAgBC,EAAAA,EAAAA,MACzB3V,GAAY5T,MAAAA,OAAH,EAAGA,EAAM4T,UAClB4xE,GAAgB5xE,KAAcA,GAAU9T,OAAS,IAAM8T,GAAUvR,SAASkP,KAEzEk0E,GAAoBC,GAAqBC,KAA6B//C,EAAAA,GAAAA,KACvEggD,IAAoBC,EAAAA,GAAAA,GAAqBtrF,EAAQC,GAEjDsrF,IAAuB1oD,EAAAA,EAAAA,KAAY,KACvCuoD,OACC,CAACA,MACGI,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYpC,EAAwBiC,KAExEnuD,EAAAA,EAAAA,KAAU,KACR2tD,GAA2B7pE,aAAU7gB,IACpC,CAACL,KAEJo9B,EAAAA,EAAAA,KAAU,KACJp9B,GAAUmkB,GAAgBlkB,IAAakB,EAAAA,IAAkBwgD,GAC3D9oC,GAAqB,CAAE7Y,OAAAA,MAExB,CAAC2hD,EAAS3hD,EAAQ6Y,GAAsBsL,EAAclkB,KAEzDm9B,EAAAA,EAAAA,KAAU,KACJp9B,GAAUyF,GAAQ0e,IAAiB9K,IAAasoC,IAAW3Q,EAAAA,EAAAA,IAAiBvrC,IAC9EilF,GAAW,CAAE1qF,OAAAA,MAEd,CAACyF,EAAMzF,EAAQ2hD,EAASx9B,EAAcumE,GAAYrxE,MAErD+jB,EAAAA,EAAAA,KAAU,KACJp9B,GAAUyF,GAAQ0e,IAAiB1e,EAAK2T,UAAYuoC,IAAW3Q,EAAAA,EAAAA,IAAiBvrC,IAClFq0B,GAAa,CAAE95B,OAAAA,MAEhB,CAACyF,EAAMzF,EAAQ2hD,EAASx9B,EAAc2V,KAEzC,MAAM6xD,IAA+BnlD,EAAAA,EAAAA,KAAO,IAC5CwwC,EAAAA,GAAAA,IAAY,IAAiC,IAA/B4U,EAAYC,GAAmB,EAE3CF,GAA6BzqE,QAAUrc,QAAQ7E,IAAW4rF,GAAcvyE,KAAcwyE,KACrF,CAAC7rF,EAAQqZ,MAEZg7B,EAAAA,EAAAA,KAAgB,KACTs2C,GAAYzpE,UAEjBypE,GAAYzpE,QAAQm1B,UA/GP,ivBAgHZ,IAEH,MAAOxhC,GAAai3E,KAAkBltD,EAAAA,EAAAA,IAA0B,KAEzDmtD,GAAmBC,GAAiBC,KAAoB5gD,EAAAA,GAAAA,MACxD6gD,GAAsBC,GAAoBC,KAAuB/gD,EAAAA,GAAAA,MACjEghD,GAAkBC,GAAgBC,KAAmBlhD,EAAAA,GAAAA,MACrDmhD,GAAkBC,GAAgBC,KAAmBrhD,EAAAA,GAAAA,MACrDshD,GAAmBC,GAAiBC,KAAoBxhD,EAAAA,GAAAA,MACxDyhD,GAAoBC,KAA+B1hD,EAAAA,GAAAA,MACnD2hD,GAAiBC,GAAcC,KAAe7hD,EAAAA,GAAAA,MAE/C,oBACJ8hD,GADI,mBAEJC,GAFI,oBAGJC,GAHI,qBAIJC,GAJI,kBAKJC,GACAC,gBAAiBC,GANb,mBAOJC,ICzSsB,MAExB,MAAMF,GAAkBhnD,EAAAA,EAAAA,IAA0B,OAC3C8mD,EAAsBK,IAA2B/uD,EAAAA,EAAAA,MAClD8uD,GAAqBlnD,EAAAA,EAAAA,OACpB+mD,EAAmBK,IAAwBhvD,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJywD,EAAAA,IAAaC,EAAAA,IACVC,OAEN,IAEH,MAAMZ,GAAsBtqD,EAAAA,EAAAA,KAAYhzB,UACtC,IACE,MAAM,KAAEwsC,EAAF,MAAQ5hC,SAAgBszE,IAAsBC,IAC9CR,EAAgBtsE,UACdwsE,EAAmBxsE,SAAW3L,KAAKC,MAAQ,GAAM,IACnDg4E,EAAgBtsE,QAAQ6tB,MAAMk/C,UAAa,SAA4B,IAAnBD,GAAc,wBAEpEJ,EAAqBr4E,KAAKC,WAG9Bk4E,EAAmBxsE,QAAU3L,KAAKC,MAClCo4E,EAAqBr4E,KAAKC,OAE1Bm4E,EAAwB,CAAEtxC,KAAAA,EAAM5hC,MAAAA,IAChC,MAAO9L,GAEP0T,QAAQjT,MAAMT,MAEf,IAEG0+E,GAAsBxqD,EAAAA,EAAAA,KAAY,KACtC,GAAKyqD,EAAL,CAIIE,EAAgBtsE,UAClBssE,EAAgBtsE,QAAQ6tB,MAAMk/C,UAAY,QAE5C,IACE,OAAOX,EAAsB7yE,QAC7B,MAAO9L,GAGP,YADA0T,QAAQjT,MAAMT,OAGf,CAAC2+E,IAEEF,GAAqBvqD,EAAAA,EAAAA,KAAY,KACrC,GAAKyqD,EAAL,CAIAK,OAAwBttF,GACxBqtF,EAAmBxsE,aAAU7gB,EAC7ButF,OAAqBvtF,GACjBmtF,EAAgBtsE,UAClBssE,EAAgBtsE,QAAQ6tB,MAAMk/C,UAAY,QAE5C,IACE,OAAOX,EAAsBjxC,OAC7B,MAAO1tC,GAGP,YADA0T,QAAQjT,MAAMT,OAGf,CAAC2+E,IAMJ,OAJAlwD,EAAAA,EAAAA,KAAU,IACDkwD,GAAuB9lD,EAAAA,GAAAA,GAAsB4lD,QAAsB/sF,GACzE,CAACitF,EAAsBF,IAEnB,CACLD,oBAAAA,EACAE,oBAAAA,EACAD,mBAAAA,EACAE,qBAAAA,EACAC,kBAAAA,EACAC,gBAAAA,EACAE,mBAAAA,IDwNEQ,IAEJjoB,EAAAA,GAAAA,IAAY,KACVolB,GAAkB,CAAEjqF,KAAM,kBACzBksF,IAAwBa,EAAAA,KAE3B/wD,EAAAA,EAAAA,KAAU,KACHkwD,IACHjC,GAAkB,CAAEjqF,KAAM,aAE3B,CAACksF,GAAsBjC,KAE1B,MAAM+C,GAAkB/E,EAAiBd,GAAgB8F,MACnDP,EAAAA,IAAgCR,IAAyBxN,KAASjrE,GAAYtP,QAAWsmE,EACxF4d,EAAiBlB,GAAgB+F,SAAW/F,GAAgBgG,KAC7DhG,GAAgBiG,OAChBC,IAAyBhF,GAEzB,qBACJiF,GADI,oBACkBC,GADlB,cACuCC,GADvC,qBACsDC,KACxDC,EAAAA,GAAAA,IACDj6E,GAAYtP,OACbslF,GACAD,QACAvqF,EACAwpF,EACAC,EACA9yE,IAIAwrB,OAAQusD,GACR7tF,GAAI8tF,GACJ9lE,UAAW+lE,GACXvmE,SAAUwmE,GACVjjF,QAASkjF,GACTC,aAAcC,GACdpmE,KAAMqmE,GACNC,SAAUC,IlBvUC,SACbl1B,EACAt6D,EACA8/E,EACAr7D,GAEA,MAAM,eAAEgrE,EAAF,eAAkBC,IAAmB/vE,EAAAA,EAAAA,OAEpC6iB,EAAQmtD,EAAYC,IAAgBvkD,EAAAA,GAAAA,MACrC,SACJvrB,EADI,MACMrf,EADN,YACa0jF,EADb,gBAC0BC,GAC5BV,IAAiB,IAuDvB,SAAuB5D,GACrB,MAAMt7E,EAcR,SAAsBs7E,GAGpB,OAFAuE,GAAOhuC,UAAYypC,EAAK5yD,QAAQ,QAAS,MAElCm3D,GAAOwL,UAjBDC,CAAahQ,GACpB38E,EAASqB,EAAK6iB,MAAM28D,IAC1B,OAAK7gF,EAIE,CACL2c,SAAU3c,EAAO,GACjB1C,MAAO0C,EAAO,GACdghF,YAA2B,KAAdhhF,EAAO,KAAcqB,EAAK6iB,MAAM48D,IAC7CG,gBAAiBjhF,EAAO,GAAGm8B,eAPpB4kD,GA3DkB6L,CAAcjQ,IAvBvB,IAuB2C,CAACA,KAAU,GAClEkQ,GAAY/1B,EAAAA,GAAAA,GAAYx5D,GACxBwvF,GAAeh2B,EAAAA,GAAAA,GAAYn6C,GAC3B0I,EAAgB47D,EAAkB3/D,MAAAA,OAAH,EAAGA,EAAa2/D,QAAmB/jF,GAEtEa,GAAIqoB,EADA,SAEJb,EAFI,OAGJ7Q,EAHI,QAIJ5L,EAJI,UAKJid,EALI,KAMJD,GACET,GAAiB,IAErB4U,EAAAA,EAAAA,KAAU,KACJ4yD,IAAcvvF,GAChBmvF,MAED,CAACI,EAAWvvF,EAAOmvF,KAEtBxyD,EAAAA,EAAAA,KAAU,KACJk9B,GAAa8pB,GAAmBpkF,GAClCyvF,EAAe,CAAEzvF,OAAAA,EAAQ8f,SAAUskE,EAAiB3jF,MAAAA,MAErD,CAACA,EAAO65D,EAAWm1B,EAAgBzvF,EAAQokF,IAE9C,MAAMmL,GAAW1sD,EAAAA,EAAAA,KAAY,KAC3B4sD,EAAe,CACbzvF,OAAAA,EAAQ8f,SAAUskE,EAAiB3jF,MAAAA,EAAOoX,OAAAA,MAE3C,CAACA,EAAQ7X,EAAQS,EAAOgvF,EAAgBrL,IAc3C,OAZAhnD,EAAAA,EAAAA,KAAU,KACJk9B,GAAa/wC,IAAUb,GAAazc,MAAAA,GAAAA,EAAS1G,QAC/CoqF,IAEAC,MAED,CAACrmE,EAAO+wC,EAAWq1B,EAAY1jF,EAASyc,EAAUknE,IAEjDK,IAAiBnwE,GACnB4vE,EAAe,CAAE5vE,SAAUmwE,IAGtB,CACLztD,OAAAA,EACAthC,GAAIqoB,EACJL,UAAAA,EACAR,SAAAA,EACAzc,QAAAA,EACAmjF,aAAcQ,EACd3mE,KAAMk7D,GAAel7D,EAAQ,IAAGnJ,KAAYmJ,SAAS5oB,EACrDkvF,SAAAA,GkB0QEW,CACFrrF,SAASgQ,GAAYtP,QAAU4e,GAC/BnkB,EACA8/E,GACAr7D,IAIA+d,OAAQ2tD,GACRC,MAAOC,GACPC,oBAAqBC,IjBxVV,SACbj2B,EACAwlB,EACAmK,EACAD,GAEA,MAAOxnD,EAAQmtD,EAAYC,IAAgBvkD,EAAAA,GAAAA,MACpCilD,EAAqBE,IAA0B5xD,EAAAA,EAAAA,MAEhD6xD,GAAsB5tD,EAAAA,EAAAA,KAAax/B,IAClC4mF,GAAgBD,EAMrB1F,IAAa,KACX,MAAMoM,GAA2BzG,GAAeD,GAAmB,IAChE3mF,QAAO,QAAC,QAAE8jB,GAAH,SAAkB9jB,GAAU8jB,EAAQrf,SAASzE,MACvDmtF,EACEE,GAA2BA,EAAwBnrF,OAASmrF,OAA0BrwF,MATxFmwF,OAAuBnwF,KAYxB,CAAC4pF,EAAaD,IA0BjB,OAxBA5sD,EAAAA,EAAAA,KAAU,KACR,GAAKk9B,GAAcwlB,EAAKv6E,OAOxB,GAF2Bu6E,EAAKj4C,WAAW,KAEnB,CACtB,MAAMxkC,GAASstF,EAAAA,GAAAA,GAAiB7Q,EAAK8Q,OAAO,IAAIvpE,MAAMk9D,IACtDkM,EAAoBptF,EAASA,EAAO,GAAK,SAEzCmtF,OAAuBnwF,QAVvBmwF,OAAuBnwF,KAYxB,CAACowF,EAAqB3Q,EAAMxlB,EAAWs1B,KAE1CxyD,EAAAA,EAAAA,KAAU,KACJkzD,GAAuBA,EAAoB/qF,QAAUu6E,EAAKv6E,OAAS,EACrEoqF,IAEAC,MAED,CAACU,EAAqBxQ,EAAKv6E,OAAQoqF,EAAYC,IAE3C,CACLptD,OAAAA,EACA4tD,MAAOR,EACPU,oBAAAA,GiBqSEO,CACFhsF,QAASolF,GAAeA,EAAY1kF,QAAYykF,GAAmBA,EAAgBzkF,QACnFu6E,GACAmK,EACAD,IAIAj3B,kBAAmB+9B,GADf,kBAEJrgC,GAFI,uBAGJwC,GAHI,sBAIJC,KACEC,EAAAA,GAAAA,GAAuBs6B,KAAiBW,KAAoB7F,GAAgBgG,MAAQE,MAElF,gBACJsC,GADI,YACaC,GADb,eAC0BlM,GAD1B,eAC0CC,GAD1C,oBAC0DkM,KAC5DpvD,EAAAA,EAAAA,KAAQ,KAAMqvD,EAAAA,EAAAA,IAA4BzrF,EAAMy7C,IAAgB,CAACz7C,EAAMy7C,IAErE/qB,GAAU1wB,IAAQ0rF,EAAAA,EAAAA,IAAY1rF,GAC9B2rF,IAAWC,EAAAA,EAAAA,IAAuB5rF,IAElC,qBAAE6rF,GAAF,oBAAwBC,IEjXjB,SACbj3B,EACAwlB,EACAl0E,GAEA,IADA6yB,EACA,wDACA,MAAM+yD,GAAY3vD,EAAAA,EAAAA,KAAQ,KAAM8uD,EAAAA,GAAAA,GAAiB7Q,GAAM2R,QAAQ,CAAC3R,KAC1D,qBAAE1iE,EAAF,sBAAwBs0E,IAA0B/xE,EAAAA,EAAAA,MAClDysD,EACHulB,EAAAA,IAA0D,KAApCC,EAAAA,GAAAA,GAAqBJ,KACvCG,EAAAA,IAAsB9sF,QAAQi7E,EAAKz4D,MAAM,oBAE1CwqE,EAAchtF,QAAQ+G,IAAawgE,EAgBzC,OAdAhvC,EAAAA,EAAAA,KAAU,KAGwB,MAF5BqB,IAEA67B,GAAa8R,EACfhvD,EAAqB,CACnBjQ,MAAOwkF,EAAAA,GAAqBH,EAAH,UAAeA,EAAUnqE,MAAM,qBAA/B,aAAe,EAAgC,MAEjEwqE,GAAgBzlB,GACzBslB,OAID,CAAC5R,EAAM1T,EAAeslB,EAAuBt0E,EAAsBk9C,EAAW77B,IAE1E,CACL6yD,qBAAsBO,EACtBN,oBAAqBG,GFmV+BI,CACpDjtF,QAAQ+jF,GAAyBmI,KAAoBl8E,GAAYtP,QACjEu6E,GACA8J,GACCjoC,IAEG,mBACJowC,GADI,kBACgBC,GADhB,eACmCC,GADnC,YACmDC,KACrDC,EAAAA,GAAAA,GACFttF,QAAQ+jF,GAAyBmI,KAAoBl8E,GAAYtP,QACjEslF,GACAz9E,OACA/M,EACAuqF,GACA/B,EACAjsE,GACC+kC,GAGGywC,IAA4BvvD,EAAAA,EAAAA,KAAY,SAACr+B,GAAsD,IAAxCwgC,EAAwC,uDAAtBoe,EAAAA,GAC7E,MAAM28B,EAAYt5E,OAAOu5E,eACnB78B,EAAetsB,SAAS+W,eAAe5I,GACvCqtD,GAAU70C,EAAAA,GAAAA,GAAWh5C,EAAM,CAAC,cAAe,aAAc,YAC5DJ,KAAK,IACL8oB,QAAQ,WAAY,KAEvB,GAAI6yD,EAAUG,WAAY,CACxB,MAAMoS,EAAiBvS,EAAUE,WAAW,GAC5C,IAAIsS,EAAAA,GAAAA,GAAuBD,EAAgBttD,GAGzC,OAFA66C,GAAsBwS,QACtBlvC,EAAaqvC,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,KAK7D9H,GAAS,GAAEC,GAAQ3pE,UAAWmxE,KAG9BlP,uBAAsB,MACpBwP,EAAAA,GAAAA,GAAqBxvC,QAEtB,CAAC0nC,KAEE+H,IAAe/vD,EAAAA,EAAAA,KAAY,KAC/B,MAAMk9C,EAAYt5E,OAAOu5E,eAEzB,GAAID,EAAUG,WAAY,CACxB,MAAMoS,EAAiBvS,EAAUE,WAAW,GAC5C,IAAIsS,EAAAA,GAAAA,GAAuBD,EAAgBlvC,EAAAA,IAEzC,YADAvsB,SAASg8D,YAAY,UAAU,GAKnCjI,GGjbW,SAA6C9K,GAC1D,MAAMgT,EAAYj8D,SAASoiB,cAAc,OACzC65C,EAAUC,gBAAkB,OAC5BD,EAAU/jD,MAAMzsC,SAAW,WAC3BwwF,EAAU/jD,MAAMgf,KAAO,WACvB+kC,EAAU/jD,MAAMqtC,IAAM,WACtB0W,EAAUz8C,UAAYypC,EACtBjpD,SAASrJ,KAAKygC,YAAY6kC,GAC1B,IAAInlC,EAAUmlC,EAAUtS,UAExB,GAAI7yB,EAAQ6yB,UAEV,KAAO7yB,EAAQ6yB,WACb7yB,EAAUA,EAAQ6yB,UAKtB,MAAMwS,EAAarlC,EAAQ0S,YAAa96D,OAClC46E,EAAQtpD,SAASo8D,cACjBlT,EAAYt5E,OAAOu5E,eAGzBG,EAAM+S,SAASvlC,EAASqlC,GACxB7S,EAAMgT,OAAOxlC,EAASqlC,GACtBjT,EAAUc,kBACVd,EAAUe,SAASX,GACnBtpD,SAASg8D,YAAY,UAAU,GAE/B,MAAM1vF,EAAS2vF,EAAUz8C,UAGzB,OAFAxf,SAASrJ,KAAK4lE,YAAYN,GAEnB3vF,EHiZGkwF,CAAoCxI,GAAQ3pE,YACnD,CAAC2pE,KAEEyI,IAAgBzwD,EAAAA,EAAAA,KAAY,WAAiC,IAAhC0wD,EAAgC,wDAC5DA,GACH3I,GAAQ,IAEVkB,GAAe/qF,EAAAA,GACfwwF,KACA5C,KACAqD,KAEIjlF,EAAAA,GAEFrG,YAAW,IAAM6lF,MAjRY,KAmR7BA,OAED,CAACgF,GAAqB5C,GAAqBqD,GAAmBzF,KAG3DiH,IAAwBhtD,EAAAA,EAAAA,MAC9BgtD,GAAsBtyE,QAAUksE,IAChChwD,EAAAA,EAAAA,KAAU,IACD,KACLo2D,GAAsBtyE,UACtBoyE,OAED,CAACtzF,EAAQszF,GAAeE,KAE3B,MAAOC,GAAoBC,II/bV,EACjB7I,EACAD,EACA+I,EACAL,EACA1G,EACA5sF,EACAC,EACAmB,EACA0U,EACAiN,KAEA,MAAM,YAAE6wE,EAAF,gBAAeC,IAAoBl0E,EAAAA,EAAAA,OAEzCw+D,EAAAA,GAAAA,IAAsB,IAAyB,IAAvB2V,GAAuB,EAC7C,IAAKH,EACH,OAEF,IAAIG,MAAAA,OAAA,EAAAA,EAAmB5yF,MAAOyyF,EAAczyF,GAC1C,OAGF,MAAM4+E,GAAOiU,EAAAA,GAAAA,GAA0BhxE,MAAAA,GAAAA,EAAcve,KAAKe,OAASwd,EAAe4wE,EAAc1pF,QAAQzF,MACxGomF,EAAQ9K,GAERqD,uBAAsB,KACpB,MAAMhgC,EAAetsB,SAAS+W,eAAewV,EAAAA,KAC7CuvC,EAAAA,GAAAA,GAAqBxvC,GAAc,QAEpC,CAACwwC,EAAe/I,KAEnBxtD,EAAAA,EAAAA,KAAU,KACR,GAAKu2D,EACL,MAAO,KAEL,MAAMK,GAAS9pF,EAAAA,EAAAA,GAAkB2gF,EAAQ3pE,SACnCb,EAAS2zE,EAAOxvF,KAAKe,OAASyuF,OAAS3zF,EAC7CwzF,EAAgB,CACd7zF,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAM6b,OAGjC,CAACrgB,EAAQ2zF,EAAe9I,EAASgJ,EAAiB5zF,EAAUmB,IAE/D,MAAM6yF,GAA8BpxD,EAAAA,EAAAA,KAAY,KACzC/sB,IAELulD,EAAAA,EAAAA,KAAQ,KACNuvB,GAAQmJ,EAAAA,GAAAA,GAA0Bj+E,IAClC,MAAMqtC,EAAetsB,SAAS+W,eAAewV,EAAAA,IAC7C+/B,uBAAsB,MACpBwP,EAAAA,GAAAA,GAAqBxvC,GAAc,WAGtC,CAACrtC,EAAO80E,IAEL8I,GAAmB7wD,EAAAA,EAAAA,KAAY,KACnCywD,IACAW,MACC,CAACX,EAAeW,IAEbR,GAAqB5wD,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAEr+B,EAAF,SAAQwQ,IAAa9K,EAAAA,EAAAA,GAAkB2gF,EAAQ3pE,SAEhDyyE,IAIAnvF,IAAS0vF,EAAAA,EAAAA,IAAgBP,IAK9BC,EAAY,CACVtvF,UAAWqvF,EAAczyF,GACzBsD,KAAAA,EACAwQ,SAAAA,IAGFs+E,IACAW,KAXErH,OAYD,CAACgH,EAAaD,EAAe9I,EAAS+B,EAAiB0G,EAAeW,IAEnEE,GAAatxD,EAAAA,EAAAA,KAAY,KAC7B,IAAK8wD,EAAe,OACpB,MAAMK,GAAS9pF,EAAAA,EAAAA,GAAkB2gF,EAAQ3pE,SACnCb,EAAS2zE,EAAOxvF,KAAKe,OAASyuF,OAAS3zF,EAC7CwzF,EAAgB,CACd7zF,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAM6b,MAE/B,CAACrgB,EAAQ2zF,EAAe9I,EAASgJ,EAAiB5zF,EAAUmB,IAK/D,OAHAk6D,EAAAA,GAAAA,GAAkB64B,GAClBj3D,GAAgBi3D,GAET,CAACV,EAAoBC,IJiWmBU,CAC7CvJ,GACAD,GACAvB,EACAiK,GACA1G,GACA5sF,EACAC,EACAgH,EACA6O,EACAiN,GpBtca,EACfjN,EACA9V,EACAC,EACA4qF,EACAD,EACA+I,KAEA,MAAM,UAAEU,EAAF,WAAajK,IAAezqE,EAAAA,EAAAA,MAE5B20E,GAAczxD,EAAAA,EAAAA,KAAY,CAAC0xD,EAAqBC,KACpD,MAAMC,EAAc5J,EAAQ3pE,QACxByyE,IACAc,EAAYlvF,OACd8uF,EAAU,CAAEr0F,OAAQu0F,EAAat0F,SAAUu0F,EAAe1+E,OAAO5L,EAAAA,EAAAA,GAAkBuqF,UAC1Dp0F,IAAhBo0F,GACTrK,EAAW,CAAEpqF,OAAQu0F,EAAat0F,SAAUu0F,OAE7C,CAACpK,EAAYuJ,EAAe9I,EAASwJ,IAGlCK,GAA2B7yD,EAAAA,EAAAA,KAAQ,KAAMlyB,EAAAA,EAAAA,KAAUC,GAAOA,KAAM+kF,EAAAA,IAAgB,IAAQ,CAAC30F,IAEzF4rF,GAAa3xB,EAAAA,GAAAA,GAAYj6D,GACzB40F,GAAe36B,EAAAA,GAAAA,GAAYh6D,IAGjCm9B,EAAAA,EAAAA,KAAU,KACRna,GAAgBjjB,EAChBkjB,GAAkBjjB,EAEX,KACLgjB,QAAgB5iB,EAChB6iB,QAAkB7iB,EAElBi0F,EAAYt0F,EAAQC,MAErB,CAACD,EAAQC,EAAUq0F,KAGtBl3D,EAAAA,EAAAA,KAAU,KACJp9B,IAAW4rF,GAAc3rF,IAAa20F,IAItCjB,GAAkB79E,IAItB80E,GAAQmJ,EAAAA,GAAAA,GAA0Bj+E,IAE7BzM,EAAAA,IACH85E,uBAAsB,KACpB,MAAMhgC,EAAetsB,SAAS+W,eAAewV,EAAAA,KAC7CuvC,EAAAA,GAAAA,GAAqBxvC,GAAc,SAGtC,CAACnjD,EAAQC,EAAU6V,EAAO80E,EAAS0J,EAAa1I,EAAYgJ,EAAcjB,IAE7E,MAAM7T,EAAO+K,EAAQ3pE,QAEf2zE,GAAW56B,EAAAA,GAAAA,GAAY6lB,IAC7B1iD,EAAAA,EAAAA,KAAU,KACHp9B,GAAWC,GAAY2rF,IAAe5rF,GAAU40F,IAAiB30F,GAAY40F,IAAa/U,IAI3FA,EAAKv6E,OACPmvF,GAAyB,KACnBzxE,KAAkBjjB,GAAUkjB,KAAoBjjB,GAIpDq0F,EAAYt0F,EAAQC,MAGtBq0F,EAAYt0F,EAAQC,MAErB,CAACD,EAAQ8/E,EAAM8L,EAAYiJ,EAAUD,EAAcF,EAA0Bz0F,EAAUq0F,IAE1F,MAAMH,GAAatxD,EAAAA,EAAAA,KAAY,KACzB7iC,GAAUC,GACZq0F,EAAYt0F,EAAQC,KAErB,CAACD,EAAQC,EAAUq0F,KAEtBh5B,EAAAA,GAAAA,GAAkB64B,GAClBj3D,GAAgBi3D,IoBiXhBW,CAASh/E,EAAO9V,EAAQC,EAAU4qF,GAASD,GAASvB,GrBjd5B,EACxB+I,EACAtG,EACA6H,MAEAv2D,EAAAA,EAAAA,KAAU,KACRvtB,eAAeklF,EAAYznF,GACzB,IAAKA,EAAE0nF,cACL,OAGF,MAAMC,EAAQp+D,SAASq+D,cACvB,GAAID,IAAU,CAAC7xC,EAAAA,GAAmB+xC,EAAAA,IAAyBrtF,SAASmtF,EAAM/zF,IACxE,OAGF,MAAMk0F,EAAa9nF,EAAE0nF,cAAcK,QAAQ,QAAQC,UAAU,EAlBxC,OAmBf,MAAEC,GAAUjoF,EAAE0nF,cACpB,IAAIvP,EAAgB,GAOpB,GALAn4E,EAAEswB,iBACE23D,EAAMhwF,OAAS,IACjBkgF,QAAc+P,EAAAA,GAAAA,GAA8BD,IAGzB,IAAjB9P,EAAMlgF,QAAiB6vF,EAA3B,CAIA,GAAI3P,EAAMlgF,OAAS,IAAMouF,EAAe,CACtC,MAAM8B,QAAuBniF,QAAQoiF,IAAIjQ,EAAMriF,KAAKuyF,GAC3C5W,GAAgB4W,EAAK1jE,KAAM0jE,EAAuB,IAAjBlQ,EAAMlgF,QAAgBk+E,GAAyB37E,SAAS6tF,EAAKv0F,UAEvG0qF,GAAgBj3E,GAAgBA,EAAYlE,OAAO8kF,KAGjDL,GACFhD,EAA0BgD,EAAYH,MAAAA,OAAb,EAAaA,EAAO/zF,KAMjD,OAFA21B,SAASmI,iBAAiB,QAAS+1D,GAAa,GAEzC,KACLl+D,SAASoI,oBAAoB,QAAS81D,GAAa,MAEpD,CAAC3C,EAA2BuB,EAAe7H,KqBoa9C8J,CAAkBxD,GAA2BtG,GAAgBzC,GAE7D,MAAMwM,IAAsBhzD,EAAAA,EAAAA,KAAY,KAClCwmD,GACFqK,OAED,CAACrK,EAAgBqK,KAEdlO,IAAmB3iD,EAAAA,EAAAA,KAAYhzB,MAAO41E,EAAexG,KACzD6M,SAAqBx4E,QAAQoiF,IAAIjQ,EAAMriF,KAAKuyF,GAAS5W,GAAgB4W,EAAK1jE,KAAM0jE,EAAM1W,SACrF,IAEG6W,IAAoBjzD,EAAAA,EAAAA,KAAYhzB,MAAO41E,EAAexG,KAC1D6M,GAAe,IACVj3E,YACMvB,QAAQoiF,IAAIjQ,EAAMriF,KAAKuyF,GAAS5W,GAAgB4W,EAAK1jE,KAAM0jE,EAAM1W,UAE3E,CAACpqE,KAEEkhF,IAAwBlzD,EAAAA,EAAAA,KAAY,KACxCipD,GAAe/qF,EAAAA,KACd,IAEGi1F,IAAanzD,EAAAA,EAAAA,KAAYhzB,iBAAkD,IAA3CyG,EAA2C,wDAAzBjC,EAAyB,uCAC/E,GAAwB,yBAApBioB,EACF,OAGF,IAAI25D,EAAqBphF,GAEzB,GAAIy4E,GAAsB,CACxB,MAAM4I,QAAe9I,KACrB,GAAI8I,EAAQ,CACV,MAAM,KAAE79C,EAAF,SAAQmkB,EAAR,SAAkBwlB,GAAakU,EACrCD,EAAqB,OAAOlX,GAC1ByJ,GACAnwC,GACA,EACA,CAAEyB,MAAO,CAAE0iB,SAAAA,EAAUwlB,SAAAA,OAK3B,MAAM,KAAEx9E,EAAF,SAAQwQ,IAAa9K,EAAAA,EAAAA,GAAkB2gF,GAAQ3pE,SAErD,IAAK+0E,EAAmB1wF,SAAWf,IAASqnE,EAC1C,OAIF,MAAM,iBAAE7hE,IAAqBrD,EAAAA,EAAAA,MAEvBwvF,EAAYF,EAAmB1wF,OAnWd,KADA,KAqWvB,IAAIf,MAAAA,OAAA,EAAAA,EAAMe,QAAS4wF,EAAW,CAC5B,MAAMC,EAAc5xF,EAAKe,OAAS4wF,EAYlC,YAXAzuE,GAAW,CACTrZ,KAAM,CACJ/K,QAAS,4CACT+yF,WAAY,CACV,sBAAuBD,EACvB,aAAcA,EAAc,EAAI,IAAM,IAExC9nF,aAAa,KAOnB,MAAM60C,EAAetsB,SAAS+W,eAAewV,EAAAA,IAE7C,GAAI6yC,EAAmB1wF,QAAUf,EAAM,CACrC,GAAI4sF,KAAaj7D,GAAS,CACxB,MAAMmgE,GAAavsF,EAAAA,EAAAA,GAAcC,GAC3BusF,EAA0BxL,GAA2B7pE,SACtD1W,KAAKG,MAAM2rF,EAAavL,GAA2B7pE,SAClDs1E,EAAyBpF,GAASqF,cAAgBrF,GAASqF,aAAeH,EAEhF,GACGC,GAA2BA,EAA0BnF,GAASsF,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBpF,GAASqF,aAAgBH,EACzBlF,GAASsF,QAAUH,EAWvB,OAVA7uE,GAAW,CACTrZ,KAAM,CACJ/K,QAASP,GAAK,gBAAgB85D,EAAAA,EAAAA,IAAoB85B,IAClDC,YAAY,EACZtoF,aAAa,UAIjB60C,EAAatV,QAMjBv7B,EAAY,CACV9N,KAAAA,EACAwQ,SAAAA,EACAH,YAAaohF,EACb5hF,YAAAA,EACAiC,SAAAA,IAIAu1D,GACFjqE,GAAgB,CACdyS,YAAAA,EACAiC,SAAAA,IAIJy0E,GAA2B7pE,SAAUnX,EAAAA,EAAAA,GAAcC,GAEnDogF,GAAW,CAAEpqF,OAAAA,EAAQkW,WAAW,IAE5BjD,EAAAA,IAAUkwC,IAAiBtsB,SAASq+D,eACtClU,GAA8B79B,GAIhCggC,uBAAsB,KACpBmQ,UAED,CACDh3D,EAAiBznB,GAAay4E,GAAsBzhB,EAAcue,GAAYpqF,EAC9EszF,GAAelG,GAAoB1lE,GAAY0pE,GAAUj7D,GAAS7jB,EAAa1Q,GAAiBmB,GAAM8nF,KAGlGgM,IAA+Bh0D,EAAAA,EAAAA,KAAY,KAC/C0pD,KACAJ,OACC,CAACI,GAAiBJ,KAEf2K,IAA2Bj0D,EAAAA,EAAAA,KAAY,KAC3CupD,KACAM,KACAJ,OACC,CAACF,GAAqBM,GAAiBJ,KAEpCyK,IAAwBl0D,EAAAA,EAAAA,KAAY,CACxCm0D,EAA4B3iF,KAE5B,GAAI2iF,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAE91F,EAAF,QAAMkoB,EAAN,SAAe9S,GAAa0gF,EAOlC,YANAvM,GAAoB,CAClBvpF,GAAAA,EACAkoB,QAAAA,EACA/U,YAAAA,EACAiC,SAAAA,IAKJ,MAAM,SAAEA,KAAa2gF,GAAaD,GAAQ,GAErCA,GAAyC,IAAjC7xF,OAAOC,KAAK6xF,GAAU1xF,OAGjC+M,EAAY,IACP0kF,EACH3iF,YAAAA,IAJG2hF,GAAWnxF,QAAQyR,GAAWjC,KAOpC,CAAC2hF,GAAYvL,GAAqBn4E,KAErC8qB,EAAAA,EAAAA,KAAU,KACJz7B,GACF6pF,IAAiBn3E,IACf0iF,GAAsBp1F,EAAsB0S,QAG/C,CAAC1S,EAAsBo1F,GAAuBvL,KAEjD,MAAM5S,IAAsB/1C,EAAAA,EAAAA,KAAY,SACtCt1B,EAAqB+I,EAAoB4gF,GACtC,IADqE3D,EACrE,wDACHhmF,EAAU,IACLA,EACH0pB,qBAAqB,GAGnBwyD,GAAkByN,GACpB/L,KACAK,IAAiBn3E,IACf+2E,KACA2L,GAAsB,CAAExpF,QAAAA,EAAS+I,SAAAA,GAAYjC,GAC7C8uE,uBAAsB,KACpBmQ,GAAcC,WAIlBjhF,EAAY,CAAE/E,QAAAA,EAAS+I,SAAAA,IACvB6sE,uBAAsB,KACpBmQ,GAAcC,SAGjB,CACD9J,EAAgB0B,GAAqBK,GAAiBJ,GAA2B2L,GACjFzD,GAAehhF,IAGX6kF,IAAkBt0D,EAAAA,EAAAA,KAAY,CAACzmB,EAAe9F,EAAoB4gF,KAClEzN,GAAkByN,GACpB/L,KACAK,IAAiBn3E,IACf+2E,KACA2L,GAAsB,CAAE36E,IAAAA,EAAK9F,SAAAA,GAAYjC,GACzC8uE,uBAAsB,KACpBmQ,IAAc,WAIlBhhF,EAAY,CAAE8J,IAAAA,EAAK9F,SAAAA,IACnB6sE,uBAAsB,KACpBmQ,IAAc,SAGjB,CACD7J,EAAgB0B,GAAqBK,GAAiBJ,GAA2B2L,GACjFzD,GAAehhF,IAGX8kF,IAAwBv0D,EAAAA,EAAAA,KAAY,CACxCw0D,EAA4D/gF,EAAoB4gF,KAEhF,GAAwB,yBAApB56D,EACF,OAGEmtD,GAAkByN,EACpB1L,IAAiBn3E,IACf0iF,GAAsB,CACpB71F,GAAIm2F,EAAan2F,GACjBkoB,QAASiuE,EAAajuE,QACtB9S,SAAAA,GACCjC,MAGLo2E,GAAoB,CAClBvpF,GAAIm2F,EAAan2F,GACjBkoB,QAASiuE,EAAajuE,QACtB9S,SAAAA,IAIJ,MAAM6sC,EAAetsB,SAAS+W,eAAewV,EAAAA,IACzCnwC,EAAAA,IAAUkwC,IAAiBtsB,SAASq+D,eACtClU,GAA8B79B,GAGhCinC,GAAW,CAAEpqF,OAAAA,EAAQkW,WAAW,IAChCitE,uBAAsB,KACpBmQ,UAED,CACDtzF,EAAQoqF,GAAY9tD,EAAiBy6D,GAAuBvL,GAAiB8H,GAAe7I,GAC5FhB,IAGI6N,IAAyBz0D,EAAAA,EAAAA,KAAY,KACzCunD,GAAW,CAAEpqF,OAAAA,EAAQkW,WAAW,IAChCitE,uBAAsB,KACpBmQ,UAED,CAACtzF,EAAQoqF,GAAYkJ,KAElBiE,IAAiB10D,EAAAA,EAAAA,KAAalqB,IAC9B8wE,GACF+B,IAAiBn3E,IACf0iF,GAAsB,CAAEp+E,KAAAA,GAAQtE,MAElCk2E,OAEAj4E,EAAY,CAAEqG,KAAAA,IACd4xE,QAED,CAACA,GAAgBwM,GAAuBvL,GAAiBl5E,EAAam3E,IAEnE+N,IAAmB30D,EAAAA,EAAAA,KAAY,KAC/B4mD,EACF+B,IAAiBn3E,IACf0iF,GAAsB,CAAEzgF,UAAU,GAAQjC,MAGvC2hF,IAAW,KAEjB,CAACe,GAAuBf,GAAYxK,GAAiB/B,IAElDgO,IAAmB50D,EAAAA,EAAAA,KAAazhC,IACvB,aAATA,GACFipF,GAAsB,CAAE5pF,MAAO,KAC/B6pF,GAAkB,CAAE7pF,WAAOJ,MAE3BiqF,GAAkB,CAAE7pF,MAAO,KAC3B4pF,GAAsB,CAAE5pF,WAAOJ,OAEhC,CAACgqF,GAAuBC,KAErBoN,IAAuB70D,EAAAA,EAAAA,KAAY,KACvC,MAAMsgB,EAAetsB,SAAS+W,eAAewV,EAAAA,IAExCr2C,EAAAA,IAA2Bo2C,IAAiBtsB,SAASq+D,eAK1D/xC,EAAatV,OACbnnC,YAAW,KACT0lF,KACAE,OA3mBgC,MAomBhCA,OASD,CAACA,GAAgBF,KAEduL,IAAuB90D,EAAAA,EAAAA,KAAY,KACvC,MAAMsgB,EAAetsB,SAAS+W,eAAewV,EAAAA,IAE7C,IAAKr2C,EAAAA,IAA2Bo2C,IAAiBtsB,SAASq+D,cAIxD,OAHA9I,KACAG,UACAE,KAIFtpC,EAAatV,OACbnnC,YAAW,KACT0lF,KACAG,KACAE,OA7nBgC,OA+nBjC,CAACL,GAAqBG,GAAiBE,KAEpCmL,IAA0B/0D,EAAAA,EAAAA,KAAY,KAC1C5gC,GAAS,CAAEf,GAAIlB,EAAQC,SAAAA,EAAUmB,KAAM,gBACtC,CAACa,GAAUjC,EAAQC,KAEtBm9B,EAAAA,EAAAA,KAAU,KACJsT,GAAsB3jC,EAAAA,IACxBw/E,OAED,CAAC77C,EAAoB67C,MAExBnvD,EAAAA,EAAAA,KAAU,KACHukB,IAEDV,EACFgsC,KAEAvmF,YAAW,KACTwmF,OAjpB0B,QAopB7B,CAACjsC,EAAoBisC,GAAaD,GAActrC,IAEnD,MAAMk2C,IAAoBh1D,EAAAA,EAAAA,KAAY,KACpC,OAAQurD,IACN,KAAK7F,GAAgBgG,KACnByH,KACA,MACF,KAAKzN,GAAgBiG,OACdrB,KACL,MACF,KAAK5E,GAAgB8F,KACnBoF,KACA,MACF,KAAKlL,GAAgB+F,SACfhB,IACFD,KAEF7B,IAAiBn3E,IACf0iF,GAAsB,GAAI1iF,SAM/B,CACD+5E,GAAiB4H,GAAY7I,GAAqBsG,GAAoBnG,GAAsB9B,GAC5F6B,GAAqB0J,KAGjBe,GAA6B1J,KAAoB7F,GAAgBiG,SAAW1J,GAE5EgP,IAAoB75B,EAAAA,GAAAA,GAAYovB,GAAgB,GAChD0O,GAAwB1O,GAAkByK,GAE1CkE,GAAuB,IAAIziF,KACjCyiF,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAI5iF,KAC7B4iF,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQlK,IACN,KAAK7F,GAAgB8F,KACnBiK,GAAsB,sBACtB,MACF,KAAK/P,GAAgBiG,OACnB8J,GAAsBR,GAClB,sCACA,uBAGR,MAAM35D,IAAYwE,EAAAA,GAAAA,GAChB,YACCse,GAAsB,QACvB+rC,IAAmB,kBAGfuL,IAA4B51D,EAAAA,GAAAA,GAChC,6BACCgf,GAAW,YACZmrC,GACKT,IAAoB,cACpBA,IAAoB,cAGrBmM,IAAsB31D,EAAAA,EAAAA,KAAY,KACtC2oD,IAAiBn3E,IACf0iF,GAAsB,GAAI1iF,QAE3B,CAAC0iF,GAAuBvL,KAErBiN,GAASrK,KAAoB7F,GAAgB8F,KAC/CoF,GACArF,KAAoB7F,GAAgB+F,SAAWkK,GAC7CxC,GAEN,OACE,0BAAK73D,UAAWA,IACb2mD,IAAkBnjC,GACjB,mBAAC,GAAD,CACEnf,OAAQ0nD,IAAkBwO,GAAAA,EAAAA,KAC1BC,UAAWzO,IAAkBwO,GAAAA,EAAAA,WAA2B1N,KAAsB0N,GAAAA,EAAAA,UAC9EE,OAAQzO,EACRnF,aAAcQ,KAGlB,mBAAC,GAAD,CACExlF,OAAQA,EACRC,SAAUA,EACVwuF,sBAAuBA,GACvB55E,YAAaA,GACbgkF,QAAShkF,GAAYtP,OAASu6E,GAAO,GACrC+J,iBAAkBA,EAClB7yE,cAAeA,EACf5J,aAAcA,EACdu0C,QAASA,EACTrR,eAAgBA,EAChBwoD,gBAAiBlO,GACjB/B,kBAAmBA,EACnBjsE,cAAeA,EACf4tE,eAAgBA,GAChBf,eAAgBA,EAChBsP,aAAcvB,GACdiB,OAAQzC,GACRgD,gBAAiBR,GACjBS,aAAcnD,GACd/O,QAASgP,KAEX,mBAAC,GAAD,CACEvzD,OAAQ39B,QAAQyE,GAChB4vF,kBAAmBtpD,EACnBm3C,QAASwD,GACTkO,OAAQlB,KAETQ,IACC,mBAAC,GAAD,CACEv1D,OAAQmqD,GACRhY,WAAgC,cAApB1tE,EACZgjC,QAAS4iD,GACTvpF,QAASy0F,KAGb,mBAAC,GAAD,CACEv1D,OAAQgqD,GACRviD,QAASyiD,GACT1sF,OAAQA,EACRm5F,iBAAkBlgF,EAClBI,UAAWA,KAEb,mBAAC,GAAD,CACEmpB,OAAQksD,GACRzkD,QAAS0kD,GACTyK,iBAAkBxK,GAClByK,cAAexK,KAEjB,mBAAC,GAAD,CACErsD,OAAQusD,GACRxlE,MAAOylE,GACP9lE,UAAW+lE,GACXE,iBAAkBA,GAClBzmE,SAAUwmE,GACVoK,eAAgBlC,GAChB7H,SAAUC,GACVvlD,QAASolD,GACTkK,gBAAiBjpD,EACjB0gD,YAAaA,KAEf,mBAAC,GAAD,CACExuD,OAAQ2tD,GACRqJ,aAAc30F,QAAQmlF,GACtBC,YAAasG,GACb7wD,QAAS43D,GACTrtD,QAASomD,KAEX,0BAAKnvF,GAAG,mBACN,0BAAKi9B,UAAU,eAAewK,IAAKgiD,KACnC,mBAAC,GAAD,CAAyB5D,QAAS8O,KAClC,mBAAC,GAAD,CACE71F,OAAQA,EACRC,SAAUA,EACV4nF,YAAchzE,GAAYtP,OAAgB,GAAPu6E,GACnCvsC,UAAW09C,KAEb,0BAAK9yD,UAAU,yBACZ+iB,IAAiC,IAAhB+oC,IAA0BqD,KAAyBjE,GACnE,mBAAC,GAAD,CACElrD,WAAWwE,EAAAA,GAAAA,GAAe,eAAgBupD,IAAwB,aAClEh8E,OAAK,EACLqjC,cAA0BlzC,IAAhB4pF,EACVlqD,MAAM,cACN4kD,WAAYkS,GACZn0D,UAAU,6BAEV,wBAAGvE,UAAU,8BAGhB8sD,KAAkB9B,GAAcjwE,IAC/B,mBAACgnB,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNL,QAAS8sD,GAAmBE,GAAkBiL,GAC9Cj1D,UAAW3/B,GAAK,sBAChBo7B,WAAWwE,EAAAA,GAAAA,GAAe,iBAAkBgpD,GAA6BzqE,SAAW,qBAEpF,mBAAC09B,GAAA,EAAD,CACE5mC,KAAMmxE,EACN1jF,KAAMyT,EACNinB,KAAK,UAIVpzB,EAAAA,GACC,mBAACmzB,GAAA,EAAD,CACE/B,UAAWo6D,GACXroF,OAAK,EACL6vB,MAAM,cACNL,QAAS2sD,GAAmBE,GAAkBmL,GAC9Ch1D,UAAU,gCAEV,wBAAGvE,UAAU,eACb,wBAAGA,UAAU,kBACZkuD,KAAqBS,IAAsB,mBAAChtD,GAAA,EAAD,CAASC,MAAM,UAG7D,mBAAC,GAAD,CACE5B,UAAWkuD,GAAmB,YAAc,GAC5Cn8E,OAAK,EACL6vB,MAAM,cACN4kD,WAAYmS,GACZp0D,UAAU,gCAEV,wBAAGvE,UAAU,gBAGjB,mBAACs7D,GAAA,EAAD,CACEv4F,GAAG,qBACHlB,OAAQA,EACRC,SAAUA,EACV6/E,KAAOjrE,GAAYtP,OAAgB,GAAPu6E,GAC5Bz6C,YACEioD,IAAwBv+D,IAp3BG,IAq3BvB,GACA26D,GAA0B3mF,GAAK,WAErC22F,kBAAmBpK,GACnBqK,aAAch4C,IAAY9sC,GAAYtP,OACtCq0F,oBAAqB7sF,EAAAA,IAA2Bs/E,GAChDwN,4BAA6B9H,IAAsBrD,IAAwBK,GAC3E+K,SAAUlP,GACV6N,OAAQA,GACRsB,kBAAmBxN,KAEpBxC,GAAsBllF,QAAQmqF,KAC7B,mBAAClvD,GAAA,EAAD,CAASC,MAAM,SAEhBypD,GACC,mBAACtpD,GAAA,EAAD,CACEhwB,OAAK,EACLm3E,OAAK,EACLlpD,UAAU,mBACV4B,MAAM,cACNL,QAASk4D,GACTl1D,UAAU,2BAEV,wBAAGvE,UAAU,mBAGhB4qD,IAAyBuE,KAAyBjE,GACjD,mBAAC,GAAD,CACElrD,UAAW4tD,GAAoB,YAAc,GAC7C77E,OAAK,EACL6vB,MAAM,cACN4kD,WAAYqH,GACZtpD,UAAU,6BAEV,wBAAGvE,UAAU,sBAGhBmvD,IAAwBC,IACvB,2BAAMpvD,UAAU,oBACb67D,EAAAA,EAAAA,IAA0BzM,GAAoBG,GAAmBxsE,UAGtE,mBAAC,GAAD,CACElhB,OAAQA,EACRC,SAAUA,EACVuiC,OAAQ8uD,GACR2I,gBAAiBrhB,KAEnB,mBAAC,KAAD,CACEp2C,OAAQuvD,GACRmI,OAAQjI,GACRhoD,QAAS+nD,GACTmI,cAAejI,GACf1H,eAAgBA,KAElB,mBAAC,GAAD,CACE3F,iBAAkByI,KAAyBjE,EAC3CvE,eAAgBA,GAChBC,eAAgBA,GAChBC,aAAcQ,GACdP,aAAcn9D,KAEfihE,GACC,mBAAC,GAAD,CACEzkF,UAAWykF,EACXvmD,OAAQupD,GACR9hD,QAASgiD,KAGZhC,GACC,mBAAC,GAAD,CACEznD,OAAQ0pD,GACRjC,YAAaA,EACbhgD,QAASmiD,KAGb,mBAAC,GAAD,CACEpsF,OAAQA,EACRC,SAAUA,EACVuiC,OAAQ6pD,IAAoBnB,GAC5B8F,YAAaA,GACbD,gBAAiBA,GACjB97B,OAAQ83B,GACR9iD,QAASsiD,GACT4N,cAAe/H,GACf6H,gBAAiBrhB,GACjBwhB,YAAajD,GACbkD,eAAgBzH,GAChB0H,aAAc7C,GACdjN,eAAgBA,OAIrB8C,IACC,mBAACptD,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,SACN5B,UAAU,SACVuB,QAAS0tD,GACT1qD,UAAU,0BAEV,wBAAGvE,UAAU,iBAGjB,mBAAC+B,GAAA,EAAD,CACEyI,IAAK8kD,GACLv9E,OAAK,EACL6vB,MAAM,YACN5B,WAAWwE,EAAAA,GAAAA,GAAeyrD,IAAkBzsC,GAAW,YAAa2rC,IAAwB,aAC5F/5C,SAAUukD,GACVp1D,UAAW3/B,GAAKu1F,IAChB54D,QAASm4D,GACT5oC,cACEm/B,KAAoB7F,GAAgBgG,MAAQE,GAAwBh+B,QAAoBpwD,GAG1F,wBAAG89B,UAAU,cACb,wBAAGA,UAAU,kBACb,wBAAGA,UAAU,wBACb,wBAAGA,UAAU,gBAEdswD,IACC,mBAAC,KAAD,CACEjsD,OAAQsuD,GACRiI,aAAezoD,OAAoCjwC,EAAnBm3F,GAChC+C,eAAiB9Q,OAAuCppF,EAAtBm4F,GAClCvuD,QAASgpB,GACTrf,oBAAqBsf,GACrBqmC,gBAAiBjpD,IAGpBm7C,QKlpCP,IAAe5tD,EAAAA,EAAAA,KAR0BgL,IACvC,MAAM,SAAEj8B,GAAai8B,EACf2xD,GAAezxD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBp8B,GAAU,GAG/E,OAAO4tF,EAAe,mBAACA,EAAiB3xD,QAAYxoC,KCGtD,IAAew9B,EAAAA,EAAAA,KARkCgL,IAC/C,MAAM,SAAEj8B,GAAai8B,EACf4xD,GAAuB1xD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBp8B,GAGrF,OAAO6tF,EAAuB,mBAACA,EAAyB5xD,QAAYxoC,KCGtE,IAAew9B,EAAAA,EAAAA,KARmCgL,IAChD,MAAM,OAAErG,GAAWqG,EACb6xD,GAAwB3xD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0BxG,GAGvF,OAAOk4D,EAAwB,mBAACA,EAA0B7xD,QAAYxoC,KCGxE,IAAew9B,EAAAA,EAAAA,KAR0BgL,IACvC,MAAM,OAAErG,GAAWqG,EACb8xD,GAAe5xD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBxG,GAGrE,OAAOm4D,EAAe,mBAACA,EAAiB9xD,QAAYxoC,KCGtD,IAAew9B,EAAAA,EAAAA,KAR0BgL,IACvC,MAAM,OAAErG,GAAWqG,EACb+xD,GAAe7xD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBxG,GAGrE,OAAOo4D,EAAe,mBAACA,EAAiB/xD,QAAYxoC,KCGtD,IAAew9B,EAAAA,EAAAA,KARyBgL,IACtC,MAAM,OAAErG,GAAWqG,EACbgyD,GAAc9xD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBxG,GAGnE,OAAOq4D,EAAc,mBAACA,EAAgBhyD,QAAYxoC,KCKpD,IAAew9B,EAAAA,EAAAA,KAVuCgL,IACpD,MAAM,uBAAE7Y,GAA2B6Y,EAC7BiyD,GAA4B/xD,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BhZ,GAI/C,OAAO8qE,EAA4B,mBAACA,EAA8BjyD,QAAYxoC,KCChF,IAAew9B,EAAAA,EAAAA,KAR8BgL,IAC3C,MAAM,OAAErG,GAAWqG,EACbkyD,GAAmBhyD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBxG,GAG7E,OAAOu4D,EAAmB,mBAACA,EAAqBlyD,QAAYxoC,KCyGxD26F,GAA2BjuF,EAAAA,GAA0B,IAAMpK,EAAAA,QAAsBtC,EAEvF,SAAS46F,GAAQ1yC,GACf,MAAqB,SAAdA,EAAK2yC,MAAmB3yC,EAAKnnD,MAAQg+E,EAAAA,GAAAA,IAAkC72B,EAAKnnD,MAGrF,MAyaA,IAAey8B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IACC,MAAM4gC,GAAQC,EAAAA,EAAAA,IAAY7gC,IAExBo7F,UAAWC,EAAqBC,WAAYC,EADxC,gBAC0D9c,EAD1D,aAC2E+c,GAC7Ex7F,EAAOkiB,SAASu5E,OAAO76D,IAAU,IAE/B,aAAEzzB,GAAiBnN,EAAO2B,SAC1BJ,GAAqBpB,EAAAA,EAAAA,IAAyBH,IAC9C,kBACJkN,EAAmB1B,OAAO,QAAEupB,GADxB,wBACmC3E,EADnC,aAC4DhM,GAC9DpkB,EAEEihD,EAAoB,CACxBrgB,MAAAA,EACA26D,iBAAAA,EACA9c,gBAAAA,EACA+c,aAAAA,EACAtuF,kBAAAA,EACAyjC,oBAAoBpqC,EAAAA,EAAAA,IAAyBvG,GAC7Cq7F,oBAAAA,EACAK,qBAAsB52F,QAAQkI,EAAAA,KAA2BoS,EAAAA,EAAAA,IAAwBpf,IACjFkhD,oBAAoB7Q,EAAAA,EAAAA,IAAqBrwC,GACzCkP,mBAAoBlP,EAAOiP,QAAQC,mBACnCysF,mBAAoB72F,QAAQ9E,EAAOiP,QAAQwc,SAC3CmwE,kBAAmB92F,QAAQ9E,EAAOiL,aAClC4wF,uBAAwB/2F,QAAQ9E,EAAOgL,cACvCmmB,eAAgBnxB,EAAOkiB,SAASkP,MAAMD,eACtCiwB,qBAAsB32C,KAAKC,IAAI,EAAG1K,EAAO2B,SAASwL,aAAa3H,OAAS,GACxE4qB,wBAAAA,EACAhM,aAAAA,GAGF,IAAK7iB,IAAuBwzB,EAAQC,OAClC,OAAOisB,EAGT,MAAM,OAAEhhD,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9ColB,GAAYC,EAAAA,EAAAA,IAAS3mB,GACrByF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BooB,GAAMC,EAAAA,EAAAA,IAActoB,EAAQC,GAC5B+gD,GAAYrnB,EAAAA,EAAAA,IAAgB35B,EAAQC,IAClCA,OAAQ+jB,EAAazf,UAAW0f,GAAmBjkB,EAAOsG,YAE5D8zE,EAAU10E,IAAQo2F,EAAAA,EAAAA,IAAiBp2F,EAAMxF,GACzC67F,GAAkBhrD,EAAAA,EAAAA,IAA0B/wC,EAAQC,GACpD+7F,EAA0C,WAApB90F,EACtB+0F,EAA6C,cAApB/0F,EACzBupC,EAAmC,WAApBvpC,GAAgChH,IAAakB,EAAAA,GAC5DyuC,EAAY/qC,QAAQY,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,IAC1CsrC,EAAelsC,QACnBY,GAAQ+qC,IAAiBZ,IAAaoB,EAAAA,EAAAA,IAAiBvrC,KAAUA,EAAKkuB,aAElEgd,EAAgB9rC,QAAQujB,IAAOwoB,EAAAA,EAAAA,IAAoB7wC,EAAQqoB,EAAIlnB,KAC/D2vC,GAAeF,GAAiBmrD,EAEtC,MAAO,IACF96C,EACHhhD,OAAAA,EACAC,SAAAA,EACAgH,gBAAAA,EACAyf,UAAAA,EACAu1E,sBAAuBp3F,QAAQY,MAAAA,OAAD,EAACA,EAAMwc,UACrCk4D,SAAU4hB,KAAyBt2F,GAAQ00E,KAAa2hB,EACxDC,oBAAAA,EACAC,uBAAAA,EACAE,wBAAyBz2F,MAAAA,OAAF,EAAEA,EAAMy2F,wBAC/BC,oBAAqB12F,MAAAA,OAAF,EAAEA,EAAM02F,oBAC3BC,uBACEn8F,IAAakB,EAAAA,IACV0D,SAASk3F,IAAuBh7C,MAAAA,OAAxB,EAAwBA,EAAWx7C,UAC3CV,QAAQkf,GAAeC,GAE5Bo+B,oBAAqBrB,EAAYA,EAAUx7C,OAAS,EACpD2gC,4BAA6BnmC,EAAOmmC,4BACpCh5B,aAAAA,EACA0iC,UAAAA,EACAmB,aAAAA,EACAF,YAAAA,EACAF,cAAAA,KA/EctQ,EAzaiB,IAmC/B,IAnCgC,OACpCrgC,EADoC,SAEpCC,EAFoC,gBAGpCgH,EAHoC,UAIpCyf,EAJoC,oBAKpCq1E,EALoC,aAMpC7uF,EANoC,QAOpCitE,EAPoC,wBAQpC+hB,EARoC,oBASpCC,EAToC,uBAUpCC,EAVoC,oBAWpCh6C,EAXoC,iBAYpCk5C,EAZoC,MAapC36D,EAboC,gBAcpC69C,EAdoC,aAepC+c,EAfoC,kBAgBpCtuF,EAhBoC,mBAiBpCyjC,EAjBoC,oBAkBpC0qD,EAlBoC,qBAmBpCK,EAnBoC,mBAoBpCx6C,EApBoC,mBAqBpChyC,EArBoC,mBAsBpCysF,EAtBoC,kBAuBpCC,EAvBoC,uBAwBpCC,EAxBoC,eAyBpC1qE,EAzBoC,4BA0BpCgV,EA1BoC,qBA2BpCib,EA3BoC,UA4BpCvR,EA5BoC,sBA6BpCqsD,EA7BoC,aA8BpClrD,EA9BoC,YA+BpCF,EA/BoC,cAgCpCF,EAhCoC,wBAiCpCxgB,EAjCoC,aAkCpChM,GACI,EACJ,MAAM,SACJliB,EADI,iBAEJsU,EAFI,SAGJ8lF,EAHI,iBAIJ/1E,EAJI,qBAKJxmB,EALI,sBAMJ0B,EANI,kBAOJ86F,EAPI,aAQJC,EARI,YASJxqD,EATI,eAUJ7qB,EAVI,WAWJ+qB,IACEtyB,EAAAA,EAAAA,OAEIsP,MAAOF,IAAgByzB,KAEzBz/C,IAAO48B,EAAAA,GAAAA,MACNuqD,GAAesS,KAAoB59D,EAAAA,EAAAA,IAAS85D,GAAAA,EAAAA,OAC5C+D,GAAYC,KAAiB99D,EAAAA,EAAAA,OAC7B+9D,GAAcC,KAAmBh+D,EAAAA,EAAAA,OACjCi+D,GAAkBC,KAAuBl+D,EAAAA,EAAAA,KAAS,GAEnDs7C,GAAWkiB,IACfrtE,GAAcw0B,EAAAA,IAEZ7S,GAAsB3hB,GAAcG,EAAAA,IACjCH,GAAc00B,EAAAA,IAEjB10B,IAAeK,EAAAA,IACZL,GAAcu0B,EAAAA,IAIfy5C,IAAkBC,EAAAA,GAAAA,GAAuBh9F,EAAQg7F,IACjDiC,IAAoBD,EAAAA,GAAAA,GAAuB/8F,EAAU+6F,IACrDkC,IAA2BF,EAAAA,GAAAA,GAAuB/1F,EAAiB+zF,IACnEmC,IAAwBH,EAAAA,GAAAA,GAAuBjsD,EAAciqD,IAC7DoC,IAAuBJ,EAAAA,GAAAA,GAAuBnsD,EAAamqD,IAC3DqC,IAAyBL,EAAAA,GAAAA,GAAuBrsD,EAAeqqD,IAC/DsC,IAAmBN,EAAAA,GAAAA,GAAuB7iB,EAAS6gB,MACnDqC,KAA2BD,KAAyBD,GACpDI,IAAoBP,EAAAA,GAAAA,GAAuB9iB,GAAU8gB,IACrDwC,IAAsBR,EAAAA,GAAAA,GAAuBP,GAAYzB,IACzDyC,IAAqBT,EAAAA,GAAAA,GAAuBptD,EAAWorD,IAEvD0C,IAAoBzjC,EAAAA,GAAAA,GAAY9Y,GAEhCvV,QACkBvrC,IAAtBq9F,IAAmCA,GAAoBv8C,EAAuBu8C,QAAoBr9F,GAG9F,QAAEshD,GAAF,cAAWg8C,GAAX,gBAA0BC,IAsalC,SACEC,EACA18C,EACAu8C,EACA19F,GAEA,MAAO2hD,EAASm8C,IAAcl/D,EAAAA,EAAAA,KAAU7xB,EAAAA,IAClCs3D,GAAcC,EAAAA,GAAAA,KAEdy5B,OAA8C19F,IAAtBq9F,GAAmCA,IAAsBv8C,EAyBvF,OAxBI48C,IACEF,EACFC,GAAW,GAEXz5B,MAIJ2S,EAAAA,GAAAA,IAAY,KACL6mB,GACHC,GAAW,KAEZ,CAACD,IAYG,CACLl8C,QAASA,IAAYo8C,EACrBJ,cAAeE,EAZjB,SAAuBvwF,GACE,cAAnBA,EAAE0wF,cAAgC1wF,EAAEgjD,SAAWhjD,EAAE6jD,eACnD2sC,EAAWj5F,QAAQ7E,UAU2BK,EAChDu9F,gBAAiBC,EAPnB,WACEC,GAAW,SAMyCz9F,GA3cF49F,EACjD/3D,GAA+BhV,IAAmBgtE,EAAAA,GACnD/8C,EACAu8C,GACA19F,IAGFo9B,EAAAA,EAAAA,KAAU,IACDp9B,GACHwnC,EAAAA,GAAAA,IAAsB,KACtBvlC,EAAS,CAAEf,QAAIb,YAEfA,GACH,CAACL,EAAQiC,KAEZ+0E,EAAAA,GAAAA,IAAY,KACVwlB,GAAiB9D,GAAAA,EAAAA,MACjBgE,QAAcr8F,GACdu8F,QAAgBv8F,KACf,CAACL,KAGJo9B,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE+gE,GAAmB13F,OAC3B,IAAK03F,EACH,OAGF,MAAMluD,EAAe,KACfxpC,OAAO03F,eAAezpD,SAAW7d,SAASunE,gBAAgBnhB,aAC5DpmD,SAASrJ,KAAKgW,UAAU+L,IAAI,oBAE5B1Y,SAASrJ,KAAKgW,UAAUsL,OAAO,qBAMnC,OAFAqvD,EAAen/D,iBAAiB,SAAUiR,GAEnC,KACLkuD,EAAel/D,oBAAoB,SAAUgR,MAE9C,KAEH7S,EAAAA,EAAAA,KAAU,KACJ1W,GACF21E,EAAS,CAAEhwF,OAAQrM,MAEpB,CAACA,EAAQ0mB,EAAW21E,KAEvBj/D,EAAAA,EAAAA,KAAU,MACH6+D,GAAyB93E,GAC5BmC,EAAiB,CAAEtmB,OAAAA,MAEpB,CAACA,EAAQ0mB,EAAWu1E,EAAuB93E,EAAcmC,IAE5D,MAAM+3E,IAAkBx7D,EAAAA,EAAAA,KAAav1B,IACnC,GAAIjE,EAAAA,GACF,OAGF,MAAM,MAAEksF,GAAUjoF,EAAEgxF,cAAgB,GAC9BC,EAAkBhJ,GAASA,EAAMhwF,OAAS,GAAKotB,MAAMzgB,KAAKqjF,GAG7DlyF,QAAQklD,GAAuB,kBAAdA,EAAKnnD,OAEtB2xB,MAAMkoE,IAETuB,GAAiB+B,EAAkB7F,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,YAC5D,IAEG8F,IAAqB37D,EAAAA,EAAAA,KAAY,KACrC25D,GAAiB9D,GAAAA,EAAAA,QAChB,IAEG+F,IAAuB57D,EAAAA,EAAAA,KAAY,KACvCi6D,IAAoB,KACnB,IAEG4B,IAAkB77D,EAAAA,EAAAA,KAAY,KAClCi6D,IAAoB,KACnB,IAEG6B,IAAyB97D,EAAAA,EAAAA,KAAY,KACzCtsB,EAAiB,CAAEvW,OAAAA,IACnB0+F,KACAz8F,EAAS,CAAEf,GAAIlB,MACd,CAACuW,EAAkBtU,EAAUy8F,GAAiB1+F,IAE3C4+F,IAAoB/7D,EAAAA,EAAAA,KAAY,KACpC5gC,EAAS,CAAEf,GAAIlB,MACd,CAACiC,EAAUjC,IAER8yC,IAAuBjQ,EAAAA,EAAAA,KAAY,KACvCkP,EAAY,CAAE/xC,OAAAA,MACb,CAAC+xC,EAAa/xC,IAEX+yC,IAAiBlQ,EAAAA,EAAAA,KAAY,KACjC3b,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEE8rB,IAAmBnQ,EAAAA,EAAAA,KAAY,KACnCoP,EAAW,CAAEjyC,OAAAA,MACZ,CAACA,EAAQiyC,IAEN4sD,GlGlToB,EAACl+D,EAAiBm+D,KAC5C,MAAOnqF,EAAOmvE,IAAYllD,EAAAA,EAAAA,IAASkgE,GAqBnC,OAnBA1hE,EAAAA,EAAAA,KAAU,KACH0hE,IAIDA,EAAaj3D,WAAW,KAC1Bi8C,EAASgb,GAETC,GAASzyE,MAAM0yE,EAAAA,GAAsBr+D,EAAOo+D,GAASE,KAAKnnD,MACvDvD,MAAM8D,IACL,MAAMzpC,EAAMmpC,IAAIC,gBAAgBK,IAChCgnC,EAAAA,GAAAA,IAAazwE,GACV2lC,MAAK,KACJuvC,EAAU,OAAMl1E,eAIzB,CAACkwF,EAAcn+D,IAEXm+D,EAAenqF,OAAQtU,GkG4RA6+F,CAAoBv+D,EAAO26D,GAEnDn9D,IAAYwE,EAAAA,GAAAA,GAChB46D,IAAqB,mBACrBjC,GAAoB,kBACpB9c,GAAmB,kBACnB8c,GAAoBF,GAAuB,UAC3C+D,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAA6Bz8D,EAAAA,GAAAA,GACjC,sBACCse,GAAsB,SAGnBo+C,IAAkCC,EAAAA,EAAAA,IACtCv8F,GAAMm5F,EAAyBC,IAI3B,oBACJoD,GADI,mBACiBC,GADjB,mBAEJC,GAFI,kBAEgBC,GAFhB,iBAGJC,GAHI,2BAGcC,KAChB/9D,EAAAA,EAAAA,KACF,IjItUW,SAAyC9S,EAAqBorD,GAC3E,MAAM0lB,EAAc9wE,GAAew0B,EAAAA,GARzB,GAUN,GACEu8C,EAmCR,SAA6B/wE,GAC3B,GAAIA,EAAcG,EAAAA,GAA0C,CAC1D,MAAMxiB,EAAkBlC,KAAK2kB,IAC3B3kB,KAAKC,IAAkB,IAAdskB,EAAoBH,GAC7BD,GAGIoxE,EAAmBv1F,KAAK2kB,IACd,IAAdJ,EACAJ,GAGF,OAAOnkB,KAAK2kB,IACVJ,EAAcriB,EAAkBqzF,EAChCrxE,GAIJ,GAAIK,EAAcK,EAAAA,GAAyC,CACzD,MAAM1iB,EAAkBlC,KAAK2kB,IAC3B3kB,KAAKC,IAAkB,GAAdskB,EAAmBH,GAC5BD,GAGF,OAAOnkB,KAAK2kB,IACVJ,EAAcriB,EACdgiB,GAIJ,OAAIK,EAAcL,EACTA,EAGFK,EArEkBixE,CAAoBjxE,GACvCkxE,EAAkBlxE,GAAew0B,EAAAA,GACnC,GACA,GAEE28C,EAAgB/lB,EAClB2lB,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAepxE,EAAcw0B,EAAAA,GAC/B/4C,KAAK2kB,IAAI2wE,EAAmBD,EAnBR,KAoBpBC,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,oBAAAA,EACAC,mBAAAA,EACAC,mBAXyBtlB,EACtB8lB,EAAkB,EAAKT,EACxB,EAUFE,kBARwBvlB,EACrB8lB,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EApBA,IAqCvBP,2BArCuB,IAqB+BO,GiImThDC,CAAgCrxE,GAAauuE,KACnD,CAACA,GAAkBvuE,KAGfsxE,IAAkB19D,EAAAA,GAAAA,GACtB,wBACC26D,IAAoB,cACrBA,IAAoBX,KAAiB17C,GAAsB,eAO7DxZ,EAAAA,GAAAA,IACEs1D,IAAmBE,IALH,KAChBh7F,EAAS,CAAEf,QAAIb,GAAa,CAAEigG,gBAAgB,WAM9CjgG,OACAA,OACAA,GACA6M,MAAAA,OAAA,EAAAA,EAAc9J,IAAIm9F,GAAAA,KAAsB,KAG1C94D,EAAAA,GAAAA,IAAeg0D,EAAsB37F,IACrC2nC,EAAAA,GAAAA,IAAewZ,EAAoBz/C,GAEnC,MAAMg/F,GAAsB37F,SACzBk3F,IAAwBuB,KAAqBD,KAA2BD,KACrED,IAAyBkC,IAEzBoB,GAA6B57F,QACjCw4F,IAA0BF,IAAyBC,IAAwBrB,GAEvEtd,GAAiB55E,QAAQ27F,IAAuBv/C,GAAsB86C,GAE5E,OACE,0BACE76F,GAAG,eACHi9B,UAAWA,GACXuiE,gBAAiB/C,GACjB5uD,MAAQ,sCACqBwwD,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNnE,oDAEf/c,IAA8B,SAAV79C,EAAmBggE,EAAAA,GAAsBC,EAAAA,eAEnElhE,QAAU1yB,EAAAA,IAA2BC,EAAqB2xF,QAAoBv+F,GAE9E,0BACEa,GAAG,mBACH6tC,MAAO8vD,GAAyB,wBAAuBA,UAA0Bx+F,IAEnF,0BAAKa,GAAG,0BACP67F,IAAmBE,IAClB,sCACE,0BAAK9+D,UAAU,kBAAkB0iE,YAAavD,GAAmBe,QAAkBh+F,GACjF,mBAAC,GAAD,CACEL,OAAQ+8F,GACR98F,SAAUg9F,GACVh2F,gBAAiBi2F,GACjBv7C,QAASA,KAEX,mBAAC3hB,GAAA,EAAD,CACE/N,KAAMiU,EAA8B,OAAShV,IAAmBE,EAAAA,GAAsB,QAAU,OAChG6O,UAAWkhB,EACXxV,eAAa,EACbC,oBAAqBA,GACrBk1D,OAAQlD,IAER,mBAAC,GAAD,CACE/hE,IAAM,GAAEkhE,MAAmBE,MAAqBC,KAChDl9F,OAAQ+8F,GACR98F,SAAUg9F,GACV77F,KAAM87F,GACN/iB,QAASmjB,GACTpjB,SAAUqjB,GACV3oB,YAAa8nB,GACb7nB,cAAe+nB,GACfj7C,QAASA,GACTy4B,gBAAiBqmB,KAEnB,0BAAKtiE,UAAWkiE,IACb/C,IACC,mBAAC,GAAD,CACEt9F,OAAQ+8F,GACR98F,SAAUg9F,GACVh2F,gBAAiBi2F,GACjBhT,cAAeA,GACfC,WAAYqU,GACZ78C,QAASA,KAGZo6C,GACC,0BAAK59D,UAAU,wCAAwCyB,IAAK78B,GAAK88B,MAAQ,WAAQx/B,GAC/E,mBAAC6/B,GAAA,EAAD,CACEC,KAAK,OACL0L,OAAK,EACL9L,MAAM,YACN5B,UAAU,mBACVuB,QAAS++D,IAET,wBAAGtgE,UAAU,eACb,+BAAOp7B,GAAK,uBAAwBq/C,EAAqB,QAI9Do+C,IACC,0BAAKriE,UAAWihE,IACd,0BAAKjhE,UAAU,4BACb,+BACGkhE,MAKRtyF,EAAAA,IAA2BowF,IAC1B,0BAAKh/D,UAAU,wCAAwCyB,IAAK78B,GAAK88B,MAAQ,WAAQx/B,GAC/E,mBAAC6/B,GAAA,EAAD,CACEC,KAAK,OACL0L,OAAK,EACLpJ,QAAM,EACNtE,UAAU,wBACVuB,QAASoT,IAER/vC,GAAK06F,GAAqB,qBAAuB,sBAIvD1wF,EAAAA,IAA2BqwF,IAC1B,0BAAKj/D,UAAU,wCAAwCyB,IAAK78B,GAAK88B,MAAQ,WAAQx/B,GAC/E,mBAAC6/B,GAAA,EAAD,CACEC,KAAK,OACL0L,OAAK,EACLpJ,QAAM,EACNtE,UAAU,wBACVuB,QAASqT,IAERhwC,GAAK,cAIXgK,EAAAA,IAA2BswF,IAC1B,0BAAKl/D,UAAU,wCAAwCyB,IAAK78B,GAAK88B,MAAQ,WAAQx/B,GAC/E,mBAAC6/B,GAAA,EAAD,CACEC,KAAK,OACL0L,OAAK,EACLpJ,QAAM,EACNtE,UAAU,wBACVuB,QAASsT,IAERjwC,GAAK,gBAIZ,mBAAC,GAAD,CACEkE,gBAAiBi2F,GACjBtwF,SAAUq0C,EACVk5B,QAASmjB,KAEX,mBAAC,GAAD,CACE96D,OAAQ39B,QAAQoK,GAChBg7B,QAASqyD,IAEX,mBAAC,GAAD,CACE95D,OAAQ39B,QAAQ62F,GAChBzxD,QAASsyD,IAEX,mBAAC,GAAD,CAAa/5D,OAAQm5D,IACrB,mBAAC,GAAD,CAAkBn5D,OAAQo5D,MAI9B,mBAAC,GAAD,CACEzyD,QAASq0D,GACTrjB,QAASmjB,GACT7e,eAAgBA,MAGnB1xE,EAAAA,IAA2B,mBAAC,GAAD,CAAcH,SAAU/H,QAAQ42F,MAG/Dz7F,GACC,mBAAC,GAAD,CACEwiC,OAAQq6D,GACR78F,OAAQA,EACRoiD,oBAAqBA,EACrBnY,QAASy0D,GACTqC,QAASpC,KAGb,0BAAKtmB,eAAa,GACfloD,MAAAA,OADH,EACGA,EAAyB/sB,KAAI,CAAC4sB,EAAwBje,IACrD,mBAAC,GAAD,CACEivF,cAAejvF,EACf8pB,IAAK7L,EAAuB9uB,GAC5B8uB,uBAAwBA,YCzd9B/I,IAAwBtX,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,G,IAErDqxF,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,wBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,0BAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,iCAAAA,IAAAA,mCAAAA,EAAAA,EAAAA,2BAAAA,IAAAA,6BAAAA,EAAAA,EAAAA,yBAAAA,IAAAA,2BAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qBAAAA,EAAAA,EAAAA,qBAAAA,IAAAA,uBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,UAAAA,IAAAA,YAAAA,EAAAA,EAAAA,YAAAA,IAAAA,cAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qB,CAAAA,KAAAA,GAAAA,KAiCL,MA0WA,IAAepjE,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAA6D,gBAApD,OAAEC,EAAF,UAAUkhG,EAAV,aAAqBC,GAA+B,EAC3D,MAAQ1gG,MAAO2gG,IAAuBjiF,EAAAA,EAAAA,IAAwBpf,IAAW,IACjEU,MAAO4gG,IAAuBC,EAAAA,EAAAA,IAA2BvhG,IAAW,IACpEU,MAAO8gG,IAAmBC,EAAAA,EAAAA,IAAuBzhG,IAAW,GAC9D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7CuvC,EAAYnqC,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,GAClCuS,EAAOkpF,GAAalhG,IAAU2mB,EAAAA,EAAAA,IAAS3mB,IAAUmZ,EAAAA,EAAAA,IAAWpZ,EAAQC,QAAUK,EAE9E0/C,EAAgB/nC,IAAQypF,EAAAA,EAAAA,IAAiBzpF,GACzC0pF,EAAY78F,SACfs8F,GACED,IACCnhD,GACDt6C,KACC8qC,EAAAA,EAAAA,IAAqBxwC,EAAQ0F,EAAKvE,OAElCylB,EAAAA,EAAAA,IAASlhB,EAAKvE,OAASiwF,EAAAA,EAAAA,IAAY1rF,IAASA,EAAKksC,aAAelsC,EAAKkuB,cAErEguE,EAAkB98F,QAAQ7E,IAAM,UAAID,EAAO4M,WAAWnE,SAASxI,UAA/B,aAAI,EAAoCogB,gBACxEwxB,EAAoBnsC,MAAAA,GAAH,UAAGA,EAAM2T,gBAAT,aAAG,EAAgBw4B,kBACpCrwB,EAAoBvhB,EAAM,UAAGD,EAAO4M,WAAWnE,SAASxI,UAA9B,iBAAG,EAAoCsgB,kBAAvC,aAAG,EAAgDH,YAAS9f,EAE5F,MAAO,CACLqhG,UAAAA,EACA3hD,cAAAA,EACAnO,kBAAAA,EACAhC,UAAAA,EACAvjC,OAAQ2L,MAAAA,OAAF,EAAEA,EAAM9W,GACdkgG,mBAAAA,EACAC,mBAAAA,EACAE,eAAAA,EACAI,gBAAAA,EACApgF,kBAAAA,KAjCc8e,EA1W2B,IA0BzC,UA1B0C,OAC9CrgC,EAD8C,aAE9C4hG,EAF8C,UAG9CV,EAH8C,SAI9CW,EAJ8C,aAK9CV,EAL8C,aAM9CW,EAN8C,gBAO9CC,EAP8C,YAQ9CC,EAR8C,cAS9CC,EAT8C,oBAU9CC,EAV8C,aAW9CC,EAX8C,iBAY9CC,EAZ8C,cAa9CriD,EAb8C,OAc9C1zC,EAd8C,UAe9Cq1F,EAf8C,UAgB9C9xD,EAhB8C,QAiB9C3F,EAjB8C,eAkB9C7D,EAlB8C,mBAmB9Cg7D,EAnB8C,mBAoB9CC,EApB8C,eAqB9CE,EArB8C,oBAsB9Cc,EAtB8C,gBAuB9CV,EAvB8C,kBAwB9C/vD,EAxB8C,kBAyB9CrwB,GACI,EACJ,MAAM,wBACJ+gF,EADI,sBAEJjY,EAFI,kBAGJC,EAHI,wBAIJiY,EAJI,iBAKJC,EALI,oBAMJ1tB,EANI,qBAOJj2B,EAPI,iBAQJ4jD,EARI,yBASJC,EATI,yBAUJC,IACEhjF,EAAAA,EAAAA,MAGEijF,GAAgBp8D,EAAAA,EAAAA,IAAuB,OACtCq8D,EAAoBC,EAAkBC,IAAqB13D,EAAAA,GAAAA,KAE5D23D,GAAwBngE,EAAAA,EAAAA,KAAY,KACxC6/D,EAAyB,CAAE1iG,OAAQA,EAASmgB,OAAQoB,IACpD6kB,EAAe8M,EAAAA,GAAAA,cACd,CAAClzC,EAAQuhB,EAAmB6kB,EAAgBs8D,IAEzCO,GAA0BpgE,EAAAA,EAAAA,KAAY,KAC1C8/D,EAAyB,CAAE3iG,OAAQA,EAAS4gB,KAAMW,EAAmBX,OACrEwlB,EAAe8M,EAAAA,GAAAA,SACf6vD,MACC,CAAC/iG,EAAQ+iG,EAAmBxhF,EAAmBohF,EAA0Bv8D,IAEtE88D,GAAiCrgE,EAAAA,EAAAA,KAAapiC,IAClD6hG,EAAwB,CAAE7hG,MAAAA,IAEtBA,EAAM8E,QACR0hB,GAAsBs7E,KAEvB,CAACA,EAAyBD,IAEvBa,GAAiCtgE,EAAAA,EAAAA,KAAapiC,IAClD4pF,EAAsB,CAAE5pF,MAAAA,MACvB,CAAC4pF,IAEE+Y,GAA6BvgE,EAAAA,EAAAA,KAAapiC,IAC9C6pF,EAAkB,CAAE7pF,MAAAA,MACnB,CAAC6pF,IAEEpqC,GAAmBrd,EAAAA,EAAAA,KAAY,KACnCgc,EAAqB,CAAExyC,OAAAA,MACtB,CAACwyC,EAAsBxyC,KAEnBg1B,EAAsBgiE,IAA2BzkE,EAAAA,EAAAA,KAAUgjE,IAElExkE,EAAAA,EAAAA,KAAU,KACR12B,YAAW,KACT28F,GAAyBzB,KAnHD,OAqHzB,CAACA,IAEJ,MAAM7+F,IAAO48B,EAAAA,GAAAA,KACP2jE,GAAapC,EACjBiB,IAAiBoB,EAAAA,GAAAA,QACftC,GAAcuC,QACZrB,IAAiBoB,EAAAA,GAAAA,YACnBtC,GAAcwC,YACZtB,IAAiBoB,EAAAA,GAAAA,WACnBtC,GAAcyC,YACX,EACH7B,EACFZ,GAAc0C,OACZ1B,EACFhB,GAAc2C,YACZ7B,EACFd,GAAc4C,cACZ7B,EACFf,GAAc6C,UACZ5B,EACFjB,GAAc8C,cACZ5C,EACFiB,IAAqBlvD,EAAAA,GAAAA,QACnB+tD,GAAc+C,cACZ5B,IAAqBlvD,EAAAA,GAAAA,gBACvB+tD,GAAcgD,sBACZ7B,IAAqBlvD,EAAAA,GAAAA,WACvB+tD,GAAciD,iBACZ9B,IAAqBlvD,EAAAA,GAAAA,mBACvB+tD,GAAckD,yBACZ/B,IAAqBlvD,EAAAA,GAAAA,iBACvB+tD,GAAcmD,uBACZhC,IAAqBlvD,EAAAA,GAAAA,mBACvB+tD,GAAcoD,yBACZjC,IAAqBlvD,EAAAA,GAAAA,kBACvB+tD,GAAcqD,wBACZlC,IAAqBlvD,EAAAA,GAAAA,oBACvB+tD,GAAcsD,0BACZnC,IAAqBlvD,EAAAA,GAAAA,2BACvB+tD,GAAcuD,iCACZpC,IAAqBlvD,EAAAA,GAAAA,qBACvB+tD,GAAcwD,2BACZrC,IAAqBlvD,EAAAA,GAAAA,mBACvB+tD,GAAcyD,yBACZtC,IAAqBlvD,EAAAA,GAAAA,gBACvB+tD,GAAc0D,uBACZvC,IAAqBlvD,EAAAA,GAAAA,mBACvB+tD,GAAc2D,0BACZxC,IAAqBlvD,EAAAA,GAAAA,aACvB+tD,GAAc4D,mBACZzC,IAAqBlvD,EAAAA,GAAAA,QACvB+tD,GAAc6D,cACZ1C,IAAqBlvD,EAAAA,GAAAA,WACvB+tD,GAAc8D,iBACZ3C,IAAqBlvD,EAAAA,GAAAA,eACvB+tD,GAAc+D,qBACZ5C,IAAqBlvD,EAAAA,GAAAA,UACvB+tD,GAAcgE,gBACZ7C,IAAqBlvD,EAAAA,GAAAA,WACvB+tD,GAAciE,iBACZ9C,IAAqBlvD,EAAAA,GAAAA,aACvB+tD,GAAckE,wBACZ9kG,EACFyhG,EACFb,GAAcmE,gBACZ/kG,EAEEglG,GAAmB,WAAGvhD,EAAAA,GAAAA,GAAiBw/C,IAAY,UAAhC,SAA0C,EAkL7DgC,GACJv4F,EAAAA,IACGu2F,KAAerC,GAAcwC,aAC7BH,KAAerC,GAAcyC,YAC7BJ,KAAerC,GAAc8C,eAC7B5C,EAGCoE,IAAkB5iE,EAAAA,GAAAA,GACtB,sBACA2iE,IAAgB,cACfjkE,GAAwBghE,IAAwB,iBAGnD,OACE,0BAAKlkE,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACE/B,UAAU,eACVjuB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLT,QAASuK,EACTvH,UAA0B3/B,GAAfuiG,GAAoB,cAAsB,iBAErD,0BAAK38D,IAAKi6D,EAAezkE,UAAWonE,MAEtC,mBAACvlE,GAAA,EAAD,CACE/N,KAAOoP,GAAwBghE,EAAuB,OAAS,aAC/DpiE,UAAWolE,IA5MjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKpE,GAAc2C,YACjB,OAAO,6BAAK7gG,GAAK,gBACnB,KAAKk+F,GAAc0C,OACjB,OACE,sCACE,mBAAC5+D,GAAA,EAAD,CACEE,yBAAyB,cACzBtwB,MAAOysF,EACP57D,SAAU09D,IAEZ,mBAAChjE,GAAA,EAAD,CACEhwB,OAAK,EACLiwB,KAAK,UACLJ,MAAM,cAENL,QAAS,IAAMo1C,EAAoB,CAAEhmE,YAAYg3C,EAAAA,EAAAA,IAAcvwC,KAAKC,SACpEktB,UAAU,2BAEV,wBAAGvE,UAAU,oBAIrB,KAAK8iE,GAAc8C,cACjB,OAAO,6BAAKhhG,GAAK6sC,EAAY,wBAA0B,oBACzD,KAAKqxD,GAAc+C,cACjB,OAAO,6BAAKjhG,GAAK,SACnB,KAAKk+F,GAAcgD,sBACjB,OAAO,6BAAKlhG,GAAK6sC,EAAY,oBAAsB,oBACrD,KAAKqxD,GAAciD,iBACjB,OAAO,6BAAKnhG,GAAK,eACnB,KAAKk+F,GAAcoD,yBACjB,OAAO,6BAAKthG,GAAK,0BACnB,KAAKk+F,GAAcyD,yBACjB,OAAO,6BAAK3hG,GAAK,wBACnB,KAAKk+F,GAAc0D,uBACjB,OAAO,6BAAK5hG,GAAK,oBACnB,KAAKk+F,GAAc2D,0BACjB,OAAO,6BAAK7hG,GAAK,eACnB,KAAKk+F,GAAcmD,uBACjB,OAAO,6BAAKrhG,GAAK,uBACnB,KAAKk+F,GAAcqD,wBACjB,OAAO,6BAAKvhG,GAAK,iBACnB,KAAKk+F,GAAcsD,0BACjB,OAAO,6BAAKxhG,GAAK,wBACnB,KAAKk+F,GAAcuD,iCACjB,OAAO,6BAAKzhG,GAAK,wBACnB,KAAKk+F,GAAcwD,2BACjB,OAAO,6BAAK1hG,GAAK,qBACnB,KAAKk+F,GAAc6D,cACjB,OAAO,6BAAK/hG,GAAK,2BACnB,KAAKk+F,GAAc8D,iBACjB,OAAO,6BAAuBhiG,GAAlB4+F,EAAuB,WAAmB,YACxD,KAAKV,GAAciE,iBACjB,OACE,sCACE,6BAAKniG,GAAK,eACV,8BAASo7B,UAAU,SAChB5c,IAAsBA,EAAkBf,WACvC,mBAAC0f,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLuC,UAAW3/B,GAAK,QAChB28B,QAASsjE,GAET,wBAAG7kE,UAAU,eAGhB5c,GAAqBA,EAAkBf,WACtC,sCACE,mBAAC0f,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,SACNI,KAAK,UACLuC,UAAW3/B,GAAK,UAChB28B,QAASojE,GAET,wBAAG3kE,UAAU,iBAEf,mBAAC+Y,GAAA,EAAD,CACE1U,OAAQqgE,EACR54D,QAAS84D,EACT9lF,MAAOla,GAAK,cACZyB,KAAMzB,GAAK,kBACX49C,sBAAoB,EACpBxJ,aAAcp0C,GAAK,UACnBq0C,eAAgB6rD,OAO9B,KAAKhC,GAAckE,mBACjB,OAAO,6BAAiBpiG,GAAZ6sC,EAAiB,oBAA4B,mBAC3D,KAAKqxD,GAAc+D,qBACjB,OAAO,6BAAKjiG,GAAK,oCACnB,KAAKk+F,GAAc4C,cACjB,OACE,mBAAC9+D,GAAA,EAAD,CACEpwB,MAAO0sF,EACPh8D,YAAatiC,GAAK,sBAClByiG,iBAAe,EACfhgE,SAAU29D,IAGhB,KAAKlC,GAAc6C,UACjB,OACE,mBAAC/+D,GAAA,EAAD,CACEpwB,MAAO4sF,EACPl8D,YAAatiC,GAAK,mBAClByiG,iBAAe,EACfhgE,SAAU49D,IAGhB,KAAKnC,GAAcmE,WACjB,OAAO,6BAAKriG,GAAK,eACnB,KAAKk+F,GAAcwC,YACjB,OAAO,6BAAK1gG,GAAK,gBACnB,KAAKk+F,GAAckD,yBACjB,OAAO,6BAAKphG,GAAK,uBACnB,KAAKk+F,GAAcyC,WACnB,KAAKzC,GAAc4D,mBACjB,OAAO,6BAAK9hG,GAAK,iBACnB,KAAKk+F,GAAcgE,gBACjB,OAAO,6BAAKliG,GAAK,cACnB,QACE,OACE,sCACE,wCACA,8BAASo7B,UAAU,SAChB4hB,GACC,mBAAC7f,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLuC,UAAW3/B,GAAK,cAChB28B,QAASwgB,GAET,wBAAG/hB,UAAU,mBAGhBujE,GACC,mBAACxhE,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLuC,UAAW3/B,GAAK,QAChB28B,QAAS8iE,GAET,wBAAGrkE,UAAU,eAGhByT,GACC,mBAAC1R,GAAA,EAAD,CACEhwB,OAAK,EACL6vB,MAAM,cACNI,KAAK,UACLuC,UAAW3/B,GAAK,cAChB28B,QAAS+iE,GAET,wBAAGtkE,UAAU,mBAuCtBsnE,S,4BC1UT,SAASC,GACPC,EACAC,EACAzhF,EACA0hF,GAEA,MAAOphG,EAAaqhG,IAAWC,EAAAA,GAAAA,GAC7B5hF,EAAeyhF,OAAiBvlG,EAChCwlG,OACAxlG,EACA2lG,EAAAA,IAKF,MAAO,CAACvhG,EAAaqhG,KAFJrhG,IAAgBohG,GAAWphG,EAAY,KAAOohG,EAAQ,KAKzE,SAASI,GACPC,EACAP,EACAC,EACAzhF,EACAlhB,EACAic,GAEA,MAAMinF,GAAgB3/D,EAAAA,EAAAA,OAEtBwwC,EAAAA,GAAAA,IAAY,KACN2uB,IAAsBO,GAAsBjjG,GAAgBic,IAC9DinF,EAAcjlF,SAAUklF,EAAAA,EAAAA,IACtBnjG,EACAic,EACAgnF,MAGH,CAACjjG,EAAcic,EAAUymF,EAAmBO,IAE/C,MAAOzhG,EAAaqhG,IAAWC,EAAAA,GAAAA,GAC7B5hF,EAAeyhF,OAAiBvlG,EAChC8lG,EAAcjlF,aACd7gB,EACuB,UAAvB6lG,EAAiC7nF,EAAAA,GAAqBgB,EAAAA,IAKxD,MAAO,CAAC5a,EAAaqhG,KAFJrhG,IAAgB0hG,EAAcjlF,SAAWzc,EAAY,KAAO0hG,EAAcjlF,QAAQ,KCpKrG,MAGMmlF,IAAwB1sF,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAE1D,IAAI02F,IAA8B,E,qGCoFlC,MAAMC,GAAO,CACX,CAAEnlG,KAAM,QAAS6b,MAAO,mBACxB,CAAE7b,KAAM,YAAa6b,MAAO,mBAC5B,CAAE7b,KAAM,QAAS6b,MAAO,mBACxB,CAAE7b,KAAM,QAAS6b,MAAO,mBACxB,CAAE7b,KAAM,QAAS6b,MAAO,oBA2Y1B,SAASupF,GAAgCC,GACvC,MAAO,CAEJ,gDAA+CA,wBAE/C,4DAA2DA,yBAC5DriG,KAAK,MAGT,UAAey5B,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAoC,YAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BiD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,IACxCwf,YAAaknF,EAAf,cAAgCr7F,IAAkBmT,EAAAA,EAAAA,IAAyBze,IAAW,IACtF,SAAEmf,GAAc7T,GAAiBq7F,GAAmBr7F,EAAcq7F,IAAqB,IAErF91F,KAAMqtC,EAAWn5B,aAAcF,GAAqB7kB,EAAOwQ,OAC3DK,KAAM2vB,GAAcxgC,EAAOwL,MAE7BsmB,EAAUpsB,IAAQq0E,EAAAA,EAAAA,IAAYr0E,GAC9BmqC,EAAYnqC,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,GAClCkhG,EAAgB90E,GAAY+d,IAAauhD,EAAAA,EAAAA,IAAY1rF,GACrDswB,EAAUtwB,MAAAA,GAAH,UAAGA,EAAM2T,gBAAT,aAAG,EAAgB2c,QAC1B6wE,EAAmBD,GAAiBlhG,GAAQA,EAAK2T,WAAa3T,EAAK2T,SAASytF,eAC5EC,EAAgBH,GAAiBlhG,KAASshG,EAAAA,EAAAA,IAAiBthG,EAAM,gBAAkBA,EAAKksC,WACxFq1D,EAAmBL,GAAiBlhG,KAASshG,EAAAA,EAAAA,IAAiBthG,EAAM,aAAeA,EAAKksC,WACxFo2B,GAAoBC,EAAAA,EAAAA,IAAwBjoE,EAAQC,GAE1D,IAAIinG,EACAC,EACAlvF,EAOJ,OANI2O,EAAAA,EAAAA,IAAS3mB,KACXknG,EAAiBlnG,EACjBgY,GAAOmB,EAAAA,EAAAA,IAAWpZ,EAAQmnG,GAC1BD,EAAoBjvF,IAASA,EAAK2N,UAAWE,EAAAA,EAAAA,IAAU7N,IAGlD,CACL2oB,OAAOC,EAAAA,EAAAA,IAAY7gC,GACnB6vC,UAAAA,EACAs3D,eAAAA,EACAjkG,aAAAA,EACAic,SAAAA,EACAwnF,gBAAAA,EACAO,kBAAAA,EACAN,cAAAA,EACAC,iBAAAA,EACAE,cAAAA,EACAE,iBAAAA,EACAhwF,cAAejX,EAAOiX,cACtB05B,oBAAoBpqC,EAAAA,EAAAA,IAAyBvG,GAC7CsT,aAAc5N,MAAAA,OAAF,EAAEA,EAAM4N,aACpB8Q,aAAcpkB,EAAOokB,aACrBna,iBAAkBjK,EAAOiK,iBACzB+9D,kBAAAA,EACA9pB,UAAAA,EACAr5B,iBAAAA,EACA2b,UAAAA,EACA4mE,gBAAiB1hG,MAAAA,OAAF,EAAEA,EAAMupD,eACnB23C,GAAiB5wE,GAAW,CAAEA,QAAAA,MAC9BkxE,GAAqBjvF,GAAQ,CAAEovF,cAAa,UAAEpvF,EAAK8N,mBAAP,aAAE,EAAkBxe,QAnDtD+4B,EA9YuB,IA2BrC,IA3BsC,OAC1CrgC,EAD0C,aAE1CmiG,EAF0C,qBAG1CkF,EAH0C,MAI1C1mE,EAJ0C,UAK1CiP,EAL0C,eAM1Cs3D,EAN0C,cAO1ClwF,EAP0C,aAQ1C/T,EAR0C,SAS1Cic,EAT0C,gBAU1CwnF,EAV0C,kBAW1CO,EAX0C,cAY1CN,EAZ0C,iBAa1CC,EAb0C,cAc1CE,EAd0C,iBAe1CE,EAf0C,cAgB1CI,EAhB0C,QAiB1CrxE,EAjB0C,UAkB1CkoB,EAlB0C,iBAmB1Cr5B,EAnB0C,UAoB1C2b,EApB0C,mBAqB1CmQ,EArB0C,aAsB1Cr9B,EAtB0C,aAuB1C8Q,EAvB0C,kBAwB1C4jD,EAxB0C,iBAyB1C/9D,EAzB0C,gBA0B1Cm9F,GACI,EACJ,MAAM,wBACJG,EADI,gBAEJC,EAFI,gBAGJC,EAHI,SAIJvlG,EAJI,yBAKJwlG,EALI,gBAMJv3B,EANI,gBAOJC,EAPI,aAQJnqE,EARI,kBASJ0hG,EATI,6BAUJC,IACEhoF,EAAAA,EAAAA,MAGEi1B,GAAepO,EAAAA,EAAAA,IAAuB,MAEtCD,GAAgBC,EAAAA,EAAAA,IAAuB,MACvCzjC,GAAO48B,EAAAA,GAAAA,MACN8I,EAAWm/D,IAAgBhpE,EAAAA,EAAAA,IAAS,IACpCipE,EAAgBC,IAAqBlpE,EAAAA,EAAAA,MAEtC4J,GAAO3G,EAAAA,EAAAA,KAAQ,IAAO,IACtB8kE,EAAgB,CAAC,CACnBvlG,KAAM,UAAW6b,MAAO2yB,EAAY,qBAAuB,iBACxD,MACF22D,MACCU,EAAoB,CAAC,CACvB7lG,KAAM,cAAe6b,MAAO,qBACzB,KACH,CAACgqF,EAAmBN,EAAe/2D,IACjCm4D,EAAUv/D,EAAKC,GAAWrnC,MAEzBqlG,EAAYhiG,GAAaqhG,GAASkC,IF5J5B,SACbt3D,EACA62D,EACAC,EACAS,EACAF,EACArB,EACA7c,EACAud,EACAnpD,EACAr5B,EACA2b,EACAt9B,EACAic,EACAlf,EACAmkB,GAEA,IADAna,EACA,0DADmB,EAEnB,MAAMy8F,EAAyB,YAAZsB,GAA0BrB,EAA4BA,EAAVqB,EAEzDG,GAAYrmE,EAAAA,EAAAA,KAAQ,KACxB,GAAKgoD,GAAqB5rC,GAAcr5B,EAIxC,OAAOujF,EAAAA,EAAAA,IACLte,EAAiBzmF,KAAI,QAAC,OAAEiJ,GAAH,SAAgBA,KACrC4xC,EACAr5B,OACAvkB,EACA2J,KAED,CAAC6/E,EAAkB7/E,EAAkBi0C,EAAWr5B,IAE7C9F,GAAU+iB,EAAAA,EAAAA,KAAQ,KACtB,GAAKulE,GAAkB7mE,EAIvB,OAAO6nE,EAAAA,EAAAA,IAAYhB,EAAe7mE,GAAW,KAC5C,CAACA,EAAW6mE,KAERiB,EAAmBC,EAAgBC,GAA2B7C,GACnEe,EAAYc,EAAiBpjF,EAAc+jF,IAGtCM,EAAkBC,EAAcC,GAAyBzC,GAC9D,QAASQ,EAAYwB,EAAgB9jF,EAAclhB,EAAcic,IAG5DypF,EAAqBC,EAAkBC,GAA6B5C,GACzE,YAAaQ,EAAYwB,EAAgB9jF,EAAclhB,EAAcic,IAGhE4pF,EAAiBC,EAAcC,GAAyB/C,GAC7D,QAASQ,EAAYwB,EAAgB9jF,EAAclhB,EAAcic,IAG5D+pF,EAAkBC,EAAcC,GAAyBlD,GAC9D,QAASQ,EAAYwB,EAAgB9jF,EAAclhB,EAAcic,IAG5DkqF,EAAkBC,EAAeC,GAA0BrD,GAChE,QAASQ,EAAYwB,EAAgB9jF,EAAclhB,EAAcic,IAG5DqqF,EAAuBC,EAAoBC,GAA+B/D,GAC/Ee,EAAYe,EAAiBrjF,EAAcrF,GAG7C,IAAIra,EACAqhG,EACAkC,GAAgB,EAEpB,OAAQvB,GACN,IAAK,UACHhiG,EAAc4jG,EACdvC,EAAUwC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACH9jG,EAAc8kG,EACdzD,EAAU0D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACHhlG,EAAc+jG,EACd1C,EAAU2C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACHjkG,EAAckkG,EACd7C,EAAU8C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACHpkG,EAAcqkG,EACdhD,EAAUiD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHvkG,EAAcwkG,EACdnD,EAAUoD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACH1kG,EAAc2kG,EACdtD,EAAUuD,EACVrB,EAAgBsB,EAIpB,MAAO,CAAC7C,EAAYhiG,EAAaqhG,EAASkC,GE4CgB0B,CACxDh5D,EACA62D,EACAC,EACAC,EACAM,EACArB,EACA3wE,EACAqxE,EACAnpD,EACAr5B,EACA2b,EACAt9B,EACAic,EACAlf,EACAmkB,EACAna,GAEIi2B,GAAYuI,EAAKt6B,WAAU,QAAC,KAAE9M,GAAH,SAAcA,IAASqlG,MAElD,aAAElqB,ID7KK,SACb3nC,EACAmzD,EACA5F,EACAkF,IAGAlpB,EAAAA,GAAAA,IAAsB,IAAmB,IAAjBwrB,GAAiB,EACvC,GAAIA,GAAeA,IAAgB5B,EAAS,CAC1C,MAAMj3C,EAAYlc,EAAa1zB,QACzB0oF,EAAS94C,EAAUvzB,cAA8B,YACnDuzB,EAAUolB,UAAY0zB,EAAOztB,YAC/BkrB,EAAiC,YAAZU,EAAwBxE,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvE+C,IAA8B,GAC9B93C,EAAAA,GAAAA,GAAiBsC,EAAW84C,EAAQ,aAASvpG,OAAWA,OAAWA,EArB/C,KAsBpBqG,YAAW,KACT4/F,IAA8B,IAtBD,SA0BlC,CAACyB,EAASV,KAGblpB,EAAAA,GAAAA,IAAsB,IAAwB,IAAtB0rB,GAAsB,EAC5C,GAAI1H,IAAiBoB,EAAAA,GAAAA,SAAwBpB,IAAiB0H,EAC5D,OAGF,MAAM/4C,EAAYlc,EAAa1zB,QAC/B,IAAK4vC,EACH,OAGF,MAAMg5C,EAAYh5C,EAAUvzB,cAA8B,aACrDusE,GAAaA,EAAU3tB,UAAYrrB,EAAUolB,YAIlDowB,IAA8B,GAC9B93C,EAAAA,GAAAA,GACEsC,EACAA,EAAU/a,kBACV,aACA11C,EACyB,EAAzBywD,EAAUklB,cAGZtvE,YAAW,KACT4/F,IAA8B,IAtDG,KAyDnCe,EAAqBlF,MACpB,CAACA,IAEJ,MAAM4H,GAAwBlnE,EAAAA,EAAAA,KAAY,KACxC,MAAMiuB,EAAYlc,EAAa1zB,QAC/B,IAAK4vC,EACH,OAGF,MAAMg5C,EAAYh5C,EAAUvzB,cAA8B,YAC1D,IAAKusE,EACH,OAGF,IAAI9oD,EAAsBuiD,EAAAA,GAAAA,QACtBzyC,EAAUolB,WAAa4zB,EAAU3tB,YACnCn7B,EAAoB,YAAZ+mD,EACJxE,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGN8D,EAAqBrmD,KACpB,CAACpM,EAAcyyD,EAAsBU,IAoBxC,OAjBA3qE,EAAAA,EAAAA,KAAU,KACJkpE,IAIJyD,MACC,CAACA,EAAuBhC,IAWpB,CAAExrB,cARY15C,EAAAA,EAAAA,KAAY,KAC3ByjE,IAIJD,GAAsB0D,KACrB,CAACA,KCkFqBC,CAAgBp1D,EAAcmzD,EAAS5F,EAAckF,IAExE,mBAAE4C,GAAF,qBAAsBC,IC5Lf,SACbt1D,GAEA,IADAu1D,EACA,uDADuB,uCAGvB/sE,EAAAA,EAAAA,KAAU,KACR,SAASgtE,IACP,MAAMt5C,EAAYlc,EAAa1zB,QACzBmpF,EAAev5C,EAAUvzB,cAA8B4sE,GACvDP,EAAS94C,EAAUvzB,cAA8B,YACnD8sE,GAAgBT,IAClBS,EAAat7D,MAAMu7D,UAAex5C,EAAUklB,aAAe4zB,EAAO5zB,aAAlC,MAQpC,OAJAo0B,IAEA3jG,OAAOu4B,iBAAiB,SAAUorE,GAAc,GAEzC,KACL3jG,OAAOw4B,oBAAoB,SAAUmrE,GAAc,MAEpD,CAACx1D,EAAcu1D,IAGlB,MAAMF,GAAqBpnE,EAAAA,EAAAA,KAAY,KACrC,MAAMiuB,EAAYlc,EAAa1zB,QAC/B,GAAkC,WAA9B4vC,EAAU/hB,MAAMw7D,UAAwB,CAC1C,MAAMC,EAAiB15C,EAAUxhB,YAAcwhB,EAAU25C,YACzD35C,EAAU/hB,MAAMw7D,UAAY,SAC5Bz5C,EAAU/hB,MAAM27D,YAAe,GAAEF,SAElC,CAAC51D,IAEEs1D,GAAuBrnE,EAAAA,EAAAA,KAAY,KACvC,MAAMiuB,EAAYlc,EAAa1zB,QAC/B4vC,EAAU/hB,MAAMw7D,UAAY,SAC5Bz5C,EAAU/hB,MAAM27D,YAAc,MAC7B,CAAC91D,IAEJ,MAAO,CAAEq1D,mBAAAA,EAAoBC,qBAAAA,GDoJwBS,CAAmB/1D,IAEjEg2D,GAAaC,IE9LC,MACrB,MAAOD,EAAaE,IAAkBlsE,EAAAA,EAAAA,KAAkB,GAMxD,MAAO,CAACgsE,GAJkB/nE,EAAAA,EAAAA,KAAY,KACpCioE,GAAgB5pF,IAAaA,MAC5B,MFyLqC6pF,IAEhCp3B,QAAStG,KAAgCuG,EAAAA,GAAAA,IAAwB,CACvEC,QAASj/B,EACTogC,WA1F0B,MA6FtBg2B,IAAuBnoE,EAAAA,EAAAA,KAAY,KACvCqnE,KACAW,OACC,CAACX,GAAsBW,KAEpBI,IAA4BpoE,EAAAA,EAAAA,KAAY,KAC5C8kE,EAA6BuD,EAAAA,GAAAA,cAC5B,CAACvD,KAGJvqE,EAAAA,EAAAA,KAAU,KACRkqE,EAAwB,CAAEtmG,UAAW+mG,MACpC,CAACT,EAAyBS,IAE7B,MAAMthF,GAAYygF,GAAkBlnG,GAEpCo9B,EAAAA,EAAAA,KAAU,KACJjZ,GACFujF,EAAkB,CAAEjhF,UAAAA,OAErB,CAACihF,EAAmBjhF,GAAWtC,IAElC,MAAMgnF,IAAoBtoE,EAAAA,EAAAA,KAAav+B,IACrC4rE,EAAgB,CACdlwE,OAAQymB,GACRxmB,SAAUkB,EAAAA,GACVmD,UAAAA,EACA2B,OAAQwqE,EAAAA,GAAAA,gBAET,CAAChqD,GAAWypD,IAETk7B,IAAkBvoE,EAAAA,EAAAA,KAAav+B,IACnC6rE,EAAgB,CAAEnwE,OAAQymB,GAAWniB,UAAAA,MACpC,CAACmiB,GAAW0pD,IAETk7B,IAAoBxoE,EAAAA,EAAAA,KAAa3hC,IACrCe,EAAS,CAAEf,GAAAA,MACV,CAACe,IAEEqpG,IAAqBzoE,EAAAA,EAAAA,KAAav+B,IACtC0B,EAAa,CAAEhG,OAAQymB,GAAWniB,UAAAA,MACjC,CAACmiB,GAAWzgB,IAETulG,IAAgC1oE,EAAAA,EAAAA,KAAY,KAChDilE,OAAkBznG,KACjB,IAuBH,IAAImrG,IArBJpuE,EAAAA,EAAAA,KAAU,KACR,GAAKmJ,EAAcrlB,SAAY7X,EAAAA,GAI/B,OAAO89B,EAAAA,GAAAA,IAAcZ,EAAcrlB,QAAS,CAC1CkmB,wBAAyB,WACzBC,QAAU,CAAC/5B,EAAGvF,IACRA,IAAcu/B,GAAAA,GAAAA,MAChBsgE,EAAap9F,KAAK2kB,IAAIsZ,EAAY,EAAGD,EAAKjjC,OAAS,KAC5C,GACEwC,IAAcu/B,GAAAA,GAAAA,QACvBsgE,EAAap9F,KAAKC,IAAI,EAAGg+B,EAAY,KAC9B,OAMZ,CAACA,EAAWD,EAAKjjC,SAGpB,MAAMkmG,GAA4B,YAAfhF,IAA8BE,GAAgC,UAAfF,EAE9DgF,GACFD,GAAkB96D,EAA2C,EAtKrC,IAwKdjsC,KACV+mG,GAAiBE,EAAAA,GAEnB,MAAMC,IAAmBzkB,EAAAA,GAAAA,GAAkB,CAAClnF,EAAQymG,GAAa+E,IA4JjE,OACE,mBAACI,GAAA,EAAD,CACEjjE,IAAKiM,EACLzW,UAAU,wBACV0tE,aAAcrF,GAAgCC,GAC9ClR,MAAOoW,GAAmBlnG,QAAcpE,EACxCuqG,YAAaA,GACbkB,cAAeC,EAAAA,GACfC,iBAAkBL,GAAmC,YAAflF,EAA2BT,EAAAA,GAAgB3nF,EAAAA,GAAsB,EAEvG4tF,sBAAoB,EACpBC,YAAU,EACVC,WAAYrG,GACZvnB,SAAUhC,KAERyrB,IAyCR,SAA2BhoG,EAAgBknG,GACzC,OACE,0BAAK/oE,UAAU,gBACb,mBAACiuE,GAAA,EAAD,CAAa//F,OAAQ66F,GAAkBlnG,IACvC,mBAACqsG,GAAA,EAAD,CAAWxmE,aAAcqhE,GAAkBlnG,KA7CxBssG,CAAkBtsG,EAAQknG,IAC3C7zF,GACA,0BACE8qB,UAAU,gBAEV,mBAAC6B,GAAA,EAAD,CACE2I,IAAKpC,EACLtU,KAAMlvB,EAAK88B,MAAQ,sBAAwB,kBAC3CI,UAAWA,GACX2I,YAAaJ,EAAKjjC,OAClBgnG,qBAAmB,EACnBpuE,UAAU,0BACVquE,QAASvC,GACTnJ,OAAQkK,IA5KlB,WACE,IAAKvmG,KAAgBknG,KAAqB1oG,EAAc,CACtD,MAAMwpG,EAAYhB,KAAeE,GAEjC,OACE,0BAAKxtE,UAAU,uBACXsuE,GAAa,mBAAC3sE,GAAA,EAAD,OAKrB,IAAKr7B,GAAYc,OAAQ,CACvB,IAAIf,EAEJ,OAAQiiG,GACN,IAAK,UACHjiG,EAAOoiG,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACHpiG,EAAOzB,EAAK,oBACZ,MACF,IAAK,YACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,yBACZ,MACF,QACEyB,EAAOzB,EAAK,0BAGhB,OACE,0BAAKo7B,UAAU,sBACb,mBAACuuE,GAAA,EAAD,CAAcloG,KAAMA,KAK1B,OACE,0BACE25B,UAAY,WAAUsoE,SACtB7mE,IAAK78B,EAAK88B,OAAwB,UAAf4mE,EAAyB,WAAQpmG,EACpDg4E,eAAa,GAEG,UAAfouB,EACEhiG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACyrG,GAAA,EAAD,CACE9wE,IAAK36B,EACLoC,QAASL,EAAa/B,GACtB8tD,YAAam4C,GAAmBlkG,EAAa/B,GAAI8tD,YACjDqD,oBAAqBgb,GACrB3tC,QAASyrE,OAGI,cAAf1E,EACDhiG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACiyE,GAAA,EAAD,CACEt3C,IAAK36B,EACLoC,QAASL,EAAa/B,GACtB0rG,UAAQ,EACRC,SAAO,EACP1uE,UAAU,cACVg7B,cAAe4O,EAAkBjgE,SAAS5G,GAC1CmxD,oBAAqBgb,GACrBy/B,YAAaxB,OAGA,UAAf7E,EACDhiG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC6rG,GAAA,EAAD,CACElxE,IAAK36B,EACLoC,QAASL,EAAa/B,GACtB8tD,YAAam4C,GAAmBlkG,EAAa/B,GAAI8tD,YACjDqD,oBAAqBgb,GACrB2/B,eAAgB1B,OAGH,UAAf7E,EACDhiG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC4xE,GAAA,EAAD,CACEj3C,IAAK36B,EACLy/B,MAAOA,EACPr9B,QAASL,EAAa/B,GACtB+E,OAAQ8sE,EAAAA,GAAAA,YACRjpE,KAAM7G,EAAa/B,GAAI4I,KACvBqa,aAAcA,EACdga,UAAU,cACV80C,OAAQm4B,GACR0B,YAAaxB,GACbnyC,cAAe4O,EAAkBjgE,SAAS5G,OAG7B,UAAfulG,EACDhiG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC4xE,GAAA,EAAD,CACEj3C,IAAK36B,EACLy/B,MAAOA,EACPr9B,QAASL,EAAa/B,GACtBwyD,aAAau5C,EAAAA,GAAAA,GAAclqG,EAAME,EAAa/B,GAAKq/B,EAAW0d,GAC9Dh4C,OAAQ8sE,EAAAA,GAAAA,YACRjpE,KAAM7G,EAAa/B,GAAI4I,KACvBqa,aAAcA,EACdga,UAAU,cACV80C,OAAQm4B,GACR0B,YAAaxB,GACbnyC,cAAe4O,EAAkBjgE,SAAS5G,OAG7B,YAAfulG,EACDhiG,GAA0BrB,KAAI,CAAClC,EAAI6Q,KAClC,0BAACm7F,GAAA,EAAD,CACErxE,IAAK36B,EACL8/F,cAAejvF,EACfosB,UAAU,6CAEVuB,QAAS,IAAM2rE,GAAkBnqG,GACjCisG,gBApIoBC,EAoImBlsG,EAnI1CksG,IAAap2F,GAAkBgwF,EAA+B,CAAC,CACpE/pF,MAAOla,EAAK,iCACZyhC,KAAM,OACN6oE,QAAS,KACPvF,EAAkBsF,WAJmC/sG,IAqI/C,mBAACykD,GAAA,EAAD,CAAiBz4C,OAAQnL,EAAIosG,eAAa,KAtItD,IAAgCF,KAyIP,gBAAf3G,EACDhiG,GAA0BrB,KAAI,CAAClC,EAAI6Q,IAClC,mBAACm7F,GAAA,EAAD,CACErxE,IAAK36B,EACL8/F,cAAejvF,EACfosB,UAAU,6CAEVuB,QAAS,IAAMz9B,EAAS,CAAEf,GAAAA,KAE1B,mBAACkkD,GAAA,EAAD,CAAeplD,OAAQkB,YAGzBb,GAmCC+yE,IAEH,mBAAC7qC,GAAA,EAAD,CAASglE,KAAG,EAAC9kE,UAAWA,EAAWD,KAAMA,EAAME,YAAak/D,KAI/Dd,GACC,mBAAC0G,GAAA,EAAD,CACErkE,QAAwB,YAAfs9D,EACT/mE,QAASurE,GACTvoE,UAAW3/B,EAAK,0BAEhB,wBAAGo7B,UAAU,0BAGhB6oE,GACC,mBAACyG,GAAA,EAAD,CACEjrE,OAAQ39B,QAAQgjG,GAChBx7F,OAAQw7F,EACR59D,QAASshE,UGndnB,IAAe1tE,EAAAA,EAAAA,KAPyBgL,IACtC,MAAM6kE,GAAc3kE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO0kE,EAAc,mBAACA,EAAgB7kE,GAAY,mBAACI,GAAA,EAAD,SCKpD,IAAepL,EAAAA,EAAAA,KAPwBgL,IACrC,MAAM8kE,GAAa5kE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO2kE,EAAa,mBAACA,EAAe9kE,GAAY,mBAACI,GAAA,EAAD,SCElD,GAPuCJ,IACrC,MAAMu8D,GAAar8D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOo8D,EAAa,mBAACA,EAAev8D,GAAY,mBAACI,GAAA,EAAD,OCClD,IAAepL,EAAAA,EAAAA,KAPgB,KAC7B,MAAMgmE,GAAgB96D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAO66D,EAAgB,mBAACA,EAAD,MAAoB,mBAAC56D,GAAA,EAAD,SCG7C,IAAepL,EAAAA,EAAAA,KAPY,KACzB,MAAMimE,GAAY/6D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAO86D,EAAY,mBAACA,EAAD,MAAgB,mBAAC76D,GAAA,EAAD,SCErC,IAAepL,EAAAA,EAAAA,KANc,KAC3B,MAAM+lE,GAAc76D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAO46D,EAAc,mBAACA,EAAD,MAAkB,mBAAC36D,GAAA,EAAD,S,eCqCzC,MA4GA,IAAepL,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAACtgC,EAAD,KAAoC,UAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IACxB+e,QAAS6uF,GAAoB7tG,EAAOmlB,aAAe,IACnDtU,KAAM2vB,GAAcxgC,EAAOwL,OAC7B,cAAEyL,EAAF,uBAAiB7U,EAAjB,gBAAyCm6B,GAAoBv8B,EAC7D6vC,EAAYnqC,IAAQ0qC,EAAAA,EAAAA,IAAc1qC,IAGtChF,MAAO6/B,EADH,eAEJh1B,EAFI,cAGJa,EAHI,aAIJC,GACErM,EAAO8mB,WAEX,MAAO,CACL+oB,UAAAA,EACA7Z,QAAStwB,MAAAA,GAAF,UAAEA,EAAM2T,gBAAR,aAAE,EAAgB2c,QACzB/e,cAAAA,EACAupB,UAAAA,EACAqtE,gBAAAA,EACAttE,YAAAA,EACAutE,YAAaviG,EACbuR,UAAW1a,IAA2B+oG,EAAAA,GAAAA,QACtC/+F,cAAAA,EACAC,aAAAA,EACAkwB,gBAAAA,KA1Bc+D,EA5G8B,IAe5C,IAf6C,UACjDuP,EADiD,gBAEjDtT,EAFiD,QAGjDvG,EAHiD,WAIjD+3E,EAJiD,cAKjD92F,EALiD,UAMjDupB,EANiD,gBAOjDqtE,EAPiD,UAQjD/wF,EARiD,YASjDyjB,EATiD,YAUjDutE,EAViD,aAWjDzhG,EAXiD,cAYjDD,EAZiD,QAajD89B,EAbiD,SAcjDr9B,GACI,EACJ,MAAM,mBAAEmhG,EAAF,gBAAsBnoF,IAAoBjG,EAAAA,EAAAA,MAE1C5c,GAAO48B,EAAAA,GAAAA,MACNquE,EAAmBC,IAAwBrvE,EAAAA,EAAAA,IAAmB,IAE/DsvE,GADwBj0C,EAAAA,GAAAA,GAAY+zC,KACcA,GAExD5wE,EAAAA,EAAAA,KAAU,KACJxwB,GAAgC,yBAApB0vB,GACd1W,MAED,CAAC0W,EAAiB1vB,EAAUgZ,KAE/B6hB,EAAAA,GAAAA,IAAe76B,EAAUq9B,GAEzB,MAAMi+D,GAAYrmE,EAAAA,EAAAA,KAAQ,IACjB9L,EAAUA,EAAQ3yB,KAAK+qG,GAAWA,EAAO9hG,SAAU,IACzD,CAAC0pB,IAEEq4E,GAAqBvrE,EAAAA,EAAAA,KAAapiC,IACtCstG,EAAmB,CAAEttG,MAAAA,MACpB,CAACstG,IAEEM,GAAexsE,EAAAA,EAAAA,KAAQ,KAE3B,MAAMoc,GAAYt3C,EAAAA,EAAAA,MAAY4J,MAAMK,KAC9B09F,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiB3vD,EAAW3d,GAAe,GAE1G,OAAO8nE,EAAAA,EAAAA,KACLrwF,EAAAA,EAAAA,IAAO,IACFu2F,KACCliG,GAAgB,MAChBD,GAAiB,KACpB9I,QAAQgJ,IACT,MAAM2L,EAAOimC,EAAU5xC,GAOvB,OACG67F,EAAUpgG,SAASuE,IACjBA,IAAW2K,KACTgB,KAAS6N,EAAAA,EAAAA,IAAU7N,KAAW43B,GAAa53B,EAAKw2F,wBAGzDjuE,KAED,CACDqtE,EAAiBrtE,EAAWD,EAAal0B,EAAcD,EAAe6K,EAAekxF,EAAWt4D,IAG5F6+D,GAAiB5rE,EAAAA,EAAAA,KAAY,KAC7BmrE,EAAkBzoG,SACpBwoG,EAAmB,CAAEttG,MAAO,KAC5BqtG,EAAWE,MAEZ,CAACA,EAAmBD,EAAoBD,IAE3C,OACE,0BAAK3vE,UAAU,kBACb,0BAAKA,UAAU,wBACb,mBAACuwE,GAAA,EAAD,CACE7I,QAASwI,EACTM,YAAaX,EACbY,YAAatuE,EACbuuE,kBAAmB9rG,EAAK,yBACxB+rG,cAAc,4BACdjyF,UAAWgxF,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,gBAAiBf,IAGnB,mBAACV,GAAA,EAAD,CACErkE,QAAStkC,QAAQmpG,EAAkBzoG,QACnCguC,SAAU12B,EACV6lB,UAAW3/B,EAAK,yBAChB28B,QAAS+uE,GAER5xF,EACC,mBAACijB,GAAA,EAAD,CAASC,MAAM,UAEf,wBAAG5B,UAAU,4BCtGnB+wE,GAAqB/pG,OAAOC,KAAK+pG,EAAAA,IAAoB5pG,OAAS,EAC9D6pG,GAA2BjqG,OAAOC,KAAK8tC,EAAAA,IAAmB3tC,OAAS,EAEzE,SAAS8pG,KACP,MAAMh8D,EAAcxc,SAAS0G,cAAc,mCACvC8V,GACFA,EAAYxF,OAIhB,MAwQA,IAAehQ,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IAAuB,MACtB,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3DuvG,GAAuBC,EAAAA,EAAAA,IAA2BxvG,GAClDyvG,EAAuBxvG,EAAM,UAAGD,EAAO4M,WAAWnE,SAASxI,UAA9B,aAAG,EAAoC8M,gBAAazM,EAEvF,MAAO,CACLijG,YAAYmM,EAAAA,EAAAA,IAA4B1vG,GACxCC,OAAAA,EACAC,SAAAA,EACAyvG,eAAgB7qG,QAAQ7E,GAAUsvG,GAClCppE,4BAA6BnmC,EAAOmmC,4BACpCspE,qBAAAA,KAZcnvE,EAxQgB,IAO9B,UAP+B,WACnCijE,EADmC,OAEnCtjG,EAFmC,SAGnCC,EAHmC,eAInCyvG,EAJmC,4BAKnCxpE,EALmC,qBAMnCspE,GACI,EACJ,MAAM,eACJG,EADI,iBAEJnN,EAFI,qBAGJ1iG,EAHI,sBAIJuqF,EAJI,kBAKJC,EALI,iBAMJslB,EANI,eAOJC,EAPI,6BAQJlI,EARI,yBASJjF,EATI,iBAUJD,EAVI,oBAWJqN,EAXI,4BAYJ39D,IACExyB,EAAAA,EAAAA,OAEIsP,MAAOF,GAAgByzB,MACxB2/C,EAAc4N,IAAmBnxE,EAAAA,EAAAA,IAAuB2kE,EAAAA,GAAAA,UACxDnB,EAAkB4N,IAAuBpxE,EAAAA,EAAAA,IAA4BsU,EAAAA,GAAAA,UACrE+8D,EAAsBC,IAA2BtxE,EAAAA,EAAAA,OACjDuxE,EAAyBC,IAA8BxxE,EAAAA,EAAAA,MACxDyxE,EAAiBlO,IAAiBoB,EAAAA,GAAAA,QAElC/gE,OAAwBniC,IAAfijG,EACTpC,EAAYoC,IAAe6L,EAAAA,GAAAA,SAC3BtN,EAAWyB,IAAe6L,EAAAA,GAAAA,OAC1BhO,EAAemC,IAAe6L,EAAAA,GAAAA,WAC9BrN,EAAewB,IAAe6L,EAAAA,GAAAA,WAC9BpN,EAAkBuB,IAAe6L,EAAAA,GAAAA,cACjCnN,EAAcsB,IAAe6L,EAAAA,GAAAA,UAC7BlN,EAAgBqB,IAAe6L,EAAAA,GAAAA,YAC/BjN,EAAsBoB,IAAe6L,EAAAA,GAAAA,cACrCmB,EAAevhF,GAAeG,EAAAA,IAE7BmS,EAAsBgiE,IAA2BzkE,EAAAA,EAAAA,KAAU4D,GAE5D6iE,EAAmB,WAAGvhD,EAAAA,GAAAA,GAAiBw/C,GAAY,GAAOoM,UAAvC,SAA2D,EAE9Etf,GAAQvtD,EAAAA,EAAAA,KAAY,WAA2B,IAA1B0tE,IAA0B,yDACnD,OAAQjN,GACN,KAAK6L,EAAAA,GAAAA,cACHxH,EAA6BuD,EAAAA,GAAAA,QAC7B,MACF,KAAKiE,EAAAA,GAAAA,SACH,GAAIkB,GAAkBE,EAAgB,CACpCR,EAAgBxM,EAAAA,GAAAA,SAChB,MAEFoM,OAAetvG,EAAW,CAAEigG,gBAAgB,IAC5C,MACF,KAAK6O,EAAAA,GAAAA,WACH,OAAQ/M,GACN,KAAKlvD,EAAAA,GAAAA,QACHsvD,IACA,MACF,KAAKtvD,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACH88D,EAAoB98D,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACH88D,EAAoB98D,EAAAA,GAAAA,kBACpBg9D,OAAwB7vG,GACxB+vG,OAA2B/vG,GAC3B,MACF,KAAK6yC,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACH88D,EAAoB98D,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACH88D,EAAoB98D,EAAAA,GAAAA,SACpB48D,EAAoB,CAAE3vF,YAAQ9f,IAC9BqiG,EAAyB,CAAE1iG,OAAAA,EAAQmgB,YAAQ9f,IAI/C,MAEF,KAAK8uG,EAAAA,GAAAA,WACH1M,IACA,MACF,KAAK0M,EAAAA,GAAAA,OACHE,KACAvvG,IACA,MAEF,KAAKqvG,EAAAA,GAAAA,cACHE,KACAhlB,EAAsB,CAAE5pF,WAAOJ,IAC/B,MACF,KAAK8uG,EAAAA,GAAAA,UACHE,KACA/kB,EAAkB,CAAE7pF,WAAOJ,IAC3B,MAEF,KAAK8uG,EAAAA,GAAAA,YACHS,OAGH,CACDtM,EAAY+M,EAAgBV,EAAgBC,EAAkBjI,EAC9DvF,EAAkBI,EAAkB1iG,EAAsBuqF,EAAuBC,EACjFoY,EAA0B1iG,EAAQ8vG,EAAqBrN,IAGnD+N,GAAyB3tE,EAAAA,EAAAA,KAAY,CAACuqE,EAAUqD,KACpDP,EAAwB9C,GACxBgD,EAA2BK,KAC1B,IAEGC,GAA6B7tE,EAAAA,EAAAA,KAAaqlE,IAC9C2H,EAAe,CAAE7vG,OAAAA,EAAQkoG,UAAAA,MACxB,CAAC2H,EAAgB7vG,IAwCpB,SAASozE,EAAcxmE,GACrB,IAA6B,IAAzBy4F,EAIJ,OAAQA,GACN,KAAK8J,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEtzE,IAAK77B,EACLA,OAAQA,EACR4M,SAAU41B,GAAU51B,EACpBkhG,WAAY4C,EACZzmE,QAASmmD,IAGf,KAAK+e,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEtzE,IAAK77B,EACLA,OAAQA,EACRmiG,aAAcA,EACdkF,qBAAsB0I,IAG5B,KAAKZ,EAAAA,GAAAA,OACH,OAAO,mBAAC,GAAD,CAAanvG,OAAQA,EAASC,SAAUA,EAAWgqC,QAASmmD,EAAOxjF,SAAU41B,GAAU51B,IAChG,KAAKuiG,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEtzE,IAAK77B,EACLA,OAAQA,EACR2vC,cAAeyyD,EACf+N,wBAAyBA,EACzBF,qBAAsBA,EACtBrjG,SAAU41B,GAAU51B,EACpBw5B,eAAgB4pE,EAChBW,mBAAoBH,EACpBvmE,QAASmmD,IAIf,KAAK+e,EAAAA,GAAAA,WACH,OAAO,mBAAC,GAAD,CAAYnvG,OAAQA,EAAS4M,SAAU41B,GAAU51B,IAC1D,KAAKuiG,EAAAA,GAAAA,cACH,OAAO,mBAAC,GAAD,CAAellE,QAASmmD,EAAOxjF,SAAU41B,GAAU51B,IAC5D,KAAKuiG,EAAAA,GAAAA,UACH,OAAO,mBAAC,GAAD,CAAWllE,QAASmmD,EAAOxjF,SAAU41B,GAAU51B,IACxD,KAAKuiG,EAAAA,GAAAA,YACH,OAAO,mBAAC,GAAD,CAAallE,QAASmmD,EAAOxjF,SAAU41B,GAAU51B,KAI9D,OA3FAwwB,EAAAA,EAAAA,KAAU,IAAOoF,GAASgF,EAAAA,GAAAA,GAAsB4oD,QAAS/vF,GAAY,CAACmiC,EAAQ4tD,KAE9EhzD,EAAAA,EAAAA,KAAU,KACR12B,YAAW,KACT28F,GAAyB7gE,KArJE,OAuJ5B,CAACA,KAEJpF,EAAAA,EAAAA,KAAU,KACJoyE,IACFQ,EAAoBR,GACpBr9D,OAA4B9xC,MAE7B,CAACmvG,EAAsBr9D,KAG1B/U,EAAAA,EAAAA,KAAU,KACJoF,GAAU8tE,GACZlgB,MAGD,CAACkgB,KAGJnzB,EAAAA,GAAAA,IAA4B,IAAkB,IAAhByO,GAAgB,EACxCA,IAAe5rF,IACjB+vG,EAAgBxM,EAAAA,GAAAA,SAChByM,EAAoB98D,EAAAA,GAAAA,YAErB,CAAClzC,KAEJynC,EAAAA,GAAAA,IAAeioE,IACbpM,IAAe6L,EAAAA,GAAAA,UACZ7L,IAAe6L,EAAAA,GAAAA,YACf7L,IAAe6L,EAAAA,GAAAA,gBACjB,IAAM/e,GAAM,IAAQuf,GAyDrB,0BACEzuG,GAAG,sBACHi9B,UAAYuxE,OAA+BrvG,EAAd,aAE5BiwG,GACC,0BAAKnyE,UAAU,mBAAmBuB,QAAS0wD,IAE7C,0BAAKlvF,GAAG,eACN,mBAAC,GAAD,CACElB,OAAQA,EACR4hG,aAAcp/D,EACd0+D,UAAWA,EACXW,SAAUA,EACVV,aAAcA,EACdW,aAAcA,EACdC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClBn4D,QAASmmD,EACTiS,oBAAqBhhE,GAAwB6E,EAC7CE,eAAgB4pE,IAElB,mBAAChwE,GAAA,EAAD,CACE/N,KAAOoP,GAAwB6E,EAA+B,OAAS,YACvE0C,YAAasmE,GAAqBE,GAClCnvE,UAAWkhE,EAAe+N,GAAqB9M,EAAmBiD,EAClE15D,eAAa,GAEZynC,SCxSX,IAAev1C,EAAAA,EAAAA,KANwB,IAAgB,IAAf,OAAE2E,GAAa,EACrD,MAAMouE,GAAc7nE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBxG,GAEnE,OAAOouE,EAAc,mBAACA,EAAD,WAAkBvwG,KCZ1B,SAASwwG,GAASjiG,EAAaowE,GAC5C,MAAMp+D,EAAOiW,SAASoiB,cAAc,KACpCr4B,EAAKikB,KAAOj2B,EACZgS,EAAKiwF,SAAW7xB,EAChB,IACEp+D,EAAKkwF,QACL,MAAOniG,GAEP0T,QAAQjT,MAAMT,ICYlB,MAAMoiG,GAAmB,IAAIhoF,IAgD7B,IAAe8U,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IAGQ,CACL0I,gBAHsB1I,EAAO0I,gBAAgBD,SAI7C9G,SAHe3B,EAAO2B,SAAS8G,YAHjB63B,EA9CoB,IAGlC,IAHmC,gBACvC53B,EADuC,SAEvC/G,GACI,EACJ,MAAM,2BAAEg7D,IAA+B/8C,EAAAA,EAAAA,OAEvCyd,EAAAA,EAAAA,KAAU,KACRj4B,OAAO69D,QAAQv6D,GAAiBE,SAAQ,IAA0B,IAAxB3I,EAAQ8C,GAAgB,EACzCA,EAAWM,KAAKlC,GAAOQ,EAAS8D,OAAOxF,IAAS4Q,KAAK1P,KAC7DyH,SAASrF,IACtB,MAAM0tG,GAAep6D,EAAAA,EAAAA,IAAoBtzC,EAAS,YAClD,GAAK0tG,GAKL,IAAKD,GAAiBn+F,IAAIo+F,GAAe,CACvC,MAAM/0D,EAAYzsB,EAAAA,GAA0BwhF,GAC5C,GAAI/0D,EAIF,OAHA80D,GAAiB39F,OAAO49F,GACxBH,GAAS50D,GAAWg1D,EAAAA,EAAAA,IAA0B3tG,SAC9Co5D,EAA2B,CAAEp5D,QAAAA,IAI/BksB,EAAAA,GAAkBwhF,EAAcvhF,EAAAA,GAAAA,SAAwB,GAAM8kB,MAAMpxC,IAClE4tG,GAAiB39F,OAAO49F,GACpB7tG,GACF0tG,GAAS1tG,GAAQ8tG,EAAAA,EAAAA,IAA0B3tG,IAE7Co5D,EAA2B,CAAEp5D,QAAAA,OAG/BytG,GAAiBxhE,IAAIyhE,SArBrBt0C,EAA2B,CAAEp5D,QAAAA,YAyBlC,CACDo5D,EACAh7D,EACA+G,QClDJ,IAAeo1B,EAAAA,EAAAA,KAPgB,IAAgB,IAAf,OAAE2E,GAAa,EAC7C,MAAM0uE,GAAgBnoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBxG,GAGvE,OAAO0uE,EAAgB,mBAACA,EAAD,WAAoB7wG,KCG7C,IAAew9B,EAAAA,EAAAA,KAPU,IAAgB,IAAf,OAAE2E,GAAa,EACvC,MAAM2uE,GAAUpoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAYxG,GAG3D,OAAO2uE,EAAU,mBAACA,EAAD,WAAc9wG,KCKjC,IAAew9B,EAAAA,EAAAA,KAR2BgL,IACxC,MAAM,OAAErG,GAAWqG,EACbuoE,GAAgBroE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBxG,GAGvE,OAAO4uE,EAAgB,mBAACA,EAAkBvoE,QAAYxoC,KCIxD,IAAew9B,EAAAA,EAAAA,KAR2BgL,IACxC,MAAM,IAAEj6B,GAAQi6B,EACVwoE,GAAgBtoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBp6B,GAGvE,OAAOyiG,EAAgB,mBAACA,EAAkBxoE,QAAYxoC,KCGxD,IAAew9B,EAAAA,EAAAA,KAR6BgL,IAC1C,MAAM,OAAErG,GAAWqG,EACbyoE,GAAkBvoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBxG,GAG3E,OAAO8uE,EAAkB,mBAACA,EAAoBzoE,QAAYxoC,KCC5D,IAAew9B,EAAAA,EAAAA,KARuBgL,IACpC,MAAM,YAAE/L,GAAgB+L,EAClB0oE,GAAYxoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAclM,GAG/D,OAAOy0E,EAAY,mBAACA,EAAc1oE,QAAYxoC,KCKhD,IAAew9B,EAAAA,EAAAA,KAP8BgL,IAC3C,MAAM,YAAE/L,GAAgB+L,EAClB2oE,GAAmBzoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBlM,GAE7E,OAAO00E,EAAmB,mBAACA,EAAD,WAAuBnxG,KCEnD,IAAew9B,EAAAA,EAAAA,KANgC,IAAgB,IAAf,OAAE2E,GAAa,EAC7D,MAAMivE,GAAsB1oE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,uBAAwBxG,GAEnF,OAAOivE,EAAsB,mBAACA,EAAD,CAAqBjvE,OAAQA,SAAaniC,KCIzE,IAAew9B,EAAAA,EAAAA,KAR6BgL,IAC1C,MAAM,OAAErG,GAAWqG,EACb6oE,GAAkB3oE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBxG,GAG3E,OAAOkvE,EAAkB,mBAACA,EAAoB7oE,QAAYxoC,KCsE5D,IAAIsxG,GAGAC,IAAiB,EAwQrB,SAASC,GAAWC,GAClBj7E,SAASmlD,iBAAkC,gDACxCrzE,SAASiY,IACJkxF,EACGlxF,EAAKikB,KAAK/8B,SAAS,oBACtB8Y,EAAKikB,KAAOjkB,EAAKikB,KAAK3X,QAAQ,UAAW,mBAG3CtM,EAAKikB,KAAOjkB,EAAKikB,KAAK3X,QAAQ,iBAAkB,cAOxD,SAAS6kF,GAAgBC,GACnBn7E,SAAS5Z,QAAU+0F,IACrBn7E,SAAS5Z,MAAQ+0F,GAIrB,UAAen0E,EAAAA,EAAAA,KAAKwC,EAAAA,EAAAA,KACjBtgC,IAAuB,QACtB,MAAQkiB,UAAYkP,OAAO,eAAED,EAAF,SAAkBxU,EAAlB,yBAA4Bu1F,KAAiClyG,GAChFC,OAAQ+jB,EAAazf,UAAW0f,GAAmBjkB,EAAOsG,YAC5Dy6C,EAAe/8B,GAAeC,GAChCjQ,EAAAA,EAAAA,IAAkBhU,EAAQgkB,EAAaC,QACvC3jB,EAEJ,MAAO,CACLi8B,gBAAiBv8B,EAAOu8B,gBACxB41E,UAAWnyG,EAAOmyG,UAClB/tF,aAAcpkB,EAAOokB,aACrBlX,kBAAmBlN,EAAOkN,kBAC1ByjC,oBAAoBpqC,EAAAA,EAAAA,IAAyBvG,GAC7CoyG,mBAAmBC,EAAAA,EAAAA,IAAwBryG,GAC3CsyG,oBAAoBC,EAAAA,EAAAA,IAAyBvyG,GAC7CwyG,iBAAkB1tG,QAAQ9E,EAAOiO,cAAczI,QAC/CitG,WAAY3tG,QAAQ9E,EAAO0O,QAAQlJ,QACnCu7C,aAAAA,EACAjyC,iBAAkB9O,EAAO8O,iBACzB4jG,sBAAuB5tG,QAAQ9E,EAAOgP,2BACtCm3B,4BAA6BnmC,EAAOmmC,4BACpC7oB,0BAA2Btd,EAAOsd,0BAClCq1F,oBAAoBz3E,EAAAA,EAAAA,IAAyBl7B,GAC7Cy8B,kBAAmBz8B,EAAOw8B,WAAWC,kBACrCtL,eAAAA,EACAxU,SAAAA,EACAu1F,yBAAAA,EACAU,0BAA2B9tG,QAAQ9E,EAAOw8B,WAAWq2E,uBACrDx4F,YAAara,EAAO6L,SAASkO,MAAMK,OACnC04F,iBAAgB,UAAE9yG,EAAOuM,kBAAT,aAAE,EAAmBD,OACrCymG,wBAAuB,UAAE/yG,EAAOuM,kBAAT,aAAE,EAAmBC,mBA/B9B8zB,EA3RS,IAwBvB,IAxBwB,gBAC5B/D,EAD4B,UAE5B41E,EAF4B,aAG5B/tF,EAH4B,kBAI5BlX,EAJ4B,mBAK5ByjC,EAL4B,kBAM5ByhE,EAN4B,mBAO5BE,EAP4B,iBAQ5BE,EAR4B,WAS5BC,EAT4B,aAU5B1xD,EAV4B,kBAW5BtkB,EAX4B,iBAY5B3tB,EAZ4B,sBAa5B4jG,EAb4B,4BAc5BvsE,EAd4B,0BAe5B7oB,EAf4B,mBAgB5Bq1F,EAhB4B,eAiB5BxhF,EAjB4B,SAkB5BxU,EAlB4B,yBAmB5Bu1F,EAnB4B,0BAoB5BU,EApB4B,YAqB5Bv4F,EArB4B,iBAsB5By4F,EAtB4B,wBAuB5BC,GACI,EACJ,MAAM,KACJC,EADI,mBAEJj3F,EAFI,yBAGJk3F,EAHI,2BAIJC,EAJI,eAKJC,EALI,kBAMJC,EANI,kBAOJC,EAPI,gBAQJC,EARI,uBASJC,EATI,gBAUJp5F,EAVI,kBAWJq5F,EAXI,qBAYJz4F,EAZI,iBAaJ04F,EAbI,wBAcJC,EAdI,yBAeJC,EAfI,cAgBJC,IACEh0F,EAAAA,EAAAA,MAEAyC,EAAAA,KAAUwvF,KACZA,IAAiB,EAEjBvvF,QAAQC,IAAI,qBAGd8a,EAAAA,EAAAA,KAAU,KACgB,yBAApBd,GAA4D,4BAAd41E,GAChDa,MAED,CAACz2E,EAAiB41E,EAAWa,KAGhC31E,EAAAA,EAAAA,KAAU,KACJjZ,IACF+uF,GAAe,GACfS,IACAL,IACAx3F,IACAk3F,IACAC,IACAE,IACAC,EAAkB,CAAE12F,SAAUosE,EAAAA,QAE/B,CACD3kE,EAAcrI,EAAoBs3F,EAAmBH,EAA4BD,EACjFG,EAAmBD,EAAgBI,EAAwBK,KAI7Dv2E,EAAAA,EAAAA,KAAU,KACJjZ,IACEzH,IAAaosE,EAAAA,IACfsqB,EAAkB,CAAE12F,SAAAA,IAGtB22F,EAAgB,CAAEtvE,SAAUrnB,OAE7B,CAACA,EAAUyH,EAAckvF,EAAiBD,KAG7Ch2E,EAAAA,EAAAA,KAAU,KACJjZ,IACG/J,EAIHm5F,KAHAr5F,IACAY,QAKH,CAACqJ,EAAc/J,EAAaF,EAAiBY,EAAsBy4F,KAGtEn2E,EAAAA,EAAAA,KAAU,KACJjZ,GAAgBuuF,GAClBgB,MAED,CAACvvF,EAAcuuF,EAAoBgB,KAGtCt2E,EAAAA,EAAAA,KAAU,KACJjZ,IAAiB8tF,GACnBuB,MAED,CAACrvF,EAAc8tF,EAA0BuB,KAG5Cp2E,EAAAA,EAAAA,KAAU,KACJjZ,GAAgByvF,GAAAA,GAAAA,WAAyB,eAC3CC,EAAAA,GAAAA,GAAgBC,mBAAmBF,GAAAA,GAAAA,OAAqB,YAAYruG,YAErE,CAAC4e,KAGJiZ,EAAAA,EAAAA,KAAU,KACR,GAAKZ,EAML,OAFAxN,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACwN,IAEJ,MACEyL,qBAAsB8rE,IACpB7rE,EAAAA,GAAAA,IAAmBj7B,OAAmB5M,GAAW,OAAMA,EAAW6lC,IAGpE+B,qBAAsB+rE,IACpB9rE,EAAAA,GAAAA,GAAkBwI,OAAoBrwC,GAAW,OAAMA,EAAW6lC,GAEhE/H,GAAYwE,EAAAA,GAAAA,GAChBoxE,EAAiC7mF,QAAQ,YAAa,oBACtD8mF,EAAgC9mF,QAAQ,YAAa,mBACrDgZ,GAA+B,+BAIjC8wC,EAAAA,GAAAA,IAAY,IAA6B,IAA3Bi9B,GAA2B,EACvC,QAA8B5zG,IAA1B4zG,GAA0D,IAAnB/iF,EACzC,OAGF,MAAMgjF,GAA4B71B,EAAAA,GAAAA,OAElC81B,EAAAA,GAAAA,GAAqBt9E,SAAS+W,eAAe,gBAAkBsmE,KAC9D,CAACjnG,KAGJ+pE,EAAAA,GAAAA,IAAY,IAA8B,IAA5Bo9B,GAA4B,EACxC,QAA+B/zG,IAA3B+zG,GAA2D,IAAnBljF,EAC1C,QAGFmqC,EAAAA,EAAAA,KAAQ,KACNxkC,SAASrJ,KAAKgW,UAAU+L,IAAI,6BAG9B,MAAM2kE,GAA4B71B,EAAAA,GAAAA,OAElC81B,EAAAA,GAAAA,GAAqBt9E,SAAS+W,eAAe,gBAAiB,KAC5DsmE,KAEA74C,EAAAA,EAAAA,KAAQ,KACNxkC,SAASrJ,KAAKgW,UAAUsL,OAAO,kCAGlC,CAAC4B,IAEJ,MAAMyjD,GAAatxD,EAAAA,EAAAA,KAAY,KAC7BqwE,GAAe,GAEf,MAAMmB,GAAgBp2E,EAAAA,EAAAA,MACtB,IAAInsB,EAAQ,EAEZo+C,cAAcyhD,IACdA,GAAuBlrG,OAAO6tG,aAAY,KACxC,GAAIz9E,SAAS5Z,MAAMnV,SAASysG,EAAAA,IAC1B1C,IAAW,OADb,CAKA,GAAI//F,EAAQ,GAAM,EAAG,CACnB,MAAM0iG,GAAYv2E,EAAAA,EAAAA,MAA6Bo2E,EAC3CG,EAAY,IACdzC,GAAiB,GAAEyC,iBAAyBA,EAAY,EAAI,IAAM,MAClE3C,IAAW,SAGbE,GAAgB0C,EAAAA,IAChB5C,IAAW,GAGb//F,OA/MwB,OAiNzB,CAACohG,IAEEnjC,GAAcltC,EAAAA,EAAAA,KAAY,KAC9BqwE,GAAe,GAEfhjD,cAAcyhD,IACdA,QAAuBtxG,EAElBw2B,SAAS5Z,MAAMnV,SAASysG,EAAAA,KAC3BxC,GAAgB0C,EAAAA,IAGlB5C,IAAW,KACV,CAACqB,IAEEwB,GAA6B7xE,EAAAA,EAAAA,KAAY,KAC7C4wE,EAAwB,CAAEt4F,yBAAqB9a,MAC9C,CAACozG,IAQJ,OALAn4C,EAAAA,GAAAA,GAAkB64B,EAAYpkB,GAC9B7yC,GAAgBi3D,G7I/SH,WAAwD,IAApB11D,EAAoB,yDACrErB,EAAAA,EAAAA,KAAU,KACR,GAAK/zB,EAAAA,GAAL,CAIA,IAAIo1B,EAgBJ,OATAnB,MAAAA,IAAAA,GAAcm0B,aAAa,UAAWj0B,IAKlCvqB,EAAAA,KAAWqgC,EAAAA,IACbzc,SAASmI,iBAAiB,eAAgBrB,IAGrC,KACLL,MAAAA,IAAAA,GAAcm0B,aAAa,UAAW,yDAClCx+C,EAAAA,KAAWqgC,EAAAA,IACbzc,SAASoI,oBAAoB,eAAgBtB,KAhB/CL,MAAAA,IAAAA,GAAcm0B,aAAa,UAAW/zB,OAmBvC,CAACe,I6IqRJk2E,CAA2BxC,GAGzB,0BAAKjxG,GAAG,OAAOi9B,UAAWA,EAAWy2E,OAAQlkD,GAAAA,EAAWmkD,WAAYnkD,GAAAA,GAClE,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAaluB,OAAQ2vE,IACrB,mBAAC,GAAD,CAAe3vE,OAAQ6vE,IACvB,mBAAC,GAAD,CAAe7vE,OAAQ+vE,IACvB,mBAAC,GAAD,CAAS/vE,OAAQgwE,IAChB1xD,GAAgB,mBAAC,GAAD,CAAajlB,IAAKilB,EAAa5/C,GAAIoC,QAASw9C,EAAcnF,MAAI,IAC/E,mBAAC,GAAD,CAAe/sC,IAAKC,IACpB,mBAAC,GAAD,CAAiB2zB,OAAQiwE,IACzB,mBAAC,KAAD,CACEjwE,OAAQ39B,QAAQwY,GAChB4sB,QAASyqE,EACTv5F,oBAAqBkC,IAEtBmf,GACC,sCACE,mBAAC,GAAD,CAAWM,YAAaN,IACxB,mBAAC,GAAD,CAAkBM,YAAaN,KAGnC,mBAAC,GAAD,CACEgG,OAAQ39B,QAAQguG,GAAoBC,GACpCzmG,OAAQwmG,EACRtmG,gBAAiBumG,IAEnB,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAqBtwE,OAAQmwE,IAC7B,mBAAC,GAAD,CAAa70E,eAAa,SCjV5B1b,EAAAA,IAEFC,QAAQC,IAAI,gCAGT3b,EAAAA,EAAAA,MAAY21B,kBACf3c,EAAAA,EAAAA,MAAam1F,W","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { GlobalActions } from '../../types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    return updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? 'Thank you! Your report will be reviewed by our team.'\n      : 'Error occured while submiting report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  return updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  });\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    return updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    });\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  return global;\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  return global;\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id].stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return undefined;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    return {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return undefined;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  return global;\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return undefined;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return undefined;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  return global;\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return undefined;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  return updateManagement(getGlobal(), chatId, update);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  return updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  });\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  return updateManagement(global, chatId, {\n    invites: [...invites, result],\n  });\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  return updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  });\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return undefined;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  return updateManagement(global, chatId, {\n    revokedInvites: [],\n  });\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return undefined;\n  }\n\n  return updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers: result,\n    },\n  });\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return undefined;\n  }\n\n  return updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: result,\n    },\n  });\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  return updateChat(global, chatId, { joinRequests: result });\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return undefined;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return undefined;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return undefined;\n\n  return updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return undefined;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return undefined;\n\n  return updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return undefined;\n\n  return updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  });\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport {\n  ApiChat, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, closeNewContactDialog, replaceUserStatuses, updateChat, updateManagementProgress, updateUser,\n  updateUsers, updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n\n  return global;\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return undefined;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return undefined;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  return global;\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  global = getGlobal();\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  return global;\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n\n  if (result) {\n    actions.openChat({ id: result });\n\n    return closeNewContactDialog(getGlobal());\n  }\n\n  actions.showNotification({\n    message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n  });\n\n  return undefined;\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return undefined;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  return global;\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getActions();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  return global;\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addActionHandler, getGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return undefined;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n    }\n  });\n\n  return {\n    ...getGlobal(),\n    availableReactions: result,\n  };\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return global;\n\n  if (global.activeReactions[messageId]?.reaction === reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: {\n      ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n      ...(reaction && {\n        [messageId]: {\n          reaction,\n          messageId,\n        },\n      }),\n    },\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  };\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  });\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n","import { addActionHandler, getGlobal } from '../../index';\n\nimport { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return undefined;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, result);\n\n  return global;\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return undefined;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return updateStatisticsGraph(getGlobal(), chatId, name, result);\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { getMessageRecentReaction } from '../../helpers';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateMessage': {\n      const { message } = update;\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      if (getMessageRecentReaction(message)) {\n        notifyAboutMessage({\n          chat,\n          message,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport {\n  ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfReactionAdded,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      // Only notify about added reactions, not removed ones\n      const shouldNotify = checkIfReactionAdded(currentReactions, reactions, global.currentUserId);\n\n      global = updateChatMessage(global, chatId, id, { reactions: update.reactions });\n\n      if (shouldNotify) {\n        const newMessage = selectChatMessage(global, chatId, id);\n        if (!chat || !newMessage) return;\n        notifyAboutMessage({\n          chat,\n          message: newMessage,\n          isReaction: true,\n        });\n      }\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, DEBUG, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  }, []);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openTipsChat({ langCode: lang.code });\n  }, [lang.code, openTipsChat]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${DEBUG ? APP_REVISION : APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = message?.forwardInfo?.hiddenUserName || (sender && getSenderTitle(lang, sender));\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular', animation = 'wave', width, height, className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !isInSelectMode && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location,\n  } = getMessageContent(message);\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_MAC_OS } from '../util/environment';\nimport getKeyFromEvent from '../util/getKeyFromEvent';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        const messageIds = getMessageIdsForSelectedText();\n\n        if (messageIds && messageIds.length > 0) {\n          e.preventDefault();\n          copyMessagesByIds({ messageIds });\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleCopy, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copyMessagesByIds]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else if (currentHtml !== undefined) {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isButtonVisible, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n              {lang('AttachmentMenu.PhotoOrVideo')}\n            </MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if ((isForwarding || replyingToId) && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput, true);\n      });\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat,\n    undefined,\n    undefined,\n    undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang('Statistics')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getActions();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\nimport NewContactModal from './NewContactModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n  newContactUserId,\n  newContactByPhoneNumber,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n    };\n  },\n)(Main));\n","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","versionNotification","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getActions","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","scheduleDate","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","isGroup","recentTopMessages","msgId","updateStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","Array","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutMessage","getMessageRecentReaction","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","shouldNotify","checkIfReactionAdded","isReaction","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","disableHistoryBack","handleOpenTipsChat","langCode","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_REVISION","MenuItem","icon","Switcher","label","checked","noAnimation","href","FEEDBACK_URL","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","open","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","isButtonVisible","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","NewContactModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","authState","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","newContactUserId","newContactByPhoneNumber","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}