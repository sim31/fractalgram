{"version":3,"file":"8422.758859bfee88e021c1ae.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts"],"sourcesContent":["import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions, GlobalState } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers, updateUser,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  username: '',\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat ? getOrderDate(oldestChat) : undefined, shouldReplace, true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  if (uri.hostname === 't.me' && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostParts = uri.hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach && !startParam) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithDraft', (global) => {\n  return {\n    ...global,\n    requestedDraft: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload) => {\n  const { username, filter, startParam } = payload;\n  const bot = await getAttachBotOrNotify(global, username);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    setGlobal({\n      ...global,\n      requestedAttachBotInstall: {\n        botId: bot.id,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            botId: bot.id,\n            filter,\n            startParam,\n          },\n        },\n      },\n    });\n    return;\n  }\n\n  getActions().requestAttachBotInChat({\n    botId: bot.id,\n    filter,\n    startParam,\n  });\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify(global: GlobalState, username: string) {\n  const chat = await fetchChatByUsername(username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot || !user.isAttachBot) {\n    getActions().showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n    return undefined;\n  }\n  return user;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  const global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, username);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      botId: bot.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.username === username;\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(true);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(isVideo);\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions(isVideo?: boolean) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          getActions().showNotification({\n            message: langProvider.getTranslation('Call.Camera.Error'),\n          });\n        } else {\n          checkMicrophonePermission();\n        }\n      })\n      .catch(() => {\n        getActions().showNotification({\n          message: langProvider.getTranslation('Call.Camera.Error'),\n        });\n      });\n  } else {\n    checkMicrophonePermission();\n  }\n}\n\nfunction checkMicrophonePermission() {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        getActions().showNotification({\n          message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n        });\n      }\n    })\n    .catch(() => {\n      getActions().showNotification({\n        message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","username","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","currentChat","selectCurrentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","Object","keys","draftsById","forEach","selectDraft","MAIN_THREAD_ID","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","chat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","getActions","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","isAttachBot","showNotification","langProvider","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","callAttachBot","botId","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","title","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","userId","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","channelPostId","bot","isCurrentChat","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","attachMenu","bots","requestAttachBotInChat","requestedAttachBotInstall","onConfirm","action","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser"],"sourceRoot":""}