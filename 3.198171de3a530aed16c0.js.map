{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Errors.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/main/HistoryCalendar.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessagesModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/ui/FloatingActionButton.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/common/Picker.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","mediaSize","isVideo","photo","video","webPage","getMessageContent","Boolean","getVideoDimensions","getPhotoFullDimensions","AVATAR_FULL_DIMENSIONS","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_MOBILE_SCREEN","DropdownMenu","trigger","positionX","MenuItem","icon","href","download","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHideable","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","buildClassName","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","preventDefault","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","webPagePhoto","getMessageWebPagePhoto","getMessagePhoto","getMessageVideo","isWebPagePhoto","isPhoto","isFromSharedMedia","isFromSearch","slideAnimation","headerAnimation","isGhostAnimation","getMessageMediaFilename","prevSenderId","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","getMediaHash","full","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","photoDimensions","videoDimensions","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","ShowTransition","isRtl","Transition","activeKey","name","aria-label","serverTimeOffset","chats","byId","chatsById","listIds","currentUserId","activeListIds","active","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","errors","dismissError","title","getReadableErrorText","isText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChannel","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","unique","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","classNames","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","getMessageDocument","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","renderingFor","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","formatPhoneNumberWithCode","phoneNumber","FloatingActionButton","buttonClassName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","label","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showError","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","orderedPinnedIds","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","options","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","RadioGroup","selected","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","theme","slug","thumbRef","useCanvasBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","selectTheme","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","data","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","hasPassword","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","hash","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","itemIds","filterPlaceholder","notFoundText","searchInputId","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","Main","renderCurrentSectionContent","contactIds","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","NewChannelStep1","NewGroupStep1","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","canImageBeCopied","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","isMuted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","onInsertUserName","filteredChatMembers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","first","position","fastSmoothScroll","setItemVisible","prevChatMembers","renderedChatMembers","attachments","caption","canSuggestMembers","groupChatMembers","recentEmojis","emojiKeywords","onCaptionUpdate","addRecentEmoji","loadEmojiKeywords","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","isFrom","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","emojisCount","handleSelectEmoji","onLeft","onRight","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","currentIsMuted","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","isCreator","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalErrors","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","getShippingError","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.198171de3a530aed16c0.js","sourcesContent":["import { ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport { getMessageContent, getPhotoFullDimensions, getVideoDimensions } from '../../../modules/helpers';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean, origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n\n  let isVideo = false;\n  let mediaSize;\n  if (message) {\n    const { photo, video, webPage } = getMessageContent(message);\n    isVideo = Boolean(video);\n    mediaSize = video ? getVideoDimensions(video)! : getPhotoFullDimensions((photo || webPage!.photo)!)!;\n  } else {\n    mediaSize = AVATAR_FULL_DIMENSIONS;\n  }\n\n  // eslint-disable-next-line max-len\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, mediaSize.width, mediaSize.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(message && isVideo ? getMessageMediaHash(message, 'download') : undefined);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_MOBILE_SCREEN) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHideable: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({ text = '', isHideable, onClick }) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <div className={`MediaViewerFooter ${isHideable ? 'hideable' : ''}`} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={onClick}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_MOBILE_SCREEN) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IDimensions } from '../../modules/helpers';\n\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: IDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_MOBILE_SCREEN ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={togglePlayState}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageMediaFilename,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  IDimensions,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const animationKey = useRef<number>(null);\n  const isOpen = Boolean(avatarOwner || messageId);\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const isWebPagePhoto = Boolean(webPagePhoto);\n  const isPhoto = Boolean(photo || webPagePhoto);\n  const isVideo = Boolean(video);\n  const isGif = video ? video.isGif : undefined;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n  const fileName = avatarOwner\n    ? `avatar${avatarOwner.id}-${profilePhotoIndex}.jpg`\n    : message && getMessageMediaFilename(message);\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  const messageIds = useMemo(() => {\n    return isWebPagePhoto && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isWebPagePhoto, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n\n  function getMediaHash(full?: boolean) {\n    if (avatarOwner && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner, full ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, full ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    avatarOwner && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const photoDimensions = isPhoto ? getPhotoFullDimensions((\n    isWebPagePhoto ? getMessageWebPagePhoto(message!) : getMessagePhoto(message!)\n  )!) : undefined;\n  const videoDimensions = isVideo ? getVideoDimensions(getMessageVideo(message!)!) : undefined;\n\n  useEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin,\n    message, prevMessage, prevAvatarOwner, bestImageData, prevBestImageData,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isGif, isZoomed, selectNextMedia, selectPreviousMedia, canPanZoomWrap]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const lang = useLang();\n\n  function renderSlide(isActive: boolean) {\n    if (avatarOwner) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div key={messageId} className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}>\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(photoDimensions!, hasFooter),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(videoDimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={video!.size}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHideable={isVideo}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return (\n      <SenderInfo\n        key={avatarOwner ? avatarOwner.id : messageId}\n        chatId={avatarOwner ? avatarOwner.id : chatId}\n        messageId={messageId}\n        isAvatar={Boolean(avatarOwner)}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_MOBILE_SCREEN && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={Boolean(avatarOwner)}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: IDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  serverTimeOffset,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_MOBILE_SCREEN) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, currentUserId ? [currentUserId] : undefined, serverTimeOffset);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds) {\n      setForwardChatId({ id: viewportIds[index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      serverTimeOffset,\n      chats: {\n        byId: chatsById,\n        listIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Errors.scss';\n\ntype StateProps = {\n  errors: ApiError[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissError'>;\n\nconst Errors: FC<StateProps & DispatchProps> = ({ errors, dismissError }) => {\n  const lang = useLang();\n\n  if (!errors.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Errors\">\n      {errors.map((error) => (\n        <Modal\n          isOpen\n          onClose={dismissError}\n          className=\"error\"\n          title={getErrorHeader(error)}\n        >\n          <p>{getReadableErrorText(error)}</p>\n          <Button isText onClick={dismissError}>{lang('OK')}</Button>\n        </Modal>\n      ))}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['errors']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissError']),\n)(Errors));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(lang, selectedDate, IS_MOBILE_SCREEN)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatHumanDate(lang, date, true);\n\n  if (day === 'Today') {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', day).replace('%@', formatTime(date));\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && lang('Conversation.DeleteMessagesFor', renderText(contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? lang('Conversation.PinMessagesFor', contactName)\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessagesModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? lang('ChatList.DeleteForEveryone', renderText(contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessagesModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessagesModal from './DeleteSelectedMessagesModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessagesModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId } from '../../../modules/helpers';\nimport { selectChat, selectUser, selectIsChatPinned } from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_MOBILE_SCREEN}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n  serverTimeOffset?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  serverTimeOffset,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_MOBILE_SCREEN) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, undefined, serverTimeOffset),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById,\n    serverTimeOffset, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true, undefined, serverTimeOffset);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery, serverTimeOffset]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\n\nexport type StateProps = {\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            message={message}\n            renderingFor=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('EnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  Delete Folder\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  currentUser,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{getUserFullName(currentUser)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: any;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<StateProps & DispatchProps> = ({\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showError'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showError,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showError, onCreateFolder]);\n\n  const lang = useLang();\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showError]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showError']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useState, useEffect, useMemo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick, findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onReset,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FoldersState, FolderEditDispatch } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  state,\n  dispatch,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = ISettings['byKey'] & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter(Boolean);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('VideosTitle')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey,\n        [\n          'messageTextSize',\n          'animationLevel',\n          'messageSendKeyCombo',\n          'shouldAutoDownloadMediaFromContacts',\n          'shouldAutoDownloadMediaInPrivateChats',\n          'shouldAutoDownloadMediaInGroups',\n          'shouldAutoDownloadMediaInChannels',\n          'shouldAutoPlayGifs',\n          'shouldAutoPlayVideos',\n          'shouldSuggestStickers',\n          'shouldLoopStickers',\n        ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<StateProps & DispatchProps> = ({\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(hasPrivateChatsNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(hasBroadcastNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasBroadcastMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings'>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings]);\n\n  const lang = useLang();\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<StateProps & DispatchProps> = ({\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  onScreenSelect,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<StateProps & DispatchProps> = ({\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<StateProps & DispatchProps> = ({\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({ animatedEmoji, onStart }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({ animatedEmoji, onScreenSelect }) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  onScreenSelect,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport GroupChatInfo from './GroupChatInfo';\nimport PickerSelectedItem from './PickerSelectedItem';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\n\nimport './Picker.scss';\n\ntype OwnProps = {\n  itemIds: number[];\n  selectedIds: number[];\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  isLoading?: boolean;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore?: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst Picker: FC<OwnProps> = ({\n  itemIds,\n  selectedIds,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  isLoading,\n  onSelectedIdsChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n    onFilterChange('');\n  }, [selectedIds, onSelectedIdsChange, onFilterChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, itemIds, Boolean(filterValue));\n\n  const lang = useLang();\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"picker-header custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          id={searchInputId}\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={filterPlaceholder || lang('SelectChat')}\n        />\n      </div>\n\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={() => handleItemClick(id)}\n              ripple\n            >\n              <Checkbox label=\"\" checked={selectedIds.includes(id)} />\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(Picker);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  currentScreen,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent() {\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility screen={currentScreen} onScreenSelect={onScreenSelect} />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection() {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent()}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_MOBILE_SCREEN}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n  serverTimeOffset?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  serverTimeOffset,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById,\n        undefined, undefined, serverTimeOffset)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      chatsById,\n      false,\n      selectedMemberIds,\n      serverTimeOffset,\n    );\n  }, [\n    localContactIds, chatsById, serverTimeOffset, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, serverTimeOffset } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {() => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key]) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { getMessageMediaHash, getMessagePhoto, getMessageText } from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message);\n  const mediaHash = getMessageMediaHash(message, 'inline')!;\n  const canImageBeCopied = photo && mediaHash && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl).then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection, canImageBeCopied),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean, canImageBeCopied: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n\n  if (canImageBeCopied) {\n    return 'lng_context_copy_text';\n  }\n\n  return 'Copy';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? stickerSet.title : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_MOBILE_SCREEN && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_MOBILE_SCREEN && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: chat.isMuted,\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.chat-item-clickable',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredChatMembers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredChatMembers) {\n      return -1;\n    }\n    const membersCount = filteredChatMembers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredChatMembers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredChatMembers && filteredChatMembers.length && selectedMentionIndex > -1) {\n      const member = filteredChatMembers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.userId, true);\n      }\n    }\n  }, [filteredChatMembers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredChatMembers && !filteredChatMembers.length) {\n      onClose();\n    }\n  }, [filteredChatMembers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setItemVisible(selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredChatMembers && filteredChatMembers.length\n      ? filteredChatMembers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredChatMembers && !filteredChatMembers.length\n    ? prevChatMembers\n    : filteredChatMembers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ userId }, index) => (\n        <ListItem\n          key={userId}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(userId)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={userId}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestMembers?: boolean;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  language: LangCode;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  canSuggestMembers,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  language,\n  emojiKeywords,\n  onCaptionUpdate,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = renderingAttachments && renderingAttachments.every((a) => a.quick);\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    emojiKeywords,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, false);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredChatMembers={mentionFilteredMembers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            language={language}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">Options</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">Solution</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_MOBILE_SCREEN);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div ref={containerRef} className=\"EmojiPicker-main no-selection no-scrollbar\">\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_MOBILE_SCREEN ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div ref={containerRef} className=\"StickerPicker-main no-scrollbar\">\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const className = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div ref={containerRef} className={buildClassName('GifPicker no-scrollbar', className)}>\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_MOBILE_SCREEN);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={onStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_MOBILE_SCREEN && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_MOBILE_SCREEN) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(SymbolMenu);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      CONTENT_TYPES_FOR_QUICK_UPLOAD,\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LangCode } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\nconst NO_EMOJI_SELECTED_INDEX = -1;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  language: LangCode;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  loadEmojiKeywords: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  language,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(NO_EMOJI_SELECTED_INDEX);\n\n  useEffect(() => {\n    loadEmojiKeywords({ language });\n  }, [loadEmojiKeywords, language]);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return NO_EMOJI_SELECTED_INDEX;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > NO_EMOJI_SELECTED_INDEX) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={onEmojiSelect}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    if (foundResults && foundResults[index]) {\n      foundResults[index].onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<StateProps> = ({\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n  const currentIsMuted = chat ? chat.isMuted : undefined;\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!currentIsMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!currentIsMuted);\n  }, [currentIsMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n\n    return {\n      user, chat, progress,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'deleteHistory' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteHistory,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteHistory({ chatId: chat.id, shouldDeleteForAll: false });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, deleteHistory, leaveChannel, deleteChannel, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            ripple\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup: isChatBasicGroup(chat),\n      hasLinkedChannel,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'deleteHistory', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n}) => {\n  const lang = useLang();\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatBannedRights) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const lang = useLang();\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat }) => {\n  const lang = useLang();\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return <ManageUser key={chatId} userId={chatId} />;\n        case 'group':\n          return <ManageGroup key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n        case 'channel':\n          return <ManageChannel key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType chatId={chatId} />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers chatId={chatId} />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers chatId={chatId} />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingError } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalErrors?: ApiError[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalErrors,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalErrors) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalErrors]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalErrors && globalErrors.length) {\n      const errors = getShippingError(globalErrors);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalErrors, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram T doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalErrors: global.errors,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_MOBILE_SCREEN ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}