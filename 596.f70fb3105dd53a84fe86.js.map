{"version":3,"file":"596.f70fb3105dd53a84fe86.js","mappings":"gOAoDO,SAASA,EAAqBC,GACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,OAAKC,GAAWC,GAIhBF,GAASI,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,GACzDF,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,OAAUI,IAJxDN,GA3CXO,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,GAAKC,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,OAGzDK,EAAAA,EAAAA,IAAiB,uBAAwBR,IAEzCQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAM,MAAEQ,GAAUD,EACZE,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,GAAiBb,EAAOc,gBAAgBC,gBAAgBJ,IAAkB,GAQzF,OANID,IAAUG,IACZb,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,EAAUc,EAAAA,KAG1DZ,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,EAAMQ,OAKjEH,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAM,UAAEgB,GAAcR,EACtB,OAAOS,EAAAA,EAAAA,IAA2BlB,EAAQC,EAAQgB,OCvCpDV,EAAAA,EAAAA,IAAiB,YAAY,CAACP,EAAQQ,EAASC,KAC7C,MAAM,GACJU,EADI,SAEJjB,EAAWkB,EAAAA,GAFP,KAGJC,EAAO,SAHH,qBAIJC,GAAuB,GACrBb,EAEEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GA4BpD,OA1BKuB,GAEDA,EAAmBtB,SAAWkB,GAC3BI,EAAmBrB,WAAaA,GAChCqB,EAAmBF,OAASA,IAE7BF,IACFnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQmB,EAAIjB,EAAU,aAAc,KAIlEF,EAASD,EADTC,GAASyB,EAAAA,EAAAA,IAAsBzB,IAG/BA,EAAS,IACJA,EACH0B,mBAAmB,EACnBC,SAAU,IACL3B,EAAO2B,SACVC,0BAAsBtB,MAEpBa,IAAOnB,EAAO6B,gBAAgBC,UAAY,CAC5CD,gBAAiB,OAKhBE,EAAAA,EAAAA,IAAyB/B,EAAQmB,EAAIjB,EAAUmB,EAAMC,OAG9Df,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B+B,EAAAA,EAAAA,IAAyB/B,OAAQM,MAG1CC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,MACrDuB,EAAAA,EAAAA,IAAU,IACLhC,EACHiC,iBAAiB,IAGnBzB,EAAQ0B,SAASzB,OAGnBF,EAAAA,EAAAA,IAAiB,qBAAsBP,IAC9B,IACFA,EACHmC,kBAAc7B,OAIlBC,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAC1D,IACFT,EACHoC,uBAAwB3B,OAI5BF,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,iBAAE4B,EAAF,WAAoBC,GAAe7B,GAEnC,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,IAAKC,EAEH,YADAO,EAAQ0B,SAAS,CAAEf,GAAImB,EAAW,KAIpC,MAAMC,EAAWD,EAAWE,QAAQvC,GAEpC,IAAkB,IAAdsC,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErC7B,EAAQ0B,SAAS,CAAEf,GAAIsB,EAAQnB,sBAAsB,O,wEC/CvD,MACMoB,EAA8BC,EAAAA,GAA2BC,EAAAA,GAI/D,IAAIC,EAopBJ,SAASC,EAAoB9C,EAAqBC,EAAgB8C,GAChE,MAAM,SAAE7C,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACnDgD,EAAOC,EAAAA,GAEPC,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,IAAKiD,IAAiBhD,EAAU,OAChC,MAKMkD,EALWL,EACdM,KAAKlC,GAAO+B,EAAa/B,KACzBmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAUuD,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASxC,GAAKyC,EAASzC,KAE/B0C,QAAO,CAACC,EAAKP,KACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAIpC,OAHAO,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,GAAU,OACtDD,EAAIG,KAAM,IAAEE,EAAAA,EAAAA,IAAsBnB,EAAMO,GAAS,EAAO,OAAGjD,GAAW,QAE/DwD,IACN,KAEHM,EAAAA,EAAAA,IAAoBhB,EAAOiB,KAAK,QArqBlC9D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,SAAUC,EAAV,aAAoBoE,GAAiB7D,EAE3C,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBoE,OAGtE/D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,OAAOC,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBqE,OAGtEhE,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAC7BiD,EAAqB,cAATnD,EAAuB,qBAAuB,YAEhE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWD,OAGjEhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,KACJgE,EADI,OACExE,EADF,SACUC,EADV,KACoBmB,GACtBZ,EAEE+D,EAAqB,cAATnD,EAAuB,wBAA0B,eAEnE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWC,OAGjElE,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcvD,GAC/C2D,QAAQ5B,EAAa/B,KAAOqC,EAAAA,EAAAA,IAA4BxD,EAAQkD,EAAa/B,GAAKjB,GAAU6E,WAGrG,OAAKH,GAIEpD,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAa0E,QAJjE,MAOFrE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,iBAAE4B,GAAqB5B,GACvB,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAGxD,IAAIqE,EAEJ,IAJiBW,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,IAItC8E,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAKnC,GAE9BoC,EADiBH,EAAgB3C,QAAQwC,EAAaO,YAC1BlD,EAClCkC,EAAYe,GAAYH,EAAgBK,OAAS,GAAKF,GAAY,EAC9DG,OAAON,EAAgBG,SACvBhF,OAfJ,GAAIJ,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCsE,EAAYmB,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC1B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpDqE,EAAYsB,MAAAA,OAAH,EAAGA,EAAYE,cAU5BvF,EAAQwF,gBAAgB,CAAEzB,UAAAA,IAC1B/D,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,QAItBhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,OACyB2B,EADzB,OACiCC,EADjC,aACyCC,EADzC,QACuDC,GACzD5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,CACXrG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACA2B,OAAQA,MAAAA,EAAAA,EAAUlG,EAAOsG,YAAYJ,OACrCC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAOsG,YAAYH,OACrCC,aAAcA,GAAgBpG,EAAOsG,YAAYF,aACjDC,QAASA,GAAWrG,EAAOsG,YAAYD,cAK7C9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVH,OAAAA,EACAE,SAAS,QAKf9F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVF,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVD,QAAAA,QAKN9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJyF,GACEzF,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVJ,OAAAA,QAKN3F,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHsG,YAAa,CACXH,OAAQnG,EAAOsG,YAAYH,OAC3BC,aAAcpG,EAAOsG,YAAYF,aACjCC,QAASrG,EAAOsG,YAAYD,cAKlC9F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAI9B,IAF4B8F,EAAAA,EAAAA,IAAyBvG,IAe9C,GAAIC,IAAWD,EAAOwG,YAAYvG,QAAUsE,IAAcvE,EAAOwG,YAAYjC,UAClF,MAAO,IACFvE,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,UAlBZC,OAAOC,YAAW,KAChB3G,GAAS4G,EAAAA,EAAAA,OAET5E,EAAAA,EAAAA,IAAU,IACLhC,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,QAnNgB,SAqOlClG,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHwG,YAAa,QAIjBjG,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,KAC5C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,IAAIwE,EACJ,GAAI7F,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC8F,EAAgBL,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC9B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpD6F,EAAgBF,MAAAA,OAAH,EAAGA,EAAYE,cAGzBA,GAILvF,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAWwB,EAAec,aAAa,QAI7DtG,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,KAC1C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAEvBuF,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,GAEpD,GAAK4G,GAAoC,IAAtBA,EAAWtB,OAEvB,CACL,MAAMjB,EAAYuC,EAAWE,MAE7BhH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,KAExE9E,EAAAA,EAAAA,IAAUhC,GAEVQ,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,SAXF/D,EAAQyG,uBAkBZ1G,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OACJR,EADI,SACIC,EAAWkB,EAAAA,GADf,gBAC+B8F,EAAkB,SADjD,YAC2DL,EAD3D,UACwEM,EADxE,cACmFC,EADnF,eAEJC,EAFI,oBAEYC,GACd7G,EAEJ,IAAI,UAAE8D,GAAc9D,EAEpB,QAAkBH,IAAd6G,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmCxH,EAAQoH,EAAeD,GAClEI,MAAAA,GAAAA,EAAK/B,UACLjB,GAAagD,GAInB,MAAMhG,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAC9CyH,GAAoBlG,GACxBtB,IAAWsB,EAAmBtB,QAC3BC,IAAaqB,EAAmBrB,UAChCgH,IAAoB3F,EAAmBF,KAiB5C,GAdIwB,IACF6E,aAAa7E,GACbA,OAAcvC,GAEhBuC,EAAc6D,OAAOC,YAAW,KAC9B,IAAIgB,GAAYf,EAAAA,EAAAA,MAChBe,GAAYC,EAAAA,EAAAA,IAAqBD,GACjCA,GAAYE,EAAAA,EAAAA,IAAqBF,IACjC3F,EAAAA,EAAAA,IAAU2F,KACTd,EAAcnE,EAtUI,MAwUrB1C,GAAS4H,EAAAA,EAAAA,IAAqB5H,EAAQC,EAAQsE,EAAWsC,EAAaS,GACtEtH,GAAS6H,EAAAA,EAAAA,IAAqB7H,OAAQM,GAElC+G,EAAgB,CAClB,MAAMP,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,IAAa,GACjEF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,EAAYO,IAGlFI,IACFzH,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQ8H,EAAAA,GAAAA,SAGxC,MAAMpD,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,GAAIwE,GAAeA,EAAYqD,SAASxD,GAGtC,OAFAvC,EAAAA,EAAAA,IAAUhC,QACVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAUjC,GANIuH,IACFzH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,IAGvEN,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GAEjEoE,IAAgB+C,EAAkB,CACpC,MAAMO,EAAYzD,EAAYG,EAAY,GAAKoD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrE9H,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQgI,IAGxChG,EAAAA,EAAAA,IAAUhC,GAEVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAC/BM,EAAQyH,2BAIV1H,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,WACJyH,EADI,WACQnF,EADR,UACoBoE,EADpB,YAC+BgB,GACjC1H,EACJ,IAAI2H,EAIJ,OAHIjB,IACFiB,GAAoBC,EAAAA,EAAAA,IAA0BrI,EAAQkI,EAAYf,IAE7D,IACFnH,EACH6B,gBAAiB,CACfqG,WAAAA,EACAnF,WAAYqF,GAAqBrF,EACjCuF,cAAc,EACdH,YAAAA,QAKN5H,EAAAA,EAAAA,IAAiB,mBAAoBP,KACnCgC,EAAAA,EAAAA,IAAU,IACLhC,EACH6B,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,GAAEU,GAAOV,GAEfuB,EAAAA,EAAAA,IAAU,IACLhC,EACH6B,gBAAiB,IACZ7B,EAAO6B,gBACVC,SAAUX,EACVmH,cAAc,KAIlB9H,EAAQ0B,SAAS,CAAEf,GAAAA,IACnBX,EAAQ+H,mBACR/H,EAAQiB,4BAGVlB,EAAAA,EAAAA,IAAiB,sCAAsC,CAACP,EAAQQ,KAC9D,IAAKR,EAAOwI,iBACV,OAGF,MAAQvI,OAAQiI,EAAV,WAAsBnF,GAAe/C,EAAOwI,iBAElDhI,EAAQiI,gBAAgB,CAAEP,WAAAA,EAAYnF,WAAAA,QAGxCxC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,QAAE8C,GAAY9C,EAEdiI,EAAW1I,EAAO2I,gBAAgBD,SAASnF,EAAQtD,QACpDyI,GAAaA,EAASlD,SAE3BxD,EAAAA,EAAAA,IAAU,IACLhC,EACH2I,gBAAiB,CACfD,SAAU,IACL1I,EAAO2I,gBAAgBD,SAC1B,CAACnF,EAAQtD,QAASyI,EAASpF,QAAQnC,GAAOA,IAAOoC,EAAQpC,aAMjEZ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACP,EAAQQ,EAASC,KAChE,MAAM,SAAEkB,GAAalB,EAEfiI,EAAW1I,EAAO2I,gBAAgBD,SAClCE,EAA0D,GAIhE,OAHAxD,OAAOC,KAAKqD,GAAUG,SAAS5I,IAC7B2I,EAAY3I,GAAUyI,EAASzI,GAAQqD,QAAQnC,IAAQQ,EAASmH,MAAMvF,GAAYA,EAAQpC,KAAOA,SAE5F,IACFnB,EACH2I,gBAAiB,CACfD,SAAUE,QAKhBrI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,QAAE8C,GAAY9C,GAEpBuB,EAAAA,EAAAA,IAAU,IACLhC,EACH2I,gBAAiB,CACfD,SAAU,IACL1I,EAAO2I,gBAAgBD,SAC1B,CAACnF,EAAQtD,QAAS,IAAKD,EAAO2I,gBAAgBD,SAASnF,EAAQtD,SAAW,GAAKsD,EAAQpC,YAM/FZ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,IAAKR,EAAOwI,iBACV,OAGF,MAAM,OAAEvI,EAAF,WAAU8C,GAAe/C,EAAOwI,kBAChC,SAAEtI,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAEnDkD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC3CiD,GAAiBhD,GACL6C,EAAWM,KAAKlC,GAAO+B,EAAa/B,KAClDmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAU6I,cACrEF,SAAStF,GAAY/C,EAAQwI,qBAAqB,CAAEzF,QAAAA,UAG/DhD,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UAAE8D,GAAc9D,GAAW,GAC3ByB,GAAW+G,EAAAA,EAAAA,IAAkBjJ,GACnC,OAAKkC,GAIEgH,EAAAA,EAAAA,IAAuBlJ,EAAQkC,EAASf,GAAIoD,GAH1CvE,MAMXO,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UACJ8D,EADI,UAEJ4C,EAFI,gBAGJgC,EAHI,UAIJC,GACE3I,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAEpDvB,GAASqJ,EAAAA,EAAAA,IACPrJ,EAAQC,EAAQC,EAAUgH,EAAiB3C,EAAW4C,EAAWgC,EAAiBC,IAGpFpH,EAAAA,EAAAA,IAAUhC,GAENA,EAAOsJ,4BACT9I,EAAQ+I,yBACR/I,EAAQgJ,iBAAiB,CAEvBjG,QAAU,mDAAkDkG,EAAAA,GAAe,WAAa,qCAK9FlJ,EAAAA,EAAAA,IAAiB,0BAA2BP,IAC1C,GAAKA,EAAOsJ,0BAIZ,MAAO,IACFtJ,EACHsJ,2BAA2B,OAI/B/I,EAAAA,EAAAA,IAAiB,wBAAyBkB,EAAAA,KAE1ClB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OAAEiJ,GAAWjJ,GAAW,GAC9B,MAAO,IACFT,EACH2J,UAAW,CACTC,QAAQ,EACRF,OAAAA,QAKNnJ,EAAAA,EAAAA,IAAiB,kBAAmBP,IAC3B,IACFA,EACH2J,UAAW,CACTC,QAAQ,QAKdrJ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,MAAMqJ,EAAiBC,EAAAA,GAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAG1F,KAAK,MACzD,qBAAE2F,GAAyBhK,EAEjC,GAAIgK,EAAqBlB,MAAK,QAAC,QAAEmB,GAAH,SAAiBA,IAAYJ,KACzD,OAGF,MAAMtG,EAAkC,CACtCtD,OAAQiK,EAAAA,GACRC,MAAMC,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAC3BC,QAAS,CACP7F,MAAM8F,EAAAA,EAAAA,G,+hBAAuC,IAE/CC,YAAY,GAGdhK,EAAQiK,0BAA0B,CAChClH,QAAAA,EACA0G,QAASJ,QAIbtJ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAAY,MAC1E,MAAM,QAAE8C,EAAF,QAAW0G,GAAYxJ,GACvB,qBAAEuJ,GAAyBhK,EAC3B0K,GAAc/E,EAAAA,EAAAA,IAAW3F,EAAQkK,EAAAA,IAEjCS,EAAQC,KAAKC,KACjB,UAAAH,EAAY9E,mBAAZ,eAAyBzE,KAAM,KAC5B6I,EAAqB3G,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEpC2J,GAAkBd,EAAqBxE,OAAS,GArkBf,IAukBjCrE,EAAKyJ,KAAKG,MAAMJ,GAASG,EAE/BvH,EAAQyH,gBAAkBzH,EAAQpC,GAClCoC,EAAQpC,GAAKA,EAEb,MAAM8J,EAAsB,CAC1B9J,GAAAA,EACAoC,QAAAA,EACA0G,QAAAA,EACAiB,UAAU,IAGZlJ,EAAAA,EAAAA,IAAU,IACLhC,EACHgK,qBAAsB,IACjBA,EAAqBD,OAtlBW,KAulBnCkB,KAIJzK,EAAQ2K,UAAU,CAChB,QAAS,aACThK,GAAIoC,EAAQpC,GACZlB,OAAQsD,EAAQtD,OAChBsD,QAAAA,QAIJhD,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHoL,aAAc,CAAEnL,OAAAA,EAAQsE,UAAAA,QAI5BhE,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACHoL,kBAAc9K,OAIlBC,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHqL,YAAa,CAAEpL,OAAAA,EAAQsE,UAAAA,QAI3BhE,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHqL,iBAAa/K,OAIjBC,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,IAAKA,EAAOwI,iBACV,OAGF,MAAM,OAAEvI,EAAF,WAAU8C,GAAe/C,EAAOwI,iBACtC1F,EAAoB9C,EAAQC,EAAQ8C,OAGtCxC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,WAAEsC,GAAetC,EACjBiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC1B+C,GAAoC,IAAtBA,EAAWyC,QAAiBE,GAI/C5C,EAAoB9C,EAAQ0F,EAAKvE,GAAI4B,OC9rBvCxC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAEC,GAAUD,GACZ,OAAER,GAAWD,EAAOsL,aAE1B,OAAOC,EAAAA,EAAAA,IAAmBvL,EAAQ,CAChCwL,cAAe,GACfC,aAAc,GACdC,mBAAepL,KACXI,EAAQ,CAAEiL,eAAgB,CAAEC,OAAQ3L,EAAQ0B,UAAU,IAAW,CAAEgK,oBAAgBrL,GACvFI,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,GAAEU,GAAOV,GACT,qBAAEoL,GAAyB7L,EAAOsL,aAExC,IAAKO,EACH,OAAON,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,qBAAsB,CAAC1K,KAG7D,MAAM2K,EAAeD,EAAqBvI,QAAQrD,GAAWA,IAAWkB,IAMxE,OALA2K,EAAaC,QAAQ5K,GACjB2K,EAAatG,OAzBY,IA0B3BsG,EAAa9E,OAGRuE,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,qBAAsBC,QAG5DvL,EAAAA,EAAAA,IAAiB,2BAA4BP,IACpCuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,0BAAsBvL,OAG5DC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,QAAE6J,GAAY7J,EAEpB,OAAOuL,EAAAA,EAAAA,IAA0BhM,EAAQsK,OAG3C/J,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,GAAEU,GAAOV,EAEf,OAAO8K,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAEC,OAAQkB,EAAIT,WAAOJ,EAAWoL,mBAAepL,QC/CnFC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACHiM,SAAU,IACLjM,EAAOiM,SACVC,OAAQ,CACNxL,MAAAA,EACAyL,eAAW7L,SAMnBC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACHoM,KAAM,IACDpM,EAAOoM,KACVF,OAAQ,CACNxL,MAAAA,EACA2L,cAAU/L,EACVgM,aAAShM,SCvBjBC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAElB,OAAO8L,EAAAA,EAAAA,IAAiBvM,EAAQ,CAC9BwM,mBAAelM,EACfmM,kBAAcnM,EACdqL,eAAgB7G,QAAQpE,GACxBA,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAEiM,GAAWjM,EAEnB,MAAO,IACFT,EACH2M,WAAY,CAAED,OAAAA,QAIlBnM,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH2M,WAAY,CACVC,iBAAiB,QAKvBrM,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC6M,EAAAA,EAAAA,IAAsB7M,K,iCCrB/BO,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ8M,EAAQrM,KAC3C,IACFT,EACHiC,qBAA6B3B,IAAZG,EAAwBA,GAAWT,EAAOiC,qBAI/D1B,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAGhD,IACFT,EACH+M,gBAJsBtM,OAQ1BF,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH+M,qBAAiBzM,OAIrBC,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,WAAYjN,EAAOgN,WAAWtE,SAASzI,IAAW,IAAIgN,iBAOhE1M,EAAAA,EAAAA,IAAiB,+BAA+B,CAACP,EAAQQ,EAASC,KAChE,MAAM,OAAEyM,GAAWzM,GAAW,IACxB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,UAAU,EACVE,WAAYD,UAOtB3M,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,UAAU,UAOpB1M,EAAAA,EAAAA,IAAiB,YAAaP,IAC5B,GAAKoN,EAAAA,IAA4BC,EAAAA,GAIjC,MAAO,IACFrN,EACHsN,kBAA2D,IAAxCtN,EAAO2B,SAAS4L,aAAa/H,YAIpDjF,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACH0B,mBAAoB1B,EAAO0B,kBAC3B8L,WAAY,IACPxN,EAAOwN,WACVC,sBAAkBnN,QAKxBC,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQ8M,EAAQrM,KACpD,IACFT,EACHwN,WAAY,IACPxN,EAAOwN,WACVC,iBAAkBhN,MAAAA,OAAF,EAAEA,EAAS8D,gBAKjChE,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHsN,mBAAoBtN,EAAOsN,uBAI/B/M,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ8M,EAAQrM,KAClD,MAAM,MAAEiN,GAAUjN,GACZ,aAAEkN,GAAiB3N,EACzB,IAAK2N,EACH,MAAO,IACF3N,EACH2N,aAAc,CAACD,IAInB,MAAME,EAAYD,EAAarK,QAAQuK,GAAMA,IAAMH,IAMnD,OALAE,EAAU7B,QAAQ2B,GACdE,EAAUpI,OA7IU,IA8ItBoI,EAAU5G,MAGL,IACFhH,EACH2N,aAAcC,OAIlBrN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQ8M,EAAQrM,KACpD,MAAM,QAAEqN,GAAYrN,GACd,OAAEsN,GAAW/N,EAAOiM,SAC1B,IAAK8B,EACH,MAAO,IACF/N,EACHiM,SAAU,IACLjM,EAAOiM,SACV8B,OAAQ,CACNC,KAAM,IACN/B,SAAU,CAAC6B,MAMnB,MAAMG,EAAcF,EAAO9B,SAAS3I,QAAQ4K,GAAMA,EAAE/M,KAAO2M,EAAQ3M,KAGnE,OAFA8M,EAAYlC,QAAQ+B,GAEb,IACF9N,EACHiM,SAAU,IACLjM,EAAOiM,SACV8B,OAAQ,IACHA,EACH9B,SAAUgC,SAMlB1N,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM0N,EAAe1N,EACrB0N,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,IAErC,MAAMC,EAAmB,IAAItO,EAAOuO,eAC9BC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAEnL,UAAY4K,EAAa5K,UAO/F,OANmC,IAA/BiL,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiBrK,KAAKkK,GAEf,IACFnO,EACHuO,cAAeD,OAInB/N,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM6N,EAAmBtO,EAAOuO,cAAcjL,QAAO,QAAC,QAAE8K,GAAH,SAAiBA,IAAY3N,EAAQ2N,WAE1F,MAAO,IACFpO,EACHuO,cAAeD,OAInB/N,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,KAAEmO,GAASnO,EAGjB,GAAI,YAAamO,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAO5O,EAGT,MAAM+O,EAAa,IAAI/O,EAAOgP,SAC9B,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWN,WAAWS,GAASA,EAAiB3L,UAAYqL,EAAKrL,WAChE,IAAxB0L,GACFF,EAAWJ,OAAOM,EAAoB,GAM1C,OAFAF,EAAW9K,KAAK2K,GAET,IACF5O,EACHgP,QAASD,OAIbxO,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAM+O,EAAa,IAAI/O,EAAOgP,SAI9B,OAFAD,EAAW/H,MAEJ,IACFhH,EACHgP,QAASD,OAIbxO,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAQ0O,IAAKC,GAAqB3O,EAElC,MAAO,IACFT,EACHoP,iBAAAA,OAIJ7O,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,WAAE4O,GAAe5O,EAEvB,MAAO,IACFT,EACHsP,0BAA2BD,OAI/B9O,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACHsP,+BAA2BhP,OAI/BC,EAAAA,EAAAA,IAAiB,YAAY,CAACP,EAAQQ,EAASC,KAC7C,MAAM,IAAE0O,EAAF,OAAOlP,EAAP,UAAesE,GAAc9D,EAE7B8C,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,GAClD,IAAKhB,EAAS,OAEd,MAAMiM,EAAQjM,EAAQkM,UAAYlM,EAAQmM,SACpCC,EAAMH,IAASI,EAAAA,EAAAA,IAAc5P,EAAQwP,GACtCG,KAEAE,EAAAA,EAAAA,IAAmB7P,EAAQ2P,IAehC3N,EAAAA,EAAAA,IAAU,IACLhC,EACH8P,WAAY,CACVX,IAAAA,EACAlP,OAAAA,EACAsE,UAAAA,MAnBFvC,EAAAA,EAAAA,IAAU,IACLhC,EACH+P,gBAAiB,CACfJ,IAAAA,EACAtO,KAAM,OACN2O,UAAW,CACTlD,OAAQ,WACRrM,QAAAA,WAiBVF,EAAAA,EAAAA,IAAiB,aAAcP,IACtB,IACFA,EACH8P,gBAAYxP,OC1ThBC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAC9B,MAAO,IACFT,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVhQ,OAAAA,EACAsE,UAAAA,EACA2L,oBAAoB,QAK1B3P,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrCA,GAASmQ,EAAAA,EAAAA,IAAanQ,IACboQ,EAAAA,EAAAA,IAAapQ,OAIxBO,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,MAAE4P,GAAU5P,EAElB,MAAO,IACFT,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVI,MAAAA,O,eC5BN9P,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,cACyB+L,EADzB,kBACwCC,EADxC,OAC2DrK,EAD3D,OACmEC,EADnE,aAC2EC,EAD3E,QACyFC,GAC3F5F,EAEJ,MAAO,IACFT,EACHwQ,YAAa,IACRxQ,EAAOwQ,YACVvQ,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACA+L,cAAAA,EACAC,kBAAAA,EACArK,OAAAA,EACAC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAOwQ,YAAYrK,OACrCC,aAAcA,GAAgBpG,EAAOwQ,YAAYpK,aACjDC,QAASA,GAAWrG,EAAOwQ,YAAYnK,SAEzCxE,gBAAiB,QAIrBtB,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEmG,EAAF,QAAUE,EAAV,aAAmBD,GAAiBpG,EAAOwQ,YACjD,MAAO,IACFxQ,EACHwQ,YAAa,CACXrK,OAAAA,EACAE,QAAAA,EACAD,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACHwQ,YAAa,IACRxQ,EAAOwQ,YACVrK,OAAAA,EACAE,SAAS,QAKf9F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACHwQ,YAAa,IACRxQ,EAAOwQ,YACVpK,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACHwQ,YAAa,IACRxQ,EAAOwQ,YACVnK,QAAAA,O,wCCJN,MAAMoK,EAA0B,IAAIC,IAE9BC,GAA0BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAgnB5DC,eAAe7I,EACbvC,EACAxF,EACAmM,EACArE,GAGA,IAFA+I,EAEA,wDADAC,EACA,wDACA,MAAM/Q,EAASyF,EAAKvE,GAEpB,IAAI8P,EACJ,OAAQjJ,GACN,KAAKkJ,EAAAA,GAAAA,UACHD,OAAY3Q,EACZ,MACF,KAAK4Q,EAAAA,GAAAA,OACHD,IAAcrG,KAAKuG,MAAMC,EAAAA,GAAqB,GAAK,GACnD,MACF,KAAKF,EAAAA,GAAAA,SACHD,IAAcG,EAAAA,GAAqB,GAIvC,MAAMhO,QAAeiO,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C3L,MAAM4L,EAAAA,EAAAA,KAAuB1K,EAAAA,EAAAA,MAAa3G,EAAQC,GAClDmM,SAAAA,EACA4E,UAAAA,EACAM,MAAOH,EAAAA,GACPlR,SAAAA,IAGF,IAAKkD,EACH,OAGF,MAAM,SACJzB,EADI,MACM6P,EADN,MACa5F,EADb,YACoB6F,GACtBrO,EAEJ,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb,MAAM8K,EAAgBzR,IAAWiK,EAAAA,GAC7BlK,EAAOgK,qBAAqB3G,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEoO,EAAe,GAAoBC,OAAOjQ,EAAU+P,GACpDG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCpK,EAAMnC,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAElCzF,GAAS+R,EAAAA,EAAAA,IAAoB/R,EAAQC,EAAQ4R,GAC7C7R,EAAS+Q,GACLiB,EAAAA,EAAAA,IAAkBhS,EAAQC,EAAQC,EAAUqH,IAC5C0K,EAAAA,EAAAA,IAAgBjS,EAAQC,EAAQC,EAAUqH,GAE9CvH,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,OACtD5L,GAASoS,EAAAA,EAAAA,IAAkBpS,EAAQC,EAAQwR,GAE3C,IAAIY,GAAYC,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQC,GAChD,MAAMqS,GAAcC,EAAAA,EAAAA,IAAkBxS,EAAQC,EAAQC,GAWtD,GATI6Q,GAAcsB,GAAaE,IACxBA,EAAY/M,UAAUiN,EAAAA,EAAAA,IAA4BJ,EAAWE,KAChEvS,GAASiS,EAAAA,EAAAA,IAAgBjS,EAAQC,EAAQC,EAAUqS,GACnDF,GAAYC,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQC,GAC5CF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GACrEyQ,GAAa,KAIZC,EAAiB,CACpB,MAAM0B,EAAa3B,EAAawB,EAAeF,GACzC,eAAEM,GAAmBC,EAAiBF,EAAYrG,EAAUrE,GAClEhI,GAAS6S,EAAAA,EAAAA,IAAuB7S,EAAQC,EAAQC,EAAUyS,IAG5D3Q,EAAAA,EAAAA,IAAUhC,GA8CZ,SAAS4S,EACPE,EACAzG,EACArE,GAEA,MAAM,OAAExC,GAAWsN,EACbC,EAAQ1G,EArBhB,SAA0ByG,EAAqBzG,GAC7C,OAAIA,EAAWyG,EAAU,GAChB,EAGLzG,EAAWyG,EAAUA,EAAUtN,OAAS,GACnCsN,EAAUtN,OAAS,EAGrBsN,EAAUrE,WAAU,CAACtN,EAAI6R,IAC9B7R,IAAOkL,GACHlL,EAAKkL,GAAYyG,EAAUE,EAAI,GAAK3G,IAUjB4G,CAAiBH,EAAWzG,IAAa,EAE5D6G,EADclL,IAAckJ,EAAAA,GAAAA,UACM6B,EAASA,EAAQ,GAAMvN,EACzD2N,EAAOD,EAAoB9B,EAAAA,GAC3BgC,EAAKF,EAAoB9B,EAAAA,GAAqB,EAC9CuB,EAAiBG,EAAU/I,MAAMa,KAAKC,IAAI,EAAGsI,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQtL,GACN,KAAKkJ,EAAAA,GAAAA,UACHmC,EAAeH,EAAoB,EACnCI,EAAcH,GAAQ,EACtB,MACF,KAAKjC,EAAAA,GAAAA,SACHmC,EAAeH,EAAoB1N,EACnC8N,EAAcF,GAAM5N,EAAS,EAC7B,MACF,KAAK0L,EAAAA,GAAAA,OACL,QACEmC,EAAeV,EAAenN,OAAS,EACvC8N,EAAcX,EAAenN,SAAW4L,EAAAA,GAI5C,MAAO,CAAEuB,eAAAA,EAAgBU,aAAAA,EAAcC,YAAAA,GAGzCxC,eAAeyC,EAAYC,GAczB,IAAIpF,EACJ,MAAMqF,EAAmBD,EAAOE,WAAa,CAACC,EAAkBC,KACzDnD,EAAwBoD,IAAID,KAC/BxF,EAAUwF,EACVnD,EAAwBqD,IAAIF,EAAgBH,IAG9C,MAAMzT,GAAS4G,EAAAA,EAAAA,OAEf5E,EAAAA,EAAAA,IAAU,IACLhC,EACH+T,YAAa,CACXC,iBAAkB,IACbhU,EAAO+T,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,SAAAA,aAIxBrT,GAGAkT,EAAOS,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGR,MAAMnU,GAAS4G,EAAAA,EAAAA,MACf4M,EAAOnJ,iBAAmBrK,EAAOqK,iBACjC,MAAM9I,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,SAAErB,GAAaqB,EAEhBiS,EAAOS,YAAc/T,IAAakB,EAAAA,KACrCoS,EAAOS,YAAaG,EAAAA,EAAAA,IAAyBpU,EAAQwT,EAAO9N,KAAKvE,GAAIjB,UAGjEmR,EAAAA,EAAAA,IAAQ,cAAemC,EAAQC,GAEjCA,GAAoBrF,GACtBqC,EAAwB4D,OAAOjG,IA/zBnC7N,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJuH,EAAYkJ,EAAAA,GAAAA,OADR,gBAEJF,GAAkB,GAChBvQ,GAAW,GAEf,IAAI,OAAER,EAAF,SAAUC,GAAaO,GAAW,GAEtC,IAAKR,EAAQ,CACX,MAAMsB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGFtB,EAASsB,EAAmBtB,OAC5BC,EAAWqB,EAAmBrB,SAGhC,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,IAAKyF,GAAQA,EAAK4O,aAChB,OAGF,MAAM5P,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChDmS,GAAYC,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQC,GAC5CqS,GAAcC,EAAAA,EAAAA,IAAkBxS,EAAQC,EAAQC,GAEtD,GAAKwE,GAAgBA,EAAYc,QAAUwC,IAAckJ,EAAAA,GAAAA,OAiBlD,CACL,MAAM7E,EAAWrE,IAAckJ,EAAAA,GAAAA,UAA8BxM,EAAY,GAAKA,EAAYA,EAAYc,OAAS,GACzGuL,EAAajM,QAAQyN,GACrBG,EAAc3B,EAAawB,EAAcF,GACzC,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAYrG,EAAUrE,GAU3C,GARIqL,IACFrT,GAAS6S,EAAAA,EAAAA,IAAuB7S,EAAQC,EAAQC,EAAUyS,KAG5D4B,EAAAA,EAAAA,KAAU,MAYdzD,eACEtQ,EACA8S,EAAsBvC,EAAqBC,EAC3CtL,EAAexF,EAAkB8H,EAA8BqE,GAE1DiH,SACGrL,EACJvC,EAAMxF,EAAUmM,EAAUrE,EAAW+I,EAAYC,GAIhDA,GACHxQ,EAAQyH,qBAAqB,CAC3BhI,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAU8H,UAAAA,EAAWgJ,iBAAiB,IAxBlDwD,CAAehU,EAAS8S,EAAavC,EAAYC,EAAiBtL,EAAMxF,EAAU8H,EAAWqE,MAGhG2E,EACF,WAlC+E,CACjF,MAAM3E,GAAWoI,EAAAA,EAAAA,IAAuBzU,EAAQC,KAAWyU,EAAAA,EAAAA,IAAqB1U,EAAQC,EAAQC,GAC1F6Q,EAAajM,QAAQuH,GAAYgG,IAAcA,EAAUtK,SAASsE,IAClEqG,GAAc3B,EAAawB,EAAcF,IAAc,IACvD,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAYrG,EAAU6E,EAAAA,GAAAA,QAEvCmC,GAAgBV,EAAenN,QAAU4L,EAAAA,KAC3CpR,GAAS6S,EAAAA,EAAAA,IAAuB7S,EAAQC,EAAQC,EAAUyS,IAGvDW,IACHiB,EAAAA,EAAAA,KAAU,KACHtM,EAAqBvC,EAAMxF,EAAUmM,EAAU6E,EAAAA,GAAAA,OAA0BH,EAAYC,MAwBhG,OAAOhR,MAqBTO,EAAAA,EAAAA,IAAiB,eAAeuQ,MAAO9Q,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,iBACeoQ,EADf,aACiCC,GACnCnU,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMnC,QA2lBRuN,eAA2BpL,EAAenB,EAAmBoQ,GAC3D,MAAMvR,QAAeiO,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3L,KAAAA,EAAMnB,UAAAA,IACrD,IAAKnB,EACH,OAGF,GAAIA,IAAWyR,EAAAA,GAAiB,CAC9B,GAAIF,EAAkB,CACpB,IAAI3U,GAAS4G,EAAAA,EAAAA,MACb,MAAMkO,GAAevF,EAAAA,EAAAA,IAAkBvP,EAAQ0F,EAAKvE,GAAIwT,GACxD3U,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQ0F,EAAKvE,GAAIwT,EAAkB,IACzDG,EACHE,sBAAkB1U,KAEpB0B,EAAAA,EAAAA,IAAUhC,GAGZ,OAGF,IAAIA,GAAS4G,EAAAA,EAAAA,MAKb,OAJA5G,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQ0F,EAAKvE,GAAIoD,EAAWnB,EAAOG,SAC9DvD,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,QAC7DxP,EAAAA,EAAAA,IAAUhC,GAEHoD,EAAOG,QApnBQ0R,CAAYvP,EAAMnB,EAAWoQ,GACnD,GAAIpR,GAAWqR,EAAc,CAC3B,MAAM,cAAE7O,EAAF,WAAiBmP,GAAeN,GAEtC5S,EAAAA,EAAAA,KAAUmT,EAAAA,EAAAA,KACRvO,EAAAA,EAAAA,MACArD,EACAtD,EACA8F,EACAmP,SAKN3U,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAMc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAEnC,GAAa,cAATF,IAAyBZ,EAAQ2U,YACnC,MAAO,IACFpV,EACH2B,SAAU,IACL3B,EAAO2B,SACVC,qBAAsBnB,IAK5B,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1BuT,EAAS,IACV/S,EACHiF,KAAAA,EACAuO,YAAYhP,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/CmV,WAAWC,EAAAA,EAAAA,IAAgBtV,EAAQC,EAAQC,GAC3CqV,QAAQC,EAAAA,EAAAA,IAAaxV,EAAQC,IAG/BO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQiV,oBAAoB,CAAExV,OAAAA,EAAQC,SAAAA,EAAUwV,OAAO,IAEvD,MAAMC,GAAYlV,EAAQmV,aAAenV,EAAQmV,YAAYpQ,QAAU,EACjEqQ,GAAaF,GAAYlV,EAAQmV,aAAenV,EAAQmV,YAAYpQ,OAAS,EAEnF,GAAImQ,EAAU,CACZ,MAAM,YAAEC,KAAgBE,GAAetC,EACvCD,EAAY,IACPuC,EACHpC,WAAYkC,EAAcA,EAAY,QAAKtV,SAExC,GAAIuV,EAAW,CACpB,MAAM,KACJpR,EADI,SACEsR,EADF,YACYH,KAAgBI,GAC9BxC,EACEyC,GAAqBC,EAAAA,EAAAA,IAAMN,EAAaO,EAAAA,IAC9C,IAAK,IAAInD,EAAI,EAAGA,EAAIiD,EAAmBzQ,OAAQwN,IAAK,CAClD,MAAOoD,KAAoBC,GAAmBJ,EAAmBjD,GAC3D7L,EAAa,GAAEmP,KAAKC,QAAQvD,IAElCO,EAAY,IACPyC,EACHvR,KAAY,IAANuO,EAAUvO,OAAOnE,EACvByV,SAAgB,IAAN/C,EAAU+C,OAAWzV,EAC/BoT,WAAY0C,EACZjP,UAAWkP,EAAgB7Q,OAAS,EAAI2B,OAAY7G,IAGtD+V,EAAgBxN,SAAS6K,IACvBH,EAAY,IACPyC,EACHtC,WAAAA,EACAvM,UAAAA,YAID,CACL,MAAM,KACJ1C,EADI,SACEsR,EADF,YACYH,EADZ,WACyB3B,KAAe+B,GAC1CxC,EAEA/O,GACF8O,EAAY,IACPyC,EACHvR,KAAAA,EACAsR,SAAAA,EACA9B,WAAAA,IAIJ2B,EAAY/M,SAAS6K,IACnBH,EAAY,IACPyC,EACHtC,WAAAA,YAQRnT,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,iBAAE4J,GAAqBrK,GACvB,KAAEyE,EAAF,SAAQsR,GAAatV,EAErBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUiT,EAAAA,EAAAA,IAAqBxW,EAAQC,EAAQC,EAAUgH,GAC1DxB,GAASnC,KAIT8N,EAAAA,EAAAA,IAAQ,cAAe,CAC1B3L,KAAAA,EAAMnC,QAAAA,EAASkB,KAAAA,EAAMsR,SAAAA,EAAUV,WAAWC,EAAAA,EAAAA,IAAgBtV,EAAQC,EAAQC,GAAWmK,iBAAAA,IAGvF7J,EAAQiW,aAAa,CAAElS,eAAWjE,SAGpCC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxB8C,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,GAC5CkP,EAAmBlQ,GAAWkN,EAAwBiG,IAAInT,EAAQyH,iBAAmBzH,EAAQpC,IAC/FsS,IACFkD,EAAAA,EAAAA,IAAkBlD,GAGpBjT,EAAQ2K,UAAU,CAChB,QAAS,iBACT5D,IAAK,CAAChD,GACNtE,OAAAA,QAIJM,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASC,KAC9C,MAAM,OAAER,EAAF,SAAUC,EAAV,MAAoB0W,GAAUnW,EACpC,IAAKmW,EACH,OAGF,MAAM,KAAEnS,EAAF,SAAQsR,GAAaa,EACrBlR,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAchC,OAZIC,IAAakB,EAAAA,KACViQ,EAAAA,EAAAA,IAAQ,YAAa,CACxB3L,KAAAA,EACAjB,KAAAA,EACAsR,SAAAA,EACAc,cAAc5R,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,KAIrDF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,QAAS0W,IACtDE,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAE8W,UAAWnM,KAAKuG,MAAMmF,KAAKC,MAAQ,WAK3EhW,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoB8W,GAAcvW,EACxC,KAAKwW,EAAAA,EAAAA,IAAYjX,EAAQC,EAAQC,GAC/B,OAGF,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAShC,OAPK+W,GAAa9W,IAAakB,EAAAA,KACxBiQ,EAAAA,EAAAA,IAAQ,aAAc3L,GAG7B1F,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAASI,IACtDwW,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAE8W,eAAWzW,QAKnDC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoBmV,GAAc5U,EAExC,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAamV,OAGnE9U,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAMiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGF,MAAM,UACJnB,EADI,QACO2S,EADP,UACgBC,EADhB,SAC2BC,GAC7B3W,GAEC4Q,EAAAA,EAAAA,IAAQ,aAAc,CACzB3L,KAAAA,EAAMnB,UAAAA,EAAW2S,QAAAA,EAASC,UAAAA,EAAWC,SAAAA,QAIzC7W,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQS,EAAQR,QACnCyF,GAOPoL,eAAgCpL,SACxB2L,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3L,KAAAA,IACpC,IAAI1F,GAAS4G,EAAAA,EAAAA,MACb5G,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAa,KAC1EY,EAAAA,EAAAA,IAAUhC,GAPLqX,CAAiB3R,OAUxBnF,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,WAAEsC,EAAF,mBAAcuU,GAAuB7W,EACrCc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3BoR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3L,KAAAA,EAAM3C,WAAAA,EAAYuU,mBAAAA,IAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgBxX,EAAQC,EAAQC,GAC9C6C,EAAWgF,SAASwP,IACtB/W,EAAQiW,aAAa,CAAElS,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,WAAEsC,GAAetC,EACjBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3BoR,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3L,KAAAA,EAAM3C,WAAAA,IAEhD,MAAMwU,GAAYE,EAAAA,EAAAA,IAAyBzX,EAAQC,GAC/C8C,EAAWgF,SAASwP,IACtB/W,EAAQiW,aAAa,CAAElS,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,iBAAiBuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MACpE,MAAM,OAAER,EAAF,mBAAUqX,GAAuB7W,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMiF,EAAK,UAAGjF,EAAKE,mBAAR,aAAG,EAAkBzE,SAE1BkQ,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3L,KAAAA,EAAM4R,mBAAAA,EAAoB3M,MAAAA,IAE3D,MAAM+M,GAAavX,EAAAA,EAAAA,IAAyBH,GACxC0X,GAAcA,EAAWzX,SAAWA,GACtCO,EAAQ0B,SAAS,CAAEf,QAAIb,QAI3BC,EAAAA,EAAAA,IAAiB,kBAAkBuQ,MAAO9Q,EAAQQ,EAASC,KACzD,MAAM,WACJsC,EADI,OACQ4U,EADR,YACgBC,GAClBnX,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1BmD,QAAeiO,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CwG,KAAMnS,EAAM3C,WAAAA,EAAY4U,OAAAA,EAAQC,YAAAA,IAGlCpX,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACL0U,EAAAA,EAAAA,IAAe,2BACf,iFAIRvX,EAAAA,EAAAA,IAAiB,qBAAqBuQ,MAAO9Q,EAAQQ,EAASC,KAC5D,MAAM,OAAEqM,EAAF,OAAU7M,EAAV,SAAkBC,GAAaO,EACrC,GAAIR,IAAWD,EAAO+X,cAAe,OAErC,MAAMrS,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,SAEC2L,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCwG,KAAMnS,EAAMxF,SAAAA,EAAU4M,OAAAA,QAI1BvM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,iBAAE4J,GAAqBrK,EACvBuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAO4L,EAAAA,EAAAA,IAAuBtR,EAAQC,EAAQC,GACpD,IAAKwF,EACH,OAGF,MAAM,MAAEiF,GAAUlK,EASlB,GAPAkQ,GAAwB,MACjBU,EAAAA,EAAAA,IAAQ,sBAAuB,CAClChH,iBAAAA,EAAkB3E,KAAAA,EAAMxF,SAAAA,EAAUyK,MAAAA,OAKlCzK,IAAakB,EAAAA,GACf,OAGEnB,IAAWiK,EAAAA,KACblK,EAAS,IACJA,EACHgK,qBAAsBhK,EAAOgK,qBAAqB3G,KAAK8K,GAC9CA,EAAajD,UAAYiD,EAAahN,IAAMwJ,EAAQ,IAAKwD,EAAcjD,UAAU,GAAUiD,MAKxG,MAAMzJ,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChD8X,GAAQC,EAAAA,EAAAA,IAAoBjY,EAAQC,EAAQC,GAClD,IAAKwE,IAAgBsT,IAAUtS,EAAKwS,YAClC,OAAOlY,EAGT,MAAMmY,EAmjBR,SAAwB5Q,EAAe4L,EAAcC,GACnD,IAAIgF,EAAQ,EAEZ,IAAK,IAAIpF,EAAI,EAAGqF,EAAI9Q,EAAI/B,OAAQwN,EAAIqF,IAC9B9Q,EAAIyL,IAAMG,GAAQ5L,EAAIyL,IAAMI,GAC9BgF,MAGE7Q,EAAIyL,IAAMI,IALuBJ,KAUvC,OAAOoF,EAhkBWE,CAAe5T,EAAcsT,EAAOrN,GACtD,OAAKwN,GAIErB,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAChCsY,uBAAwB5N,EACxBuN,YAAatN,KAAKC,IAAI,EAAGnF,EAAKwS,YAAcC,KALrCnY,MASXO,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGF,MAAM,WAAE3C,GAAetC,GAElB4Q,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3L,KAAAA,EAAM3C,WAAAA,QAG3CxC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,KAAEgE,GAAShE,GAgJnBqQ,eAAkCvN,GAChC,MAAMiV,QAAuBnH,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9N,QAAAA,KAE9DvB,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACH4R,eAAAA,IApJGC,CAAmBhU,OAG1BlE,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,GAAKA,EAAOwY,eAIZ,MAAO,IACFxY,EACHwY,oBAAgBlY,OAIpBC,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAER,EAAF,UAAUsE,EAAV,QAAqBmU,GAAYjY,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE5ByF,IACG2L,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3L,KAAAA,EAAMnB,UAAAA,EAAWmU,QAAAA,QAIpDnY,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KACJiF,EADI,UACEnB,EADF,OACaoU,EADb,OACqBC,EADrB,MAC6BrH,EAD7B,kBACoCsH,GACtCpY,GAmVNqQ,eACEpL,EACAnB,EACAoU,EACAC,EACArH,EACAsH,GAEA,MAAMzV,QAAeiO,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD3L,KAAAA,EAAMnB,UAAAA,EAAWoU,OAAAA,EAAQC,OAAAA,EAAQrH,MAAAA,IAGnC,IAAKnO,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb5G,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,OAC7D,MAAM,OAAE/K,GAAWzG,EAAOwG,aAE1BxE,EAAAA,EAAAA,IAAU,IACLhC,EACHwG,YAAa,IACRxG,EAAOwG,YACVC,OAAQ,IACHA,EACH,CAACkS,IAASG,EAAAA,EAAAA,IAAO,KACVD,GAAqBpS,GAAUA,EAAOkS,GAAUlS,EAAOkS,GAAU,MAClEvV,GAAUA,EAAOoO,MAAMnO,KAAK0V,GAASA,EAAK5X,QAGlD6X,QAAS,IACHhZ,EAAOwG,YAAYwS,QAAUhZ,EAAOwG,YAAYwS,QAAU,GAC9D,CAACL,GAASvV,EAAO6V,YAAc,OAnXhCC,CAAsBxT,EAAMnB,EAAWoU,EAAQC,EAAQrH,EAAOsH,OAGrEtY,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQ8M,EAAQrM,KACnD,MAAM,WACJyH,EADI,WACQnF,EADR,SACoBjB,EADpB,YAC8BqG,GAChCnI,EAAO6B,gBACLsX,EAAWjR,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,EACzD8Y,EAAStX,GAAW6D,EAAAA,EAAAA,IAAW3F,EAAQ8B,QAAYxB,EACnDqB,EAAWuG,GAAcnF,EAC3BA,EACCW,MAAK,CAAC2V,EAAGC,IAAMD,EAAIC,IACnBjW,KAAKlC,IAAOoO,EAAAA,EAAAA,IAAkBvP,EAAQkI,EAAY/G,KAAKmC,OAAmBwB,cAC3ExE,EAEJ,IAAK6Y,IAAaC,IAAWzX,EAC3B,OAGF,MAAM,SAAEyV,EAAF,YAAYhC,GAAgB3U,EAC5B8U,GAASC,EAAAA,EAAAA,IAAaxV,EAAQ8B,GAE9ByX,EAAe5X,EAAS2B,QAAQkW,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAa/T,SACV6L,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9B8H,SAAAA,EACAC,OAAAA,EACAzX,SAAU4X,EACVlP,kBAAkBzD,EAAAA,EAAAA,MAAYyD,iBAC9B+M,SAAAA,EACAhC,YAAAA,EACAG,OAAAA,EACApN,YAAAA,IAIJxG,EACG2B,QAAQkW,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3C3Q,SAAStF,IACR,MAAM,KAAEkB,EAAF,SAAQsR,GAAaxS,EAAQ+G,QAAQ7F,MAAQ,IAC7C,QAAEqJ,EAAF,KAAW4L,GAASnW,EAAQ+G,QAE7BiJ,EAAY,CACf7N,KAAM0T,EACN3U,KAAAA,EACAsR,SAAAA,EACAjI,QAAAA,EACA4L,KAAAA,EACAtC,SAAAA,EACAhC,YAAAA,EACAG,OAAAA,QAINvT,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACH/E,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GAiZPoL,eAAoCpL,GAClC,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3L,KAAAA,IACxD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,GAAayB,EAEfyO,GAAOC,EAAAA,EAAAA,IAAqBnQ,EAAU,MACtC4F,EAAMnC,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAAQ/B,MAAK,CAAC2V,EAAGC,IAAMA,EAAID,IAE7D,IAAIrZ,GAAS4G,EAAAA,EAAAA,MACb5G,GAAS2Z,EAAAA,EAAAA,IAAyB3Z,EAAQ0F,EAAKvE,GAAI0Q,GACnD7R,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,eAAgBmG,IAC7EvF,EAAAA,EAAAA,IAAUhC,GA3ZL4Z,CAAqBlU,OAG5BnF,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,OACJR,EADI,GACIkB,GACNV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAIA2L,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC3L,KAAAA,EACA6B,IAAK,CAACpG,SAIVZ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,YACe6Q,GACjB3U,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,EAAUmC,IAAQmU,EAAAA,EAAAA,IAAuB7Z,EAAQ0F,EAAKvE,GAAIoD,GAC3DmB,GAASnC,IAIT8N,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC3L,KAAAA,EACAnC,QAAAA,EACA6R,YAAAA,QAIJ7U,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,GAAaO,EACvBiF,GAAO4L,EAAAA,EAAAA,IAAuBtR,EAAQC,EAAQC,GAC/CwF,IAIA2L,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3L,KAAAA,EAAMxF,SAAAA,QAyQlDK,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GAiEPoL,eAAkCpL,GAChC,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE3L,KAAAA,IACtD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,EAAF,MAAYiK,EAAZ,MAAmB4F,GAAUpO,EAE7ByO,GAAOC,EAAAA,EAAAA,IAAqBnQ,EAAU,MACtC4F,EAAMnC,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAAQ/B,MAAK,CAAC2V,EAAGC,IAAMA,EAAID,IAE7D,IAAIrZ,GAAS4G,EAAAA,EAAAA,MACb5G,GAAS+R,EAAAA,EAAAA,IAAoB/R,EAAQ0F,EAAKvE,GAAI0Q,GAC9C7R,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAamG,GAC1EvH,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,QACtD5J,EAAAA,EAAAA,IAAUhC,GA7EL8Z,CAAmBpU,OAG1BnF,EAAAA,EAAAA,IAAiB,cAAcuQ,MAAO9Q,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,cAAe,CAAE3L,KAAAA,EAAMnB,UAAAA,IAC/CnB,IAILpB,EAAAA,EAAAA,KAAU+S,EAAAA,EAAAA,KAAkBnO,EAAAA,EAAAA,MAAa3G,EAAQsE,EAAW,CAC1DwV,cAAe3W,SAInB7C,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OAAER,EAAF,SAAU+Z,GAAavZ,EACvBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1Bga,GAAatU,EAAAA,EAAAA,IAAW3F,EAAQga,KAAaE,EAAAA,EAAAA,IAAWla,EAAQga,GACtE,GAAKtU,GAASuU,EAMd,OAFK5I,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEkE,OAAQ0E,EAAYvU,KAAAA,KAEjDoR,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAChCka,SAAU,IACLzU,EAAKyU,SACRH,SAAAA,SAKNzZ,EAAAA,EAAAA,IAAiB,cAAcuQ,MAAO9Q,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,cAAe,CAAE3L,KAAAA,IACzCtC,GAQLpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,OAC7DxR,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOwI,MAAO,OAC7D5L,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAEma,UAAWhX,EAAOmE,OACxDvF,EAAAA,EAAAA,IAAUhC,KAXRgC,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,KAAWlQ,EAAAA,EAAAA,MAAa3G,EAAQ,CACxCma,UAAW,UAiDjB7Z,EAAAA,EAAAA,IAAiB,yBAAyBuQ,MAAO9Q,EAAQQ,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE3L,KAAAA,IACpDtC,IAILpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASqa,EAAAA,EAAAA,IAAuBra,EAAQC,EAAQmD,EAAOzB,SAAS,IAChE3B,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,OAC7DxR,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOwI,MAAO,QAC7D5J,EAAAA,EAAAA,IAAUhC,QAGZO,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAU+W,EAAAA,EAAAA,IAAuBta,EAAQC,GAC1CyF,GAASnC,IAIT8N,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE3L,KAAAA,EAAM6U,OAAQhX,EAAQiX,c,cCxiC/D,MAGMC,GAAkBC,EAAAA,EAAAA,KAAU7J,GAAOA,KAAM,KAAK,GAiapDC,eAAe6J,EAAWja,EAAekY,GACvC,MAAMxV,QAAeiO,EAAAA,EAAAA,IAAQ,aAAc,CAAE3Q,MAAAA,EAAOkY,OAAAA,IAC/CxV,IAILpB,EAAAA,EAAAA,KAAU4Y,EAAAA,EAAAA,KAAgBhU,EAAAA,EAAAA,OAAcgS,EAAQxV,EAAOgJ,KAAMhJ,EAAO6V,cAratE1Y,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,KAAEgO,GAAShO,EAAOiM,SAAS4O,OAAS,IAoM5C/J,eAA+B9C,GAC7B,MAAM8M,QAAsBzJ,EAAAA,EAAAA,IAAQ,mBAAoB,CAAErD,KAAAA,IACrD8M,IAIL9Y,EAAAA,EAAAA,KAAU+Y,EAAAA,EAAAA,KACRnU,EAAAA,EAAAA,MACA,QACAkU,EAAc9M,KACd8M,EAAcE,OA7MXC,CAAgBjN,OAGvBzN,EAAAA,EAAAA,IAAiB,qBAAqBuQ,MAAO9Q,EAAQQ,KACnD,MAAQ0a,OAAQC,GAAgBnb,EAAOiM,SAAS4O,MAC1CO,EAASpb,EAAOiM,SAASoP,SAC/B,GAAKF,GAAgBA,EAAY3V,OAIjC,IAAK,IAAIwN,EAAI,EAAGA,EAAImI,EAAY3V,OAAQwN,IAAK,CAC3C,MAAM7R,EAAKga,EAAYnI,GACnBoI,EAAOja,GAAI8K,WAGfzL,EAAQ8a,aAAa,CAAEC,aAAcpa,IAEjC6R,EAvB0B,IAuBQ,GAAKA,EAAI,SACvCwI,EAAAA,EAAAA,IAzBgB,WA8B5Bjb,EAAAA,EAAAA,IAAiB,sBAAuBP,IACtC,MAAM,KAAEgO,GAAShO,EAAOiM,SAAS8B,QAAU,IAyL7C+C,eAAkC9C,GAChC,MAAMyN,QAAuBpK,EAAAA,EAAAA,IAAQ,sBAAuB,CAAErD,KAAAA,IAC9D,IAAKyN,EACH,OAGF,MAAMzb,GAAS4G,EAAAA,EAAAA,OAEf5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiM,SAAU,IACLjM,EAAOiM,SACV8B,OAAQ0N,KApMPC,CAAmB1N,OAG1BzN,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAEgO,GAAShO,EAAOiM,SAAS0P,UAAY,IAqM/C7K,eAAoC9C,GAClC,MAAM4N,QAAyBvK,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErD,KAAAA,IAClE,IAAK4N,EACH,OAGF,MAAM5b,GAAS4G,EAAAA,EAAAA,OAEf5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiM,SAAU,IACLjM,EAAOiM,SACV0P,SAAUC,KAhNTC,CAAqB7N,OAG5BzN,EAAAA,EAAAA,IAAiB,wBAAwBuQ,MAAAA,IACvC,MAAM,KAAE9C,GAAShO,EAAOiM,SAAS6P,UAAY,GAEvCA,QAAiBzK,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3D,MAAO,OAAQM,KAAAA,IACpE8N,IAIL9b,GAAS4G,EAAAA,EAAAA,OAET5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiM,SAAU,IACLjM,EAAOiM,SACV6P,SAAU,CACR9N,KAAM8N,EAAS9N,KACf/B,SAAU6P,EAAS7P,SAAS3I,QAAQwK,GAA8B,OAAlBA,EAAQJ,iBAMhEnN,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAEgO,GAAShO,EAAOiM,SAAS8P,UAAY,IA2L/CjL,eAAoC9C,GAClC,MAAMgO,QAAyB3K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErD,KAAAA,IAC7DgO,IAILha,EAAAA,EAAAA,KAAU+Y,EAAAA,EAAAA,KACRnU,EAAAA,EAAAA,MACA,WACAoV,EAAiBhO,KACjBgO,EAAiBhB,OApMdiB,CAAqBjO,OAG5BzN,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,aAAE8a,EAAF,oBAAgBW,GAAwBzb,EAC9C,IAAI,qBAAE0b,GAAyB1b,EAE/B,IAAK0b,IAAyBD,EAAqB,CACjD,MAAME,GAAaC,EAAAA,EAAAA,IAAiBrc,EAAQub,GAC5C,IAAKa,EACH,OAGFD,EAAuBC,EAAWE,YA2LtCxL,eAA4ByK,EAAsBe,EAAoBJ,GACpE,MAAME,QAAmB/K,EAAAA,EAAAA,IACvB,gBACA,CAAE6K,oBAAAA,EAAqBX,aAAAA,EAAce,WAAAA,IAEvC,IAAKF,EACH,OAGF,MAAM,IAAEtI,EAAF,SAAO7H,EAAP,MAAiBsQ,GAAUH,EAEjC,IAAIpc,GAAS4G,EAAAA,EAAAA,MAEb5G,GAASwc,EAAAA,EAAAA,IAAiBxc,EAAQ8T,EAAI3S,GAAI,IAAK2S,EAAK7H,SAAAA,EAAUsQ,MAAAA,IAE9D,MAAME,EAAezc,EAAOiM,SAASyQ,SAAShP,MAC1C+O,GAAgBF,EAAME,KACxBzc,GAAS2c,EAAAA,EAAAA,IAAwB3c,KAGnCgC,EAAAA,EAAAA,IAAUhC,GA5MLsb,CAAaC,EAAcY,EAAsBD,OAGxD3b,EAAAA,EAAAA,IAAiB,sBAAsB,MA4MvCuQ,iBACE,MAAMsL,QAAmB/K,EAAAA,EAAAA,IAAQ,uBACjC,IAAK+K,EACH,OAGF,MAAM,IAAEtI,EAAF,SAAO7H,GAAamQ,GAE1Bpa,EAAAA,EAAAA,KAAU4a,EAAAA,EAAAA,KAAsBhW,EAAAA,EAAAA,MAAa,IAAKkN,EAAK7H,SAAAA,KAnNlD4Q,GAsNP/L,iBACE,MAAMsL,QAAmB/K,EAAAA,EAAAA,IAAQ,6BACjC,IAAK+K,EACH,OAGF,MAAM,IAAEtI,EAAF,SAAO7H,GAAamQ,GAE1Bpa,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACHkW,qBAAsB,IAAKhJ,EAAK7H,SAAAA,KA/N7B8Q,OAGPxc,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAM,KAAEgO,GAAShO,EAAOoM,KAAK4Q,OAoV/BlM,eAA6B9C,GAC3B,MAAMiP,QAAkB5L,EAAAA,EAAAA,IAAQ,iBAAkB,CAAErD,KAAAA,IACpD,IAAKiP,EACH,OAGF,MAAMjd,GAAS4G,EAAAA,EAAAA,OAEf5E,EAAAA,EAAAA,IAAU,IACLhC,EACHoM,KAAM,IACDpM,EAAOoM,KACV4Q,MAAOC,KA/VNC,CAAclP,OAGrBzN,EAAAA,EAAAA,IAAiB,WAAWuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MAC9D,MAAM,IAAE0c,EAAF,aAAOC,GAAiB3c,EAE9B,UADqB4Q,EAAAA,EAAAA,IAAQ,UAAW,CAAE8L,IAAAA,EAAKC,aAAAA,IAE7C,OAIF,MAAMhR,GAAO,WADbpM,GAAS4G,EAAAA,EAAAA,OACWwF,KAAK4Q,MAAM5Q,YAAlB,eAAwB9I,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAOgc,EAAIhc,QAAO,GACpEkc,EAAUD,EAAehR,EAAO,CAAC+Q,KAAQ/Q,IAE/CpK,EAAAA,EAAAA,IAAU,IACLhC,EACHoM,KAAM,IACDpM,EAAOoM,KACV4Q,MAAO,IACFhd,EAAOoM,KAAK4Q,MACf5Q,KAAMiR,UAMd9c,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,QAAEqN,GAAYrN,EAEhBqN,IACGuD,EAAAA,EAAAA,IAAQ,cAAe,CAAEvD,QAAAA,QAIlCvN,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,QAAEqN,GAAYrN,EAEhBqN,GAyLN,SAAuBA,GACrB,MAAM9N,GAAS4G,EAAAA,EAAAA,OAIf5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiM,SAAU,IACLjM,EAAOiM,SACV0P,SAAU,IACL3b,EAAOiM,SAAS0P,SACnB1P,SAAUjM,EAAOiM,SAAS0P,SAAS1P,SAAS3I,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAO2M,EAAQ3M,WAK/EkQ,EAAAA,EAAAA,IAAQ,cAAe,CAAEvD,QAAAA,EAASwP,QAAQ,IAxMxCC,CAAczP,OAIvBvN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,aAAE8a,GAAiB9a,EACnB2b,GAAaC,EAAAA,EAAAA,IAAiBrc,EAAQub,GAC5C,IAAKa,EACH,OAGF,MAAM,WAAEE,EAAF,cAAckB,GAAkBpB,GAEjC/K,EAAAA,EAAAA,IAASmM,EAAsC,sBAAtB,oBAA6C,CAAEjC,aAAAA,EAAce,WAAAA,QAG7F/b,EAAAA,EAAAA,IAAiB,qBAAqBuQ,MAAO9Q,EAAQQ,EAASC,KAAoC,QAChG,MAAM,SAAEgd,GAAahd,EAErB,IAAIid,EAAuB1d,EAAO2d,cAAcF,GAChD,aAAIC,SAAJ,OAAI,EAAsBE,UACxB,QAGF5b,EAAAA,EAAAA,IAAU,IACLhC,EACH2d,cAAe,IACV3d,EAAO2d,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAKjB,MAAMD,QAAsBtM,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDoM,SAAAA,EACAI,YAAaH,EAAuBA,EAAqBzT,QAAU,IAIrEyT,GADA1d,GAAS4G,EAAAA,EAAAA,OACqB+W,cAAcF,GAEvCE,GAeL3b,EAAAA,EAAAA,IAAU,IACLhC,EACH2d,cAAe,IACV3d,EAAO2d,cACV,CAACF,GAAW,CACVG,WAAW,EACX3T,QAAS0T,EAAc1T,QACvB6T,SAAU,IACR,UAAIJ,SAAJ,aAAI,EAAsBI,YACvBH,EAAcG,eAvBvB9b,EAAAA,EAAAA,IAAU,IACLhC,EACH2d,cAAe,IACV3d,EAAO2d,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAyJrBrd,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAEdC,GACG+Z,GAAgB,MAqDzB3J,eAA8BpQ,EAAesN,GAC3C,MAAM5K,QAAeiO,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3Q,MAAAA,EAAOsN,UArDpD+P,IAuDJ,IAAK3a,EACH,OAGF,MAAMpD,GAAS4G,EAAAA,EAAAA,OACT,SAAEyU,EAAF,MAAYR,GAAU7a,EAAOiM,SAE7BE,EAAY/I,EAAO4X,KAAK3X,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAE1C0Z,EAAMK,QACRL,EAAMK,OAAOrS,SAAS1H,IACpB,IAAKgL,EAAUpE,SAAS5G,GAAK,CAC3B,MAAM,MAAE6c,GAAU3C,EAASla,IAAO,GAC9B6c,IAASC,EAAAA,EAAAA,GAAYD,EAAOtd,IAC9ByL,EAAUJ,QAAQ5K,QAM1Ba,EAAAA,EAAAA,KAAU+Y,EAAAA,EAAAA,IACR/a,EACA,SACAoD,EAAO4K,KACP5K,EAAO4X,KACP7O,IAhFE4R,CAAerd,UAKrBH,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAEG,iBAAVC,GACJ+Z,GAAgB,KACnBE,EAAWja,UAKjBH,EAAAA,EAAAA,IAAiB,kBAAmBP,IAClC,MAAM,MAAEU,EAAF,OAASkY,GAAW5Y,EAAOoM,KAAKF,OAEjB,iBAAVxL,GACJ+Z,GAAgB,KACnBE,EAAWja,EAAOkY,UAKxBrY,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAEiN,GAAUjN,GACZ,KAAEuN,GAAShO,EAAOiM,SAASyQ,SAE5BjC,GAAgB,MAiFvB3J,eAAoCpD,EAAeM,GACjD,IAAIhO,GAAS4G,EAAAA,EAAAA,OACb5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiM,SAAU,IACLjM,EAAOiM,SACVyQ,SAAU,IACL1c,EAAOiM,SAASyQ,SACnBhP,MAAAA,MAKN,MAAMtK,QAAeiO,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3D,MAAAA,EAAOM,KAAAA,IAE/DhO,GAAS4G,EAAAA,EAAAA,MAEJxD,GAAUpD,EAAOiM,SAASyQ,SAAShP,QAAUA,IAIlD1N,GAASke,EAAAA,EAAAA,IAAuBle,EAAQ0N,EAAOtK,EAAO6I,SAAU7I,EAAO4K,OAEvEhM,EAAAA,EAAAA,IAAUhC,IAvGRme,CAAqBzQ,EAAOM,UAIhCzN,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACHiM,SAAU,IACLjM,EAAOiM,SACVyQ,SAAU,SAKhBnc,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,oBAAEyb,GAAwBzb,EAChC,MAAO,IACFT,EACHoe,0BAA2BlC,M,aC9X/B,MAAMzB,GAAkBC,EAAAA,EAAAA,KAAU7J,GAAOA,KAAM,KAAK,GAuFpDC,eAAeuN,IAEb,IACIjb,EAFJ1C,EACA,uDADQ,GAAIW,EACZ,uCAD8Cid,EAC9C,uCADmE5Y,EACnE,uCADmF6Y,EACnF,uCADqGC,EACrG,uCAGA,GAAI9Y,EAAM,CACR,MAAM+Y,QAAoBpN,EAAAA,EAAAA,IAAQ,sBAAuB,CACvD3L,KAAAA,EACAhF,MAAAA,EACAW,KAAAA,EACAkQ,MAAOmN,EAAAA,GACPrS,SAAUiS,EACVE,QAAAA,EACAD,QAAAA,IAGF,GAAIE,EAAa,CACf,MAAM,SACJ9c,EADI,MACM6P,EADN,WACamN,EADb,aACyBC,GAC3BH,EAEJrb,EAAS,CACPzB,SAAAA,EACA6P,MAAAA,EACA5F,MAAO,GACP+S,WAAAA,EACAE,SAAUD,SAIdxb,QAAeiO,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C3Q,MAAAA,EACA4d,WAAAA,EACA/M,MAAOmN,EAAAA,GACPrd,KAAAA,EACAkd,QAAAA,EACAC,QAAAA,IAIJ,IAAIxe,GAAS4G,EAAAA,EAAAA,MACb,MAAMkY,GAAqBC,EAAAA,EAAAA,IAA+B/e,GAC1D,IAAKoD,GAAqB,KAAV1C,GAAgBA,IAAUoe,EAExC,YADA9c,EAAAA,EAAAA,KAAUgd,EAAAA,EAAAA,IAAiChf,EAAQ,CAAE2B,UAAU,KAIjE,MAAM,SACJA,EADI,MACM6P,EADN,MACa5F,EADb,WACoB+S,EADpB,SACgCE,GAClCzb,EAEAwI,EAAMpG,SACRxF,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,QAGpD4F,EAAMhM,SACRxF,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,QAGpD7P,EAAS6D,SACXxF,GAASif,EAAAA,EAAAA,IAAYjf,EAAQ2B,IAG/B3B,GAASkf,EAAAA,EAAAA,IACPlf,EACA2B,EACAgd,EACAtd,EACAwd,IAGF7c,EAAAA,EAAAA,IAAUhC,GC/CZ8Q,eAAeqO,EACbzZ,EACArE,EACAgL,GAEA,IADA2E,EACA,wDACA,MAAM5N,QAAeiO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3L,KAAAA,EACArE,KAAAA,EACAkQ,MAA4B,EAArB6N,EAAAA,GACP/S,SAAAA,IAGF,IAAKjJ,EACH,OAGF,MAAM,MACJwI,EADI,MACG4F,EADH,SACU7P,EADV,WACoBgd,EADpB,aACgCC,GAClCxb,EAEEyO,GAAOC,EAAAA,EAAAA,IAAqBnQ,EAAU,MACtC0d,EAAcja,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAM0Y,GAAgBC,EAAAA,EAAAA,IAAyBvf,GAC1Csf,IAILtf,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,OACtD5L,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,GAAS+R,EAAAA,EAAAA,IAAoB/R,EAAQ0F,EAAKvE,GAAI0Q,GAC9C7R,GAASwf,EAAAA,EAAAA,IAA8Bxf,EAAQ0F,EAAKvE,GAAIE,EAAMge,EAAaV,EAAYC,IACvF5c,EAAAA,EAAAA,IAAUhC,GAELgR,GACHmO,EAAkBzZ,EAAMrE,EAAMud,GAAc,KDnJhDre,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWD,EAAOsL,cACpB,MAAE5K,GAAUD,EAEdC,IAAUT,GACPwa,GAAgB,MA0CzB3J,eAA2BpQ,GACzB,MAAM0C,QAAeiO,EAAAA,EAAAA,IAAQ,cAAe,CAAE3Q,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMkY,GAAqBC,EAAAA,EAAAA,IAA+B/e,GAC1D,IAAKoD,IAAW0b,GAAuBpe,IAAUoe,EAE/C,YADA9c,EAAAA,EAAAA,KAAUgd,EAAAA,EAAAA,IAAiChf,EAAQ,CAAE4L,OAAO,KAI9D,MAAM,WACJ6T,EADI,WACQC,EADR,YACoBC,EADpB,YACiCC,GACnCxc,GAEAqc,EAAWja,QAAUma,EAAYna,UACnCxF,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqB,IAAI2N,KAAeE,GAAc,SAG9ED,EAAWla,QAAUoa,EAAYpa,UACnCxF,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB,IAAI4N,KAAeE,GAAc,QAGlF5f,GAASgf,EAAAA,EAAAA,IAAiChf,EAAQ,CAAE4L,OAAO,IAC3D5L,GAASuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAClCyL,aAAc,CACZoU,QAASJ,EAAWpc,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACpC2e,QAASJ,EAAWrc,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEtCqK,cAAe,IACVxL,EAAOsL,aAAaE,cACvBqU,QAASF,EAAYtc,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACrC2e,QAASF,EAAYvc,KAAI,QAAC,GAAElC,GAAH,SAAYA,SAIzCa,EAAAA,EAAAA,IAAUhC,GA5EN+f,CAAYrf,UAKlBH,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,KAAE0J,GAAS1J,EACX8d,EAAUpU,GAAO6V,EAAAA,EAAAA,IAAiB7V,GAAQA,EAEhDnK,GAASuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAClCmK,KAAAA,EACAzJ,MAAO,GACPgL,cAAe,IACV1L,EAAOsL,aAAaI,cACvBjH,KAAM,CACJka,gBAAYre,EACZ2f,SAAU,GACVrB,aAAc,OAIpB5c,EAAAA,EAAAA,IAAUhC,GAEV,MAAM,OAAEC,GAAWD,EAAOsL,aAE1B+S,EAAqB,GAAI,YAAQ/d,EADpBL,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EACDie,EAASpU,OAG7D5J,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KAAY,MACrE,MAAM,MACJC,EADI,cACGgL,EADH,OACkBzL,EADlB,KAC0BkK,GAC5BnK,EAAOsL,aACLiT,EAAUpU,GAAO6V,EAAAA,EAAAA,IAAiB7V,GAAQA,GAC1C,KAAE9I,GAASZ,EAKjB4d,EAAqB3d,EAAOW,EAJNqK,MAAAA,GAAJ,UAAIA,EAAgBrK,UAApB,aAAG,EAAuDud,aAE/D3e,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAEGie,EAASpU,OCxCjE5J,EAAAA,EAAAA,IAAiB,2BAA4BP,IAC3C,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7Cgf,GAAgBY,EAAAA,EAAAA,IAAwBlgB,GAC9C,IAAK0F,IAAS4Z,IAAkBpf,EAC9B,OAGF,MAAM,MAAEQ,EAAF,QAAS4L,GAAYgT,EACrBjT,EAAWC,MAAAA,OAAH,EAAGA,EAASsS,aAE1B,IAAIuB,EACJ,GAAIjgB,IAAakB,EAAAA,GAAgB,CAC/B,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAASC,GACrDigB,EAAeta,MAAAA,OAAH,EAAGA,EAAYsa,cA8C/BrP,eACEpL,EACAxF,EACAigB,EACAzf,EACA2L,GAEA,IAAK3L,EACH,OAGF,MAAM0C,QAAeiO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3L,KAAAA,EACArE,KAAM,OACNX,MAAAA,EACAyf,aAAAA,EACA5O,MAAO6O,EAAAA,GACP/T,SAAAA,IAGF,IAAKjJ,EACH,OAGF,MAAM,MACJwI,EADI,MACG4F,EADH,SACU7P,EADV,WACoBgd,EADpB,aACgCC,GAClCxb,EAEEyO,GAAOC,EAAAA,EAAAA,IAAqBnQ,EAAU,MACtC0d,EAAcja,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAM0Y,GAAgBY,EAAAA,EAAAA,IAAwBlgB,GACzCsf,GAAiB5e,IAAU4e,EAAc5e,QAI9CV,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,OACtD5L,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,GAAS+R,EAAAA,EAAAA,IAAoB/R,EAAQ0F,EAAKvE,GAAI0Q,GAC9C7R,GAASqgB,EAAAA,EAAAA,IAA6BrgB,EAAQ0F,EAAKvE,GAAIjB,EAAUmf,EAAaV,EAAYC,IAC1F5c,EAAAA,EAAAA,IAAUhC,IArFLsgB,CAAmB5a,EAAMxF,EAAUigB,EAAczf,EAAO2L,OAG/D9L,EAAAA,EAAAA,IAAiB,4BAA6BP,IAC5C,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1Bqf,GAAgBC,EAAAA,EAAAA,IAAyBvf,GAE/C,IAAK0F,IAAS4Z,EACZ,OAGF,MAAQiB,YAAalf,EAAf,cAAqBqK,GAAkB4T,EACvCkB,EAAiBnf,GAAQqK,GAAiBA,EAAcrK,GACxDgL,EAAWmU,MAAAA,OAAH,EAAGA,EAAgB5B,aAE5Bvd,GAIA8d,EAAkBzZ,EAAMrE,EAAMgL,OAGrC9L,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UAAEggB,GAAchgB,GAEhB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GA8FPoL,eAAoCpL,EAAe+a,GACjD,MAAMlc,QAAkB8M,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D3L,KAAAA,EACA+a,UAAAA,IAGGlc,IAILmc,EAAAA,EAAAA,MAAaza,aAAa,CACxBhG,OAAQyF,EAAKvE,GACboD,UAAAA,IAtGGoc,CAAqBjb,EAAM+a,OC1ElClgB,EAAAA,EAAAA,IAAiB,mBAAmBuQ,MAAO9Q,EAAQQ,EAASC,KAC1D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAIF,GAAID,EAAOgN,WAAW2G,WAAaiN,EAAAA,GAAAA,WACjC,OAGF,MAAM,SAAEC,GAAapgB,EAErBT,GAAS8gB,EAAAA,EAAAA,IAAyB9gB,EAAQ4gB,EAAAA,GAAAA,YAC1C5gB,GAAS+gB,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CAAE+gB,yBAAqB1gB,KACjE0B,EAAAA,EAAAA,IAAUhC,GAEV,MAAMghB,QAA4B3P,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEwP,SAAAA,IAEjE7gB,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS8gB,EAAAA,EAAAA,IACP9gB,EAAQghB,EAAsBJ,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,OAE9D5gB,GAAS+gB,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CAAE+gB,oBAAAA,KAC5Chf,EAAAA,EAAAA,IAAUhC,OAGZO,EAAAA,EAAAA,IAAiB,oBAAoBuQ,MAAO9Q,EAAQQ,EAASC,KAC3D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAI0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACxC,IAAKA,IAAWyF,EACd,OAGF,MAAM,SAAEmb,GAAapgB,EAKrB,GAHAT,GAAS8gB,EAAAA,EAAAA,IAAyB9gB,EAAQ4gB,EAAAA,GAAAA,aAC1C5e,EAAAA,EAAAA,IAAUhC,IAENihB,EAAAA,EAAAA,IAAiBvb,GAAO,CAG1B,GAFAA,QAAa2L,EAAAA,EAAAA,IAAQ,cAAe3L,IAE/BA,EACH,OAGFlF,EAAQ0B,SAAS,CAAEf,GAAIuE,EAAKvE,KAG9B,MAAMiC,QAAeiO,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE3L,KAAAA,EAAMmb,SAAAA,IAExD7gB,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS8gB,EAAAA,EAAAA,IAAyB9gB,EAAQoD,EAASwd,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,OACjF5gB,GAAS+gB,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CAAE+gB,yBAAqB1gB,KACjE0B,EAAAA,EAAAA,IAAUhC,OAGZO,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjD0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCA,GAAWyF,IAIhB2L,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE3L,KAAAA,QAGjCnF,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,EAASC,KAC7D,MAAM,OAAER,EAAF,OAAUihB,GAAWzgB,GAE3BuB,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CAAEkhB,cAAeD,SAG9D3gB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OAAER,EAAF,OAAUihB,GAAWzgB,EAErB2gB,EAASF,EAAS,CAAEG,WAAY,CAAEH,OAAAA,IAAa,CAAEG,gBAAY/gB,IAEnE0B,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQmhB,QAG7C7gB,EAAAA,EAAAA,IAAiB,2BAA2BuQ,MAAO9Q,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,QACIqhB,EADJ,UACaC,EADb,MACwBhQ,GAC1B9Q,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BuhB,GAAQtH,EAAAA,EAAAA,IAAWla,EAAQshB,GAAWthB,EAAO+X,eACnD,IAAKF,IAAS2J,EAAO,OAErB,MAAMpe,QAAeiO,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDwG,KAAAA,EAAM2J,MAAAA,EAAOD,UAAAA,EAAWhQ,MAAAA,IAE1B,IAAKnO,EACH,OAGF,MAAMge,EAASG,EAAY,CAAEE,eAAgBre,GAAW,CAAEse,QAASte,IAEnEpB,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,KAAiBna,EAAAA,EAAAA,MAAa3G,EAAQmhB,QAGlD7gB,EAAAA,EAAAA,IAAiB,0BAA0BuQ,MAAO9Q,EAAQQ,EAASC,KACjE,MAAM,OACJR,EADI,KACI0hB,EADJ,UACUJ,EADV,WACqBK,EADrB,WACiCC,EADjC,gBAC6CC,EAD7C,MAC8D9D,GAChEvd,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK4X,EAAM,OAEX,MAAMzU,QAAeiO,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDwG,KAAAA,EACA8J,KAAAA,EACAJ,UAAAA,EACAK,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAK5a,EACH,OAGF,MAAM,UAAE2e,EAAF,UAAaC,GAAc5e,EAG3Bse,IADN1hB,GAAS4G,EAAAA,EAAAA,OACeoG,WAAWtE,SAASzI,GAAQyhB,SAAW,IAC5Dpe,QAAQ2e,GAAYA,EAAQN,OAASI,EAAUJ,OAC5CF,EAAiB,IAAKzhB,EAAOgN,WAAWtE,SAASzI,GAAQwhB,gBAAkB,IAE7EO,EAAUT,UACZE,EAAe1V,QAAQiW,GAEvBN,EAAQzd,KAAK+d,IAGfhgB,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCyhB,QAAAA,EACAD,eAAAA,SAIJlhB,EAAAA,EAAAA,IAAiB,oBAAoBuQ,MAAO9Q,EAAQQ,EAASC,KAC3D,MAAM,OACJR,EADI,WACI2hB,EADJ,WACgBC,EADhB,gBAC4BC,EAD5B,MAC6C9D,GAC/Cvd,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK4X,EAAM,OAEX,MAAMzU,QAAeiO,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CwG,KAAAA,EACA+J,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAK5a,EACH,OAIF,MAAMse,GADN1hB,GAAS4G,EAAAA,EAAAA,OACcoG,WAAWtE,SAASzI,GAAQyhB,SAAW,IAC9D1f,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCyhB,QAAS,IAAIA,EAASte,UAI1B7C,EAAAA,EAAAA,IAAiB,4BAA4BuQ,MAAO9Q,EAAQQ,EAASC,KAAY,QAC/E,MAAM,OACJR,EADI,KACI0hB,GACNlhB,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK4X,EAAM,OAMX,UAJqBxG,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDwG,KAAAA,EACA8J,KAAAA,IAGA,OAIF,MAAMO,GADNliB,GAAS4G,EAAAA,EAAAA,OACsBoG,WAAWtE,SAASzI,IACnD+B,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCyhB,QAASQ,MAAAA,GAAF,UAAEA,EAAiBR,eAAnB,aAAE,EAA0Bpe,QAAQ4d,GAAWA,EAAOS,OAASA,IACtEF,eAAgBS,MAAAA,GAAF,UAAEA,EAAiBT,sBAAnB,aAAE,EAAiCne,QAAQ4d,GAAWA,EAAOS,OAASA,WAIxFphB,EAAAA,EAAAA,IAAiB,oCAAoCuQ,MAAO9Q,EAAQQ,EAASC,KAC3E,MAAM,OACJR,EADI,QACIqhB,GACN7gB,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BuhB,GAAQtH,EAAAA,EAAAA,IAAWla,EAAQshB,GAAWthB,EAAO+X,eAC9CF,GAAS2J,SAEOnQ,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DwG,KAAAA,EACA2J,MAAAA,MAMFxhB,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCwhB,eAAgB,WAIpBlhB,EAAAA,EAAAA,IAAiB,2BAA2BuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MAC9E,MAAM,OACJR,EADI,KACI0hB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC7Q,GACtC9Q,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BoiB,GAAanI,EAAAA,EAAAA,IAAWla,EAAQoiB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMjf,QAAeiO,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDwG,KAAAA,EACA8J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACA9Q,MAAAA,IAEF,IAAKnO,EACH,OAIF,MAAMkf,EAAiB,WADvBtiB,GAAS4G,EAAAA,EAAAA,OACwBoG,WAAWtE,SAASzI,UAA9B,aAAG,EAAoCohB,WACzDiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,IAIpE3f,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCohB,WAAY,IACPiB,EACHC,UAAWnf,UAKjB7C,EAAAA,EAAAA,IAAiB,4BAA4BuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MAC/E,MAAM,OACJR,EADI,KACI0hB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC7Q,GACtC9Q,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BoiB,GAAanI,EAAAA,EAAAA,IAAWla,EAAQoiB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMjf,QAAeiO,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDwG,KAAAA,EACA8J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACA9Q,MAAAA,EACAiR,aAAa,IAEf,IAAKpf,EACH,OAIF,MAAMkf,EAAiB,WADvBtiB,GAAS4G,EAAAA,EAAAA,OACwBoG,WAAWtE,SAASzI,UAA9B,aAAG,EAAoCohB,WACzDiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,IAIpE3f,EAAAA,EAAAA,KAAU+e,EAAAA,EAAAA,IAAiB/gB,EAAQC,EAAQ,CACzCohB,WAAY,IACPiB,EACHG,WAAYrf,UAKlB7C,EAAAA,EAAAA,IAAiB,wBAAwBuQ,MAAO9Q,EAAQQ,EAASC,KAC/D,MAAM,OACJR,EADI,WACIkiB,EADJ,aACgBC,EADhB,MAC8B7Q,GAChC9Q,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BoiB,GAAanI,EAAAA,EAAAA,IAAWla,EAAQoiB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMjf,QAAeiO,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDwG,KAAAA,EACAsK,WAAAA,EACAE,WAAAA,EACA9Q,MAAAA,EACAiR,aAAa,IAEVpf,IAILpD,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAEyiB,aAActf,UAGvD7C,EAAAA,EAAAA,IAAiB,uBAAuBuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MAC1E,MAAM,OACJR,EADI,OACIyM,EADJ,WACYiW,GACdliB,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B8Y,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ0M,GAChC,IAAKmL,IAASkB,EAAM,OAOpB,UALqB1H,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDwG,KAAAA,EACAkB,KAAAA,EACA4J,WAAAA,IAEW,OAEb3iB,GAAS4G,EAAAA,EAAAA,MACT,MAAMgc,GAAajd,EAAAA,EAAAA,IAAW3F,EAAQC,GACjC2iB,IAEL5gB,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CACnCyiB,aAAY,UAAEE,EAAWF,oBAAb,aAAE,EAAyBpf,QAAQuf,GAAaA,EAASnW,SAAWA,WAIpFnM,EAAAA,EAAAA,IAAiB,2BAA2BuQ,MAAO9Q,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,WACI0iB,EADJ,KACgBhB,GAClBlhB,EACEoX,GAAOlS,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK4X,EAAM,OAOX,UALqBxG,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDwG,KAAAA,EACA8K,WAAAA,EACAhB,KAAAA,IAEW,OAEb3hB,GAAS4G,EAAAA,EAAAA,MACT,MAAMgc,GAAajd,EAAAA,EAAAA,IAAW3F,EAAQC,GACjC2iB,IAEL5gB,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CACnCyiB,aAAc,GACdvI,SAAU,IACLyI,EAAWzI,SACd2I,mBAAoB,GACpBC,gBAAiB,UAKvBxiB,EAAAA,EAAAA,IAAiB,uBAAuBuQ,MAAO9Q,EAAQQ,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,SAEgB2L,EAAAA,EAAAA,IAAQ,sBAAuB3L,KAGpD1D,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,KAAWlQ,EAAAA,EAAAA,MAAa3G,EAAQ,CACxC+iB,cAAU1iB,Q,cC9Ud,IAAI2iB,EAoKJ,SAASC,EAAgBxd,GACvB,OAAO2L,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B3L,KAAAA,EACAxF,SAAUkB,EAAAA,GACViL,SAAU3G,EAAK6S,uBACftH,YAAarG,KAAKuG,MAAMC,EAAAA,GAAqB,GAAK,GAClDG,MAAOH,EAAAA,MAxKX7Q,EAAAA,EAAAA,IAAiB,QAAQ,KACnB4iB,EAAAA,IAEFC,QAAQC,IAAI,kBAGVJ,GACFvb,aAAaub,IAGfjhB,EAAAA,EAAAA,IAAU,KAAK4E,EAAAA,EAAAA,MAAa0c,WAAW,IAGvCL,EAAuBvc,OAAOC,YAAW,MACvC3E,EAAAA,EAAAA,IAAU,KAAK4E,EAAAA,EAAAA,MAAa0c,WAAW,IACvCL,OAAuB3iB,IAnBI,MAsB7B,MAAM,aAAEijB,EAAF,uBAAgBC,IAA2B9C,EAAAA,EAAAA,MAEjD6C,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAW7S,gBAsBfA,iBACE,IAAI8S,GAAoB,EAEpB5jB,GAAS4G,EAAAA,EAAAA,MAGb,MACMid,EADeze,OAAOC,KAAKrF,EAAO2B,SAAS+G,UACb7E,QAAwC,CAACC,EAAK7D,KAChF6D,EAAI7D,GAAU,GACd6D,EAAI7D,GAAQ2W,OAAQK,EAAAA,EAAAA,IAAYjX,EAAQC,EAAQmB,EAAAA,IAChD0C,EAAI7D,GAAQsX,WAAYC,EAAAA,EAAAA,IAAgBxX,EAAQC,EAAQmB,EAAAA,IACxD0C,EAAI7D,GAAQ6jB,cAAeC,EAAAA,EAAAA,GAAmB/jB,EAAQC,EAAQmB,EAAAA,IAEvD0C,IACN,KAEK7D,OAAQ+jB,EAAe9jB,SAAU+jB,IAAoB9jB,EAAAA,EAAAA,IAAyBH,IAAW,GAC3FkkB,EAAcF,EAAgBhkB,EAAO4L,MAAMiG,KAAKmS,QAAiB1jB,EACvE,GAAI0jB,GAAiBE,EAAa,CAChC,MAAM9gB,QAAe8f,EAAgBgB,GACrClkB,GAAS4G,EAAAA,EAAAA,MACT,MAAQ3G,OAAQkkB,IAAqBhkB,EAAAA,EAAAA,IAAyBH,IAAW,GACnE6F,EAAaoe,IAAmBne,EAAAA,EAAAA,IAAiB9F,EAAQgkB,EAAeC,GAE9E,GAAI7gB,GAAU+gB,IAAqBH,EAAe,CAChD,MAAMI,EAAyBpkB,EAAO2B,SAAS+G,SAASsb,GAClDtS,EAAgBsS,IAAkB9Z,EAAAA,GACpClK,EAAOgK,qBAAqB3G,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEoO,EAAe,GAAoBC,OAAOxO,EAAOzB,SAAU+P,GAC3DG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCU,EAAYjN,OAAOC,KAAKwM,GAAMxO,IAAIoC,QAcxC,GAZAzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,KAId1I,GAAS+R,EAAAA,EAAAA,IAAoB/R,EAAQgkB,EAAenS,GACpD7R,GAASiS,EAAAA,EAAAA,IAAgBjS,EAAQgkB,EAAe5iB,EAAAA,GAAgBiR,GAChErS,GAAS6S,EAAAA,EAAAA,IAAuB7S,EAAQgkB,EAAe5iB,EAAAA,GAAgBiR,GAEnE4R,GAAmBpe,GAAcA,EAAWwe,gBAAiB,CAC/D,MAAM,gBAAEA,GAAoBxe,EACtBye,EAA+BtkB,EAAO2B,SAAS+G,SAAS2b,GACxDE,QAAqBrB,EAAgBljB,EAAO4L,MAAMiG,KAAKwS,IAC7D,GAAIE,EAAc,CAChB,MAAMC,GAAa1S,EAAAA,EAAAA,IAAqByS,EAAa5iB,SAAU,MACzD8iB,EAAkBrf,OAAOC,KAAKmf,GAAYnhB,IAAIoC,QAEpDzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,IACL1I,EAAO2B,SAAS+G,SACnB,CAAC7C,EAAWwe,iBAAkB,CAC5BxS,KAAM2S,EACNE,YAAa,CACX,CAACtjB,EAAAA,IAAiB,IACZkjB,MAAAA,OAAJ,EAAIA,EAA8BI,YAAYtjB,EAAAA,IAC9CiR,UAAWoS,EACX/f,YAAa+f,EACblS,iBAAajS,KAInB,CAAC0jB,GAAgB,IACZhkB,EAAO2B,SAAS+G,SAASsb,GAC5BU,YAAa,IACR1kB,EAAO2B,SAAS+G,SAASsb,GAAeU,YAC3C,CAACT,GAAkB,IACbG,MAAAA,OAAJ,EAAIA,EAAwBM,YAAYT,GACxC1R,iBAAajS,SAU7BN,GAAS2kB,EAAAA,EAAAA,IAAY3kB,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOwI,MAAO,OAChE5L,GAAS4kB,EAAAA,EAAAA,IAAY5kB,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,OAChExR,GAASoS,EAAAA,EAAAA,IAAkBpS,EAAQgkB,EAAe5gB,EAAOqO,aAEzDmS,GAAoB,GAInBA,IACH5jB,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,MAMhBtD,OAAOC,KAAKwe,GAAgBhb,SAAS5I,IACnCD,GAAS6kB,EAAAA,EAAAA,IAAa7kB,EAAQC,EAAQmB,EAAAA,GAAgByiB,EAAe5jB,QAGvE+B,EAAAA,EAAAA,IAAUhC,GAEV,MAAQC,OAAQ6kB,EAAavgB,UAAWwgB,GAAmB/kB,EAAOsG,YAC9Dwe,GAAeC,KAAmBxV,EAAAA,EAAAA,IAAkBvP,EAAQ8kB,EAAaC,KAC3ErE,EAAAA,EAAAA,MAAasE,mBAtILC,IAENjjB,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACHse,aAAc5O,KAAKC,MACnB+M,WAAW,IAGTH,EAAAA,IAEFC,QAAQC,IAAI,oBAGd8B,EAAAA,EAAAA,MACA5B,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/CrS,EAAAA,EAAAA,IAAQ,oBACbmS,WCxENjjB,EAAAA,EAAAA,IAAiB,cAAcuQ,MAAO9Q,EAAQQ,EAASC,KACrD,MAAM,OACJR,EADI,OAEJ0X,EAFI,YAGJC,GACEnX,EACJ,IAAKR,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,aAAc,CACzCwG,KAAMnS,EACNiS,OAAAA,EACAC,YAAAA,IAGFpX,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACL0U,EAAAA,EAAAA,IAAe,2BACf,iFAIRvX,EAAAA,EAAAA,IAAiB,sBAAsBuQ,MAAO9Q,EAAQQ,EAASC,KAC7D,MAAM,OACJR,EADI,OAEJ0X,EAFI,YAGJC,EAHI,MAIJwN,GACE3kB,EACJ,IAAKR,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,IAAS0f,EACZ,OAGF,MAAMhiB,QAAeiO,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDwG,KAAMnS,EACN0f,MAAAA,EACAzN,OAAAA,EACAC,YAAAA,IAGFpX,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACL0U,EAAAA,EAAAA,IAAe,2BACf,iFAIRvX,EAAAA,EAAAA,IAAiB,sBAAsBuQ,UACrC,MAAM1N,QAAeiO,EAAAA,EAAAA,IAAQ,uBACxBjO,IAILpB,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACHye,eAAgB,CACdC,OAAQliB,EAAOmiB,eACfC,cAAepgB,OAAOC,KAAKjC,EAAOmiB,gBAClCE,QAASriB,EAAOqiB,eAKtBllB,EAAAA,EAAAA,IAAiB,0BAA0BuQ,MAAO9Q,EAAQQ,EAASC,KACjE,MAAM,KAAEuN,GAASvN,EAGjB,UADqB4Q,EAAAA,EAAAA,IAAQ,yBAA0BrD,GAErD,OAGFhO,GAAS4G,EAAAA,EAAAA,MAET,MAAQ,CAACoH,GAAO0X,KAAoBC,GAAgB3lB,EAAOqlB,eAAeC,QAE1EtjB,EAAAA,EAAAA,IAAU,IACLhC,EACHqlB,eAAgB,CACdC,OAAQK,EACRH,cAAexlB,EAAOqlB,eAAeG,cAAcliB,QAAQsiB,GAAOA,IAAO5X,WAK/EzN,EAAAA,EAAAA,IAAiB,8BAA8BuQ,MAAAA,IAE7C,UADqBO,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMwU,GADN7lB,GAAS4G,EAAAA,EAAAA,OACyBye,eAAeG,cAC9C1c,MAAMkF,GAAShO,EAAOqlB,eAAeC,OAAOtX,GAAM8X,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiB/lB,EAAOqlB,eAAeC,OAAOO,IAEpD7jB,EAAAA,EAAAA,IAAU,IACLhC,EACHqlB,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,UAKtBtlB,EAAAA,EAAAA,IAAiB,yBAAyBuQ,MAAO9Q,EAAQQ,EAASC,KAChE,MAAM,KAAEuN,EAAF,gBAAQgY,GAAoBvlB,QACb4Q,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDrD,KAAAA,EACAgY,gBAAAA,MAOFhmB,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,IAAU,IACLhC,EACHqlB,eAAgB,IACXrlB,EAAOqlB,eACVC,OAAQ,IACHtlB,EAAOqlB,eAAeC,OACzB,CAACtX,GAAO,IACHhO,EAAOqlB,eAAeC,OAAOtX,GAChCgY,gBAAAA,YAOVzlB,EAAAA,EAAAA,IAAiB,oBAAoBuQ,MAAO9Q,EAAQQ,EAASC,KAC3D,MAAM,KAAEwlB,GAASxlB,QAEI4Q,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE4U,KAAAA,MAMnDjmB,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,IAAU,IACLhC,EACHqlB,eAAgB,IACXrlB,EAAOqlB,eACVI,QAASQ,SCnJf,MAAMC,GAA+BtV,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAAO,GAElEsV,GAAwBzL,EAAAA,EAAAA,KAAU7J,GAAOA,KAAM,KAAK,GClBnD,SAASuV,EACdpmB,EAAqB6gB,EAAkBwF,GAEvC,MAAO,IACFrmB,EACHsmB,WAAY,IACPtmB,EAAOsmB,WACVC,WAAY,IACPvmB,EAAOsmB,WAAWC,WACrB,CAAC1F,GAAWwF,KAMb,SAASG,EAA2BxmB,EAAqB4d,GAC9D,MAAO,IACF5d,EACHsmB,WAAY,IACPtmB,EAAOsmB,WACV1I,UAAAA,KDANrd,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAEiM,GAAWjM,EACbsY,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ0M,GAChC,IAAKqM,EACH,OAGF,MAAM,GAAE5X,EAAF,WAAMmb,GAAevD,EAE3BmN,GAA6B,KAAM7U,EAAAA,EAAAA,IAAQ,gBAAiB,CAAElQ,GAAAA,EAAImb,WAAAA,UAGpE/b,EAAAA,EAAAA,IAAiB,YAAYuQ,MAAO9Q,EAAQQ,EAASC,KACnD,MAAM,OAAEiM,GAAWjM,EACbsY,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ0M,GAChC,IAAKqM,EACH,OAGF,MAAM3V,QAAeiO,EAAAA,EAAAA,IAAQ,aAAc,CAAEG,MAAO,CAACuH,KACrD,IAAK3V,EACH,OAGF,MAAM,MAAEoO,EAAF,iBAASiV,GAAqBrjB,EAEpCpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS4kB,EAAAA,EAAAA,IAAY5kB,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACzDxR,GAAS0mB,EAAAA,EAAAA,IAAoB1mB,EAAQ,IAChCA,EAAOwR,MAAMmV,gBACbF,KAELzkB,EAAAA,EAAAA,IAAUhC,OAGZO,EAAAA,EAAAA,IAAiB,gBAAiBP,IAChC,MAAQ4mB,UAAU,gBAAEC,IAAsB7mB,IAErC6mB,IAAmBzc,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAAoBwc,EAzChC,KAkGnC/V,iBACE,MAAM1N,QAAeiO,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKjO,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOiK,GAAUpO,EAEvB,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb5G,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,EAAS,IACJA,EACH4mB,SAAU,IACL5mB,EAAO4mB,SACV9G,QAASvY,EACTsf,iBAAiBzc,EAAAA,EAAAA,GAAcpK,EAAOqK,qBAG1CrI,EAAAA,EAAAA,IAAUhC,GA1EH8mB,OAITvmB,EAAAA,EAAAA,IAAiB,mBAAmB,MAyEpCuQ,iBACE,MAAMiW,QAAoB1V,EAAAA,EAAAA,IAAQ,oBAClC,IAAK0V,EACH,OAGF,IAAI/mB,GAASkS,EAAAA,EAAAA,KAAStL,EAAAA,EAAAA,OAAakL,EAAAA,EAAAA,IAAqBiV,EAAYvV,MAAO,OAC3ExR,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBiV,EAAYnb,MAAO,OAGlE,MAAMob,EAAoBjO,GAAmBA,EAAKkO,UAAYlO,EAAKmO,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAYvV,MAAM9N,MAAK,CAAC2V,EAAGC,IAC7C6N,EAASI,QAAQP,EAAiB3N,GAAI2N,EAAiB1N,MACtDhW,QAAQyV,IAAUA,EAAKyO,UAE1BxlB,EAAAA,EAAAA,IAAU,IACLhC,EACH+mB,YAAa,CACXjH,QAASwH,EAAYjkB,KAAK0V,GAASA,EAAK5X,QA5FvCsmB,OAGPlnB,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7B8Q,EAAAA,EAAAA,IAAQ,wBAGf9Q,EAAAA,EAAAA,IAAiB,mBAAmBuQ,MAAAA,IAAkB,UACpD,MAAM,OAAE7Q,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjD+Y,EAAO9Y,GAASia,EAAAA,EAAAA,IAAWla,EAAQC,QAAUK,EACnD,IAAKyY,IAAQ2O,EAAAA,EAAAA,IAAU3O,IAAnB,UAA4BA,EAAK4O,mBAAjC,OAA4B,EAAkBC,cAChD,OAGF,MAAMjd,EAAK,UAAGoO,EAAK4O,mBAAR,aAAG,EAAkBhd,MAC1BvH,QAAeiO,EAAAA,EAAAA,IAAQ,mBAAoB0H,EAAK5X,GAAI4X,EAAKuD,WAAa3R,GAC5E,IAAKvH,EACH,OAGF,MAAM,MAAEwI,EAAF,QAASiU,EAAT,cAAkB+H,GAAkBxkB,EAE1CpD,GAAS4G,EAAAA,EAAAA,MACLgF,EAAMpG,SACRxF,GAASmS,EAAAA,EAAAA,IAASnS,GAAQ8R,EAAAA,EAAAA,IAAqBlG,EAAO,QAExD5L,GAAS6nB,EAAAA,EAAAA,IAAW7nB,EAAQ+Y,EAAK5X,GAAI,CACnCwmB,YAAa,CACXhd,MAAOkV,EAAQra,OAASqa,EAAQA,EAAQra,OAAS,GAAK,IACtD+B,KAAKuR,EAAAA,EAAAA,MAAQ,UAAAC,EAAK4O,mBAAL,eAAkBpgB,MAAO,IAAIqK,OAAOiO,IACjD+H,cAAAA,MAIJ5lB,EAAAA,EAAAA,IAAUhC,OAGZO,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OACJiM,EADI,QACIrG,GAAU,EADd,UACqB6gB,EADrB,SACgCD,EADhC,uBAC0Ca,GAC5CrnB,GAyDNqQ,eACEpE,EACArG,EACA6gB,EACAD,EACAa,GAEA,IAAI9nB,GAAS4G,EAAAA,EAAAA,MACb,MAAMmS,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ0M,GAChC,IAAKqM,EACH,OAOF,IAAI3V,EACJ,IALAsd,EAAAA,EAAAA,MAAaqH,qBAAqB,CAAE9nB,OAAQyM,EAAQrG,QAAAA,KAEpDrE,EAAAA,EAAAA,KAAU8e,EAAAA,EAAAA,KAAyBla,EAAAA,EAAAA,MAAaga,EAAAA,GAAAA,cAG3C7H,EAAKiP,WAAajP,EAAKkP,YAC1B7kB,QAAeiO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6W,MAAOnP,EAAKkP,YAAaf,UAAAA,EAAWD,SAAAA,QACzE,CACL,MAAM,GAAE9lB,EAAF,WAAMmb,GAAevD,EAC3B3V,QAAeiO,EAAAA,EAAAA,IAAQ,gBAAiB,CACtClQ,GAAAA,EACAmb,WAAAA,EACA2L,YAAa,GACbf,UAAAA,EACAD,SAAAA,EACAa,uBAAAA,IAIJ9nB,GAAS4G,EAAAA,EAAAA,MACLxD,KACFsd,EAAAA,EAAAA,MAAayH,iBAAiB,CAAEloB,OAAQyM,KAExC1K,EAAAA,EAAAA,KAAU6lB,EAAAA,EAAAA,IACR7nB,EACA+Y,EAAK5X,GACL,CACE+lB,UAAAA,EACAD,SAAAA,MAKNjnB,GAAS8gB,EAAAA,EAAAA,IAAyB9gB,EAAQ4gB,EAAAA,GAAAA,UAC1C5gB,GAAS6M,EAAAA,EAAAA,IAAsB7M,IAC/BgC,EAAAA,EAAAA,IAAUhC,GAvGLooB,CAAc1b,EAAQrG,EAAS6gB,EAAWD,EAAUa,OAG3DvnB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OAAEiM,GAAWjM,GAsGrBqQ,eAA6BpE,GAC3B,MAAM1M,GAAS4G,EAAAA,EAAAA,MACTmS,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ0M,GAEhC,IAAKqM,EACH,OAGF,MAAM,GAAE5X,EAAF,WAAMmb,GAAevD,QAErB1H,EAAAA,EAAAA,IAAQ,gBAAiB,CAAElQ,GAAAA,EAAImb,WAAAA,IA9GhC+L,CAAc3b,OAiHrBnM,EAAAA,EAAAA,IAAiB,qBAAqBuQ,MAAO9Q,EAAQQ,EAASC,KAC5D,MAAM,UAAE6nB,GAAc7nB,EAChB8nB,GAAYC,EAAAA,EAAAA,IAASF,GAErBvP,EAAOwP,GAAYrO,EAAAA,EAAAA,IAAWla,EAAQsoB,QAAahoB,EACnDoF,EAAQ6iB,OAA4CjoB,GAAhCqF,EAAAA,EAAAA,IAAW3F,EAAQsoB,GAC7C,IAAKvP,IAASrT,EACZ,OAGF,MAAMtC,QAAeiO,EAAAA,EAAAA,IAAQ,qBAAsB0H,EAAMrT,GACpDtC,GAAWA,EAAOqlB,SAIvBzoB,GAAS4G,EAAAA,EAAAA,MAEL2hB,EACFvoB,GAAS6nB,EAAAA,EAAAA,IAAW7nB,EAAQsoB,EAAW,CAAEG,OAAQrlB,EAAOqlB,UAExDzoB,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAQ,OAC9DxR,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQsoB,EAAW,CAAEG,OAAQrlB,EAAOqlB,WAG1DzmB,EAAAA,EAAAA,IAAUhC,QAGZO,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAEbC,GAEAylB,GAAsB,MAgC7BrV,eAA2BpQ,GACzB,MAAM0C,QAAeiO,EAAAA,EAAAA,IAAQ,cAAe,CAAE3Q,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMkY,EAAqB9e,EAAO0oB,WAAWhoB,MAE7C,IAAK0C,IAAW0b,GAAuBpe,IAAUoe,EAE/C,YADA9c,EAAAA,EAAAA,KAAU2mB,EAAAA,EAAAA,IAA+B3oB,GAAQ,IAInD,MAAM,WAAE0f,EAAF,YAAcE,GAAgBxc,EAEpC,IAAIqJ,EACAD,EACAkT,EAAWla,SACbxF,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB4N,EAAY,OAC3DjT,EAAeiT,EAAWrc,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAExCye,EAAYpa,SACdxF,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB8N,EAAa,OAC5DpT,EAAgBoT,EAAYvc,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAG9CnB,GAAS2oB,EAAAA,EAAAA,IAA+B3oB,GAAQ,GAChDA,GAASuM,EAAAA,EAAAA,IAAiBvM,EAAQ,CAAEyM,aAAAA,EAAcD,cAAAA,KAElDxK,EAAAA,EAAAA,IAAUhC,GA1DR4oB,CAAYloB,UAIhBH,EAAAA,EAAAA,IAAiB,iBAAiBuQ,MAAO9Q,EAAQQ,EAASC,KACxD,MAAQwnB,YAAaC,EAAf,UAAsBhB,EAAtB,SAAiCD,GAAaxmB,EAE9C2C,QAAeiO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6W,MAAAA,EAAOhB,UAAAA,EAAWD,SAAAA,IAC7D7jB,GAQL5C,EAAQ0B,SAAS,CAAEf,GAAIiC,KAEvBpB,EAAAA,EAAAA,KAAU6K,EAAAA,EAAAA,KAAsBjG,EAAAA,EAAAA,SAT9BpG,EAAQgJ,iBAAiB,CACvBjG,QAASN,EAAAA,GAA4B,2CAW3C1C,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbooB,GAAaL,EAAAA,EAAAA,IAASvoB,IAAUia,EAAAA,EAAAA,IAAWla,EAAQC,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACjF4oB,IAIAxX,EAAAA,EAAAA,IAAQ,aAAcwX,M,cE/R7B,MAAMC,EAAkB5U,EAAAA,IAAU6U,EAAAA,GAEnB,MAAMC,EAGnBC,YAAoBC,EAA2BC,G,QAA6B,KAAxDD,SAAAA,EAAwD,KAA7BC,OAAAA,E,OAA6B,G,EAAA,oB,sBAAA,K,uDAAA,K,KAG5EC,kBAMS,MALFN,IAELO,KAAKC,UAAY5iB,OAAO6iB,KAAK,mBAAejpB,EAAW+oB,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUE,OAEf,UAAAH,KAAKF,cAAL,cAAAE,OAIJE,KAAKpa,GACH,GAAIka,KAAKC,UAKP,OAJAD,KAAKC,UAAWG,SAASC,KAAOva,EAChCka,KAAKC,UAAWK,aAChBN,KAAKC,eAAYhpB,GAKnB,IAAKwoB,EAAiB,CACpB,MAAMc,EAAQljB,OAAO6iB,KAAKpa,OAAK7O,EAAW+oB,KAAKH,UAGxC,MAFHU,EACFA,EAAMD,QAEN,UAAAN,KAAKF,cAAL,cAAAE,OAKNQ,gBAAgB,MACd,UAAAR,KAAKC,iBAAL,SAAgBQ,QAChBT,KAAKC,eAAYhpB,GCnBrB,MAAMypB,EAAY,4BAEZC,GAAwBpZ,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAigB1DC,eAAemZ,EAAsBta,EAAcua,SAC3C7Y,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE1B,IAAAA,EAAKua,UAAAA,UACxCC,IAGRrZ,eAAeqZ,EAAmBnc,GAChC,MAAM5K,QAAeiO,EAAAA,EAAAA,IAAQ,qBAAsB,CAAErD,KAAAA,IACrD,IAAK5K,EACH,OAGF,MAAMpD,GAAS4G,EAAAA,EAAAA,OACf5E,EAAAA,EAAAA,IAAU,IACLhC,EACHoqB,WAAY,CACVpc,KAAM5K,EAAO4K,KACbqc,KAAMjnB,EAAOinB,QA2HnBvZ,eAAewZ,EACb5kB,EAAeqS,EAAuBwS,EAAiBtW,EAAqBsB,SAEtElE,EAAAA,EAAAA,IAAQ,cAAe,CAC3B3L,KAAAA,EACAjB,KAAM8lB,EACNtW,WAAAA,EACAsB,OAAAA,IAIJ,IAAIiV,GAEJ1Z,eAAe2Z,GAAqB/kB,EAAenB,EAAmBqK,GAA+B,IAAhB8b,EAAgB,wDACnG,MAAM,WACJC,EADI,iBACQnhB,EADR,oBAC0BohB,EAD1B,SAC+CC,IACjDnK,EAAAA,EAAAA,MAEAgK,IACGF,KACHA,GAAc,IAAIxB,EAAa,8BAA8B,KAC3Dxf,EAAiB,CAAEjG,QAAS,2CAIhCinB,GAAYpB,mBAGd,MAAMhmB,QAAeiO,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDpR,OAAQyF,EAAKvE,GACbmb,WAAY5W,EAAK4W,WACjB/X,UAAAA,EACAqK,KAAAA,EACA8b,OAAAA,IAGF,IAAKtnB,EACH,OAEF,MAAM,QAAEG,EAASunB,MAAOC,EAAlB,IAA2B5b,GAAQ/L,EAErC2nB,EACFJ,EAAW,CAAE/b,KAAM,CAAErL,QAASA,GAAW,WAChCA,EACTiG,EAAiB,CAAEjG,QAAAA,IACV4L,IACLub,EAEEvb,EAAIpH,SAASgiB,GACfS,GAAajB,KAAKpa,IAElBqb,GAAaX,gBACbgB,EAAS,CAAE1b,IAAAA,EAAKlP,OAAQyF,EAAKvE,GAAIoD,UAAAA,KAGnCqmB,EAAoB,CAAEzb,IAAAA,MAjsB5B5O,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UAAE8D,EAAF,OAAaymB,GAAWvqB,EAE9B,OAAQuqB,EAAO3pB,MACb,IAAK,UACHb,EAAQ8pB,eAAe,CAAEC,QAASS,EAAOvmB,OACzC,MACF,IAAK,MAAO,CACV,MAAM,IAAE0K,GAAQ6b,EACZ7b,EAAI8b,MAAMC,EAAAA,KAAgB/b,EAAI8b,MAAME,EAAAA,IACtC3qB,EAAQ4qB,iBAAiB,CAAEjc,IAAAA,IAE3B3O,EAAQoqB,oBAAoB,CAAEzb,IAAAA,IAEhC,MAEF,IAAK,WAAY,CACf,MAAMzJ,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGG+kB,GAAqB/kB,EAAMnB,EAAWymB,EAAOpc,MAClD,MAEF,IAAK,cACHpO,EAAQ6qB,cAAc,CAAE3hB,OAAQshB,EAAOthB,SACvC,MACF,IAAK,eAAgB,CACnB,MAAMqP,EAAO/Y,EAAO+X,eAAgBmC,EAAAA,EAAAA,IAAWla,EAAQA,EAAO+X,oBAAiBzX,EAC/E,IAAKyY,EACH,OAEFvY,EAAQmqB,WAAW,CACjB/b,KAAM,CACJqZ,YAAalP,EAAKkP,YAClBf,UAAWnO,EAAKmO,UAChBD,SAAUlO,EAAKkO,SACfva,OAAQqM,EAAK5X,MAGjB,MAEF,IAAK,UAAW,CACd,MAAMuE,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAEF,MAAM,iBAAE4lB,GAAqBN,EAC7BxqB,EAAQ+qB,WAAW,CAAED,iBAAAA,EAAkBrrB,OAAQyF,EAAKvE,GAAIoD,UAAAA,IACxD,MAEF,IAAK,MAAO,CACV,MAAMmB,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGFlF,EAAQgrB,eAAe,CAAE9lB,KAAAA,EAAMnB,UAAAA,IAC/B/D,EAAQirB,uBAAsBlc,EAAAA,EAAAA,IAAkBvP,EAAQ0F,EAAKvE,GAAIoD,IACjE/D,EAAQkrB,iBAAiB,CAAEzrB,OAAQyF,EAAKvE,GAAIoD,UAAAA,IAC5C,MAEF,IAAK,OAAQ,CACX,MAAMmB,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGG+kB,GAAqB/kB,EAAMnB,OAAWjE,GAAW,GACtD,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAEI,EAAF,WAASirB,GAAeX,EAC9BxqB,EAAQorB,gBAAgB,CAAElrB,MAAAA,EAAOirB,WAAAA,EAAYpnB,UAAAA,IAC7C,MAGF,IAAK,cAAe,CAClB,MAAM,OAAEmI,GAAWse,EACnBxqB,EAAQqrB,iBAAiB,CAAE1qB,GAAIuL,IAC/B,MAGF,IAAK,gBAAiB,CACpB,MAAM,IAAEyC,GAAQ6b,GACV,OAAE/qB,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAEF,MAAM0P,GAAMC,EAAAA,EAAAA,IAAc5P,EAAQC,GAClC,IAAK0P,EACH,OAEF,MAAMmc,GAAQC,EAAAA,EAAAA,KACdvrB,EAAQwrB,qBAAqB,CAC3B7c,IAAAA,EAAKQ,IAAAA,EAAKmc,MAAAA,EAAOG,WAAYjB,EAAOvmB,OAEtC,MAGF,IAAK,UAAW,CACd,MAAM,IAAE0K,GAAQ6b,EACVtlB,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAEF,MAAMnC,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQ0F,EAAKvE,GAAIoD,GACnD,IAAKhB,EACH,OAEF,IAAKA,EAAQkM,WAAalM,EAAQmM,SAChC,OAEF,MAAMC,GAAMC,EAAAA,EAAAA,IAAc5P,EAAQuD,EAAQkM,UAAalM,EAAQmM,UAC/D,IAAKC,EACH,OAEF,MAAMmc,GAAQC,EAAAA,EAAAA,KACdvrB,EAAQ0rB,eAAe,CACrB/c,IAAAA,EACAQ,IAAAA,EACAkI,KAAMnS,EACNomB,MAAAA,EACAG,WAAYjB,EAAOvmB,OAErB,YAKNlE,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,QAAE8pB,EAAF,OAAWtqB,GAAWQ,GACtB,cAAEsX,GAAkB/X,EACpB0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,IAAUgJ,EAAAA,EAAAA,IAAkBjJ,GAC/DuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAEpD,IAAK+X,IAAkBrS,IAASnE,EAC9B,OAGF,MAAM,SAAErB,GAAaqB,EACrBf,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQiV,oBAAoB,CAAExV,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAUwV,OAAO,IAE3D4U,EACH5kB,EAAMqS,EAAewS,GAAStlB,EAAAA,EAAAA,IAAmBjF,EAAQ0F,EAAKvE,GAAIjB,IAAWsV,EAAAA,EAAAA,IAAaxV,EAAQC,QAItGM,EAAAA,EAAAA,IAAiB,cAAcuQ,MAAO9Q,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,GACb,cAAEsX,GAAkB/X,EACpB0F,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GACzB2P,EAAMoI,IAAiBnI,EAAAA,EAAAA,IAAc5P,EAAQC,GAC9C8X,GAAkBrS,GAASiK,SAIX0B,EAAAA,EAAAA,IAAQ,iBAAkB1B,EAAIxO,GAAIwO,EAAI2M,eAK3Dta,EAAAA,EAAAA,KAAUmqB,EAAAA,EAAAA,KAAqBvlB,EAAAA,EAAAA,MAAa+I,EAAIxO,KAC3CmpB,EAAe5kB,EAAMqS,EAAe,cAAUzX,GAAWkV,EAAAA,EAAAA,IAAaxV,EAAQC,SAGrFM,EAAAA,EAAAA,IAAiB,qBAAqBuQ,MAAAA,IACpC,MAAM,gBAAE+V,GAAoB7mB,EAAOosB,cACnC,GAAIvF,IAAmBzc,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAAoBwc,EA7K/B,GA8K/B,OAGF,MAAMzjB,QAAeiO,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKjO,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOiK,GAAUpO,EAEvBpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqBN,EAAO,OACtDxR,EAAS,IACJA,EACHosB,cAAe,IACVpsB,EAAOosB,cACVtM,QAASvY,EACTsf,iBAAiBzc,EAAAA,EAAAA,GAAcpK,EAAOqK,qBAG1CrI,EAAAA,EAAAA,IAAUhC,OAGZO,EAAAA,EAAAA,IAAiB,kBAAkBuQ,MAAO9Q,EAAQQ,EAASC,KACzD,MAAM,OACJR,EADI,SACI4gB,EADJ,MACcngB,EADd,OACqBkY,GACvBnY,EAEJ,IAAI4rB,EAAgBrsB,EAAOsmB,WAAWC,WAAW1F,GACjD,IAAsB,IAAlBwL,EAAJ,CAIA,QAAsB/rB,IAAlB+rB,EAA6B,CAC/B,MAAQtT,KAAMuT,EAAR,KAAmB5mB,SAAe2L,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEwP,SAAAA,KAAe,GAEnF,GADA7gB,GAAS4G,EAAAA,EAAAA,OACJ0lB,IAAc5mB,EAEjB,YADA1D,EAAAA,EAAAA,IAAUokB,EAAyBpmB,EAAQ6gB,GAAU,IAIvD7gB,GAASkS,EAAAA,EAAAA,IAASlS,EAAQ,CAAE,CAACssB,EAAUnrB,IAAKmrB,IAC5CtsB,GAASmS,EAAAA,EAAAA,IAASnS,EAAQ,CAAE,CAAC0F,EAAKvE,IAAKuE,IACvC2mB,EAAgB,CACdlrB,GAAImrB,EAAUnrB,GACdT,MAAO,GACPkY,OAAQ,GACR2T,cAAUjsB,EACVksB,aAAa,EACblgB,QAAS,IAGXtM,EAASomB,EAAyBpmB,EAAQ6gB,EAAUwL,IACpDrqB,EAAAA,EAAAA,IAAUhC,IAGRU,IAAU2rB,EAAc3rB,OAAU2rB,EAAcG,cAI/CxC,GAAsB,MAsW7BlZ,eAAA,GAYG,IAZ4B,SAC7B+P,EAD6B,cAE7BwL,EAF6B,OAG7BpsB,EAH6B,MAI7BS,EAJ6B,OAK7BkY,GAOC,EACG5Y,GAAS4G,EAAAA,EAAAA,MACb,MAAM+I,GAAMuK,EAAAA,EAAAA,IAAWla,EAAQqsB,EAAclrB,IACvCuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAK0P,IAAQjK,EACX,OAGF,MAAM+mB,EAAwBJ,EAAc3rB,QAAUA,EACtDV,EAASwmB,EAA2BxmB,GAAQ,GAC5CA,EAASomB,EAAyBpmB,EAAQ6gB,EAAU,IAC/CwL,EACH3rB,MAAAA,KACI+rB,GAAyB,CAAE7T,YAAQtY,EAAWgM,QAAS,OAE7DtK,EAAAA,EAAAA,IAAUhC,GAEV,MAAMoD,QAAeiO,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD1B,IAAAA,EACAjK,KAAAA,EACAhF,MAAAA,EACAkY,OAAQ6T,OAAwBnsB,EAAYsY,IAGxC8T,EAAmB1sB,EAAOsmB,WAAWC,WAAW1F,GAEtD,GADA7gB,EAASwmB,GAA2B5f,EAAAA,EAAAA,OAAa,IAC5CxD,IAAWspB,GAAoBhsB,IAAUgsB,EAAiBhsB,MAE7D,YADAsB,EAAAA,EAAAA,IAAUhC,GAIZ,MAAM2sB,EAAa,IAAIC,KAAKF,EAAiBpgB,SAAW,IAAIjJ,KAAKuL,GAASA,EAAKzN,MACzE0rB,EAAazpB,EAAOkJ,QAAQhJ,QAAQsL,IAAU+d,EAAW9Y,IAAIjF,EAAKzN,MAExEnB,EAASomB,EAAyBpmB,EAAQ6gB,EAAU,IAC/C6L,EACHI,KAAM1pB,EAAO0pB,QACTD,EAAWrnB,QAAU,CAAEunB,UAAW3pB,EAAO2pB,cACzC3pB,EAAOmpB,UAAY,CAAEA,SAAUnpB,EAAOmpB,UAC1CC,YAAappB,EAAOkJ,QAAQ9G,OAAS,GAAKV,QAAQ1B,EAAO6V,YACzD3M,QAAqC,KAA5BogB,EAAiB9T,QAAiB8T,EAAiB9T,SAAWxV,EAAO6V,WAC1E7V,EAAOkJ,SACNogB,EAAiBpgB,SAAW,IAAIsF,OAAOib,GAC5CjU,OAAQiU,EAAWrnB,OAASpC,EAAO6V,WAAa,MAGlDjX,EAAAA,EAAAA,IAAUhC,GA/ZRgtB,CAAgB,CACdnM,SAAAA,EACAwL,cAAeA,EACfpsB,OAAAA,EACAS,MAAAA,EACAkY,OAAAA,YAKNrY,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,MAAEC,EAAF,WAASirB,EAAT,UAAqBpnB,GAAc9D,EACnCiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAEF,MAAMnC,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQ0F,EAAKvE,GAAIoD,GACnD,IAAKhB,EACH,OAGF,MAAM0pB,GAAYrd,EAAAA,EAAAA,IAAc5P,EAAQuD,EAAQmM,UAChD,IAAKud,EACH,OAGF,MAAMxoB,EAAQ,IAAGwoB,EAAUpM,YAAYngB,IAEvC,IAAIirB,EAKJ,MAAO,IACF3rB,EACH4rB,gBAAiB,CACflrB,MAAAA,EACAwsB,YAAaD,EAAUpM,WARzBrgB,EAAQ2sB,iBAAiB,CAAEltB,OAAQyF,EAAKvE,GAAIsD,KAAAA,QAahDlE,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH4rB,qBAAiBtrB,OAIrBC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,GACJU,EADI,QACAisB,EADA,SACShW,EADT,YACmBhC,GACrB3U,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,IAAuBJ,EAC1B,OAGF,MAAM,OAAElB,EAAF,SAAUC,GAAaqB,EAEvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQiV,oBAAoB,CAAExV,OAAAA,EAAQC,SAAAA,EAAUwV,OAAO,KAElDrE,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC3L,KAAAA,EACA2nB,SAAUlsB,EACVisB,QAAAA,EACAnZ,YAAYhP,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/CqV,QAAQC,EAAAA,EAAAA,IAAaxV,EAAQC,GAC7BmX,SAAAA,EACAkW,aAAclY,QAIlB7U,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,SAAEogB,GAAapgB,EAErB,IAAI4rB,EAAgBrsB,EAAOsmB,WAAWC,WAAW1F,GAE5CwL,IAILA,EAAgB,CACdlrB,GAAIkrB,EAAclrB,GAClBT,MAAO,GACPkY,OAAQ,GACR2T,cAAUjsB,EACVksB,aAAa,EACblgB,QAAS,KAGXtK,EAAAA,EAAAA,IAAUokB,EAAyBpmB,EAAQ6gB,EAAUwL,SAGvD9rB,EAAAA,EAAAA,IAAiB,YAAYuQ,MAAO9Q,EAAQQ,EAASC,KACnD,MAAM,MAAE+O,EAAF,MAAS+d,GAAU9sB,EAEnBkP,GAAMuK,EAAAA,EAAAA,IAAWla,EAAQwP,GAC1BG,SAIC0B,EAAAA,EAAAA,IAAQ,WAAY,CACxB1B,IAAAA,EACA6d,WAAYD,QAIhBhtB,EAAAA,EAAAA,IAAiB,wBAAwBuQ,MAAO9Q,EAAQQ,EAASC,KAC/D,MAAM,IACJ0O,EADI,IACCQ,EADD,MACMmc,EADN,WACaG,GACfxrB,EAEJ,KAAKoP,EAAAA,EAAAA,IAAmB7P,EAAQ2P,GAY9B,YAXA3N,EAAAA,EAAAA,IAAU,IACLhC,EACH+P,gBAAiB,CACfJ,IAAAA,EACAtO,KAAM,SACN2O,UAAW,CACTlD,OAAQ,uBACRrM,QAAAA,MAOR,MAAMgtB,QAAmBpc,EAAAA,EAAAA,IAAQ,uBAAwB,CAAElC,IAAAA,EAAKQ,IAAAA,EAAKmc,MAAAA,IAChE2B,IAILztB,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,IAAU,IACLhC,EACH0tB,OAAQ,CACNve,IAAKse,EACL9d,IAAAA,EACAsc,WAAAA,UAKN1rB,EAAAA,EAAAA,IAAiB,kBAAkBuQ,MAAO9Q,EAAQQ,EAASC,KACzD,MAAM,IACJ0O,EADI,IACCQ,EADD,KACMkI,EADN,MACYiU,EADZ,SACmB1U,EADnB,WAC6B6U,EAD7B,cACyC0B,EADzC,WACwDH,GAC1D/sB,EAEJ,KAAKoP,EAAAA,EAAAA,IAAmB7P,EAAQ2P,GAY9B,YAXA3N,EAAAA,EAAAA,IAAU,IACLhC,EACH+P,gBAAiB,CACfJ,IAAAA,EACAtO,KAAM,SACN2O,UAAW,CACTlD,OAAQ,iBACRrM,QAAAA,MAOR,MAAMc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBqsB,EAAQ3tB,IAAUgF,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GACrDkD,QAAeiO,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7ClC,IAAAA,EACAQ,IAAAA,EACAkI,KAAAA,EACAiU,MAAAA,EACA1U,SAAAA,EACApC,iBAAkB4Y,QAASttB,EAC3BqtB,cAAAA,EACAH,WAAAA,IAEF,IAAKpqB,EACH,OAGF,MAAQ+L,IAAKse,EAAP,QAAmBL,GAAYhqB,EAErCpD,GAAS4G,EAAAA,EAAAA,OACT5E,EAAAA,EAAAA,IAAU,IACLhC,EACH0tB,OAAQ,CACNve,IAAKse,EACL9d,IAAAA,EACAyd,QAAAA,EACAnB,WAAAA,SAKN1rB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,IACJkP,EADI,KACCkI,EADD,SACOT,EADP,iBACiBpC,EADjB,QACmCoY,GACrC3sB,GAEW4Q,EAAAA,EAAAA,IAAQ,iBAAkB,CACvC1B,IAAAA,EACAkI,KAAAA,EACAT,SAAAA,EACApC,iBAAAA,EACAoY,QAAAA,KAIA5sB,EAAQqtB,kBAIZttB,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,IACJkP,EADI,KACCf,EADD,WACOqd,GACTxrB,GAEJ4Q,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB1B,IAAAA,EACAf,KAAAA,EACAqd,WAAAA,QAIJ1rB,EAAAA,EAAAA,IAAiB,eAAgBP,IACxB,IACFA,EACH0tB,YAAQptB,OAIZC,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACH+P,qBAAiBzP,OAIrBC,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KAAY,MAC/D,MAAM,MAAE+O,GAAU/O,GACZ,cAAEqtB,GAAkB9tB,EAEpB+tB,EAAmB,IAAInB,IAAIkB,GAQjC,GAPAC,EAAiBC,IAAIxe,IACrBxN,EAAAA,EAAAA,IAAU,IACLhC,EACH+P,qBAAiBzP,EACjBwtB,cAAeG,MAAM9a,KAAK4a,KAG5B,UAAI/tB,EAAO+P,uBAAX,OAAI,EAAwBC,UAAW,CACrC,MAAM,OAAElD,EAAQrM,QAASytB,GAAoBluB,EAAO+P,gBAAgBC,UACpExP,EAAQsM,GAAQohB,QAIpB3tB,EAAAA,EAAAA,IAAiB,sBAAsBuQ,MAAO9Q,EAAQQ,EAASC,KAC7D,MAAM,KAAEuN,GAASvN,GAAW,SACtB0pB,EAAmBnc,OAG3BzN,EAAAA,EAAAA,IAAiB,yBAAyBuQ,MAAO9Q,EAAQQ,EAASC,KAChE,MAAM,MAAE+O,EAAF,UAAS0a,GAAczpB,EAEvBkP,GAAMuK,EAAAA,EAAAA,IAAWla,EAAQwP,GAE1BG,SAECsa,EAAsBta,EAAKua,OAwBnC3pB,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,MACIuP,EADJ,cACWme,EADX,IAC0Bxe,EAD1B,WAC+Bqe,GACjC/sB,EACEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B0P,GAAMC,EAAAA,EAAAA,IAAc5P,EAAQwP,GAClC,IAAK9J,IAASiK,EACZ,OAEF,MAAQya,YAAY,KAAEC,IAAWrqB,EACjC,IAAK2tB,IAAkBtD,EAAK7a,GAC1B,MAAO,IACFxP,EACHmuB,iBAAkB,CAChBxe,IAAAA,EACA1P,OAAAA,EACAutB,WAAAA,IAIN,MAAM1B,GAAQC,EAAAA,EAAAA,KACdvrB,EAAQ0rB,eAAe,CACrB/c,IAAAA,EACA0I,KAAMnS,EACNiK,IAAAA,EACAmc,MAAAA,EACAG,WAAY,GACZ0B,cAAAA,EACAH,WAAAA,QAMJjtB,EAAAA,EAAAA,IAAiB,2BAA2BuQ,MAAO9Q,EAAQQ,KACzD,MAAM,iBAAE2tB,GAAqBnuB,EAC7B,IAAKmuB,EAAkB,OAEvB,MAAM,IAAExe,EAAF,OAAO1P,EAAP,WAAeutB,GAAeW,GAEpCnsB,EAAAA,EAAAA,IAAU,IACLhC,EACHmuB,sBAAkB7tB,UAGd2pB,EAAsBta,GAAK,GAEjCnP,EAAQ4tB,kBAAkB,CAAEnuB,OAAAA,EAAQuP,MAAOG,EAAIxO,GAAIqsB,WAAAA,QAGrDjtB,EAAAA,EAAAA,IAAiB,8BAA+BP,IACvC,IACFA,EACHmuB,sBAAkB7tB,M,SC/lBtBC,EAAAA,EAAAA,IAAiB,oBAAoBuQ,MAAAA,IACnC,MAAM1N,QAAeiO,EAAAA,EAAAA,IAAQ,mBACxBjO,IAILpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASquB,EAAAA,EAAAA,IAAgBruB,EAAQ,CAAEsuB,YAAalrB,EAAOkrB,cACvDtuB,GAASuuB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAEwuB,KAAMprB,EAAOorB,QACpDxsB,EAAAA,EAAAA,IAAUhC,QAGZO,EAAAA,EAAAA,IAAiB,iBAAiBuQ,MAAO9Q,EAAQQ,EAASC,KACxD,MAAM,gBAAEguB,EAAF,UAAmBC,GAAcjuB,GAEvCuB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAE4d,WAAW,EAAMvN,WAAO/P,KAEhE,MAAMquB,QAAkBtd,EAAAA,EAAAA,IAAQ,gBAAiBod,IAEjDzsB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,KAAoB3nB,EAAAA,EAAAA,MAAa,CAAEgX,WAAW,KAEpD+Q,GACFD,QAIJnuB,EAAAA,EAAAA,IAAiB,iBAAiBuQ,MAAO9Q,EAAQQ,EAASC,KACxD,MAAM,gBAAEguB,EAAF,UAAmBC,GAAcjuB,GAEvCuB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAE4d,WAAW,EAAMvN,WAAO/P,KAEhE,MAAMquB,QAAkBtd,EAAAA,EAAAA,IAAQ,gBAAiBod,IAEjDzsB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,KAAoB3nB,EAAAA,EAAAA,MAAa,CAAEgX,WAAW,KAEpD+Q,GACFD,QAIJnuB,EAAAA,EAAAA,IAAiB,kBAAkBuQ,MAAO9Q,EAAQQ,EAASC,KACzD,MAAM,gBACJguB,EADI,SACaG,EADb,KACuBJ,EADvB,MAC6BK,EAD7B,UACoCH,GACtCjuB,GAEJuB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAE4d,WAAW,EAAMvN,WAAO/P,KAEhE,MAAMquB,QAAkBtd,EAAAA,EAAAA,IAAQ,iBAAkBod,EAAiBG,EAAUJ,EAAMK,IAEnF7sB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,KAAoB3nB,EAAAA,EAAAA,MAAa,CAAEgX,WAAW,KAEpD+Q,GACFD,QAIJnuB,EAAAA,EAAAA,IAAiB,uBAAuBuQ,MAAO9Q,EAAQQ,EAASC,KAC9D,MAAM,gBACJguB,EADI,MACaI,EADb,UACoBH,GACtBjuB,GAEJuB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAE4d,WAAW,EAAMvN,WAAO/P,KAEhE,MAAMquB,QAAkBtd,EAAAA,EAAAA,IAAQ,sBAAuBod,EAAiBI,IAExE7sB,EAAAA,EAAAA,KAAUusB,EAAAA,EAAAA,KAAoB3nB,EAAAA,EAAAA,MAAa,CAAEgX,WAAW,EAAOkR,4BAAwBxuB,KAEnFquB,GACFD,QAIJnuB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KAAEsuB,GAAStuB,GAEZ4Q,EAAAA,EAAAA,IAAQ,2BAA4B0d,OAG3CxuB,EAAAA,EAAAA,IAAiB,mBAAoBP,IAC5BuuB,EAAAA,EAAAA,IAAoBvuB,EAAQ,CAAEqQ,WAAO/P,OCjD9CC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,YAAEuuB,EAAF,SAAeC,GAAaxuB,EAC5BR,GAASivB,EAAAA,EAAAA,IAAoBlvB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAY4qB,EAAAA,EAAAA,IAAuBnvB,GACpC0F,GAASnB,GAMhBuM,eAAqCpL,EAAenB,EAAmByqB,EAAkBI,GACvF,MAAMhsB,QAAeiO,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD3L,KAAAA,EAAMnB,UAAAA,EAAWyqB,YAAAA,EAAaI,WAAAA,IAEhC,IAAKhsB,EACH,OAGF,MAAM,GAAEjC,EAAF,gBAAMkuB,GAAoBjsB,EAChC,IAAKjC,EACH,OAGF,IAAInB,GAASsvB,EAAAA,EAAAA,KAAiB1oB,EAAAA,EAAAA,MAAazF,GACvCkuB,GACFrvB,GAASuvB,EAAAA,EAAAA,IAAsBvvB,EAAQqvB,GACvCrvB,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQyvB,EAAAA,GAAAA,WAEhCzvB,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQyvB,EAAAA,GAAAA,cAElCztB,EAAAA,EAAAA,IAAUhC,GAvBL0vB,CAAsBhqB,EAAMnB,EAAWyqB,EAAaC,OA0B3D1uB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,KAAEiF,EAAF,UAAQnB,GAAc9D,EACvBiF,GAASnB,GAMhBuM,eAA8BpL,EAAenB,GAC3C,MAAMnB,QAAeiO,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3L,KAAAA,EAAMnB,UAAAA,IACvD,IAAKnB,EACH,OAEF,IAAIpD,GAAS2vB,EAAAA,EAAAA,KAAe/oB,EAAAA,EAAAA,MAAaxD,GACrCwsB,EAAOH,EAAAA,GAAAA,YACPzvB,EAAOiQ,QAAQ4f,UACb7vB,EAAOiQ,QAAQ4f,QAAQC,0BACxB9vB,EAAOiQ,QAAQ4f,QAAQE,eACvB/vB,EAAOiQ,QAAQ4f,QAAQG,gBACvBhwB,EAAOiQ,QAAQ4f,QAAQI,kBAC1BL,EAAOH,EAAAA,GAAAA,cAETzvB,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQ4vB,IAChC5tB,EAAAA,EAAAA,IAAUhC,GAlBLwrB,CAAe9lB,EAAMnB,OAqB5BhE,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,iBAAE6qB,EAAF,OAAoBrrB,EAApB,UAA4BsE,GAAc9D,EAC1CiF,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCsE,GAAc+mB,GAAqB5lB,GAO1CoL,eAA0BpL,EAAenB,EAAmB+mB,GAC1D,MAAMloB,QAAeiO,EAAAA,EAAAA,IAAQ,aAAc3L,EAAM4lB,GACjD,IAAKloB,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb,MAAMrD,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQ0F,EAAKvE,GAAIoD,GACnDvE,GAASkwB,EAAAA,EAAAA,IAAWlwB,EAAQoD,EAAQG,IACpCvB,EAAAA,EAAAA,IAAUhC,GAZLurB,CAAW7lB,EAAMnB,EAAW+mB,OAenC/qB,EAAAA,EAAAA,IAAiB,qBAAsBP,KACrCgC,EAAAA,EAAAA,IAAU,IACLhC,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVI,WAAO/P,SAKbC,EAAAA,EAAAA,IAAiB,gBAAiBP,KAChCgC,EAAAA,EAAAA,IAAU,IACLhC,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVkgB,aAAS7vB,SAKfC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,eAAE2vB,GAAmBpwB,EAAOiQ,SAC5B,YAAEogB,GAAgB5vB,GAClB,KAAEmO,GAASyhB,EAEjB,GAAuB,WAAnBD,EAA6B,CAC/B,MAAME,GAAiBC,EAAAA,EAAAA,IAA6BvwB,GACpD,IAAKswB,EACH,QAgCNxf,eACElC,EASA0hB,GAEA,MAAM5vB,EC7LD,SAA0BkO,GAC/B,MAAMlO,EAAQ0E,OAAOC,KAAKuJ,GAAMvL,KAAKmtB,GAAO,GAAEA,KAAK5hB,EAAK4hB,OAAMnsB,KAAK,KACnE,OAAO3D,EAAM8E,OAAS,EAAK,IAAG9E,IAAU,GD2L1B+vB,CAAiB,CAC7B,eAAgB7hB,EAAK8hB,WACrB,kBAAmB9hB,EAAK+hB,YACxB,iBAAkB/hB,EAAKgiB,WACvB,YAAahiB,EAAKiiB,IAClB,oBAAqBjiB,EAAKkiB,IAC1B,wBAAyBliB,EAAKmiB,UAG1BC,QAAiBC,MAAO,mCAAkCvwB,IAAS,CACvEwwB,OAAQ,OACRb,YAAa,cACbc,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASd,OAGvBltB,QAAe4tB,EAASK,OAC9B,GAAIjuB,EAAOiN,MAAO,CAChB,MAAMA,GAAQihB,EAAAA,EAAAA,IAAeluB,EAAOiN,OAC9BrQ,GAAS4G,EAAAA,EAAAA,MAUf,YATA5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVI,MAAO,IACFA,MAMX,IAAIrQ,GAASuxB,EAAAA,EAAAA,KAAkB3qB,EAAAA,EAAAA,MAAa,CAC1CvF,KAAM+B,EAAO/B,KACbF,GAAIiC,EAAOjC,KAEbnB,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQyvB,EAAAA,GAAAA,WAChCztB,EAAAA,EAAAA,IAAUhC,GA/EHwxB,CAAsB5iB,EAAM0hB,QAC5B,GAAuB,gBAAnBF,EAAkC,CAC3C,MAAMqB,GAAcC,EAAAA,EAAAA,IAA0B1xB,GAC9C,IAAKyxB,EACH,QA8EN3gB,eACElC,EAOA6iB,GAEA,MAAMje,EAAS,CACbme,KAAM,CACJC,OAAQhjB,EAAK8hB,WAAWmB,QAAQ,UAAW,IAC3CC,iBAAkBljB,EAAK+hB,YACvBoB,gBAAiBnjB,EAAKgiB,WACtBoB,cAAepjB,EAAKiiB,IAAIgB,QAAQ,UAAW,MAGzC1iB,EAAM8iB,EAAAA,GACR,+DACA,oDAEEjB,QAAiBC,MAAM9hB,EAAK,CAChC+hB,OAAQ,OACRC,QAAS,CACPe,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBT,GAEpBU,KAAMC,KAAKC,UAAU7e,KAEjBpQ,QAAe4tB,EAASK,OAE9B,GAAsB,OAAlBjuB,EAAOkvB,OAAiB,CAE1B,MAAMjiB,EAAQ,CAAEuH,YAAa,iBACvB5X,GAAS4G,EAAAA,EAAAA,MAUf,YATA5E,EAAAA,EAAAA,IAAU,IACLhC,EACHiQ,QAAS,IACJjQ,EAAOiQ,QACVI,MAAO,IACFA,MAOX,IAAIrQ,GAASuyB,EAAAA,EAAAA,KAAuB3rB,EAAAA,EAAAA,MAAa,CAC/CvF,KAAM,OACNmxB,MAAOpvB,EAAOwL,KAAK4jB,QAErBxyB,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQyvB,EAAAA,GAAAA,WAChCztB,EAAAA,EAAAA,IAAUhC,GAlIHyyB,CAA2B7jB,EAAM6iB,QAI1ClxB,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,iBAAEiyB,EAAF,gBAAoBC,GAAoBlyB,EACxCR,GAASivB,EAAAA,EAAAA,IAAoBlvB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAY4qB,EAAAA,EAAAA,IAAuBnvB,GACnC4yB,GAASC,EAAAA,EAAAA,IAAoB7yB,GAC7B8yB,GAAgBC,EAAAA,EAAAA,IAAuB/yB,IACvC,eAAEowB,GAAmBpwB,EAAOiQ,QAC5BqgB,EAAoC,WAAnBF,GACnBG,EAAAA,EAAAA,IAA6BvwB,IAAU0xB,EAAAA,EAAAA,IAA0B1xB,GAChE0F,GAASnB,GAAc+rB,GAAmBsC,GAAWxC,GAuH5Dtf,eACEpL,EACAnB,EACA6rB,EACAwC,EACAvC,EACA2C,EACAN,GAMA,IAAe,UAJMrhB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C3L,KAAAA,EAAMnB,UAAAA,EAAWquB,OAAAA,EAAQvC,YAAAA,EAAa2C,gBAAAA,EAAiBN,iBAAAA,IAGpC,CACnB,MAAM1yB,GAASmQ,EAAAA,EAAAA,KAAavJ,EAAAA,EAAAA,QAC5B5E,EAAAA,EAAAA,KAAUoO,EAAAA,EAAAA,IAAapQ,KAlIpBizB,CAAgBvtB,EAAMnB,EAAW6rB,EAAgBwC,EAAQ,CAC5DM,KAAMP,EACN/jB,KAAyB,WAAnBwhB,GAA8B+C,EAAAA,EAAAA,IAAwBnzB,IAAUozB,EAAAA,EAAAA,IAA6BpzB,IAClG8yB,EAAeJ,OAmIpBnyB,EAAAA,EAAAA,IAAiB,kBAAkB,SAACP,EAAQQ,GAA0B,IAAjBC,EAAiB,uDAAP,GAC7D,OAAO+uB,EAAAA,EAAAA,IAAexvB,EAAQS,EAAQmvB,MAAQH,EAAAA,GAAAA,kBAGhDlvB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KACnDgrB,EAAAA,EAAAA,IAAsBzrB,EAAQS,K,yBEhTvC,MAEM4yB,GAA0B,IACnBC,GAAwB,IACxBC,GAAwB,I,eCmB9B,SAASC,GAA6BxzB,EAAqByzB,GAChE,OAAOA,GAAMzzB,EAAOsN,oBAAsBF,EAAAA,GACtCpN,EAAO+M,mBApBe2mB,EAoBuBC,GAAAA,EAAAA,MAAiBC,OAnBhDC,EAAAA,GACTjpB,KAAKkpB,IACVlpB,KAAKC,IAAkB,IAAd6oB,EAAoBH,IACf,IAAdG,GAIAA,EAAcK,EAAAA,GACTnpB,KAAKkpB,IACVlpB,KAAKC,IAAkB,IAAd6oB,EAAoBH,IACf,GAAdG,GAIGJ,IAMH,GArBN,IAA4BI,ECQ5B,IAAIM,GAAqB,GAEzBzzB,EAAAA,EAAAA,IAAiB,0BAA0BuQ,UACzC,MAAM1N,QAAeiO,EAAAA,EAAAA,IAAQ,yBACxBjO,IAKLA,EAAOyF,SAASorB,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgB/yB,KAAMizB,EAAAA,GAAAA,QAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAWlzB,KAAMizB,EAAAA,GAAAA,YAInEpyB,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACH0tB,mBAAoBlxB,SAIxB7C,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAC9D,MAAM,MACJiN,EADI,EACG+lB,EADH,EACMc,EADN,YACSC,EADT,UACsBC,EADtB,WACiCC,GACnCj0B,EAEEk0B,EAAyB,CAC7BxzB,GAAI6yB,KACJY,eAAgBlnB,GAAS8mB,EACzBf,EAAGD,GAA6BxzB,EAAQyzB,GAlCV,GAkCe7oB,KAAK2P,SAClBsa,GAChCN,EAAGA,EApC2B,GAoCvB3pB,KAAK2P,SAAuCsa,GACnDJ,UAAAA,EACAC,WAAAA,GAGF,MAAO,IACF10B,EACH80B,wBAAyB,IAAK90B,EAAO80B,yBAA2B,GAAKH,QAIzEp0B,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJ8D,EADI,OACOtE,EADP,MACeyN,EADf,aACsBqnB,EADtB,YACoCP,GACtC/zB,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAAUgI,GAAU8mB,IAAgBv0B,IAAWD,EAAO+X,gBAItD1G,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC3L,KAAAA,EACAnB,UAAAA,EACAywB,SAAUtnB,IAASunB,EAAAA,EAAAA,IAAqCT,GACxDU,WAAYH,QAIhBx0B,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OACJR,EADI,UACIsE,EADJ,EACekvB,EADf,EACkBc,GACpB9zB,EACE00B,GAAWC,EAAAA,EAAAA,IAAsBp1B,EAAQC,GACzCsD,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,GAE7C4wB,GAAa5xB,KAAW8xB,EAAAA,EAAAA,IAAe9xB,IAE5C/C,EAAQ80B,aAAa,CACnBr1B,OAAAA,EACAsE,UAAAA,EACA4wB,SAAAA,EACA1B,EAAAA,EACAc,EAAAA,QAIJh0B,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KAAY,UAC7D,MAAM,OACJR,GACsBQ,EACxB,IAAI,UAAE8D,GAAc9D,GAEhB,SAAE00B,GAAa10B,EAEnB,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAIsD,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,GAEhD,IAAKmB,IAASnC,EACZ,OAGF,MAAMgyB,EAAoBzwB,QAAQvB,EAAQ4D,aAAe5D,EAAQiyB,UAC3DC,EAA8BF,GAChCltB,EAAAA,EAAAA,IAA0BrI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACJiD,EAAUgyB,IACNhmB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQw1B,IAClClyB,EACJgB,GAAmB,QAAP,EAAAhB,SAAA,eAASpC,KAAMoD,EAE3B,UAAIhB,EAAQmyB,iBAAZ,iBAAI,EAAmBppB,eAAvB,OAAI,EAA4BqpB,MAAMtd,GAAMA,EAAE8c,WAAaA,GAAY9c,EAAEud,aACvET,OAAW70B,IAGR+Q,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3L,KAAAA,EAAMnB,UAAAA,EAAW4wB,SAAAA,IAEhD,MAAM,eAAEU,GAAmB71B,EAAOgjB,SAAS8S,MAiB3C,OAfID,IAAmBE,EAAAA,KACrB/1B,EAAS,IACJA,EACHg2B,gBAAiB,IACXb,EAAWn1B,EAAOg2B,iBAAkBC,EAAAA,EAAAA,IAAKj2B,EAAOg2B,gBAAiB,CAACzxB,OAClE4wB,GAAY,CACd,CAAC5wB,GAAY,CACX4wB,SAAAA,EACA5wB,UAAAA,OD1GL,SAA4BvE,EAAqBC,EAAgBsE,EAAmB4wB,GACzF,MAAM,UAAEO,IAAcnmB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,IAAc,GAEtE,IAAKmxB,EACH,OAAO11B,EAIT,IAAIsM,EAAUopB,EAAUppB,QAAQjJ,KAAKgV,GAAOA,EAAE8c,WAAaA,EACvD,IACG9c,EACHD,MAAOC,EAAEud,SAAWvd,EAAED,MAAQC,EAAED,MAAQ,EACxCwd,UAAU,GACPvd,EAAEud,SAAW,IACbvd,EACHud,UAAU,EACVxd,MAAOC,EAAED,MAAQ,GACfC,IACH/U,QAAQ+U,GAAMA,EAAED,MAAQ,KAEvB,gBAAE8d,GAAoBR,EAE1B,GAAIP,IAAa7oB,EAAQqpB,MAAMtd,GAAMA,EAAE8c,WAAaA,IAAW,CAC7D,MAAM,cAAEpd,GAAkB/X,EAE1BsM,EAAU,IAAIA,EAAS,CACrB6oB,SAAAA,EACAS,UAAU,EACVxd,MAAO,IAGLsd,EAAUS,aACZD,EAAkB,IAAKA,GAAmB,GAAK,CAC7CxpB,OAAQqL,EACRod,SAAAA,KAKN,OAAOpgB,EAAAA,GAAAA,IAAkB/U,EAAQC,EAAQsE,EAAW,CAClDmxB,UAAW,IACNA,EACHppB,QAAAA,EACA4pB,gBAAAA,KCsEGE,CAAmBp2B,EAAQC,EAAQsE,EAAW4wB,OAGvD50B,EAAAA,EAAAA,IAAiB,YAAaP,IACrB,IACFA,EACHg2B,gBAAiB,QAIrBz1B,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KAAY,MACpE,MAAM,UAAE8D,EAAF,SAAa4wB,GAAa10B,GAC1B,eAAEo1B,GAAmB71B,EAAOgjB,SAAS8S,MAE3C,OAAID,IAAmBE,EAAAA,KAEnB,UAAA/1B,EAAOg2B,gBAAgBzxB,UAAvB,eAAmC4wB,YAAaA,EAFDn1B,EAM5C,IACFA,EACHg2B,gBAAiB,IACXb,EAAWn1B,EAAOg2B,iBAAkBC,EAAAA,EAAAA,IAAKj2B,EAAOg2B,gBAAiB,CAACzxB,OAClE4wB,GAAY,CACd,CAAC5wB,GAAY,CACX4wB,SAAAA,EACA5wB,UAAAA,UAOVhE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAAY,MACnE,MAAM,UAAE8D,EAAF,SAAa4wB,GAAa10B,EAEhC,OAAI,UAAAT,EAAOg2B,gBAAgBzxB,UAAvB,eAAmC4wB,YAAaA,EAC3Cn1B,EAGF,IACFA,EACHg2B,iBAAiBC,EAAAA,EAAAA,IAAKj2B,EAAOg2B,gBAAiB,CAACzxB,SAInDhE,EAAAA,EAAAA,IAAiB,sBAAsBuQ,MAAO9Q,EAAQQ,EAASC,KAC7D,MAAM,SAAE00B,GAAa10B,QAEA4Q,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE8jB,SAAAA,MAKrDnzB,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACHyvB,UAAW,IACNr2B,EAAOq2B,UACVC,gBAAiBnB,SAKvB50B,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAAY,MAC3E,MAAM,GAAEU,GAAOV,EAEf,MAAO,IACFT,EACH80B,wBAAuB,UAAE90B,EAAO80B,+BAAT,aAAE,EAAgCxxB,QAAQ+U,GAAMA,EAAElX,KAAOA,SAIpFZ,EAAAA,EAAAA,IAAiB,gBAAgBuQ,MAAO9Q,EAAQQ,EAASC,KAAY,UACnE,MAAM,OAAER,EAAF,UAAUsE,EAAV,SAAqB4wB,GAAa10B,EAClCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,GAClD,IAAKmB,IAASnC,EACZ,OAGF,MAAMqV,EAAM,UAAGrV,EAAQgzB,gBAAX,aAAG,EAAkBtd,WAC3B7V,QAAeiO,EAAAA,EAAAA,IAAQ,4BAA6B,CACxD8jB,SAAAA,EACAzvB,KAAAA,EACAnB,UAAAA,EACAqU,OAAAA,IAGF,IAAKxV,EACH,OAGFpD,GAAS4G,EAAAA,EAAAA,MAET,UAAIxD,EAAOoO,aAAX,OAAI,EAAchM,SAChBxF,GAASkS,EAAAA,EAAAA,IAASlS,GAAQ8R,EAAAA,EAAAA,IAAqB1O,EAAOoO,MAAO,QAG/D,MAAM,WAAEyH,EAAF,MAAcb,EAAd,UAAqBsd,GAActyB,GAEzCpB,EAAAA,EAAAA,KAAU+S,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQsE,EAAW,CACrDgyB,SAAU,CACRtd,WAAAA,EACAb,MAAAA,EACAsd,UAAW,KACL,UAAAnyB,EAAQgzB,gBAAR,eAAkBb,YAAa,MAChCA,WAMXn1B,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,IAAE8G,EAAF,OAAOtH,GAAWQ,EAElBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAIL2L,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9J,IAAAA,EAAK7B,KAAAA,QAG1CnF,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAAY,MAC7E,MAAM,OACJR,EADI,SACI+0B,EADJ,EACcvB,EADd,EACiBc,EADjB,UACoBE,EADpB,WAC+BC,EAD/B,GAC2CvzB,GAC7CV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,GAAKyF,GAAQ,UAAC1F,EAAO80B,+BAAR,OAAC,EAAgCa,MAAMtd,GAAMA,EAAElX,KAAOA,KAAOlB,IAAWD,EAAO+X,cAM5F,OAFA1G,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE3L,KAAAA,EAAMsvB,SAAAA,IAEzC,IACFh1B,EACH80B,wBAAyB90B,EAAO80B,wBAAwBzxB,KAAKsxB,GACvDA,EAAuBxzB,KAAOA,EACzB,IACFwzB,EACHlB,EAAGD,GAA6BxzB,EAAQyzB,GACxCc,EAAAA,EACAE,UAAAA,EACAC,WAAAA,GAGGC,SCnSbp0B,EAAAA,EAAAA,IAAiB,kBAAkBuQ,MAAO9Q,EAAQQ,EAASC,KAAY,MACrE,MAAM,OAAER,EAAF,QAAUu2B,GAAY/1B,EACtBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAMyU,SACT,OAGF,MAAM/W,QAAeiO,EAAAA,EAAAA,IAAQmlB,EAAU,uBAAyB,yBAA0B,CAAE9wB,KAAAA,IAC5F,GAAKtC,EAAL,CAMA,GAFApD,GAAS4G,EAAAA,EAAAA,MAET,UAAKxD,EAAgCqzB,yBAArC,OAAI,EAAoDjxB,OAAQ,CAC9D,MAAM7D,GAAWwB,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE3CmD,EAAgCqzB,kBAAqBrzB,EAAgCqzB,kBACnFpzB,KAAKE,IAAD,IAAmBA,KAAY5B,EAAS4B,EAAQmzB,YAGzD10B,EAAAA,EAAAA,KAAU20B,EAAAA,EAAAA,IAAiB32B,EAAQC,EAAQmD,SAG7C7C,EAAAA,EAAAA,IAAiB,yBAAyBuQ,MAAO9Q,EAAQQ,EAASC,KAChE,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAMyU,SACT,OAGF,IAAI/W,QAAeiO,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE3L,KAAAA,EAAMnB,UAAAA,IACxDnB,IACHA,EAAS,IAGXpD,GAAS4G,EAAAA,EAAAA,MAET,MAAM,MAAEgwB,EAAF,SAASC,IAAa1zB,EAAAA,EAAAA,IAAmBnD,EAAQC,GAAQsE,GAE/DnB,EAAOwzB,MAAQA,EACfxzB,EAAOyzB,SAAWA,GAElB70B,EAAAA,EAAAA,KAAU80B,EAAAA,EAAAA,IAAwB92B,EAAQoD,QAG5C7C,EAAAA,EAAAA,IAAiB,4BAA4BuQ,MAAO9Q,EAAQQ,EAASC,KACnE,MAAM,OACJR,EADI,MACIuyB,EADJ,KACWuE,EADX,aACiBC,GACnBv2B,EACEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAMyU,SACT,OAGF,MAAM8c,EAAOvxB,EAAKyU,SAAU+c,eACtB9zB,QAAeiO,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEmhB,MAAAA,EAAOyE,KAAAA,EAAMD,aAAAA,IAEpE5zB,IAILpB,EAAAA,EAAAA,KAAUm1B,EAAAA,EAAAA,KAAsBvwB,EAAAA,EAAAA,MAAa3G,EAAQ82B,EAAM3zB,O,uBCrEtD,SAASg0B,GAA4BC,EAAWC,GACrD,MAAMC,SAAeF,EAErB,GAAIE,WADiBD,EAEnB,OAAO,EAGT,GAAc,WAAVC,EACF,OAAOF,IAAWC,EAGpB,MAAME,EAAWvJ,MAAMwJ,QAAQJ,GAG/B,GAAIG,IAFavJ,MAAMwJ,QAAQH,GAG7B,OAAO,EAGT,GAAIE,EAAU,CACZ,MAAME,EAASL,EACTM,EAASL,EAEf,OAAII,EAAOlyB,SAAWmyB,EAAOnyB,QAItBkyB,EAAOE,OAAM,CAACC,EAAS7kB,IAAMokB,GAAaS,EAASF,EAAO3kB,MAGnE,MAAM8kB,EAAUT,EACVU,EAAUT,EAGhB,OAFclyB,OAAOC,KAAKyyB,GAEbF,OAAOI,GAASZ,GAAaU,EAAQE,GAAOD,EAAQC,OCNnEz3B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAeH,OAdApf,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOjgB,GAAIigB,EAAO1b,KAAM0b,EAAO6W,kBAEvD7W,EAAO8W,oBAAsBC,EAAAA,EAAAA,GAAmBn4B,EAAQohB,EAAOjgB,KAElEX,EAAQ43B,oBAGNhX,EAAO1b,KAAKvE,KACdk3B,EAAAA,GAAAA,IAA0B,CACxBp4B,OAAQmhB,EAAO1b,KAAKvE,GACpBoX,uBAAwB6I,EAAO1b,KAAK6S,0BAO1C,IAAK,iBAAkB,CACrB,MAAMkL,GAAW6U,EAAAA,EAAAA,IAAmBt4B,EAAQohB,EAAOjgB,IACnD,IAAKsiB,EACH,OAGFzjB,GAASu4B,EAAAA,EAAAA,IAAkBv4B,EAAQyjB,EAAU,CAACrC,EAAOjgB,KACrDnB,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOjgB,GAAI,CAAEq3B,aAAa,KACtDx2B,EAAAA,EAAAA,IAAUhC,GAEV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQohB,EAAOjgB,IAKvC,YAJIuE,GACFlF,EAAQi4B,kBAAkB,CAAEx4B,OAAQyF,EAAKvE,MAM7C,IAAK,kBACH,OAAOu3B,EAAAA,EAAAA,IAAU14B,EAAQohB,EAAOjgB,IAGlC,IAAK,kBACH,OAAO2V,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOjgB,GAAIigB,EAAO1b,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEvE,EAAF,aAAMw3B,GAAiBvX,EAW7B,OAVApf,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQmB,EAAI,CAAEw3B,aAAAA,UAEnChyB,YAAW,KACT3G,GAAS4G,EAAAA,EAAAA,MACT,MAAMlB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQmB,GAC5BuE,GAAQizB,GAAgBjzB,EAAKizB,cAAgBjzB,EAAKizB,aAAalY,YAAckY,EAAalY,YAC5Fze,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQmB,EAAI,CAAEw3B,kBAAcr4B,OA1DzB,KAiE9B,IAAK,aAAc,CACjB,MAAM,QAAEiD,GAAY6d,GACZnhB,OAAQ+jB,EAAV,SAAyB9jB,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GAEvG,GAAIuD,EAAQmM,WAAa1P,EAAO+X,gBAAkBxU,EAAQq1B,gBACxD,OAGF,MAAMlzB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQohB,EAAOnhB,QACvC,IAAKyF,EACH,OA2BF,MAvBsB,WAApBwB,GACGhH,IAAakB,EAAAA,IACbggB,EAAOnhB,SAAW+jB,EAIrBrd,YAAW,KACTnG,EAAQi4B,kBAAkB,CAAEx4B,OAAQmhB,EAAOnhB,WApFnB,OAuF1B+B,EAAAA,EAAAA,KAAU8U,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOnhB,OAAQ,CAC1CiY,YAAaxS,EAAKwS,YAAcxS,EAAKwS,YAAc,EAAI,KACnDkJ,EAAO7d,QAAQs1B,kBAAoB,CACrCC,oBAAqBpzB,EAAKozB,oBAAsBpzB,EAAKozB,oBAAsB,EAAI,WAKrFC,EAAAA,GAAAA,IAAmB,CACjBrzB,KAAAA,EACAnC,QAAAA,IAMJ,IAAK,gBAAiB,CACpB,MAAM,QAAEA,GAAY6d,EACd1b,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQohB,EAAOnhB,QACvC,IAAKyF,EACH,OAWF,aARIszB,EAAAA,EAAAA,IAAyBz1B,KAC3Bw1B,EAAAA,GAAAA,IAAmB,CACjBrzB,KAAAA,EACAnC,QAAAA,EACA01B,YAAY,KAOlB,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAE1xB,EAAF,cAAO2xB,GAAkB9X,EAC/B,IAAuC,IAAnC8X,EAAcL,iBAChB,OAaF,OAVAtxB,EAAIsB,SAAS1H,IACX,MAAMlB,EAAU,cAAemhB,EAASA,EAAO+X,WAAYC,EAAAA,EAAAA,IAAsBp5B,EAAQmB,GACnFuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC5ByF,MAAAA,GAAAA,EAAMozB,sBACR94B,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAClC64B,oBAAqBpzB,EAAKozB,oBAAsB,QAK/C94B,EAGT,IAAK,qBAAsB,CACzB,MAAM,SAAEma,GAAaiH,EACfwB,EAAa5iB,EAAO4L,MAAMiG,KAAKuP,EAAOjgB,IAC5C,IAAKyhB,EACH,OAGF,OAAO9L,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOjgB,GAAI,CACnCgZ,SAAU,IACLyI,EAAWzI,YACXA,KAKT,IAAK,sBAAuB,CAC1B,MAAM,IAAE5S,EAAF,SAAO8xB,GAAajY,EACpBqC,EAAW4V,IAAaC,EAAAA,GAAqB,WAAa,SAEhE,MAAO,IACFt5B,EACH4L,MAAO,IACF5L,EAAO4L,MACV2tB,iBAAkB,IACbv5B,EAAO4L,MAAM2tB,iBAChB,CAAC9V,GAAWlc,EAAI/B,OAAS+B,OAAMjH,KAMvC,IAAK,mBAAoB,CACvB,MAAM,GAAEa,EAAF,SAAMq4B,GAAapY,EACnBqC,GAAW6U,EAAAA,EAAAA,IAAmBt4B,EAAQmB,GAC5C,IAAKsiB,EACH,OAGF,MAAQ,CAACA,GAAW8V,GAAqBv5B,EAAO4L,MAAM2tB,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoB1xB,SAAS5G,GAAK,CAK5C,GAAiB,WAAbsiB,GAAyBgW,EAAoBj0B,QAAUk0B,EAAAA,GAAyB,CAClF,MAAMC,EAAU35B,EAAO4L,MAAM+tB,QAAQC,OACrCH,EAAsBA,EAAoBn2B,QAAQu2B,GAAaF,GAAWA,EAAQ5xB,SAAS8xB,KAG7FJ,EAAsB,CAACt4B,KAAOs4B,SAX9BA,EAAsBA,EAAoBn2B,QAAQu2B,GAAaA,IAAa14B,IAc9E,MAAO,IACFnB,EACH4L,MAAO,IACF5L,EAAO4L,MACV2tB,iBAAkB,IACbv5B,EAAO4L,MAAM2tB,iBAChB,CAAC9V,GAAWgW,EAAoBj0B,OAASi0B,OAAsBn5B,KAMvE,IAAK,qBAAsB,CACzB,MAAM,GAAEa,EAAF,SAAMk4B,GAAajY,EAEzB,OAAO0Y,EAAAA,EAAAA,IAAmB95B,EAAQmB,EAAIk4B,GAGxC,IAAK,mBAAoB,CACvB,MAAM,GAAEl4B,EAAF,OAAM44B,GAAW3Y,GACfvP,KAAMmoB,EAAR,WAAyB13B,GAAetC,EAAOi6B,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAAC74B,GAAK44B,IAC5BI,EAAAA,EAAAA,IACAH,EACA50B,OAAOC,KAAK20B,GAAiB32B,IAAIoC,QAAQnC,QAAQ+1B,GAAaA,IAAal4B,KAGzEi5B,EAAgBL,EAClBz3B,GAAcA,EAAWyF,SAAS5G,GAAMmB,EAAa,IAAKA,GAAc,GAAKnB,GAC7EmB,EAAaA,EAAWgB,QAAQ+2B,GAAcA,IAAcl5B,SAAMb,EAEtE,MAAO,IACFN,EACHi6B,YAAa,IACRj6B,EAAOi6B,YACVpoB,KAAMqoB,EACN53B,WAAY83B,IAKlB,IAAK,yBAA0B,CAC7B,MAAM,WAAE93B,GAAe8e,EAEvB,MAAO,IACFphB,EACHi6B,YAAa,IACRj6B,EAAOi6B,YACV33B,WAAAA,IAKN,IAAK,+BAAgC,CACnC,MAAM,QAAEg4B,GAAYlZ,EAEpB,MAAO,IACFphB,EACHi6B,YAAa,IACRj6B,EAAOi6B,YACVM,YAAaD,IAKnB,IAAK,oBAAqB,OACxB,MAAM1X,EAAa5iB,EAAO4L,MAAMiG,KAAKuP,EAAOjgB,KACtC,gBAAEq5B,EAAF,YAAmBC,EAAnB,gBAAgCC,GAAoBtZ,EAC1D,IAAKwB,EACH,OAGF,IAAI+X,GAAe,EACfC,EAAU,UAAAhY,EAAWzI,gBAAX,SAAqBygB,QAC/B,IAAIhY,EAAWzI,SAASygB,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQp1B,QACLo1B,EAAQjF,MAAMnc,GAAMA,EAAE9M,SAAW+tB,EAAY/tB,WAEjDkuB,EAAQ32B,KAAKw2B,GACbE,GAAe,QAEZ,GAAIC,EAAQp1B,QAAUk1B,EAAiB,CAC5C,MAAMG,EAAcD,EAAQnsB,WAAW+K,GAAMA,EAAE9M,SAAWguB,IACtDG,GAAe,IACjBD,EAAQ7wB,MAAM8wB,EAAa,GAC3BF,GAAe,GAInB,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQt3B,QAAO,QAAC,QAAEy3B,EAAF,QAAWC,GAAZ,SAA0BD,GAAWC,KAGzE,OAAOlkB,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOjgB,GAAI,CACnC85B,aAAcL,EAAQp1B,OACtB2U,SAAU,IACLyI,EAAWzI,SACdygB,QAAAA,EACAE,aAAAA,KAKN,OAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAE76B,EAAF,IAAUsH,GAAQ6Z,EAClB1b,EAAO1F,EAAO4L,MAAMiG,KAAK5R,GAE/B,OAAIyF,MAAAA,GAAAA,EAAM+iB,QACD3R,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAChCwoB,OAAQ/iB,EAAK+iB,OAAOnlB,QAAQ8hB,IAAW7d,EAAIQ,SAASqd,EAAMjkB,aAI9D,EAGF,IAAK,eAAgB,CACnB,MAAM,OACJlB,EADI,cACIi7B,EADJ,KACmB/wB,EADnB,aACyBnF,GAC3Boc,EAEJ,IADaphB,EAAO4L,MAAMiG,KAAK5R,GAE7B,OAMF,OAHAD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,QAAS85B,GACrEl7B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB4D,GAC5EhF,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAE8W,UAAW5M,IAInD,IAAK,aAAc,CACjB,MAAM,KAAEyE,GAASwS,EAIjB,YAFA5gB,EAAQmqB,WAAW,CAAE/b,KAAAA,IAKvB,IAAK,4BAA6B,CAChC,MAAM,OAAE3O,EAAF,gBAAU8iB,EAAV,mBAA2BD,GAAuB1B,EAClD1b,EAAO1F,EAAO4L,MAAMiG,KAAK5R,GAC/B,IAAKyF,EACH,OAGF1F,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAClCka,SAAU,IACLzU,EAAKyU,SACR4I,gBAAAA,EACAD,mBAAAA,MAGJ9gB,EAAAA,EAAAA,IAAUhC,GAEVQ,EAAQ26B,qBAAqB,CAAEl7B,OAAAA,SCnVrC,MAAMm7B,GAAkB,IAgdxB,SAASC,GACPr7B,EAAqBC,EAAgBkB,EAAYoC,GACjD,IAD+E+3B,EAC/E,wDAEA,MAAMC,EAAiBD,GACnBzhB,EAAAA,EAAAA,IAAuB7Z,EAAQC,EAAQkB,IACvCoO,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GACtC,GAAIo6B,GAAkBh4B,EAAQ+G,QAAS,CACrC,MAAM,MACJ8a,EADI,MACGoW,EADH,QACU1tB,EADV,SACmB2tB,IACrBC,EAAAA,EAAAA,IAAkBH,GAClBnW,GAAS7hB,EAAQ+G,QAAQ8a,OAC3B7hB,EAAQ+G,QAAQ8a,MAAMuW,QAAUvW,EAAMuW,QACtCp4B,EAAQ+G,QAAQ8a,MAAMwW,UAAYxW,EAAMwW,WAC/BJ,GAASj4B,EAAQ+G,QAAQkxB,MAClCj4B,EAAQ+G,QAAQkxB,MAAMG,QAAUH,EAAMG,QAC7B7tB,GAAWvK,EAAQ+G,QAAQwD,QACpCvK,EAAQ+G,QAAQwD,QAAQ+tB,oBAAsB/tB,EAAQ+tB,oBAC7CJ,GAAYl4B,EAAQ+G,QAAQmxB,WACrCl4B,EAAQ+G,QAAQmxB,SAASK,eAAiBL,EAASK,gBAIvD,OAAOR,GACHS,EAAAA,EAAAA,IAAuB/7B,EAAQC,EAAQkB,EAAIoC,IAC3CwR,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQkB,EAAIoC,GAG5C,SAASy4B,GAAmBh8B,EAAqBQ,EAAwB+C,EAAqB2R,GAC5F,MAAM,OAAEjV,GAAWsD,GAEb,WAAEsC,IAAeo2B,EAAAA,EAAAA,IAAsBj8B,EAAQC,EAAQsD,IAAY,GAEzE,IAAKsC,GAActC,EAAQyR,iBAAkB,CAC3C,MAAMknB,GAAgB3sB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsD,EAAQyR,kBAC5DknB,EACFl8B,GAASmV,EAAAA,EAAAA,IAAuCnV,EAAQk8B,EAAej8B,EAAQsD,EAAQpC,GAAI+T,GAE3F1U,EAAQyU,YAAY,CAClBhV,OAAAA,EACAsE,UAAWhB,EAAQyR,iBACnBJ,aAAc,CACZM,WAAAA,EACAnP,cAAexC,EAAQpC,MAM/B,OAAOnB,EAGT,SAASm8B,GAA2Bn8B,EAAqBQ,EAAwB+C,GAC/E,MAAM,GAAEpC,EAAF,OAAMlB,GAAWsD,GAEjB,WAAEsC,EAAF,eAAcu2B,IAAmBH,EAAAA,EAAAA,IAAsBj8B,EAAQC,EAAQsD,IAAY,GAEnFmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1Bo8B,GAAwB32B,MAAAA,OAAA,EAAAA,EAAMwS,gBAAgB5F,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQmB,EAAAA,IAwBpF,GAtBApB,EAASg8B,GAAmBh8B,EAAQQ,EAAS+C,GAEzCsC,KACEu2B,IAAmB/G,EAAAA,EAAAA,IAAe9xB,KACpCvD,GAASiS,EAAAA,EAAAA,IAAgBjS,EAAQC,EAAQ4F,EAAW3F,SAAU,CAACiB,KAE3D+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQ4F,EAAW3F,YACpDF,GAASs8B,EAAAA,EAAAA,IAAct8B,EAAQC,EAAQ4F,EAAW3F,SAAUiB,GAEvDi7B,IACHp8B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,iBAAkBqD,EAAQpC,OAKjGnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,aAAc,IAC1E2F,EACHE,cAAexC,EAAQpC,GACvBo7B,cAAe12B,EAAW02B,cAAgB,KAI1CF,EACF,OAAOr8B,EAKT,GAFAA,GAASiS,EAAAA,EAAAA,IAAgBjS,EAAQC,EAAQmB,EAAAA,GAAgB,CAACD,KAEtD+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQmB,EAAAA,IAAiB,CAE1D,MAAMo7B,GAAgBvkB,EAAAA,EAAAA,IAAoBjY,EAAQC,EAAQmB,EAAAA,IACpDq7B,GAAkBH,EAAAA,EAAAA,IAAct8B,EAAQC,EAAQmB,EAAAA,GAAgBD,GAChEwR,GAAiBhO,EAAAA,EAAAA,IAAkB83B,EAAiBx8B,EAAQmB,EAAAA,IAE7Do7B,IAAiB7pB,EAAgB5K,SAASy0B,KAC7Cx8B,EAASy8B,GAIb,OAAOz8B,EAGT,SAAS08B,GACP18B,EACAC,EACAsD,GAEA,UADAo5B,EACA,wDACA,MAAM,MAAE/wB,GAAU5L,EACZ48B,EAAkB,UAAGhxB,EAAMiG,KAAK5R,UAAd,aAAG,EAAoB2F,YAE/C,OAAIg3B,GAAuBD,GAEvBC,EAAmBz7B,KAAOoC,EAAQpC,IAAMy7B,EAAmBz7B,KAAOoC,EAAQyH,iBACvEzH,EAAQpC,GAAKy7B,EAAmBz7B,IAOhC2V,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAE2F,YAAarC,IAJtCvD,EAOb,SAAS68B,GAAgB78B,EAAqBC,GAC5C,MAAM4R,GAAO1O,EAAAA,EAAAA,IAAmBnD,EAAQC,GAClCoS,GAAYC,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQmB,EAAAA,IAElD,IAAKyQ,IAASQ,EACZ,OAGF,IAAIW,EAAIX,EAAU7M,OAClB,KAAOwN,KAAK,CACV,MAAMzP,EAAUsO,EAAKQ,EAAUW,IAC/B,IAAKzP,EAAQ2R,WACX,OAAO3R,GAOb,SAASu5B,GAAe78B,EAA4BsH,EAAe/G,EAAwBR,GAGzF,GAAIC,EAAQ,CACVsH,EAAIsB,SAAS1H,IAKX,MAAM47B,EAAiBF,GAJvB78B,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQkB,EAAI,CAC7C+T,YAAY,IAGiCjV,GAC3C88B,IACF/8B,EAAS08B,GAAsB18B,EAAQC,EAAQ88B,GAAgB,OAInEv8B,EAAQi4B,kBAAkB,CAAEx4B,OAAAA,IAE5B,MAAM+8B,EAA8B,GA0BpC,OAxBAz1B,EAAIsB,SAAS1H,IACX,MAAMoC,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GAClD,IAAKoC,EACH,OAGFvD,EAASg8B,GAAmBh8B,EAAQQ,EAAS+C,GAAS,GAEtD,MAAM,WAAEsC,IAAeo2B,EAAAA,EAAAA,IAAsBj8B,EAAQC,EAAQsD,IAAY,GACrEsC,GACFm3B,EAAkB/4B,KAAK4B,EAAW3F,cAItC8B,EAAAA,EAAAA,IAAUhC,QAEV2G,YAAW,MACT3E,EAAAA,EAAAA,KAAUi7B,EAAAA,EAAAA,KAAmBr2B,EAAAA,EAAAA,MAAa3G,EAAQsH,KAElDuR,EAAAA,EAAAA,IAAOkkB,GAAmBn0B,SAAS3I,IACjCM,EAAQ08B,wBAAwB,CAAEj9B,OAAAA,EAAQC,SAAAA,SAE3Ck7B,IAOL,MAAM+B,EAA6B,GAEnC51B,EAAIsB,SAAS1H,IACX,MAAMi8B,GAAkBhE,EAAAA,EAAAA,IAAsBp5B,EAAQmB,GACtD,GAAIi8B,EAAiB,CACnBD,EAAiBl5B,KAAKm5B,GAMtB,MAAML,EAAiBF,GAJvB78B,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQo9B,EAAiBj8B,EAAI,CACtD+T,YAAY,IAGiCkoB,GAC3CL,IACF/8B,EAAS08B,GAAsB18B,EAAQo9B,EAAiBL,GAAgB,IAG1Ep2B,YAAW,MACT3E,EAAAA,EAAAA,KAAUi7B,EAAAA,EAAAA,KAAmBr2B,EAAAA,EAAAA,MAAaw2B,EAAiB,CAACj8B,OAC3Di6B,SAIPp5B,EAAAA,EAAAA,IAAUhC,IAEV8Y,EAAAA,EAAAA,IAAOqkB,GAAkBt0B,SAAS1H,IAChCX,EAAQi4B,kBAAkB,CAAEx4B,OAAQkB,QAtqBxCZ,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJnhB,EADI,GACIkB,EADJ,QACQoC,EADR,iBACiB85B,GACnBjc,EAEJphB,EAASm8B,GADTn8B,EAASq7B,GAAqBr7B,EAAQC,EAAQkB,EAAIoC,GACN/C,EAAS+C,GAEjDA,EAAQsC,aACV7F,GAASs9B,EAAAA,EAAAA,IACPt9B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,aAIZ,MAAM03B,GAAahuB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GAErD,IAAIq8B,EAAAA,EAAAA,IAAoCx9B,EAAQC,EAAQsD,GAAwB,OAC9E,GAAIA,EAAQiH,aAAc,UAAEjH,EAAQ+G,eAAV,QAAE,EAAiBwC,QAAS,CACpD,MAAMvL,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAChDuB,GAEFf,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAUqB,EAAmBrB,SAC7BqE,UAAWhB,EAAQpC,GACnB0F,aAAa,EACbS,qBAAqB,IAK3B,MAAM,WAAEzB,IAAeo2B,EAAAA,EAAAA,IAAsBj8B,EAAQC,EAAQsD,IAA0B,GACnFsC,GACFrF,EAAQ08B,wBAAwB,CAAEj9B,OAAAA,EAAQC,SAAU2F,EAAW3F,YAI5Dm1B,EAAAA,EAAAA,IAAe9xB,IAClBoD,YAAW,KACT,IAAI82B,GAAgB72B,EAAAA,EAAAA,MAChBy2B,IACFI,GAAgBj8B,EAAAA,EAAAA,IAAmBi8B,EAAex9B,EAAQmB,EAAAA,GAAgB,eAAgBD,KAE5Fa,EAAAA,EAAAA,IAAU06B,GAAsBe,EAAex9B,EAAQs9B,MACtDnC,SAGLp7B,EAAS08B,GAAsB18B,EAAQC,EAAQs9B,IAGjDv7B,EAAAA,EAAAA,IAAUhC,IAGLm4B,EAAAA,EAAAA,GAAmBn4B,EAAQC,IAC9BO,EAAQ43B,eAGV,MAGF,IAAK,8BAA+B,OAClC,MAAQn4B,OAAQ+jB,IAAkB7jB,EAAAA,EAAAA,IAAyBH,IAAW,GAEtE,GAAIgkB,IAAkB5C,EAAOjgB,GAAI,OACjC,MAAMoC,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQgkB,EAAe5C,EAAO7c,WAEhE,IAAKhB,EAAS,OAGd,IAAIm6B,EAAAA,EAAAA,IAAen6B,KAAa6d,EAAO1T,MAAO,OAE9C,MAAMiwB,GAAaC,EAAAA,EAAAA,IAAyB59B,EAAQohB,EAAO1T,OAE3D1N,EAAS,IACJA,EACH80B,wBAAyB,IAAK90B,EAAO80B,yBAA2B,GAAK,CACnE3zB,IAAI,UAAAnB,EAAO80B,+BAAP,eAAgCtvB,SAAU,EAC9CovB,eAAgB+I,GAAaE,EAAAA,EAAAA,IAA+BF,GAAcvc,EAAO1T,MACjFnJ,UAAW6c,EAAO7c,cAItBvC,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAY6d,EAEhCphB,EAASq7B,GAAqBr7B,EAAQC,EAAQkB,EAAIoC,GAAS,GAE3D,MAAMu6B,GAAeC,EAAAA,EAAAA,IAAmB/9B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,gBAAgB0X,EAAAA,EAAAA,IAAO,IAAIglB,EAAc38B,MAErGa,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,gBAAiB,SACpB,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAY6d,EAGhC,KADuB7R,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GAEvD,OAGFnB,EAASq7B,GAAqBr7B,EAAQC,EAAQkB,EAAIoC,GAElD,MAAMg6B,GAAahuB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GACjDoC,EAAQsC,aACV7F,GAASs9B,EAAAA,EAAAA,IACPt9B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,aAGZ7F,EAAS08B,GAAsB18B,EAAQC,EAAQs9B,IAE/Cv7B,EAAAA,EAAAA,IAAUhC,GAIV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE9ByF,IACInC,EAAQiH,aACT,UAAA9E,EAAKE,mBAAL,eAAkBzE,MAAOoC,EAAQpC,KACjC68B,EAAAA,EAAAA,IAAoBh+B,EAAQ0F,KAC5B83B,EAAAA,EAAAA,IAAoCx9B,EAAQC,EAAQsD,KACpD2B,EAAAA,EAAAA,IAAuBlF,EAAQC,GAAQ,UAAAsD,EAAQsC,kBAAR,eAAoB3F,WAAYkB,EAAAA,KAE1EZ,EAAQyG,mBAGV,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEhH,EAAF,GAAUkB,EAAV,QAAcoC,GAAY6d,EAGhC,KADuBvH,EAAAA,EAAAA,IAAuB7Z,EAAQC,EAAQkB,GAE5D,OAGFnB,EAASq7B,GAAqBr7B,EAAQC,EAAQkB,EAAIoC,GAAS,GAC3D,MAAMgE,EAAMnC,OAAOC,MAAK44B,EAAAA,EAAAA,IAAwBj+B,EAAQC,IAAW,IAAIoD,IAAIoC,QAAQ/B,MAAK,CAAC2V,EAAGC,IAAMA,EAAID,IACtGrZ,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBmG,IAC5EvF,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,6BAA8B,CACjC,MAAM,OAAEC,EAAF,QAAUmO,EAAV,QAAmB7K,GAAY6d,EAErCphB,EAASm8B,GAA2Bn8B,EAAQQ,EAAS+C,GAErD,MAAMg4B,GAAiBhsB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQmO,GAEzDpO,GAASi9B,EAAAA,EAAAA,IAAmBj9B,EAAQC,EAAQ,CAACmO,IAGzC7K,EAAQ+3B,cACVt7B,GAASk+B,EAAAA,EAAAA,IAA4Bl+B,EAAQC,EAAQ,CAACmO,KAGxDpO,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQsD,EAAQpC,GAAI,IAClDo6B,KACAh4B,EACHyH,gBAAiBoD,IAGnB,MAAMmvB,GAAahuB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsD,EAAQpC,IAC7DnB,EAAS08B,GAAsB18B,EAAQC,EAAQs9B,GAE/C,MAAMY,GAASlC,EAAAA,EAAAA,IAAsBj8B,EAAQC,EAAQsD,GAEjD46B,MAAAA,GAAAA,EAAQt4B,aACVrF,EAAQ49B,oBAAoB,CAAEzzB,MAAOpH,EAAQpC,KAE7CnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQk+B,EAAOt4B,WAAW3F,SAAU,aAAc,IACjFi+B,EAAOt4B,WACVE,cAAexC,EAAQpC,GACvBoX,uBAAwBhV,EAAQpC,OAIpCa,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,sCAAuC,CAC1C,MAAM,OAAEC,EAAF,QAAUmO,EAAV,QAAmB7K,GAAY6d,EAC/B0c,GAAeC,EAAAA,EAAAA,IAAmB/9B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB,IAAI08B,EAAcv6B,EAAQpC,KAEtG,MAAMo6B,GAAiB1hB,EAAAA,EAAAA,IAAuB7Z,EAAQC,EAAQmO,GAE9DpO,GAASk+B,EAAAA,EAAAA,IAA4Bl+B,EAAQC,EAAQ,CAACmO,IACtDpO,GAAS+7B,EAAAA,EAAAA,IAAuB/7B,EAAQC,EAAQsD,EAAQpC,GAAI,IACvDo6B,KACAh4B,EACHyH,gBAAiBoD,KAGnBpM,EAAAA,EAAAA,IAAUhC,GACV,MAGF,IAAK,kBAAmB,CACtB,MAAM,OAAEC,EAAF,SAAUu5B,EAAV,WAAoBz2B,GAAeqe,EAEnCid,GAAmBC,EAAAA,EAAAA,IAAgBt+B,EAAQC,IAAW,GACtDs+B,EAAe/E,EACjB,IAAI6E,KAAqBt7B,GAAYW,MAAK,CAAC2V,EAAGC,IAAMA,EAAID,IACxDglB,EAAiB/6B,QAAQnC,IAAQ4B,EAAWgF,SAAS5G,MAEzDa,EAAAA,EAAAA,KAAUR,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,YAAam9B,IAE1E,MAGF,IAAK,mBAAoB,CACvB,MAAM,OACJt+B,EADI,SACIC,EADJ,WACc2F,EADd,eAC0Bu2B,GAC5Bhb,EAGEod,EAAe,KADK14B,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,MAGtD2F,GAGL,IAAK24B,EAAat+B,SAChB,OAGFF,GAASs9B,EAAAA,EAAAA,IAAiBt9B,EAAQC,EAAQC,EAAUs+B,GAEhDpC,IACFp8B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,iBAAkBk8B,KAG1Ep6B,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,gBAAiB,CACpB,MAAQmB,GAAIlB,GAAWmhB,EACjBqd,GAAet7B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE5Cw+B,KAAiBjW,EAAAA,EAAAA,IAASvoB,KAC5BD,GAASi9B,EAAAA,EAAAA,IAAmBj9B,EAAQC,EAAQmF,OAAOC,KAAKo5B,GAAcp7B,IAAIoC,UAC1EzD,EAAAA,EAAAA,IAAUhC,GACVQ,EAAQk+B,aAAa,CAAEz+B,OAAAA,EAAQ08B,OAAO,KAGxC,MAGF,IAAK,iBAAkB,CACrB,MAAM,IAAEp1B,EAAF,OAAOtH,GAAWmhB,EAExB0b,GAAe78B,EAAQsH,EAAK/G,EAASR,GACrC,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEuH,EAAF,OAAOtH,GAAWmhB,GAoZ9B,SACEnhB,EAA4BsH,EAAe/G,EAAwBR,GAE9DC,IAILsH,EAAIsB,SAAS1H,IACXnB,GAAS+7B,EAAAA,EAAAA,IAAuB/7B,EAAQC,EAAQkB,EAAI,CAClD+T,YAAY,QAIhBlT,EAAAA,EAAAA,IAAUhC,GAEV2G,YAAW,KACT3G,GAASk+B,EAAAA,EAAAA,KAA4Bt3B,EAAAA,EAAAA,MAAa3G,EAAQsH,GAC1D,MAAMo3B,GAAoBV,EAAAA,EAAAA,IAAwBj+B,EAAQC,GAC1DD,GAASwB,EAAAA,EAAAA,IACPxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBgE,OAAOC,KAAKs5B,GAAqB,IAAIt7B,IAAIoC,UAE3FzD,EAAAA,EAAAA,IAAUhC,KACTo7B,KAxaCwD,CAAwB3+B,EAAQsH,EAAK/G,EAASR,GAC9C,MAGF,IAAK,gBAAiB,CACpB,MAAM,OAAEC,GAAWmhB,EACble,EAAelD,EAAO2B,SAAS+G,SAASzI,GAC1CiD,EAEF45B,GAAe78B,EADHmF,OAAOC,KAAKnC,EAAa2O,MAAMxO,IAAIoC,QACnBjF,EAASR,GAErCQ,EAAQi4B,kBAAkB,CAAEx4B,OAAAA,IAG9B,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEsH,EAAF,cAAO2xB,GAAkB9X,EAE/B7Z,EAAIsB,SAAS1H,IACX,MAAMlB,GAASm5B,EAAAA,EAAAA,IAAsBp5B,EAAQmB,GACzClB,IACFD,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQkB,EAAI+3B,QAInDl3B,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,wBAAyB,CAC5B,MAAM,UAAEm5B,EAAF,IAAa5xB,EAAb,cAAkB2xB,GAAkB9X,EAE1C7Z,EAAIsB,SAAS1H,IACXnB,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQm5B,EAAWh4B,EAAI+3B,OAGpDl3B,EAAAA,EAAAA,IAAUhC,GAEV,MAGF,IAAK,oBAAqB,CACxB,MAAM,OAAE6+B,EAAF,WAAUC,GAAe1d,EAEzB7d,GAAUw7B,EAAAA,EAAAA,IAA0B/+B,EAAQ6+B,GAElD,GAAIt7B,MAAAA,GAAAA,EAAS+G,QAAQoP,KAAM,CACzB,MAAMslB,EAAc,IAAKz7B,EAAQ+G,QAAQoP,QAASolB,IAG1CxyB,QAAS2yB,GAAmBD,EAAY1yB,SAAW,GAC3D,GAAI2yB,IAAmBA,EAAetJ,MAAOvyB,GAAWA,EAAOwyB,WAAY,CACzE,MAAM,QAAEtpB,GAAY/I,EAAQ+G,QAAQoP,KAAKpN,QACnC4yB,EAAgB5yB,GAAWA,EAAQhJ,QAAQF,GAAWA,EAAOwyB,WAC/DsJ,GACFA,EAAcr2B,SAASs2B,IACrB,MAAMC,EAAoBH,EAAexwB,WAAWrL,GAAWA,EAAOuV,SAAWwmB,EAAaxmB,SAC1FymB,GAAqB,IACvBJ,EAAY1yB,QAAQA,QAAS8yB,GAAmBxJ,UAAW,OAMnE5zB,EAAAA,EAAAA,KAAU+S,EAAAA,EAAAA,IACR/U,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACEmJ,QAAS,IACJ/G,EAAQ+G,QACXoP,KAAMslB,MAKd,MAGF,IAAK,wBAAyB,CAC5B,MAAM,OAAEH,EAAF,OAAUnyB,EAAV,QAAkBgM,GAAY0I,EAC9B7d,GAAUw7B,EAAAA,EAAAA,IAA0B/+B,EAAQ6+B,GAClD,IAAKt7B,IAAYA,EAAQ+G,QAAQoP,OAASnW,EAAQ+G,QAAQoP,KAAKpN,QAC7D,MAGF,MAAM,KAAEoN,GAASnW,EAAQ+G,SAEnB,eAAE+0B,EAAF,YAAkBC,EAAlB,QAA+BhzB,GAAYoN,EAAKpN,QAChDizB,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjDzS,EAAavgB,EAAU,IAAIA,GAAW,GAE5CizB,EAAkBt7B,KAAKyI,GAEvBgM,EAAQ7P,SAAS8P,IACf,MAAM8mB,EAAe5S,EAAW/jB,MAAM1F,GAAWA,EAAOuV,SAAWA,IAC7D+mB,EAAoB7S,EAAWpe,WAAWrL,GAAWA,EAAOuV,SAAWA,IACvEgnB,EAA+BF,EAAe,IAAKA,GAAiB,CAAE9mB,OAAAA,EAAQinB,YAAa,GAEjGD,EAAcC,aAAe,EACzBlzB,IAAW1M,EAAO+X,gBACpB4nB,EAAc/J,UAAW,GAGvB8J,EACF7S,EAAW6S,GAAqBC,EAEhC9S,EAAW5oB,KAAK07B,OAIpB39B,EAAAA,EAAAA,KAAU+S,EAAAA,EAAAA,IACR/U,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACEmJ,QAAS,IACJ/G,EAAQ+G,QACXoP,KAAM,IACDA,EACHpN,QAAS,IACJoN,EAAKpN,QACR+yB,eAAgBE,EAChBD,YAAaE,EACblzB,QAASugB,QAOnB,MAGF,IAAK,4BAA6B,CAChC,MAAM,QAAEtpB,GAAY6d,GAEhBye,EAAAA,EAAAA,IAAyB7/B,IAC3BQ,EAAQiK,0BAA0B,CAAElH,QAAAA,IAGtC,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEtD,EAAF,GAAUkB,EAAV,UAAcu0B,GAActU,EAC5B7d,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GAC5CuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQohB,EAAOnhB,QACjC6/B,EAAmBv8B,MAAAA,OAAH,EAAGA,EAASmyB,UAGlC,GAAIoK,GAAoB1I,GAAa1B,EAAWoK,GAC9C,OAIF,MAAMC,GAAeC,EAAAA,EAAAA,IAAqBF,EAAkBpK,EAAW11B,EAAO+X,eAM9E,GAJA/X,GAAS+U,EAAAA,EAAAA,IAAkB/U,EAAQC,EAAQkB,EAAI,CAAEu0B,UAAWtU,EAAOsU,aAEnE1zB,EAAAA,EAAAA,IAAUhC,GAEN+/B,EAAc,CAChB,MAAMxC,GAAahuB,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQkB,GACrD,IAAKuE,IAAS63B,EAAY,QAErBxE,EAAAA,GAAAA,IAAmB,CACtBrzB,KAAAA,EACAnC,QAASg6B,EACTtE,YAAY,IAIhB,WCrfN,MAEMgH,IAA8BvlB,EAAAA,EAAAA,KASpC,WACE,MAAM1a,GAAS4G,EAAAA,EAAAA,OAEf5E,EAAAA,EAAAA,KAAU0kB,EAAAA,EAAAA,IAAoB1mB,EAAQ,IACjCA,EAAOwR,MAAMmV,gBACbuZ,MAGLA,GAAuB,KAnBM,KAE0D,GAEzF,IAAIA,GAAsD,IAkB1D3/B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOiH,EAAAA,EAAAA,IAAcroB,EAAQohB,EAAOjgB,IAGtC,IAAK,aACH,OAAO0mB,EAAAA,EAAAA,IAAW7nB,EAAQohB,EAAOjgB,GAAIigB,EAAOrI,MAG9C,IAAK,mBAGH,OA7BwBrM,EA4BH0U,EAAO1U,OA5BYyzB,EA4BJ/e,EAAOkR,OA3B/C4N,GAAqBxzB,GAAUyzB,OAC/BF,KA8BE,IAAK,qBAAsB,CACzB,MAAM,GAAE9+B,EAAF,SAAMgZ,GAAaiH,EACnBgf,EAAapgC,EAAOwR,MAAMK,KAAK1Q,GACrC,IAAKi/B,EACH,OAGF,OAAOvY,EAAAA,EAAAA,IAAW7nB,EAAQmB,EAAI,CAC5BgZ,SAAU,IACLimB,EAAWjmB,YACXA,KAKT,IAAK,sBAAuB,OAC1B,MAAM,MAAE3K,EAAF,OAASwb,GAAW5J,EAEpBgf,GAAalmB,EAAAA,EAAAA,IAAWla,EAAQwP,GACtC,GAAK4wB,MAAAA,GAAD,UAACA,EAAYjmB,gBAAb,QAAC,EAAsBkmB,QACzB,OAGF,OAAOxY,EAAAA,EAAAA,IAAW7nB,EAAQwP,EAAO,CAC/B2K,SAAU,IACLimB,EAAWjmB,SACdkmB,QAAS,IACJD,EAAWjmB,SAASkmB,QACvBC,WAAYtV,OA5DxB,IAA8Bte,EAAgByzB,MCV9C5/B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO5E,EAAAA,EAAAA,IAAiBxc,EAAQohB,EAAOjgB,GAAIigB,EAAOhF,gBCCxD7b,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAAW,MACzD,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOmf,WACFC,EAAAA,EAAAA,KAAkB55B,EAAAA,EAAAA,MAAawa,EAAOjgB,KAEtCgrB,EAAAA,EAAAA,KAAqBvlB,EAAAA,EAAAA,MAAawa,EAAOjgB,IAGpD,IAAK,0BACHa,EAAAA,EAAAA,IAAU,KACL4E,EAAAA,EAAAA,MACHmgB,YAAa,CACXjH,QAAS,MAGb,MAEF,IAAK,yBACHtf,EAAQqb,uBACR,MAEF,IAAK,gBACH7b,EAAOgjB,SAASyd,QAAQrf,EAAOsf,KAAwBtf,EAAOuf,MAC9D,MAEF,IAAK,kCACH3gC,GAAS4gC,EAAAA,EAAAA,KAAqBh6B,EAAAA,EAAAA,MAAawa,EAAOjS,KAClDnP,GAASwvB,EAAAA,EAAAA,IAAexvB,EAAQyvB,EAAAA,GAAAA,iBAChCztB,EAAAA,EAAAA,IAAUhC,GACV,MAEF,IAAK,2BACC,UAAAA,EAAO0tB,cAAP,eAAeN,WAAYhM,EAAOgM,UACpC5sB,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQqtB,oBCvChBttB,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOyf,EAAAA,EAAAA,IAAqB7gC,EAAQohB,EAAO0f,SAAU1f,EAAOhK,SAAUgK,EAAO2f,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJ9gC,EADI,QACIoG,EADJ,SACa+Q,EADb,mBACuB2pB,GACzB3f,EACSphB,EAAO4L,MAAMiG,KAAK5R,KAG7BD,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQC,EAAQ,CAAEoG,QAAAA,MAGxCrE,EAAAA,EAAAA,KAAUg/B,EAAAA,EAAAA,IAAmBhhC,EAAQC,EAAQ,CAAEoG,QAAAA,EAAS+Q,SAAAA,EAAU2pB,mBAAAA,KAClE,YCnBNxgC,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFphB,EACHihC,cAAe,IACVjhC,EAAOihC,cACVrjB,WAAW,EACXkR,uBAAwB1N,EAAO5b,SAKrC,IAAK,mBACH,MAAO,IACFxF,EACHihC,cAAe,IACVjhC,EAAOihC,cACV5wB,MAAO+Q,EAAO7d,c,2BCVxBhD,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBACH,MAAoC,cAAhCA,EAAO8f,KAAKC,gBACVnhC,EAAOohC,WAAWC,uBACpB7gC,EAAQ8gC,eAAe,CAAEC,cAAc,KAGhCC,EAAAA,GAAAA,IAAgBxhC,EAAQohB,EAAO8f,KAAK//B,KAIxCsgC,EAAAA,GAAAA,IAAgBzhC,EACrBohB,EAAO8f,KAAK//B,IACZ80B,EAAAA,EAAAA,IAAK7U,EAAO8f,KAAM,CAAC,yBACnB5gC,EACA8gB,EAAO8f,KAAKQ,mBAEhB,IAAK,wBAAyB,CAC5B,MAAMh8B,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQohB,EAAOnhB,QASvC,OARIyF,IACF1F,GAAS8W,EAAAA,EAAAA,IAAW9W,EAAQohB,EAAOnhB,OAAQ,CACzCka,SAAU,IACLzU,EAAKyU,SACRwnB,YAAavgB,EAAO8f,KAAK//B,OAIxBnB,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAE2hC,EAAF,aAAeC,EAAf,WAA6B3oB,GAAemI,GAC5C,cAAErJ,GAAkB/X,EAgB1B,OAbAA,GAAS4G,EAAAA,EAAAA,MACTg7B,EAAa/4B,SAASg5B,IAChBA,EAAY1gC,KACdnB,GAAS8hC,EAAAA,GAAAA,IACP9hC,EAAQ2hC,EAAaE,EAAY1gC,GAAI0gC,EAAa/8B,QAAQmU,IAAelB,IAAkB8pB,EAAY1gC,QAIzG8X,IACFjZ,GAASyhC,EAAAA,GAAAA,IAAgBzhC,EAAQ2hC,EAAa,CAC5C1oB,WAAAA,KAGGjZ,EAET,IAAK,kBAAmB,CACtB,IAAK+hC,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EADI,cAEJjqB,GACE/X,EAEJ,GAAIgiC,EAAW,OAEf,MAAM,KAAEd,GAAS9f,EAGjB,IAFmB8f,MAAAA,OAAA,EAAAA,EAAM5f,WAAYvJ,GAEH,cAAfmpB,EAAKe,MAMtB,OALAC,EAAAA,GAAAA,IAAgB,CACdhB,KAAAA,EACAnoB,MAAMopB,EAAAA,GAAAA,IAAoBniC,MAEvBoiC,EAAAA,EAAAA,MACE,IACFpiC,EACHgiC,UAAWd,EACXmB,oBAAoB,SC9E9B9hC,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAAS4gB,KAC9C,GACO,gCADCA,EAAO,SAEX,OAAOjR,EAAAA,EAAAA,IAAanQ,M,sECHX,SAASsiC,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACDC,EAAAA,EAAAA,IAAeF,IACrB,CAACA,I,eCJN,MAAMG,GAAejH,SAASkH,cAAc,yBACtCC,IAAyBF,MAAAA,QAAA,EAAAA,GAAcG,aAAa,aAAc,GAClEC,GAA6B,4EAiCnC,SAASC,GAAal1B,GACpBA,EAAEm1B,iB,iFC5BJ,MAmBA,IAAeC,EAAAA,EAAAA,KAnBqB,IAAuB,IAAtB,cAAEC,GAAoB,GACzDC,EAAAA,GAAAA,MACA,MAAMC,GAA2BC,EAAAA,EAAAA,MAQjC,IANAb,EAAAA,EAAAA,KAAU,KACJU,IACFI,EAAAA,GAAAA,GAAeF,KAEhB,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACE,0BAAKG,UAAU,wBAAuBC,EAAAA,GAAAA,IAAqBJ,O,sGCrBxD,IAAKK,GAYG,SAASC,GACtB1gC,EACAm+B,EACA7d,EACAqgB,EACAC,EACAC,GAEA,IAAIvR,EAUA/vB,EAWAkC,EAWJ,OA3BE6tB,EC5BW,WACb,MAAOwR,EAAUC,IAAeC,EAAAA,EAAAA,IAASt9B,OAAOu9B,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAYr9B,OAAOu9B,UAAUC,QAM/B,OAHAx9B,OAAO09B,iBAAiB,SAAUD,GAClCz9B,OAAO09B,iBAAiB,UAAWD,GAE5B,KACLz9B,OAAO29B,oBAAoB,UAAWF,GACtCz9B,OAAO29B,oBAAoB,SAAUF,MAEtC,IAEIL,EDOiBQ,IACoB,8BAApBnD,EAEb7d,EACAmgB,GAAiBc,QAEjBd,GAAiBe,OAJjBf,GAAiBgB,kBAS1BliC,EADE+vB,IAAWmR,GAAiBe,QAAUX,EAC7B,OACFF,EACE,eACFC,EACE,YAEA,UAITtR,IAAWmR,GAAiBgB,kBAC9BhgC,EAAOzB,EAAK,qBACHsvB,IAAWmR,GAAiBc,UACrC9/B,EAAOzB,EAAK,aAGG,iBAAbT,IACFkC,EAAOA,EAAMigC,cAAc7S,QAAQ,OAAQ,KAGtC,CACL8S,iBAAkBrS,EAClBsS,yBAA0BriC,EAC1BsiC,qBAAsBpgC,I,SAvDdg/B,GAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,K,0FEYZ,MA0BA,IAAeR,EAAAA,EAAAA,KA1B+B,IAIxC,IAJyC,iBAC7C0B,EAD6C,qBAE7CE,EAF6C,QAG7CC,GACI,EACJ,MAAM9hC,GAAO+hC,EAAAA,GAAAA,KAEb,OACE,0BAAK5jC,GAAG,0BAA0B6jC,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,EAAWwkC,QAASA,GAC9E,mBAACI,GAAA,EAAD,CAASC,MAAM,UACf,0BAAK5B,UAAU,cACb,mBAAC6B,GAAA,EAAD,CAAYC,UAAWV,EAAkB5N,KAAK,cAC3C8N,IAGL,mBAACS,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,OACLJ,MAAM,qBAEN,2BAAM5B,UAAU,oBCuUxB,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MACEU,MAAO+kC,EADH,eACgB95B,EADhB,OACgC1L,EADhC,KACwCkK,GAC1CnK,EAAOsL,cACL,cAAEyM,EAAF,gBAAiBopB,EAAjB,UAAkC7d,GAActjB,GAC9C6R,KAAM6zB,GAAc1lC,EAAO4L,OAC7B,4BAAE+5B,EAAF,eAA+B9P,GAAmB71B,EAAOgjB,SAAS8S,MAExE,MAAO,CACL2P,YAAAA,EACA7nB,YAAWjS,GAAiB7G,QAAQ6G,EAAeC,OAASD,EAAehK,UAC3EoW,cAAAA,EACA2tB,UAAAA,EACAE,mBAAoB3lC,EACpB4lC,WAAY17B,EACZ2hB,OAAOga,EAAAA,EAAAA,IAAY9lC,GACnB61B,eAAAA,EACAsL,gBAAAA,EACA7d,UAAAA,EACAyiB,kBAAmBjhC,SAAQ3E,EAAAA,EAAAA,IAAyBH,IACpD2lC,4BAAAA,EACAK,eAAgBlhC,QAAQ9E,EAAO4L,MAAM+tB,QAAQC,WAtB/B4L,EAnS8B,IAsB5C,IAtB6C,QACjDl7B,EADiD,eAEjD27B,EAFiD,cAGjDC,EAHiD,iBAIjDC,EAJiD,iBAKjDC,EALiD,iBAMjDC,EANiD,QAOjDC,EAPiD,YAQjDb,EARiD,UASjD7nB,EATiD,qBAUjD2oB,EAViD,cAWjDxuB,EAXiD,mBAYjD6tB,EAZiD,WAajDC,EAbiD,MAcjD/Z,EAdiD,eAejD+J,EAfiD,UAgBjD6P,EAhBiD,gBAiBjDvE,EAjBiD,UAkBjD7d,EAlBiD,kBAmBjDyiB,EAnBiD,4BAoBjDJ,EApBiD,eAqBjDK,GACI,EACJ,MAAM,SACJ9jC,EADI,oBAEJskC,EAFI,iBAGJC,EAHI,sBAIJC,EAJI,mBAKJC,IACEjmB,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,KACP6B,EAAUt8B,IAAYu8B,EAAAA,GAAAA,SAGtBC,GAAqBC,EAAAA,EAAAA,KAAQ,IAC1BlB,GACHmB,EAAAA,EAAAA,IAAmB,IAAI1wB,KAAkB,IAAbuvB,SAC5BvlC,GACH,CAACulC,IACEoB,GAA2BF,EAAAA,EAAAA,KAAQ,IAClCH,GAAYlB,EAIVtgC,OAAO8hC,OAAOxB,GAAW7hC,QAAO,CAACsjC,EAAOzhC,KACxC0hC,EAAAA,EAAAA,IAAe1hC,IAIbA,EAAKwS,YAAcivB,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACP,EAASlB,KAEP,iBAAEf,EAAF,qBAAoBE,EAApB,yBAA0CD,GAA6BlB,GAC3E1gC,EAAMm+B,EAAiB7d,EAAWyiB,EAAmBJ,GAA8BK,GAG/EqB,EA9DoB,qBA8DA3gC,OAAO+iB,SAAS6d,SAEpCC,GAA8DR,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAES,EAAF,OAAa59B,GAAd,SACL,mBAAC07B,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,OAAQb,IAAYx5B,EAAAA,GACpBm4B,KAAK,UACLJ,MAAM,cACN5B,UAAW35B,EAAS,SAAW,GAE/Bk7B,QAAS8B,EAAUY,EAAY,IAAMlB,IACrCoB,UAAWd,EAAU5jC,EAAK,qBAAuB,uBAEjD,0BAAKugC,WAAWoE,EAAAA,GAAAA,GACd,sBACCf,GAAW,aACZL,GAAwB,qBAK7B,CAACK,EAAS5jC,EAAMsjC,EAASC,IAEtBqB,GAAoBC,EAAAA,EAAAA,KAAY,KAC/BpC,GACHS,EAAc,MAEf,CAACT,EAAaS,IAEX4B,GAAyBD,EAAAA,EAAAA,KAAY,KACzCpB,EAAiB,CAAEd,6BAA8BA,MAChD,CAACA,EAA6Bc,IAE3BsB,GAAoBF,EAAAA,EAAAA,KAAY,KACpC3lC,EAAS,CAAEf,GAAI4W,EAAezW,sBAAsB,MACnD,CAACyW,EAAe7V,IAEb8lC,GAAuBH,EAAAA,EAAAA,KAAah6B,IACxCA,EAAEo6B,kBACF,MAAMC,EAAqB,UAAVpc,EAAoB,OAAS,QAE9C2a,EAAiB,CAAE3a,MAAOoc,IAC1BzB,EAAiB,CAAE0B,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAUrS,IAAmBE,EAAAA,MACxC,CAACF,EAAgB4Q,EAAkB3a,IAEhCuc,GAAuBR,EAAAA,EAAAA,KAAY,KACvCnhC,OAAO6iB,KAAK+e,EAAAA,GAAoB,YAC/B,IAEGC,GAA0BV,EAAAA,EAAAA,KAAY,KAC1ClB,EAAmB,CAAE9lB,SAAU2nB,EAAAA,OAC9B,CAAC7B,IAEE8B,GAA0BZ,EAAAA,EAAAA,KAAY,KAC1ClB,EAAmB,CAAE9lB,SAAU6nB,EAAAA,OAC9B,CAAC/B,IAEEgC,GAAqBd,EAAAA,EAAAA,KAAY,MACrCe,EAAAA,GAAAA,GAAuB,MACvBC,EAAAA,GAAAA,OACAC,EAAAA,GAAAA,QACC,IAEGC,GAAqBlB,EAAAA,EAAAA,KAAY,KACrClB,EAAmB,CAAE9lB,SAAU7d,EAAK,6BACnC,CAACA,EAAM2jC,IAEJqC,EACJlkC,QAAQ8gC,IACLt7B,IAAYu8B,EAAAA,GAAAA,cACZv8B,IAAYu8B,EAAAA,GAAAA,SAGXoC,EAAyB3+B,IAAYu8B,EAAAA,GAAAA,SACvC7jC,EAAK,iBACLA,EAAK,UAEHkmC,GAAgBC,EAAAA,GAAW,GAAEr/B,EAAAA,mBAAwCqZ,EAAAA,GAAQimB,SAAet/B,EAAAA,GAElG,OACE,0BAAKy5B,UAAU,kBACb,0BAAKpiC,GAAG,iBAAiBoiC,UAAU,eACjC,mBAAC8F,GAAA,EAAD,CACEC,QAAS/B,EACTgC,OAAS,GAAEC,EAAAA,MAAYN,MAEvB,mBAACO,GAAA,EAAD,CACEC,KAAK,iBACL5E,QAASiD,GAER/kC,EAAK,kBAER,mBAACymC,GAAA,EAAD,CACEC,KAAK,UACL5E,QAASuB,GAET,2BAAM9C,UAAU,kBAAkBvgC,EAAK,kBACtCikC,EAA2B,GAC1B,0BAAK1D,UAAU,kBAAkB0D,IAGrC,mBAACwC,GAAA,EAAD,CACEC,KAAK,OACL5E,QAASsB,GAERpjC,EAAK,aAER,mBAACymC,GAAA,EAAD,CACEC,KAAK,WACL5E,QAASqB,GAERnjC,EAAK,aAER,mBAACymC,GAAA,EAAD,CACEC,KAAK,WACL5E,QAASkD,GAET,2BAAMzE,UAAU,kBAAkBvgC,EAAK,wBACvC,mBAAC2mC,GAAA,EAAD,CACExoC,GAAG,WACHyoC,MAAO5mC,EAAe,SAAV8oB,EAAmB,mCAAqC,mCACpE+d,QAAmB,SAAV/d,EACTge,aAAW,KAGf,mBAACL,GAAA,EAAD,CACEC,KAAK,OACL5E,QAASiE,GAER/lC,EAAK,qBAER,mBAACymC,GAAA,EAAD,CACEC,KAAK,MACLhgB,KAAMqgB,EAAAA,IAFR,cAMCZ,EAAAA,IACC,sCACE,mBAACM,GAAA,EAAD,CACEC,KAAK,cACL5E,QAASuD,GAFX,kBAMA,mBAACoB,GAAA,EAAD,CACEC,KAAK,WACL5E,QAASyD,GAFX,wBAMA,mBAACkB,GAAA,EAAD,CACEC,KAAK,WACL5E,QAAS2D,GAFX,yBAQHpB,GACC,sCACE,mBAACoC,GAAA,EAAD,CACEC,KAAK,SACLhgB,KAjOS,8BAkOTob,QAAS6D,GAHX,uBAOA,mBAACc,GAAA,EAAD,CACEC,KAAK,SACLhgB,KAzOW,qCA0OXob,QAASgE,GAAAA,IAHX,2BAUN,mBAACkB,GAAA,EAAD,CACEC,QAAQ,wBACRC,yBAAyB,aACzB3G,UAAWqC,GAAsBC,EAAa,mBAAqB,GACnEnwB,MAAOuwB,GAAkBR,EACzB0E,QAASnB,EACTprB,UAAWA,GAA0C,cAA7BgnB,EACxBwF,aAA2C,cAA7BxF,EAA2C,cAAWtkC,EACpE+pC,uBAAqD,cAA7BzF,GAAsD,UAAV9Y,EAAoB,aAAUxrB,EAClGgqC,YAAarB,EACbsB,aAAa,MACbC,SAAU1lC,QAAQ8gC,GAAsBC,GACxC4E,SAAUvE,EACVI,QAASA,EACToE,QAAS9C,EACT+C,eAA6C,cAA7B/F,EAA2CkD,OAAyBxnC,GAEnFwmC,GACC,mBAAC8D,GAAA,EAAD,CACElB,KAAK,WACL1rB,MAAO8oB,EACP0D,UAAQ,EACR5G,YAAa9+B,QAAQ8gC,GACrBrC,UAAU,cACVuB,QAAS0B,EACTqE,SAtOmB,CAAE1gC,UAAM7J,KAyO9BslC,GACC,mBAACgF,GAAA,EAAD,CACEE,aAAclF,EACdd,QAAS4B,EACT8D,UAAQ,EACRK,SA7OmB,CAAE1pC,QAAIb,MAiP/B,mBAACyqC,GAAA,EAAD,CACEnhC,OAAqC,YAA7Bg7B,EACRoG,UAAQ,EACRzH,UAAU,4BAEV,mBAAC,GAAD,CACEoB,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAASgD,W,qCC/TrB,MAkLA,IAAe7E,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MACEi6B,aACEpoB,KAAMmoB,EACN13B,WAAY2oC,EAFD,iBAGXC,GAJE,cAMJnzB,EANI,aAOJmN,EAPI,4BAQJimB,GACEnrC,EAEJ,MAAO,CACLg6B,gBAAAA,EACAiR,iBAAAA,EACAC,iBAAAA,EACAnzB,cAAAA,EACAmN,aAAAA,EACAimB,4BAAAA,KAnBc3F,EAhL2B,IASzC,IAT0C,gBAC9C4F,EAD8C,eAE9CC,EAF8C,gBAG9CrR,EAH8C,iBAI9CiR,EAJ8C,iBAK9CC,EAL8C,cAM9CnzB,EAN8C,aAO9CmN,EAP8C,4BAQ9CimB,GACI,EACJ,MAAM,gBACJG,EADI,oBAEJC,EAFI,SAGJrpC,IACEwe,EAAAA,EAAAA,MAGE8qB,GAAgBC,EAAAA,EAAAA,IAAuB,MAEvCzoC,GAAO+hC,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJtd,GACFomB,MAED,CAACpmB,EAAcomB,IAElB,MAAMI,GAAmB3E,EAAAA,EAAAA,KAAQ,IACxBkE,EACHA,EAAiB5nC,KAAKlC,GAAO64B,EAAgB74B,IAAO,KAAImC,OAAOwB,cAC/DxE,GACH,CAAC05B,EAAiBiR,IAEfU,GAAqBxI,EAAAA,GAAAA,MACrByI,GAAa7E,EAAAA,EAAAA,KAAQ,KACzB,GAAK2E,GAAqBA,EAAiBlmC,OAI3C,MAAO,CACL,CACErE,GAAI0qC,EAAAA,GACJ7tB,MAAqB,OAAdhb,EAAK+rB,KAAgB,MAAQ/rB,EAAK,sBAExC0oC,EAAiBroC,KAAI,gBAAC,GAAElC,EAAF,MAAM6c,GAAP,QAAoB,CAC1C7c,GAAAA,EACA6c,MAAAA,EACA8tB,WAAU,UAAEH,EAAmBxqC,UAArB,aAAE,EAAwB4qC,WACpCC,cAAelnC,QAAO,UAAC6mC,EAAmBxqC,UAApB,aAAC,EAAwB8qC,2BAGlD,CAACP,EAAkBC,EAAoB3oC,IAEpCkpC,GAAkBrE,EAAAA,EAAAA,KAAa90B,IACnCw4B,EAAoBx4B,EAAO,CAAEo5B,uBAAuB,MACnD,CAACZ,KAGJ/I,EAAAA,EAAAA,KAAU,KACHoJ,GAAeA,EAAWpmC,QAI3B0lC,GAAoBU,EAAWpmC,QACjC+lC,EAAoB,KAErB,CAACL,EAAkBU,EAAYL,KAElC/I,EAAAA,EAAAA,KAAU,KACR,GAAKgJ,EAAcvpB,SAAYxY,EAAAA,IAAiBmiC,GAAeA,EAAWpmC,OAI1E,OAAO4mC,EAAAA,GAAAA,IAAcZ,EAAcvpB,QAAS,CAC1CoqB,wBAAyB,aACzBC,QAAU,CAACz+B,EAAG7F,IACRA,IAAcukC,GAAAA,GAAAA,MAChBhB,EAAoB3gC,KAAKkpB,IAAIoX,EAAmB,EAAGU,EAAWpmC,OAAS,GAAI,CAAE2mC,uBAAuB,KAC7F,GACEnkC,IAAcukC,GAAAA,GAAAA,QACvBhB,EAAoB3gC,KAAKC,IAAI,EAAGqgC,EAAmB,GAAI,CAAEiB,uBAAuB,KACzE,OAMZ,CAACjB,EAAkBU,EAAYL,IAElC,MAAMiB,GAAmBf,EAAAA,EAAAA,MACzBe,EAAiBvqB,QAA+B,IAArBipB,GAC3B1I,EAAAA,EAAAA,KAAU,IAAOgK,EAAiBvqB,SAAUwqB,EAAAA,GAAAA,IAAsB,KAC5DD,EAAiBvqB,SACnBspB,EAAoB,WAEnBjrC,GAAY,CAAC4qC,EAAkBK,KAEpCmB,EAAAA,GAAAA,IAAoC,IAArBxB,GAAwB,IAAMK,EAAoB,EAAG,CAAEY,uBAAuB,OAE7F3J,EAAAA,EAAAA,KAAU,KACR,MAAMmK,EAAiB9+B,IACrB,GAAIA,EAAE++B,SAAW/+B,EAAEg/B,UAAYh/B,EAAEkhB,KAAK+d,WAAW,UAAYlB,EAAY,CACvE,MAAO,CAAEmB,GAASl/B,EAAEkhB,KAAK9D,MAAM,cAAgB,GAC/C,IAAK8hB,EAAO,OAEZ,GA3GsB,MA2GlBA,EAEF,YADA7qC,EAAS,CAAEf,GAAI4W,EAAezW,sBAAsB,IAItD,MAAMy4B,EAASt0B,OAAOsnC,GAAS,EAC/B,GAAIhT,EAAS6R,EAAWpmC,OAAS,EAAG,OAEpC+lC,EAAoBxR,EAAQ,CAAEoS,uBAAuB,IACrDt+B,EAAEm1B,mBAMN,OAFAvH,SAAS2I,iBAAiB,UAAWuI,GAAe,GAE7C,KACLlR,SAAS4I,oBAAoB,UAAWsI,GAAe,OAI3D,MACEK,aAAcC,EADV,qBACmCC,IACrCC,EAAAA,GAAAA,IAAmBlC,OAAkB3qC,GAAW,GAEpD,SAAS8sC,EAAiBngC,GACxB,MAAMogC,EAAejoC,OAAO8hC,OAAOlN,GAChClxB,MAAK,QAAC,GAAE3H,GAAH,SAAYA,IAAOyqC,EAAYV,GAAkB/pC,MAEzD,OAAKksC,GAAqC,IAArBnC,EAanB,mBAACoC,GAAA,EAAD,CACEC,WAAW,SACXlU,SAAUgU,EAAalsC,GACvB8L,SAAUA,EACViY,aAAcA,EACdmmB,eAAgBA,EAChBD,gBAAiBA,IAjBjB,mBAACkC,GAAA,EAAD,CACEC,WAAW,MACXtgC,SAAUA,EACViY,aAAcA,EACdkmB,gBAAiBA,EACjBC,eAAgBA,IAiBxB,OACE,0BAAK9H,UAAU,eACZqI,MAAAA,GAAAA,EAAYpmC,OACX,mBAACgoC,GAAA,EAAD,CAASC,KAAM7B,EAAY8B,UAAWxC,EAAkByC,YAAazB,IACnEe,EACF,0BAAK1J,WAAWoE,EAAAA,GAAAA,GAAe,mBAAoBuF,UACjD5sC,EACJ,mBAAC8kC,GAAA,EAAD,CACEwI,IAAKpC,EACLzU,KAAMoU,EAA8B,OAASnoC,EAAKiiC,MAAQ,sBAAwB,kBAClFI,UAAW6F,EACX2C,YAAajC,EAAaA,EAAWpmC,YAASlF,GAE7C8sC,Q,qCC1MT,MAOA,IAAenK,EAAAA,EAAAA,KAPwB6K,IACrC,MAAMC,GAAaC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOF,EAAa,mBAACA,EAAeD,GAAY,mBAACI,GAAA,EAAD,SCGlD,IAAejL,EAAAA,EAAAA,KAPyB6K,IACtC,MAAMK,GAAcH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOE,EAAc,mBAACA,EAAgBL,GAAY,mBAACI,GAAA,EAAD,S,eCSpD,MA0DA,IAAejL,EAAAA,EAAAA,KA1DqB,IAK9B,IAL+B,QACnCmL,EADmC,iBAEnCC,EAFmC,aAGnCC,EAHmC,WAInCC,GACI,EACJ,MAAOC,EAAYC,IAAiBzK,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACH4L,GACHK,GAAc,KAEf,CAACL,IAEJ,MAAMprC,GAAO+hC,EAAAA,GAAAA,KAEP2J,GAAe/G,EAAAA,GAAAA,GACnB,gBACAyG,GAAW,WACXI,GAAc,gBAGVG,GAAmB9G,EAAAA,EAAAA,KAAY,KACnC4G,GAAeD,KACd,CAACA,IAEEI,GAAc/G,EAAAA,EAAAA,KAAY,KAC9B4G,GAAc,KACb,IAEH,OACE,0BAAKlL,UAAWmL,GACd,mBAACpJ,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,UACN5B,UAAWiL,EAAa,SAAW,GACnC1J,QAAS6J,EACTjH,UAAW1kC,EAAKwrC,EAAa,QAAU,mBACvCK,UAAW,GAEX,wBAAGtL,UAAU,yBACb,wBAAGA,UAAU,gBAEf,mBAACuL,GAAA,EAAD,CACEllC,OAAQ4kC,EACRO,UAAU,QACVC,UAAU,SACVC,WAAS,EACTC,QAASN,GAET,mBAACnF,GAAA,EAAD,CAAUC,KAAK,UAAU5E,QAASwJ,GAAetrC,EAAK,eACtD,mBAACymC,GAAA,EAAD,CAAUC,KAAK,QAAQ5E,QAASyJ,GAAavrC,EAAK,aAClD,mBAACymC,GAAA,EAAD,CAAUC,KAAK,OAAO5E,QAASuJ,GAAmBrrC,EAAK,yBCpCzDmsC,GAA0B/pC,OAAOC,KAAKwhC,EAAAA,IAAmBrhC,OAAS,EAIxE,IAAI4pC,GAsKJ,UAAenM,EAAAA,EAAAA,KApKgB,IAWzB,IAX0B,QAC9B34B,EAD8B,YAE9Bm7B,EAF8B,WAG9BI,EAH8B,eAI9BI,EAJ8B,qBAK9BM,EAL8B,gBAM9B6E,EAN8B,cAO9BlF,EAP8B,gBAQ9BmJ,EAR8B,eAS9BhE,EAT8B,QAU9B/E,GACI,EACJ,MAAOgJ,EAAsBC,IAA2BvL,EAAAA,EAAAA,IAASv6B,EAAAA,IAE3D+lC,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBgE,GAAuB5H,EAAAA,EAAAA,KAAY,KACvCwH,EAAgBxI,EAAAA,GAAAA,YACf,CAACwI,IAEEK,GAAuB7H,EAAAA,EAAAA,KAAY,KACvCwH,EAAgBxI,EAAAA,GAAAA,YACf,CAACwI,IAEEM,GAAyB9H,EAAAA,EAAAA,KAAY,KACzCwH,EAAgBxI,EAAAA,GAAAA,mBACf,CAACwI,IAEEO,GAAuB/H,EAAAA,EAAAA,KAAY,KACvCwH,EAAgBxI,EAAAA,GAAAA,iBACf,CAACwI,IAEEQ,GAAuBhI,EAAAA,EAAAA,KAAY,KACvCwH,EAAgBxI,EAAAA,GAAAA,YACf,CAACwI,IAEES,GAAmBjI,EAAAA,EAAAA,KAAY,KAC/Bv9B,IAAYu8B,EAAAA,GAAAA,WAGhB2I,EAAcvtB,SAAU,EACxBstB,GAAwB,MACvB,CAACjlC,IAEEylC,GAAmBlI,EAAAA,EAAAA,KAAY,KACnC2H,EAAcvtB,SAAU,EAEpBmtB,KACF1nC,aAAa0nC,IACbA,QAAe9uC,GAGjB8uC,GAAe1oC,OAAOC,YAAW,KAC1B6oC,EAAcvtB,SACjBstB,GAAwB,KA3DF,OA8DzB,KAEH/M,EAAAA,EAAAA,KAAU,KACR,IAAIwN,EASJ,OARI1lC,IAAYu8B,EAAAA,GAAAA,SACdmJ,EAAmBtpC,OAAOC,YAAW,KACnC4oC,GAAwB,KApEF,MAsEfC,EAAcvtB,SAAWxY,EAAAA,KAClC8lC,GAAwB,GAGnB,KACDS,IACFtoC,aAAasoC,GACbA,OAAmB1vC,MAGtB,CAACgK,IAEJ,MAAO2lC,EAA0BC,EAAwBC,GAmE3D,WACE,MAAOC,EAAeC,IAAqBC,EAAAA,GAAAA,IAAQ,IAEnD9N,EAAAA,EAAAA,KAAU,KACR,MAAM+N,EAAU7pC,OAAOC,WAAW0pC,EAxJT,QA0JzB,MAAO,KACL3oC,aAAa6oC,MAEd,CAACF,IAEJ,MAAM,aAAErD,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiD,GAMjE,MAAO,CAACpD,EAAcE,EAJI,KACxBxmC,OAAO+iB,SAAS+mB,WAjF4DC,GAExEztC,GAAO+hC,EAAAA,GAAAA,KAEb,OACE,0BACE5jC,GAAG,kBACHuvC,aAAejnC,EAAAA,QAAkCnJ,EAAnBwvC,EAC9Ba,aAAelnC,EAAAA,QAAkCnJ,EAAnByvC,GAE9B,mBAAC,GAAD,CACEzlC,QAASA,EACT27B,eAAgBA,EAChBC,cAAeA,EACfC,iBAAkBsJ,EAClBrJ,iBAAkBsJ,EAClBrJ,iBAAkBwJ,EAClBvJ,QAASA,EACTC,qBAAsBA,IAExB,mBAACnB,GAAA,EAAD,CACErO,KAAMwP,EAAuB,OAAS,YACtCsH,YAAasB,GACb9J,UAAW/6B,EACXsmC,eAAa,EACbC,oBAAqBhK,EAAAA,GAAAA,WAEnB55B,IACA,OAAQ3C,GACN,KAAKu8B,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAawE,eAAgBA,EAAgBD,gBAAiBA,IACvE,KAAKvE,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEpB,YAAaA,EACbI,WAAYA,EACZ54B,SAAUA,EACVq5B,QAASA,IAGf,KAAKO,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAavjC,OAAQ2iC,EAAgBh5B,SAAUA,EAAUq5B,QAASA,IAC3E,QACE,WAIP2J,GACC,mBAAC3K,GAAA,EAAD,CACEwL,OAAK,EACLC,MAAI,EACJxN,WAAWoE,EAAAA,GAAAA,GAAe,aAAcuI,GACxCpL,QAASqL,GAERntC,EAAK,wBAGV,mBAAC,GAAD,CACEorC,QAASkB,EACTjB,iBAAkBqB,EAClBpB,aAAcqB,EACdpB,WAAYqB,QCrKpB,IAAe3M,EAAAA,EAAAA,KAPsB6K,IACnC,MAAMkD,GAAWhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO+C,EAAW,mBAACA,EAAalD,GAAY,mBAACI,GAAA,EAAD,SCG9C,IAAejL,EAAAA,EAAAA,KAPqB6K,IAClC,MAAMmD,GAAUjD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAOgD,EAAU,mBAACA,EAAYnD,GAAY,mBAACI,GAAA,EAAD,SCE5C,IAAejL,EAAAA,EAAAA,KAP2B6K,IACxC,MAAMoD,GAAgBlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOiD,EAAgB,mBAACA,EAAkBpD,GAAY,mBAACI,GAAA,EAAD,S,ICmBnDiD,I,SAAAA,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAAehsC,OAAOC,KAAK8rC,IAAa3rC,OAAS,EAkVvD,IAAey9B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MACEsL,cAAc,MACZ5K,EADY,KAEZyJ,GAEF8vB,aAAa,iBACXiR,GANE,4BAQJC,EARI,gBASJp+B,EATI,cAUJgL,GACE/X,EAEJ,MAAO,CACLylC,YAAa/kC,EACbmlC,WAAY17B,EACZ+gC,iBAAAA,EACAC,4BAAAA,EACAp+B,gBAAAA,EACAgL,cAAAA,KArBcytB,EA/Ue,IAO7B,IAP8B,YAClCC,EADkC,WAElCI,EAFkC,iBAGlCqF,EAHkC,4BAIlCC,EAJkC,gBAKlCp+B,EALkC,cAMlCgL,GACI,EACJ,MAAM,qBACJs5B,EADI,sBAEJ3K,EAFI,kBAGJ4K,EAHI,oBAIJ9K,EAJI,iBAKJ+K,EALI,gBAMJC,EANI,mBAOJC,EAPI,qBAQJC,EARI,SASJxvC,IACEwe,EAAAA,EAAAA,MAGEixB,GAAYlG,EAAAA,EAAAA,IAAuB,OAClCnhC,EAASsnC,IAAc5N,EAAAA,EAAAA,IAA4B6C,EAAAA,GAAAA,WACnDgL,EAAgBC,IAAqB9N,EAAAA,EAAAA,IAAS+N,EAAAA,GAAAA,OAC9C9L,EAAgB+L,IAAqBhO,EAAAA,EAAAA,IAAiB,KACtDiO,EAAc7G,IAAmB8G,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBpO,EAAAA,EAAAA,IAAiB,GAE3D,IAAIqO,EAA2BlB,GAAYmB,KAC3C,OAAQhoC,GACN,KAAKu8B,EAAAA,GAAAA,SACHwL,EAAclB,GAAYoB,SAC1B,MACF,KAAK1L,EAAAA,GAAAA,SACHwL,EAAclB,GAAYH,SAC1B,MACF,KAAKnK,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHwL,EAAclB,GAAYqB,WAC1B,MACF,KAAK3L,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHwL,EAAclB,GAAYsB,SAI9B,MAAMC,GAAc7K,EAAAA,EAAAA,KAAa8K,IAC/B,GAAIroC,IAAYu8B,EAAAA,GAAAA,eACV8L,EAMN,GAAIroC,IAAYu8B,EAAAA,GAAAA,iBACV8L,EADN,CAOA,GAAIroC,IAAYu8B,EAAAA,GAAAA,cAAiC,CAC/C,MAAM+L,EAAoBnX,SAASoX,eAAe,2BAC9CD,GACFA,EAAkBppB,OAItB,GAAIlf,IAAYu8B,EAAAA,GAAAA,SACd,OAAQgL,GACN,KAAKE,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SAEH,YADAD,EAAkBC,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,cAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAD,EAAkBC,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADAD,EAAkBC,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAD,EAAkBC,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADAD,EAAkBC,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAH,EAAW/K,EAAAA,GAAAA,eACXiL,EAAkBC,EAAAA,GAAAA,MAOpBznC,IAAYu8B,EAAAA,GAAAA,UAAmD,IAArBqE,GAK9C0G,EAAW/K,EAAAA,GAAAA,UACXmL,EAAkB,IAClBX,EAAqB,CAAE3wC,MAAO,KAC9B8lC,EAAoB,CAAEr8B,UAAM7J,IAC5BomC,EAAsB,CAAEvlC,QAAIb,IAC5BgxC,IACA3qC,YAAW,KACTyrC,EAAiB97B,KAAKC,SA/LM,MAoL5Bq7B,EAAW/K,EAAAA,GAAAA,mBAvHX+K,EAAW/K,EAAAA,GAAAA,sBAPX+K,EAAW/K,EAAAA,GAAAA,iBA2IZ,CACDv8B,EAAS4gC,EAAkB2G,EAAgBR,EAAsB7K,EAAqBE,EACtF4K,IAGIwB,GAAoBjL,EAAAA,EAAAA,KAAannC,IACjC4J,IAAYu8B,EAAAA,GAAAA,UAKhB+K,EAAW/K,EAAAA,GAAAA,cAEPnmC,IAAU+kC,GACZ4L,EAAqB,CAAE3wC,MAAAA,KAPvBsxC,EAAkBtxC,KASnB,CAAC4J,EAASm7B,EAAa4L,KAE1B7O,EAAAA,EAAAA,KACE,IAAOl4B,IAAYu8B,EAAAA,GAAAA,UAAmD,IAArBqE,GAC7CuB,EAAAA,GAAAA,IAAsB,IAAMiG,WAC5BpyC,GACJ,CAAC4qC,EAAkB5gC,EAASooC,IAG9B,MAAMK,GAAqBlL,EAAAA,EAAAA,KAAah6B,IAClCvD,IAAYu8B,EAAAA,GAAAA,eAIhBh5B,EAAEm1B,iBACF4O,EAAW/K,EAAAA,GAAAA,iBACV,CAACv8B,IAEE0oC,GAA4BnL,EAAAA,EAAAA,KAAah6B,IAC7CA,EAAEm1B,iBACF9gC,EAAS,CAAEf,GAAI4W,MACd,CAACA,EAAe7V,KAEnB+wC,EAAAA,GAAAA,GAAW,CACT,CAAC,cAAeF,GAChB,CAAC,cAAeC,MAGlBxQ,EAAAA,EAAAA,KAAU,KACRgP,IAEIK,IAAmBE,EAAAA,GAAAA,SACrBR,MAED,CAACC,EAAiBD,EAAkBM,IAEvC,MAAM,WACJqB,EADI,YACQC,EADR,cACqBC,GC5RtB,SACLC,EACAC,EACAhN,EACAiN,GAEA,MAAOtmC,EAAUumC,EAAcC,IAAkBnD,EAAAA,GAAAA,MAC1CoD,EAAeC,IAAoB3P,EAAAA,EAAAA,OACnC4P,EAAqBC,IAA0B7P,EAAAA,EAAAA,MAUtD,SAASoP,IACP3X,SAAStJ,KAAK2hB,UAAUC,OAAO,oBA+CjC,OAxDAvR,EAAAA,EAAAA,KAAU,KACH6Q,EAAWpxB,SAAYsxB,IAI5BF,EAAWpxB,QAAQ+xB,MAAMpgB,MAAS,GAAE2f,SACnC,CAACF,EAAYE,KAsBhB/Q,EAAAA,EAAAA,KAAU,KACR,IAAKv1B,EAAU,OAEf,MAAMgnC,EAAmBpmC,IACvB,MAAMqmC,EAAWtpC,KAAKupC,KAAKP,EAAsB/lC,EAAEumC,QAAUV,GAC7DL,EAAWpxB,QAAS+xB,MAAMpgB,MAAS,GAAEsgB,OAGvC,SAASG,IACPC,IACAhB,EAASD,EAAWpxB,QAASsyB,aAG/B,SAASD,IACPlB,IACA3X,SAAS4I,oBAAoB,YAAa4P,GAAiB,GAC3DxY,SAAS4I,oBAAoB,UAAWgQ,GAAU,GAClD5Y,SAAS4I,oBAAoB,OAAQgQ,GAAU,GAC/CZ,IAOF,OAJAhY,SAAS2I,iBAAiB,YAAa6P,GAAiB,GACxDxY,SAAS2I,iBAAiB,UAAWiQ,GAAU,GAC/C5Y,SAAS2I,iBAAiB,OAAQiQ,GAAU,GAErCC,IACN,CAACV,EAAqBF,EAAeL,EAAYC,EAAUrmC,EAAUwmC,IAEjE,CAAEP,WA5CT,SAAoBrlC,GAClBA,EAAEm1B,iBAEFvH,SAAStJ,KAAK2hB,UAAU9lB,IAAI,oBAE5B2lB,EAAiB9lC,EAAEumC,SACnBP,EAAuBR,EAAWpxB,QAASsyB,aAC3Cf,KAqCmBL,YAlCrB,SAAqBtlC,GACnBA,EAAEm1B,iBACFqQ,EAAWpxB,QAAS+xB,MAAMpgB,MAAQ,GAClC0S,KA+BgC8M,cAAAA,GD2N9BoB,CAAU7C,EAAWF,EAAoBC,EAAsB3kC,GAE7D0nC,GAA6B5M,EAAAA,EAAAA,KAAa36B,IAC9C0kC,EAAW/K,EAAAA,GAAAA,UACXiL,EAAkB5kC,KACjB,IAEH,OACE,0BACE/L,GAAG,aACHysC,IAAK+D,GAEL,mBAACvM,GAAA,EAAD,CACErO,KAAMoU,EAA8B,OAASuJ,EAAAA,GAC7C7G,YAAauD,GACb/L,UAAWgN,EACXzB,eAAa,EACbC,oBAAqBM,GAAYmB,OAE/BrlC,IACA,OAAQolC,GACN,KAAKlB,GAAYoB,SACf,OACE,mBAAC,GAAD,CACEtlC,SAAUA,EACVq5B,QAASoM,EACTrD,gBAAiBuC,IAGvB,KAAKT,GAAYH,SACf,OACE,mBAAC,GAAD,CACE/jC,SAAUA,EACV0nC,cAAe9C,EACfI,aAAcA,EACd7G,gBAAiBA,EACjBC,eAAgBoJ,EAChBnO,QAASoM,EACTnM,qBAAsB4E,IAG5B,KAAKgG,GAAYqB,WACf,OACE,mBAAC,GAAD,CACE9R,IAAKyR,EACLllC,SAAUA,EACV2nC,WAAS,EACTtqC,QAASA,EACT+kC,gBAAiBuC,EACjBtL,QAASoM,IAGf,KAAKvB,GAAYsB,SACf,OACE,mBAAC,GAAD,CACE/R,IAAKyR,EACLllC,SAAUA,EACV3C,QAASA,EACT+kC,gBAAiBuC,EACjBtL,QAASoM,IAGf,QACE,OACE,mBAAC,GAAD,CACEpoC,QAASA,EACTm7B,YAAaA,EACbI,WAAYA,EACZI,eAAgBA,EAChBmF,gBAAiBA,EACjBiE,gBAAiBuC,EACjB1L,cAAe4M,EACfzH,eAAgBoJ,EAChBnO,QAASoM,EACTnM,qBAAsB4E,QAMlC,0BACE5H,UAAU,gBACVsR,YAAa3B,EACb4B,UAAW1B,EACX2B,cAAe5B,S,4IE/WvB,MAQA,IAAelQ,EAAAA,EAAAA,KARiC6K,IAC9C,MAAM,OAAElkC,GAAWkkC,EACbkH,GAAsBhH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,uBAAwBrkC,GAGnF,OAAOorC,EAAsB,mBAACA,EAAwBlH,QAAYxtC,KCuQpE,IAAe2iC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAA+D,cAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B20C,EAAY9vC,QAAQY,IAAQuvC,EAAAA,EAAAA,IAAcvvC,IAEhD,IAAKA,GAAQA,EAAK4O,eAAgB4gC,EAAAA,EAAAA,IAAqBl1C,GACrD,MAAO,CACLm1C,QAAQ,GAIZ,MAAMxlC,GAAMC,EAAAA,EAAAA,IAAc5P,EAAQC,GAC5Bm1C,GAAiBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAC9Cq1C,EAAmC,WAApBpuC,GAAgChH,IAAakB,EAAAA,GAC5Dm0C,EAAyC,WAApBruC,GAAgChH,IAAakB,EAAAA,GAClEo0C,GAAqBjvC,EAAAA,EAAAA,IAAyBvG,GAE9Cy1C,EAAgB3wC,QAAQ6K,IAAO+lC,EAAAA,EAAAA,IAAoB11C,EAAQ2P,EAAIxO,KAC/Dw0C,GAAeF,GAAiB3wC,SAAQ8wC,EAAAA,EAAAA,IAA0B51C,EAAQC,IAC1E41C,EAAe/wC,QACnBwwC,IAAiBV,IAAakB,EAAAA,EAAAA,IAAiBpwC,KAAUA,EAAK8yB,aAE1Dud,EAAYT,GAAgBC,EAC5BS,EAAUjU,EAAAA,KAAuBvZ,EAAAA,EAAAA,IAAS9iB,EAAKvE,MAAQi0C,IAAmBzlC,EAC1EsmC,EAAUX,IAAiBF,IAAmBS,EAC9CK,EAAWZ,IAAiBO,EAC5BM,EAAoBpU,EAAAA,IAAuBr8B,EAAK0wC,aAChDC,EAAqBtU,EAAAA,KAAwBr8B,EAAK0wC,gBAClD,UAAA1wC,EAAK4wC,mBAAL,eAAkBC,aAAe7wC,EAAK8wC,YAAav1B,EAAAA,EAAAA,IAAiBvb,IAI1E,MAAO,CACLyvC,QAAQ,EACRP,UAAAA,EACAY,mBAAAA,EACAG,YAAAA,EACAF,cAAAA,EACAI,aAAAA,EACAE,UAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAQ,kBAbqB,UAAG/wC,EAAKyU,gBAAR,aAAG,EAAes8B,kBAcvCP,SAAAA,EACAC,kBAAAA,EACAE,mBAAAA,EACAK,oBAhBuB,UAAGhxC,EAAKyU,gBAAR,aAAG,EAAe4I,mBA9B3ByiB,EArN6B,IAkB3C,IAlB4C,OAChDvlC,EADgD,SAEhDC,EAFgD,OAGhDi1C,EAHgD,UAIhDP,EAJgD,YAKhDe,EALgD,cAMhDF,EANgD,aAOhDI,EAPgD,UAQhDE,EARgD,QAShDC,EATgD,QAUhDC,EAVgD,kBAWhDQ,EAXgD,SAYhDP,EAZgD,kBAahDC,EAbgD,mBAchDE,EAdgD,oBAehDK,EAfgD,mBAgBhDlB,EAhBgD,iBAiBhDmB,GACI,EACJ,MAAM,YACJC,EADI,eAEJtsB,EAFI,oBAGJusB,EAHI,WAIJC,EAJI,YAKJC,EALI,4BAMJC,IACEt2B,EAAAA,EAAAA,MAEEu2B,GAAgBxL,EAAAA,EAAAA,IAA0B,OACzC+C,EAAYC,IAAiBzK,EAAAA,EAAAA,KAAS,IACtCkT,EAAcC,IAAmBnT,EAAAA,EAAAA,SAAsC1jC,GAExE82C,GAAuBvP,EAAAA,EAAAA,KAAY,KACvC4G,GAAc,GACd,MAAM4I,EAAOJ,EAAch1B,QAASq1B,wBACpCH,EAAgB,CAAE1jB,EAAG4jB,EAAKE,MAAOhjB,EAAG8iB,EAAKG,WACxC,IAEGC,GAAwB5P,EAAAA,EAAAA,KAAY,KACxC4G,GAAc,KACb,IAEGiJ,GAAuB7P,EAAAA,EAAAA,KAAY,KACvCsP,OAAgB72C,KACf,IAEGq3C,GAAuB9P,EAAAA,EAAAA,KAAY,KACvC+O,EAAY,CAAE32C,OAAAA,MACb,CAAC22C,EAAa32C,IAEX23C,GAAiB/P,EAAAA,EAAAA,KAAY,KACjCvd,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEEutB,GAAmBhQ,EAAAA,EAAAA,KAAY,KACnCiP,EAAW,CAAE72C,OAAAA,MACZ,CAACA,EAAQ62C,IAENgB,GAA0BjQ,EAAAA,EAAAA,KAAY,KAC1CmP,EAA4B,CAAE9pC,OAAQ6qC,EAAAA,GAAAA,iBACrC,CAACf,IAEEgB,GAAoBnQ,EAAAA,EAAAA,KAAY,KACpCgP,IAEIzpC,EAAAA,GAEkBquB,SAASkH,cAAgC,uBACjDhZ,QAEZhjB,YAAW,KACT,MAAMsxC,EAAcxc,SAASkH,cAAgC,mCACzDsV,GACFA,EAAYtuB,UA3EQ,OA+EzB,CAACktB,IAMEqB,GAA0BrQ,EAAAA,EAAAA,KAAah6B,IACtCkoC,GAAcoC,EAAAA,KAAUtqC,EAAEg/B,WAI/Bh/B,EAAEm1B,iBACFgV,OACC,CAACjC,EAAWiC,KAEf/E,EAAAA,GAAAA,GAAW,CACT,CAAC,SAAUiF,KAGb,MAAMl1C,GAAO+hC,EAAAA,GAAAA,KAEb,OACE,0BAAKxB,UAAU,kBACXn2B,EAAAA,IACA,sCACGupC,GAAoBd,GACnB,mBAACvQ,GAAA,EAAD,CACEC,KAAK,OACLkC,QAAM,EACNqJ,OAAK,EACLhM,QAAS6S,GAER30C,EAAK4xC,EAAY,qBAAuB,qBAG5C+B,GAAoBhB,GACnB,mBAACrQ,GAAA,EAAD,CACEC,KAAK,OACLkC,QAAM,EACNqJ,OAAK,EACLhM,QAAS8S,GAER50C,EAAK,aAGT2zC,GAAoBlB,GACnB,mBAACnQ,GAAA,EAAD,CACEC,KAAK,OACLkC,QAAM,EACNqJ,OAAK,EACLhM,QAAS+S,GAER70C,EAAK,eAGT+yC,GACC,mBAACzQ,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,OAAQ+N,EACRrQ,MAAM,cACNI,KAAK,UACLT,QAASkT,EACTtQ,UAAU,uBAEV,wBAAGnE,UAAU,iBAGhByS,GACC,mBAAC1Q,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNI,KAAK,UAELT,QAvEZ,WACEiS,EAAY,CAAErqC,OAAQzM,KAuEZynC,UAAU,QAEV,wBAAGnE,UAAU,iBAKpBz+B,QAAQ4xC,IACP,mBAACpR,GAAA,EAAD,CACEn0B,OAAK,EACLoyB,UAAU,eACVkE,OAAQ+N,EACRrQ,MAAM,cACNI,KAAK,UACLT,QAASgT,EACTpQ,UAAuB1kC,EAAZ4xC,EAAiB,oBAA4B,mBAExD,wBAAGrR,UAAU,cACb,0BAAKA,UAAU,SAASmT,IAG5B,mBAACpR,GAAA,EAAD,CACEsI,IAAKqJ,EACL1T,UAAWiL,EAAa,SAAW,GACnCr9B,OAAK,EACLs2B,QAASr6B,EAAAA,GACTm4B,KAAK,UACLJ,MAAM,cACNiT,SAAUjD,EACVzN,UAAU,eACV5C,QAASsS,GAET,wBAAG7T,UAAU,eAEd2T,GACC,mBAAC,GAAD,CACEj3C,OAAQA,EACRC,SAAUA,EACV0J,OAAQ4kC,EACR6J,OAAQnB,EACRoB,iBAAkBlrC,EAAAA,KAA4BupC,EAC9C/B,UAAWA,EACXe,YAAaA,EACbF,cAAeA,EACfI,aAAcA,EACdE,UAAWA,EACXC,QAASA,EACTC,QAASA,EACTQ,kBAAmBA,EACnBP,SAAUA,EACVC,kBAAmBA,EACnBE,mBAAoBA,EACpBkC,mBAAoBZ,EACpBa,cAAeR,EACf9I,QAASuI,EACTgB,oBAAqBf,S,8CClQhB,SAASgB,GAAiBn1C,GAAsB,MAC7D,MAAMo1C,EAAep1C,IAAWq1C,EAAAA,EAAAA,IAA4Br1C,GACtDuK,EAAUvK,MAAAA,GAAH,UAAGA,EAAS+G,eAAZ,aAAG,EAAkBwD,QAC5B+qC,EAAwBF,GAAgB7qC,KAAYgrC,EAAAA,EAAAA,OAAqBH,EAAa5wC,SAAS,eAC9FgxC,EAAkBC,IAAuBhV,EAAAA,EAAAA,IAASiV,GAAAA,IACnD10C,EAAYhB,MAAAA,OAAH,EAAGA,EAASpC,GAiB3B,OAfA+3C,EAAAA,EAAAA,KAAgB,KACTL,IAILM,EAAAA,GAAAA,IAAiB,OAAM50C,IAAao0C,GACjCS,KAAKJ,GACLK,OAAOnqC,IACFiU,EAAAA,IAEFC,QAAQ/S,MAAMnB,QAGnB,CAAC3K,EAAWs0C,EAAuBF,IAE/BE,EAAwBE,EAAmBJ,E,0BCsJpD,SAASW,GAAS7lB,EAAWc,EAAWX,EAAe2lB,EAAgBC,GACrE,MAAQ,IAAG/lB,KAAKc,EAAIilB,KAAUA,KAAUA,eACtC5lB,OAAW2lB,EAAS,EAAIC,KAAUA,KAAUA,YAAiB5lB,OAqCjE,UAAeqP,EAAAA,EAAAA,KA3M+B,IAExC,IAFyC,MAC7C7qB,EAD6C,MACtCrF,GACH,EAEJ,MAAM0mC,GAAehO,EAAAA,EAAAA,IAAuB,MAEtCiO,GAAe3S,EAAAA,EAAAA,KAAQ,IA8E/B,SAAyB3uB,EAAerF,GACtC,MAAM4mC,EAAevhC,EAAQrF,EAAQ,EAC/B6mC,EAmBR,SAAsBxhC,GACpB,IAAIwhC,EAAY,EAahB,OAZc,IAAVxhC,EACFwhC,EAAY,GACO,IAAVxhC,EACTwhC,EAAY,GACO,IAAVxhC,EACTwhC,EAAY,IACO,IAAVxhC,GAEAA,EAAQ,KADjBwhC,EAAY,KAKPA,EAjCWC,CAAazhC,GACzB0hC,EAmCR,SAAuB1hC,EAAerF,GACpC,IAAI6mC,EAAY,GAahB,OAZc,IAAVxhC,EACFwhC,EAAY,GACO,IAAVxhC,EACTwhC,EAAY,GACO,IAAVxhC,EACTwhC,EAAsB,IAAV7mC,EAAc,GAAK,IACZ,IAAVqF,GAEAA,EAAQ,KADjBwhC,EAAY,KAKPA,EAjDYG,CAAc3hC,EAAOuhC,GAClCK,EAmDR,SAAwB5hC,EAAewhC,GACrC,OAAOxhC,GAAS,EAAI,GAAKwhC,EAAYxhC,EAAQ,GAAKA,EAAQ,GApDtC6hC,CAAe7hC,EAAOwhC,GAEpCM,EAAc,WAAU9hC,IACxB+hC,EAoDR,SAAqBh5C,EAAYy4C,EAAmBxhC,GAGlD,IAAIgiC,EAAI,GACR,GAAc,IAAVhiC,EACFgiC,EAAId,GAAS,EAAG,EAAG,EAAGM,EAJT,GAKTN,GAAS,EAAG,GAAI,EAAGM,EAAY,EALtB,GAMTN,GAAS,EAAG,GAAI,EAAGM,EANV,QAQb,IAAK,IAAI5mC,EAAI,EAAGA,EAAIoF,EAAOpF,IACzBonC,GAAKd,GAAS,GAAIM,EAAY,GAAK5mC,EAAG,EAAG4mC,EAT9B,GAaf,MACG,iBAAgBz4C,uBACJi5C,yBApEEC,CAAYH,EAAYN,EAAWxhC,GAE9CkiC,EA4ER,SAA2BvnC,EAAe6mC,EAAmBxhC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVrF,EAAc,EAAI6mC,EAAY,EAGzB,IAAVxhC,EACY,IAAVrF,EACK,EACY,IAAVA,EACF,GAGF,IAEC6mC,EAAY,GAAK7mC,EA5FJwnC,CAAkBZ,EAAcC,EAAWxhC,GAC5DoiC,EA+FR,SAA4BznC,EAAeqF,EAAewhC,EAAmBI,GAC3E,OAAI5hC,GAAS,GAITrF,GAAS,EAHJ,EAKEA,GAASqF,EAAQ,EACnB4hC,EAAc,IAGfJ,EAAY,GAAK,GAAK7mC,EAAQ,IAAM6mC,EAAY,GA1GhCa,CAAmBd,EAAcvhC,EAAOwhC,EAAWI,GAC3E,MAAO,CACLF,WAAAA,EACAK,SAAAA,EACAG,eAAAA,EACAE,gBAAAA,EACAR,YAAAA,EACAE,WAAAA,GA9FOQ,CAAgBtiC,EAAOrF,IAC7B,CAACqF,EAAOrF,IAyCX,IAvCAyvB,EAAAA,EAAAA,KAAU,KACR,IAAKiX,EAAax3B,QAChB,OAGF,MAAM,YACJ+3B,EADI,gBAEJQ,EAFI,WAGJV,EAHI,eAIJQ,EAJI,WAKJJ,EALI,SAMJC,GACET,EAEEiB,EAAalB,EAAax3B,QAAQ24B,kBACxC,GAAInB,MAAAA,GAAAA,EAAcx3B,QAAS,CACzB,MAAM44B,EAAiBpB,EAAax3B,SAC9B,MAAE+xB,GAAU6G,EAClB7G,EAAMuF,OAAU,GAAES,MAClBhG,EAAM8G,UAAa,eAAcN,OACjCxG,EAAMmG,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAelY,cAAc,OACnCqY,EAAMH,EAAelY,cAAc,OACnCsY,EAAOJ,EAAelY,cAAc,QACrCoY,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIhH,MAAMuF,OAAU,GAAEO,MACtBkB,EAAIhH,MAAM8G,UAAa,cAAaR,WAGvC,CAACZ,IAEU,IAAVthC,EACF,OACE,0BAAKmrB,UAAU,yBACb,0BACEA,UAAU,kCACVqK,IAAK6L,KAMb,MAAM,YACJO,EADI,gBACSQ,EADT,WAC0BV,EAD1B,eACsCQ,EADtC,WACsDJ,GACxDR,EAEJ,OACE,0BAAKnW,WAAWoE,EAAAA,GAAAA,GAAe,wBAAyBvvB,EAnElC,GAmE+D,+BACnF,0BACEmrB,UAAU,gCACVqK,IAAK6L,EACLzF,MACG,oBAAmBkG,uCACVF,+BAAyCQ,SAGrD,gCACA,0BACEjX,UAAU,6BACVyQ,MAAQ,WAAU8F,8BAAuCQ,eC0CnE,IAAerX,EAAAA,EAAAA,KAxG2B,IAEpC,IAFqC,QACzC1/B,EADyC,MAChC6U,EADgC,MACzBrF,EADyB,YAClBooC,EADkB,UACL5X,EADK,eACM6X,EADN,QACsBtW,EADtB,iBAC+BuW,GACpE,EACJ,MAAM,qBAAEC,IAAyB56B,EAAAA,EAAAA,MAC3B1d,GAAO+hC,EAAAA,GAAAA,KACPwW,EAAiB7C,GAAiBn1C,GAClCi4C,GAAeC,EAAAA,GAAAA,IAASC,EAAAA,EAAAA,IAAoBn4C,EAAS,cAErDkB,GAAOk3C,EAAAA,GAAAA,GAAqB34C,EAAMO,EAASuB,QAAQy2C,KAClDK,EAAmBC,EAAiBC,IAAoBxL,EAAAA,GAAAA,KAEzDyL,GAAqBlU,EAAAA,EAAAA,KAAY,KACrCiU,IAEIV,GACFA,EAAe73C,EAAQpC,MAExB,CAAC26C,EAAkBV,EAAgB73C,EAAQpC,KAExC66C,GAAeC,EAAAA,EAAAA,IAA6B14C,GAE5C24C,GAA0BrU,EAAAA,EAAAA,KAAY,KACtCmU,GACFV,EAAqB,CAAE/2C,UAAWhB,EAAQpC,GAAI6pB,OAAQgxB,MAEvD,CAACV,EAAsBU,EAAcz4C,EAAQpC,MAEzCg7C,EAAcC,EAAkBC,IAAsB/L,EAAAA,GAAAA,KAE7D,OACE,0BAAK/M,WAAWoE,EAAAA,GAAAA,GAAe,8BAA+BpE,IAC3DnrB,EAAQ,GACP,mBAACktB,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,UACLJ,MAAM,cACN5B,UAAU,kBACVmE,UAAW1kC,EAAK,gCAChB8hC,QAASuW,GAET,wBAAG9X,UAAU,mBAGhB6X,GACC,mBAAC9V,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,UACLJ,MAAM,cACNuC,UAAW1kC,EAAK,0BAChBugC,UAAU,eACVuB,QAAS+W,GAET,wBAAGtY,UAAU,gBAGjB,mBAAC+Y,GAAA,EAAD,CACE1yC,OAAQgyC,EACR1M,QAAS4M,EACTr3C,KAAK,wCACL83C,aAAa,QACbC,eAAgBT,IAElB,0BACExY,WAAWoE,EAAAA,GAAAA,GAAe,sBAAuBwU,GAAgB,YACjErX,QAASA,EACTE,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAE1B,mBAAC,GAAD,CACE8X,MAAOA,EACPrF,MAAOA,IAERwoC,GAyBT,SAAyB5C,EAAsBhd,GAC7C,MAAM,MAAE/H,EAAF,OAAS2lB,IAAWkD,EAAAA,GAAAA,MAE1B,OACE,0BAAKC,IAAK/gB,GAAWgd,EAAc/kB,MAAOA,EAAO2lB,OAAQA,EAAQoD,IAAI,KA7B9CC,CAAgBrB,EAAgBC,GACnD,0BAAKjY,UAAU,gBACb,0BAAKA,UAAU,QAAQyB,IAAI,QACxBmW,GAAgB,GAAEn4C,EAAK,oBAAoB+P,EAAQ,EAAK,KAAGqF,EAAQrF,GAAU,MAEhF,wBAAGiyB,IAAI,QAAQvgC,GACf,mBAACo4C,GAAA,EAAD,OAEDb,GACC,mBAAC1W,GAAA,EAAD,CACEC,KAAK,OACLhC,UAAU,gBACVuB,QAASoX,EACTY,uBAAqB,EACrBpM,aAAejnC,EAAAA,QAAkCnJ,EAAnB87C,EAC9BzL,aAAelnC,EAAAA,QAAoCnJ,EAArB+7C,GAE7BL,EAAav3C,W,oCCxHnB,SAASs4C,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAmD,uDAA9B,YACnF,MAAM/tC,EAAM6tC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAIC,SAASC,IAClBH,EAAII,OAAS,KACXC,GAAML,EAAKA,EAAI1pB,MAAQqpB,EAAOK,EAAI/D,OAAS0D,EAAOC,GAC/C9D,MAAMwE,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOT,IAAIC,gBAAgBO,MAE5BxE,KAAKqE,GACLK,SAAQ,KACHd,aAAiBG,MACnBC,IAAIW,gBAAgB5uC,OAI5BmuC,EAAIZ,IAAMvtC,KA2Bd2B,eAAe6sC,GACbL,EAAuB1pB,EAAe2lB,GAChB,IADgC2D,EAChC,uDADqD,YAG3E,KAAI,sBAAuBx2C,QAwBzB,OAAOs3C,GAAaV,EAAK1pB,EAAO2lB,OAAQj5C,EAAW48C,GAvBnD,IACE,MAAMe,QAAev3C,OAAOw3C,kBAAkBZ,EAC5C,CAAEa,YAAavqB,EAAOwqB,aAAc7E,EAAQ8E,cAAe,SAC7D,GAAIJ,EAAO1E,SAAWA,GAAU0E,EAAOrqB,QAAUA,EAC/C,MAAM,IAAIiqB,MAAM,sCAElB,aAAa,IAAIL,SAASc,IACxB,MAAMC,EAAS9iB,SAAS+iB,cAAc,UACtCD,EAAO3qB,MAAQqqB,EAAOrqB,MACtB2qB,EAAOhF,OAAS0E,EAAO1E,OACvB,MAAMkF,EAAMF,EAAOG,WAAW,kBAC1BD,EACFA,EAAIE,wBAAwBV,GAE5BM,EAAOG,WAAW,MAAOE,UAAUX,EAAQ,EAAG,GAEhDM,EAAOM,OAAOP,EAAKpB,MAErB,MAAOrvC,GAEP,OAAOmwC,GAAaV,EAAK1pB,EAAO2lB,OAAQj5C,EAAW48C,IAOzD,SAASc,GACPV,EAAuB1pB,EAAe2lB,GAChB,IADgC3pB,EAChC,uDAD+C,GAAKstB,EACpD,uDADyE,YAE/F,MAAMqB,EAAS9iB,SAAS+iB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MACxBI,EAAKrjB,SAAS+iB,cAAc,UAC5BO,EAAOD,EAAGJ,WAAW,MAK3B,GAHAH,EAAO3qB,MAAQA,EACf2qB,EAAOhF,OAASA,EAEZ+D,EAAI1pB,MAAQhE,EAAOgE,EAAO,CAC5B,MAAMorB,EAAM,EAAIpvB,EAChB,IAAIqvB,EAAM,CACRrrB,MAAOhpB,KAAKG,MAAMuyC,EAAI1pB,MAAQhE,GAC9B2pB,OAAQ3uC,KAAKG,MAAMuyC,EAAI/D,OAAS3pB,IAQlC,IALAkvB,EAAGlrB,MAAQqrB,EAAIrrB,MACfkrB,EAAGvF,OAAS0F,EAAI1F,OAEhBwF,EAAKH,UAAUtB,EAAK,EAAG,EAAG2B,EAAIrrB,MAAOqrB,EAAI1F,QAElC0F,EAAIrrB,MAAQhE,EAAOgE,GACxBqrB,EAAM,CACJrrB,MAAOhpB,KAAKG,MAAMk0C,EAAIrrB,MAAQhE,GAC9B2pB,OAAQ3uC,KAAKG,MAAMk0C,EAAI1F,OAAS3pB,IAElCmvB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAIrrB,MAAQorB,EAAKC,EAAI1F,OAASyF,EAAK,EAAG,EAAGC,EAAIrrB,MAAOqrB,EAAI1F,QAGnFkF,EAAIG,UAAUE,EAAI,EAAG,EAAGG,EAAIrrB,MAAOqrB,EAAI1F,OAAQ,EAAG,EAAGgF,EAAO3qB,MAAO2qB,EAAOhF,aAE1EkF,EAAIG,UAAUtB,EAAK,EAAG,EAAGiB,EAAO3qB,MAAO2qB,EAAOhF,QAGhD,OAAO,IAAIiE,SAASC,IAClBc,EAAOM,OAAOpB,EAASP,MC/G3B,M,wDCiBMgC,GAAkB,CAAEtrB,MAAO,IAAK2lB,OAAQ,KACxC4F,GAAe,IA4DrB,GAzDgC,CAC9B57C,EAAqBQ,EAA4B2B,KAEjD,MAAM1C,GAAO+hC,EAAAA,GAAAA,MAEP,MAAEqa,EAAF,MAASC,IAAU3jB,EAAAA,EAAAA,IAAkBn4B,GACrCya,EAAQohC,EAASA,EAAMphC,OAASohC,EAAME,SAAYD,EAAQ,gBAAkB,GAC5EE,GAASH,MAAAA,OAAA,EAAAA,EAAOI,YAAcz7C,IAAUG,EAAAA,EAAAA,IAAelB,EAAMe,GAC7D07C,EAAS/5C,IAAQg6C,EAAAA,EAAAA,GAAa18C,EAAM0C,IAAU,WAE9Ci6C,EAAkBP,IAASQ,EAAAA,EAAAA,IAAiBR,KAAU1D,EAAAA,EAAAA,IAAoBn4C,EAAS,aACnFs8C,EAAa97C,IAAU+7C,EAAAA,EAAAA,IAAkB/7C,EAAQ,OACjDiK,EAAQoxC,GAASO,GAAoBN,GAASQ,EAC9CE,GAAQtE,EAAAA,GAAAA,GAASztC,GAEjBu3B,GAAOwB,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsBqY,EAAkBC,EAAkBlwC,GACxD,IAAKA,EAAK,OAAO+vC,GACjB,GAAIE,EAAO,OACT,GAAI,UAACA,EAAMY,sBAAP,QAAC,EAAsBx6C,OAAQ,OACnC,MAAMy6C,EAAYb,EAAMY,eAAel3C,MAAMy8B,GAAuB,MAAdA,EAAKlkC,OAC3D,OAAO4+C,GAAab,EAAMY,eAAe,GAG3C,OAAIX,EACKa,GAAAA,QADT,EAlCSC,CAAaf,EAAOC,EAAOU,IACjC,CAACX,EAAOW,EAAOV,KACVj8C,OAAQ+L,GDvCD,EAAIixC,EAAsBC,EAAaC,KACtD,MAAO1iC,EAAW2iC,IAAgBvc,EAAAA,EAAAA,KAAkB,IAC7C3zB,EAAOmwC,IAAYxc,EAAAA,EAAAA,OACnB5gC,EAAQq9C,IAAazc,EAAAA,EAAAA,IAAwBsc,GAkBpD,OAjBA9d,EAAAA,EAAAA,KAAU,KACR+d,GAAa,GACb,IAAIG,GAAe,EAUnB,OATAN,IAAKhH,MAAMkF,IACLoC,IACJH,GAAa,GACbE,EAAUnC,OACRpvC,IACEwxC,IACJH,GAAa,GACbC,EAAStxC,OAEJ,KACLwxC,GAAe,KAGhBL,GACI,CAAEziC,UAAAA,EAAWvN,MAAAA,EAAOjN,OAAAA,ICkBHu9C,EAAS,IAanC,SAAyBxxC,EAAco2B,GACrC,IAAKp2B,EAAK,OAAOquC,QAAQC,QAAQmD,IACjC,IAAKrb,EAAM,OFnCN,SACLyX,EAAsBppB,EAAe2lB,GACpB,IADoC2D,EACpC,uDADyD,YAE1E,MAAM/tC,EAAM6tC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAIC,SAASC,IAClBH,EAAII,OAAS,KACXC,GAAML,EAAK1pB,EAAO2lB,EAAQ2D,GACvB9D,MAAMwE,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOT,IAAIC,gBAAgBO,MAE5BxE,KAAKqE,GACLK,SAAQ,KACHd,aAAiBG,MACnBC,IAAIW,gBAAgB5uC,OAI5BmuC,EAAIZ,IAAMvtC,KEgBM0xC,CAAY1xC,EAAKgwC,GAAcA,IACjD,MAAMrrB,EAAMlpB,KAAKkpB,IAAIyR,EAAK3R,MAAO2R,EAAKgU,QACtC,OAAIzlB,EAAMqrB,GAEDpC,GAAW5tC,EADJgwC,GAAerrB,GAGxB0pB,QAAQC,QAAQtuC,GApBrB2xC,CAAgBf,EAAOxa,IACtB,CAACwa,EAAOxa,GAAOqb,IAClB,OAAO7Z,EAAAA,EAAAA,KAAQ,KACNga,EAAAA,GAAAA,IAAmB,CACxB/iC,MAAAA,EACAuhC,OAAAA,EACAE,MAAAA,EACAuB,QAAS,CAAC,CAAEtE,IAAKvtC,OAElB,CAACswC,EAAOF,EAAQvhC,EAAO7O,K,0BC8N5B,UAAeq2B,EAAAA,EAAAA,KACb,CAACxlC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,SAClC,OAAEkG,EAAF,aAAUC,EAAV,QAAwBC,GAAYrG,EAAOsG,YAEjD,MAAO,CACLvC,OAAAA,EACA2B,KAAAA,EACAS,OAAAA,EACAC,aAAAA,EACAC,QAAAA,KAXN,EAhO+C,IASzC,IAT0C,QAC9C9C,EAD8C,UAE9CggC,EAF8C,KAG9C0d,EAH8C,OAI9Cl9C,EAJ8C,KAK9C2B,EAL8C,OAM9CS,EAN8C,aAO9CC,EAP8C,QAQ9CC,GACI,EACJ,MAAM,qBACJ66C,EADI,2BAEJC,EAFI,oBAGJC,EAHI,aAIJn7C,EAJI,iBAKJ+e,IACEtE,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,MACP,MAAEqa,EAAF,MAASC,EAAT,MAAgB7jB,IAAUE,EAAAA,EAAAA,IAAkBn4B,GAC5C89C,EAAUv8C,QAAQu6C,GAAS7jB,GAC3B8lB,EAAav9C,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,QAAUzD,EACrDihD,EAAYptB,GAAAA,IAA0BunB,EAAAA,EAAAA,IAAoBn4C,EAAS,WACnEi+C,EAAgBC,GAAwBl+C,EAASQ,EAAQ2B,IAEzD,UACJg8C,EADI,KAEJC,EAFI,UAGJC,EAHI,iBAIJC,EAJI,qBAKJC,EALI,QAMJC,EANI,OAOJC,EAPI,UAQJC,EARI,YASJC,EATI,gBAUJC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAY9+C,IACZ++C,EAAAA,EAAAA,IAAiB/+C,GACjB89C,EAAU,QAAU,QACpBE,OACAjhD,EACAkhD,OACAlhD,GACA,OACAA,OACAA,GACA+0B,EAAAA,EAAAA,IAAe9xB,IACf,GAIIg/C,EAAiBlB,GAAWO,GAClCpf,EAAAA,EAAAA,KAAU,KACR,GAAK+f,EAML,OAFA5uB,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAAC4uB,IAEJ,MAAMC,GAAc3a,EAAAA,EAAAA,KAAY,KAC9B5hC,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACzD,CAAC8E,EAAc1C,EAAQtD,OAAQsD,EAAQpC,KAEpCytC,GAAc/G,EAAAA,EAAAA,KAAY,KAC1B+Z,GACFF,IAEF18B,KACAy9B,EAAAA,GAAAA,MACAd,MACC,CAAC38B,EAAkB48B,EAAWF,EAAWC,IAEtCe,GAAqB7a,EAAAA,EAAAA,KAAanyB,IACtCwrC,EAAqB,CAAE/6C,OAAQuP,EAAQ,MAEvCusC,EAAUvsC,EAAQ,OACjB,CAACwrC,EAAsBe,IAEpBU,GAAoB9a,EAAAA,EAAAA,KAAY,KAChCp+B,EAAAA,KAAiByK,EAAAA,KACrBguC,IACAd,EAAoB,CAAE/6C,SAAUA,OAC/B,CAACA,EAAS+6C,EAAqBc,IAE5BU,GAAsB/a,EAAAA,EAAAA,KAAY,KACjB,IAAjBzhC,GACF+7C,EA9FqB,KA+FrBhB,EAA2B,CAAE/6C,aA/FR,QAiGrB+7C,EAAgB,GAChBhB,EAA2B,CAAE/6C,aAAc,OAE5C,CAACA,EAAc+6C,EAA4BgB,IAExCU,GAAa9b,EAAAA,EAAAA,KAAQ,IACV,IAAX5gC,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAI46C,EAIJ,OACE,0BAAK1d,WAAWoE,EAAAA,GAAAA,GAAe,cAAepE,GAAYyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAClF,mBAACglC,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,QAASr6B,EAAAA,GACT+3B,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACV6U,SAAU2J,IACVjd,QAASgd,EACTpa,UAAU,kBAEV,wBAAGnE,UAAU,wBAEf,mBAAC+B,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,QAASr6B,EAAAA,GACT+3B,MAAM,cACNI,KAAK,UACLhC,WAAWoE,EAAAA,GAAAA,GAAe,cAAe,gBAAiBia,EAAY,QAAU,QAChF9c,QAAS4c,EACTha,UAAWka,EAAY,cAAgB,cAEvC,wBAAGre,UAAU,cACb,wBAAGA,UAAU,gBAEf,mBAAC+B,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,QAASr6B,EAAAA,GACT+3B,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACV6U,SAAU4J,IACVld,QAAS+c,EACTna,UAAU,cAEV,wBAAGnE,UAAU,oBAGf,0BAAKA,UAAU,sBAAsBuB,QAAS0d,GAC3CpD,EAmDT,SAAqBA,GACnB,MAAM,MAAEphC,EAAF,UAASwhC,EAAT,SAAoBF,GAAaF,EAEvC,OACE,sCACE,0BAAK7b,UAAU,QAAQyB,IAAI,SAAQ8d,EAAAA,GAAAA,GAAW9kC,GAASshC,IACtDE,GACC,0BAAKjc,UAAU,WAAWyB,IAAI,SAAQ8d,EAAAA,GAAAA,GAAWtD,KA1DxCuD,CAAY3D,GAgE7B,SAAqB4D,EAAkB1B,GACrC,OACE,sCACE,0BAAK/d,UAAU,QAAQyB,IAAI,QAAQsc,IAAcwB,EAAAA,GAAAA,GAAWxB,IAC5D,0BAAK/d,UAAU,WAAWyB,IAAI,QAAQge,IApENC,CAAYjgD,EAAK,eAAgBs+C,GAC/D,mBAACzE,GAAA,EAAD,OAGF,mBAACvX,GAAA,EAAD,CACEn0B,OAAK,EACLoyB,UAAU,8BACV4B,MAAM,cACNI,KAAK,UACLmC,UAAU,SACVwb,kBAAgB,GAEhB,wBAAG3f,UAAWsf,EAAY/d,QAAS6d,KACjCzuC,EAAAA,IACA,sCACE,0BAAKqvB,UAAU,yBACf,0BAAKA,UAAU,iBACb,mBAAC4f,GAAA,EAAD,CAAaC,MAAI,EAAC1tC,MAAOrP,EAAU,EAAa,IAATF,EAAcskC,SAAUiY,OAMtErB,GACC,mBAAC/b,GAAA,EAAD,CACEn0B,OAAK,EACLoyB,WAAWoE,EAAAA,GAAAA,GAAe,kBAAoC,IAAjBvhC,GAAsB,WACnE++B,MAAM,cACNI,KAAK,UACLmC,UAAU,gBACVD,QAASr6B,EAAAA,GACT03B,QAAS8d,GAET,2BAAMrf,UAAU,yBAAhB,OAIJ,mBAAC+B,GAAA,EAAD,CACEn0B,OAAK,EACLoyB,UAAU,eACV4B,MAAM,cACNI,KAAK,UACLT,QAAS8J,EACTlH,UAAU,gBAEV,wBAAGnE,UAAU,oB,cCxNrB,MA0FA,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAwB,IAAf,OAAEC,GAAa,EACtB,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BojD,GAAYC,EAAAA,GAAAA,IAAoBtjD,EAAQC,GAC9C,MAAO,CACLojD,UAAAA,EACAE,UAAWvjD,EAAOwR,MAAMK,KACxB6zB,UAAW1lC,EAAO4L,MAAMiG,KACxBwvB,kBAAmBrhC,EAAOohC,WAAWC,kBACrCp0B,UAAao2C,EACRA,EAAU3hB,kBAAoB,GAAK2hB,EAAUG,SADxB99C,GAAQA,EAAK+9C,gBAAkB/9C,EAAK0wC,eAExDp2C,EAAOohC,WAAWC,qBAAsBgiB,MAAAA,OAAxC,EAAwCA,EAAWliD,OAX3CqkC,EA1FgC,IAO9C,IAP+C,OACnDvlC,EADmD,SAEnDgN,EAFmD,UAGnDo2C,EAHmD,gBAInDK,EAJmD,UAKnDH,EALmD,UAMnD7d,GACI,EACJ,MAAM,cACJie,EADI,4BAEJC,IACEljC,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,KAEP8e,GAAsBhc,EAAAA,EAAAA,KAAY,KACtC8b,EAAc,CACZ1jD,OAAAA,MAED,CAAC0jD,EAAe1jD,IAEb2hC,EAAeyhB,MAAAA,OAAH,EAAGA,EAAWzhB,aAE1BkiB,GAAsB/c,EAAAA,EAAAA,KAAQ,IAC9BnF,EACKx8B,OAAO8hC,OAAOtF,GAAct+B,QAAO,CAACygD,EAAG/wC,IAAMA,EAAI,IAAG3P,KAAI,IAAoB,IAAnB,GAAElC,EAAF,OAAM6iD,GAAa,EACjF,GAAIA,EAAQ,CACV,IAAKT,EAAUpiD,GACb,OAEF,MAAO,CAAE4X,KAAMwqC,EAAUpiD,IAEzB,GAAKukC,EAAUvkC,GAGf,MAAO,CAAEuE,KAAMggC,EAAUvkC,OAE1BmC,OAAOwB,SACE,IACb,CAAC4gC,EAAW9D,EAAc2hB,IAmB7B,IAjBA/gB,EAAAA,EAAAA,KAAU,KACR,GAAK6gB,MAAAA,GAAAA,EAAWliD,KACX8L,IAAYo2C,EAAUG,UAO3B,OALAI,EAA4B,CAC1BziD,GAAIkiD,EAAUliD,GACd8iD,YAAY,IAGP,KACLL,EAA4B,CAC1BziD,GAAIkiD,EAAUliD,GACd8iD,YAAY,OAGf,CAACZ,MAAAA,OAAD,EAACA,EAAWliD,GAAIkiD,MAAAA,OAAhB,EAAgBA,EAAWG,SAAUv2C,EAAU22C,IAE7CP,EAEL,OACE,0BACE9f,WAAWoE,EAAAA,GAAAA,GACT,mBACA+b,GAAmB,qBAClBz2C,GAAY,aAEf63B,QAAS+e,GAET,0BAAKtgB,UAAU,QACb,2BAAMA,UAAU,SAASvgC,EAAK,uBAC9B,2BAAMugC,UAAU,gBAAgBvgC,EAAK,eAAgBqgD,EAAU3hB,mBAAqB,EAAG,OAEzF,0BAAK6B,UAAU,WACZugB,EAAoBzgD,KAAK6gD,IACxB,GAAKA,EACL,OAAIA,EAAEnrC,KACG,mBAACorC,GAAA,EAAD,CAAQzjB,IAAKwjB,EAAEnrC,KAAK5X,GAAI4X,KAAMmrC,EAAEnrC,OAEhC,mBAACorC,GAAA,EAAD,CAAQzjB,IAAKwjB,EAAEx+C,KAAKvE,GAAIuE,KAAMw+C,EAAEx+C,WAI7C,mBAAC4/B,GAAA,EAAD,CAAQn0B,OAAK,EAACoyB,UAAU,QACrBvgC,EAAK,sB,eChFd,MAiJA,IAAeigC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,SAAS,OAAEC,GAAX,QAAqC,CACnC8X,cAAe/X,EAAO+X,cACtBrS,MAAMC,EAAAA,EAAAA,IAAW3F,EAAQC,GACzB8Y,MAAMyP,EAAAA,EAAAA,IAASvoB,IAAUia,EAAAA,EAAAA,IAAWla,EAAQC,QAAUK,KAJtCklC,EAjJ+B,IAE7C,IAF8C,OAClDvlC,EADkD,UAC1CsjC,EAD0C,KAC/B79B,EAD+B,KACzBqT,EADyB,SACnBiK,EADmB,cACTjL,GACrC,EACJ,MAAM,qBACJqsC,EADI,aAEJC,EAFI,WAGJC,EAHI,WAIJC,EAJI,aAKJC,EALI,eAMJC,EANI,cAOJC,EAPI,mBAQJC,EARI,oBASJC,IACElkC,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,MACN8f,EAAsBC,EAAoBC,IAAuBzU,EAAAA,GAAAA,MACjE0U,EAAkBC,IAAuBjhB,EAAAA,EAAAA,KAAkB,IAC3DkhB,EAAkBC,IAAuBnhB,EAAAA,EAAAA,KAAkB,IAC5D,WAAE1nB,GAAe5W,GAAQ,IACzB,eACJ0/C,EADI,cACYC,EADZ,cAC2BC,EAD3B,gBAC0CC,GAC5CviC,GAAY,GACVwiC,EAAe9/C,IAAQub,EAAAA,EAAAA,IAAiBvb,GAExC+/C,GAAmB5d,EAAAA,EAAAA,KAAY,KACnCuc,EAAqB,CAAE13C,OAAQzM,IAC3BmlD,GACFT,EAAmB,CAAE1kD,OAAAA,MAEtB,CAACmkD,EAAsBgB,EAAgBT,EAAoB1kD,IAExDylD,GAAqB7d,EAAAA,EAAAA,KAAY,KACrCkd,IACAV,EAAa,CAAEsB,UAAW1lD,EAAQqc,WAAAA,IAC9B+oC,GAAiBL,GACnBV,EAAW,CAAErkD,OAAAA,IAEXilD,GACFX,EAAW,CAAEtkD,OAAAA,MAEd,CACDqc,EAAY+nC,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkB/kD,IAGd2lD,GAAyB/d,EAAAA,EAAAA,KAAY,KACzC+c,EAAoB,CAAE3kD,OAAAA,MACrB,CAACA,EAAQ2kD,IAENiB,GAAuBhe,EAAAA,EAAAA,KAAY,KACvCkd,IACAT,EAAW,CAAErkD,OAAAA,IACTulD,GACFf,EAAe,CAAExkD,OAAAA,EAAQyM,OAAQqL,IACjC2sC,EAAc,CAAEzkD,OAAAA,EAAQqX,oBAAoB,KAE5CktC,EAAa,CAAEvkD,OAAAA,MAEhB,CACDA,EAAQ8kD,EAAqBhtC,EAAe0sC,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAKthC,EAIL,OACE,0BAAKugB,WAAWoE,EAAAA,GAAAA,GAAe,kBAAmBpE,GAAYyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GACrFglD,GACC,mBAAChgB,GAAA,EAAD,CACEwgB,QAAM,EACNhV,OAAK,EACLvL,KAAK,OACLhC,UAAU,0BACVuB,QAAS2gB,GAERziD,EAAK,wBAGTuiD,GACC,mBAACjgB,GAAA,EAAD,CACEH,MAAM,SACN2gB,QAAM,EACNhV,OAAK,EACLvL,KAAK,OACLhC,UAAU,0BACVuB,QAASggB,GAER9hD,EAAK,0BAGTqiD,IAAkBE,GACjB,mBAACjgB,GAAA,EAAD,CACEH,MAAM,SACN2gB,QAAM,EACNhV,OAAK,EACLvL,KAAK,OACLhC,UAAU,0BACVuB,QAASggB,GAER9hD,EAAK,8BAGV,mBAACsiC,GAAA,EAAD,CACEn0B,OAAK,EACLs2B,QAAM,EACNlC,KAAK,OACLJ,MAAM,cACNL,QAAS8gB,EACTle,UAAW1kC,EAAK,UAEhB,wBAAGugC,UAAU,gBAEf,mBAAC+Y,GAAA,EAAD,CACE1yC,OAAQi7C,EACR3V,QAAS6V,EACT/mC,MAAOhb,EAAK,iBAAkB+V,GAAOgtC,EAAAA,EAAAA,IAAuBhtC,IAAQ2mC,EAAAA,EAAAA,GAAa18C,EAAM0C,IACvFjB,KAAMsU,EACF/V,EAAK,mCAAmCgjD,EAAAA,EAAAA,IAAgBjtC,IACxD/V,EAAK,mCACTijD,mBAAiB,EACjBC,sBAAoB,EACpB3J,aAAcv5C,EAAK,SACnBw5C,eAAgBzjC,EAAO2sC,EAAqBG,GAE3C9sC,GACC,mBAACotC,GAAA,EAAD,CACEvc,MAAO5mC,EAAK,kBACZ6mC,QAASqb,EACTkB,QAASjB,IAGZpsC,GAAQssC,GACP,mBAACc,GAAA,EAAD,CACEvc,MAAO5mC,EAAK,cACZ6mC,QAASmb,EACToB,QAASnB,UCuQrB,IAAehiB,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAA+D,IAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAM,kBAAEoG,EAAF,aAAqB4X,EAArB,4BAAmCimB,GAAgCnrC,EACnE0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAC1B,aAAE04B,GAAiBjzB,GAAQ,IAEzBzF,OAAQ6kB,EAAavgB,UAAWwgB,GAAmB/kB,EAAOsG,YAC5D+/C,EAAevhC,GAAeC,GAChCxV,EAAAA,EAAAA,IAAkBvP,EAAQ8kB,EAAaC,QACvCzkB,EAEJ,IAAIi8B,EACJ,GAAwB,WAApBr1B,EAA8B,CAChC,MAAMo/C,GAAYhoB,EAAAA,EAAAA,IAAgBt+B,EAAQC,GAC1Cs8B,EAAgB+pB,MAAAA,OAAH,EAAGA,EAAW9gD,YACtB,GAAwB,cAApB0B,EAAiC,CAC1C,MAAM42B,GAAeC,EAAAA,EAAAA,IAAmB/9B,EAAQC,GAChDs8B,EAAgBuB,MAAAA,OAAH,EAAGA,EAAct4B,YACzB,GAAwB,WAApB0B,GAAgChH,IAAakB,EAAAA,GAAgB,CACtE,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GACpDq8B,GAAgB12B,MAAAA,OAAA,EAAAA,EAAY02B,gBAAiB,EAG/C,MAAM0F,EAAoB,CACxBtJ,aAAAA,EACArrB,kBAAAA,EACAkoC,oBAAoBjvC,EAAAA,EAAAA,IAAyBvG,GAC7CumD,oBAAoBrR,EAAAA,EAAAA,IAAqBl1C,GACzCqmD,aAAAA,EACA3gD,KAAAA,EACA62B,cAAAA,EACA6Y,gBAAgBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAC7CumD,cAAe9gD,IAAQs4B,EAAAA,EAAAA,IAAoBh+B,EAAQ0F,GACnDwf,aAAAA,EACAimB,4BAAAA,EACAsb,qBAAsB77C,KAAKC,IAAI,EAAG7K,EAAO2B,SAAS4L,aAAa/H,OAAS,GACxE27B,gBAAiBnhC,EAAOmhC,gBACxB7d,UAAWtjB,EAAOsjB,WAGdmb,GAAet7B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,GAAwB,WAApBiH,IAAiCu3B,EACnC,OAAOwD,EAKT,GAFA78B,OAAOshD,OAAOzkB,EAAO,CAAExD,aAAAA,IAEnBv+B,IAAakB,EAAAA,GAAgB,CAC/B,MAAMulD,GAAkBvyC,EAAAA,EAAAA,IAAyBpU,EAAQC,EAAQC,GAC3DqD,EAAUojD,GAAkBp3C,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQ0mD,QAAmBrmD,EACjFsmD,EAAmBrjD,GAAUsjD,EAAAA,EAAAA,IAAsB7mD,EAAQuD,QAAWjD,EAE5E,MAAO,IACF2hC,EACH6kB,iBAAkBH,EAClBI,UAAU,EACVH,iBAAAA,GAIJ,MAAME,GAAmBxoB,EAAAA,EAAAA,IAAgBt+B,EAAQC,GACjD,GAAI6mD,MAAAA,GAAAA,EAAkBthD,OAAQ,CAC5B,MAAMwhD,EAAqBvoB,EAAaqoB,EAAiB,KACnD,SACJC,GACGC,IAAsBxjD,EAAAA,EAAAA,IAA4BxD,EAAQgnD,EAAoB9mD,IAAc,GAEjG,MAAO,IACF+hC,EACH6kB,iBAAAA,EACAC,SAAAA,GAIJ,OAAO9kB,IA1ESuD,EAvV4B,IAuB1C,IAvB2C,OAC/CvlC,EAD+C,SAE/CC,EAF+C,gBAG/CgH,EAH+C,QAI/C+/C,EAJ+C,iBAK/CH,EAL+C,aAM/CroB,EAN+C,SAO/CsoB,EAP+C,iBAQ/CH,EAR+C,aAS/CjuB,EAT+C,mBAU/C4tB,EAV+C,kBAW/Cj5C,EAX+C,mBAY/CkoC,EAZ+C,aAa/C6Q,EAb+C,KAc/C3gD,EAd+C,cAe/C62B,EAf+C,eAgB/C6Y,EAhB+C,cAiB/CoR,EAjB+C,aAkB/CthC,EAlB+C,4BAmB/CimB,EAnB+C,qBAoB/Csb,EApB+C,gBAqB/CtlB,EArB+C,UAsB/C7d,GACI,EACJ,MAAM,iBACJuI,EADI,WAEJq7B,EAFI,aAGJjhD,EAHI,SAIJ/D,EAJI,iBAKJilD,EALI,mBAMJrtC,EANI,iBAOJstC,EAPI,sBAQJ3lD,IACEif,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,KACPsiB,GAAqB5b,EAAAA,EAAAA,KAAO,IAE3B6b,EAAoBC,IAAyBvjB,EAAAA,EAAAA,IAAS,GACvD2iB,EAAkB14B,MAAMwJ,QAAQqvB,GAAoBA,EAAiBQ,GAAsBR,EAC3FU,EAAgB/oB,GAAgBkoB,EAAkBloB,EAAakoB,QAAmBrmD,EAClFmnD,EAAsBx5B,MAAMwJ,QAAQqvB,GACtCA,EAAiBthD,OAAUshD,EAAmB,OAAIxmD,EAChDonD,EAAkBhiD,IAAQg6C,EAAAA,EAAAA,GAAa18C,EAAM0C,GAAMF,OACnDmiD,EAAkBf,GAAmB1iD,EAAAA,EAAAA,IAAelB,EAAM4jD,QAAoBtmD,GAC9E,SAAE0iB,GAAatd,GAAQ,IAE7B88B,EAAAA,EAAAA,KAAU,KACJtiC,IAAakB,EAAAA,IAAkB8jB,GAAgB+hC,GACjDntC,EAAmB,CAAE7Z,OAAAA,MAEtB,CAACA,EAAQ6Z,EAAoBoL,EAAchlB,EAAU+mD,KAGxDzkB,EAAAA,EAAAA,KAAU,KACR+kB,EAAsB,KACrB,CAACT,KAEJc,EAAAA,GAAAA,GAAiB3nD,EAAQ0mD,EAAiBa,GAE1C,MAAQ5zB,MAAOF,IAAgBm0B,EAAAA,GAAAA,KAEzBC,EAAuBp0B,GAAeK,EAAAA,GACtCg0B,EAAwB16C,EAAAA,IAA2BC,EAGnD06C,GAAevc,EAAAA,EAAAA,IAAuB,MACtCwc,GAAqBxc,EAAAA,EAAAA,KAAgB,GAErCyc,GAAoBrgB,EAAAA,EAAAA,KAAY,KACpChc,EAAiB,CAAE1qB,GAAIlB,MACtB,CAAC4rB,EAAkB5rB,IAEhB87C,GAAqBlU,EAAAA,EAAAA,KAAatjC,IACtC2iD,EAAW,CAAEjnD,OAAAA,EAAQsE,UAAAA,EAAW2S,SAAS,MACxC,CAACgwC,EAAYjnD,IAEVkoD,IAA2BtgB,EAAAA,EAAAA,KAAY,KAC3C,GAAI2f,EAAe,CACjBvhD,EAAa,CAAEhG,OAAQunD,EAAcvnD,OAAQC,SAAAA,EAAUqE,UAAWijD,EAAcrmD,KAEhF,MAAMmE,GAAW8iD,EAAAA,GAAAA,GAAcX,GAAuB,EAAGH,EAAqB,GAC9EC,EAAsBjiD,MAEvB,CAACkiD,EAAevhD,EAAc/F,EAAUunD,EAAqBH,IAE1De,IAAuBxgB,EAAAA,EAAAA,KAAY,KACvC3lC,EAAS,CAAEf,GAAIlB,EAAQC,SAAUkB,EAAAA,GAAgBC,KAAM,aACtD,CAACa,EAAUjC,IAERqoD,IAAsBzgB,EAAAA,EAAAA,KAAY,KACtClhC,YAAW,KACT0gD,EAAmBplC,SAAU,IA1HD,OA4H7B,IAEGsmC,IAAkB1gB,EAAAA,EAAAA,KAAah6B,IACnC,GAAKw5C,EAAmBplC,QAAxB,CAIA,GADAolC,EAAmBplC,SAAU,EACzB7U,EAAAA,GAAyB,CAC3B,MAAMo7C,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IAC5DD,MAAAA,GAAAA,EAAch/B,OAGhB,GAAI+8B,EAGF,OAFA9kD,SACA6mD,KAIF,GAAIpoD,IAAakB,EAAAA,IAAsC,WAApB8F,GAAyD,IAAzBu/C,EAUjE,OATIr5C,EAAAA,IAA2B26C,GAC7Bl6C,EAAEo6B,kBACF/lC,EAAS,CAAEf,QAAIb,KAEf8mD,SAGFkB,KAKFnB,IACAmB,QACC,CACDpoD,EAAUgH,EAAiBu/C,EAAsBF,EAAoBY,EAAkBY,EACvF7lD,EAAUklD,EAAkB3lD,EAAuB6mD,KAG/CI,GACJh1B,GAAeK,EAAAA,IACZL,EAAci1B,EAAAA,IAEjBj1B,EAAck1B,EAAAA,IACXl1B,EAAcK,EAAAA,MACZ2zB,GAAmBA,EAAkB,IAEtCmB,GAA6BH,IACjCh1B,EAAcG,EAAAA,IACXH,EAAco1B,EAAAA,GAGbC,GAAkBjkD,SAAQke,MAAAA,OAAA,EAAAA,EAAUsiC,iBAAiBtiC,MAAAA,OAA3B,EAA2BA,EAAUuiC,mBAAmBviC,MAAAA,OAAxD,EAAwDA,EAAUqiC,iBAEhGrY,aAAcgc,GACd9b,qBAAsB+b,KACpB9b,EAAAA,GAAAA,GAAkB4b,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkB/lC,OAAW1iB,GAAW,IAGrF0sC,aAAcoc,GACdlc,qBAAsBmc,KACpBlc,EAAAA,GAAAA,GAAkBroC,QAAQuhD,IAExBiD,IAAwBH,EAAAA,GAAAA,GAAiB9C,GAAc,IAG3DrZ,aAAcuc,GACdrc,qBAAsBsc,KACpBrc,EAAAA,GAAAA,GAAkBroC,QAAQ0iD,IAExBiC,IAAyBN,EAAAA,GAAAA,GAAiB3B,GAAe,GACzDkC,IAA+BP,EAAAA,GAAAA,GAAiB1B,GAAqB,GACrEkC,IAAoBR,EAAAA,GAAAA,GAAiBpC,GAAU,GAC/C6C,IAA8BT,EAAAA,GAAAA,GAAiBxB,GAE/CkC,GAAkBN,IAA6BE,IAC/CL,IAA2BE,IAGjC9mB,EAAAA,EAAAA,KAAU,KACR,MAAMsnB,EAAc9B,EAAa/lC,QACjC,GAAK6nC,EAIL,OAAKjB,IAA+BgB,QAMhCrU,GAAsBkT,IACpBT,EAAmBhmC,UACrB6nC,EAAYhW,UAAU9lB,IAAI,gBAAiB,YAC3Ci6B,EAAmBhmC,SAAU,GAI/Btb,YAAW,KACTmjD,EAAYhW,UAAUC,OAAO,cAhOV,OAmOrB+V,EAAYhW,UAAUC,OAAO,iBAC7BkU,EAAmBhmC,SAAU,KAjB7B6nC,EAAYhW,UAAUC,OAAO,gBAAiB,iBAC9CkU,EAAmBhmC,SAAU,MAkB9B,CAAC4mC,GAA4BgB,GAAgBnB,GAA6BlT,IAE7E,MAAM,qBAAE3Q,IAAyBnB,GAAoB1gC,EAAMm+B,EAAiB7d,GAAW,GAgEvF,SAASymC,KAA6D,IAA5CC,EAA4C,wDAA3BC,EAA2B,wDACpE,OACE,0BAAK1mB,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,UACLJ,MAAM,cACNL,QAASyjB,GACT7gB,UAAW1kC,EAAKgnD,EAAU,QAAU,SAEpC,0BAAKzmB,WAAWoE,EAAAA,GAAAA,GAAe,uBAAwBqiB,GAAW,iBAEnEC,GAAqB,mBAAC,GAAD,OAK5B,MAAMC,GAAwBplD,QAAQskD,IAA2BE,IAEjE,OACE,0BAAK/lB,UAAU,eAAeqK,IAAKoa,GACjC,mBAAC5iB,GAAA,EAAD,CACErO,KAAMoU,EAA8B,OAAS,aAC7C9F,UAAWohB,GAnFO,WAApBv/C,GAAgChH,IAAakB,EAAAA,GA6B7C,uCACI0mD,GAAwBrB,EAAuB,IAAMsD,GAAiBhC,GAAuB,GAC/F,0BAAKxkB,UAAU,oBAAoBuB,QAASojB,IACzC1/B,EAAAA,EAAAA,IAASvoB,GACR,mBAACkqD,GAAA,EAAD,CACEz9C,OAAQzM,EACR04B,aAAcA,EACdrG,OAAQuS,GACRulB,SAAUtlD,QAAQ+/B,IAClBwlB,aAAc7D,EACd8D,iBAAe,EACfC,oBAAkB,EAClBC,OAAK,IAGP,mBAACC,GAAA,EAAD,CACExqD,OAAQA,EACR04B,aAAcA,EACdrG,OAAQuS,GACRulB,SAAUtlD,QAAQ+/B,IAClBylB,iBAAe,EACfD,cAAY,EACZE,oBAAkB,EAClBC,OAAK,MAlDW,WAApBtjD,EACF,sCACG6iD,KACD,6BACG/mD,EAAK,gBAAiBu5B,EAAe,OAGpB,WAApBr1B,EACF,sCACG6iD,KACD,6BACG/mD,EAAK,sBAAuBu5B,EAAe,OAG1B,cAApBr1B,EACF,sCACG6iD,KACD,6BACG3U,EAAiBpyC,EAAK,aAAeA,EAAK,WAAYu5B,EAAe,YAGxEj8B,GAiEJ,mBAAC,GAAD,CACEojD,gBACG6F,IAA6BzkD,QAAQ2kD,KAClCL,IAA2BtkD,QAAQwkD,IAEzCrpD,OAAQA,IAGTspD,IAA6BE,IAC5B,mBAAC,GAAD,CACE/oB,IAAKzgC,EACLsD,QAASkmD,GACTrxC,MAAOsxC,IAAgC,EACvC32C,MAAOu0C,EACPnM,YAAayO,GACbrmB,WAAWoE,EAAAA,GAAAA,GAAe6hB,GAAyBU,IAAyB,cAC5E9O,eAAgBuO,GAAoB5N,OAAqBz7C,EACzDwkC,QAASqjB,GACT9M,iBAAkBgN,KAIrBW,IACC,mBAAC,GAAD,CACEtoB,IAAKzgC,EACLA,OAAQA,EACR+iB,SAAUkmC,GACV3lB,UAAW0lB,KAIf,0BAAK1lB,UAAU,gBACZ2mB,IACC,mBAAC,GAAD,CACExpB,KAAKgqB,EAAAA,EAAAA,IAAcpB,IACnB/lD,QAAS+lD,GACT/lB,UAAW8lB,KAGf,mBAAC,GAAD,CACEppD,OAAQA,EACRC,SAAUA,EACVgH,gBAAiBA,EACjByvC,kBAAmBuT,W,yBC1ZtB,SAASS,GAAQC,GACtB,MAAO,YAAaA,EAGf,SAASC,GAAclpD,EAAwB66B,GACpD,IAMIsuB,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAActpD,EAAS,GAAGwI,KAC1B+gD,UAAUC,EAAAA,EAAAA,IAAiC,IAAnBxpD,EAAS,GAAGwI,MACpCihD,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DArpD,EAASkH,SAAQ,CAACtF,EAASwP,KACrBxP,EAAQiyB,UACLs1B,GAOHA,EAAanpD,SAASsC,KAAKV,GACvBA,EAAQ+G,QAAQ7F,OAClBqmD,EAAaQ,YAAc/nD,IAR7BunD,EAAe,CACbS,QAAShoD,EAAQ4D,UACjBxF,SAAU,CAAC4B,GACX+nD,YAAa/nD,GASjBwnD,EAAmB9mD,KAAKV,GAG1B,MAAMioD,EAAc7pD,EAASoR,EAAQ,GASrC,IANE+3C,GACKU,GAAgBA,EAAYrkD,WAAaqkD,EAAYrkD,YAAc2jD,EAAaS,UAErFR,EAAmB9mD,KAAK6mD,GACxBA,OAAexqD,GAEbkrD,EAAa,CACf,MAAMC,GAAyBN,EAAAA,EAAAA,IAAiC,IAAnBK,EAAYrhD,MACrD6gD,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYrhD,KAC1B+gD,SAAUO,EACVL,aAAc,IAEhBC,EAAWpnD,KAAK+mD,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAannD,KAAK8mD,KAEnCS,EAAYrqD,KAAOq7B,GAChBj5B,EAAQmM,WAAa87C,EAAY97C,UACjCnM,EAAQiH,aAAeghD,EAAYhhD,aACnCkhD,EAAAA,EAAAA,IAAgBnoD,KAChBmoD,EAAAA,EAAAA,IAAgBF,IAEjBjoD,EAAQooD,aAAeH,EAAYG,cAEjCpoD,EAAQooD,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1DroD,EAAQooD,YAAYzjD,aAAesjD,EAAYG,YAAYzjD,YAC3D3E,EAAQooD,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnEtoD,EAAQuoD,eACRN,EAAYM,eACXN,EAAYrhD,KAAO5G,EAAQ4G,KA9ER,OAgFvB4gD,EAAqB,GACrBC,EAAiBI,aAAannD,KAAK8mD,QAKlCM,E,sFCrFT,MAAMU,GAAkChjC,EAAAA,GAAa,IAAO,IACtDijC,GAAgC5+C,EAAAA,GAA0B,IAAM,I,eCN/D,SAAS6+C,GAAmBC,GACjC,MAA8B,iBAAhBA,ECaT,SAASC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EANwC,IADb,IAQ3BA,EAT+B,IADd,IAajB,SAASC,GAAyB/oD,EAAqBgpD,GAC5D,MAAMC,GAAQC,EAAAA,EAAAA,IAAalpD,GACrBmpD,GAAcC,EAAAA,EAAAA,IAAmBppD,GACjC6hB,GAAQwnC,EAAAA,EAAAA,IAAgBrpD,KAAYspD,EAAAA,EAAAA,IAAuBtpD,GAC3Di4B,GAAQsxB,EAAAA,EAAAA,IAAgBvpD,GAExBwpD,EAAiBjoD,SAAQ+nD,EAAAA,EAAAA,IAAuBtpD,KAChD,MAAEqwB,EAAF,OAAS2lB,GAAWn0B,GACtB4nC,EAAAA,GAAAA,IAA+B5nC,EAAOonC,EAAOE,EAAaK,EAAgBR,IAC1EU,EAAAA,GAAAA,IAAyBzxB,EAAQgxB,EAAOE,EAAaH,GAGnDW,EAAgBf,GADNrnD,SAAQ44B,EAAAA,EAAAA,IAAen6B,KAGvC,IAAI4pD,EAAgB,EAChBv5B,EAAQs5B,GAAiBA,EAAgBt5B,EAvBjB,KAwB1Bu5B,EAAgBD,EAAgBt5B,GAE9B2lB,EAAS4T,EA3BU,OA2B6C5T,EAAS4T,EA1BjD,KA2B1BA,EA5BqB,GA4Bc5T,GAGrC,MAAM6T,EAAaxiD,KAAKuG,MAAMyiB,EAAQu5B,GAChCE,EAAcziD,KAAKuG,MAAMooC,EAAS4T,GAExC,MAAO,CACLv5B,MAAOw5B,EACP7T,OAAQ8T,EACRC,QAASF,EAAaF,GAAiBG,EArClB,ICkDzB,SAASE,GAAWC,EAAgBC,GAClC,OAAOD,EAAK3pD,QAAO,CAAC6pD,EAAaC,IAASD,EAAcC,GAAMF,GAGhE,SAASG,GAAMC,EAAaC,EAAaC,GACvC,OAAOF,EAAMC,EAAMA,EAAOD,EAAME,EAAOA,EAAOF,EAOhD,SAASG,GAAuBC,GAC9B,MAAMC,EAAwB,CAAEt6B,MAAO,EAAG2lB,OAAQ,GAalD,OAZA0U,EAAOplD,SAAQ,IAGT,IAHU,WACdslD,EADc,MAEdC,GACI,EApEC,EAqEDA,IACFF,EAAOt6B,MAAQu6B,EAAWv6B,MAAQu6B,EAAW16B,GArEzC,EAuEF26B,IACFF,EAAO3U,OAAS4U,EAAW5U,OAAS4U,EAAW55B,MAI5C25B,EAGF,SAASG,GACd7B,EACAE,EACAH,EACA9M,GAEA,MACM6O,EAtDR,SAAmB3sD,GACjB,OAAOA,EAAS0B,KACbE,IACC,MAAM4qD,EAAa7B,GAAyB/oD,GAE5C,OAAO4qD,EAAWv6B,MAAQu6B,EAAW5U,UAiD1BgV,CAAU9O,EAAM99C,UACzB6sD,EA7CR,SAAwBF,GACtB,OAAOA,EAAOjrD,KAAK45C,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAO54C,KAAK,IA4C/DoqD,CAAeH,GAC7BI,EA1CR,SAAyBJ,GACvB,OAAOA,EAAOzqD,QAAO,CAACT,EAAQ65C,IAAUA,EAAQ75C,GAAQ,GAAKkrD,EAAO9oD,OAyC/CmpD,CAAgBL,GAC/BM,EAAaN,EAAO9oD,OACpBqpD,EAAYP,EAAO34B,MAAMsnB,GAAUA,EAAQ,IAC3C6R,GAAWC,EAAAA,GAAAA,IAAkBvC,EAAOE,GAAa,EAAOH,IAAcG,EAAc,IAAM,GAAKsC,GAAAA,GAGrG,IAAIf,EAEJ,MAAMz6C,EAAS,CACb86C,OAAAA,EACAE,YAAAA,EACAE,aAAAA,EACAI,SAAAA,EACAG,SAAU,IACVC,UAVgBJ,EAWhBK,QAlBc,GA+BhB,OATElB,EADEW,GAAc,GAAKC,EAgBzB,YAOkB,IANhBP,OAAQc,EADyB,aAEjCV,EAFiC,SAGjCI,EAHiC,SAIjCG,EAJiC,QAKjCE,EALiC,UAMjCD,EAAa,EAAIJ,EAAY,GACb,EAChB,MAAMR,EAxER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAOjrD,KAAK45C,GAAWyR,EAAe,IAAMd,GAAM3Q,EAAO,EAAG,MAAQ2Q,GAAM3Q,EAAO,MAAQ,KAuEjFoS,CAAWD,EAAgBV,GACpCt2C,EAAQg3C,EAAe5pD,OACvBpC,EAAS,IAAI6qB,MAAM7V,GACnBk3C,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAI72C,EAAS,EACb42C,EAAW3mD,SAAS6mD,IAClBD,EAAQxrD,KAXQ,EAAC2U,EAAgB+2C,KACnC,MACMC,EAAMrC,GADUe,EAAOvkD,MAAM6O,EAAQA,EAAS+2C,GACd,GAEtC,OAAQb,GAAYa,EAAe,GAAKR,GAAWS,GAOpCC,CAAYj3C,EAAQ82C,IACjC92C,GAAU82C,KAGZJ,EAASrrD,KAAK,CACZurD,WAAAA,EACAC,QAAAA,KAIJ,IAAK,IAAIK,EAAQ,EAAGA,IAAU13C,IAAS03C,EAAO,CAC5C,MAAMC,EAAS33C,EAAQ03C,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,IAIxB,IAAK,IAAID,EAAQ,EAAGA,IAAU13C,EAAQ,IAAK03C,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW33C,EAAQ03C,IAASC,EAAQ,CACvD,MAAMC,EAAQ53C,EAAQ03C,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,IAKlC,IAAK,IAAIF,EAAQ,EAAGA,IAAU13C,EAAQ,IAAK03C,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW33C,EAAQ03C,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU53C,EAAQ03C,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS73C,EAAQ03C,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,IAM3C,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIn9C,EAAI,EAAGA,EAAIs8C,EAAS9pD,OAAQwN,IAAK,CACxC,MAAM,QACJy8C,EADI,WAEJD,GACEF,EAASt8C,GACPo9C,EAAYZ,EAAWhqD,OACvB6qD,EAAc9C,GAAWkC,EAAS,GAAKN,GAAWiB,EAAY,GAE9DE,EADgB1lD,KAAKkpB,OAAO27B,GACLR,EAAW,IAAM,EACxCsB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,GAPI,GASPC,EAAO7lD,KAAK8lD,IAAIL,EAAcnB,GAAaoB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASt8C,GAC1Bm9C,EAAcM,GAIlB,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAcnrD,OAC/B,IAAIuN,EAAQ,EACRwhB,EAAI,EACR,IAAK,IAAIu8B,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5BvX,EAAS3uC,KAAKuG,MAAM6/C,GAC1B,IAAIv9B,EAAI,EAER,IAAK,IAAIw9B,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAlOJ,GAmOW,IAAR0C,EAlOJ,EADC,IAoOGA,IAAQD,EAAW,EAjOpB,EAHF,IAqOW,IAARI,EAjOH,EAJA,IAsOGA,IAAQF,EAAW,EApOrB,EAFD,GAuOI9T,EAAQqR,EAAOv7C,GACf6gB,EAAQq9B,IAAQF,EAAW,EAAIjC,EAAWr7B,EAAI7oB,KAAKuG,MAAM8rC,EAAQ+T,GACvE5tD,EAAO2P,GAAS,CACdo7C,WAAY,CACV16B,EAAAA,EACAc,EAAAA,EACAX,MAAAA,EACA2lB,OAAAA,GAEF6U,MAAAA,GAEF36B,GAAKG,EAAQu7B,IACXp8C,EAEJwhB,GAAKglB,EAAS4V,EAGhB,OAAO/rD,EA1II8tD,CAA0B19C,GACX,IAAfo7C,EA4Ib,SAAmBp7C,GACjB,MAAM,OACJ86C,EADI,YAEJE,EAFI,aAGJE,GACEl7C,EACJ,MAAuB,OAAhBg7C,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4B96C,GAC1B,MAAM,OACJ86C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACE17C,EACE+lC,EAAS3uC,KAAKuG,MAAMvG,KAAKkpB,IAAIg7B,EAAWR,EAAO,GAAI1jD,KAAKkpB,IAAIg7B,EAAWR,EAAO,IAAKY,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNhB,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAOk7B,EACPvV,OAAAA,GAEF6U,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG,EACHc,EAAGglB,EAAS4V,EACZv7B,MAAOk7B,EACPvV,OAAAA,GAEF6U,MAAO+C,KA9BLC,CAAmB59C,GACH,OAAhBg7C,GAAwC,OAAhBA,EAiC9B,SAAiCh7C,GAC/B,MAAM,OACJ86C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACE17C,EACEogB,GAASk7B,EAAWK,GAAW,EAC/B5V,EAAS3uC,KAAKuG,MAAMvG,KAAKkpB,IAAIF,EAAQ06B,EAAO,GAAI1jD,KAAKkpB,IAAIF,EAAQ06B,EAAO,GAAIY,KAClF,MAAO,CAAC,CACNf,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAAA,EACA2lB,OAAAA,GAEF6U,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAGG,EAAQu7B,EACX56B,EAAG,EACHX,MAAAA,EACA2lB,OAAAA,GAEF6U,MAAO+C,IAxDHE,CAAwB79C,GA4DhC,SAA4BA,GAC1B,MAAM,OACJ86C,EADI,SAEJW,EAFI,SAGJH,EAHI,QAIJK,EAJI,UAKJD,GACE17C,EACE89C,EAAe1mD,KAAKuG,MAAM,IAAM89C,GAChCsC,EAAc3mD,KAAKkpB,IACvBlpB,KAAKuG,MACHvG,KAAKC,IACH,IAAOikD,EAAWK,IACjBL,EAAWK,GAAWb,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWK,EAAUmC,GAEjBE,EAAa1C,EAAWyC,EAAcpC,EACtC5V,EAAS3uC,KAAKkpB,IAAIo7B,EAAWtkD,KAAKuG,MAAMvG,KAAKkpB,IAAI09B,EAAalD,EAAO,GAAIiD,EAAcjD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAO49B,EACPjY,OAAAA,GAEF6U,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG+9B,EAAarC,EAChB56B,EAAG,EACHX,MAAO29B,EACPhY,OAAAA,GAEF6U,MAAO+C,IA/FHM,CAAmBj+C,GArJdk+C,CAAUl+C,GACK,IAAfo7C,EAuPb,SAAqBp7C,GACnB,MAAM,YAAEg7C,GAAgBh7C,EAExB,MAA0B,MAAnBg7C,EAAY,GAKrB,SAAiCh7C,GAC/B,MAAM,UACJ07C,EADI,QAEJC,EAFI,OAGJb,EAHI,SAIJQ,EAJI,SAKJG,GACEz7C,EACEm+C,EAAczC,EACd0C,EAAchnD,KAAKuG,MACvBvG,KAAKkpB,KACFo7B,EAAYC,GAAW,EACvBb,EAAO,IAAMQ,EAAWK,IAAab,EAAO,GAAKA,EAAO,MAGvDuD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAalnD,KAAKC,IACtBokD,EACArkD,KAAKuG,MACHvG,KAAKkpB,KACFg7B,EAAWK,GAAW,EACvBvkD,KAAKkpB,IACH89B,EAActD,EAAO,GACrBuD,EAAevD,EAAO,OAKxByD,EAAYnnD,KAAKkpB,IAAIlpB,KAAKuG,MAAMwgD,EAAcrD,EAAO,IAAKQ,EAAWK,EAAU2C,GAErF,MAAO,CAAC,CACN3D,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAOm+B,EACPxY,OAAQoY,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAGs+B,EAAY5C,EACf56B,EAAG,EACHX,MAAOk+B,EACPvY,OAAQsY,GAEVzD,MAAO+C,GACN,CACDhD,WAAY,CACV16B,EAAGs+B,EAAY5C,EACf56B,EAAGs9B,EAAe1C,EAClBv7B,MAAOk+B,EACPvY,OAAQqY,GAEVxD,MAAO+C,IAzDLa,CAAwBx+C,GA6D9B,SAAgCA,GAC9B,MAAM,SACJs7C,EADI,OAEJR,EAFI,UAGJY,EAHI,QAIJC,GACE37C,EACEg+C,EAAa1C,EACb6C,EAAc/mD,KAAKuG,MAAMvG,KAAKkpB,IAAI09B,EAAalD,EAAO,GAAI,KAAQY,EAAYC,KAC9EoC,GAAezC,EAAWK,GAAW,EACrC0C,EAAejnD,KAAKkpB,IACxBo7B,EAAYyC,EAAcxC,EAC1BvkD,KAAKuG,MAAMvG,KAAKkpB,IACdy9B,EAAcjD,EAAO,GACrBiD,EAAcjD,EAAO,MAKzB,MAAO,CAAC,CACNH,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAO49B,EACPjY,OAAQoY,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG,EACHc,EAAGo9B,EAAcxC,EACjBv7B,MAAO29B,EACPhY,OAAQsY,GAEVzD,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG89B,EAAcpC,EACjB56B,EAAGo9B,EAAcxC,EACjBv7B,MAtBe49B,EAAaD,EAAcpC,EAuB1C5V,OAAQsY,GAEVzD,MAAO+C,IAtGLc,CAAuBz+C,GA3PhB0+C,CAAY1+C,GAqWzB,SAAoBA,GAClB,MAAM,YAAEg7C,GAAgBh7C,EAExB,MAA0B,MAAnBg7C,EAAY,GAKrB,YAMkB,IANa,SAC7BM,EAD6B,OAE7BR,EAF6B,QAG7Ba,EAH6B,UAI7BD,EAJ6B,SAK7BD,GACgB,EAChB,MAAMkD,EAAIrD,EACJsD,EAAKxnD,KAAKuG,MAAMvG,KAAKkpB,IAAIq+B,EAAI7D,EAAO,GAAI,KAAQY,EAAYC,KAC5DkD,EAAIznD,KAAKuG,OAAO29C,EAAW,EAAIK,IAAYb,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAK1nD,KAAKC,IAAIokD,EAAUrkD,KAAKuG,MAAMvG,KAAKkpB,IAAI,IAAOg7B,EAAW,EAAIK,GAAUkD,EAAI/D,EAAO,MACvFiE,EAAK3nD,KAAKuG,MAAMvG,KAAKC,IAAID,KAAKC,IAAIokD,EAAU,KAAQH,EAAW,EAAIK,IAAWkD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIpD,EACvBsD,EAAK7nD,KAAKkpB,IAAIo7B,EAAYkD,EAAKjD,EAASkD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAOu+B,EACP5Y,OAAQ6Y,GAEVhE,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG,EACHc,EAAG69B,EAAKjD,EACRv7B,MAAO0+B,EACP/Y,OAAQkZ,GAEVrE,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG6+B,EAAKnD,EACR56B,EAAG69B,EAAKjD,EACRv7B,MAAO4+B,EACPjZ,OAAQkZ,GAEVrE,MAlgBM,GAmgBL,CACDD,WAAY,CACV16B,EAAG6+B,EAAKnD,EAAUqD,EAAKrD,EACvB56B,EAAG69B,EAAKjD,EACRv7B,MAAO2+B,EACPhZ,OAAQkZ,GAEVrE,MAAO+C,IAlDLuB,CAAsBl/C,GAsD5B,YAMkB,IANc,UAC9B07C,EAD8B,OAE9BZ,EAF8B,SAG9BQ,EAH8B,QAI9BK,EAJ8B,SAK9BF,GACgB,EAChB,MAAMoD,EAAInD,EACJoD,EAAK1nD,KAAKuG,MAAMvG,KAAKkpB,IAAIu+B,EAAI/D,EAAO,GAAI,IAAOQ,EAAWK,KAC1DgD,EAAIvnD,KAAKuG,OAAO+9C,EAAY,EAAIC,IAAY,EAAIb,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAKxnD,KAAKuG,MAAMghD,EAAI7D,EAAO,IAC3BmE,EAAK7nD,KAAKuG,MAAMghD,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAItD,EACvBqD,EAAK5nD,KAAKC,IAAIokD,EAAUrkD,KAAKkpB,IAAIg7B,EAAWwD,EAAKnD,EAASgD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACV16B,EAAG,EACHc,EAAG,EACHX,MAAO0+B,EACP/Y,OAAQ8Y,GAEVjE,MAAO+C,IACN,CACDhD,WAAY,CACV16B,EAAG6+B,EAAKnD,EACR56B,EAAG,EACHX,MAAO4+B,EACPjZ,OAAQ6Y,GAEVhE,MAAO+C,GACN,CACDhD,WAAY,CACV16B,EAAG6+B,EAAKnD,EACR56B,EAAG69B,EAAKjD,EACRv7B,MAAO4+B,EACPjZ,OAAQkZ,GAEVrE,MArjBK,GAsjBJ,CACDD,WAAY,CACV16B,EAAG6+B,EAAKnD,EACR56B,EAAG69B,EAAKK,EAAK,EAAItD,EACjBv7B,MAAO4+B,EACPjZ,OAAQoZ,GAEVvE,MAAO+C,IAnGLyB,CAAuBp/C,GAxWhBq/C,CAAWr/C,GAGf,CACLy6C,OAAAA,EACA6E,eAAgB9E,GAAuBC,ICnI3C,IAAI8E,GAEW,SAASC,GAAqBvuD,GAiB3C,OAhBKsuD,KACHA,GAAUt3B,SAAS+iB,cAAc,QAEjCuU,GAAQ/e,MAAMif,KAAO/+C,EAAAA,GAEjB,qHACA,0GACJ6+C,GAAQ/e,MAAMkf,WAAa,SAC3BH,GAAQ/e,MAAMzxC,SAAW,WACzBwwD,GAAQ/e,MAAMmf,KAAO,SACrBJ,GAAQ/e,MAAMof,QAAU,MACxB33B,SAAStJ,KAAKkhC,YAAYN,KAG5BA,GAAQ7X,UAAYz2C,EAEbsuD,GAAQxe,YCZF,SAAS+e,GACtBjgB,EACApzC,EACAszD,EACAC,EACAC,EACAnsD,IAEA4xC,EAAAA,EAAAA,KAAgB,KACd,GAAIqa,GAAalgB,EAAWpxB,QAAS,CACnC,MAAMyxC,EAAoBrgB,EAAWpxB,QAAQ0xC,QAAwB,iBAErEC,EAAAA,GAAAA,GACEF,EACArgB,EAAWpxB,QAEXwxC,EAAmB,MAAQ,cAlBd,QAoBMnzD,IAAnBkzD,EArBuB,SAqBiClzD,EACxDkzD,OACAlzD,EACAgH,MAGH,CAAC+rC,EAAYpzC,EAAQszD,EAAWC,EAAgBC,EAAkBnsD,ICrBvE,MAGMusD,GAA4B,EAAI7E,GAAAA,GAChC8E,GAA6BruD,OAAOupD,GAAAA,IACpC+E,GAAgC,+BAEvB,SAASC,GACtBC,EACAxa,EACAl1C,EACAomD,EACAuJ,EACAC,EACAC,EACAC,EACAC,EACAr0D,EACAs0D,EACAC,EACAhI,EACAiI,GAEA,MAAM,gBAAEzuD,EAAF,oBAAmB0uD,IAAwBh0C,EAAAA,EAAAA,OAE1Ci0C,EAAwBC,EAA0BC,IAA8BvkB,EAAAA,GAAAA,MAChFwkB,EAAUC,EAAYC,IAAgB1kB,EAAAA,GAAAA,KACvC2kB,GAAsBxpB,EAAAA,EAAAA,MAoJ5B,OAzCAjJ,EAAAA,EAAAA,KAAU,KACR,IAAK/4B,EAAAA,IAAgByqD,IAAmBC,GAAYI,EAClD,OAGF,IAAIW,EACJ,OAAO9oB,EAAAA,GAAAA,IAAcqN,EAAax3B,QAAU,CAC1CoqB,wBAAyB,eACzBC,QAAU,CAACz+B,EAAG7F,IACRA,IAAcukC,GAAAA,GAAAA,OACX2oB,IACHA,EAAY5+C,KAAKC,OAGnBw+C,KAEO,GAKXI,UAAW,KACJD,IAILlvD,EAAgB,CAAEzB,UAAAA,IAElBoC,WAAWquD,EAAcpqD,KAAKC,IAAI,EAjKT,KAiKwCyL,KAAKC,MAAQ2+C,KAC9EA,OAAY50D,QAGf,CACDm5C,EAAcya,EAAgB3vD,EAAWyB,EAAiB+uD,EAAYC,EAAcb,EAAUI,IAQzF,CACLa,gBAAkBlB,OAAmC5zD,EAnJvD,SAAyBuN,IACvBwnD,EAAAA,GAAAA,GAAwBxnD,GACxBymD,EAAwBzmD,IAkJxB20C,YAvFF,SAAqB30C,GACnB,GAAIqmD,EACFD,EAAcpmD,QAIhB,GAAKpE,EAAAA,GAEL,OAAIwrD,EAAoBhzC,SACtBqzC,cAAcL,EAAoBhzC,SAClCgzC,EAAoBhzC,aAAU3hB,OArBlC,SAAyBuN,GACvB,MAAQ0nD,MAAO9hC,EAAG+hC,MAAOjhC,GAAM1mB,EAE/B6mD,EAAoB,CAClBz0D,OAAAA,EACAsE,UAAAA,EACAkvB,EAAAA,EACAc,EAAAA,IAeAkhC,CAAgB5nD,SAIlBonD,EAAoBhzC,QAAUtb,YAAW,KACvCsuD,EAAoBhzC,aAAU3hB,EA5ClC,SAAmBuN,GACjB,GAAIkb,EAAAA,GAAY,CACd,MAAM2sC,EAAS7nD,EAAE6nD,OACjB,IAAKA,EAAO5hB,UAAU6hB,SAAS,kBAAoBD,EAAO5hB,UAAU6hB,SAAS,WAC3E,OAGEhiC,GAAAA,EAAAA,uBACFhtB,YAAW,KACT0tD,EAAcxmD,KAvEe,KA0E/BwmD,EAAcxmD,IAiChB+nD,CAAU/nD,KAzGwB,OAgLpCgoD,kBAAoB3B,EAAsCE,EAAc0B,GAAAA,OAAYx1D,EAnEtF,SAA2BuN,GACzB,GAAIkb,EAAAA,GAAY,CACd,GAAKlb,EAAE6nD,OAAuBK,QAAQ,YAAcxB,EAClD,OAGF1mD,EAAEm1B,iBACFixB,SAEAI,EAAcxmD,IA2DhBmoD,kBAAoB9B,OAA8C5zD,EAvDpE,WACMmJ,EAAAA,IAEJzD,EAAgB,CAAEzB,UAAAA,KAqDlB0xD,yBAA2BxsD,EAAAA,QAAiCnJ,EAlD9D,SAAyBuN,GACvBA,EAAEo6B,mBAkDFgM,gBAnJF,SAAyBpmC,GACvB,MAAMqoD,EAAY1B,EAAWvyC,QAC7B,IAAKi0C,EAAW,OAEhB,MAAM,QAAE9hB,EAAF,QAAW+hB,GAAYtoD,GACvB,EACJ4lB,EADI,MACDG,EADC,EACMW,EADN,OACSglB,GACX2c,EAAU5e,wBAER8e,EAAaxrD,KAAK8lD,IAAKlE,EAASpY,EAAU3gB,EAAMA,EAAIG,EAAQwgB,GAAayf,GACzEwC,EAAazrD,KAAK8lD,IAAIn8B,EAAIglB,EAAS4c,GAAWrC,GAChDsC,GAAcC,EAChBzB,IAEAC,KAsIFyB,wBAlIF,SAAiCzoD,GAC/B,MAAM,EAAE4lB,EAAF,EAAKc,GAAM1mB,EAAE0oD,cAAcjf,wBACjCod,EAAoB,CAClBz0D,OAAAA,EACAsE,UAAAA,EACAkvB,EAAAA,EACAc,EAAAA,KA6HFwb,iBAbF,SAA0BliC,GACxBgnD,IACIJ,GAyBR,SAAuC5mD,GACrC,MAAM2oD,EAAmBC,GAA8B5oD,EAAE0oD,eACrDC,GACFA,EAAiBE,gBAAgB3C,IA5BL4C,CAA8B9oD,IAY1DinD,SAAAA,EACAH,uBAAAA,EACAiC,8BAAAA,IAIJ,SAASA,GAA8B/oD,GACrC,MAAM2oD,EAAmBC,GAA8B5oD,EAAE0oD,eACrDC,GACFA,EAAiBK,aAAa9C,GAA+B,IAWjE,SAAS0C,GAA8B1D,GACrC,IAAI9wC,EAA0B8wC,EAE9B,GACE9wC,EAAUA,EAAQ60C,yBACX70C,IAAYA,EAAQ6xB,UAAU6hB,SAAS,2BAEhD,OAAO1zC,E,eCzNT,MAQA,IAAeghB,EAAAA,EAAAA,KARkC6K,IAC/C,MAAM,OAAElkC,GAAWkkC,EACbipB,GAAuB/oB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBrkC,GAGrF,OAAOmtD,EAAuB,mBAACA,EAAyBjpB,QAAYxtC,KC2ItE,IAAe2iC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAQsO,KAAM0xC,GAAcvjD,EAAOwR,MAC7B9E,EAASnJ,EAAQmM,UACjB,cAAEsnD,EAAF,aAAiBC,GAAiB1zD,EAAQ+G,QAAQwC,QAAU,GAC5DoqD,EAAkB3zD,EAAQyR,iBAC1BmiD,EAAgBD,GAClB3nD,EAAAA,EAAAA,IAAkBvP,EAAQuD,EAAQtD,OAAQi3D,QAC1C52D,EAEEizD,GAAY6D,EAAAA,EAAAA,IAAuBp3D,EAAQuD,IACzCyE,UAAWwrD,EAAgB3sD,YAAa4sD,GAAsBF,GAAavzD,EAAOq3D,gBAAmB,GAEvG3xD,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,QAClCq3D,EAAS5xD,KAASuvC,EAAAA,EAAAA,IAAcvvC,IAASgH,IAAWnJ,EAAQtD,QAIlE,MAAO,CACLsjD,UAAAA,EACAgU,YALkBD,GAAU5qD,GAASwN,EAAAA,EAAAA,IAAWla,EAAQ0M,QAAUpM,EAMlEk3D,WALiBF,EAAS5xD,OAAOpF,EAMjC22D,aAAAA,EACAD,cAAAA,EACAG,cAAAA,EACA5D,UAAAA,KACIA,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,MA1BrBjuB,EApG6B,IAe3C,IAf4C,QAChDjiC,EADgD,oBAEhDk0D,EAFgD,WAGhDC,EAHgD,gBAIhDC,EAAkB,EAJ8B,aAKhDC,EALgD,UAMhDrU,EANgD,WAOhDgU,EAPgD,WAQhDC,EARgD,cAShDR,EATgD,cAUhDG,EAVgD,aAWhDF,EAXgD,UAYhD1D,EAZgD,eAahDC,EAbgD,iBAchDC,GACI,EAEJ,MAAM7lB,GAAMnC,EAAAA,EAAAA,IAAuB,OAEnCosB,EAAAA,GAAAA,IAAejqB,EAAK6pB,IACpB7P,EAAAA,GAAAA,GAAiBrkD,EAAQtD,OAAQsD,EAAQyR,iBAAkBmiD,GAC3D7D,GAAgB1lB,EAAKrqC,EAAQtD,OAAQszD,EAAWC,EAAgBC,GAEhE,MAAMzwD,GAAO+hC,EAAAA,GAAAA,KAEP+yB,EAAwBH,GAAmB,GAC1CvpB,EAAS2pB,IAAaznB,EAAAA,GAAAA,GAAQwnB,IACrCt1B,EAAAA,EAAAA,KAAU,KACJs1B,GAIJnxD,WAAWoxD,EAlCU,GAkCCJ,KACrB,CAACA,EAAiBI,EAAWD,IAChC,MAAM,qBAAE5qB,IAAyBC,EAAAA,GAAAA,GAAkBiB,OAAS9tC,EAAWw3D,GAAuB,GAExFE,GAAcjxB,EAAAA,EAAAA,KAAQ,IACnBiwB,EACHA,EAAc3zD,KAAKqJ,GAAW62C,MAAAA,OAAZ,EAAYA,EAAY72C,KAASpJ,OAAgBwB,cACnExE,GACH,CAAC02D,EAAezT,IAEbj5C,GAAU2tD,EAAAA,GAAAA,GACdj1D,EACAO,EACAg0D,EACAC,EACAQ,EACAb,EACAF,EACA,CAAEiB,mBAAoBR,KAElB,kBACJS,EADI,oBACeC,EADf,wBAEJ9D,EAFI,kBAEqBuB,EAFrB,uBAGJwC,EAHI,sBAGoBC,IACtBC,EAAAA,GAAAA,GAAuB3qB,GACrB2mB,OAA6Cj0D,IAAxB83D,EAO3B,GAAIV,EACF,OAAO,2BAAMn0B,UAAU,2BAA2Bj5B,GAGpD,MAAMi5B,GAAYoE,EAAAA,GAAAA,GAChB,kCACA4rB,IAAcE,GAAoB,UAClCc,GAAsB,gBACtBqD,GAAgB,eAChB1qB,GAGF,OACE,0BACEU,IAAKA,EACLzsC,IAAIq3D,EAAAA,EAAAA,IAAiBj1D,EAAQpC,IAC7BoiC,UAAWA,EACX,kBAAiBhgC,EAAQpC,GACzB0zC,YAvBqBhnC,KACvBwnD,EAAAA,GAAAA,GAAwBxnD,GACxBymD,EAAwBzmD,IAsBtBwmD,cAAewB,GAEf,+BAAOvrD,GACN8tD,GACC,mBAAC,GAAD,CACExuD,OAAQuuD,EACR9f,OAAQ+f,EACR70D,QAASA,EACT2D,gBAAgB,SAChBgoC,QAASmpB,EACT5f,oBAAqB6f,SCvC/B,GApEsC,IAShC,UATiC,UACrC/0B,EADqC,QAErChgC,EAFqC,OAGrCQ,EAHqC,MAIrCia,EAJqC,WAKrCy6C,EALqC,YAMrCrE,EANqC,oBAOrCqD,EAPqC,QAQrC3yB,GACI,EAEJ,MAAM8I,GAAMnC,EAAAA,EAAAA,IAAuB,MAC7BitB,GAAiBC,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,GAExCjc,GAAeC,EAAAA,GAAAA,GAASl4C,IAAWm4C,EAAAA,EAAAA,IAAoBn4C,EAAS,cAAem1D,GAC/End,EAAiB7C,GAAiBn1C,GAClCq1D,EAAe9zD,QAAQvB,IAAWs1D,EAAAA,EAAAA,IAAqBt1D,IAEvDP,GAAO+hC,EAAAA,GAAAA,KAEP+zB,EAAc/0D,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,GAAUR,MAAAA,GAAlC,UAAkCA,EAASooD,mBAA3C,aAAkC,EAAsBE,eAElF,OACE,0BACEje,IAAKA,EACLrK,WAAWoE,EAAAA,GAAAA,GAAe,kBAAmBpE,GAC7CuB,QAASvhC,EAAUuhC,OAAUxkC,GAE5Bi7C,GAiBP,SACE5C,EACAhd,EACAi9B,EACAxE,GAEA,MAAM,MAAExgC,EAAF,OAAS2lB,IAAWkD,EAAAA,GAAAA,MAE1B,OACE,sCACE,0BACEC,IAAK/gB,GAAWgd,EAChB/kB,MAAOA,EACP2lB,OAAQA,EACRoD,IAAI,GACJpZ,UAAWq1B,EAAe,QAAU,GACpCG,WAAY3E,IAEbA,GAAe,2BAAM7wB,UAAU,eAnCbqZ,CAAgBrB,EAAgBC,EAAcod,EAAcxE,GAC/E,0BAAK7wB,UAAU,gBACb,wBAAGyB,IAAI,QACHzhC,GAEEmoD,EAAAA,EAAAA,IAAgBnoD,GAClB,mBAAC,GAAD,CAAeA,QAASA,EAASm0D,YAAU,KAE3C/b,EAAAA,GAAAA,GAAqB34C,EAAMO,EAASuB,QAAQy2C,IAJ5Ckd,GAlCC,KAyCL,0BAAKl1B,UAAU,gBAAgByB,IAAI,SAAQ8d,EAAAA,GAAAA,GAAWgW,GAAe96C,GAzChE,S,2DCXb,MAsEA,IAAeilB,EAAAA,EAAAA,KAnE6B,IAKtC,YALuC,SAC3C9N,EAD2C,eAE3C6jC,EAF2C,SAG3CC,EAH2C,mBAI3C3kC,GACI,EACJ,MAAM,mBAAE4kC,IAAuBx4C,EAAAA,EAAAA,MAEzBuT,EAAoBK,MAAAA,OAAH,EAAGA,EAAoBxrB,MAAMqwD,GAAMA,EAAEhkC,WAAaA,IACnEikC,EAAenlC,MAAAA,GAAH,UAAGA,EAAmBI,kBAAtB,aAAG,EAA+BlzB,GAC9Ck4D,EAAWplC,MAAAA,GAAH,UAAGA,EAAmBC,uBAAtB,aAAG,EAAoC/yB,GAC/Cm4D,GAAsB7d,EAAAA,GAAAA,GAAU,UAAS2d,KAAiBA,EAAchlC,EAAAA,GAAAA,QACxEmlC,GAAkB9d,EAAAA,GAAAA,GAAU,UAAS4d,KAAaA,EAAUjlC,EAAAA,GAAAA,QAE5DolC,EAAa10D,SAAQk0D,MAAAA,OAAA,EAAAA,EAAgB7jC,YAAaA,GAAYmkC,GAAuBC,IAEzFvsB,aAAcysB,EACdvsB,qBAAsBwsB,IACpBvsB,EAAAA,GAAAA,GAAkBqsB,OAAYl5D,GAAW,EAAM,QAE7Cq5D,GAAc9xB,EAAAA,EAAAA,KAAY,KAC9BqxB,EAAmB,CAAE30D,UAAWy0D,MAAAA,OAAF,EAAEA,EAAgBz0D,UAAW4wB,SAAAA,MAC1D,CAAC6jC,MAAAA,OAAD,EAACA,EAAgBz0D,UAAW4wB,EAAU+jC,KAElCU,EAAmBC,EAAqBC,IAAyBxpB,EAAAA,GAAAA,KAClEypB,GAAsBP,IAAeI,EAErCr2B,GAAYoE,EAAAA,GAAAA,GAChB,wBACAsxB,GAAY,UACZQ,GAAyB,gBAG3B,OACE,0BAAKl2B,UAAWA,GACbw2B,GAAsB,mBAACC,GAAA,EAAD,CAAqB7kC,SAAUA,IACrDskC,GACC,sCACE,mBAACQ,GAAA,EAAD,CACEv5B,IAAK04B,EACLj4D,GAAK,kBAAiBi4D,IACtB71B,UAAWm2B,EACXn0B,KA7Ca,GA8Cb20B,cAAeZ,EACfa,MAAI,EACJC,QAAM,EACNjuB,uBAAqB,EACrBkuB,OAAQR,EACRS,QAASR,IAEX,mBAACG,GAAA,EAAD,CACEv5B,IAAK24B,EACLl4D,GAAK,mBAAkBk4D,IACvB91B,WAAWoE,EAAAA,GAAAA,GAAe,SAAU+xB,GACpCn0B,KAxDQ,IAyDR20B,cAAeX,EACfY,MAAI,EACJC,QAAM,EACNjuB,uBAAqB,EACrBmuB,QAASX,SCYrB,IAAe12B,EAAAA,EAAAA,KAjEmB,IAI5B,UAJ6B,QACjC1/B,EADiC,eACxBg3D,EADwB,UACRC,EADQ,QACG11B,EADH,cACY21B,EADZ,eAEjCzB,EAFiC,mBAEjB0B,EAFiB,mBAEGpmC,EAFH,gBAGjCqmC,GACI,EACJ,MAAM33D,GAAO+hC,EAAAA,GAAAA,MACN61B,EAAaC,IAAiBvqB,EAAAA,GAAAA,KAE/B5a,EAAY+kC,IAAiBE,MAAAA,GAAJ,UAAIA,EAAiBjlC,iBAArB,aAAI,EAA4BppB,QAAQhJ,QAAQ+U,GAAMA,EAAED,MAAQ,KAEzF4F,GAAQ+oB,EAAAA,EAAAA,KAAQ,KACpB,IAAK6zB,EAAa,OAClB,MAAME,GAAiBC,EAAAA,EAAAA,IAAsC,IAAfx3D,EAAQ4G,KAAanH,EAAK+rB,MAClEisC,EAAez3D,EAAQ03D,WAAYF,EAAAA,EAAAA,IAA2C,IAApBx3D,EAAQ23D,SAAkBl4D,EAAK+rB,MACzFosC,EAAoB53D,EAAQooD,cAAeoP,EAAAA,EAAAA,IAAkD,IAA3Bx3D,EAAQooD,YAAYxhD,KAAanH,EAAK+rB,MAE9G,IAAItqB,EAAOq2D,EAUX,OATIE,IACFv2D,GAAQ,KACRA,GAAQzB,EAAK,mBAAmB6uB,QAAQ,SAAUmpC,IAEhDG,IACF12D,GAAQ,KACRA,GAAQzB,EAAK,sBAAsB6uB,QAAQ,SAAUspC,IAGhD12D,IACN,CAACm2D,EAAa53D,EAAMO,IAEvB,OACE,2BACEggC,WAAWoE,EAAAA,GAAAA,GAAe,cAAe+yB,GAAsB,oBAC/D11B,IAAKhiC,EAAKiiC,MAAQ,MAAQ,MAC1BH,QAASA,GAERpP,GAAaA,EAAUryB,KAAKgV,GAC3B,mBAAC,GAAD,CACE2gD,eAAgBA,EAChB7jC,SAAU9c,EAAE8c,SACZ8jC,UAAQ,EACR3kC,mBAAoBA,MAGvBxvB,QAAQvB,EAAQqzB,QACf,sCACE,2BAAM2M,UAAU,kBACbC,EAAAA,GAAAA,IAAqBjgC,EAAQqzB,QAEhC,wBAAG2M,UAAU,uBAGhBi3B,GACC,2BAAMj3B,UAAU,sBAAqBuf,EAAAA,GAAAA,GAAW0X,IAElD,2BAAMj3B,UAAU,eAAevlB,MAAOA,EAAO0yB,aAAcmqB,GACxDt3D,EAAQ03D,UAAa,GAAEj4D,EAAK,qBAC5Bo4D,EAAAA,EAAAA,IAAWp4D,EAAqB,IAAfO,EAAQ4G,OAE3BowD,GACC,mBAACc,GAAA,EAAD,CAAuB/oC,OAAQioC,Q,yBC9DvC,MA0GA,GA1G8B,IAExB,IAFyB,QAC7Bh3D,EAD6B,oBACpBk0D,EADoB,8BACC6D,EADD,WACgCC,EADhC,aAC4Cr2C,GACrE,EAEJ,MAAM0oB,GAAMnC,EAAAA,EAAAA,IAAuB,OAE5B+vB,EAAaC,EAAWC,IAAcprB,EAAAA,GAAAA,KAEvCxiC,EAAUvK,EAAQ+G,QAAQwD,SAC1B,SAAE6tD,EAAF,aAAYpgD,EAAZ,QAA0BqgD,GAAY9tD,EACtC+tD,EAAkBC,EAAAA,GAClBC,EAAkBxgD,IAAiBygD,EAAAA,GAEnCC,GAAatD,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,GACpC+B,GAAab,EAAAA,GAAAA,IAAkB/qB,EAAK0tB,GAEpCY,EAAYpuD,EAAQ+tB,oBAAuB,UAAS/tB,EAAQ3M,MAAOu6C,EAAAA,EAAAA,IAAoBn4C,EAAS,UAChG44D,EAAmBP,IAAYC,IACnC/tD,EAAQ+tB,oBAAuB,UAAS/tB,EAAQ3M,aAAcu6C,EAAAA,EAAAA,IAAoBn4C,EAAS,cACvFu4B,GAAiB2f,EAAAA,GAAAA,GAAS0gB,GAC1BxjB,EAAeD,GAAiBn1C,GAChC64D,EAAatgC,GAAkB6c,EAE/B4I,GAAY9F,EAAAA,GAAAA,GAChBygB,GACCD,GACDI,EAAAA,EAAAA,IAAsB94D,EAAS,UAC/B2hB,GAGIo3C,EAAgBx3D,QAAQy8C,IACvBgb,EAAgBC,IAAoBlsB,EAAAA,GAAAA,GAAQgsB,GAC7CG,EAAed,EAAWY,EAAiBD,EAC3CpvB,GAAuBwvB,EAAAA,GAAAA,GAAmBD,IAE1C,MAAE7oC,EAAF,OAAS2lB,IAAWojB,EAAAA,GAAAA,IAAqB7uD,GACzC8uD,GAAiBj1B,EAAAA,GAAAA,GAAe,aAAcgR,GAAgB,SAE9DkkB,GAAmBl1B,EAAAA,GAAAA,GACvB,sBACAo0B,GAAmB,YAcrB,OAXAv5B,EAAAA,EAAAA,KAAU,KACR,IAAKo5B,IAAYhuB,EAAI3rB,QAAS,OAC9B,MAAMuZ,EAAQoS,EAAI3rB,QAAQ0gB,cAAc,SACnCnH,IACDg+B,GACFsD,EAAAA,GAAAA,GAASthC,GAETA,EAAMhgB,WAEP,CAACogD,EAASpC,IAGX,0BAAK5rB,IAAKA,EAAKrK,UAAWs5B,EAAkB/3B,QAAUi3B,OAA8Bz7D,EAAZm7D,KACnEgB,GAAiBb,IAAYC,IAC9B,0BACEnf,IAAK0f,EACLxoC,MAAOA,EACP2lB,OAAQA,EACRoD,IAAI,GACJpZ,UAAWq5B,KAGbjB,IAAaC,GACb,0BACElf,IAAK6E,EACL3tB,MAAOA,EACP2lB,OAAQA,EACRoD,IAAI,GACJpZ,WAAWoE,EAAAA,GAAAA,GAAe,aAAcuF,KAG3C0uB,GAAWC,GAAmBY,GAC7B,4BACE/f,IAAK6E,EACL3tB,MAAOA,EACP2lB,OAAQA,EACRwjB,SAAUvD,EACVwD,aAAW,EACXC,KAAM1B,EACN2B,OAAK,IAGRvB,GAAYW,GACX,mBAACrC,GAAA,EAAD,CACEv5B,IAAKw7B,EACL34B,WAAWoE,EAAAA,GAAAA,GAAe,aAAcuF,GACxC/rC,GAAI+6D,EACJhC,cAAe3Y,EACfhc,KAAM3R,EACNumC,KAAMX,EACNY,QAASmB,EACTlB,OAAQmC,IAGZ,mBAAC,KAAD,CACE5yD,OAAQ4xD,EACR2B,YAAarvD,EACbohC,QAASwsB,M,qCC3HF,SAAS0B,GAAwB75D,EAAqB85D,GACnE,OAAOC,EAAAA,GAAAA,IACL1kB,EAAAA,EAAAA,IAA4Br1C,GAC5BuB,QAAQu4D,GACRjwD,EAAAA,KAA4BmwD,EAAAA,ICRhC,MAAMC,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBnhB,EAAa8P,EAAgBsR,EAAwBC,EAAsBjyC,GAE3E,OAAIiyC,EACKvgB,QAAQC,QAAQ+f,GAAyB1xC,GAAS,SAAS0gC,EAAQ,WAAa,aAK3F17C,eAAyC4rC,EAAa8P,GACpD,MAAMlP,EAAM,IAAIC,MAChBD,EAAIZ,IAAMA,EACVY,EAAI0gB,YAAc,YAEb1gB,EAAI1pB,aACD,IAAI4pB,SAASC,IACjBH,EAAII,OAASD,KAIjB,MAAMc,EAAS9iB,SAAS+iB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MAE9BH,EAAO3qB,MAAQ0pB,EAAI1pB,MACnB2qB,EAAOhF,OAAS+D,EAAI/D,OAEpBkF,EAAIG,UAAUtB,EAAK,EAAG,EAAGA,EAAI1pB,MAAO0pB,EAAI/D,QAExC,MAAM9lB,EAAI+4B,EAAQlP,EAAI1pB,MAAQ,EAAI,EAC5BW,EAAI+oB,EAAI/D,OAAS,EAGvB,MAAQ,QADMtrB,MAAM9a,KAAKsrC,EAAIwf,aAAaxqC,EAAGc,EAAG,EAAG,GAAG3lB,MACjCvK,KAAK,QA1BnB65D,CAA0BxhB,EAAK8P,G,eC8BxC,MA0IA,GA1I4B,IAmBtB,IAnBuB,GAC3BrrD,EAD2B,QAE3BoC,EAF2B,oBAG3Bk0D,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,eAM3BjK,EAN2B,WAO3B6J,EAP2B,eAQ3BK,EAR2B,KAS3B74B,EAAO,SAToB,WAU3B4oB,EAV2B,eAW3BkQ,EAX2B,qBAY3BC,EAZ2B,cAa3BC,EAb2B,YAc3BnK,EAd2B,gBAe3BoK,EAf2B,MAgB3B1yC,EAhB2B,QAiB3BgZ,EAjB2B,eAkB3B25B,GACI,EAEJ,MAAM7wB,GAAMnC,EAAAA,EAAAA,IAAuB,MAG7BizB,IADS9R,EAAAA,EAAAA,IAAgBrpD,KAAYspD,EAAAA,EAAAA,IAAuBtpD,IACvCo4B,QAErB+8B,GAAiBC,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,IAEvCkH,EAAeC,IAAoB56B,EAAAA,EAAAA,IAASm6B,GAC7ClC,EAAa0C,GAAiBjG,GAC9B,UACJnX,EADI,aACOsd,IACTC,EAAAA,GAAAA,IAAyBpjB,EAAAA,EAAAA,IAAoBn4C,EAASgiC,IAAQ02B,GAC5DoB,EAAgBqB,GAAgBnd,EAChCwd,EAAW3B,GAAwB75D,EAAS85D,IAGhDwB,aAAcG,IACZF,EAAAA,GAAAA,IAAyBpjB,EAAAA,EAAAA,IAAoBn4C,EAAS,aAAcg7D,IAElE,YACJU,EADI,eACSC,EADT,iBACyBC,IAC3BC,EAAAA,EAAAA,IACF77D,EACA66D,IAAmBG,EAAgBS,EAAmBH,GACtD5C,IAAeoB,GAEXgC,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BzxB,GAAuBwvB,EAAAA,GAAAA,GAAmBW,IAE9CrwB,aAAcuyB,EACdryB,qBAAsBsyB,IACpBryB,EAAAA,GAAAA,GAAkB+xB,OAAgB5+D,EAAW++D,EAAiB,SAEhEryB,aAAcyyB,EACdvyB,qBAAsBwyB,IACpBvyB,EAAAA,GAAAA,IAAmBkwB,IAAkBsB,GAEnCnc,GAAc3a,EAAAA,EAAAA,KAAY,KAC1Bo3B,EACER,GACFA,EAAel7D,GAEP85D,EAEDv4B,GACTA,EAAQvhC,EAAQpC,IAFhBy9D,GAAkBe,IAAeA,MAIlC,CAACtC,EAAe4B,EAAa17D,EAASk7D,EAAgB35B,IAEnD0nB,GAAQC,EAAAA,EAAAA,IAAalpD,IAC3B21C,EAAAA,EAAAA,KAAgB,KACd,IAAKolB,EACH,OAGF,MAAMsB,EAAYhyB,EAAI3rB,QAAS0xC,QAAwB,oBAEnD0J,EACFQ,GAAoBR,EAAe7Q,EAAO0H,EAAgB6J,EAAYjyC,GAAOstB,MAAMymB,IACjFD,EAAU5rB,MAAM8rB,YAAY,gBAAiBD,GAC7CD,EAAU/I,aAAakJ,EAAAA,GAA2B,OAGpDH,EAAU9rB,UAAU9lB,IAAI,wBAEzB,CAACqvC,EAAe7Q,EAAO8R,EAAsBpK,EAAgB6J,EAAYjyC,IAE5E,MAAM,MAAE8H,EAAF,OAAS2lB,EAAT,QAAiB+T,GAAYa,GAAc7B,GAAyB/oD,EAASgpD,GAE7EhpB,GAAYoE,EAAAA,GAAAA,GAChB,eACCs3B,IAAgBZ,GAAkB,cACnC/Q,GAAW,cACX15B,IAAU2lB,GAAU,gBAGhBymB,EAAcxB,EAAmB,kBAAiB5qC,EAAQ2lB,GAAQ0mB,QAAQ,QAAU,GACpFjsB,EAAQma,EACT,UAASv6B,gBAAoB2lB,cAAmB4U,EAAW16B,aAAa06B,EAAW55B,OAAOyrC,IAC3F,GAEJ,OACE,0BACE7+D,GAAIA,EACJysC,IAAKA,EACLrK,UAAWA,EACXyQ,MAAOA,EACPlP,QAASm6B,OAAc3+D,EAAYkiD,GAEnC,6BACE5U,IAAKmxB,EACLx7B,UAAU,YACVyQ,MAAQ,UAASpgB,gBAAoB2lB,OAAYymB,MAEnD,0BACEtjB,IAAK2gB,EACL95B,UAAY,cAAa2J,IACzBtZ,MAAOA,EACP2lB,OAAQA,EACRoD,IAAI,GACJoc,WAAY3E,IAEbA,GAAe,2BAAM7wB,UAAU,cAC/Bg8B,IAAwBE,GACvB,0BAAKl8B,UAAY,iBAAgBi8B,KAC/B,mBAACU,GAAA,EAAD,CAAiBvsD,SAAUwrD,EAAkBr6B,QAASm6B,EAAczc,OAAcliD,KAGrFm/D,GAA8B,wBAAGl8B,WAAWoE,EAAAA,GAAAA,GAAe,gBAAiB+3B,KAC5ER,GACC,2BAAM37B,UAAU,6BAA6B34B,KAAKuG,MAAyB,IAAnBguD,GAAxD,O,0BC9KO,SAASgB,GAAkBC,EAAiDC,GAAkB,MAC3G,MAAMC,GAAa70B,EAAAA,EAAAA,IAAM,UAAC20B,EAAUn+C,eAAX,aAAC,EAAmBs+C,QACvCC,GAAa/0B,EAAAA,EAAAA,MACnB+0B,EAAWv+C,QAAUo+C,EAErB,MAAMI,GAAgB54B,EAAAA,EAAAA,KAAY,KAC3Bu4B,EAAUn+C,UAIfq+C,EAAWr+C,SAAWm+C,EAAUn+C,QAAQs+C,OAEpCD,EAAWr+C,SACbm+C,EAAUn+C,QAAQzG,WAEnB,CAAC4kD,IAEEM,GAAkB74B,EAAAA,EAAAA,KAAY,KAEhCu4B,EAAUn+C,SAAWq+C,EAAWr+C,SAAWu+C,EAAWv+C,SAEnDwZ,SAAStJ,KAAKwjC,SAASyK,EAAUn+C,WAEpC66C,EAAAA,GAAAA,GAASsD,EAAUn+C,WAEpB,CAACm+C,IAEEO,GAAuB94B,EAAAA,EAAAA,KAAY,MACvC+4B,EAAAA,EAAAA,IAAQF,KACP,CAACA,KAEJG,EAAAA,GAAAA,GAAkBJ,EAAeE,IACjCG,EAAAA,GAAAA,IAAuBL,EAAeC,G,mNCWxC,MA0KA,GA1K4B,IAetB,UAfuB,GAC3Bv/D,EAD2B,QAE3BoC,EAF2B,oBAG3Bk0D,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,YAM3B4C,EAN2B,eAO3B3C,EAP2B,aAQ3Bl5C,EAR2B,WAS3BipC,EAT2B,QAU3BrpB,EAV2B,eAW3B25B,EAX2B,cAY3BF,EAZ2B,YAa3BnK,EAb2B,gBAc3BoK,GACI,EAEJ,MAAM5wB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7Bu1B,GAAWv1B,EAAAA,EAAAA,IAAyB,MAEpCjQ,GAASsxB,EAAAA,EAAAA,IAAgBvpD,KAAY09D,EAAAA,EAAAA,IAAuB19D,GAC5Dm7D,EAAeljC,EAAMG,QAErB+8B,GAAiBC,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,IAEvCkH,EAAeC,IAAoB56B,EAAAA,EAAAA,IAASm6B,GAC7ClC,EAAan3D,QAAQ65D,GAAiBjG,GAAkBxzC,IACvDg8C,EAAeC,IAAoBn9B,EAAAA,EAAAA,IAAS+8B,GAE7CjlC,GAAiB2f,EAAAA,GAAAA,IACrBC,EAAAA,EAAAA,IAAoBn4C,EAAS,eAC3Bm1D,GAAkBxzC,IACpBm3C,EAAAA,EAAAA,IAAsB94D,EAAS,aAC/B2hB,GAEIk8C,GAAoB1E,EAAAA,GAAAA,GAAmB5gC,IAEvC,UAAEylB,EAAF,aAAasd,IAAiBC,EAAAA,GAAAA,IAClCpjB,EAAAA,EAAAA,IAAoBn4C,EAAS,WAC5B04D,GACDI,EAAAA,EAAAA,IAAsB94D,EAAS,UAC/B2hB,GAEIm4C,EAAgBqB,GAAgBnd,EAChC8f,EAAWv8D,QAAQ4zD,GAAkB2E,GAErC0B,EAAW3B,GAAwB75D,EAASu4B,IAE1C+iC,aAAcG,IAAqBF,EAAAA,GAAAA,IACzCpjB,EAAAA,EAAAA,IAAoBn4C,EAAS,aAC5Bg7D,EACDnqC,EAAAA,GAAAA,QACAlP,IAGI,WAAEo8C,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,IAAcrD,IAClD,YAAEc,EAAF,eAAeC,EAAf,iBAA+BC,IAAqBC,EAAAA,EAAAA,IACxD77D,EACA66D,IAAmBG,EAAgBS,EAAmBH,GACrD5C,IAAeqF,GAAe/C,GAE3Bc,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,IAElC3xB,aAAcuyB,EACdryB,qBAAsBsyB,IACpBryB,EAAAA,GAAAA,GAAkB+xB,OAAgB5+D,EAAW++D,IAE/CryB,aAAcy0B,EACdv0B,qBAAsBw0B,IACpBv0B,EAAAA,GAAAA,GAAkBwxB,IAAkBuC,IAAkB3B,IAEnDoC,EAAcC,IAAmB59B,EAAAA,EAAAA,IAAiB,GACnD69B,GAAmBh6B,EAAAA,EAAAA,KAAah6B,IACpC+zD,EAAgBh3D,KAAKC,IAAI,EAAGgD,EAAE0oD,cAAcuL,YAAc,MACzD,IAEGC,GAAW,UAACf,EAAS/+C,eAAV,aAAC,EAAkB8/C,WAAavmC,EAAMumC,UAAY,EAE7DvV,GAAQC,EAAAA,EAAAA,IAAalpD,GACrBmpD,IAAcC,EAAAA,EAAAA,IAAmBppD,IACjC,MAAEqwB,GAAF,OAAS2lB,IAAW4U,IAAclB,EAAAA,GAAAA,IAAyBzxB,EAAOgxB,EAAOE,GAAaH,GAE5F4T,GAAkBa,EAAUK,IAC5BW,EAAAA,GAAAA,GAAgBhB,EAAU,CAACK,IAE3B,MAAM7e,IAAc3a,EAAAA,EAAAA,KAAY,KAC1Bo3B,EACER,GACFA,EAAel7D,GAERg7D,GACT79C,EAAAA,EAAAA,MAAauhD,2BAA2B,CAAE1+D,QAAAA,IAChC85D,EAEDA,IAAkB6D,GAC3BC,GAAiB,GACjBH,EAAS/+C,QAASk4C,QACTr1B,GACTA,EAAQvhC,EAAQpC,IALhBy9D,GAAkBe,IAAeA,MAOlC,CAACV,EAAaV,EAAelB,EAAe6D,EAAep8B,EAAS25B,EAAgBl7D,IAEjFggC,IAAYoE,EAAAA,GAAAA,GAAe,oBAAqBs3B,GAAe,eAC/De,GAAcxB,EAAmB,kBAAiB5qC,GAAQ2lB,IAAQ0mB,QAAQ,QAAU,GACpFjsB,GAAQma,EACT,UAASv6B,iBAAoB2lB,eAAmB4U,EAAW16B,aAAa06B,EAAW55B,OAAOyrC,KAC3F,GACJ,OACE,0BACEpyB,IAAKA,EACLzsC,GAAIA,EACJoiC,UAAWA,GACXyQ,MAAOA,GACPlP,QAASm6B,OAAc3+D,EAAYkiD,IAEnC,6BACE5U,IAAKmxB,EACLx7B,UAAU,YACVyQ,MAAQ,UAASpgB,iBAAoB2lB,QAAYymB,OAEnD,0BACEtjB,IAAK5gB,EACLyH,WAAWoE,EAAAA,GAAAA,GAAe,YAAay5B,GACvCptB,MAAQ,UAASpgB,iBAAoB2lB,QAAYymB,KACjDrjB,IAAI,GACJoc,WAAY3E,IAEbiN,GACC,+BACEzzB,IAAKozB,EACLz9B,UAAU,aACV3P,MAAOA,GACP2lB,OAAQA,GACRwjB,SAAUmE,EACVhE,OAAK,EACLD,MAAI,EACJD,aAAW,GAEPuE,EAVN,CAWExI,WAAY3E,EACZ8N,aAAcL,EACd7tB,MAAOgsB,KAEP,6BAAQtjB,IAAK2gB,KAGhBjJ,GAAe,2BAAM7wB,UAAU,cAC/Bk+B,GAA0B,wBAAGl+B,WAAWoE,EAAAA,GAAAA,GAAe,kBAAmB+5B,KAC1EnC,GACC,0BAAKh8B,WAAWoE,EAAAA,GAAAA,GAAe,gBAAiB63B,IAC9C,mBAACU,GAAA,EAAD,CAAiBvsD,SAAUwrD,EAAkBr6B,QAAS0d,OAGxDmc,GACA,wBAAGp7B,UAAU,kBAEd27B,EACC,2BAAM37B,UAAU,6BACZ07B,GAAeV,EAAkB,GAAE3zD,KAAKuG,MAAyB,IAAnBguD,MAA6B,OAG/E,0BAAK57B,UAAU,0BACZ/H,EAAM2mC,MAAQ,OAAQC,EAAAA,EAAAA,IAAoBx3D,KAAKC,IAAIk3D,EAAWJ,EAAc,O,eC/LvF,MA8BA,IAAen8B,EAAAA,EAAAA,KACb,CAACxlC,EAAD,KAAqC,IAA5B,QAAEqiE,GAA0B,EACnC,MAAQC,aAAeC,WAAYC,IAAoBxiE,EACvD,MAAO,CACL+Y,MAAMmB,EAAAA,EAAAA,IAAWla,EAAQqiE,EAAQ31D,QACjC81D,cAAAA,KALN,EA9B2C,IAErC,IAFsC,QAC1CH,EAD0C,KACjCtpD,EADiC,cAC3BypD,GACX,EACJ,MAAM,SAAEtgE,IAAawe,EAAAA,EAAAA,OAEf,UACJwG,EADI,SAEJD,EAFI,YAGJgB,EAHI,OAIJvb,GACE21D,EAEE7f,GAAc3a,EAAAA,EAAAA,KAAY,KAC9B3lC,EAAS,CAAEf,GAAIuL,MACd,CAACxK,EAAUwK,IAEd,OACE,0BACE62B,WAAWoE,EAAAA,GAAAA,GAAe,UAAW7iC,QAAQ4H,IAAW,eACxDo4B,QAASp4B,EAAS81C,OAAcliD,GAEhC,mBAAC6jD,GAAA,EAAD,CAAQ5e,KAAK,QAAQxsB,KAAMA,EAAMtU,KAAMyiB,GAAaD,IACpD,0BAAKsc,UAAU,gBACb,0BAAKA,UAAU,gBAAgBrc,EAA/B,IAA2CD,GAC3C,0BAAKsc,UAAU,kBAAiBk/B,EAAAA,GAAAA,IAA0BD,EAAev6C,S,gDCqDjF,SAASy6C,GAAchtD,EAAeyxB,GACpC,OAAOA,EAAQ,GAAMzxB,EAAQyxB,EAAS,KAAK84B,UAAY,EAGzD,SAnFiC,IAO3B,IAP4B,OAChC0C,EADgC,YAEhCC,EAFgC,YAGhCtjC,EAHgC,eAIhCujC,EAJgC,eAKhCC,EALgC,cAMhCC,GACI,EACJ,MAAM3/D,EAASw/D,GAAeA,EAAY95D,MAAMqwD,GAAMA,EAAExgD,SAAWgqD,EAAOhqD,SACpEqqD,EAA0C,IAA1BF,EAAet9D,SAA2D,IAA3Cs9D,EAAetgE,QAAQmgE,EAAOhqD,QAC7EsqD,EAAYH,EAAet9D,OAAS,GAAKw9D,IAAmB5/D,MAAAA,OAAjD,EAAiDA,EAAQwyB,UACpEstC,EAAgB9/D,EAASs/D,GAAct/D,EAAOw8B,YAAaN,GAAe,GAAK,GAC9E6jC,EAAcC,IAAmBp/B,EAAAA,EAAAA,IAAS++B,EAAgB,EAAIG,GAE/DG,GAAU53B,EAAAA,EAAAA,IAAuB,MACjC63B,EAAYlgE,EAASs/D,GAAct/D,EAAOw8B,YAAaijC,GAAkB,GAAK,EAC9EU,EAA0BJ,EAAeD,EA0B/C,IAxBA1gC,EAAAA,EAAAA,KAAU,KACJugC,GACFK,EAAgBF,KAEjB,CAACH,EAAeG,KAEnB1gC,EAAAA,EAAAA,KAAU,KACR,MAAMghC,EAASH,EAAQphD,QAEvB,GAAIuhD,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAO5oB,kBAEf5G,EAAQuvB,EAA0B,GAAK,sDACxCE,EAMHA,EAAM5M,aAAa,QAAS7iB,GAL5BwvB,EAAOtoB,UAAa,gFACiDlH,mFAOxE,CAACuvB,EAAyBR,KAExBH,IAAgBx/D,EACnB,OAGF,MAAMsgE,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACE,0BAAKhgC,UAAU,aAAayB,IAAI,OAC9B,0BAAKzB,UAAY,sBAAsC,QAAlB2/B,EAA0B,cAAgB,KAC5EA,EADH,IAEGD,GACC,2BAAM1/B,WAAWoE,EAAAA,GAAAA,GACf,sBACCq7B,GAAiB,QAClBD,GAAiB,YAGjB,wBAAGx/B,UAAWy/B,EAAgB,aAAe,iBAInD,0BAAKz/B,UAAU,qBACb,0BAAKA,UAAU,mBAAmByB,IAAI,SACnC8d,EAAAA,GAAAA,GAAW6f,EAAOl+D,OAErB,0BAAK8+B,WAAWoE,EAAAA,GAAAA,GAAe,qBAAsBs7B,IAAaD,GAAiB,UACjF,0BAAKz/B,UAAU,qBAAqBqK,IAAKy1B,IACzC,0BACE9/B,UAAU,mBACVyQ,MAAO0vB,QCyQnB,IAAezgC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAsB,IAAb,KAAE0Z,GAAW,EACpB,MAAM,eAAE2lB,GAAmB3lB,EAAKpN,SAC1B,iBAAEjC,EAAkBmH,OAASK,KAAM0xC,IAAgBvjD,EACzD,OAAKq/B,GAA4C,IAA1BA,EAAe75B,OAI/B,CACL65B,eAAAA,EACAkkB,UAAAA,EACAl5C,iBAAAA,GANO,KALOm7B,EAvToB,IAOlC,IAPmC,QACvCjiC,EADuC,KAEvCmW,EAFuC,eAGvC2lB,EAHuC,UAIvCkkB,EAJuC,WAKvCogB,EALuC,iBAMvCt5D,GACI,EACJ,MAAM,YAAE4K,EAAF,gBAAe2uD,IAAoBljD,EAAAA,EAAAA,OAEjCvf,GAAIoD,EAAN,OAAiBtE,GAAWsD,GAC5B,QAAEsgE,EAAF,QAAWv3D,GAAYoN,GACtBoqD,EAAcC,IAAmB//B,EAAAA,EAAAA,KAAkB,IACnDggC,EAAeC,IAAoBjgC,EAAAA,EAAAA,IAAmB,KACtDkgC,EAAiBC,IAAsBngC,EAAAA,EAAAA,KAAkB,IACzDogC,EAAcC,IAAmBrgC,EAAAA,EAAAA,KAAkB,IACnDsgC,EAAaC,IAAkBvgC,EAAAA,EAAAA,KACnC6/B,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxD75D,KAAKkpB,IAAI+vC,EAAQY,UAAY75D,KAAKG,MAAMuL,KAAKC,MAAQ,KAAQlM,EAAkBw5D,EAAQS,aACvF,GAGAI,GAAej5B,EAAAA,EAAAA,IAAuB,OACpCn/B,QAASs2D,EAAX,YAAwBtjC,GAAgBhzB,EACxCq4D,EAAW/B,GAAeA,EAAYjtC,MAAMwjC,GAAMA,EAAEvjC,WACpDgvC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAYr/D,OAAO6G,EAAQgzB,aAAe,EAC9EylC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAch4D,KAAKC,OAAO+3D,EAAYv/D,KAAK81D,GAAMA,EAAEv5B,eAAgBN,EACpFwjC,EAAiBF,EAAcA,EAAY/+D,QAAO,CAACohE,EAAmB9L,KACtEA,EAAE+L,WACJD,EAAQhhE,KAAKk1D,EAAExgD,QAGVssD,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQ5hE,KAAKgW,IAAD,CAClCuwB,MAAOvwB,EAAE5U,KACTiR,MAAO2D,EAAEV,OACTwsD,OAAQrgE,QAAQ++D,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxE9hC,EAAAA,EAAAA,KAAU,KAENshC,GACGpqD,EAAKpN,QAAQA,SACboN,EAAKpN,QAAQA,QAAQqpB,MAAMvyB,GAAWA,EAAOwyB,YAEhDmuC,GAAgB,KAEjB,CAACD,EAAcpqD,EAAKpN,QAAQA,WAE/Bk2B,EAAAA,EAAAA,KAAU,KACJ8hC,EAAc,GAChB39D,YAAW,IAAM49D,EAAeD,EAAc,IAAI,KAGpD,MAAMe,EAAcX,EAAaziD,QAEjC,GAAIojD,EAAa,CACf,MAAMC,EAAgB,GAAQ16D,KAAK26D,GAC7B9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAYzqB,kBAK5B,GAJI0pB,GAAe,GACjBe,EAAYvxB,UAAU9lB,IAAI,YAGvBy1C,GAAUgC,EASR,CACL,MAAMC,GAAqB7B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBgB,EACzFG,EAAQE,aAAcvD,EAAAA,EAAAA,IAAoBkC,GACzCb,EAAM7oB,kBAAiCic,aAAa,oBAAsB,IAAG6O,UAX9EL,EAAYnqB,UAAa,oBACjBknB,EAAAA,EAAAA,IAAoBkC,2LAGJgB,KAAiBA,yEAU5C,CAAChB,EAAaT,EAAQS,eAEzB9hC,EAAAA,EAAAA,KAAU,KACJqhC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DvvD,EAAY,CAAEhV,OAAAA,EAAQsE,UAAAA,MAEvB,CAACtE,EAAQqkE,EAAaK,EAAU1vD,EAAa1Q,EAAWs/D,EAAQW,OAAQX,EAAQuB,QAGnF5iC,EAAAA,EAAAA,KAAU,KACR,IAAIojC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQl/D,OAAOC,YAAW,KACxBsO,EAAY,CAAEhV,OAAAA,EAAQsE,UAAAA,MACC,IAAtBs/D,EAAQS,cAGN,KACDsB,GACFl/D,OAAOgB,aAAak+D,MAGvB,CAAChB,EAAS3kE,EAAQgV,EAAa1Q,EAAWs/D,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAe9+B,EAAAA,EAAAA,KAAQ,IACpB1H,EAAiBA,EAAex7B,QAAO,CAACT,EAAmBjC,KAChE,MAAM4X,EAAOwqC,EAAUpiD,GAKvB,OAJI4X,GACF3V,EAAOa,KAAK8U,GAGP3V,IACN,IAAM,IACR,CAACmgD,EAAWlkB,IAETymC,GAAoBj+B,EAAAA,EAAAA,KACvBlvB,IACCsrD,EAAiB,CAACtrD,IAClBorD,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAAChrD,MACX,CAACgrD,IAGAoC,GAAuBl+B,EAAAA,EAAAA,KAC1BnvB,IACCurD,EAAiBvrD,KAChB,IAGCstD,GAAkBn+B,EAAAA,EAAAA,KACtB,KACEk8B,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,KACV,CAACL,EAAYK,IAGZiC,GAAyBp+B,EAAAA,EAAAA,KAC7B,KACE+7B,EAAgB,CAAE3jE,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAWq/D,IAGnBsC,GAAqBr+B,EAAAA,EAAAA,KAAY,KACrCs8B,GAAmB,KAClB,IAEGgC,GAAqBt+B,EAAAA,EAAAA,KAAY,KACrCs8B,GAAmB,GACnBE,GAAgB,KACf,KAGH7hC,EAAAA,EAAAA,KAAU,KACJ4hC,GAAgBO,GAAYd,EAAQuB,MAAQ94D,EAAQA,SAAWoN,EAAKpN,QAAQ85D,WACxD95D,EAAQA,QAAQxD,MAAMqwD,GAAMA,EAAEvjC,UAAYujC,EAAE+L,aAEhEf,GAAmB,MAGtB,CAACQ,EAAUP,EAAc93D,EAAQA,QAASu3D,EAAQuB,KAAM1rD,EAAKpN,QAAQ85D,WAExE,MAAMpjE,GAAO+hC,EAAAA,GAAAA,KA4Cb,OACE,0BAAKxB,UAAU,OAAOyB,IAAKhiC,EAAKiiC,MAAQ,OAAS,OAZ/Ci/B,GAAmBxqD,EAAKpN,QAAQ85D,UAC9B,mBAACC,GAAA,EAAD,CACE9iE,SAAS+iE,EAAAA,GAAAA,GAAuB5sD,EAAKpN,QAAQ85D,SAAU1sD,EAAKpN,QAAQi6D,kBACpExE,SA7MgB,IA8MhByE,UAAWL,EACXM,YAhNoB,2BAyNxB,0BAAKljC,UAAU,kBAAiBuf,EAAAA,GAAAA,GAAW+gB,EAAQ6C,SAAU,CAAC,QAAS,QACvE,0BAAKnjC,UAAU,aACZvgC,EAuET,SAA2B6gE,GAEzB,YAAgC,IAArBA,EAAQiB,SAlSR,IAsSPjB,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGrCjB,EAAQW,OACH,eAGFX,EAAQiB,SAAW,aAAe,gBArF7B6B,CAAkB9C,IA/B1BgC,EAAargE,OAAS,GACpB,0BAAK+9B,UAAU,sBACZsiC,EAAaxiE,KAAK0V,GACjB,mBAACorC,GAAA,EAAD,CACE5e,KAAK,QACLxsB,KAAMA,OA4BXurD,EAAc,GAAKM,GAAW,0BAAKh3B,IAAK82B,EAAcnhC,UAAU,mBAChEsgC,EAAQuB,MAAQ1rD,EAAKpN,QAAQ85D,WAAaxB,GACzC,mBAACt/B,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,OACLJ,MAAM,cACN5B,UAAU,iBACV6U,SAAU8rB,EACVp/B,QAASohC,EACTx+B,UAAU,iBAEV,wBAAGnE,UAAU,gBAIlBqhC,GACC,0BAAKrhC,UAAU,gBACZwhC,EAEG,mBAAC6B,GAAA,EAAD,CACEluD,QAASusD,EACTx6B,SAAUs7B,EACV3tB,SAAU70C,EAAQ+3B,aAAewoC,EACjC+C,eAAgB/C,EAAeE,OAAgB1jE,EAC/C6Q,OAAK,IAIP,mBAAC21D,GAAA,EAAD,CACE/vC,KAAO,QAAOxyB,IACdmU,QAASusD,EACTx6B,SAAUq7B,EACV1tB,SAAU70C,EAAQ+3B,aAAewoC,EACjCiD,cAAejD,EAAeE,EAAc,QAAK1jE,MAKzDskE,GACA,0BAAKrhC,UAAU,gBACZsgC,EAAQoB,QAAQ5hE,KAzFzB,SAA4Bs/D,GAC1B,OACE,mBAAC,GAAD,CACEjiC,IAAKiiC,EAAOhqD,OACZoqD,cAAeqB,EACfzB,OAAQA,EACRC,YAAaA,EACbtjC,YAAaA,EACbujC,eAAgBA,EAChBC,eAAgBA,SAmFhB+B,IAAkBE,GAClB,0BAAKxhC,UAAU,qBA0CvB,SAAgCvgC,EAAc0G,EAA0B0O,GACtE,OAAKA,EAIEpV,EAAK0G,EAAS,SAAW,OAAQ0O,EAAO,KAHtCpV,EAAK0G,EAAS,4BAA8B,mCA5CXs9D,CAAuBhkE,EAAM6gE,EAAQuB,KAAM94D,EAAQgzB,cAExFylC,GACC,mBAACz/B,GAAA,EAAD,CACEwgB,QAAM,EACN1N,SAAmC,IAAzB4rB,EAAcx+D,OACxB+/B,KAAK,OACLT,QAASkhC,GAERhjE,EAAK,oBAGT6hE,GACC,mBAACv/B,GAAA,EAAD,CACEwgB,QAAM,EACNvgB,KAAK,OACLT,QAASmhC,GAERjjE,EAAK,yB,wBClThB,MAqHA,IAAeigC,EAAAA,EAAAA,KApGe,IAaxB,IAbyB,QAC7B1/B,EAD6B,oBAE7Bk0D,EAF6B,UAG7BlL,EAH6B,YAI7B4R,EAJ6B,YAK7B4C,EAL6B,UAM7BkG,EAN6B,aAO7B/hD,EAP6B,cAQ7Bq5C,GAAgB,EARa,YAS7BnK,EAT6B,MAU7BtoC,EAV6B,aAW7Bo7C,EAX6B,sBAY7BC,GACI,EACJ,MAAMC,GAAUC,EAAAA,EAAAA,IAAkB9jE,GAElC,IAAI+jE,GAAgB,EACpB,GAAIF,MAAAA,GAAAA,EAAShiD,QAAUgiD,EAAQ5rC,MAAO,CACpC,MAAM,MAAE5H,EAAF,OAAS2lB,GAAW+S,GAAyB/oD,GACnD+jE,EAAgB1zC,IAAU2lB,EAG5B,MAAMguB,GAAmB1/B,EAAAA,EAAAA,KAAY,KACnCq/B,MACC,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJI,EADI,IAEJr4D,EAFI,WAGJs4D,EAHI,MAIJzpD,EAJI,YAKJpG,EALI,MAMJwN,EANI,MAOJoW,GACE4rC,EACEM,GAAsBtiD,GAASoW,IAAU0rC,IAAiBI,EAC1DK,GAAuBC,EAAAA,GAAAA,GAAShwD,EAzDhB,KA2DhB2rB,GAAYoE,EAAAA,GAAAA,GAChB,UACAs/B,GAAa,aACbK,GAAiB,qBAChBliD,IAAUoW,IAAUyrC,GAAa,gBAClCzrC,GAAS,cAGX,OACE,0BACE+H,UAAWA,EACX,gBAAeikC,GAAYC,GAAY,GACvCziC,IAAI,QAEH5f,IAAUoW,GACT,mBAAC,GAAD,CACEj4B,QAASA,EACTk0D,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACb54B,KAAM+hC,EAAgB,YAAc,SACpCjJ,gBAAiBqJ,EACjB5iC,QAAS4iC,EAAqBH,OAAmBjnE,EACjDm+D,eAAgB0I,EAChB5I,cAAeA,EACfnK,YAAaA,EACboK,iBAAe,EACf1yC,MAAOA,IAGX,0BAAKyX,UAAU,gBACb,mBAACskC,GAAA,EAAD,CAAUtkC,UAAU,YAAYp0B,IAAKA,EAAK1K,KAAM+iE,GAAYC,KAC1DR,GAAajpD,GACb,wBAAGulB,UAAU,eAAcuf,EAAAA,GAAAA,GAAW9kC,IAEvC2pD,GACC,wBAAGpkC,UAAU,qBAAoBuf,EAAAA,GAAAA,GAAW6kB,EAAsB,CAAC,QAAS,UAG9EV,GAAazrC,GACb,mBAAC,GAAD,CACEj4B,QAASA,EACTk0D,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACb4C,YAAaA,EACb77C,aAAcA,EACd4f,QAAS4iC,EAAqBH,OAAmBjnE,EACjDm+D,eAAgB0I,EAChB5I,cAAeA,EACfnK,YAAaA,EACboK,iBAAe,Q,eCxGzB,MAuEA,IAAev7B,EAAAA,EAAAA,KAvEe,IAMxB,IANyB,QAC7B1/B,EAD6B,qBAE7B+6D,EAF6B,eAG7BpK,EAH6B,WAI7B6J,EAJ6B,MAK7BjyC,GACI,EAEJ,MAAM8hB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7BzoC,GAAO+hC,EAAAA,GAAAA,KACPlV,GAAUi4C,EAAAA,EAAAA,IAAkBvkE,IAE5B,MACJya,EADI,KAEJvZ,EAFI,OAGJsjE,EAHI,SAIJC,EAJI,OAKJC,EALI,SAMJC,EANI,WAOJC,EAPI,YAQJC,GACEv4C,GAEJqpB,EAAAA,EAAAA,KAAgB,KACd,IAAKolB,EACH,OAGF,MAAMsB,EAAYhyB,EAAI3rB,QAAS0xC,QAAwB,oBAEnDuU,GACFrK,GAAoBqK,GAAU,EAAOhU,EAAgB6J,EAAYjyC,GAAOstB,MAAMymB,IAC5ED,EAAU5rB,MAAM8rB,YAAY,gBAAiBD,GAC7CD,EAAU/I,aAAakJ,EAAAA,GAA2B,SAGrD,CAACzB,EAAsB4J,EAAUhU,EAAgB6J,EAAYjyC,IAEhE,MAAMu8C,EAAaD,GAAeD,EAAc,iBAAgBA,EAAaC,UAAiB9nE,EAE9F,OACE,0BACEstC,IAAKA,EACLrK,UAAU,WAETvlB,GACC,wBAAGulB,UAAU,UAASuf,EAAAA,GAAAA,GAAW9kC,IAElCvZ,GACC,+BAAMq+C,EAAAA,GAAAA,GAAWr+C,EAAM,CAAC,QAAS,QAEnC,0BAAK8+B,UAAY,gBAAc2kC,EAAW,YAAc,KACrDA,GACC,0BACE3kC,UAAU,gBACVmZ,IAAKwrB,EACLvrB,IAAI,GACJ3I,MAAOq0B,EACPrK,YAAY,cAGhB,wBAAGz6B,UAAU,qBACV+kC,EAAAA,GAAAA,GAAeP,EAAQC,EAAUhlE,EAAK+rB,MACtCk5C,GAAU,+BAAOjlE,EAAK,6B,eCxFjC,MAIMulE,GAAe,IAAI73D,IAAItL,OAAOojE,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBC,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCC1F,GAd+B,IAMzB,IAN0B,QAC9BC,EAAU,cADoB,UAE9BC,EAAY,OAFkB,MAG9B11C,EAH8B,OAI9B2lB,EAJ8B,UAK9BhW,GACI,EACJ,MAAMgmC,GAAa5hC,EAAAA,GAAAA,GAAe,WAAY0hC,EAASC,EAAW/lC,GAC5DyQ,GAASpgB,EAAS,UAASA,OAAa,KAAO2lB,EAAU,WAAUA,OAAc,IACvF,OACE,0BAAKhW,UAAWgmC,EAAYv1B,MAAOA,K,2CCWjCw1B,GAAiB,KACjBC,GAAqB,CACzB71C,MAAO,IACP2lB,OAAQ,IACRmwB,KAAM,GACN/rB,MAAO,GAIHgsB,GAAU,CAAEC,OAAQ,oyBAkP1B,IAAe3mC,EAAAA,EAAAA,KAtOgB,IAQzB,IAR0B,QAC9B1/B,EAD8B,KAE9BsU,EAF8B,aAG9BqN,EAH8B,eAI9BgvC,EAJ8B,WAK9B6J,EAL8B,MAM9BjyC,EAN8B,iBAO9BzhB,GACI,EAEJ,MAAMujC,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7Bi5B,GAAej5B,EAAAA,EAAAA,IAAuB,MACtCzoC,GAAO+hC,EAAAA,GAAAA,KACP8kC,GAAcC,EAAAA,GAAAA,KAEdrgD,GAAWsgD,EAAAA,EAAAA,IAAmBxmE,IAC9B,KAAElC,EAAF,IAAQ2oE,GAAQvgD,EAEhBwgD,GAAa7/D,EAAAA,EAAAA,GAAcC,GAC3B6/D,GAAYC,EAAAA,EAAAA,IAAiB5mE,EAAS0mE,GACtCG,EAA6B,YAAT/oE,GAAuB6oE,OAC7C5pE,EAD0DiD,EAAQ4G,KAAOsf,EAAS4gD,OAASJ,GAGxFK,EAAOC,IAAYvmC,EAAAA,EAAAA,IAASgmC,GAE7BQ,EAA4B,UAATnpE,GAA8B,YAATA,IAAuB6oE,GAC/D,MACJt2C,EADI,OACG2lB,EADH,KACWmwB,EADX,MACiB/rB,GACnB8rB,GAEEvN,EAAYp3D,QAAQogB,KAAiBulD,EAAAA,EAAAA,IAAmBH,EAAO12C,EAAO2lB,EAAQmwB,EAAM/rB,GACpFnC,GAAeC,EAAAA,GAAAA,GAASygB,GACxBwO,GAAmBpL,EAAAA,GAAAA,GAAY9jB,GAC/BmvB,EAAanvB,GAAgBkvB,EAE7BE,EAAa/yD,IAAQ2Q,EAAAA,EAAAA,IAAS3Q,EAAK1W,IACnC0pE,EAAchzD,GAAQ+yD,EAAc/yD,OAAkBvX,EACtDwqE,EAAcjzD,IAAS+yD,EAAc/yD,OAAkBvX,EAEvDksD,GAAQC,EAAAA,EAAAA,IAAalpD,GAErBwnE,GAAmBhkC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAAT1lC,IAAuBipE,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAF,eAAOD,GAAmBV,EAChC,OAAOU,EFtEJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAe9+D,KAAKsgE,IAAID,GAAOrgE,KAAK26D,GAAK,MAAS,GAAKmE,EEoErCyB,CAAkBF,EAAKvB,KAC9C,CAACroE,EAAMipE,EAAOZ,IAOX0B,GAAkBvjC,EAAAA,EAAAA,KAAaw9B,IACnC,GAAa,YAAThkE,EAAoB,OACxB,MACMikE,EAAgB9rB,GAAa5uC,KAAK26D,GAClC9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAYzqB,kBAEtBywB,EAAW9nE,EAAQ4G,KAAOsf,EAAS4gD,QAASjgE,EAAAA,EAAAA,GAAcC,GAC1Dq7D,GAAoB,EAAI2F,EAAW5hD,EAAS4gD,QAAU/E,EACtD7gE,GAAO6mE,EAAAA,EAAAA,IAAqBtoE,EAAiB,IAAXqoE,GAEnC5H,GAAUgC,GAUbA,EAAQE,YAAclhE,EACtBg/D,EAAM7oB,kBAAmBic,aAAa,oBAAsB,IAAG6O,MAV/DL,EAAYnqB,UAAa,8CACYz2C,8LAGX6gE,KAAiBA,uCACfI,qCAO7B,CAACrkE,EAAMkC,EAAQ4G,KAAMsf,EAAUpf,EAAkBrH,IAuIpD,OArIAk2C,EAAAA,EAAAA,KAAgB,KACVwrB,EAAaziD,SACfmpD,EAAgB1G,EAAaziD,WAE9B,CAACmpD,KAEJlyB,EAAAA,EAAAA,KAAgB,KACd,GAAIsxB,EAAkB,OACtB,MAAM5K,EAAYhyB,EAAI3rB,QAAS0xC,QAAwB,oBACnDgX,GACF9M,GAAoB8M,EAAYne,EAAO0H,EAAgB6J,EAAYjyC,GAAOstB,MAAMymB,IAC9ED,EAAU5rB,MAAM8rB,YAAY,gBAAiBD,GAC7CD,EAAU9rB,UAAU9lB,IAAI,sBACxB4xC,EAAU/I,aAAakJ,EAAAA,GAA2B,SAGrD,CAACvT,EAAO0H,EAAgB6J,EAAYjyC,EAAO6+C,EAAYH,KAE1DhoC,EAAAA,EAAAA,KAAU,KAEJ53B,KAAK8lD,IAAIsZ,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkB5+D,KAAK8lD,IAAIsZ,EAAIuB,KAAOjB,EAAMiB,MAAQ/B,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,KACR,CAACA,EAAKM,KAETkB,EAAAA,GAAAA,IAAW,KACT3B,MACEK,OAA6C5pE,EAAP,KAAzB8pE,GAAoB,KAErCqB,EAAAA,GAAAA,IAAY,KACV,MAAMpG,EAAcX,EAAaziD,QAE7BojD,GACF+F,EAAgB/F,KAEjB+E,EAAmB,SAAO9pE,GA4F3B,0BACEstC,IAAKA,EACLrK,UAAU,mCACVuB,QAxKgB,KAAM,MACxB,MAAM31B,EF9EH,SAAuB87D,EAAaM,EAAc7B,GACvD,MAAQ,qCAAoBuB,KAAOM,MAASN,KAAOM,KAAQ7B,KE6E7CgC,CAAcpB,EAAMW,IAAKX,EAAMiB,KAAM7B,GACjD,UAAAhjE,OAAO6iB,KAAKpa,EAAK,iBAAjB,SAA4Bwa,UAwK1B,0BAAK4Z,UAAU,eAlEZonC,EAEH,0BACEpnC,UAAU,iBACVmZ,IAAKiuB,EACLhuB,IAAI,oBACJ/oB,MAAO61C,GAAmB71C,MAC1B2lB,OAAQkwB,GAAmBlwB,SAPP,mBAAC,GAAD,CAAU3lB,MAAOA,EAAO2lB,OAAQA,IA4C1D,WACE,GAAKoxB,EAEL,OACE,sCACG7lE,QAAQimE,KAAsBb,GAC7B,0BACE3mC,UAAU,oBACVyQ,MAAQ,UAA4B,EAAnB+2B,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMY,GAAehkC,EAAAA,GAAAA,GACnB,MACAtmC,EACA6oE,GAAa,WAEf,GAAa,YAAT7oE,EACF,OACE,0BAAKkiC,UAAWooC,EAAcC,wBAAyBjC,IACrD,mBAACxlB,GAAA,EAAD,CAAQz+C,KAAMolE,EAAY/xD,KAAM8xD,EAAYtnC,UAAU,yBAChCjjC,IAArBmpB,EAASoiD,SACR,0BAAKtoC,UAAU,YAAYyQ,MAAQ,gBAAevqB,EAASoiD,gBAMnE,GAAa,UAATxqE,EAAkB,CACpB,MAAM8jC,EFnML,SAAuB9jC,GAC5B,OAAKA,EACEknE,GAAa7xD,IAAIrV,IACnBknE,GAAa7xD,IAAIrV,EAAK6U,MAAM,KAAK,KACjCkzD,IAGiB0C,EAHYzqE,EAI3ByqE,EAAI51D,MAAM,IAAIrS,QAAO,CAACkoE,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrB7C,GAAc5jE,SAHtC,UAMpB,IAAwBsmE,EE4LJI,CAAcziD,EAAS0iD,WAC/BziC,EF3ML,SAAyBroC,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,GE0MD+qE,CAAgB3iD,EAAS0iD,WACtC,OACE,0BAAK5oC,UAAWooC,EAAcC,wBAAyBjC,GAAS31B,MAAQ,gBAAe7O,KACrF,0BAAKuX,IAAKhT,EAAMnG,UAAU,aAAaoZ,IAAI,MAKjD,OACE,0BAAKpZ,UAAWooC,EAAcjvB,IAAK2vB,GAAQ1vB,IAAI,KAe5C2vB,IAaAC,IAjGP,WACE,GAAK/B,EACL,MAAa,UAATnpE,EAEA,0BAAKkiC,UAAU,iBACb,0BAAKA,UAAU,uBACZ9Z,EAASzL,OAEZ,0BAAKulB,UAAU,0BACZ9Z,EAAS+iD,UAKL,YAATnrE,EAEA,0BAAKkiC,UAAU,iBACb,0BAAKA,UAAU,uBAAuBvgC,EAAK,uBAC3C,0BAAKugC,UAAU,2BACZkpC,EAAAA,EAAAA,IAAkBzpE,EAAMinE,EAAY1mE,EAAQ23D,YAE7CgP,GAAa,0BAAK3mC,UAAU,gBAAgBqK,IAAK82B,UAPzD,EAqFGgI,OCtMP,IAAezpC,EAAAA,EAAAA,KAzDY,IAIrB,IAJsB,QAC1B1/B,EAD0B,iBAE1BopE,EAF0B,aAG1BznD,GACI,EACJ,MAAM,qBAAEo2B,IAAyB56B,EAAAA,EAAAA,MAC3BksD,EAAOrpE,EAAQ+G,QAAQsiE,MACvB,MACJ5uD,EADI,YACGpG,GACLg1D,EAEEC,EAAY/nE,QAAQogB,KAAiB4nD,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAYjoE,QAAQogB,KAAiB8nD,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAexxB,EAAAA,GAAAA,GAASoxB,GAAYF,GACpCO,GAAezxB,EAAAA,GAAAA,GAASsxB,GAAYJ,GAS1C,OACE,0BAAKppC,UAAU,QACb,0BACEA,UAAU,UACVyQ,MAAQ,8BACRlP,QAZkB,KACtBwW,EAAqB,CACnB/2C,UAAWhB,EAAQpC,GACnB6pB,OAAQznB,EAAQuoD,cAAe,GAAG,QAW9BmhB,IAAiBC,GACjB,mBAAC,GAAD,CAAU3pC,UAAU,6BAErB0pC,GACC,0BACE1pC,UAAU,kBACVmZ,IAAKuwB,EACLtwB,IAAK3+B,IAGRkvD,GACC,4BACE3pC,UAAU,kBACVy5B,aAAW,EACXE,OAAK,EACLH,UAAQ,EACRE,MAAI,EACJvgB,IAAKwwB,KAIX,0BAAK3pC,UAAU,SAASvlB,KACtB0f,EAAAA,EAAAA,IAAen6B,IAAY,0BAAKggC,UAAU,eAAe3rB,OCnDlD,SAASu1D,GAAkBC,GAiDxC,OAAOnqC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACV,CAACxlC,EAAQqtE,KACP,MAAM,QAAE9pE,GAAY8pE,EACpB,MAAO,CACLnZ,gBAAgBhf,EAAAA,EAAAA,IAAqBl1C,GACrC+9D,YAAYuP,EAAAA,EAAAA,IAAwBttE,EAAQuD,EAAQpC,OAL9CqkC,EAhDmDsI,IAC7D,MAAM,eACJomB,EADI,WAEJ6J,EAFI,QAGJx6D,EAHI,WAIJ4qD,GACErgB,GACE,uBAAEzkC,IAA2BqX,EAAAA,EAAAA,MAE7B6sD,GAAsB1lC,EAAAA,EAAAA,KAAah6B,IACvCA,EAAEo6B,kBACF5+B,EAAuB,CAAE9E,UAAWhB,EAAQpC,GAAIiI,UAAWyE,MAAAA,OAAF,EAAEA,EAAGg/B,aAC7D,CAACxjC,EAAwB9F,IAEtBiqE,GAAWzmC,EAAAA,EAAAA,KAAQ,KACvB,MAAQonB,WAAYsf,EAAd,QAAoB3oC,GAAYgJ,EACtC,MAAO,IACFA,EACHomB,eAAAA,EACA6J,WAAAA,EACA5P,WAAY,IACPsf,EACHh6C,EAAG,EACHc,EAAG,GAELuQ,QAASovB,OAAiB5zD,EAAYwkC,KAEvC,CAACgJ,EAAOomB,EAAgB6J,IAE3B,OACE,0BACEx6B,WAAWoE,EAAAA,GAAAA,GAAe,4BAA6Bo2B,GAAc,eACrE/pB,MAAOma,EAAc,SAAQA,EAAW16B,aAAa06B,EAAW55B,OAAS,GACzEuQ,QAASovB,EAAiBqZ,OAAsBjtE,GAE/C4zD,GACC,0BAAK3wB,UAAU,0BACZw6B,GACC,wBAAGx6B,UAAU,iBAKnB,mBAAC6pC,EAAqBI,QChD9B,MAAME,GAAkBP,GAAkBQ,IACpCC,GAAkBT,GAAkBU,IA2G1C,IAAeroC,EAAAA,EAAAA,KACb,CAACxlC,EAAD,KAAmC,IAA1B,MAAEy/C,GAAwB,EACjC,MAAM,OAAEx/C,GAAWw/C,EAAM6L,YACnBx/B,GAAQga,EAAAA,EAAAA,IAAY9lC,GACpB8tE,GAAoBC,EAAAA,EAAAA,IAAwB/tE,EAAQC,GAC1D,MAAO,CACL6rB,MAAAA,EACAkiD,YAAahuE,EAAO+T,YAAYC,iBAChC85D,kBAAAA,KARN,EAxFyC,IAYnC,IAZoC,MACxCruB,EADwC,oBAExCgY,EAFwC,kBAGxCwW,EAHwC,aAIxC/oD,EAJwC,MAKxCsnC,EALwC,YAMxC4H,EANwC,YAOxC8Z,EAPwC,aAQxChH,EARwC,YASxC8G,EATwC,kBAUxCF,EAVwC,MAWxChiD,GACI,EACJ,MAAM,qBAAEqiD,IAAyBztD,EAAAA,EAAAA,MAE3B0tD,EAAa3uB,EAAM99C,SAAS6D,OAE5B6oE,GAAqBxmC,EAAAA,EAAAA,KAAatkC,IACtC4qE,EAAqB,CAAEluE,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACjE,CAACgtE,KAyDIv6C,MAAO06C,EAAgB/0B,OAAQg1B,GAAoBL,EAAYpb,eAEvE,OACE,0BACEvvB,UAAU,QACVyQ,MAAQ,UAASs6B,gBAA6BC,QAE7C9uB,EAAM99C,SAAS0B,KA9DpB,SAA4BE,EAAqBwP,GAC/C,MAAM,MAAEqS,EAAF,MAASoW,IAAUE,EAAAA,EAAAA,IAAkBn4B,GACrCirE,EAAaR,EAAYzqE,EAAQyH,iBAAmBzH,EAAQpC,IAC5Di9D,EAAiBoQ,MAAAA,OAAH,EAAGA,EAAY76D,UAC7B,WAAEw6C,EAAF,MAAcC,GAAU8f,EAAYjgB,OAAOl7C,GAG3CorD,GAAcsQ,EAAAA,EAAAA,KAAuB7nE,EAAAA,EAAAA,MAAarD,GAClDw9D,GAAc2N,EAAAA,EAAAA,KAAuB9nE,EAAAA,EAAAA,MAAarD,GAExD,GAAI6hB,EAAO,CACT,MAAMk5C,EAAuB2P,IAE1BzhB,EAAQz5C,IAAUq7D,EAAa,EAAItpE,QzB7DpC,EyB6D4CspD,GzB9D1C,EyB8DwEA,IAG5E,OACE,mBAACsf,GAAD,CACEvsE,GAAK,gBAAcq3D,EAAAA,EAAAA,IAAiBj1D,EAAQpC,MAC5CoC,QAASA,EACTk0D,oBAAqBA,EACrB0G,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChBjQ,WAAYA,EACZiG,YAAaA,EACbtvB,QAASoiC,EACTzI,eAAgB4P,EAChB9P,cAAeuP,EAAkB/lE,SAASxE,EAAQpC,IAClD2qB,MAAOA,IAGN,GAAI0P,EACT,OACE,mBAACoyC,GAAD,CACEzsE,GAAK,gBAAcq3D,EAAAA,EAAAA,IAAiBj1D,EAAQpC,MAC5CoC,QAASA,EACTk0D,oBAAqBA,EACrB0G,YAAaA,EACb4C,YAAaA,EACb3C,eAAgBA,EAChBl5C,aAAcA,EACdipC,WAAYA,EACZiG,YAAaA,EACbtvB,QAASoiC,EACTzI,eAAgB4P,EAChB9P,cAAeuP,EAAkB/lE,SAASxE,EAAQpC,IAClD2qB,MAAOA,W,mNCvEjB,IAAI6iD,GAEJ,MA6MA,GA7MiC,IAM3B,IAN4B,QAChCprE,EADgC,oBAEhCk0D,EAFgC,YAGhC0G,EAHgC,aAIhCj5C,EAJgC,cAKhCq5C,GACI,EAEJ,MAAM3wB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7BmjC,GAAqBnjC,EAAAA,EAAAA,IAAuB,MAE5C20B,GAAY30B,EAAAA,EAAAA,IAAyB,MAErCjQ,EAAQj4B,EAAQ+G,QAAQkxB,MAExBk9B,GAAiBC,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,IAEvCkH,EAAeC,IAAoB56B,EAAAA,EAAAA,IAASm6B,GAC7ClC,EAAan3D,QAAQ65D,GAAiBjG,GAAkBxzC,IACxD,UAAEq8B,EAAF,aAAasd,IAAiBC,EAAAA,GAAAA,IAClCpjB,EAAAA,EAAAA,IAAoBn4C,EAAS,WAC5B04D,GACDI,EAAAA,EAAAA,IAAsB94D,EAAS,UAC/B2hB,IAGM25C,aAAcG,IAAqBF,EAAAA,GAAAA,IACzCpjB,EAAAA,EAAAA,IAAoBn4C,EAAS,aAC5Bg7D,EACDnqC,EAAAA,GAAAA,QACAlP,GAEI65C,EAAW3B,GAAwB75D,EAASg+C,IAE5C,WAAE+f,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,KACpCtC,EAAkBP,IAAkB2C,GAAe/C,EACnDc,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BzxB,GAAuBwvB,EAAAA,GAAAA,GAAmBnb,IAE9CvU,aAAc6hC,EACd3hC,qBAAsBsyB,IACpBryB,EAAAA,GAAAA,GAAkB+xB,IAAmBoC,OAAYhhE,EAAW++D,IAEzDzE,EAAakU,IAAkB9qC,EAAAA,EAAAA,KAAkB,IACjDrwB,EAAUo7D,IAAe/qC,EAAAA,EAAAA,IAAiB,IAEjDxB,EAAAA,EAAAA,KAAU,KACR,IAAKo4B,EACH,OAGF,MAAMoU,EAAYC,GAAAA,GAA4B,EAExC3J,EAA0C,GAAzB0J,EADL,GACkCpkE,KAAK26D,GACnDG,EAAmBJ,EAAgB3xD,EAAW2xD,EAE9C4J,EAAW9O,EAAUn+C,QACrBktD,EAAoBP,EAAmB3sD,QACvCwhD,EAAQ0L,EAAkBv0B,kBAE3B6oB,EAUFA,EAAM7oB,kBAAiCic,aAAa,oBAAqB6O,EAAiBngE,YAT3F4pE,EAAkBj0B,UAAa,yBACf+zB,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnB1J,KAAiBA,sCAChBA,mCAO7ByJ,EAAYG,EAASpN,YAAcoN,EAASnN,YAC3C,CAACnH,EAAajnD,IAEjB,MAAM6lD,EAAa10D,QAAQy8C,GAAamX,GAElC0W,GAAcvnC,EAAAA,EAAAA,KAAY,KACzBu4B,EAAUn+C,UAIf6sD,GAAe,GACfC,EAAY,IACZjS,EAAAA,GAAAA,GAASsD,EAAUn+C,UAEnB2+C,EAAAA,EAAAA,KAAQ,KACNgO,EAAmB3sD,QAASi5B,UAAY,SAEzC,IAEGm0B,GAAiBxnC,EAAAA,EAAAA,KAAY,KAAM,MAC3B,QAAZ,EAAA8mC,UAAA,WACAA,GAAeS,IACd,CAACA,KAEJ5sC,EAAAA,EAAAA,KAAU,KACH49B,EAAUn+C,UAIXu3C,GACFsD,EAAAA,GAAAA,GAASsD,EAAUn+C,SAEnBm+C,EAAUn+C,QAAQzG,WAEnB,CAACg+C,IAEJ2G,GAAkBC,EAAW5G,IAC7BwI,EAAAA,GAAAA,GAAgB5B,EAAW,CAAC7e,IAE5B,MAAMiB,GAAc3a,EAAAA,EAAAA,KAAY,KAC9B,IAAK0Z,EAGH,YAFAqd,GAAkBe,IAAeA,IAKnC,GAAIpB,EAEF,YADA79C,EAAAA,EAAAA,MAAauhD,2BAA2B,CAAE1+D,QAAAA,IAI5C,MAAM2rE,EAAW9O,EAAUn+C,QACvB24C,EACEsU,EAAS3O,SACXzD,EAAAA,GAAAA,GAASoS,IACTI,EAAAA,GAAAA,OAEAJ,EAAS1zD,SAGX6zD,IAEAH,EAAS1zD,QACT0zD,EAASpN,YAAc,GACvBhF,EAAAA,GAAAA,GAASoS,IACTI,EAAAA,GAAAA,MAEAR,GAAe,MAEhB,CAACO,EAAgBzU,EAAa2D,EAAehd,EAAWh+C,IAErDs+D,GAAmBh6B,EAAAA,EAAAA,KAAah6B,IACpC,MAAMqhE,EAAWrhE,EAAE0oD,cAEnBwY,EAAYG,EAASpN,YAAcoN,EAASnN,YAC3C,IAEGwN,GAAiB5nC,EAAAA,GAAAA,GAAe,aAAcuF,GAEpD,OACE,0BACEU,IAAKA,EACLrK,UAAU,yBACVuB,QAAS0d,GAET,0BAAKjf,UAAU,qBACb,6BACEqK,IAAKmxB,EACLx7B,UAAU,YACVyQ,MAAQ,UAASi7B,GAAAA,iBAAwCA,GAAAA,UAG5D1tB,GACC,0BAAKhe,UAAU,iBAEb,+BACEqK,IAAKwyB,EACL78B,UAAWgsC,EACX37C,MAAOq7C,GAAAA,GACP11B,OAAQ01B,GAAAA,GACRlS,UAAQ,EACRG,OAAQtC,EACRqC,MAAOrC,EACPoC,aAAW,EACX1C,QAASM,EAAcwU,OAAc9uE,GAEjCihE,EAXN,CAYEW,aAActH,EAAciH,OAAmBvhE,IAE/C,6BAAQo8C,IAAK6E,MAInB,0BAAKhe,UAAU,WAAWqK,IAAKghC,IAC9BC,GACC,0BAAKtrC,UAAY,iBAAgBi8B,KAC/B,mBAACU,GAAA,EAAD,CAAiBvsD,SAAU4qD,EAAgBS,EAAmBH,MAGhEtd,IAAcod,GACd,wBAAGp7B,UAAU,kBAEf,0BAAKA,UAAU,0BACZq3B,GAAcwH,EAAAA,EAAAA,IAAoBhC,EAAUn+C,QAAS6/C,cAAeM,EAAAA,EAAAA,IAAoB5mC,EAAMumC,YAC5FnH,GAAewF,EAAUn+C,QAASs+C,SAAW,wBAAGh9B,UAAU,kBCrMrE,GA3BoC,IAA0B,IAAzB,QAAEhgC,EAAF,QAAWuhC,GAAc,EAC5D,MAAM9hC,GAAO+hC,EAAAA,GAAAA,KACb,OACE,0BAAKxB,UAAU,iBACZhgC,EAAQuoD,cAAezoD,KAAKytD,GAC3B,0BAAKvtB,UAAU,OACZutB,EAAIztD,KAAK2nB,GACR,mBAACsa,GAAA,EAAD,CACEC,KAAK,OACLkC,QAAM,EACN2Q,SAA0B,gBAAhBptB,EAAO3pB,KAEjByjC,QAAS,IAAMA,EAAQ,CAAEvgC,UAAWhB,EAAQpC,GAAI6pB,OAAAA,KAEhD,2BAAMuY,UAAU,uBAAsBuf,EAAAA,GAAAA,GAAW9/C,EAAKgoB,EAAOvmB,QAC5D,CAAC,MAAO,WAAWsD,SAASijB,EAAO3pB,OAAS,wBAAGkiC,UAAU,cACzC,QAAhBvY,EAAO3pB,OAAmB6pB,EAAAA,GAAAA,KAAiBF,EAAO7b,MAAQ,wBAAGo0B,UAAU,qBACvD,oBAAhBvY,EAAO3pB,MAA8B,wBAAGkiC,UAAU,sBAClD,CAAC,UAAW,iBAAiBx7B,SAASijB,EAAO3pB,OAAS,wBAAGkiC,UAAU,wBCyDlF,IAAeN,EAAAA,EAAAA,KArEqB,IAG9B,IAH+B,WACnCp9B,EADmC,SAEnCuyC,GACI,EACJ,MAAM,SAAEl2C,IAAawe,EAAAA,EAAAA,MAEf1d,GAAO+hC,EAAAA,GAAAA,MACP,SACJ7kC,EADI,OACMD,EADN,cACcs8B,EADd,cAC6Bx2B,EAD7B,uBAC4CwS,EAD5C,iBACoEi3D,GACtE3pE,EAEE28C,GAAc3a,EAAAA,EAAAA,KAAY,KAC9B3lC,EAAS,CAAEf,GAAIlB,EAAQC,SAAAA,MACtB,CAACgC,EAAUjC,EAAQC,IAEhBuvE,GAAiB1oC,EAAAA,EAAAA,KAAQ,KAC7B,GAAKyoC,MAAAA,IAAAA,EAAkBhqE,OACrB,OAIF,MAAQgM,OAASK,KAAM0xC,GAAa33C,OAASiG,KAAM6zB,KAAgB9+B,EAAAA,EAAAA,MAEnE,OAAO4oE,EAAiBnsE,KAAKqsE,IACpBlnD,EAAAA,EAAAA,IAASknD,GAAUnsB,EAAUmsB,GAAUhqC,EAAUgqC,KACvDpsE,OAAOwB,WACT,CAAC0qE,IAEJ,QAAsBlvE,IAAlBi8B,EACF,OAoBF,MAAMozC,EAAY7qE,QAAQyT,GAA0BxS,GAAiBwS,EAAyBxS,GAE9F,OACE,0BACE,YAAUy9B,EAAAA,GAAAA,IAAqBjH,GAC/BgH,WAAWoE,EAAAA,GAAAA,GAAe,gBAAiBgoC,GAAa,aAAcv3B,GAAY,YAClFpT,IAAKhiC,EAAKiiC,MAAQ,MAAQ,MAC1BH,QAAS0d,GAET,wBAAGjf,UAAU,4BACVksC,GAA4C,IAA1BA,EAAejqE,SAAiB,wBAAG+9B,UAAU,kBAzBlEksC,GAAkBA,EAAejqE,OAAS,GACxC,0BAAK+9B,UAAU,kBAAkByB,IAAKhiC,EAAKiiC,MAAQ,MAAQ,OACxDwqC,EAAepsE,KAAK0V,GACnB,mBAACorC,GAAA,EAAD,CACEzjB,IAAK3nB,EAAK5X,GACVokC,KAAK,QACLxsB,MAAMyP,EAAAA,EAAAA,IAASzP,EAAK5X,IAAM4X,OAAkBzY,EAC5CoF,MAAO8iB,EAAAA,EAAAA,IAASzP,EAAK5X,SAAwBb,EAAlByY,OAoBnC,0BAAKwqB,UAAU,QAAQyB,IAAI,QACxBzI,EAAgBv5B,EAAK,WAAYu5B,EAAe,KAAOv5B,EAAK,kBAE/D,wBAAGugC,UAAU,kBCTnB,IAAeN,EAAAA,EAAAA,KApDV,IAKC,IALA,SACJ9N,EADI,QAEJ5xB,EAFI,eAGJy1D,EAHI,mBAIJ1kC,GACI,EACJ,MAAM,aAAEgB,IAAiB5U,EAAAA,EAAAA,OAEnB,gBAAEwV,GAAoB3yB,EAAQmyB,UAE9Bk6C,GAAiB7oC,EAAAA,EAAAA,KAAQ,KAC7B,IAAK7Q,GAAmBf,EAAS/c,MAlBR,EAmBvB,OAIF,MAAMmrC,GAAY38C,EAAAA,EAAAA,MAAY4K,MAAMK,KAEpC,OAAOqkB,EACJ5yB,QAAQusE,GAAmBA,EAAe16C,WAAaA,EAASA,WAChE9xB,KAAKwsE,GAAmBtsB,EAAUssB,EAAenjE,UACjDpJ,OAAOwB,WACT,CAACqwB,EAAUe,IAERssB,GAAc3a,EAAAA,EAAAA,KAAY,KAC9BvS,EAAa,CACXH,SAAUA,EAASS,cAAWt1B,EAAY60B,EAASA,SACnDl1B,OAAQsD,EAAQtD,OAChBsE,UAAWhB,EAAQpC,OAEpB,CAACoC,EAAS4xB,EAAUG,IAEvB,OACE,mBAACgQ,GAAA,EAAD,CACE/B,WAAWoE,EAAAA,GAAAA,GAAexS,EAASS,UAAY,UAC/C2P,KAAK,OACLT,QAAS0d,GAET,mBAAC,GAAD,CACEwW,eAAgBA,EAChB7jC,SAAUA,EAASA,SACnBb,mBAAoBA,IAErBs7C,MAAAA,GAAAA,EAAgBpqE,OACf,0BAAK+9B,UAAU,WACZqsC,EAAevsE,KAAK0V,GAAS,mBAACorC,GAAA,EAAD,CAAQprC,KAAMA,EAAMwsB,KAAK,cAEvD/B,EAAAA,GAAAA,IAAqBrO,EAAS/c,WC/BxC,IAAe6qB,EAAAA,EAAAA,KAvBiB,IAM1B,IAN2B,QAC/B1/B,EAD+B,UAE/BusE,EAF+B,eAG/B9W,EAH+B,mBAI/B1kC,EAJ+B,aAK/By7C,GACI,EACJ,OACE,0BAAKxsC,WAAWoE,EAAAA,GAAAA,GAAe,YAAamoC,GAAa,eACtDvsE,EAAQmyB,UAAWppB,QAAQjJ,KAAK8xB,GAC/B,mBAAC,GAAD,CACEuL,IAAKvL,EAASA,SACdA,SAAUA,EACV5xB,QAASA,EACTy1D,eAAgBA,EAChB1kC,mBAAoBA,MAGvBy7C,M,0BCzBP,MAwEA,IAAe9sC,EAAAA,EAAAA,KAxD0B,IAUnC,IAVoC,aACxC+sC,EADwC,YAExCx7C,EAFwC,MAGxCg4B,EAHwC,QAIxCyjB,EAJwC,KAKxC1qC,EAAO,SALiC,oBAMxCkyB,EANwC,UAOxClzD,EAPwC,OAQxCtE,EARwC,wBASxC60B,GACI,EACJ,MAAM,QACJo7C,EADI,IAEJtiC,EAFI,MAGJoG,EAHI,MAIJpgB,EAJI,YAKJ4uB,EALI,oBAMJqX,IACEsW,EAAAA,GAAAA,GAAiB5qC,EAAMtlC,EAAQsE,EAAW0rE,EAASn7C,EAAyB03B,EAAOh4B,GACjFrzB,EAAM,eAAc6uE,IAEpBtX,GAAiBC,EAAAA,GAAAA,IAAkB/qB,EAAK6pB,IAEvC2Y,EAA2BC,IAAgCrsC,EAAAA,EAAAA,MASlE,OARAxB,EAAAA,EAAAA,KAAU,KACJwtC,IACFM,EAAAA,GAAAA,GAAiBN,GAAsD52B,MAAMxqC,IAC3EyhE,EAA6BzhE,QAGhC,CAACohE,IAGF,0BACEpiC,IAAKA,EACLrK,UAAU,4BACVyQ,MAAOA,EACPlP,QAAS0d,GAER4tB,GACC,mBAACnW,GAAA,EAAD,CACEv5B,IAAKv/B,EACLA,GAAIA,EACJ+4D,cAAekW,EACf7qC,KAAM3R,EACN28C,QA7DM,EA8DNpW,KAAMzB,GAAkBwX,EACxB/jC,uBAAqB,EACrBiuB,QAAM,EACNC,OAAQR,QCWlB,IAAe52B,EAAAA,EAAAA,KAlEwB,IAIjC,IAJkC,UACtCjB,EADsC,QAEtCz+B,EAFsC,OAGtCtD,GACI,EACJ,MAAM,YAAE82C,IAAgBr2B,EAAAA,EAAAA,MAElB1d,GAAO+hC,EAAAA,GAAAA,MACP,WAAEv6B,EAAF,QAAcoxD,EAAd,OAAuBjkD,GAAWqqB,EAClCwuC,EAAsB,WAAX74D,EACX84D,EAAyB,SAAX94D,IAAsBnN,EAEpCkmE,GAAa7oC,EAAAA,EAAAA,KAAY,KAC7BkP,EAAY,CAAE6kB,QAAAA,EAASlvD,OAAQzM,MAC9B,CAACA,EAAQ27D,EAAS7kB,IAEf45B,GAAa5pC,EAAAA,EAAAA,KAAQ,IACrB60B,EACE6U,EAAoB,mCACpBD,EAAiBhmE,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7CimE,EAAoB,8BACpBD,EAAiBhmE,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAACimE,EAAaD,EAAUhmE,EAAYoxD,IAEjCmG,GAAWh7B,EAAAA,EAAAA,KAAQ,IAChB/E,EAAU+/B,UAAW6O,EAAAA,EAAAA,IAAmB5tE,EAAMg/B,EAAU+/B,eAAYzhE,GAC1E,CAAC0C,EAAMg/B,EAAU+/B,WAEd8O,GAAgBzV,EAAAA,EAAAA,IAAWp4D,EAAqB,IAAfO,EAAQ4G,MAC/C,OACE,0BAAKo5B,UCzDc,+DD0DjB,mBAAC+B,GAAA,EAAD,CACEC,KAAK,UACLJ,MAAM,cACNh0B,OAAK,EACLs2B,QAAM,EACN3C,QAAS4rC,EACTntC,UChEsF,gEDiEtF6U,UAAWrW,EAAAA,GACX2F,UAAW1kC,EAAKwH,EAAa,YAAc,aAE3C,wBAAG+4B,UAAWq4B,EAAU,sBAAwB,gBAElD,0BAAKr4B,UCtE0J,+DDuE7J,0BAAKA,UCvE+N,iEDuEpMvgC,EAAK2tE,IACrC,0BAAKptC,UCxEmgB,+DDyEtgB,wBACEA,WAAWoE,EAAAA,GAAAA,GACT,mBC3EsS,+DD2EpQ6oC,GC3EyZ,iED2E7XhmE,GC3EkT,qED8EpX,2BAAM+4B,UC9EykB,mED+E5kBw+B,EAAW/+D,EAAK,0BAA2B,CAAC6tE,EAAe9O,IAAa8O,SEmI/EC,GAAe,CAAElH,OAAQ,kvBAEzBmH,GAAmB,CAAEnH,OAAQ,qvBA6wBnC,IAAe3mC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAQqtE,KACP,MAAM,eACJhW,EADI,gBACYx1D,EADZ,aAC6BqjB,EAD7B,iBAC2C7a,GAC7CrK,GACE,QACJuD,EADI,MACKk8C,EADL,eACYuxB,EADZ,WAC4BC,EAD5B,SACwC/wE,EADxC,gBACkDgH,EADlD,sBACmEgqE,GACrE7D,GACE,GACJlsE,EADI,OACAlB,EADA,SACQwP,EADR,cACkB0hE,EADlB,iBACiCn8D,EADjC,WACmDxK,EADnD,WAC+D3E,EAD/D,YAC2E8lD,GAC7EpoD,EAEEmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1Bm1C,GAAiBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAC9CmxE,GAAgBC,EAAAA,EAAAA,IAAqBpxE,GACrC20C,EAAYlvC,IAAQuvC,EAAAA,EAAAA,IAAcvvC,GAClC4rE,EAAe5rE,MAAAA,OAAH,EAAGA,EAAMmb,SAErB0wD,GAAmBn8B,IAAkBo8B,EAAAA,EAAAA,IAAsBjuE,GAC3DkuE,EAAgBT,GAAkBC,GAAcM,EAChDxtE,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BmuE,GAAe7qB,EAAAA,EAAAA,IAAsB7mD,EAAQuD,GAC7C0pB,EAAYxd,GAAWyK,EAAAA,EAAAA,IAAWla,EAAQyP,QAAYnP,EAEtDqxE,EAAqBzxE,GAAWkU,EAAAA,EAAAA,IAAyBpU,EAAQC,EAAQC,QAAYI,EACrFsxE,EAAcruE,EAAQpC,KAAOwwE,EAE7BE,EAAkB78D,IAAqB28D,EACvC78D,EAAeE,IAAqB68D,GACtCtiE,EAAAA,EAAAA,IAAkBvP,EAAQoxE,GAAiBD,EAAgBA,EAAgBlxE,EAAQ+U,QACnF1U,EACEwxE,EAAqBh9D,IAAgBi9D,EAAAA,EAAAA,IAAkB/xE,EAAQ8U,EAAchQ,QAAQ6mD,IAErFyS,GAAiB4T,EAAAA,EAAAA,IAAqBhyE,EAAQuD,GAC9CgwD,EAAgC,WAApBrsD,IAChBu4C,EACIA,EAAM99C,SAASg0B,MAAMnc,IAAM49C,EAAAA,EAAAA,IAAuBp3D,EAAQwZ,MAC1D49C,EAAAA,EAAAA,IAAuBp3D,EAAQuD,KAInCyE,UAAWwrD,EAAgB3sD,YAAa4sD,EADpC,oBACsDnsD,GACvDisD,GAAa8D,GAAmB,GAE/B4a,EAAepwE,EAAgBkB,YAAclB,EAAgBkB,WAAWgF,SAAS5G,IAE/ET,MAAOwxE,IAAchyD,EAAAA,EAAAA,IAAwBlgB,IAAW,GAE1DmyE,GAAcC,EAAAA,EAAAA,IAAsB7uE,GAC1C,IAAIw6D,EAGFA,EADEte,MAAAA,GAAAA,EAAO99C,SACI89C,EAAM99C,SAASi2B,OAAM,QAAGz2B,GAAIoD,GAAP,SAAuB+oE,EAAAA,EAAAA,IAAwBttE,EAAQuE,OAE5E+oE,EAAAA,EAAAA,IAAwBttE,EAAQmB,GAG/C,MAAM,SAAEgzD,GAAkC,WAApBjtD,IAAgC1D,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,IAAc,GAC3Gq+D,GAAgB8T,EAAAA,EAAAA,IAAoBryE,EAAQuD,GAC5C+uE,EAAmBzsE,GACrBC,EAAAA,EAAAA,IAAiB9F,EAAQ6F,EAAW5F,OAAQ4F,EAAW3F,WAAa2F,OACpEvF,EAEEi1B,EAAoBzwB,QAAQvB,EAAQ4D,aAAe5D,EAAQiyB,UAC3DC,EAA8BF,GAChCltB,EAAAA,EAAAA,IAA0BrI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACEq6D,EAAkBplC,EACtB27C,GAAwB3hE,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQw1B,QAAgCn1B,EACxFiD,EAEEysE,EAAemC,GAAcv0C,EAAAA,EAAAA,IAAyB59B,EAAQmyE,QAAe7xE,EAEnF,MAAO,CACLwrB,OAAOga,EAAAA,EAAAA,IAAY9lC,GACnBsxE,aAAAA,EACAC,gBAAAA,EACAxtE,OAAAA,EACA0tE,cAAAA,EACAC,aAAAA,EACAzkD,UAAAA,EACA4kD,gBAAAA,EACAD,YAAAA,EACA98D,aAAAA,EACAg9D,mBAAAA,EACAv8C,kBAAAA,EACA6+B,aAAame,EAAAA,EAAAA,IAAyBvyE,EAAQuD,GAC9CgwD,UAAAA,EACA0e,aAAAA,EACAtX,gBAAAA,EACAvlB,eAAAA,EACAg8B,cAAAA,EACAx8B,UAAAA,EACAuf,SAAAA,EACAjvC,aAAAA,EACA7a,iBAAAA,EACA6nE,UAAAA,EACAM,cAAe1tE,QAAQqtE,GACvBM,cAAeN,GAAcO,EAAAA,EAAAA,IAAoB1yE,EAAQmyE,QAAe7xE,EACxEqyE,oBAAqBR,IAAe3pD,EAAAA,EAAAA,IAASvoB,IAAU2yE,EAAAA,EAAAA,IAA0B5yE,EAAQmyE,QAAe7xE,EACxGuyE,qBAAsBV,GAAcW,EAAAA,EAAAA,IAAyB9yE,EAAQmyE,QAAe7xE,EACpF0vE,aAAAA,EACAx7C,YAAaw7C,IAAgBxnD,EAAAA,EAAAA,IAASvoB,IAAU49B,EAAAA,EAAAA,IAA+BmyC,QAAgB1vE,EAC/F4zD,gBAAgBhf,EAAAA,EAAAA,IAAqBl1C,GACrC+9D,WAAAA,EACAgV,gBACEjuE,QAAQvB,EAAQ4D,aACZ5D,EAAQiyB,YACTw9C,EAAAA,EAAAA,IAA8BhzE,EAAQC,EAAQsD,EAAQ4D,WAE3DjH,SAAAA,EACAq+D,cAAAA,EACA0U,aAAkC,WAApB/rE,EACdylE,kBAAkB8B,EAAAA,EAAAA,IAAuBzuE,EAAQuD,GACjD2vE,kBAAkBxE,EAAAA,EAAAA,IAAuB1uE,EAAQuD,GACjD4vE,sBAAuBnzE,EAAOgjB,SAAS8S,MAAMq9C,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyBrzE,GAC7C6F,WAAYysE,EACZh+C,mBAAoBt0B,EAAOs0B,mBAC3BgC,iBAAiBjB,EAAAA,EAAAA,IAAe9xB,QAAWjD,GAAY80B,EAAAA,EAAAA,IAAsBp1B,EAAQC,GACrF+4D,eAAgB2B,GAAmB36D,EAAOg2B,gBAAgB2kC,EAAgBx5D,IAC1E2zB,wBAAyB90B,EAAO80B,2BAC5BtqB,GAAc,CAAE+vD,gBAAgB+Y,EAAAA,EAAAA,IAAqBtzE,EAAQuD,EAA6B,cAApB2D,OAC5C,iBAAnBk3D,GAA+B,CAAEA,eAAAA,MACxC7K,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,EAAkBnsD,oBAAAA,MA5HvCk+B,EAzwBuB,IAkErC,IAlEsC,QAC1CjiC,EAD0C,aAE1C+tE,EAF0C,6BAG1CiC,EAH0C,4BAI1CC,EAJ0C,uCAK1CC,EAL0C,MAM1Ch0B,EAN0C,UAO1C8M,EAP0C,WAQ1C0kB,EAR0C,eAS1CD,EAT0C,mBAU1C0C,EAV0C,WAW1CC,EAX0C,gBAY1Chc,EAZ0C,eAa1Cic,EAb0C,cAc1CC,EAd0C,uBAe1CC,EAf0C,sBAgB1C5C,EAhB0C,aAiB1CtZ,EAjB0C,MAkB1C9rC,EAlB0C,gBAmB1CylD,EAnB0C,OAoB1CxtE,EApB0C,cAqB1C0tE,EArB0C,aAsB1CC,EAtB0C,UAuB1CzkD,EAvB0C,YAwB1C2kD,EAxB0C,gBAyB1CC,EAzB0C,aA0B1C/8D,EA1B0C,mBA2B1Cg9D,EA3B0C,eA4B1CvX,EA5B0C,eA6B1C6D,EA7B0C,kBA8B1C7oC,EA9B0C,YA+B1C6+B,EA/B0C,UAgC1Cb,EAhC0C,eAiC1CC,EAjC0C,iBAkC1CC,EAlC0C,oBAmC1CnsD,EAnC0C,aAoC1C2qE,EApC0C,eAqC1C78B,EArC0C,cAsC1Cg8B,EAtC0C,UAuC1Cx8B,EAvC0C,SAwC1Cuf,EAxC0C,aAyC1CjvC,EAzC0C,iBA0C1C7a,EA1C0C,UA2C1C6nE,EA3C0C,cA4C1CO,EA5C0C,aA6C1CzC,EA7C0C,YA8C1Cx7C,EA9C0C,oBA+C1Cm+C,GA/C0C,qBAgD1CE,GAhD0C,eAiD1C3e,GAjD0C,WAkD1C6J,GAlD0C,gBAmD1CgV,GAnD0C,SAoD1C7yE,GApD0C,gBAqD1Cy6D,GArD0C,mBAsD1CrmC,GAtD0C,gBAuD1CgC,GAvD0C,eAwD1C0iC,GAxD0C,wBAyD1ClkC,GAzD0C,gBA0D1C5tB,GA1D0C,aA2D1C+rE,GA3D0C,cA4D1C1U,GA5D0C,iBA6D1CoO,GA7D0C,iBA8D1CuG,GA9D0C,mBA+D1CE,GA/D0C,sBAgE1CD,GAhE0C,WAiE1CttE,IACI,EACJ,MAAM,uBACJwD,GADI,qBAEJiyC,GAFI,uBAGJ/xC,KACEmX,EAAAA,EAAAA,MAGEktB,IAAMnC,EAAAA,EAAAA,IAAuB,MAE7BsoC,IAAkBtoC,EAAAA,EAAAA,IAAuB,MAEzC+oB,IAAa/oB,EAAAA,EAAAA,IAAuB,MAEpCzoC,IAAO+hC,EAAAA,GAAAA,MAEb8yB,EAAAA,GAAAA,IAAekc,GAAiBR,GAEhC,MAAM,kBACJpb,GADI,oBACeC,GADf,wBAEJ9D,GAAyBuB,kBAAmBxB,GAFxC,uBAGJgE,GAHI,sBAGoBC,KACtBC,EAAAA,GAAAA,GAAuB3qB,GAAKnkC,EAAAA,IAAgByqD,IAAgB,EAAMnrC,EAAAA,KAEtEyZ,EAAAA,EAAAA,KAAU,KACJ21B,IACF5uD,OAED,CAAC4uD,GAAmB5uD,KAEvB,MAAMuuD,GAAwBH,GAAmB,GAC1CvpB,GAAS2pB,KAAaznB,EAAAA,GAAAA,GAAQwnB,KACrCt1B,EAAAA,EAAAA,KAAU,KACJs1B,IAIJnxD,WAAWoxD,GA1GU,GA0GCJ,KACrB,CAACA,EAAiBI,GAAWD,KAChC,MAAM,qBAAE5qB,KAAyBC,EAAAA,GAAAA,GAAkBiB,QAAS9tC,EAAWw3D,IAAuB,IAG5F32D,GAAIoD,GADA,OACWtE,GADX,YACmB0rD,GADnB,SACgCl8C,IAClClM,EAEEywE,IAAU3+C,EAAAA,EAAAA,IAAe9xB,GACzBipD,IAAQC,EAAAA,EAAAA,IAAalpD,GACrB+3B,GAAkC,cAApBp0B,IAAmC3D,EAAQ+3B,YACzD24C,IAAWC,EAAAA,EAAAA,IAAe3wE,KAAasuE,EACvCsC,GAAYrvE,QAAQe,KAAmC,WAApBqB,GACnCglD,IAAckoB,EAAAA,EAAAA,IAAsB7wE,GACpC8wE,GAAmBrE,GAAgByC,EACnC6B,IAAe3Z,MAAAA,QAAA,EAAAA,GAAiBjlC,cAAc6+C,EAAAA,EAAAA,IAAkB5Z,GAAgBjlC,WAChF8+C,GACJ7oB,MACKvW,GAAkB9Z,MACnB81C,IACAzlB,GAAY8oB,sBACZvoB,GAEAvB,GAAU7lD,QAAQ26C,IAAUA,EAAO99C,SAAS6D,OAAS,EACrDkvE,GAA4Bn/C,IAAsBu+C,EAClDa,GAA2Bp/C,IAAsB27C,EACjD3c,QAA6Cj0D,IAAxB83D,GACrBwc,KACFrgB,IAAsBL,IAAkB+d,GACtC0C,IAEAE,GAAajgC,IAActZ,KAAgB84B,EAC3C0gB,GAAWhwE,QAAQmuE,IACnBtnB,KACEA,GAAYopB,eAAkB3/B,IAAmBoX,IAAU4kB,IAC5DzlB,GAAYqpB,eAGb/gB,IAAgBpsB,EAAAA,EAAAA,KAAY,CAACh6B,EAAkD1G,KACnFkC,GAAuB,CACrB9E,UAAAA,GACA4C,UAAAA,MACI0G,MAAAA,OAAA,EAAAA,EAAGg/B,WAAY,CAAEzjC,WAAW,MAC5BuhD,IAAW,CAAExhD,gBAAiBs2C,EAAO99C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,UAEnE,CAACkI,GAAwB9E,GAAWomD,GAASlL,IAE1Cw1B,GAAgBxD,EAAgB1tE,OAASzD,EAEzC40E,GAAavpB,KAAgBvW,GAAkBg8B,IAAkB6D,IAAiBvD,EAAeuD,GACjGE,GAAaxpB,GAAc+lB,EAAeuD,IAE1C,gBACJ7f,GADI,YAEJ5S,GAFI,kBAGJqT,GAHI,kBAIJG,GAJI,yBAKJC,GALI,gBAMJhiB,GANI,wBAOJqiB,GAPI,iBAQJvmB,GARI,SASJ+kB,GATI,uBAUJH,GAVI,8BAWJiC,IACE5C,GACFC,GACArmB,GACArpC,GACAomD,EACA7lD,QAAQovD,IACRpvD,QAAQqvD,GACRrvD,QAAQsvD,GACRC,GACAC,GACAr0D,GACAs0D,GACAC,GACAhI,GACAmoB,KAGI,kBACJS,GADI,kBAEJC,GAFI,kBAGJC,GAHI,iBAIJC,GAJI,iBAKJhO,GALI,gBAMJiO,GANI,sBAOJC,GAPI,gBAQJC,GARI,gBASJC,GATI,mBAUJtH,GAVI,eAWJuH,GAXI,mBAYJC,GAZI,cAaJC,GAbI,YAcJC,GAdI,qBAeJC,GAfI,6BAgBJC,ICxZW,SACbjzE,EACAixD,EACA1wD,EACAtD,EACAC,EACAq1B,EACAi/C,EACAl5C,EACA+1C,EACA5xB,EACAy1B,EACAC,EACAloD,GAEA,MAAM,SACJ/qB,EADI,iBACMsH,EADN,aACwBvD,EADxB,gBACsCiwE,EADtC,gBACuDC,EADvD,iBAEJC,EAFI,qBAEcjI,EAFd,aAEoCkI,EAFpC,gBAEkD5tE,EAFlD,uBAEmE6tE,IACrE51D,EAAAA,EAAAA,OAGFvf,GAAIoD,EADA,YACWonD,EADX,iBACwB32C,EADxB,cAC0Cm8D,EAD1C,oBACyDoF,EADzD,UAC8EpvE,GAChF5D,EAEE6xE,GAAoBvtC,EAAAA,EAAAA,KAAY,KAC/BqtC,GAILhzE,EAAS,CAAEf,GAAI+zE,EAAW/zE,OACzB,CAAC+zE,EAAYhzE,IAEVmzE,GAAoBxtC,EAAAA,EAAAA,KAAY,KAC/BstC,EAMDX,GAAAA,MAAe7oB,GAAAA,EAAa6qB,cAC9BvwE,EAAa,CAAEhG,OAAQk1E,EAAWh0E,GAAIoD,UAAWonD,EAAY6qB,gBAE7Dt0E,EAAS,CAAEf,GAAIg0E,EAAWh0E,KAR1BqI,EAAiB,CAAEjG,QAASP,EAAK,kBAUlC,CACDwxE,EAAavuE,EAAc0lD,EAAa3oD,EAAMd,EAAUizE,EAAY3rE,IAGhE8rE,GAAoBztC,EAAAA,EAAAA,KAAY,KAC/B5a,GAIL/qB,EAAS,CAAEf,GAAI8rB,EAAU9rB,OACxB,CAAC8rB,EAAW/qB,IAETqzE,GAAmB1tC,EAAAA,EAAAA,KAAY,KACnC5hC,EAAa,CACXhG,OAAQoxE,GAAwBF,EAAgBA,EAAgBlxE,EAChEC,SAAAA,EACAqE,UAAWyQ,EACX3N,eAAgBgqE,GAAwBF,OAAgB7wE,EAAYiE,MAErE,CAAC0B,EAAcorE,EAAsBF,EAAelxE,EAAQC,EAAU8U,EAAkBzQ,IAErFgjE,GAAmB1/B,EAAAA,EAAAA,KAAY,KACnCquC,EAAgB,CACdj2E,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,EAAW2B,OAAQo1B,EAAcm7C,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,WAExF,CAACx2E,EAAQC,EAAUqE,EAAW2xE,EAAiB56C,IAE5Ck6C,GAAkB3tC,EAAAA,EAAAA,KAAY,KAClCsuC,EAAgB,CAAEl2E,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAW4xE,IAEjBV,GAAwB5tC,EAAAA,EAAAA,KAAa6uC,IACzCR,EAAgB,CACdj2E,OAAAA,EACAC,SAAAA,EACAqE,UAAWmyE,EACXxwE,OAAQo1B,EAAcm7C,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,UAE1D,CAACx2E,EAAQC,EAAUg2E,EAAiB56C,IAEjCq6C,GAAkB9tC,EAAAA,EAAAA,KAAY,KAClCuuC,EAAiB,CAAErzE,WAAY,CAACwB,OAC/B,CAACA,EAAW6xE,IAET/H,GAAqBxmC,EAAAA,EAAAA,KAAY,KACrCsmC,EAAqB,CAAEluE,OAAAA,EAAQsE,UAAAA,MAC9B,CAAC4pE,EAAsBluE,EAAQsE,IAE5BqxE,GAAiB/tC,EAAAA,EAAAA,KAAanvB,IAClC29D,EAAa,CAAEp2E,OAAAA,EAAQsE,UAAAA,EAAWmU,QAAAA,MACjC,CAACzY,EAAQsE,EAAW8xE,IAEjBR,GAAqBhuC,EAAAA,EAAAA,KAAY,KACrCp/B,EAAgB,CAAEP,WAAYjI,EAAQkH,UAAAA,MACrC,CAACsB,EAAiBxI,EAAQkH,IAEvB2uE,GAAgBjuC,EAAAA,EAAAA,KAAY,KAChC,GAAI4X,GAASA,EAAM99C,SAAU,CAC3B,MAAMoB,EAAa08C,EAAM99C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAClDsH,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAAA,SAEtC0F,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAY,CAACwB,OAEpD,CAACk7C,EAAOh3C,EAAiBxI,EAAQsE,IAE9BwxE,GAAcluC,EAAAA,EAAAA,KAAY,KAC9B5hC,EAAa,CACXhG,OAAAA,EAAQC,SAAUkB,EAAAA,GAAgBmD,UAAAA,MAEnC,CAAC0B,EAAchG,EAAQsE,IAEpByxE,GAAuBnuC,EAAAA,EAAAA,KAAY,KACnCtS,EACFtvB,EAAa,CACXhG,OAAQ0rD,EAAazjD,WAAYf,UAAAA,EAAWC,cAAenH,IAK3DoxE,GAAwBF,EAC1BmF,EAAuB,CACrBr2E,OAAQkxE,EACRjxE,SAAUq2E,EACVhyE,UAAWonD,EAAaqpB,gBAG1B/uE,EAAa,CACXhG,OAAQ0rD,EAAazjD,WAAY3D,UAAWonD,EAAaqpB,kBAG5D,CACDz/C,EAAmB87C,EAAsBF,EAAelrE,EAAc0lD,EAAaxkD,EAAWlH,EAC9Fq2E,EAAwBC,IAGpBI,GAAsB9uC,EAAAA,EAAAA,KAAah6B,IACvCA,EAAEo6B,kBAEFgsB,EAAcpmD,EAAG1G,KAChB,CAAC8sD,EAAe9sD,IAEnB,MAAO,CACLiuE,kBAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAhO,iBAAAA,EACAiO,gBAAAA,EACAC,sBAAAA,EACAC,gBAAiBiB,EACjBhB,gBAAAA,EACAtH,mBAAAA,EACAuH,eAAAA,EACAC,mBAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,qBAAAA,EACAC,6BAA8BU,GDwP5BC,CACF5zE,GACAixD,GACA1wD,EACAtD,GACAC,GACAq1B,EACAi/C,GACAl5C,GACA81C,EACA3xB,EACAy1B,GACAC,GACAloD,GAGI4pD,IAAqBlvC,EAAAA,GAAAA,GACzB,4BACAisC,GAAkB,iBAClBxf,GAAe,eACfyf,GAAiB,gBACjBC,GAA0B,0BAC1B5C,GAAyB,yBACzBtZ,GAAgB,eAChBpL,IAAS,MACT1nD,QAAQvB,EAAQqzB,QAAU,YAC1BrzB,EAAQ03D,UAAY,aACpBgZ,IAAY,YACZ1f,IAAsB,gBACtBhB,IAAcE,GAAoB,UAClCwe,GAAgB,gBAChB1uE,EAAQ2R,YAAc,cACtBqgB,GAAqB,uBACrBo1B,IAAW,WACXpnD,EAAQs1B,kBAAoB,qBAC5BklC,IAAc,cACd7J,IAAkB,uBAClB0d,GAAe,gBACf9sE,QAAQvB,EAAQuoD,gBAAkB,qBAClCgJ,IAAY,YACZ5nB,GACApoC,QAAQk0D,KAAmB,wBAGvB,KACJv0D,GADI,MACE2gB,GADF,MACSoW,GADT,MACgB4jB,GADhB,MACuBC,GADvB,SAC8B5jB,GAD9B,QACwC3tB,GADxC,QACiDu0D,GADjD,KAC0D3oD,GAD1D,QACgE0tD,GADhE,QACyEv3C,GADzE,SACkFpG,GADlF,OAC4F3c,GAD5F,KACoG8/D,KACtGlxC,EAAAA,EAAAA,IAAkBn4B,IAEhB,UAAEy+B,IAAcl1B,IAAU,GAE1BgqE,GAAoBjxE,KAAe8uE,IAAgD,WAApBztE,KAAiCysE,EAChGoD,IAA2BttE,EAAAA,KAAiBu4B,KAAckyB,IAAkB59B,KAC5Eq+C,GAEAqC,GpChdD,SACLzzE,GAwBA,IAvBA,SACE0wE,EADF,YAEE/nB,EAFF,cAGE2nB,EAHF,YAIEW,EAJF,UAKEL,EALF,gBAME5C,EANF,YAOE0F,EAPF,gBAQEC,EARF,aASE5C,EATF,gBAUE6C,GAaF,uDADI,GAEJ,MAAM,KACJ1yE,EADI,MACE2gB,EADF,MACSoW,EADT,MACgB4jB,EADhB,MACuBC,EADvB,SAC8B5jB,EAD9B,KACwC/hB,EADxC,QAC8C0tD,EAD9C,QACuD/E,EADvD,SACgE54C,EADhE,QAC0EoG,IAC5E6L,EAAAA,EAAAA,IAAkBn4B,GAEhBgmE,EAAa,CAAC,mBACd6N,EAAUhyD,GAASoW,GAAS/R,EAC5B2iC,EAAU3nD,GAA2B,WAAnBglB,MAAAA,OAAA,EAAAA,EAAUpoB,OAAoB81E,EAChDE,EAAoBD,IAAYhrB,EAChCkrB,EAAWxyE,QAAQvB,EAAQkM,UAsFjC,OApFIw8C,GAAmBC,GACrBqd,EAAWtlE,KAAM,yBAAwBioD,KAChCE,GACTmd,EAAWtlE,KAAK,QAGdizE,GACF3N,EAAWtlE,KAAK,qBAGdioD,IACFqd,EAAWtlE,KAAK,gBACZu3B,MAAAA,GAAAA,EAAO+7C,SACThO,EAAWtlE,KAAK,SAGdgzE,GACF1N,EAAWtlE,KAAK,iBAGhBmzE,EACF7N,EAAWtlE,KAAK,SACPm7C,EACTmqB,EAAWtlE,KAAK,SACPo7C,EACTkqB,EAAWtlE,KAAK,SACPw3B,EACT8tC,EAAWtlE,KAAK,YACPo+D,EACTkH,EAAWtlE,KAAK,WACPyV,EACT6vD,EAAWtlE,KAAK,QACPmjE,IACTmC,EAAWtlE,KAAK,aAEZmjE,EAAQhiD,OAASgiD,EAAQ5rC,QAC3B+tC,EAAWtlE,KAAK,UAIhB4rB,GACF05C,EAAWtlE,KAAK,WAGduwE,GACFjL,EAAWtlE,KAAK,gBAGdgwE,GACF1K,EAAWtlE,KAAK,YAGdkwE,GACF5K,EAAWtlE,KAAK,eAGdqwE,GACF/K,EAAWtlE,KAAK,iBAGdqzE,GACF/N,EAAWtlE,KAAK,cAGdstE,GACFhI,EAAWtlE,KAAK,qBAGbioD,IACHqd,EAAWtlE,KAAK,cAEZmzE,GAAWH,GACb1N,EAAWtlE,KAAK,mBAGdgwE,GAAYO,IAAgB6C,GAAqBC,GAAY/F,IAC/DhI,EAAWtlE,KAAK,wBAGd4vE,IAAkBzuD,GAAUqE,IAAa2iC,IAAairB,IACxD9N,EAAWtlE,KAAK,iBAIbslE,EAAWllE,KAAK,KoCwVEmzE,CAAsBj0E,EAAS,CACtD0wE,SAAAA,GACA/nB,YAAAA,GACA2nB,cAAAA,EACAW,YAAAA,GACAL,UAAAA,GACA5C,gBAAAA,EACA0F,YAAapxE,KAAcA,MAAAA,QAAA,EAAAA,GAAY02B,eAAgB,EACvD26C,gBAAiBrC,IAAcC,GAC/BR,aAAAA,GACA6C,gBAAoC,aAAnB1tD,MAAAA,QAAA,EAAAA,GAAUpoB,SAAuB8oE,EAAAA,EAAAA,IAAiB5mE,GAAS6G,EAAAA,EAAAA,GAAcC,MAGtFotE,GAAeT,GAAiBjvE,SAAS,gBACzC2vE,IAAYC,EAAAA,GAAAA,GAAkBp0E,EAAS2uE,EAAWjmB,GAAmBC,KAE3E,IAAI0rB,GAWAC,GATFD,GADE51C,IAEO2yC,GADM,QAGN+C,IAAcrD,IAAqBjN,GAG7B,aAFA,UAMbsM,EACFmE,GAAoB,UACXvD,GACLpoB,KAAiB9mC,IAASoW,IAAS64C,MAAsBqD,GAC3DG,GAAoB,UACXrD,IACToD,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,QAGtBjwB,EAAAA,GAAAA,GACEwpB,GAAiB7tE,EAAQ4tE,cAAgB5tE,EAAQ4tE,cAAgBlxE,GACjEg0E,GAAW1wE,EAAQyR,sBAAmB1U,EACtCwU,EACAvR,EAAQpC,IAEVmyD,GAAgB1lB,GAAK3tC,GAAQszD,EAAWC,EAAgBC,EAAkBnsD,GAE1E,IACIwwE,GADA9jC,GAAQ,GAER+jC,IAAiB,EACrB,MAAM7J,IAAcnnC,EAAAA,EAAAA,KAAQ,IACnB4jB,GAAU0D,GAAqB7B,GAAO1nD,QAAQ0vE,IAAc1vE,QAAQynD,GAAY9M,QAAUn/C,GAChG,CAACqqD,GAAS6B,GAAOgoB,GAAajoB,EAAW9M,IAEtCu4B,GAAexD,GAAc,GAAK,EACxC,GAAK7pB,KAAYvlC,KAASoW,GAkBf0yC,KACT4J,GAAkBltE,KAAKC,IAAIshD,GAAiBrnD,QAAQL,IAAOqyE,IAAoB5I,GAAYpb,eAAel/B,OACtGkkD,GAAkB5J,GAAYpb,eAAel/B,MAhVlB,KAiV7BmkD,IAAiB,QArBa,CAChC,IAAInkD,EACAxO,GACFwO,EAAQ04B,GAAyB/oD,EAASgpD,GAAW34B,MAC5C4H,KAEP5H,EADE4H,GAAM+7C,QACAtI,GAAAA,GAEA3iB,GAAyB/oD,EAASgpD,GAAW34B,OAIrDA,IACFkkD,GAAkBltE,KAAKC,IAAIshD,GAAiBrnD,QAAQL,IAAOqyE,IAAoBljD,GAC3EkkD,GAAkBlkD,EA1UO,KA2U3BmkD,IAAiB,IAUnBD,KACF9jC,GAAS,UAAS8jC,GAAkBE,QAGtC,MAAMxd,GAAa5lB,GAAarxC,EAAQ00E,aAAiBzD,KAAe7oB,MAAAA,QAAhB,EAAgBA,GAAassB,kBAAe33E,EAC9F43E,IAAsBnxC,EAAAA,EAAAA,KAAQ,IAC3ByzB,GAAYxH,GAAqBwH,SAAal6D,GACpD,CAACk6D,KAoBJ,SAAS2d,KACP,MAAMC,EACJ,mBAAC,GAAD,CACE70E,QAASA,EACTo3D,gBAAiBA,GACjBJ,eAAgBA,EAChBC,UAAWA,GACXC,cAAqC,YAAtBod,GACfnd,mBAA0C,WAAtBmd,GACpBvjD,mBAAoBA,GACpB0kC,eAAgBA,GAChBl0B,QAAS4wC,KAIb,MAA0B,WAAtBmC,GACKO,EAIP,mBAAC,GAAD,CACEpf,eAAgBA,GAChBz1D,QAASo3D,GACToV,aAAcqI,EACd9jD,mBAAoBA,KA+Q1B,OACE,0BACEsZ,IAAKA,GACLzsC,IAAIq3D,EAAAA,EAAAA,IAAiBj1D,EAAQpC,IAC7BoiC,UAAWszC,GACX7iC,MAAOkkC,GAAuB,6BAA4BA,YAA0B53E,EACpF,kBAAiBiE,GACjBswC,YAAaugB,GACbtwB,QAAS0d,GACT6R,cAAewB,GACf9gB,cAAeihB,GACftlB,aAAcikC,GAA2B/d,QAAgCt2D,EACzE+3E,YAAatB,GAA0B9iC,QAAkB3zC,EACzDqwC,aAAeomC,IAA2BpC,GAA4B5kC,QAAmBzvC,GAEzF,0BACEstC,IAAKmmC,GACLxwC,UAAU,gBACV,kBAAiBh/B,GACjB,uBAAsBk7C,EAAQA,EAAM99C,SAAS89C,EAAM99C,SAAS6D,OAAS,GAAGrE,QAAKb,EAC7E,0BAAyBiD,EAAQs1B,oBAEjCtD,GACA,0BAAKgO,UAAU,0BACZw6B,IAAc,wBAAGx6B,UAAU,iBAG/B2tC,GACC,0BACE3tC,WAAWoE,EAAAA,GAAAA,GAAe,sCAAuCorC,IAAmB,eACpFjuC,QAASmxC,IAERlD,IACC,wBAAGxvC,UAAU,iBAIlB0tC,GA9VL,WACE,MAAMqH,EAAmBpD,KAAc1sD,EAAAA,EAAAA,IAAS0sD,GAAW/zE,IACrD0pE,EAAcqK,IAAcoD,EAAoBpD,QAAwB50E,EACxEwqE,EAAcoK,KAAeoD,EAAoBpD,QAAwB50E,EACzEi4E,GAAerD,IAAcvpB,GAAeA,GAAYE,oBAAiBvrD,EAE/E,OACE,mBAAC6jD,GAAA,EAAD,CACE5e,KAAK,QACLxsB,KAAM8xD,EACNnlE,KAAMolE,EACNrmE,KAAM8zE,EACNrzD,aAAcA,EACd4f,QAAU+lC,GAAcC,EAAcsK,QAAoB90E,IAiV7Ck4E,GACf,0BACEj1C,WAAWoE,EAAAA,GAAAA,GAAe,0BAA2BqvC,GAAiBjvE,SAAS,SAAW,oBAE1F,0BACE6lC,IAAK4mB,GACLjxB,UAAWyzC,GACXhjC,MAAOA,GACPhP,IAAI,QAEHwvC,KAAgBE,IACf,0BAAKnxC,UAAU,iBAAiBvgC,GAAK,qBA1T/C,WACE,MAAMugC,GAAYoE,EAAAA,GAAAA,GAChB,gBACA6sC,IAAe,oBACfP,IAAY,gBACZ8D,IAAkB,oBAEd9J,EAAoB4F,IAAkB6D,KAAclD,KAAgBL,GACpEsE,GAAmB9wC,EAAAA,GAAAA,GACvB,eACiB,YAAjBiwC,IAA8B,YAC9Brd,GAAkB,sBAGpB,OACE,0BAAKh3B,UAAWA,EAAWwR,cAAekhB,GAA0BjxB,IAAI,QAoM5E,WAME,GAJuBknB,KAAgBz8C,MACpCuhE,KAFW5rD,IAASoW,IAAS/R,KAEA+qD,IAAe/kE,IAAY8hE,IACrDmD,IAA+BT,IAAY/nB,GAG/C,OAGF,IAAI4M,EACA4f,EAWJ,OAVIvD,IAAgBjpB,IAAez8C,GAMxBk8C,MAAAA,IAAAA,GAAaE,iBACtBiN,EAAcnN,GAAYE,iBAN1BiN,GAAc50D,EAAAA,EAAAA,IAAelB,GAAMmyE,IAE9BX,KACHkE,EAAe,UAAQC,EAAAA,EAAAA,IAAgBxD,QAOzC,0BAAK5xC,UAAU,gBAAgByB,IAAI,OAChC8zB,EACC,2BACEv1B,WAAWoE,EAAAA,GAAAA,GAAe,cAAe+wC,GACzC5zC,QAASuwC,GACTrwC,IAAI,SAEH8d,EAAAA,GAAAA,GAAWgW,IAEX7rC,OAED3sB,EAxoBC,IAyoBJ2sB,GACC,sCACE,2BAAMsW,UAAU,OAAOvgC,GAAK,WAC5B,2BACEugC,UAAU,cACVuB,QAASwwC,KAERxyB,EAAAA,GAAAA,GAAY,IAAG71B,EAAUpM,cAI/B8qC,MAAAA,IAAAA,GAAa8oB,oBACZ,2BAAMlxC,UAAU,cAAcyB,IAAI,QAAQhiC,GAAK,mBAC7CO,EAAQ00E,aAAerjC,EACzB,2BAAMrR,UAAU,cAAcyB,IAAI,QAAQzhC,EAAQ00E,iBAChD33E,GArPHs4E,GACA3E,IACC,mBAAC,GAAD,CACE1wE,QAASuR,EACTs/C,YAAaA,EACbrwD,OAAQ+tE,EACRra,oBAAqB+b,EACrB1uC,QAASywC,KAGZznE,IACC,mBAAC,GAAD,CACEvK,QAASA,EACTk0D,oBAAqB+b,EACrBlY,8BAA+BmY,EAC/BlY,WAAY6X,GACZluD,aAAcA,IAGjButD,GACC,mBAACoG,GAAA,EAAD,CACEtzC,KAAK,QACLinB,MAAOA,GACP1+C,QAAS2kE,EACTqG,OAAQnG,GACR1C,QAAS4C,GACTpb,oBAAqB+b,EACrBtuD,aAAcA,EACd6zD,iBAAkB/E,GAClBzvE,UAAWA,GACXtE,OAAQA,GACR60B,wBAAyBA,KAG5Bk7C,GACC,mBAAC,GAAD,CACEzqC,KAAK,QACLinB,MAAOA,GACPwjB,aAAcA,EACdx7C,YAAaA,EACby7C,QAAS4C,GACTpb,oBAAqB+b,EACrBtuD,aAAcA,EACd6zD,iBAAkB/E,GAClBzvE,UAAWA,GACXtE,OAAQA,GACR60B,wBAAyBA,KAG5B61B,IACC,mBAAC,GAAD,CACElL,MAAOA,EACPyuB,YAAaA,GACbzW,oBAAqB+b,EACrBhnB,MAAOA,GACP4H,YAAaA,EACb6Z,kBAAmBA,EACnB/oD,aAAcA,EACdgiD,aAAcuO,KAGjBzzC,IACC,mBAAC,GAAD,CACEz+B,QAASA,EACTy+B,UAAWA,GACX/hC,OAAQA,MAGV0qD,IAAWvlC,IACX,mBAAC,GAAD,CACE7hB,QAASA,EACTk0D,oBAAqB+b,EACrBjnB,UAAWA,EACX4R,YAAawO,GACbvO,eAAgBA,EAChBE,qBAAsB2P,EACtBnpC,QAASyiC,GACT9I,eAAgB4P,GAChB9P,cAAeA,GACfnK,YAAaA,EACbtoC,MAAOA,KAGT6+B,IAAWnvB,IAASA,GAAM+7C,SAC1B,mBAAC,GAAD,CACEh0E,QAASA,EACTk0D,oBAAqB+b,EACrBrV,YAAawO,GACbznD,aAAcA,EACdq5C,cAAeA,MAGjB5T,IAAWnvB,KAAUA,GAAM+7C,SAC3B,mBAAC,GAAD,CACEh0E,QAASA,EACTk0D,oBAAqB+b,EACrBjnB,UAAWA,EACX4R,YAAawO,GACb5L,YAAamS,GACb9U,eAAgBA,EAChBl5C,aAAcA,EACd4f,QAASyiC,GACT9I,eAAgB4P,GAChB9P,cAAeA,GACfnK,YAAaA,KAGfhV,IAASC,KACT,mBAAC25B,GAAA,EAAD,CACEltD,MAAOA,EACPvoB,QAASA,EACT2C,OAAQ+yE,EAAAA,GAAAA,OACR7a,eAAgBA,EAChBl5C,aAAcA,EACdg0D,aAAc3jD,EACdwoC,WAAYA,GACZob,OAAQ3D,GACR4D,aAAa/5B,IAAWmN,KAASpX,OAAoC90C,EAAlBq1E,GACnDlX,eAAgB4P,GAChB9P,cAAeA,KAGlB9iC,IACC,mBAAC49C,GAAA,EAAD,CACE91E,QAASA,EACTk0D,oBAAqB+b,EACrBrV,YAAawO,GACbwG,sBAAuBA,GACvB/U,eAAgBA,EAChB8a,aAAc3jD,EACdwoC,WAAYA,GACZmJ,aAAcK,GACd9I,eAAgB4P,GAChB9P,cAAeA,KAGlB8D,IACC,mBAAC,GAAD,CAASA,QAASA,KAEnB3oD,IACC,mBAAC,GAAD,CAAMnW,QAASA,EAASmW,KAAMA,GAAMiqD,WAAYiS,KAEjDhJ,IACC,mBAAC,GAAD,CACErpE,QAASA,EACTopE,iBAAkBA,GAClBznD,aAAcA,KAGhBmvD,IAAoBqD,IACpB,wBAAGn0C,UAAWk1C,EAAkBzzC,IAAI,QACjC0yC,GACiB,YAAjBE,IAA8BO,MAIlC/Q,IACC,mBAAC,GAAD,CACE7jE,QAASA,EACTk0D,oBAAqB+b,EACrBjnB,UAAWA,EACX4R,YAAawO,GACb5L,YAAamS,GACbhuD,aAAcA,EACdgiD,aAAcK,GACdJ,sBAAuBkH,GACvB9P,cAAeA,GACfnK,YAAaA,EACbtoC,MAAOA,IAGV+D,IACC,mBAAC,GAAD,CACEtsB,QAASA,EACT+6D,qBAAsB2P,EACtB/Z,eAAgBA,GAChB6J,WAAYA,GACZjyC,MAAOA,IAGVrC,IACC,mBAAC,GAAD,CACElmB,QAASA,EACT2hB,aAAcA,EACdgvC,eAAgBA,GAChB6J,WAAYA,GACZjyC,MAAOA,EACPjU,KAAM9T,EACNsG,iBAAkBA,KAgHnBivE,IACC3E,IAA6C,eAAjBiD,IAAiCO,KAC9DvD,IAAuBC,GACtB,mBAACvvC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACNh0B,OAAK,EACLo0B,KAAK,OACLmC,UAAW1kC,GAAK,2BAChB8hC,QAASosC,EAAwB2E,GAAqBC,IAEtD,wBAAGvyC,UAAU,uBAEbqxC,IAAuBE,GACzB,mBAACxvC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACNh0B,OAAK,EACLo0B,KAAK,OACLmC,UAAU,gBACV5C,QAASmuC,GAAe8C,GAAcC,IAEtC,wBAAGzyC,UAAU,2BAEbjjC,EACHw2E,IAAqB,mBAAC,GAAD,CAAejxE,WAAYA,GAAauyC,SAAUu7B,IACvE8D,IACC,0BAAKl0C,UAAU,eAAeqoC,wBAAyBpf,GAAQskB,GAAeC,KAE/EgG,IACC,0BACExzC,WAAWoE,EAAAA,GAAAA,GAAe,iBAAkBgtB,KAA2BqE,IAAkB,WACzFl0B,QAASwxB,IAET,mBAAC0D,GAAA,EAAD,CAAqB7kC,SAAUmB,OAIpC/yB,EAAQuoD,eACP,mBAAC,GAAD,CAAevoD,QAASA,EAASuhC,QAASwW,KAErB,YAAtBu8B,IACC,mBAAC,GAAD,CACEt0E,QAASo3D,GACTmV,WAAS,EACT9W,eAAgBA,GAChB1kC,mBAAoBA,MAIzB8jC,IACC,mBAAC,GAAD,CACExuD,OAAQuuD,GACR9f,OAAQ+f,GACR70D,QAASA,EACTk8C,MAAOA,EACP6xB,aAAcA,EACdpqE,gBAAiBA,GACjBgoC,QAASmpB,GACT5f,oBAAqB6f,UEr2B/B,IAAer1B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAoC,IAA3B,OAAEC,GAAyB,EAClC,MAAMsD,GAAU+W,EAAAA,EAAAA,IAAuBta,EAAQC,IACvCA,OAAQiI,EAAV,MAAsBqxE,GAAUh2E,GAAW,GAEjD,MAAO,CACLA,QAAAA,EACAoM,IAAKzH,GAAcqxE,GAAQr/D,EAAAA,EAAAA,IAAWla,EAAQkI,QAAc5H,EAC5Dk5E,SAAUD,GAASrxE,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,KARnDklC,EAtFgC,IAM9C,IAN+C,OACnDvlC,EADmD,QAEnDsD,EAFmD,aAGnDk2C,EAHmD,IAInD9pC,EAJmD,QAKnD6pE,GACI,EACJ,MAAM,qBACJC,EADI,SAEJv3E,EAFI,iBAGJw3E,EAHI,SAIJC,EAJI,aAKJ1zE,IACEya,EAAAA,EAAAA,MACE1d,GAAO+hC,EAAAA,GAAAA,KAEPyvB,GAAa/oB,EAAAA,EAAAA,IAAuB,MACpCmuC,EAAgB90E,QAAQvB,IAE5Bs2E,QAASpiB,IACPqiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACTugC,WAxB6B,IAyB7BC,UAAW,KAGbz3C,EAAAA,EAAAA,KAAU,IACDo3C,EAAgBniB,EAAoBjD,EAAWvyC,SAAWyzC,IAC3DA,EAAOgD,gBACT+gB,EAAqB,CAAEx5E,OAAAA,YAEtBK,GACJ,CAACL,EAAQ25E,EAAeniB,EAAqBgiB,IAEhD,MAAMj3B,GAAc3a,EAAAA,EAAAA,KAAY,KACzBtkC,IACDA,EAAQ22E,eACVR,EAAiB,CAAE1rE,KAAMzK,EAAQ22E,iBACxB32E,EAAQizE,cACjBvwE,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQizE,iBAE1Dt0E,EAAS,CAAEf,GAAIoC,EAAQtD,SAEnBsD,EAAQiqB,YACVmsD,EAAS,CACPnqE,MAAOjM,EAAQtD,OACfstB,MAAOhqB,EAAQiqB,iBAIpB,CAACvnB,EAAc1C,EAASrB,EAAUw3E,EAAkBC,IAEvD,GAAKp2E,EAIL,OACE,0BAAKggC,UAAU,gCAAgC7C,IAAI,qBACjD,0BAAK6C,UAAU,kDAAkDyB,IAAI,QACnE,0BAAKzB,UAAU,gBAAgByB,IAAI,QACjC,0BAAKzB,UAAU,gBAAgByB,IAAI,OAChCr1B,IAAOmzC,EAAAA,GAAAA,IAAWkD,EAAAA,EAAAA,IAAgBr2C,IAAQ,IAC1C6pE,IAAW12B,EAAAA,GAAAA,GAAWv/C,EAAQ42E,kBAAmBz6B,EAAAA,EAAAA,GAAa18C,EAAMw2E,EAAS7pE,IAAQ,KAGxF,wBAAG4zB,UAAU,yBAAyByB,IAAI,OAAO4I,IAAK4mB,GACpD,2BAAMjxB,UAAU,qBAAqByB,IAAI,SACtCshC,EAAAA,GAAAA,GAAuB/iE,EAAQkB,KAAKA,KAAMlB,EAAQkB,KAAKsR,WAG1D,2BAAMwtB,UAAU,cAAcyB,IAAI,OAChC,2BAAMzB,UAAU,qBAAqBvgC,EAAK,uBAI9C,mBAACsiC,GAAA,EAAD,CAAQH,MAAM,YAAYI,KAAK,OAAOkC,QAAM,EAAC3C,QAAS0d,EAAajf,UAAU,4BAC1EvgC,EAAKO,EAAQg2E,MACV,uBACCh2E,EAAQizE,cAAgB,wBAA0B,oCC4JnE,IAAevzC,EAAAA,EAAAA,KAvN0B,IAwBnC,IAxBoC,OACxChjC,EADwC,WAExC8C,EAFwC,cAGxCq3E,EAHwC,iBAIxCC,EAJwC,SAKxCnvE,EALwC,UAMxCovE,EANwC,mBAOxC5G,EAPwC,UAQxCnnB,EARwC,aASxC9S,EATwC,YAUxC8gC,EAVwC,6BAWxCC,EAXwC,qBAYxCC,EAZwC,SAaxCv6E,EAbwC,KAcxCmB,EAdwC,QAexC4lD,EAfwC,eAgBxCyzB,EAhBwC,uBAiBxCC,EAjBwC,mBAkBxChJ,EAlBwC,cAmBxCiJ,EAnBwC,WAoBxCC,EApBwC,sBAqBxC/iB,EArBwC,YAsBxCgjB,EAtBwC,cAuBxCC,GACI,EACJ,MAAM,oBAAEC,IAAwBt6D,EAAAA,EAAAA,OAE1B,4BACJ8yD,EADI,8BAEJyH,EAFI,uCAGJxH,GxCpEW,SACbpyE,EACAo4C,EACAghC,GAEA,MAAM,oBAAEr8C,EAAF,iBAAuBg4C,IAAqB11D,EAAAA,EAAAA,OAGhDm5D,QAASrG,IACPsG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACTyhC,WAAYnvB,GACZovB,OAAQnvB,MAIR6tB,QAASoB,EAA+BG,OAAQC,EAAkBC,SAAUC,IAC1EzB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACTyhC,WArBsC,MAsBpC1S,IACF,GAAa,WAATnnE,EACF,OAGF,IAAIsJ,EAAQ,EACZ,MAAM6wE,EAAuB,GAE7BhT,EAAQ3/D,SAAS4yE,IACf,MAAM,eAAE/iB,EAAF,OAAkBhD,GAAW+lB,EAEnC,IAAK/iB,EACH,OAGF,MAAM,QAAEgjB,GAAYhmB,EAEdnxD,EAAYkB,OAAOi2E,EAAQ31E,eAAiB21E,EAAQn3E,WACtDA,EAAYoG,IACdA,EAAQpG,GAGNm3E,EAAQ7iD,kBACV2iD,EAAWv3E,KAAKM,MAIhBk2E,EAAqBx4D,SAAWtX,GAAS8vE,EAAqBx4D,SAChEmc,EAAoB,CAAEzzB,MAAAA,IAGpB6wE,EAAWh2E,QACb4wE,EAAiB,CAAErzE,WAAYy4E,QAInC3a,EAAAA,GAAAA,GAAkBwa,EAAkBE,GAEpC,MAAQ1B,QAASpG,IAA2CqG,EAAAA,GAAAA,IAAwB,CAClFC,QAAStgC,EACTyhC,WAAYnvB,KAGd,MAAO,CACLynB,4BAAAA,EACAyH,8BAAAA,EACAxH,uCAAAA,GwCGEkI,CAAoBt6E,EAAMo4C,EAAcghC,IAEtC,oBACJmB,EADI,mBAEJC,EAFI,cAGJC,GCtEW,SACbz6E,EACAo4C,EACA12C,EACAs3E,EACAnvE,EACA4vE,EACAC,EACA9zB,EACAyzB,EACAC,GAEA,MAAM,qBAAE1yE,IAAyByY,EAAAA,EAAAA,OAE1Bq7D,EAAmBC,IAAoBj1C,EAAAA,EAAAA,KAC5C,IAAgB,WAAT1lC,EAAoB,EACzBuP,EAAAA,EAAAA,KAAS,IAAM3I,EAAqB,CAAED,UAAWkJ,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FN,EAAAA,EAAAA,KAAS,IAAM3I,EAAqB,CAAED,UAAWkJ,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACjJ,EAAsBlF,IAInB64E,GAAsBnwC,EAAAA,EAAAA,IAAuB,MAE7CowC,GAAqBpwC,EAAAA,EAAAA,IAAuB,MAE5CqwC,GAAgBrwC,EAAAA,EAAAA,IAAuB,MAE7C,SAASwwC,IACP,IAAKh1B,EAAS,OAEd,IAAKlkD,IAAeA,EAAWyC,OAG7B,OAFAs1E,GAAY,QACZC,GAAc,GAIhB,IAAKV,EAGH,OAFAS,GAAY,QACZC,GAAc,GAIhB,IAAKthC,EAAax3B,QAChB,OAGF,MAAM,aAAEi6D,EAAF,aAAgBC,EAAhB,UAA8BC,GAAc3iC,EAAax3B,QACzDo6D,EAAezxE,KAAKuG,MAAMgrE,EAAeC,EAAYF,GAErDI,EAAaD,GAvDC,EAyDpBvB,EAAY5vE,GAAYoxE,IAHHD,GAvDH,KA2DlBtB,GAAeuB,GAGjB,MACEzC,QAASpiB,IACPqiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACT0hC,OAAQoB,EAAAA,KACN/T,IACF,IAAKwT,IAAqBD,EACxB,OAKF,GAD4Bh5E,EAAW,IAAMy5E,EAAAA,GAE3C,OAGF,MAAMC,EAAejU,EAAQ1/D,MAAK,QAAC,eAAE4vD,GAAH,SAAwBA,KAC1D,IAAK+jB,EACH,OAGF,MAAM,OAAE/mB,GAAW+mB,EAEM,sBAArB/mB,EAAOnyB,WAEPm5C,EAAAA,IAA0BhC,EAAez4D,SAAWlf,EAAWyC,QAAU4L,EAAAA,KAEzEupE,EAAuB14D,SAAU,GAGnC85D,KAC8B,qBAArBrmB,EAAOnyB,WAChBy4C,QAIJnkB,EAAAA,GAAAA,IAAe+jB,EAAqBnkB,IACpCI,EAAAA,GAAAA,IAAegkB,EAAoBpkB,GAEnC,MACEoiB,QAAS8C,EACTvB,OAAQwB,EACRtB,SAAUuB,IACR/C,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACT0hC,OAAQ2B,KACPb,IAEHpkB,EAAAA,GAAAA,IAAeikB,EAAea,GAE9B,MACE9C,QAASkD,EACT3B,OAAQ4B,EACR1B,SAAU2B,IACRnD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACT0hC,OArHoB,GAsHnBc,GAqBH,OAnBApkB,EAAAA,GAAAA,IAAeikB,EAAeiB,IAE9BG,EAAAA,GAAAA,IAAY,KACNj2B,GACFg1B,MAED,CAACh1B,KAGJi2B,EAAAA,GAAAA,IAAY,KACVN,IACAI,IAEAr2E,YAAW,KACTs2E,IACAJ,MAtIuB,OAwIxB,CAAC95E,IAEG,CAAE64E,oBAAAA,EAAqBC,mBAAAA,EAAoBC,cAAAA,GDjE9CqB,CACF97E,EACAo4C,EACA12C,EACAs3E,EACAnvE,EACA4vE,EACAC,EACA9zB,EACAyzB,EACAC,GAGI33E,GAAO+hC,EAAAA,GAAAA,KAEPq4C,EACJ,0BAAK75C,WAAWoE,EAAAA,GAAAA,GAvDS,iBAuD4B,wBAAyBjH,IAAI,mBAChF,+BAAO19B,EAAK,oBAIVq6E,EAAwBvlB,EAAwB,EAAIsiB,EAAcv2E,QAAO,CAACC,EAAKw5E,IAC5Ex5E,GAAMy5E,EAAAA,EAAAA,IAAQD,EAAalyB,cAAc5lD,QAC/C,GACH,IAAIg4E,EAAkB,EAEtB,MAAMnyB,EAAa+uB,EAAc/2E,KAAI,CACnCo6E,EACAC,EACAC,KAEA,MAAMvyB,EAAeqyB,EAAUryB,aAAa/nD,KAAI,CAC9Cu6E,EACAC,EACAC,KACG,MACH,GACyB,IAAvBF,EAAYp4E,SACRmlD,GAAQizB,EAAY,MACrBlyB,EAAAA,EAAAA,IAAgBkyB,EAAY,MAC5B,UAACA,EAAY,GAAGtzE,QAAQwC,cAAxB,QAAC,EAA+Bk1B,WACnC,CACA,MAAMz+B,EAAUq6E,EAAY,GACtBhmB,EACJimB,IAAqBC,EAAkBt4E,OAAS,GAC7Ck4E,IAAmBC,EAAgBn4E,OAAS,EAGjD,OAAOu4E,EAAAA,EAAAA,IAAQ,CACbx6E,EAAQpC,KAAOq5E,EAA6Bv4D,SAAWm7D,EACvD,mBAAC,GAAD,CACE18C,IAAKn9B,EAAQpC,GACboC,QAASA,EACTk0D,oBAAqBwjB,EACrBtjB,gBAAiB0lB,IAA0BG,EAC3C5lB,aAAcA,MAKpB,IAAIomB,EAEJ,OAAOT,EAAAA,EAAAA,IAAQK,EAAYv6E,KAAI,CAC7BunD,EACAqzB,KAEA,MAAM16E,EAAUonD,GAAQC,GAAkBA,EAAeU,YAAcV,EACjEnL,EAAQkL,GAAQC,GAAkBA,OAAiBtqD,EACnDksD,GAAQC,EAAAA,EAAAA,IAAalpD,GACrB26E,EAAiBvzB,GAAQC,GACzBY,EAAcoyB,EAAYK,EAAe,GAE3C16E,EAAQyH,iBAAmBuvE,EAAYt4D,WAAYu2C,EAAAA,EAAAA,IAAiBj1D,EAAQyH,mBAC9EuvE,EAAYt4D,SAAUu2C,EAAAA,EAAAA,IAAiBj1D,EAAQpC,KAGjD,MAAMg9E,GAAmBD,GAAkB36E,EAAQ4D,UAAY5D,EAAQ4D,eAAY7G,EAC7E89E,EAAsB5yB,IAAgBb,GAAQa,GAAeA,EAAYrkD,eAAY7G,EAErFiC,EAAW,CACfqxE,eAAiC,IAAjBqK,EAChBpK,cAAeoK,IAAiBL,EAAYp4E,OAAS,EACrDsuE,uBAAwBhvE,QAAQq5E,GAAmBA,IAAoBH,GACvE9M,sBAAuBpsE,QAAQq5E,GAAmBA,IAAoBC,GACtExmB,aACEqmB,IAAiBL,EAAYp4E,OAAS,GACnCq4E,IAAqBC,EAAkBt4E,OAAS,GAChDk4E,IAAmBC,EAAgBn4E,OAAS,GAInDw4E,EAAyBG,EAEzB,MAAME,GAAaC,EAAAA,EAAAA,IAAqB/6E,GAIlCm9B,EAAe,cAATr/B,EAAuBg9E,EAAc,GAAE96E,EAAQ4G,QAAQk0E,IAEnE,OAAON,EAAAA,EAAAA,IAAQ,CACbx6E,EAAQpC,KAAOq5E,EAA6Bv4D,SAAWm7D,EACvD,mBAAC,GAAD,CACE18C,IAAKA,EACLn9B,QAASA,EACTgwE,6BAA8B0H,EAC9BzH,4BAA6BA,EAC7BC,uCAAwCA,EACxCh0B,MAAOA,EACP8M,UAAWA,EACX0kB,WAAY1uE,EAASsxE,eAAiByG,IAAc9tB,KAAWjpD,EAAQpC,KAAOwwE,GAC9EX,eAAgBzuE,EAASqxE,gBAAkB0G,IAAc9tB,EACzDknB,mBAAoBA,EACpBxzE,SAAUA,EACVgH,gBAAiB7F,EACjBsyE,YAA8B,IAAlBiH,EACZjjB,gBAAiB0lB,IAA0BG,EAC3C5J,eAAgBrxE,EAASqxE,eACzBC,cAAetxE,EAASsxE,cACxBC,uBAAwBvxE,EAASuxE,uBACjC5C,sBAAuB3uE,EAAS2uE,sBAChCtZ,aAAcr1D,EAASq1D,eAEzBr0D,EAAQpC,KAAOwwE,GACb,0BAAKpuC,UAAU,uBAAuB7C,IAAI,sBACxC,+BAAO19B,EAAK,gCAOtB,OACE,0BACEugC,UAAU,qBACV7C,IAAK+8C,EAAUvyB,SACfrW,YAAawgB,GAAAA,EACbkpB,eAAa,GAEb,0BACEh7C,WAAWoE,EAAAA,GAAAA,GAAe,eAAgBkzC,GAAc,eACxDn6C,IAAI,cACJmU,YAAawgB,GAAAA,EACbvwB,QAAU+1C,OAA6Ev6E,EAAhE,IAAM06E,EAAoB,CAAE3rE,WAAYouE,EAAUvyB,YAEzE,2BAAMlmB,IAAI,QACP61C,GAAc4C,EAAUxyB,eAAiBuzB,EAAAA,IACxCx7E,EAAK,+BAEN63E,GAAc4C,EAAUxyB,eAAiBuzB,EAAAA,IACxCx7E,EAAK,sBAAsBy7E,EAAAA,EAAAA,IAAgBz7E,EAAMy6E,EAAUvyB,cAAU5qD,GAAW,KAEhFu6E,IAAc4D,EAAAA,EAAAA,IAAgBz7E,EAAMy6E,EAAUvyB,aAGnDqyB,EAAAA,EAAAA,IAAQnyB,OAKf,OACE,0BAAK7nB,UAAU,qBAAqBg7C,eAAa,GAC/C,0BAAK3wC,IAAKguC,EAAqBl7C,IAAI,oBAAoB6C,UAAU,uBAChEg6C,EAAAA,EAAAA,IAAQlyB,GACRgvB,GAAoB,mBAAC,GAAD,CAAkB35C,IAAKzgC,EAAQA,OAAQA,EAAQw5C,aAAcA,IAClF,0BACE7L,IAAKiuC,EACLn7C,IAAI,mBACJ6C,UAAU,qBAEZ,0BACEqK,IAAKkuC,EACLp7C,IAAI,cACJ6C,UAAU,oB,eE1OlB,MAoEA,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM,SAAET,GAAajM,EAAOiM,SAAS6P,SAC/B4iE,GAAWC,EAAAA,EAAAA,IAAkBjyE,IAAUiyE,EAAAA,EAAAA,IAAkB3+E,EAAO+X,eAChEjK,EAAU7B,MAAAA,GAAAA,EAAUzG,OAASyG,EAASyyE,EAAWzyE,EAASzG,aAAUlF,EACpEoF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ0M,GAChC,OAAKhH,EAIE,CACLoI,QAAAA,EACA8wE,oBAAqBl5E,EAAKE,aAAeF,EAAKE,YAAYzE,KAAOuE,EAAK6S,uBAClE7S,EAAKE,YAAYzE,QACjBb,EACJ6gC,gBAAiBnhC,EAAOmhC,iBARjB,KAPOqE,EAlE+B,IAI7C,IAJ8C,QAClD13B,EADkD,gBAElDqzB,EAFkD,oBAGlDy9C,GACI,EACJ,MAAM,qBACJC,EADI,YAEJtrE,EAFI,oBAGJ6qB,IACE1d,EAAAA,EAAAA,MAEE1d,GAAO+hC,EAAAA,GAAAA,KAEP0U,GAAehO,EAAAA,EAAAA,IAAuB,OAE1CouC,QAASpiB,IACPqiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAStgC,EACTugC,WApB6B,OAsB/Bx3C,EAAAA,EAAAA,KAAU,KACJ10B,GAA+B,yBAApBqzB,GAIf09C,MACC,CAAC19C,EAAiB09C,EAAsB/wE,KAE3C00B,EAAAA,EAAAA,KAAU,KACgB,yBAApBrB,GAA8Cy9C,GAChDxgD,EAAoB,CAAEzzB,MAAOi0E,MAE9B,CAACz9C,EAAiB/C,EAAqBwgD,IAE1C,MAAME,GAAsBj3C,EAAAA,EAAAA,KAAak3C,IACvCA,EAAkB,IACbA,EACHljD,qBAAqB,GAEvBtoB,EAAY,CAAEzF,QAASixE,MACtB,CAACxrE,IAEJ,OACE,0BAAKgwB,UAAU,kBAAkBqK,IAAK6L,GACpC,0BAAKlW,UAAU,WACb,wBAAGA,UAAU,QAAQyB,IAAI,QAAQhiC,EAAK,kCACtC,wBAAGugC,UAAU,cAAcyB,IAAI,QAAQhiC,EAAK,8BAE5C,0BAAKugC,UAAU,WACZz1B,GACC,mBAACkxE,GAAA,EAAD,CACElxE,QAASA,EACTg3B,QAASg6C,EACTj0C,SAAU/8B,EACV2pD,oBAAqBA,EACrBlyB,KAAM,IACNhC,UAAU,QACV07C,eAAa,WCR3B,IAAeh8C,EAAAA,EAAAA,KA9DkB,IAE3B,IAF4B,eAChCmS,EADgC,KAChB/zC,EADgB,uBACV69E,GAClB,EACJ,MAAMl8E,GAAO+hC,EAAAA,GAAAA,KAEb,MAAa,cAAT1jC,EAiBN,SAAyB2B,GACvB,OACE,0BAAKugC,UAAU,SAAQ,+BAAOvgC,EAAK,wCAlB5Bm8E,CAAgBn8E,GAGrBoyC,EAmBN,SAA6BpyC,GAC3B,OACE,0BAAKugC,UAAU,cACb,0BAAKA,UAAU,WACb,wBAAGA,UAAU,6BACb,yBAAIA,UAAU,SAASvgC,EAAK,wCAC5B,yBAAIugC,UAAU,eACZ,6BAAKvgC,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,kDA5BTo8E,CAAoBp8E,GAGzBk8E,EAgCN,SAAqBl8E,GACnB,OACE,0BAAKugC,UAAU,cACb,0BAAKA,UAAU,UAAUyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GACjD,yBAAIijC,UAAU,SAASvgC,EAAK,yBAC5B,wBAAGugC,UAAU,eAAevgC,EAAK,4BACjC,yBAAIugC,UAAU,mBACZ,6BAAKvgC,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,4BAzCTq8E,CAAYr8E,GAInB,0BAAKugC,UAAU,SAAQ,+BAAOvgC,EAAK,mBCyEjCs8E,IAAwB1uE,EAAAA,EAAAA,KAAUC,GAAOA,KANvB,KAM8C,GAuctE,IAAeoyB,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAoD,IAA3C,OAAEC,EAAF,SAAUC,EAAV,KAAoBmB,GAAuB,EAClD,MAAMqE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,MAAO,GAGT,MAAM3C,GAAaw8E,EAAAA,EAAAA,IAAwBv/E,EAAQC,EAAQC,EAAUmB,GAC/Do9B,EAAwB,cAATp9B,GACjB48B,EAAAA,EAAAA,IAAwBj+B,EAAQC,IAChCkD,EAAAA,EAAAA,IAAmBnD,EAAQC,GACzB0xE,GAAqBv9D,EAAAA,EAAAA,IAAyBpU,EAAQC,EAAQC,GAEpE,GACEA,IAAakB,EAAAA,MACRq9B,GAAgBkzC,GAAsBlzC,EAAakzC,IAExD,MAAO,GAGT,MAAM,aAAEr9D,EAAF,kBAAgBkrE,EAAhB,YAAmC55E,GAAgBF,EACnD+5E,GAAahrE,EAAAA,EAAAA,IAAuBzU,EAAQC,GAE5Cy/E,EACJx/E,IAAakB,EAAAA,KACT2B,IAAe2C,EAAKwS,cAAgBunE,GAAc75E,IAAgBA,EAAYuB,UAG9Ew4E,GAAU/vE,EAAAA,EAAAA,IAAc5P,EAAQC,GACtC,IAAI2/E,EAEoB,MAOxB,OARIhqC,EAAAA,EAAAA,IAA0B51C,EAAQC,KAElC2/E,EADED,EAAQxlE,UACO,UAAAwlE,EAAQxlE,SAASkmB,eAAjB,eAA0BzoB,cAAe,aAEzC,wBAId,CACLioE,cAAc,EACdvrE,aAAAA,EACAkrE,kBAAAA,EACAM,eAAe7qC,EAAAA,EAAAA,IAAcvvC,GAC7Bq6E,aAAaC,EAAAA,EAAAA,IAAYt6E,GACzB8wC,UAAW9wC,EAAK8wC,UAChBpB,gBAAgBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAC7CmxE,eAAeC,EAAAA,EAAAA,IAAqBpxE,GACpCs5E,MAAOz0E,QAAQ66E,GACf58E,WAAAA,EACA07B,aAAAA,EACAjC,eAAevkB,EAAAA,EAAAA,IAAoBjY,EAAQC,EAAQC,GACnDm6E,iBAA2B,WAATh5E,IAAqB6D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,GAC9E+/E,sBAAsBC,EAAAA,EAAAA,IAAqBlgF,EAAQC,EAAQC,GAC3Du/E,WAAAA,EACAl5B,oBAAoBrR,EAAAA,EAAAA,IAAqBl1C,GACzC4/E,eAAAA,EACAjO,mBAAAA,EACAiJ,cAAel1E,EAAKyU,UAAa,iBAAkBzU,EAAKyU,SACpDrV,QAAQY,EAAKyU,SAASgmE,mBACtB7/E,EACJ4kB,aAAcllB,EAAOklB,gBACjBw6D,GAAiC,CAAE95E,YAAAA,MA7DzB4/B,EArc2B,IA+BzC,oBA/B0C,OAC9CvlC,EAD8C,SAE9CC,EAF8C,KAG9CmB,EAH8C,SAI9C++E,EAJ8C,YAK9CtF,EAL8C,cAM9CC,EAN8C,aAO9C8E,EAP8C,cAQ9CC,EAR8C,YAS9CC,EAT8C,QAU9CM,EAV8C,QAW9Cp5B,EAX8C,eAY9C7R,EAZ8C,cAa9Cg8B,EAb8C,UAc9C56B,EAd8C,MAe9C+iC,EAf8C,WAgB9Cx2E,EAhB8C,aAiB9C07B,EAjB8C,cAkB9CjC,EAlB8C,iBAmB9C69C,EAnB8C,qBAoB9C4F,EApB8C,aAqB9C3rE,EArB8C,kBAsB9CkrE,EAtB8C,WAuB9CC,EAvB8C,mBAwB9Cl5B,EAxB8C,YAyB9C3gD,EAzB8C,eA0B9Cg6E,EA1B8C,mBA2B9CjO,EA3B8C,cA4B9CiJ,EA5B8C,aA6B9C11D,EA7B8C,gBA8B9Co7D,GACI,EACJ,MAAM,qBACJr4E,EADI,gBACkBs4E,EADlB,sBACmCC,EADnC,qBAC0DC,EAD1D,kBACgFC,IAClFhgE,EAAAA,EAAAA,MAGE+4B,GAAehO,EAAAA,EAAAA,IAAuB,MAItCk1C,GAAkBl1C,EAAAA,EAAAA,IAAyB,WAATpqC,IAAqBu/E,EAAAA,EAAAA,KAAmBh6E,EAAAA,EAAAA,MAAa3G,EAAQC,IAAc,GAC7Gq6E,GAAc9uC,EAAAA,EAAAA,MACdo1C,GAAep1C,EAAAA,EAAAA,MACfq1C,IAAsBr1C,EAAAA,EAAAA,MACtBgvC,IAAuBhvC,EAAAA,EAAAA,MACvB+uC,IAA+B/uC,EAAAA,EAAAA,MAC/Bs1C,IAAoBt1C,EAAAA,EAAAA,MACpBu1C,IAA4Bv1C,EAAAA,EAAAA,KAAO,GACnCw1C,IAA6Bx1C,EAAAA,EAAAA,IAAO3mC,QAAQc,KAE3C2oE,GAAiB2S,KAAsBl9C,EAAAA,EAAAA,MAExCpgB,GAAoB9e,QAAQ/B,IAElCm6E,EAAAA,GAAAA,IAAY,KAENt5D,KACFrP,EAAAA,EAAAA,KAAU,KACR0sE,GAA2Bh/D,SAAU,OAGxC,CAAC2B,MAGJs5D,EAAAA,GAAAA,IAAY,KACVzC,GAAqBx4D,QAAUua,IAC9B,CAACA,KAEJ0gD,EAAAA,GAAAA,IAAY,KACN4C,GAAiB74B,GAAW/hC,GAC9Bs7D,EAAsB,CAAEvgF,OAAAA,MAEzB,CAACA,EAAQgnD,EAAS64B,EAAe56D,KAGpCg4D,EAAAA,GAAAA,IAAY,KACNt5D,KACF42D,GAA6Bv4D,QAAUw4D,GAAqBx4D,WAE7D,CAAC2B,MAEJs5D,EAAAA,GAAAA,IAAY,KACV6D,GAAkB9+D,QAAUw9D,IAC3B,CAACA,IC7LiCiB,CAAAA,KAUrCztC,EAAAA,GAAAA,GAAW,CAAC,CAAC,SATb,SAAoBplC,GAClB,MAAM9K,GAAao+E,EAAAA,GAAAA,KAEfp+E,GAAcA,EAAWyC,OAAS,IACpCqI,EAAEm1B,iBACF09C,EAAkB,CAAE39E,WAAAA,UDyLxBq+E,CAA8BV,GAE9B,MAAMtG,IAAgBrzC,EAAAA,EAAAA,KAAQ,KAC5B,IAAKhkC,IAAe07B,EAClB,OAGF,MAAM/5B,GAAcitE,GAAwB5uE,EAAW,IAAMk9E,IAAyBl9E,EAAW,GAE7FA,EADA,CAAC4uE,KAAuB5uE,GAG5B,IAAK2B,EAAYc,OACf,OAGF,MAAM67E,EAAiB38E,EAAYrB,KAAKlC,GAAOs9B,EAAat9B,KAAKmC,OAAOwB,SACxE,OAAO+lD,IAAcy2B,EAAAA,EAAAA,IAAQD,EAAgB,CAAC,OAAQ,OAAQ7G,GAA6Bv4D,WAC1F,CAAClf,EAAY07B,EAAcwhD,EAAsBtO,KAEpDlG,EAAAA,GAAAA,IAAY,KACV,IAAK1oE,IAAe07B,EAClB,OAEF,MAAMl3B,EAAMxE,EAAWO,QAAQ+U,IAAD,uBAAOomB,EAAapmB,UAApB,aAAO,EAAiBqd,aAEjDnuB,EAAI/B,QAETi7E,EAAqB,CAAExgF,OAAAA,EAAQsH,IAAAA,MA7HQ,MAgIzC,MAAMg6E,IAAiBx6C,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAAT1lC,EAIJ,OAAOuP,EAAAA,EAAAA,KAAS,IAAM3I,EAAqB,CAAED,UAAWkJ,EAAAA,GAAAA,UAA6B,KAAM,GAAM,KAEhG,CAACjJ,EAAsBlF,KAEpB,WAAEy+E,GAAF,kBAAcC,IE/NP,WAGb,MAAOD,EAAYE,IAAkBpxC,EAAAA,GAAAA,IAAQ,GAEvCqxC,GAAeC,EAAAA,GAAAA,GATN,KASgC,GA4B/C,MAAO,CACLJ,WAAAA,EACAC,mBA5BwB55C,EAAAA,EAAAA,KAAY,CAACquB,EAA2BkqB,KAChEsB,IAEKjmD,SAAStJ,KAAK2hB,UAAU6hB,SAAS,2BACpCiL,EAAAA,EAAAA,KAAQ,KACNnlC,SAAStJ,KAAK2hB,UAAU9lB,IAAI,4BAIhC2zD,GAAa,MACX/gB,EAAAA,EAAAA,KAAQ,KACN,MAAMihB,EAAepmD,SAASkH,cAAc,UACxCk/C,GACFA,EAAa/tC,UAAUC,OAAO,SAGhC,MAAM+tC,EAgBd,SAAuB5rB,EAAwBkqB,GAC7C,MAAM2B,EAAc7rB,EAAU8rB,iBAAiC,gBACzDC,EAAe/rB,EAAUkmB,UAE/B,OAAOnuD,MAAM9a,KAAK4uE,GAAaj5E,MAAM8c,IACnC,MAAM,UAAEs8D,EAAF,aAAahG,GAAiBt2D,EAC9Bu8D,EAAMD,EAAYD,EACxB,OAAQ/F,GAAgBiG,GAAOA,IAAQ/B,EAhDb,GADX,OA0BSgC,CAAclsB,EAAWkqB,GACzC0B,GACFA,EAAYhuC,UAAU9lB,IAAI,SAG5ByN,SAAStJ,KAAK2hB,UAAUC,OAAO,iCAGlC,CAAC2tC,EAAgBC,KFgMsBU,GAEpC3H,IAAiBjvC,EAAAA,EAAAA,MACjBkvC,IAAyBlvC,EAAAA,EAAAA,MAEzB62C,IAAez6C,EAAAA,EAAAA,KAAY,KAC/B,GAAIm5C,GAA0B/+D,QAE5B,YADA++D,GAA0B/+D,SAAU,GAItCy4D,GAAez4D,SAAU,EAEzB,MAAMi0C,EAAYzc,EAAax3B,QAE1B8+D,GAAkB9+D,SACrBw/D,GAAkBvrB,EAAWkqB,GAG/Bd,IAAsB,KACpB5E,GAAez4D,SAAU,GAEzB2+C,EAAAA,EAAAA,KAAQ,KACD1K,EAAUqsB,gBAIf5B,EAAgB1+D,QAAUi0C,EAAUimB,aAAejmB,EAAUkmB,UAEhD,WAAT/6E,GACFk/E,EAAgB,CAAEtgF,OAAAA,EAAQC,SAAAA,EAAUoE,aAAcq8E,EAAgB1+D,mBAIvE,CAACw/D,GAAmBrB,EAAU/+E,EAAMk/E,EAAiBtgF,EAAQC,KAGhEsiC,EAAAA,EAAAA,KAAU,KACR,KAAM,mBAAoB97B,QACxB,OAGF,MAAM87E,EAAW,IAAIC,gBAAe,IAAa,IAAXhH,GAAW,EAEzCA,EAAM/lB,OAA0BgtB,cAItCxB,GAAmBzF,EAAMkH,YAAYppC,WAKvC,OAFAipC,EAAS3I,QAAQpgC,EAAax3B,SAEvB,KACLugE,EAASI,gBAEV,IAGH,MAAQrpC,OAAQspC,KAAiBh7B,EAAAA,GAAAA,MAEjCrlB,EAAAA,EAAAA,KAAU,KACRiX,EAAax3B,QAASy5D,QAAQoH,aAAeC,OAAOtpC,EAAax3B,QAASi6D,gBACzE,CAAC2G,GAAcxC,KAGlB79C,EAAAA,EAAAA,KAAU,KACR,IAAK++C,KAAmB1B,GAAgBvrE,GAAgBmrE,EACtD,OAKF,GAD2B18E,GAAcA,EAAWA,EAAWyC,OAAS,IAAMg3E,EAAAA,GAE5E,OAGF,MAAMtmB,EAAYzc,EAAax3B,UAE1Blf,GACHA,EAAWyC,OAAS4L,EAAAA,GAAqB,GACrC8kD,EAAUtb,kBAAqCooC,cAAgB9sB,EAAUgmB,eAE7EqF,OAED,CAAC1B,EAAc98E,EAAYw+E,GAAgB9B,EAAYnrE,KAG1D4oE,EAAAA,GAAAA,IAAY,KACV,IAAKn6E,IAAe+9E,GAAoB7+D,QACtC,OAGF,MAAMghE,EAAwBnC,GAAoB7+D,QAC/C3e,QAAQyvD,GAAYhwD,EAAWgF,SAAStC,OAAOstD,EAAQ2oB,QAAQn3E,cAI5D8zC,EAAS4qC,EAAsB,IAAMA,EAAsB,GAC5D5qC,IAILkiC,EAAYt4D,QAAUo2B,EAAOl3C,GAC7B0/E,EAAa5+D,QAAUo2B,EAAOf,wBAAwB6qC,OAErD,CAACp/E,EAAYs3E,EAAkB9L,GAAiB6R,KAGnD8C,EAAAA,GAAAA,IAA4B,IAEtB,IADJC,EAAgBC,EAAsBC,GAClC,EACJ,MAAMntB,EAAYzc,EAAax3B,QAC/B6+D,GAAoB7+D,QAAUgM,MAAM9a,KAAK+iD,EAAU8rB,iBAAiC,uBAEpF,MAAMsB,EACJvgF,GAAcogF,GAAkBpgF,EAAWA,EAAWyC,OAAS,KAAO29E,EAAeA,EAAe39E,OAAS,GAEzG+9E,GACJxgF,MAAAA,OAAA,EAAAA,EAAa,OAAOogF,MAAAA,OAApB,EAAoBA,EAAiB,MAAMpgF,MAAAA,OAAA,EAAAA,EAAYyC,UAAY4L,EAAAA,GAAqB,EAAI,EAExFoyE,EAAkBF,IAA0BC,EAC5CE,EAAoB1gF,GAAcg+E,GAAkB9+D,UAAYlf,EAAWA,EAAWyC,OAAS,GAI/Fk+E,EACJrJ,GACGmJ,GACCzgF,GAAcA,EAAWyC,OAAS4L,EAAAA,GAAqB,IACvD8kD,EAAUqsB,cAAezuC,UAAU6hB,SAAS,0BAC5CO,EAAUtb,kBAAsCooC,cAAyC,EAAzB9sB,EAAUgmB,aAG5EwH,IACFxtB,EAAUqsB,cAAezuC,UAAU9lB,IAAI,yBAEvCrnB,YAAW,KACLuvD,EAAUqsB,eACZrsB,EAAUqsB,cAAczuC,UAAUC,OAAO,2BA/QhB,MAoR/B,MAAM,UAAEqoC,EAAF,aAAaD,EAAb,aAA2BD,GAAiBhmB,EAC5C5xD,EAAeq8E,EAAgB1+D,QAC/B0hE,EAAkB7C,GAAoB7+D,QAAQ6+D,GAAoB7+D,QAAQzc,OAAS,GAEzF,IAAIo+E,EAAet/E,GAAgB++E,GAAuBnH,GACtDsH,IAKFI,GADuBD,EAAkBA,EAAgBzH,aAAe,GAG1E,MAAMI,EAAajC,GAAoB+I,GAAwBQ,GApS1C,GAsSrB,IAAIC,EAEJ,GAAIL,GAAmBlH,IAAemH,IAChCE,IACF/iB,EAAAA,EAAAA,KAAQ,MACNhN,EAAAA,GAAAA,GACEsC,EACAytB,EACA,MAzSgB,OA+StBE,EAAe1H,EAAeD,EAC9ByE,EAAgB1+D,QAAUrX,KAAKC,IAAID,KAAKupC,KAAKgoC,EAAe0H,GAAe3H,IAGtEwH,GACH,OASJ,MAAMI,OAAoCxjF,IAAxB+iF,GAAqCA,IAAwB9U,GACzEl2B,EAASkiC,EAAYt4D,SAAWi0C,EAAUvzB,cAAe,IAAG43C,EAAYt4D,WACxEm7D,GACH/kC,GACEmiC,GAA6Bv4D,SAC7Bi0C,EAAUvzB,cAA+B,mBAG9C,GAAI25C,GAAcwH,EAAW,CAC3B,IAAIC,EAAAA,GAAAA,KACF,OAGFF,EAAe1H,EAAeD,OACrB7jC,GACLsiC,GAAuB14D,UACzB04D,GAAuB14D,SAAU,GACjC+hE,EAAAA,GAAAA,GAAoB9tB,IAItB2tB,EAAezH,GADM/jC,EAAOf,wBAAwB6qC,KACRtB,EAAa5+D,SAAW,KAEpE4hE,EADSzG,EACMxyE,KAAKkpB,IAClBspD,EAAc8E,WAAa9B,EAxVG,GADX,IA0VnBjE,EAAe73E,GAGF63E,EAAe73E,GAGhC2/E,EAAAA,GAAAA,GAAY/tB,EAAWtrD,KAAKupC,KAAK0vC,IAE5B9C,GAAkB9+D,UACrB++D,GAA0B/+D,SAAU,GACpC2+C,EAAAA,EAAAA,KAAQ,KACNogB,GAA0B/+D,SAAU,MAIxC0+D,EAAgB1+D,QAAUrX,KAAKC,IAAID,KAAKupC,KAAKgoC,EAAe0H,GAAe3H,KAO1E,CAACn5E,EAAYs3E,EAAkB9L,GAAiB6R,KAEnD8D,EAAAA,GAAAA,IAAsB,IAA8B,IAA5BC,GAA4B,OACnB7jF,IAA3B6jF,IACFC,EAAAA,GAAAA,IA/WiC,IA+W4BxhF,EAAAA,MAE9D,CAAC2jD,IAEJ,MAAMvjD,IAAO+hC,EAAAA,GAAAA,KAEPxc,GAAYzjB,QAAQ7E,IAAUuoB,EAAAA,EAAAA,IAASvoB,IACvCq6E,GAAYx1E,SAAUyjB,KAAcu3D,GAAkB1qC,GAAkBg8B,GACxE7kB,GAAYznD,SAASw1E,IAAawF,GAClCuE,IAAuB77D,EAAAA,EAAAA,IAASvoB,KAAYm1C,IAAmBmkC,KAG9Da,KAAkBx0E,GAAe7C,KAE7B+9E,GAAoB7+D,SAAkD,IAAvC6+D,GAAoB7+D,QAAQzc,SAEvC,KAAvBzC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,mBAAxDi5B,MAAAA,GAAA,UAAAA,EAAe17B,EAAW,WAA1B,mBAA+BuH,QAAQwC,cAAvC,eAA+CzL,OACpC,mBAAvCuE,MAAAA,GAAA,UAAAA,EAAa0E,eAAb,mBAAsBwC,cAAtB,eAA8BzL,OAGhC69E,GAAyBa,GAAevpC,GAClB,KAAvBzzC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,gBAAxDi5B,MAAAA,GAAA,UAAAA,EAAe17B,EAAW,WAA1B,mBAA+BuH,QAAQwC,cAAvC,eAA+CzL,MAE1EkiC,IAAYoE,EAAAA,GAAAA,GAChB,4BACA4kB,IAAa,cACZ8zB,GAAW,cACH,WAATh/E,GAAqB,cACrBi/E,GAAmB,oBACnB/5B,GAAsB,qBACtBi7B,IAAc,YACbv6B,GAAW,gBAGd,OACE,0BACErZ,IAAK6L,EACLlW,UAAWA,GACX+gD,SAAUhC,GACVztC,YAAawgB,GAAAA,GAEZ/gD,EACC,0BAAKivB,UAAU,SACb,+BACGi8C,EAAoBA,EAAkB/6E,KAAQ,sBAAoBq7E,EAAgB,UAAY,UAGjGF,EACF,0BAAKr8C,UAAU,SAAQ,gCAAOuf,EAAAA,GAAAA,GAAW9/C,GAAK48E,GAAiB,CAAC,KAAM,QAAS,YAC7EyE,GACF,mBAAC,GAAD,CAAiB33E,OAAQzM,KACvB8C,GAAgBq3E,KAAiB8E,GAO/Bn8E,GAAcq3E,IAAkBx0E,EACpC,mBAAC,GAAD,CACE3F,OAAQA,EACR8C,WAAYA,GAAc,CAAC6C,EAAazE,IACxCi5E,cAAeA,IAAiBvvB,GAAc,CAACjlD,IAC/Cy0E,iBAAkBv1E,QAAQu1E,GAC1BnvE,SAAUpG,QAAQ03B,GAClB89C,UAAWA,GACX5G,mBAAoBnrD,GACpBgkC,UAAWA,GACX9S,aAAcA,EACd8gC,YAAaA,EACbC,6BAA8BA,GAC9BC,qBAAsBA,GACtBv6E,SAAUA,EACVmB,KAAMA,EACN4lD,QAASA,EACTyzB,eAAgBA,GAChBC,uBAAwBA,GACxBhJ,mBAAoBA,EACpBiJ,cAAeA,EACfC,aAAYT,IAAyB,cAAT/4E,EAC5By2D,uBAAwBsiB,KAAkB6G,GAA2Bh/D,QACrE64D,YAAaA,EACbC,cAAeA,IAGjB,mBAAC7sC,GAAA,EAAD,CAAS/I,MAAM,QAAQo/C,gBAAgB,SAjCvC,mBAAC,GAAD,CACEtkF,OAAQA,EACRoB,KAAMA,EACN+zC,eAAgBA,EAChB8pC,uBAAwBA,UGrblC,IAAej8C,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MAAMuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,MAAO,GAGT,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,MAAO,CACLiH,gBAAAA,EACAgR,YAAaxS,GAAQxF,IAAakB,EAAAA,IAAsC,WAApB8F,EAA+BxB,EAAKwS,iBAAc5X,KAZxFklC,EA1DgC,IAM9C,IAN+C,QACnD4I,EADmD,QAEnDiyC,EAFmD,gBAGnDn5E,EAHmD,YAInDgR,EAJmD,eAKnDssE,GACI,EACJ,MAAM,eAAEC,IAAmB/jE,EAAAA,EAAAA,MAErB1d,GAAO+hC,EAAAA,GAAAA,KAEPsO,GAAa5H,EAAAA,EAAAA,IAAuB,MAEpC+W,GAAc3a,EAAAA,EAAAA,KAAY,KAC9B,GAAKuG,EAIL,GAAwB,WAApBlnC,EACFu9E,QACK,CACL,MAAM/wB,EAAoBrgB,EAAWpxB,QAASsgE,cAAe5/C,cAA8B,gBACrF+hD,EAAkBhxB,EAAkBsuB,iBAAiC,sBACrE2C,EAAqBD,EAAgBA,EAAgBl/E,OAAS,GACpE,IAAKm/E,EACH,QAGF/wB,EAAAA,GAAAA,GAAiBF,EAAmBixB,EAAoB,MA9BzC,OAgChB,CAACv2C,EAASlnC,EAAiBu9E,IAExB/1C,GAAe/G,EAAAA,GAAAA,GACnB,mBACAyG,GAAW,YACViyC,GAAW,cACZmE,GAAkB,oBAGpB,OACE,0BAAK52C,IAAKyF,EAAY9P,UAAWmL,GAC/B,0BAAKnL,UAAU,0BACb,mBAAC+B,GAAA,EAAD,CACEH,MAAM,YACNh0B,OAAK,EACL2zB,QAAS0d,EACT9a,UAAW1kC,EAAK,qBAEhB,wBAAGugC,UAAU,qBAEdz+B,QAAQoT,IACP,0BAAKqrB,UAAU,iBAAgBC,EAAAA,GAAAA,IAAqBtrB,U,eCnE9D,MAAM0sE,GAAqB,KACrBC,GAAiB,YAER/zE,eAAeg0E,GAC5BC,EAAkBnnC,EAAYonC,EAAkBtsE,GAEhD,MAAMijB,EAAUyhB,IAAIC,gBAAgBO,IAC5Bv8C,KAAM4jF,EAAR,KAAkB1/C,GAASqY,EACjC,IAAIsnC,EACA9lC,EACAtjB,EAEJ,GAAIqpD,EAAAA,GAAAA,IAAkCF,GACpC,GAAID,EAAS,CACX,MAAM1nC,QAAY8nC,EAAAA,GAAAA,IAAazpD,IACzB,MAAE/H,EAAF,OAAS2lB,GAAW+D,EAE1B,GAAI1pB,EAAQgxD,IAAsBrrC,EAASqrC,IAAmC,eAAbK,EAA2B,CAC1F,MAAMI,QAAmBtoC,GAAWphB,EAASipD,GAAqBh6E,KAAKC,IAAI+oB,EAAO2lB,GAAS,cAG3F,OAFA6D,IAAIW,gBAAgBpiB,GAEbmpD,GAAgBC,QADDO,EAAAA,GAAAA,IAAUD,IACU,EAAM3sE,GAGjC,eAAbusE,IACFF,EAAWA,EAASlzD,QAAQgzD,GAAgB,SAG9CK,EAAQ,CAAEtxD,MAAAA,EAAO2lB,OAAAA,QAEjBzd,EAAiBH,OAEd,GAAI4pD,EAAAA,GAAAA,IAAkCN,GAAW,CACtD,MAAQO,WAAY5xD,EAAO6xD,YAAalsC,EAAlC,SAA0CwoB,SAAmB2jB,EAAAA,GAAAA,IAAa/pD,GAChFupD,EAAQ,CAAEtxD,MAAAA,EAAO2lB,OAAAA,EAAQwoB,SAAAA,GAEzBjmC,QAAuB6pD,EAAAA,GAAAA,IAAqBhqD,QACvC,GAAIiqD,EAAAA,GAAAA,IAAkCX,GAAW,CACtD,MAAM,SACJljB,EADI,MACM/jD,EADN,UACawhC,EADb,SACwBqmC,SC/C3B/0E,eAAkC3B,GACvC,MAAM,aAAE22E,EAAF,YAAgBC,SAAsB,mCACtCC,QAAiBF,EAAa32E,IAC5B82E,QAAQ,MAAEjoE,EAAF,OAASuhC,EAAT,QAAiB2mC,GAAWC,QAAQ,SAAEpkB,IAAeikB,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLloE,MAAAA,EACAwhC,UAAWD,EACXwiB,SAAAA,EACA8jB,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMx3E,KAAKrJ,SAAS,iBAAcjF,GD0C9E+lF,CAAmB1qD,GAC7ByjB,EAAQ,CACN2iB,SAAUA,GAAY,EACtB/jD,MAAAA,EACAwhC,UAAAA,GAEF1jB,EAAiB+pD,EAGnB,MAAO,CACLlqD,QAAAA,EACAopD,SAAAA,EACAE,SAAAA,EACA1/C,KAAAA,EACA2/C,MAAAA,EACA9lC,MAAAA,EACAtjB,eAAAA,KACGpjB,GExEQ,SAAS4tE,GAAsBC,GAC5C,MAAMC,EAAY9/E,OAAO+/E,eAEzB,GAAID,MAAAA,GAAAA,EAAWE,YAAcF,EAAUG,WAAY,CACjD,MAAMC,EAAQJ,EAAUE,WAAW,GACnCE,EAAMC,iBAEN,MAAMC,EAAWF,EAAMG,yBAAyBR,GAC1CS,EAAmBF,EAASG,UAClCL,EAAMM,WAAWJ,GACbE,GACFJ,EAAMO,cAAcH,GACpBJ,EAAMQ,YAAYJ,IAElBJ,EAAMS,UAAS,GAEjBb,EAAUc,kBACVd,EAAUe,SAASX,I,eCfvB,IAAIY,GASW,SAASC,GAA8BC,GACpDF,GAAW79D,QACX+9D,EAAQ/9D,QATNzV,EAAAA,KACFszE,GAAa/rD,SAAS+iB,cAAc,SACpCgpC,GAAW1zC,UAAU9lB,IAAI,kCACzByN,SAAStJ,KAAKkhC,YAAYm0B,K,+CCH5B,MAEMG,GAAmB,CAAEC,YAFP,IAAIxqC,IAAI,aAAyD1zB,KAE7Cm+D,aAAa,GAC/CC,GAAc,CAAEzmF,KAAM,aAI5B,IAAI0mF,GACAC,GACAC,GAEGn3E,eAAeo3E,KAOpB,OANKH,KACHA,GAAsB,mCACtBC,UAAsBD,IAAqBI,QAC3CF,GAAgB,IAAID,GAAaL,KAG5BI,GAGFj3E,eAAes3E,GAAMC,SA6C5Bv3E,uBACQo3E,WACAD,GAAcG,QA9CdE,GAEN,MAAMpzB,EAAY5+C,KAAKC,MACvB,IAAIgyE,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BR,GAAcS,gBAAmBC,IAC/BH,EAAOvkF,KAAK0kF,IAGd,MAAMC,EAsCR,SAA6BC,EAAyBh4E,GACpD,MAAMi4E,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAtEM,GAuEfL,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEMpjF,EAFMojF,EAAU1lF,QAAO,CAACC,EAAKme,IAAYne,EAAMme,GAAS,GAC1ConE,EACE,IAzDoCljF,CAAAA,IAC1DsiF,EAASxkF,KAAc,IAATkC,GACdkiF,EAAiBliF,IAyDjB0K,CAAG1K,EAvFY,GAuFU,EAAIA,GAE7ByjF,sBAAsBF,GAGxBA,GAEO,KACLD,GAAc,GAnEQI,CAAoB5B,IAK5C,MAAO,CACLtmC,KAAM,IAAM,IAAInE,SAAgB,CAACC,EAASqsC,KACxC7B,GAAc8B,OAAS,KACrBtsC,EAAQ,CACNG,KAAM,IAAIT,KAAKqrC,EAAQV,IACvB/lB,SAAUn3D,KAAKuG,QAAQo3E,GAAYjyE,KAAKC,OAAS2+C,GAAa,KAC9DuzB,SAAAA,KAGJR,GAAc+B,QAAUF,EAExB,MAAMG,EAAYr/E,KAAKC,IAAI,EAAGqqD,EAhDT,IAgD0C5+C,KAAKC,OACpE5P,YAAW,KACTshF,GAActmC,OACdinC,MACCqB,MAELzuE,MAAO,KACL,MAAMyuE,EAAYr/E,KAAKC,IAAI,EAAGqqD,EAvDT,IAuD0C5+C,KAAKC,OACpE5P,YAAW,KACTshF,GAAczsE,QACd+sE,EAAWjyE,KAAKC,MAChBqyE,MACCqB,K,eC1DT,MAAMC,GAA2B,CAAC,YAAa,aAAc,aCS7D,IAAIlmE,GACAC,G,0BCVW,SAASkmE,GACtBC,EAAqBC,EAAYC,GAEjC,MAAO50E,EAAO60E,IAAYvmD,EAAAA,EAAAA,OACpB,SAAEwmD,EAAF,mBAAYC,GAiBpB,WACE,MAAMC,GAAYj/C,EAAAA,EAAAA,KAAO,GAEnBg/C,GAAqB5iD,EAAAA,EAAAA,KAAY,KACrC6iD,EAAUzoE,SAAU,IACnB,IAEG4nD,GAAcC,EAAAA,GAAAA,KACd6gB,GAAiB9iD,EAAAA,EAAAA,KAAY,KAC5B6iD,EAAUzoE,UAIfyoE,EAAUzoE,SAAU,EACpB4nD,OACC,CAACA,IAGJ,OAFA/I,EAAAA,GAAAA,IAAuB8pB,GAAMD,GAEtB,CACLH,UAAUK,EAAAA,GAAAA,MACVJ,mBAAAA,GArCuCK,GACnCnJ,GAAeC,EAAAA,GAAAA,GAAgByI,GAAI,GAazC,OAXAnN,EAAAA,GAAAA,IAAY,KACNsN,EACFC,IAIF9I,GAAa,KACX4I,EAASH,UAEV,IAAIE,EAAcE,IAEd90E,EA2BT,SAASk1E,MC7CT,MACMG,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrBpqE,SAAU,GACVngB,MAAO,GACPwqF,aAAa,EACbC,gBAAiB,IAGbC,GAAS3vD,SAAS+iB,cAAc,OCPtC,MAAM6sC,IAAe3wE,EAAAA,EAAAA,KAAU7J,GAAOA,KAAM,KAAK,GAC3Cy6E,GAAa,mB,eCLnB,MAQA,IAAeroD,EAAAA,EAAAA,KARgC6K,IAC7C,MAAM,OAAElkC,GAAWkkC,EACby9C,GAAqBv9C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBrkC,GAGjF,OAAO2hF,EAAqB,mBAACA,EAAuBz9C,QAAYxtC,K,mNCMlE,IAAIkrF,GACAC,IAAwB,EAE5B,MAuCA,IAAexoD,EAAAA,EAAAA,KAvC6B,IAAoC,IAAnC,WAAEyoD,KAAeC,GAAkB,EAC9E,MAAMn8C,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBqE,GAAmBjI,EAAAA,EAAAA,KAAY,KAInC,GAHA2H,EAAcvtB,SAAU,EAGpBwpE,GAGF,OAFAA,IAAwB,OACxBC,IAIEF,KACF9jF,aAAa8jF,IACbA,QAAclrF,GAEhBkrF,GAAc9kF,OAAOC,YAAW,KAC1B6oC,EAAcvtB,SAChBypE,MAvBsB,OA0BzB,CAACA,IAEE37C,GAAmBlI,EAAAA,EAAAA,KAAY,KACnC2H,EAAcvtB,SAAU,IACvB,IAEH,OACE,mBAACqjB,GAAA,EAAD,MAEMqmD,EAFN,CAGEj7C,aAAejnC,EAAAA,QAAkCnJ,EAAnBwvC,EAC9Ba,aAAelnC,EAAAA,QAAkCnJ,EAAnByvC,EAC9BjL,QAAS4mD,Q,qCCrDf,SAAqG,uECmB/FE,GAAwB,SA4B9B,IAAe3oD,EAAAA,EAAAA,KA1B6B,IAEtC,IAFuC,KAC3CyG,EAD2C,MACrC5d,GACF,EACJ,MAAMy1B,GAAY9F,EAAAA,GAAAA,IAASowC,EAAAA,EAAAA,IAAqBniD,IAAO,EAAOtV,EAAAA,GAAAA,MAExD03D,GAAU/kD,EAAAA,EAAAA,KAAQ,KACtB,IAAKwa,EAAW,MAAO,GACvB,MAAMpc,EAAkB,SAAVrZ,EAXO,qBACC,qBAYhBigE,EAA8BxqC,EAAU1vB,QAAQ+5D,GAAuBzmD,GACvE6mD,GAAM,IAAIC,WAAYC,gBAAgBH,EAA6B,iBAMzE,OALAC,EAAIhK,iBAAiB,QAAQn5E,SAASwP,IACpCA,EAAE27B,MAAMm4C,OAAShnD,EACjB9sB,EAAE27B,MAAMo4C,YAlBkB,WAqBpB,2BAA0BJ,EAAIK,gBAAgBC,cACrD,CAAC/qC,EAAWz1B,IAEf,OACE,wBAAGyX,WAAWoE,EAAAA,GAAAA,GDzCK,oECyCuB4kD,EAAAA,IAAmBr+B,KAC3D,0BAAKxR,IAAKovC,EAASnvC,IAAI,GAAGpZ,WAAWoE,EAAAA,GAAAA,GD1CyI,qEC0C5G4kD,EAAAA,IAAmBr+B,UCwD3F,IAAejrB,EAAAA,EAAAA,KA3E6B,IAMtC,IANuC,IAC3CtzB,EAD2C,MAE3Cmc,EAF2C,OAG3C7rB,EAH2C,aAI3CusF,EAJ2C,aAK3CC,GACI,EACJ,MAAM,kBAAEr+D,EAAF,sBAAqBnE,IAA0BvJ,EAAAA,EAAAA,MAE/C1d,GAAO+hC,EAAAA,GAAAA,KAEP2E,GAAO3C,EAAAA,EAAAA,KAAQ,KAAM,MACzB,iBAAOp3B,EAAI+8E,MAAM5jF,MAAK,QAAC,KAAEiuB,GAAH,QAAuB,mBAATA,YAApC,aAAO,EAAyD0E,WAC/D,CAAC9rB,EAAI+8E,SAEDl+C,EAAYm+C,EAAUC,IAAat8C,EAAAA,GAAAA,MACnC4G,EAAcC,IAAmBnT,EAAAA,EAAAA,SAAsC1jC,GAExEu1D,GAAoBhuB,EAAAA,EAAAA,KAAah6B,IACrCA,EAAEm1B,iBACF,MAAMqU,EAAOxpC,EAAE0oD,cAAcjf,wBAC7BH,EAAgB,CAAE1jB,EAAG4jB,EAAKE,MAAOhjB,EAAG8iB,EAAKG,SACzCg1C,IACAG,MACC,CAACH,EAAcG,IAEZE,GAAkBhlD,EAAAA,EAAAA,KAAY,KAClC+kD,IACAH,MACC,CAACG,EAAWH,IAETK,GAA0BjlD,EAAAA,EAAAA,KAAY,KAC1CsP,OAAgB72C,KACf,IAEGysF,GAAkBllD,EAAAA,EAAAA,KAAY,KAClC5d,EAAsB,CACpBza,MAAOG,EAAIxO,GACX+oB,WAAW,MAEZ,CAACva,EAAIxO,GAAI8oB,IAEZ,OACE,mBAACwf,GAAA,EAAD,CACE/I,IAAK/wB,EAAIxO,GACT6rF,WAAYtjD,GAAQ,mBAAC,GAAD,CAAuBA,KAAMA,EAAM5d,MAAOA,IAC9D4d,KAAOA,OAAgBppC,EAAT,OAEdwkC,QAAS,IAAM1W,EAAkB,CAC/B5e,MAAOG,EAAIxO,GACXlB,OAAAA,IAEFo0D,cAAewB,GAEdlmD,EAAIs9E,UACJ/1C,GACC,mBAACg2C,GAAA,EAAD,KACE,mBAACp+C,GAAA,EAAD,CACEllC,OAAQ4kC,EACRO,UAAU,QACViF,MAAQ,SAAQkD,EAAazjB,YAAYyjB,EAAa3iB,OACtDgP,UAAU,0BACV0L,WAAS,EACTC,QAAS29C,EACTp0C,oBAAqBq0C,GAErB,mBAACrjD,GAAA,EAAD,CAAUC,KAAK,OAAOyjD,aAAW,EAACroD,QAASioD,GAAkB/pF,EAAK,2BC2D9E,IAAeigC,EAAAA,EAAAA,KAlHkB,IAW3B,IAX4B,OAChChjC,EADgC,gBAEhCmtF,EAFgC,eAGhCC,EAHgC,eAIhCC,EAJgC,eAKhCC,EALgC,YAMhCjyD,EANgC,cAOhCkyD,EAPgC,aAQhCC,EARgC,aAShCC,EATgC,MAUhC5hE,GACI,EACJ,MAAO6hE,EAAkBC,EAAgBC,IAAmBv9C,EAAAA,GAAAA,MACrDR,EAAkBC,EAAkB+9C,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,IAExFG,EAAyBC,EAA2BC,IAA+B59C,EAAAA,GAAAA,MAC1F9N,EAAAA,EAAAA,KAAU,KACJmrD,GACFG,MAED,CAACH,EAAkBG,IAEtB,MAAMK,GAAyBtmD,EAAAA,EAAAA,KAAY,KACrC8lD,EACFE,IAEAD,MAED,CAACD,EAAkBC,EAAgBC,IAEhCO,GAAmBvmD,EAAAA,EAAAA,KAAY,CAACh6B,EAAUm3E,KAC9C,MAAM,MAAEqJ,GAAUxgF,EAAE6nD,OAEhB24B,GAASA,EAAM7oF,OAAS,GAC1BioF,EAAax/D,MAAM9a,KAAKk7E,GAAQrJ,KAEjC,CAACyI,IAEEa,GAAoBzmD,EAAAA,EAAAA,KAAY,MACpC0mD,EAAAA,GAAAA,GACEtgE,MAAM9a,KAAKq7E,EAAAA,IAA4BnqF,KAAK,MAC3CwJ,GAAMugF,EAAiBvgF,GAAG,OAE5B,CAACugF,IAEEK,GAAuB5mD,EAAAA,EAAAA,KAAY,MACvC0mD,EAAAA,GAAAA,GAAsB,KAAM1gF,GAAMugF,EAAiBvgF,GAAG,OACrD,CAACugF,IAEEprF,GAAO+hC,EAAAA,GAAAA,KAEb,GAAKqoD,EAIL,OACE,0BAAK7pD,UAAU,cACb,mBAAC,GAAD,CACEpiC,GAAG,qBACHoiC,UAAWoqD,EAAmB,+BAAiC,qBAC/Dx8E,OAAK,EACLg0B,MAAM,cACNumD,WAAYyC,EACZzmD,UAAU,oBACVgnD,aAAa,uBACbC,UAAQ,GAER,wBAAGprD,UAAU,iBAEf,mBAACuL,GAAA,EAAD,CACE3tC,GAAG,uBACHyI,OAAQ+jF,GAAoBK,EAC5B/+C,WAAS,EACTF,UAAU,QACVC,UAAU,SACVE,QAAS2+C,EACTtqD,UAAU,yBACVkV,oBAAqBo1C,EACrBn9C,aAAejnC,EAAAA,QAAkCnJ,EAAnBwvC,EAC9Ba,aAAelnC,EAAAA,QAAkCnJ,EAAnByvC,EAC9B6+C,mBAAoBnlF,EAAAA,GACpBolF,eAAe,uBAMbxB,GACA,mBAAC5jD,GAAA,EAAD,CAAUlG,UAAU,iBAAiB6U,UAAQ,GAA7C,uDAEDi1C,GACC,sCACE,mBAAC5jD,GAAA,EAAD,CAAUC,KAAK,QAAQ5E,QAASwpD,GAAoBtrF,EAAK,gCACzD,mBAACymC,GAAA,EAAD,CAAUC,KAAK,WAAW5E,QAAS2pD,GAAuBzrF,EAAK,oBAGlEsqF,GACC,mBAAC7jD,GAAA,EAAD,CAAUC,KAAK,OAAO5E,QAAS4oD,GAAe1qF,EAAK,SAGpDqqF,IAAmB/xD,GAAekyD,GAAiBpoF,OAAO8hC,OAAOqmD,GAAgBlqF,KAAKsM,GACrF,mBAAC,GAAD,CACEA,IAAKA,EACL1P,OAAQA,EACR6rB,MAAOA,EACP0gE,aAAcyB,EACdxB,aAAcyB,WC/H1B,IAAejrD,EAAAA,EAAAA,KARwB6K,IACrC,MAAM,OAAElkC,GAAWkkC,EACbghD,GAAa9gD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAerkC,GAGjE,OAAOklF,EAAa,mBAACA,EAAehhD,QAAYxtC,KCGlD,IAAe2iC,EAAAA,EAAAA,KAR8B6K,IAC3C,MAAM,OAAElkC,GAAWkkC,EACbihD,GAAmB/gD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBrkC,GAG7E,OAAOmlF,EAAmB,mBAACA,EAAqBjhD,QAAYxtC,KCG9D,IAAe2iC,EAAAA,EAAAA,KAR4B6K,IACzC,MAAM,OAAElkC,GAAWkkC,EACbkhD,GAAiBhhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBrkC,GAGzE,OAAOolF,EAAiB,mBAACA,EAAmBlhD,QAAYxtC,K,eCL1D,MAQA,IAAe2iC,EAAAA,EAAAA,KAR4B6K,IACzC,MAAM,OAAElkC,GAAWkkC,EACbmhD,GAAiBjhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBrkC,GAGzE,OAAOqlF,EAAiB,mBAACA,EAAmBnhD,QAAYxtC,K,eCL1D,MAQA,IAAe2iC,EAAAA,EAAAA,KAR+B6K,IAC5C,MAAM,OAAElkC,GAAWkkC,EACbohD,GAAoBlhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsBrkC,GAG/E,OAAOslF,EAAoB,mBAACA,EAAsBphD,QAAYxtC,KCuEhE,IAAe2iC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAuC,IAA9B,UAAEuE,GAA4B,EACrC,MAAM,OAAEtE,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,OAAKC,EAIE,CAAEsD,SAASgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQsE,IAH3C,KAJOihC,EAvD+B,IAE7C,IAF8C,OAClD57B,EADkD,QAC1CrG,EAD0C,QACjC2rC,GACb,EACJ,MAAM,qBAAEoM,IAAyB56B,EAAAA,EAAAA,OAE1BovB,EAAkBC,IAAoBg+C,EAAAA,GAAAA,GAAenkF,EAAQslC,IAC9D,oBAAEigD,GAAwB5rF,GAAW,IACpC6rF,EAAWC,EAAeC,IAAmBh/C,EAAAA,GAAAA,IAAQ,GAEtD1B,GAAc/G,EAAAA,EAAAA,KAAY,KAC9BynD,IACApgD,MACC,CAACA,EAASogD,IAMb,IAJA9sD,EAAAA,EAAAA,KAAU,KACR6sD,MACC,CAACA,EAAe9rF,MAAAA,OAAhB,EAAgBA,EAASgsF,kBAEvBhsF,GAAYA,EAAQgsF,gBAIzB,OACE,mBAACzgD,GAAA,EAAD,CACEllC,OAAQA,GAAUwlF,EAClBngD,UAAWkgD,EACXpgD,UAAU,QACVC,UAAU,SACVE,QAASN,EACTrL,UAAU,kBACVkV,oBAAqB7J,EACrB8B,aAAejnC,EAAAA,QAAkCnJ,EAAnBwvC,EAC9Ba,aAAelnC,EAAAA,QAAkCnJ,EAAnByvC,EAC9By/C,WAAS,GAET,0BAAKjsD,UAAU,WACZhgC,EAAQgsF,gBAAgBlsF,KAAKytD,GAC5B,0BAAKvtB,UAAU,OACZutB,EAAIztD,KAAK2nB,GACR,mBAACsa,GAAA,EAAD,CACEmC,QAAM,EACN2Q,SAA0B,gBAAhBptB,EAAO3pB,KAEjByjC,QAAS,IAAMwW,EAAqB,CAAE/2C,UAAWhB,EAAQpC,GAAI6pB,OAAAA,KAE5DA,EAAOvmB,iB,0BC3BxB,MA6EA,IAAew+B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MAAM,OAAEC,EAAF,SAAUC,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GACxF,IAAKC,IAAWC,IAAagH,EAC3B,MAAO,GAGT,MACErF,iBAAiB,WAAEqG,EAAF,SAAcpG,EAAUiB,WAAY0sF,IACnDzvF,EAEEgF,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAClDqX,EAAgC,cAApBrQ,GACduQ,EAAAA,EAAAA,IAAyBzX,EAAQC,IACjCuX,EAAAA,EAAAA,IAAgBxX,EAAQC,EAAQC,GAC9B6iE,EAAgB/iE,EAAOgjB,SAAS8S,MAAMD,gBAAkB,EACxDo8C,EAAenwE,IAAa7B,EAElC,IAAIsD,EASAQ,EACJ,GATIiB,EACFzB,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQ+E,GACnCuS,EACThU,GAAUiT,EAAAA,EAAAA,IAAqBxW,EAAQC,EAAQC,EAAUgH,GAChD+qE,GAA8C,IAA9Bwd,EAAmBjqF,SAC5CjC,GAAUgM,EAAAA,EAAAA,IAAkBvP,EAAQkI,EAAaunF,EAAmB,KAIlEzqF,GAAgBzB,EAAS,CAC3B,MAAM,YAAEooD,GAAgBpoD,EAClB6xC,GAAiBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAChD0rD,IAAgBA,EAAYopB,eAAiB3/B,KAC/CrxC,GAAS8iD,EAAAA,EAAAA,IAAsB7mD,EAAQuD,IAGpCQ,GAAW4nD,MAAAA,GAAAA,EAAaE,iBAC3B9nD,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,SAEvB0uE,IACL1uE,IACFQ,GAAS8iD,EAAAA,EAAAA,IAAsB7mD,EAAQuD,GAClCQ,IACHA,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,KAG7BQ,IACHA,GAASykB,EAAAA,EAAAA,IAAStgB,IAAegS,EAAAA,EAAAA,IAAWla,EAAQkI,IAAevC,EAAAA,EAAAA,IAAW3F,EAAQkI,KAI1F,MAAO,CACLlD,aAAAA,EACAuS,UAAAA,EACAhU,QAAAA,EACAQ,OAAAA,EACAg/D,cAAAA,EACA2sB,uBAAwBzd,EAAewd,EAAmBjqF,YAASlF,KAxDrDklC,EA3EuC,IAQrD,IARsD,aAC1DxgC,EAD0D,UAE1DuS,EAF0D,QAG1DhU,EAH0D,OAI1DQ,EAJ0D,cAK1Dg/D,EAL0D,uBAM1D2sB,EAN0D,QAO1DC,GACI,EACJ,MAAM,gBACJ3pF,EADI,aAEJyQ,EAFI,aAGJxQ,EAHI,gBAIJ2pF,IACElvE,EAAAA,EAAAA,MAEE0tB,EAAUtpC,SACZE,GAAgBuS,IAAchU,GAC5BQ,GAAU2rF,GAEVG,GAAaC,EAAAA,GAAAA,GACjB,CAACJ,GACDA,EAxB4B,SAwBuBpvF,IAG/C,aACJ0sC,EADI,qBACUE,IACZC,EAAAA,GAAAA,GAAkB0iD,GAAczhD,OAAS9tC,GAAYyiE,OAAeziE,GAAYyiE,GAE9EgtB,GAAgBloD,EAAAA,EAAAA,KAAY,KAC5B7iC,EACFgB,EAAgB,CAAEzB,eAAWjE,IACpBiX,EACTd,EAAa,CAAElS,eAAWjE,IACjBovF,GACTE,IAEFD,MAAAA,GAAAA,MACC,CAAC3qF,EAAcuS,EAAWm4E,EAAwBC,EAAS3pF,EAAiByQ,EAAcm5E,KAE7FptD,EAAAA,EAAAA,KAAU,IAAO4L,GAAU3B,EAAAA,GAAAA,GAAsBsjD,QAAiBzvF,GAAY,CAAC8tC,EAAS2hD,IAExF,MAAMC,GAAqBnoD,EAAAA,EAAAA,KAAY,KACrC5hC,EAAa,CAAEhG,OAAQsD,EAAStD,OAAQsE,UAAWhB,EAASpC,OAC3D,CAAC8E,EAAc1C,IAEZggC,GAAYoE,EAAAA,GAAAA,GAAe,0BAA2BuF,GAEtDurB,EAAai3B,GAA0BA,EAAyB,EACjE,GAAEA,4BACHpvF,EAEJ,GAAK0sC,EAIL,OACE,0BAAKzJ,UAAWA,GACd,8BACE,mBAAC+B,GAAA,EAAD,CAAQn0B,OAAK,EAAC8+E,OAAK,EAAC9qD,MAAM,cAAcuC,UAAU,kBAAkB5C,QAASirD,GAC3E,wBAAGxsD,UAAU,gBAEf,mBAAC,GAAD,CACEA,UAAU,eACVhgC,QAASA,EACTQ,OAAQA,EACR00D,WAAYA,EACZz6C,MAAOzG,EAAY,oBAAiBjX,EACpCwkC,QAASkrD,UCrGnB,IAAe/sD,EAAAA,EAAAA,KAR6B6K,IAC1C,MAAM,YAAEl4B,GAAgBk4B,EAClBoiD,GAAkBliD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBr4B,EAAYpQ,QAGvF,OAAO0qF,EAAkB,mBAACA,EAAoBpiD,QAAYxtC,KCG5D,IAAe2iC,EAAAA,EAAAA,KAR4B6K,IACzC,MAAM,OAAElkC,GAAWkkC,EACbqiD,GAAiBniD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBrkC,GAGzE,OAAOumF,EAAiB,mBAACA,EAAmBriD,QAAYxtC,KCG1D,IAAe2iC,EAAAA,EAAAA,KARuB6K,IACpC,MAAM,OAAElkC,GAAWkkC,EACbsiD,GAAYpiD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcrkC,GAG/D,OAAOwmF,EAAY,mBAACA,EAActiD,QAAYxtC,KCGhD,IAAe2iC,EAAAA,EAAAA,KARsB6K,IACnC,MAAM,OAAElkC,GAAWkkC,EACbuiD,GAAWriD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAarkC,GAG7D,OAAOymF,EAAW,mBAACA,EAAaviD,QAAYxtC,KCyBxCgwF,GAAU,IAAIC,OAAOC,EAAAA,GAAkB,KAgF7C,IAAevtD,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAA8C,IAArC,OAAEC,EAAF,SAAUC,GAA2B,EAC5C,MAAMmV,GAAYC,EAAAA,EAAAA,IAAgBtV,EAAQC,EAAQC,GAClD,MAAO,CACL4rB,OAAOga,EAAAA,EAAAA,IAAY9lC,GACnBwY,eAAgBxY,EAAOwY,eACvBnD,UAAAA,KANcmwB,EA9E8B,IAQ5C,IAR6C,OACjDvlC,EADiD,SAEjDC,EAFiD,YAGjDuwF,EAHiD,SAIjDr4C,EAJiD,eAKjD5/B,EALiD,UAMjDnD,EANiD,MAOjDyW,GACI,EACJ,MAAM,mBACJrT,EADI,oBAEJhD,EAFI,qBAGJi7E,IACEhwE,EAAAA,EAAAA,MAEEiB,EAAOwoE,IAAiB,KAC5B,MAAM,KAAE1lF,EAAF,SAAQsR,IAAaxL,EAAAA,EAAAA,GAAkBkmF,GAEvCE,EAAa56E,GAAYA,EAASjN,MAAK,QAAC,KAAEzH,GAAH,SAAcA,IAASuvF,EAAAA,GAAAA,WACpE,GAAID,EACF,OAAOA,EAAWxhF,IAGpB,MAAM0hF,EAAYpsF,EAAKwmB,MAAMqlE,IAC7B,OAAIO,EACKA,EAAU,QADnB,IA3BgB,IAgCF,CAACJ,KAEjBjuD,EAAAA,EAAAA,KAAU,KACJ7gB,EACFlJ,EAAmB,CAAEhU,KAAMkd,KAE3BlM,IACAi7E,EAAqB,CAAEzwF,OAAAA,EAAQC,SAAAA,OAEhC,CAACD,EAAQywF,EAAsBj7E,EAAqBkM,EAAMlJ,EAAoBvY,KAEjFg9E,EAAAA,GAAAA,IAAY,KACVznE,IACAi7E,EAAqB,CAAEzwF,OAAAA,EAAQC,SAAAA,MAC9B,CAACD,IAEJ,MAAMmuC,EAAUtpC,QAAQ0T,GAAkBi4E,EAAYjrF,SAAW6P,IAAc+iC,IACzE,aAAEpL,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiB,GAE3D0iD,GAAmB3nC,EAAAA,GAAAA,GAAiB3wC,GAAgB,GAEpDu4E,GAA4BlpD,EAAAA,EAAAA,KAAY,KAC5C6oD,EAAqB,CAAEzwF,OAAAA,EAAQC,SAAAA,EAAUmV,WAAW,MACnD,CAACpV,EAAQC,EAAUwwF,IAEtB,IAAK1jD,IAAiB8jD,EACpB,OAIF,MAAM,MAAE1rE,KAAU4rE,GAAwBF,EACpCG,EAAc,CAClB3mF,QAAS,CACP88D,QAAS4pB,IAIb,OACE,0BAAKztD,WAAWoE,EAAAA,GAAAA,GAAe,iBAAkBuF,IAC/C,8BACE,mBAAC5H,GAAA,EAAD,CAAQn0B,OAAK,EAAC8+E,OAAK,EAAC9qD,MAAM,cAAcuC,UAAU,wBAAwB5C,QAASisD,GACjF,wBAAGxtD,UAAU,gBAEf,mBAAC,GAAD,CAAShgC,QAAS0tF,EAAahqB,WAAS,EAACn7C,MAAOA,UChGxD,IAAemX,EAAAA,EAAAA,KARwB6K,IACrC,MAAM,OAAElkC,GAAWkkC,EACbojD,GAAaljD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAerkC,GAGjE,OAAOsnF,EAAa,mBAACA,EAAepjD,QAAYxtC,KCiDlD,IAAe2iC,EAAAA,EAAAA,KA7CqB,IAK9B,IAL+B,OACnCr5B,EADmC,QAEnCk7B,EAFmC,KAGnCrgC,EAHmC,WAInCo/B,GACI,EAEJ,MAAMstD,GAAU1lD,EAAAA,EAAAA,IAAwB,MAuBxC,OArBAjJ,EAAAA,EAAAA,KAAU,KACR,MAAM4uD,EAASD,EAAQlvE,QACvB,IAAKmvE,EAAQ,OAEb,MAAMx9D,EAAQw9D,EAAOC,YAAc,EAEhBD,EAAOz9B,QAAQ,aACvB3f,MAAM8rB,YAAY,wBAA0B,GAAElsC,SACxD,CAAChqB,EAAQnF,KAEZ+9B,EAAAA,EAAAA,KAAU,KACR,MAAM4uD,EAASD,EAAQlvE,QACvB,IAAKmvE,EAAQ,OAEb,MAAME,EAAaF,EAAOz9B,QAAQ,aAElC,MAAO,KACL29B,EAAWt9C,MAAMu9C,eAAe,4BAEjC,IAGD,mBAACjsD,GAAA,EAAD,CACE/B,WAAWoE,EAAAA,GAAAA,GAAe,WAAY/9B,GAAU,QAChDuH,OAAK,EACLg0B,MAAM,cACNiT,SAAUvU,EACViB,QAASA,EACT4C,UAAU,6BAEV,wBAAGnE,WAAWoE,EAAAA,GAAAA,GAAe,gBAAiB,cAAe/9B,GAAU,UACvE,2BAAMgkC,IAAKujD,EAAS5tD,UAAU,iBAAiB9+B,O,ICiHhD+sF,I,SAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,SAAAA,W,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAA2B,8BA+iCjC,IAAexuD,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAA+D,sBAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B0/E,EAAU1/E,IAAWyxF,EAAAA,IAAkB9hF,EAAAA,EAAAA,IAAc5P,EAAQC,QAAUK,EACvEkmD,EAAgB1hD,QAAQ66E,GACxBvqC,GAAiBC,EAAAA,EAAAA,IAAqBr1C,EAAQC,GAC9CutF,EAAgB1oF,SAAQoV,EAAAA,EAAAA,IAAWla,EAAQC,IAC3C0xF,EAA+BnrC,IAAiBorC,EAAAA,EAAAA,IAA0C5xF,EAAQC,GAClG69B,GAAeC,EAAAA,EAAAA,IAAmB/9B,EAAQC,IAC1C,SAAEwd,EAAF,sBAAYo0E,GAA0B7xF,EAAOgjB,SAAS8S,MACtDg8D,EAAoB9xF,EAAO2d,cAAco0E,EAAAA,IACzCp0E,EAAgBF,IAAas0E,EAAAA,GAA0B/xF,EAAO2d,cAAcF,QAAYnd,EACxF0xF,EAAuBL,EAA+BA,EAA6BxwF,QAAKb,EACxF2xF,EAAkBD,GAAuBziF,EAAAA,EAAAA,IAAkBvP,EAAQC,EAAQ+xF,QAAwB1xF,GACnG,cAAEyX,GAAkB/X,EACpBkyF,EAAkBxsF,MAAAA,GAAAA,EAAMyU,UAAWzU,MAAAA,GAAA,UAAAA,EAAMyU,gBAAN,eAAgBH,WAAYjC,OAAgBzX,EAC/E0Z,EAAWtU,MAAAA,GAAAA,EAAM0U,WAAa83E,GAAmBxsF,EAAK0U,UAAUrS,SAASmqF,GAC3EA,EACCxsF,MAAAA,GAAA,UAAAA,EAAM4wC,mBAAN,SAAmB67C,UAAYzsF,MAAAA,OAA/B,EAA+BA,EAAMvE,QAAKb,EACzC8xF,EAAap4E,GAAWE,EAAAA,EAAAA,IAAWla,EAAQga,QAAY1Z,EACvD2Z,GAAcm4E,GAAcp4E,GAAWrU,EAAAA,EAAAA,IAAW3F,EAAQga,QAAY1Z,EACtE+xF,GAAgBC,EAAAA,EAAAA,IAAoBtyF,EAAQC,GAE5C6jB,EAAmC,cAApB5c,GACjBqrF,EAAAA,EAAAA,IAA4BvyF,EAAQC,IACpC8jB,EAAAA,EAAAA,GAAmB/jB,EAAQC,EAAQC,GAEvC,MAAO,CACLsyF,gBAAgBh8E,EAAAA,EAAAA,IAAqBxW,EAAQC,EAAQC,EAAUgH,GAC/Di6B,gBAAiBnhC,EAAOmhC,gBACxBvqB,OAAOK,EAAAA,EAAAA,IAAYjX,EAAQC,EAAQC,GACnCwF,KAAAA,EACA8gD,cAAAA,EACApR,eAAAA,EACAo4C,cAAAA,EACAiF,wBAAwBC,EAAAA,EAAAA,IAA6B1yF,EAAQC,GAC7D20C,UAAWlvC,GAAOuvC,EAAAA,EAAAA,IAAcvvC,QAAQpF,EACxCk1C,oBAAoBjvC,EAAAA,EAAAA,IAAyBvG,GAC7CumD,oBAAoBrR,EAAAA,EAAAA,IAAqBl1C,GACzC2yF,oBACEzyF,IAAakB,EAAAA,IACU,WAApB8F,GACApC,QAAQg5B,MAAAA,OAAD,EAACA,EAAct4B,QAE3BotF,eAAoC,cAApB1rF,EAChB8qF,qBAAAA,EACAa,uBAAwBZ,MAAAA,OAAF,EAAEA,EAAiBa,oBACzC7gB,aAAchyE,IAAWD,EAAO6B,gBAAgBC,SAChD6H,UAAW3J,EAAO2J,UAClBopF,iBAAkB/yF,EAAOiM,SAASyQ,SAASzQ,SAC3C+mF,iBAAkBttF,MAAAA,GAAF,UAAEA,EAAMyU,gBAAR,aAAE,EAAgBygB,QAClCq4D,gBAAe,UAAEjzF,EAAOosB,qBAAT,aAAE,EAAsBtM,QACvC/H,cAAAA,EACAmN,aAAcllB,EAAOklB,aACrBtjB,qBAAsB5B,EAAO2B,SAASC,qBACtCiwF,sBAAAA,EACAlkF,aAAc3N,EAAO2N,aACrBmkF,kBAAmBA,MAAAA,OAAF,EAAEA,EAAmBh0E,SACtCH,cAAeA,MAAAA,OAAF,EAAEA,EAAeG,SAC9BwI,WAAYtmB,EAAOsmB,WAAWC,WAC9B2sE,mBAAoBlzF,EAAOsmB,WAAW1I,UACtCu1E,iBAAiBztF,MAAAA,OAAA,EAAAA,EAAMyU,WAAYzU,EAAKyU,SAASi5E,YACjDA,YAAazT,MAAAA,GAAAA,EAASxlE,UAAY,UAAAwlE,EAAQxlE,SAASkmB,eAAjB,eAA0BgzD,YAAY,OAAS/yF,EACjFgzF,cAAe3T,MAAAA,GAAF,UAAEA,EAASxlE,gBAAX,iBAAE,EAAmBkmB,eAArB,aAAE,EAA4BC,WAC3C8xD,WAAAA,EACAn4E,WAAAA,EACAD,SAAAA,EACA8J,aAAAA,EACAuuE,cAAAA,EACA9E,eAAgBvtF,EAAOoqB,WAAWC,KAClCyB,OAAOga,EAAAA,EAAAA,IAAY9lC,MAtELwlC,EAniCwB,IA8CtC,IA9CuC,cAC3C+tD,EAD2C,eAE3CX,EAF2C,uBAG3CH,EAH2C,QAI3CxrC,EAJ2C,WAK3CusC,EAL2C,eAM3ChB,EAN2C,OAO3CvyF,EAP2C,SAQ3CC,EAR2C,gBAS3CgH,EAT2C,MAU3C0P,EAV2C,KAW3ClR,EAX2C,gBAY3Cy7B,EAZ2C,cAa3CqlB,EAb2C,eAc3CpR,EAd2C,UAe3CR,EAf2C,mBAgB3CY,EAhB2C,mBAiB3C+Q,EAjB2C,aAkB3C0rB,EAlB2C,UAmB3CtoE,EAnB2C,qBAoB3CqoF,EApB2C,uBAqB3Ca,EArB2C,oBAsB3CF,EAtB2C,iBAuB3CI,EAvB2C,iBAwB3CC,EAxB2C,gBAyB3CC,EAzB2C,cA0B3Cl7E,EA1B2C,aA2B3CmN,EA3B2C,qBA4B3CtjB,EA5B2C,sBA6B3CiwF,EA7B2C,kBA8B3CC,EA9B2C,cA+B3Cn0E,EA/B2C,aAgC3ChQ,EAhC2C,WAiC3C2Y,EAjC2C,mBAkC3C4sE,EAlC2C,YAmC3CE,EAnC2C,gBAoC3CD,EApC2C,WAqC3Cf,EArC2C,WAsC3Cn4E,EAtC2C,SAuC3CD,EAvC2C,aAwC3C8J,EAxC2C,cAyC3CuuE,EAzC2C,cA0C3CiB,EA1C2C,eA2C3C/F,GA3C2C,cA4C3CC,GA5C2C,MA6C3C1hE,IACI,EACJ,MAAM,YACJvY,GADI,WAEJkgF,GAFI,WAGJ9oE,GAHI,sBAIJ+oE,GAJI,kBAKJC,GALI,gBAMJ9xF,GANI,cAOJwpB,GAPI,eAQJuoE,GARI,qBASJh6E,GATI,SAUJ1X,GAVI,eAWJ2xF,GAXI,oBAYJC,GAZI,WAaJC,GAbI,aAcJr1D,GAdI,sBAeJs1D,GAfI,kBAgBJ5lE,KACE1N,EAAAA,EAAAA,MACE1d,IAAO+hC,EAAAA,GAAAA,KAGPkvD,IAAcxoD,EAAAA,EAAAA,IAAuB,OACpC86C,GAAM2N,KAAWlwD,EAAAA,EAAAA,IAAiB,IACnCmwD,IAAUC,EAAAA,GAAAA,GAAY7N,IACtB8N,IAA6B5oD,EAAAA,EAAAA,MAC7B6oD,IAAoBh1B,EAAAA,GAAAA,GAAYi0B,IAC9B3/D,MAAOF,IAAgBC,GAAAA,EAAAA,MACzBvZ,GAAY1U,MAAAA,OAAH,EAAGA,EAAM0U,UAClBm6E,GAAgBn6E,KAAcA,GAAU5U,OAAS,IAAM4U,GAAUrS,SAASgQ,KAEzEy8E,GAAoBC,GAAqBC,KAA6BpkD,EAAAA,GAAAA,KACvEqkD,IAAoBC,EAAAA,GAAAA,GAAqB30F,EAAQC,GAEjD20F,IAAuBhtD,EAAAA,EAAAA,KAAY,KACvC6sD,OACC,CAACA,MACGI,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYvC,EAAwBoC,KAExEryD,EAAAA,EAAAA,KAAU,KACR6xD,GAA2BpyE,aAAU3hB,IACpC,CAACL,KAEJuiC,EAAAA,EAAAA,KAAU,KACJviC,GAAUilB,GAAgBhlB,IAAakB,EAAAA,IAAkB6lD,GAC3DrtC,GAAqB,CAAE3Z,OAAAA,MAExB,CAACgnD,EAAShnD,EAAQ2Z,GAAsBsL,EAAchlB,KAEzDsiC,EAAAA,EAAAA,KAAU,KACJviC,GAAUyF,GAAQwf,IAAiB9K,IAAa6sC,IAAWnR,EAAAA,EAAAA,IAAiBpwC,IAC9EquF,GAAW,CAAE9zF,OAAAA,MAEd,CAACyF,EAAMzF,EAAQgnD,EAAS/hC,EAAc6uE,GAAY35E,MAErDooB,EAAAA,EAAAA,KAAU,KACJviC,GAAUyF,GAAQwf,IAAiBxf,EAAKyU,UAAY8sC,IAAWnR,EAAAA,EAAAA,IAAiBpwC,IAClFg5B,GAAa,CAAEz+B,OAAAA,MAEhB,CAACyF,EAAMzF,EAAQgnD,EAAS/hC,EAAcwZ,KAEzC,MAAMu2D,IAA+BxpD,EAAAA,EAAAA,KAAO,IAC5CyxC,EAAAA,GAAAA,IAAY,IAAiC,IAA/BgY,EAAYC,GAAmB,EAE3CF,GAA6BhzE,QAAUnd,QAAQ7E,IAAWi1F,GAAc96E,KAAc+6E,KACrF,CAACl1F,EAAQma,MAEZ8+B,EAAAA,EAAAA,KAAgB,KACT+6C,GAAYhyE,UAEjBgyE,GAAYhyE,QAAQi5B,UAtHP,ivBAuHZ,IAEH,MAAOtlC,GAAaw/E,KAAkBpxD,EAAAA,EAAAA,IAA0B,KAEzDqxD,GAAmBC,GAAiBC,KAAoBjlD,EAAAA,GAAAA,MACxDklD,GAAsBC,GAAoBC,KAAuBplD,EAAAA,GAAAA,MACjEqlD,GAAkBC,GAAgBC,KAAmBvlD,EAAAA,GAAAA,MACrDwlD,GAAkBC,GAAgBC,KAAmB1lD,EAAAA,GAAAA,MACrD2lD,GAAmBC,GAAiBC,KAAoB7lD,EAAAA,GAAAA,MACxD8lD,GAAoBC,KAA+B/lD,EAAAA,GAAAA,MACnDgmD,GAAiBC,GAAcC,KAAelmD,EAAAA,GAAAA,MAE/C,oBACJmmD,GADI,mBAEJC,GAFI,oBAGJC,GAHI,qBAIJC,GAJI,kBAKJC,GACAC,gBAAiBC,GANb,mBAOJC,IC7TsB,MAExB,MAAMF,GAAkBrrD,EAAAA,EAAAA,IAA0B,OAC3CmrD,EAAsBK,IAA2BjzD,EAAAA,EAAAA,MAClDgzD,GAAqBvrD,EAAAA,EAAAA,OACpBorD,EAAmBK,IAAwBlzD,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJ20D,EAAAA,IAAaC,EAAAA,IACVC,OAEN,IAEH,MAAMZ,GAAsB5uD,EAAAA,EAAAA,KAAY/2B,UACtC,IACE,MAAM,KAAE6wC,EAAF,MAAQnmC,SAAgB67E,IAAsBC,IAC9CR,EAAgB70E,UACd+0E,EAAmB/0E,SAAW3L,KAAKC,MAAQ,GAAM,IACnDugF,EAAgB70E,QAAQ+xB,MAAMujD,UAAa,SAA4B,IAAnBD,GAAc,wBAEpEJ,EAAqB5gF,KAAKC,WAG9BygF,EAAmB/0E,QAAU3L,KAAKC,MAClC2gF,EAAqB5gF,KAAKC,OAE1B0gF,EAAwB,CAAEt1C,KAAAA,EAAMnmC,MAAAA,IAChC,MAAOtM,GAEPkU,QAAQ/S,MAAMnB,MAEf,IAEGynF,GAAsB9uD,EAAAA,EAAAA,KAAY,KACtC,GAAK+uD,EAAL,CAIIE,EAAgB70E,UAClB60E,EAAgB70E,QAAQ+xB,MAAMujD,UAAY,QAE5C,IACE,OAAOX,EAAsBp7E,QAC7B,MAAOtM,GAGP,YADAkU,QAAQ/S,MAAMnB,OAGf,CAAC0nF,IAEEF,GAAqB7uD,EAAAA,EAAAA,KAAY,KACrC,GAAK+uD,EAAL,CAIAK,OAAwB32F,GACxB02F,EAAmB/0E,aAAU3hB,EAC7B42F,OAAqB52F,GACjBw2F,EAAgB70E,UAClB60E,EAAgB70E,QAAQ+xB,MAAMujD,UAAY,QAE5C,IACE,OAAOX,EAAsBj1C,OAC7B,MAAOzyC,GAGP,YADAkU,QAAQ/S,MAAMnB,OAGf,CAAC0nF,IAMJ,OAJAp0D,EAAAA,EAAAA,KAAU,IACDo0D,GAAuBnqD,EAAAA,GAAAA,GAAsBiqD,QAAsBp2F,GACzE,CAACs2F,EAAsBF,IAEnB,CACLD,oBAAAA,EACAE,oBAAAA,EACAD,mBAAAA,EACAE,qBAAAA,EACAC,kBAAAA,EACAC,gBAAAA,EACAE,mBAAAA,ID4OEQ,IAEJ/rB,EAAAA,GAAAA,IAAY,KACVkpB,GAAkB,CAAEtzF,KAAM,kBACzBu1F,IAAwBa,EAAAA,KAE3Bj1D,EAAAA,EAAAA,KAAU,KACHo0D,IACHjC,GAAkB,CAAEtzF,KAAM,aAE3B,CAACu1F,GAAsBjC,KAE1B,MAAM+C,GAAkBlF,EAAiBhB,GAAgBmG,MACnDP,EAAAA,IAAgCR,IAAyBrQ,KAAS3wE,GAAYpQ,QAAWysE,EACxF2gB,EAAiBpB,GAAgBoG,SAAWpG,GAAgBqG,KAC7DrG,GAAgBsG,OAChBC,IAAyBnF,GAEzB,qBACJoF,GADI,oBACkBC,GADlB,cACuCC,GADvC,qBACsDC,KACxDC,EAAAA,GAAAA,IACDxiF,GAAYpQ,OACb2uF,GACAD,QACA5zF,EACA0yF,EACAC,EACAl7E,IAIAnO,OAAQyuF,GACRl3F,GAAIm3F,GACJvrE,UAAWwrE,GACXhsE,SAAUisE,GACVlsF,QAASmsF,GACTC,aAAcC,GACd7rE,KAAM8rE,GACNC,SAAUC,ItB3VC,SACbn5B,EACA1/D,EACAsmF,EACAjgE,GAEA,MAAM,eAAEyyE,EAAF,eAAkBC,IAAmBt4E,EAAAA,EAAAA,OAEpC9W,EAAQqvF,EAAYC,IAAgB5oD,EAAAA,GAAAA,MACrC,SACJzvB,EADI,MACMngB,EADN,YACawqF,EADb,gBAC0BC,GAC5BhB,IAAiB,IAuDvB,SAAuB5D,GACrB,MAAM9hF,EAcR,SAAsB8hF,GAGpB,OAFA6E,GAAOlwC,UAAYqrC,EAAK10D,QAAQ,QAAS,MAElCu5D,GAAO+N,UAjBDC,CAAa7S,GACpBnjF,EAASqB,EAAKwmB,MAAM8/D,IAC1B,OAAK3nF,EAIE,CACLyd,SAAUzd,EAAO,GACjB1C,MAAO0C,EAAO,GACd8nF,YAA2B,KAAd9nF,EAAO,KAAcqB,EAAKwmB,MAAM+/D,IAC7CG,gBAAiB/nF,EAAO,GAAGshC,eAPpBumD,GA3DkBoO,CAAc9S,IAvBvB,IAuB2C,CAACA,KAAU,GAClE+S,GAAYh6B,EAAAA,GAAAA,GAAY5+D,GACxB64F,GAAej6B,EAAAA,GAAAA,GAAYz+C,GAC3BwL,EAAgB8+D,EAAkB7kE,MAAAA,OAAH,EAAGA,EAAa6kE,QAAmB7qF,GAEtEa,GAAIqO,EADA,SAEJ+c,EAFI,OAGJ3T,EAHI,QAIJtM,EAJI,UAKJygB,EALI,KAMJD,GACET,GAAiB,IAErBmW,EAAAA,EAAAA,KAAU,KACJ82D,IAAc54F,GAChBw4F,MAED,CAACI,EAAW54F,EAAOw4F,KAEtB12D,EAAAA,EAAAA,KAAU,KACJm9B,GAAawrB,GAAmBlrF,GAClC84F,EAAe,CAAE94F,OAAAA,EAAQ4gB,SAAUsqE,EAAiBzqF,MAAAA,MAErD,CAACA,EAAOi/D,EAAWo5B,EAAgB94F,EAAQkrF,IAE9C,MAAM0N,GAAWhxD,EAAAA,EAAAA,KAAY,KAC3BkxD,EAAe,CACb94F,OAAAA,EAAQ4gB,SAAUsqE,EAAiBzqF,MAAAA,EAAOkY,OAAAA,MAE3C,CAACA,EAAQ3Y,EAAQS,EAAOq4F,EAAgB5N,IAc3C,OAZA3oD,EAAAA,EAAAA,KAAU,KACJm9B,GAAanwD,IAAU+c,GAAajgB,MAAAA,GAAAA,EAAS9G,QAC/CyzF,IAEAC,MAED,CAAC1pF,EAAOmwD,EAAWs5B,EAAY3sF,EAASigB,EAAU2sE,IAEjDK,IAAiB14E,GACnBm4E,EAAe,CAAEn4E,SAAU04E,IAGtB,CACL3vF,OAAAA,EACAzI,GAAIqO,EACJud,UAAAA,EACAR,SAAAA,EACAjgB,QAAAA,EACAosF,aAAcQ,EACdpsE,KAAMo+D,GAAep+D,EAAQ,IAAGjM,KAAYiM,SAASxsB,EACrDu4F,SAAAA,GsB8REW,CACF10F,SAAS8Q,GAAYpQ,QAAU0f,GAC/BjlB,EACAsmF,GACAjgE,IAIA1c,OAAQ6vF,GACR3vE,MAAO4vE,GACPC,oBAAqBC,IrB5WV,SACbj6B,EACA4mB,EACA6M,EACAD,GAEA,MAAOvpF,EAAQqvF,EAAYC,IAAgB5oD,EAAAA,GAAAA,MACpCqpD,EAAqBE,IAA0B71D,EAAAA,EAAAA,MAEhD81D,GAAsBjyD,EAAAA,EAAAA,KAAavkC,IAClC8vF,GAAgBD,EAMrB9H,IAAa,KACX,MAAM0O,GAA2B3G,GAAeD,GAAmB,IAChE7vF,QAAO,QAAC,QAAEinB,GAAH,SAAkBjnB,GAAUinB,EAAQxiB,SAASzE,MACvDu2F,EACEE,GAA2BA,EAAwBv0F,OAASu0F,OAA0Bz5F,MATxFu5F,OAAuBv5F,KAYxB,CAAC8yF,EAAaD,IA0BjB,OAxBA3wD,EAAAA,EAAAA,KAAU,KACR,GAAKm9B,GAAc4mB,EAAK/gF,OAOxB,GAF2B+gF,EAAKz5C,WAAW,KAEnB,CACtB,MAAMxpC,GAAS02F,EAAAA,GAAAA,GAAiBzT,EAAK0T,OAAO,IAAIhvE,MAAMqgE,IACtDwO,EAAoBx2F,EAASA,EAAO,GAAK,SAEzCu2F,OAAuBv5F,QAVvBu5F,OAAuBv5F,KAYxB,CAACw5F,EAAqBvT,EAAM5mB,EAAWu5B,KAE1C12D,EAAAA,EAAAA,KAAU,KACJm3D,GAAuBA,EAAoBn0F,QAAU+gF,EAAK/gF,OAAS,EACrEyzF,IAEAC,MAED,CAACS,EAAqBpT,EAAK/gF,OAAQyzF,EAAYC,IAE3C,CACLtvF,OAAAA,EACAkgB,MAAOovE,EACPS,oBAAAA,GqByTEO,CACFp1F,QAASsuF,GAAeA,EAAY5tF,QAAY2tF,GAAmBA,EAAgB3tF,QACnF+gF,GACA6M,EACAD,IAIAh7B,kBAAmBgiC,GADf,kBAEJtkC,GAFI,uBAGJwC,GAHI,sBAIJC,KACEC,EAAAA,GAAAA,GAAuBw+B,KAAiBW,KAAoBlG,GAAgBqG,MAAQE,MAElF,gBACJqC,GADI,YACaC,GADb,eAC0BhN,GAD1B,eAC0CC,GAD1C,oBAC0DgN,KAC5DvzD,EAAAA,EAAAA,KAAQ,KAAMwzD,EAAAA,EAAAA,IAA4B70F,EAAM8gD,IAAgB,CAAC9gD,EAAM8gD,IAErExrB,GAAUt1B,IAAQ80F,EAAAA,EAAAA,IAAY90F,GAC9B+0F,IAAWC,EAAAA,EAAAA,IAAuBh1F,IAElC,qBAAEi1F,GAAF,oBAAwBC,IErYjB,SACbj7B,EACA4mB,EACAt6E,GAEA,IADA43B,EACA,wDACA,MAAMg3D,GAAY9zD,EAAAA,EAAAA,KAAQ,KAAMizD,EAAAA,GAAAA,GAAiBzT,GAAMuU,QAAQ,CAACvU,KAC1D,qBAAEpoE,EAAF,sBAAwB48E,IAA0Br6E,EAAAA,EAAAA,MAClD8xD,EACHwoB,EAAAA,IAA0D,KAApCC,EAAAA,GAAAA,GAAqBJ,KACvCG,EAAAA,IAAsBl2F,QAAQyhF,EAAKt7D,MAAM,oBAE1CiwE,EAAcp2F,QAAQmH,IAAaumE,EAgBzC,OAdAhwC,EAAAA,EAAAA,KAAU,KAGwB,MAF5BqB,IAEA87B,GAAa6S,EACfr0D,EAAqB,CACnBzQ,MAAOstF,EAAAA,GAAqBH,EAAH,UAAeA,EAAU5vE,MAAM,qBAA/B,aAAe,EAAgC,MAEjEiwE,GAAgB1oB,GACzBuoB,OAID,CAACxU,EAAM/T,EAAeuoB,EAAuB58E,EAAsBwhD,EAAW97B,IAE1E,CACL82D,qBAAsBO,EACtBN,oBAAqBG,GFuW+BI,CACpDr2F,QAAQ+sF,GAAyBuI,KAAoBxkF,GAAYpQ,QACjE+gF,GACAwM,GACC9rC,IAEG,mBACJm0C,GADI,kBACgBC,GADhB,eACmCC,GADnC,YACmDC,KACrDC,EAAAA,GAAAA,GACF12F,QAAQ+sF,GAAyBuI,KAAoBxkF,GAAYpQ,QACjE2uF,GACAxmF,OACArN,EACA4zF,GACApC,EACAn0E,GACCspC,GAGGw0C,IAA4B5zD,EAAAA,EAAAA,KAAY,SAACpjC,GAAsD,IAAxCwlC,EAAwC,uDAAtByxD,EAAAA,GAC7E,MAAMlV,EAAY9/E,OAAO+/E,eACzB,IAAIj+B,EAEFA,EADEve,IAAYyxD,EAAAA,GACCjgE,SAASkH,cAA8B8lB,EAAAA,IAEvChtB,SAASoX,eAAe5I,GAEzC,MAAM0xD,GAAU74C,EAAAA,GAAAA,GAAWr+C,EAAM,CAAC,cAAe,aAAc,YAC5DJ,KAAK,IACLwtB,QAAQ,WAAY,KAEvB,GAAI20D,EAAUG,WAAY,CACxB,MAAMiV,EAAiBpV,EAAUE,WAAW,GAC5C,IAAImV,EAAAA,GAAAA,GAAuBD,EAAgB3xD,GAGzC,OAFAq8C,GAAsBqV,QACtBnzC,EAAaszC,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,KAK7D9H,GAAS,GAAEC,GAAQlyE,UAAW05E,KAG9B/R,uBAAsB,MACpBqS,EAAAA,GAAAA,GAAqBzzC,QAEtB,CAAC2rC,KAEE+H,IAAer0D,EAAAA,EAAAA,KAAY,KAC/B,MAAM2+C,EAAY9/E,OAAO+/E,eAEzB,GAAID,EAAUG,WAAY,CACxB,MAAMiV,EAAiBpV,EAAUE,WAAW,GAC5C,IAAImV,EAAAA,GAAAA,GAAuBD,EAAgBF,EAAAA,IAEzC,YADAjgE,SAAS0gE,YAAY,UAAU,GAKnCjI,GG1cW,SAA6C3N,GAC1D,MAAM6V,EAAY3gE,SAAS+iB,cAAc,OACzC49C,EAAUC,gBAAkB,OAC5BD,EAAUpoD,MAAMzxC,SAAW,WAC3B65F,EAAUpoD,MAAMmf,KAAO,WACvBipC,EAAUpoD,MAAMmuC,IAAM,WACtBia,EAAUlhD,UAAYqrC,EACtB9qD,SAAStJ,KAAKkhC,YAAY+oC,GAC1B,IAAIrpC,EAAUqpC,EAAUnV,UAExB,GAAIl0B,EAAQk0B,UAEV,KAAOl0B,EAAQk0B,WACbl0B,EAAUA,EAAQk0B,UAKtB,MAAMqV,EAAavpC,EAAQ4S,YAAangE,OAClCohF,EAAQnrD,SAAS8gE,cACjB/V,EAAY9/E,OAAO+/E,eAGzBG,EAAM4V,SAASzpC,EAASupC,GACxB1V,EAAM6V,OAAO1pC,EAASupC,GACtB9V,EAAUc,kBACVd,EAAUe,SAASX,GACnBnrD,SAAS0gE,YAAY,UAAU,GAE/B,MAAM/4F,EAASg5F,EAAUlhD,UAGzB,OAFAzf,SAAStJ,KAAKuqE,YAAYN,GAEnBh5F,EH0aGu5F,CAAoCxI,GAAQlyE,YACnD,CAACkyE,KAEEyI,IAAgB/0D,EAAAA,EAAAA,KAAY,WAAiC,IAAhCg1D,EAAgC,wDAC5DA,GACH3I,GAAQ,IAEVkB,GAAep0F,EAAAA,GACf45F,KACA3C,KACAoD,KAEIjuF,EAAAA,GAEFzG,YAAW,IAAMkvF,MA7RY,KA+R7BA,OAED,CAAC+E,GAAqB3C,GAAqBoD,GAAmBxF,KAG3DiH,IAAwBrxD,EAAAA,EAAAA,MAC9BqxD,GAAsB76E,QAAUy0E,IAChCl0D,EAAAA,EAAAA,KAAU,IACD,KACLs6D,GAAsB76E,UACtB26E,OAED,CAAC38F,EAAQ28F,GAAeE,KAE3B,MAAOC,GAAoBC,IIxdV,EACjB7I,EACAD,EACA+I,EACAL,EACA1G,EACAj2F,EACAC,EACAmB,EACAuV,EACAkN,KAEA,MAAM,YAAEo5E,EAAF,gBAAeC,IAAoBz8E,EAAAA,EAAAA,OAEzCwjE,EAAAA,GAAAA,IAAsB,IAAyB,IAAvBkZ,GAAuB,EAC7C,IAAKH,EACH,OAEF,IAAIG,MAAAA,OAAA,EAAAA,EAAmBj8F,MAAO87F,EAAc97F,GAC1C,OAGF,MAAMolF,GAAO8W,EAAAA,GAAAA,GAA0Bv5E,MAAAA,GAAAA,EAAcrf,KAAKe,OAASse,EAAem5E,EAAc3yF,QAAQ7F,MACxGyvF,EAAQ3N,GAERqD,uBAAsB,KACpB,MAAMphC,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IACxDD,IACFyzC,EAAAA,GAAAA,GAAqBzzC,GAAc,QAGtC,CAACy0C,EAAe/I,KAEnB1xD,EAAAA,EAAAA,KAAU,KACR,GAAKy6D,EACL,MAAO,KAEL,MAAMK,GAAS/yF,EAAAA,EAAAA,GAAkB4pF,EAAQlyE,SACnCb,EAASk8E,EAAO74F,KAAKe,OAAS83F,OAASh9F,EAC7C68F,EAAgB,CACdl9F,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAM2c,OAGjC,CAACnhB,EAAQg9F,EAAe9I,EAASgJ,EAAiBj9F,EAAUmB,IAE/D,MAAMk8F,GAA8B11D,EAAAA,EAAAA,KAAY,KACzCjxB,IAELgqD,EAAAA,EAAAA,KAAQ,KACNszB,GAAQmJ,EAAAA,GAAAA,GAA0BzmF,IAClC,MAAM4xC,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IACxDD,GACFohC,uBAAsB,MACpBqS,EAAAA,GAAAA,GAAqBzzC,GAAc,WAIxC,CAAC5xC,EAAOs9E,IAEL8I,GAAmBn1D,EAAAA,EAAAA,KAAY,KACnC+0D,IACAW,MACC,CAACX,EAAeW,IAEbR,GAAqBl1D,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAEpjC,EAAF,SAAQsR,IAAaxL,EAAAA,EAAAA,GAAkB4pF,EAAQlyE,SAEhDg7E,IAIAx4F,IAAS+4F,EAAAA,EAAAA,IAAgBP,IAK9BC,EAAY,CACV34F,UAAW04F,EAAc97F,GACzBsD,KAAAA,EACAsR,SAAAA,IAGF6mF,IACAW,KAXErH,OAYD,CAACgH,EAAaD,EAAe9I,EAAS+B,EAAiB0G,EAAeW,IAEnEE,GAAa51D,EAAAA,EAAAA,KAAY,KAC7B,IAAKo1D,EAAe,OACpB,MAAMK,GAAS/yF,EAAAA,EAAAA,GAAkB4pF,EAAQlyE,SACnCb,EAASk8E,EAAO74F,KAAKe,OAAS83F,OAASh9F,EAC7C68F,EAAgB,CACdl9F,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAM2c,MAE/B,CAACnhB,EAAQg9F,EAAe9I,EAASgJ,EAAiBj9F,EAAUmB,IAK/D,OAHAw/D,EAAAA,GAAAA,GAAkB48B,GAClBn7D,GAAgBm7D,GAET,CAACV,EAAoBC,IJsXmBU,CAC7CvJ,GACAD,GACA1B,EACAoK,GACA1G,GACAj2F,EACAC,EACAgH,EACA0P,EACAkN,GxB/da,EACflN,EACA3W,EACAC,EACAi0F,EACAD,EACA+I,KAEA,MAAM,UAAEU,EAAF,WAAalK,IAAe/yE,EAAAA,EAAAA,MAE5Bk9E,GAAc/1D,EAAAA,EAAAA,KAAY,CAACg2D,EAAqBC,KACpD,MAAMC,EAAc5J,EAAQlyE,QACxBg7E,IACAc,EAAYv4F,OACdm4F,EAAU,CAAE19F,OAAQ49F,EAAa39F,SAAU49F,EAAelnF,OAAOrM,EAAAA,EAAAA,GAAkBwzF,UAC1Dz9F,IAAhBy9F,GACTtK,EAAW,CAAExzF,OAAQ49F,EAAa39F,SAAU49F,OAE7C,CAACrK,EAAYwJ,EAAe9I,EAASwJ,IAGlCK,GAA2Bj3D,EAAAA,EAAAA,KAAQ,KAAMn2B,EAAAA,EAAAA,KAAUC,GAAOA,KAAMotF,EAAAA,IAAgB,IAAQ,CAACh+F,IAEzFi1F,GAAa51B,EAAAA,GAAAA,GAAYr/D,GACzBi+F,GAAe5+B,EAAAA,GAAAA,GAAYp/D,IAGjCsiC,EAAAA,EAAAA,KAAU,KACRxe,GAAgB/jB,EAChBgkB,GAAkB/jB,EAEX,KACL8jB,QAAgB1jB,EAChB2jB,QAAkB3jB,EAElBs9F,EAAY39F,EAAQC,MAErB,CAACD,EAAQC,EAAU09F,KAGtBp7D,EAAAA,EAAAA,KAAU,KACJviC,IAAWi1F,GAAch1F,IAAag+F,IAItCjB,GAAkBrmF,IAItBs9E,GAAQmJ,EAAAA,GAAAA,GAA0BzmF,IAE7BnN,EAAAA,IACHmgF,uBAAsB,KACpB,MAAMphC,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IACxDD,IACFyzC,EAAAA,GAAAA,GAAqBzzC,GAAc,SAIxC,CAACvoD,EAAQC,EAAU0W,EAAOs9E,EAAS0J,EAAa1I,EAAYgJ,EAAcjB,IAE7E,MAAM1W,EAAO4N,EAAQlyE,QAEfk8E,GAAW7+B,EAAAA,GAAAA,GAAYinB,IAC7B/jD,EAAAA,EAAAA,KAAU,KACHviC,GAAWC,GAAYg1F,IAAej1F,GAAUi+F,IAAiBh+F,GAAYi+F,IAAa5X,IAI3FA,EAAK/gF,OACPw4F,GAAyB,KACnBh6E,KAAkB/jB,GAAUgkB,KAAoB/jB,GAIpD09F,EAAY39F,EAAQC,MAGtB09F,EAAY39F,EAAQC,MAErB,CAACD,EAAQsmF,EAAM2O,EAAYiJ,EAAUD,EAAcF,EAA0B99F,EAAU09F,IAE1F,MAAMH,GAAa51D,EAAAA,EAAAA,KAAY,KACzB5nC,GAAUC,GACZ09F,EAAY39F,EAAQC,KAErB,CAACD,EAAQC,EAAU09F,KAEtB/8B,EAAAA,GAAAA,GAAkB48B,GAClBn7D,GAAgBm7D,IwBwYhBW,CAASxnF,EAAO3W,EAAQC,EAAUi0F,GAASD,GAAS1B,GzB1e5B,EACxBiJ,EACArG,EACA6H,MAEAz6D,EAAAA,EAAAA,KAAU,KACR1xB,eAAeutF,EAAYxwF,GACzB,IAAKA,EAAEywF,cACL,OAGF,MAAMC,EAAQ9iE,SAAS+iE,cACvB,GAAID,IAAU,CAAC7C,EAAAA,GAAmB+C,EAAAA,IAAyB12F,SAASw2F,EAAMp9F,IACxE,OAGF,MAAMu9F,EAAa7wF,EAAEywF,cAAcK,QAAQ,QAAQC,UAAU,EAlBxC,OAmBf,MAAEC,GAAUhxF,EAAEywF,cACpB,IAAIjQ,EAAgB,GAOpB,GALAxgF,EAAEm1B,iBACE67D,EAAMr5F,OAAS,IACjB6oF,QAAcyQ,EAAAA,GAAAA,GAA8BD,IAGzB,IAAjBxQ,EAAM7oF,QAAiBk5F,EAA3B,CAIA,GAAIrQ,EAAM7oF,OAAS,IAAMy3F,EAAe,CACtC,MAAM8B,QAAuBvhD,QAAQwhD,IAAI3Q,EAAMhrF,KAAK47F,GAC3Cna,GAAgBma,EAAKloE,KAAMkoE,EAAuB,IAAjB5Q,EAAM7oF,QAAgB0kF,GAAyBniF,SAASk3F,EAAK59F,UAEvG+zF,GAAgBx/E,GAAgBA,EAAYhE,OAAOmtF,KAGjDL,GACFjD,EAA0BiD,EAAYH,MAAAA,OAAb,EAAaA,EAAOp9F,KAMjD,OAFAs6B,SAAS2I,iBAAiB,QAASi6D,GAAa,GAEzC,KACL5iE,SAAS4I,oBAAoB,QAASg6D,GAAa,MAEpD,CAAC5C,EAA2BwB,EAAe7H,KyB6b9C8J,CAAkBzD,GAA2BrG,GAAgB5C,GAE7D,MAAM2M,IAAsBt3D,EAAAA,EAAAA,KAAY,KAClC2qD,GACFwK,OAED,CAACxK,EAAgBwK,KAEd5O,IAAmBvmD,EAAAA,EAAAA,KAAY/2B,MAAOu9E,EAAerJ,KACzDoQ,SAAqB53C,QAAQwhD,IAAI3Q,EAAMhrF,KAAK47F,GAASna,GAAgBma,EAAKloE,KAAMkoE,EAAMja,SACrF,IAEGoa,IAAoBv3D,EAAAA,EAAAA,KAAY/2B,MAAOu9E,EAAerJ,KAC1DoQ,GAAe,IACVx/E,YACM4nC,QAAQwhD,IAAI3Q,EAAMhrF,KAAK47F,GAASna,GAAgBma,EAAKloE,KAAMkoE,EAAMja,UAE3E,CAACpvE,KAEEypF,IAAwBx3D,EAAAA,EAAAA,KAAY,KACxCutD,GAAep0F,EAAAA,KACd,IAEGs+F,IAAaz3D,EAAAA,EAAAA,KAAY/2B,iBAAkD,IAA3CsG,EAA2C,wDAAzBhC,EAAyB,uCAC/E,GAAwB,yBAApB+rB,EACF,OAGF,IAAIo+D,EAAqB3pF,GAEzB,GAAIghF,GAAsB,CACxB,MAAM4I,QAAe9I,KACrB,GAAI8I,EAAQ,CACV,MAAM,KAAE5hD,EAAF,SAAQmkB,EAAR,SAAkB0mB,GAAa+W,EACrCD,EAAqB,OAAOza,GAC1B2M,GACA7zC,GACA,EACA,CAAEyB,MAAO,CAAE0iB,SAAAA,EAAU0mB,SAAAA,OAK3B,MAAM,KAAEhkF,EAAF,SAAQsR,IAAaxL,EAAAA,EAAAA,GAAkB4pF,GAAQlyE,SAErD,IAAKs9E,EAAmB/5F,SAAWf,IAASwtE,EAC1C,OAIF,MAAM,iBAAE5nE,IAAqBzD,EAAAA,EAAAA,MAEvB64F,EAAYF,EAAmB/5F,OA/Wd,KADA,KAiXvB,IAAIf,MAAAA,OAAA,EAAAA,EAAMe,QAASi6F,EAAW,CAC5B,MAAMC,EAAcj7F,EAAKe,OAASi6F,EAYlC,YAXA90E,GAAW,CACT/b,KAAM,CACJrL,QAAS,4CACTo8F,WAAY,CACV,sBAAuBD,EACvB,aAAcA,EAAc,EAAI,IAAM,IAExC7wF,aAAa,KAOnB,MAAM25C,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IAE5D,GAAI82C,EAAmB/5F,QAAUf,EAAM,CACrC,GAAIg2F,KAAaz/D,GAAS,CACxB,MAAM4kE,GAAax1F,EAAAA,EAAAA,GAAcC,GAC3Bw1F,EAA0BxL,GAA2BpyE,SACtDrX,KAAKG,MAAM60F,EAAavL,GAA2BpyE,SAClD69E,EAAyBrF,GAASsF,cAAgBtF,GAASsF,aAAeH,EAEhF,GACGC,GAA2BA,EAA0BpF,GAASuF,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBrF,GAASsF,aAAgBH,EACzBnF,GAASuF,QAAUH,EAWvB,OAVAl1E,GAAW,CACT/b,KAAM,CACJrL,QAASP,GAAK,gBAAgBo/D,EAAAA,EAAAA,IAAoB69B,IAClDC,YAAY,EACZrxF,aAAa,UAIjB25C,MAAAA,GAAAA,EAAch/B,SAMlBjW,GAAY,CACV9O,KAAAA,EACAsR,SAAAA,EACAH,YAAa2pF,EACbnqF,YAAAA,EACAgC,SAAAA,IAIA66D,GACFpwE,GAAgB,CACduT,YAAAA,EACAgC,SAAAA,IAIJi9E,GAA2BpyE,SAAU7X,EAAAA,EAAAA,GAAcC,GAEnDopF,GAAW,CAAExzF,OAAAA,EAAQ+W,WAAW,IAE5B9C,EAAAA,IAAUs0C,GAAgBA,IAAiB/sB,SAAS+iE,eACtD/W,GAA8Bj/B,GAIhCohC,uBAAsB,KACpBgT,UAED,CACDz7D,EAAiBvrB,GAAaghF,GAAsB3kB,EAAcwhB,GAAYxzF,EAC9E28F,GAAelG,GAAoB/rE,GAAY8vE,GAAUz/D,GAASznB,GAAa1R,GAAiBmB,GAAMmxF,KAGlGgM,IAAqBt4D,EAAAA,EAAAA,KAAY,KACT,YAAxByrD,MAAAA,OAAA,EAAAA,EAAejyF,OACnB+sB,GAAkB,CAChB5e,MAAOvP,EAAQA,OAAAA,EAAQ0tB,eAAe,EAAMxe,IAAKmkF,EAAcnkF,QAEhE,CAACmkF,EAAellE,GAAmBnuB,IAEhCmgG,IAA+Bv4D,EAAAA,EAAAA,KAAY,KAC/CguD,KACAJ,OACC,CAACI,GAAiBJ,KAEf4K,IAA2Bx4D,EAAAA,EAAAA,KAAY,KAC3C6tD,KACAM,KACAJ,OACC,CAACF,GAAqBM,GAAiBJ,KAEpC0K,IAAwBz4D,EAAAA,EAAAA,KAAY,CACxC04D,EAA4BnrF,KAE5B,GAAImrF,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAEp/F,EAAF,QAAMisB,EAAN,SAAehW,GAAampF,EAOlC,YANAzM,GAAoB,CAClB3yF,GAAAA,EACAisB,QAAAA,EACAhY,YAAAA,EACAgC,SAAAA,IAKJ,MAAM,SAAEA,KAAaopF,GAAaD,GAAQ,GAErCA,GAAyC,IAAjCn7F,OAAOC,KAAKm7F,GAAUh7F,OAGjC+N,GAAY,IACPgtF,EACHnrF,YAAAA,IAJGkqF,GAAWx6F,QAAQsS,GAAWhC,KAOpC,CAACkqF,GAAYxL,GAAqBvgF,MAErCivB,EAAAA,EAAAA,KAAU,KACJ5gC,GACFkzF,IAAiB1/E,IACfkrF,GAAsB1+F,EAAsBwT,QAG/C,CAACxT,EAAsB0+F,GAAuBxL,MAEjDtyD,EAAAA,EAAAA,KAAU,KACJ6vD,IACF6B,GAAQ7B,GACR2B,KACApK,uBAAsB,KACpB,MAAMphC,EAAe/sB,SAASoX,eAAe6oD,EAAAA,KAC7CO,EAAAA,GAAAA,GAAqBzzC,GAAc,SAGtC,CAAC6pC,EAAe2B,KAEnB,MAAMlV,IAAsBj3C,EAAAA,EAAAA,KAAY,SACtC/5B,EAAqBsJ,EAAoBqpF,GACtC,IADqE5D,EACrE,wDACH/uF,EAAU,IACLA,EACH+tB,qBAAqB,GAGnB+2D,GAAkB6N,GACpBhM,KACAK,IAAiB1/E,IACfs/E,KACA4L,GAAsB,CAAExyF,QAAAA,EAASsJ,SAAAA,GAAYhC,GAC7Cw0E,uBAAsB,KACpBgT,GAAcC,WAIlBtpF,GAAY,CAAEzF,QAAAA,EAASsJ,SAAAA,IACvBwyE,uBAAsB,KACpBgT,GAAcC,SAGjB,CACDjK,EAAgB6B,GAAqBK,GAAiBJ,GAA2B4L,GACjF1D,GAAerpF,KAGXmtF,IAAkB74D,EAAAA,EAAAA,KAAY,CAAC1qB,EAAe/F,EAAoBqpF,KAClE7N,GAAkB6N,GACpBhM,KACAK,IAAiB1/E,IACfs/E,KACA4L,GAAsB,CAAEnjF,IAAAA,EAAK/F,SAAAA,GAAYhC,GACzCw0E,uBAAsB,KACpBgT,IAAc,WAIlBrpF,GAAY,CAAE4J,IAAAA,EAAK/F,SAAAA,IACnBwyE,uBAAsB,KACpBgT,IAAc,SAGjB,CACDhK,EAAgB6B,GAAqBK,GAAiBJ,GAA2B4L,GACjF1D,GAAerpF,KAGXotF,IAAwB94D,EAAAA,EAAAA,KAAY,CACxC+4D,EAA4DxpF,EAAoBqpF,KAEhF,GAAwB,yBAApBt/D,EACF,OAGEyxD,GAAkB6N,EACpB3L,IAAiB1/E,IACfkrF,GAAsB,CACpBn/F,GAAIy/F,EAAaz/F,GACjBisB,QAASwzE,EAAaxzE,QACtBhW,SAAAA,GACChC,MAGL0+E,GAAoB,CAClB3yF,GAAIy/F,EAAaz/F,GACjBisB,QAASwzE,EAAaxzE,QACtBhW,SAAAA,IAIJ,MAAMoxC,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IACxDv0C,EAAAA,IAAUs0C,GAAgBA,IAAiB/sB,SAAS+iE,eACtD/W,GAA8Bj/B,GAGhCirC,GAAW,CAAExzF,OAAAA,EAAQ+W,WAAW,IAChC4yE,uBAAsB,KACpBgT,UAED,CACD38F,EAAQwzF,GAAYtyD,EAAiBm/D,GAAuBxL,GAAiB8H,GAAe9I,GAC5FlB,IAGIiO,IAAyBh5D,EAAAA,EAAAA,KAAY,KACzC4rD,GAAW,CAAExzF,OAAAA,EAAQ+W,WAAW,IAChC4yE,uBAAsB,KACpBgT,UAED,CAAC38F,EAAQwzF,GAAYmJ,KAElBkE,IAAiBj5D,EAAAA,EAAAA,KAAanuB,IAC9Bk5E,GACFkC,IAAiB1/E,IACfkrF,GAAsB,CAAE5mF,KAAAA,GAAQtE,MAElCw+E,OAEArgF,GAAY,CAAEmG,KAAAA,IACdk6E,QAED,CAACA,GAAgB0M,GAAuBxL,GAAiBvhF,GAAaq/E,IAEnEmO,IAAmBl5D,EAAAA,EAAAA,KAAY,KAC/B+qD,EACFkC,IAAiB1/E,IACfkrF,GAAsB,CAAElpF,UAAU,GAAQhC,MAGvCkqF,IAAW,KAEjB,CAACgB,GAAuBhB,GAAYxK,GAAiBlC,IAElDoO,IAAmBn5D,EAAAA,EAAAA,KAAaxmC,IACvB,aAATA,GACFqyF,GAAsB,CAAEhzF,MAAO,KAC/BizF,GAAkB,CAAEjzF,WAAOJ,MAE3BqzF,GAAkB,CAAEjzF,MAAO,KAC3BgzF,GAAsB,CAAEhzF,WAAOJ,OAEhC,CAACozF,GAAuBC,KAErBsN,IAAuBp5D,EAAAA,EAAAA,KAAY,KACvC,MAAM2gB,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IAEvDr7C,EAAAA,IAA2Bo7C,IAAiB/sB,SAAS+iE,eAK1Dh2C,MAAAA,GAAAA,EAAch/B,OACd7iB,YAAW,KACT+uF,KACAE,OAzoBgC,MAkoBhCA,OASD,CAACA,GAAgBF,KAEdwL,IAAuBr5D,EAAAA,EAAAA,KAAY,KACvC,MAAM2gB,EAAe/sB,SAASkH,cAA8B8lB,EAAAA,IAE5D,IAAKr7C,EAAAA,IAA2Bo7C,IAAiB/sB,SAAS+iE,cAIxD,OAHA9I,KACAG,UACAE,KAIFvtC,MAAAA,GAAAA,EAAch/B,OACd7iB,YAAW,KACT+uF,KACAG,KACAE,OA3pBgC,OA6pBjC,CAACL,GAAqBG,GAAiBE,KAEpCoL,IAA0Bt5D,EAAAA,EAAAA,KAAY,KAC1C3lC,GAAS,CAAEf,GAAIlB,EAAQC,SAAAA,EAAUmB,KAAM,gBACtC,CAACa,GAAUjC,EAAQC,KAEtBsiC,EAAAA,EAAAA,KAAU,KACJgT,GAAsBpoC,EAAAA,IACxByoF,OAED,CAACrgD,EAAoBqgD,MAExBrzD,EAAAA,EAAAA,KAAU,KACHykB,IAEDV,EACFgwC,KAEA5vF,YAAW,KACT6vF,OA/qB0B,QAkrB7B,CAACjwC,EAAoBiwC,GAAaD,GAActvC,IAEnD,MAAMm6C,IAAoBv5D,EAAAA,EAAAA,KAAY,KACpC,OAAQ6vD,IACN,KAAKlG,GAAgBqG,KACnByH,KACA,MACF,KAAK9N,GAAgBsG,OACdrB,KACL,MACF,KAAKjF,GAAgBmG,KACnBoF,KACA,MACF,KAAKvL,GAAgBoG,SACfhB,IACFD,KAEF7B,IAAiB1/E,IACfkrF,GAAsB,GAAIlrF,SAM/B,CACDsiF,GAAiB4H,GAAY7I,GAAqBsG,GAAoBnG,GAAsB9B,GAC5F6B,GAAqB2J,KAGjBe,GAA6B3J,KAAoBlG,GAAgBsG,SAAWzK,GAE5E+P,IAAoB99B,EAAAA,GAAAA,GAAYkzB,GAAgB,GAChD8O,GAAwB9O,GAAkB4K,GAE1CmE,GAAuB,IAAIjrF,KACjCirF,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAIprF,KAC7BorF,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQnK,IACN,KAAKlG,GAAgBmG,KACnBkK,GAAsB,sBACtB,MACF,KAAKrQ,GAAgBsG,OACnB+J,GAAsBR,GAClB,sCACA,uBAGR,MAAM99D,IAAYoE,EAAAA,GAAAA,GAChB,YACC4e,GAAsB,QACvB+vC,IAAmB,kBAGfwL,IAA4Bn6D,EAAAA,GAAAA,GAChC,6BACCsf,GAAW,YACZmvC,GACKT,IAAoB,cACpBA,IAAoB,cAGrBoM,IAAsBl6D,EAAAA,EAAAA,KAAY,KACtCitD,IAAiB1/E,IACfkrF,GAAsB,GAAIlrF,QAE3B,CAACkrF,GAAuBxL,KAErBkN,GAAStK,KAAoBlG,GAAgBmG,KAC/CoF,GACArF,KAAoBlG,GAAgBoG,SAAWmK,GAC7CzC,GAEA2C,GAA0B3O,GAAyC,cAAxBA,MAAAA,OAAA,EAAAA,EAAejyF,MAEhE,OACE,0BAAKkiC,UAAWA,IACb8pD,IAAkBpmC,GACjB,mBAAC,GAAD,CACEr9C,OAAQ2pF,IAAkB2O,GAAAA,EAAAA,KAC1BC,UAAW5O,IAAkB2O,GAAAA,EAAAA,WAA2B5N,KAAsB4N,GAAAA,EAAAA,UAC9EE,OAAQ5O,EACR/F,aAAcW,KAGlB,mBAAC,GAAD,CACEnuF,OAAQA,EACRC,SAAUA,EACV63F,sBAAuBA,GACvBniF,YAAaA,GACbysF,QAASzsF,GAAYpQ,OAAS+gF,GAAO,GACrCyM,iBAAkBA,EAClBj7E,cAAeA,EACfpK,aAAcA,EACds5C,QAASA,EACT7R,eAAgBA,EAChBktD,gBAAiBpO,GACjBpC,kBAAmBA,EACnBn0E,cAAeA,EACfk2E,eAAgBA,GAChBjB,eAAgBA,EAChB2P,aAAcxB,GACdiB,OAAQ1C,GACRkD,gBAAiBT,GACjBU,aAAcrD,GACdzP,QAAS0P,KAEX,mBAAC,GAAD,CACEz1F,OAAQD,EAAUC,OAClBF,OAAQC,EAAUD,OAClBg5F,kBAAmB9tD,EACnB+6C,QAASiE,GACToO,OAAQlB,KAETQ,IACC,mBAAC,GAAD,CACE13F,OAAQqsF,GACRpb,WAAgC,cAApB3zE,EACZgoC,QAASinD,GACT5yF,QAAS+9F,KAGb,mBAAC,GAAD,CACE13F,OAAQksF,GACR5mD,QAAS8mD,GACT/1F,OAAQA,EACR0iG,iBAAkB3oF,EAClBI,UAAWA,KAEb,mBAAC,GAAD,CACExQ,OAAQouF,GACR9oD,QAAS+oD,GACT2K,iBAAkB1K,GAClB2K,cAAe1K,KAEjB,mBAAC,GAAD,CACEvuF,OAAQyuF,GACR7oF,MAAO8oF,GACPvrE,UAAWwrE,GACXE,iBAAkBA,GAClBlsE,SAAUisE,GACVsK,eAAgBnC,GAChB9H,SAAUC,GACV5pD,QAASypD,GACToK,gBAAiB3tD,EACjBilD,YAAaA,KAEf,mBAAC,GAAD,CACEzwF,OAAQ6vF,GACRuJ,aAAcl+F,QAAQquF,GACtBC,YAAawG,GACb90D,QAAS+7D,GACT3xD,QAASwqD,KAEX,0BAAKv4F,GAAG,mBACN,0BAAKoiC,UAAU,eAAeqK,IAAKqmD,KACnC,mBAAC,GAAD,CAAyBtE,QAASwP,KAClC,mBAAC,GAAD,CACEl/F,OAAQA,EACRC,SAAUA,EACVuwF,YAAc76E,GAAYpQ,OAAgB,GAAP+gF,GACnCnuC,UAAWkiD,KAEb,0BAAK/2D,UAAU,yBACZijB,GAAiB8sC,GAAwC,WAAvBA,EAAcjyF,OAAsBmxF,GAEnE,mBAAC,GAAD,CACE5oF,QAAS28E,KAASqQ,GAClB9xD,QAASq7D,GACT17F,KAAM6uF,EAAc7uF,KACpBo/B,WAAY/+B,QAAQ8xF,MAGzBpwC,GAAiBy7C,KAA2C,IAAhB7O,IAA0BwD,KACjEpE,GACJ,mBAAC,GAAD,CACEjvD,WAAWoE,EAAAA,GAAAA,GAAe,eAAgB6tD,IAAwB,aAClErkF,OAAK,EACLinC,cAA0B93C,IAAhB8yF,EACVjuD,MAAM,cACNumD,WAAY0U,GACZ14D,UAAU,6BAEV,wBAAGnE,UAAU,8BAGhBgxD,KAAkBnC,GAAcn4E,IAC/B,mBAACqrB,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNL,QAASgxD,GAAmBE,GAAkBkL,GAC9Cx5D,UAAW1kC,GAAK,sBAChBugC,WAAWoE,EAAAA,GAAAA,GAAe,iBAAkBstD,GAA6BhzE,SAAW,qBAEpF,mBAACkiC,GAAA,EAAD,CACEprC,KAAMq5E,EACN1sF,KAAMuU,EACNsrB,KAAK,UAIVn4B,EAAAA,GACC,mBAACk4B,GAAA,EAAD,CACE/B,UAAWu+D,GACX3wF,OAAK,EACLg0B,MAAM,cACNL,QAAS6wD,GAAmBE,GAAkBoL,GAC9Cv5D,UAAU,gCAEV,wBAAGnE,UAAU,eACb,wBAAGA,UAAU,kBACZoyD,KAAqBS,IAAsB,mBAAClxD,GAAA,EAAD,CAASC,MAAM,UAG7D,mBAAC,GAAD,CACE5B,UAAWoyD,GAAmB,YAAc,GAC5CxkF,OAAK,EACLg0B,MAAM,cACNumD,WAAY2U,GACZ34D,UAAU,gCAEV,wBAAGnE,UAAU,gBAGjB,mBAAC0/D,GAAA,EAAD,CACE9hG,GAAG,qBACHlB,OAAQA,EACRC,SAAUA,EACVqmF,KAAO3wE,GAAYpQ,OAAgB,GAAP+gF,GAC5Bj8C,YACEssD,IAAwBljE,IA/5BG,IAg6BvB,GACAm/D,GAA0B7vF,GAAK,WAErCkgG,kBAAmBtK,GACnBuK,aAAcl8C,IAAYrxC,GAAYpQ,OACtC49F,oBAAqBh2F,EAAAA,IAA2BuoF,GAChD0N,4BAA6BjI,IAAsBpD,IAAwBK,GAC3EiL,SAAUpP,GACV8N,OAAQA,GACRuB,kBAAmB1N,KAEpB3C,GAAsBpuF,QAAQwzF,KAC7B,mBAACpzD,GAAA,EAAD,CAASC,MAAM,SAEhBwtD,GACC,mBAACrtD,GAAA,EAAD,CACEn0B,OAAK,EACL8+E,OAAK,EACL1sD,UAAU,mBACV4B,MAAM,cACNL,QAASq8D,GACTz5D,UAAU,2BAEV,wBAAGnE,UAAU,mBAGhByuD,IAAyB4E,KAAyBpE,GACjD,mBAAC,GAAD,CACEjvD,UAAW8xD,GAAoB,YAAc,GAC7ClkF,OAAK,EACLg0B,MAAM,cACNumD,WAAY4J,GACZ5tD,UAAU,6BAEV,wBAAGnE,UAAU,sBAGhBqzD,IAAwBC,IACvB,2BAAMtzD,UAAU,oBACbigE,EAAAA,EAAAA,IAA0B3M,GAAoBG,GAAmB/0E,UAGtE,mBAAC,GAAD,CACEhiB,OAAQA,EACRmtF,iBAAkBwJ,KAAyBpE,EAC3CnF,eAAgBA,GAChBC,eAAgBA,GAChBG,aAAcW,GACdV,aAAcriE,GACdiQ,YAAas3D,EACbpF,cAAeA,GACfD,eAAgBA,GAChBzhE,MAAOA,KAERkmE,GACC,mBAAC,GAAD,CACEztF,UAAWytF,EACXpoF,OAAQyrF,GACRnmD,QAASqmD,KAGZnC,GACC,mBAAC,GAAD,CACExpF,OAAQ4rF,GACRpC,YAAaA,EACblkD,QAASwmD,KAGb,mBAAC,GAAD,CACEz1F,OAAQA,EACRC,SAAUA,EACV0J,OAAQ+wF,GACR8I,gBAAiB3kB,KAEnB,mBAAC,KAAD,CACEl1E,OAAQwxF,GACRsI,OAAQpI,GACRpsD,QAASmsD,GACTsI,cAAepI,GACf1H,eAAgBA,KAElB,mBAAC,GAAD,CACE5zF,OAAQA,EACRC,SAAUA,EACV0J,OAAQ+rF,IAAoBnB,GAC5B6F,YAAaA,GACbD,gBAAiBA,GACjB//B,OAAQg8B,GACRnnD,QAAS2mD,GACT8N,cAAelI,GACfgI,gBAAiB3kB,GACjB8kB,YAAalD,GACbmD,eAAgB3H,GAChB4H,aAAc9C,GACdnN,eAAgBA,OAIrB+C,IACC,mBAACtxD,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,SACN5B,UAAU,SACVuB,QAAS4xD,GACThvD,UAAU,0BAEV,wBAAGnE,UAAU,iBAGjB,mBAAC+B,GAAA,EAAD,CACEsI,IAAKmpD,GACL5lF,OAAK,EACLg0B,MAAM,YACN5B,WAAWoE,EAAAA,GAAAA,GAAe+vD,IAAkBzwC,GAAW,YAAa2vC,IAAwB,aAC5Fx+C,SAAUipD,GACV35D,UAAW1kC,GAAK6+F,IAChB/8D,QAASs8D,GACT/sC,cACEqjC,KAAoBlG,GAAgBqG,MAAQE,GAAwBliC,QAAoBv1D,GAG1F,wBAAGijC,UAAU,cACb,wBAAGA,UAAU,kBACb,wBAAGA,UAAU,wBACb,wBAAGA,UAAU,gBAEdw0D,IACC,mBAAC,KAAD,CACEnuF,OAAQuwF,GACRoI,aAAentD,OAAoC90C,EAAnBygG,GAChCgD,eAAiBnR,OAAuCtyF,EAAtByhG,GAClC7yD,QAASmpB,GACT5f,oBAAqB6f,GACrByqC,gBAAiB3tD,IAGpB2/C,QK/sCP,IAAe9xD,EAAAA,EAAAA,KAR0B6K,IACvC,MAAM,SAAE7gC,GAAa6gC,EACfk2D,GAAeh2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBhhC,GAAU,GAG/E,OAAO+2F,EAAe,mBAACA,EAAiBl2D,QAAYxtC,KCGtD,IAAe2iC,EAAAA,EAAAA,KARkC6K,IAC/C,MAAM,SAAE7gC,GAAa6gC,EACfm2D,GAAuBj2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBhhC,GAGrF,OAAOg3F,EAAuB,mBAACA,EAAyBn2D,QAAYxtC,KCGtE,IAAe2iC,EAAAA,EAAAA,KARmC6K,IAChD,MAAM,OAAElkC,GAAWkkC,EACbo2D,GAAwBl2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0BrkC,GAGvF,OAAOs6F,EAAwB,mBAACA,EAA0Bp2D,QAAYxtC,KCGxE,IAAe2iC,EAAAA,EAAAA,KAR0B6K,IACvC,MAAM,OAAElkC,GAAWkkC,EACbq2D,GAAen2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBrkC,GAGrE,OAAOu6F,EAAe,mBAACA,EAAiBr2D,QAAYxtC,KCGtD,IAAe2iC,EAAAA,EAAAA,KAR0B6K,IACvC,MAAM,OAAElkC,GAAWkkC,EACbs2D,GAAep2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBrkC,GAGrE,OAAOw6F,EAAe,mBAACA,EAAiBt2D,QAAYxtC,KCGtD,IAAe2iC,EAAAA,EAAAA,KARyB6K,IACtC,MAAM,OAAElkC,GAAWkkC,EACbu2D,GAAcr2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBrkC,GAGnE,OAAOy6F,EAAc,mBAACA,EAAgBv2D,QAAYxtC,KCKpD,IAAe2iC,EAAAA,EAAAA,KAVuC6K,IACpD,MAAM,uBAAEnZ,GAA2BmZ,EAC7Bw2D,GAA4Bt2D,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BtZ,GAI/C,OAAO2vE,EAA4B,mBAACA,EAA8Bx2D,QAAYxtC,KCChF,IAAe2iC,EAAAA,EAAAA,KAR8B6K,IAC3C,MAAM,OAAElkC,GAAWkkC,EACby2D,GAAmBv2D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBrkC,GAG7E,OAAO26F,EAAmB,mBAACA,EAAqBz2D,QAAYxtC,KCyGxDkkG,GAA2Bp3F,EAAAA,GAA0B,IAAMxK,EAAAA,QAAsBtC,EAEvF,SAASmkG,GAAQ92C,GACf,MAAqB,SAAdA,EAAK+2C,MAAmB/2C,EAAKtsD,MAAQ8jF,EAAAA,GAAAA,IAAkCx3B,EAAKtsD,MAGrF,MAyaA,IAAe4hC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IACC,MAAM8rB,GAAQga,EAAAA,EAAAA,IAAY9lC,IAExB2kG,UAAWC,EAAqBC,WAAYC,EADxC,gBAC0DvgB,EAD1D,aAC2EwgB,GAC7E/kG,EAAOgjB,SAASgiF,OAAOl5E,IAAU,IAE/B,aAAEve,GAAiBvN,EAAO2B,SAC1BJ,GAAqBpB,EAAAA,EAAAA,IAAyBH,IAC9C,kBACJsN,EAAmB1B,OAAO,QAAE+tB,GADxB,wBACmC7E,EADnC,aAC4D5P,GAC9DllB,EAEEiiC,EAAoB,CACxBnW,MAAAA,EACAg5E,iBAAAA,EACAvgB,gBAAAA,EACAwgB,aAAAA,EACAz3F,kBAAAA,EACAkoC,oBAAoBjvC,EAAAA,EAAAA,IAAyBvG,GAC7C4kG,oBAAAA,EACAK,qBAAsBngG,QAAQsI,EAAAA,KAA2B8S,EAAAA,EAAAA,IAAwBlgB,IACjFumD,oBAAoBrR,EAAAA,EAAAA,IAAqBl1C,GACzCkQ,mBAAoBlQ,EAAOiQ,QAAQC,mBACnCg1F,mBAAoBpgG,QAAQ9E,EAAOiQ,QAAQkgB,SAC3Cg1E,kBAAmBrgG,QAAQ9E,EAAOqL,aAClC+5F,uBAAwBtgG,QAAQ9E,EAAOoL,cACvCyqB,eAAgB71B,EAAOgjB,SAAS8S,MAAMD,eACtC4wB,qBAAsB77C,KAAKC,IAAI,EAAG7K,EAAO2B,SAAS4L,aAAa/H,OAAS,GACxEsvB,wBAAAA,EACA5P,aAAAA,GAGF,IAAK3jB,IAAuBo4B,EAAQC,OAClC,OAAOqI,EAGT,MAAM,OAAEhiC,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CgnB,GAAYC,EAAAA,EAAAA,IAASvoB,GACrByF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B0P,GAAMC,EAAAA,EAAAA,IAAc5P,EAAQC,GAC5BqmD,GAAYhoB,EAAAA,EAAAA,IAAgBt+B,EAAQC,IAClCA,OAAQ6kB,EAAavgB,UAAWwgB,GAAmB/kB,EAAOsG,YAE5D+5E,EAAU36E,IAAQ2/F,EAAAA,EAAAA,IAAiB3/F,EAAMxF,GACzColG,GAAkB1vD,EAAAA,EAAAA,IAA0B51C,EAAQC,GACpDslG,EAA0C,WAApBr+F,EACtBs+F,EAA6C,cAApBt+F,EACzBouC,EAAmC,WAApBpuC,GAAgChH,IAAakB,EAAAA,GAC5DwzC,EAAY9vC,QAAQY,IAAQuvC,EAAAA,EAAAA,IAAcvvC,IAC1CmwC,EAAe/wC,QACnBY,GAAQ4vC,IAAiBV,IAAakB,EAAAA,EAAAA,IAAiBpwC,KAAUA,EAAK8yB,aAElEid,EAAgB3wC,QAAQ6K,IAAO+lC,EAAAA,EAAAA,IAAoB11C,EAAQ2P,EAAIxO,KAC/Dw0C,GAAeF,GAAiB6vD,EAEtC,MAAO,IACFrjE,EACHhiC,OAAAA,EACAC,SAAAA,EACAgH,gBAAAA,EACAqhB,UAAAA,EACAk9E,sBAAuB3gG,QAAQY,MAAAA,OAAD,EAACA,EAAMsd,UACrCq9D,SAAUklB,KAAyB7/F,GAAQ26E,KAAailB,EACxDC,oBAAAA,EACAC,uBAAAA,EACAE,wBAAyBhgG,MAAAA,OAAF,EAAEA,EAAMggG,wBAC/BC,oBAAqBjgG,MAAAA,OAAF,EAAEA,EAAMigG,oBAC3BC,uBACE1lG,IAAakB,EAAAA,IACV0D,SAASygG,IAAuBj/C,MAAAA,OAAxB,EAAwBA,EAAW9gD,UAC3CV,QAAQggB,GAAeC,GAE5B0iC,oBAAqBnB,EAAYA,EAAU9gD,OAAS,EACpD2lC,4BAA6BnrC,EAAOmrC,4BACpC59B,aAAAA,EACAqnC,UAAAA,EACAiB,aAAAA,EACAF,YAAAA,EACAF,cAAAA,KA/EcjQ,EAzaiB,IAmC/B,IAnCgC,OACpCvlC,EADoC,SAEpCC,EAFoC,gBAGpCgH,EAHoC,UAIpCqhB,EAJoC,oBAKpCg9E,EALoC,aAMpCh4F,EANoC,QAOpC8yE,EAPoC,wBAQpCqlB,EARoC,oBASpCC,EAToC,uBAUpCC,EAVoC,oBAWpCn+C,EAXoC,iBAYpCq9C,EAZoC,MAapCh5E,EAboC,gBAcpCy4D,EAdoC,aAepCwgB,EAfoC,kBAgBpCz3F,EAhBoC,mBAiBpCkoC,EAjBoC,oBAkBpCovD,EAlBoC,qBAmBpCK,EAnBoC,mBAoBpC1+C,EApBoC,mBAqBpCr2C,EArBoC,mBAsBpCg1F,EAtBoC,kBAuBpCC,EAvBoC,uBAwBpCC,EAxBoC,eAyBpCvvE,EAzBoC,4BA0BpCsV,EA1BoC,qBA2BpCsb,EA3BoC,UA4BpC7R,EA5BoC,sBA6BpC6wD,EA7BoC,aA8BpC5vD,EA9BoC,YA+BpCF,EA/BoC,cAgCpCF,EAhCoC,wBAiCpC3gB,EAjCoC,aAkCpC5P,GACI,EACJ,MAAM,SACJhjB,EADI,iBAEJmV,EAFI,SAGJwuF,EAHI,iBAIJ19E,EAJI,qBAKJpoB,EALI,sBAMJ0B,EANI,kBAOJqkG,EAPI,aAQJC,EARI,YASJnvD,EATI,eAUJtsB,EAVI,WAWJwsB,IACEp2B,EAAAA,EAAAA,OAEIkT,MAAOF,IAAgBm0B,EAAAA,GAAAA,KAEzB7kD,GAAO+hC,EAAAA,GAAAA,MACNwuD,EAAeyS,KAAoBhiE,EAAAA,EAAAA,IAASk+D,GAAAA,EAAAA,OAC5C+D,GAAYC,KAAiBliE,EAAAA,EAAAA,OAC7BmiE,GAAcC,KAAmBpiE,EAAAA,EAAAA,OACjCqiE,GAAkBC,KAAuBtiE,EAAAA,EAAAA,KAAS,GAEnDo8C,GAAWwlB,IACflyE,EAAck1B,EAAAA,IAEZpT,GAAsB9hB,EAAcG,EAAAA,IACjCH,EAAco1B,EAAAA,IAEjBp1B,GAAeK,EAAAA,IACZL,EAAci1B,EAAAA,IAIf49C,IAAkBC,EAAAA,GAAAA,GAAuBvmG,EAAQukG,IACjDiC,IAAoBD,EAAAA,GAAAA,GAAuBtmG,EAAUskG,IACrDkC,IAA2BF,EAAAA,GAAAA,GAAuBt/F,EAAiBs9F,IACnEmC,IAAwBH,EAAAA,GAAAA,GAAuB3wD,EAAc2uD,IAC7DoC,IAAuBJ,EAAAA,GAAAA,GAAuB7wD,EAAa6uD,IAC3DqC,IAAyBL,EAAAA,GAAAA,GAAuB/wD,EAAe+uD,IAC/DsC,IAAmBN,EAAAA,GAAAA,GAAuBnmB,EAASmkB,MACnDqC,KAA2BD,KAAyBD,GACpDI,IAAoBP,EAAAA,GAAAA,GAAuBpmB,GAAUokB,IACrDwC,IAAsBR,EAAAA,GAAAA,GAAuBP,GAAYzB,IACzDyC,IAAqBT,EAAAA,GAAAA,GAAuB5xD,EAAW4vD,IAEvD0C,IAAoB5nC,EAAAA,GAAAA,GAAY7Y,GAEhC5V,QACkBvwC,IAAtB4mG,IAAmCA,GAAoBzgD,EAAuBygD,QAAoB5mG,GAG9F,QAAE2mD,GAAF,cAAWkgD,GAAX,gBAA0BC,IAsalC,SACEC,EACA5gD,EACAygD,EACAjnG,GAEA,MAAOgnD,EAASqgD,IAActjE,EAAAA,EAAAA,KAAU52B,EAAAA,IAClCy8D,GAAcC,EAAAA,GAAAA,KAEdy9B,OAA8CjnG,IAAtB4mG,GAAmCA,IAAsBzgD,EAyBvF,OAxBI8gD,IACEF,EACFC,GAAW,GAEXz9B,MAIJqT,EAAAA,GAAAA,IAAY,KACLmqB,GACHC,GAAW,KAEZ,CAACD,IAYG,CACLpgD,QAASA,IAAYsgD,EACrBJ,cAAeE,EAZjB,SAAuBx5F,GACE,cAAnBA,EAAE25F,cAAgC35F,EAAE6nD,SAAW7nD,EAAE0oD,eACnD+wC,EAAWxiG,QAAQ7E,UAU2BK,EAChD8mG,gBAAiBC,EAPnB,WACEC,GAAW,SAMyChnG,GA3cFmnG,EACjDt8D,GAA+BtV,IAAmB6xE,EAAAA,GACnDjhD,EACAygD,GACAjnG,IAGFuiC,EAAAA,EAAAA,KAAU,IACDviC,GACHwsC,EAAAA,GAAAA,IAAsB,KACtBvqC,EAAS,CAAEf,QAAIb,YAEfA,GACH,CAACL,EAAQiC,KAEZg7E,EAAAA,GAAAA,IAAY,KACV8oB,GAAiB9D,GAAAA,EAAAA,MACjBgE,QAAc5lG,GACd8lG,QAAgB9lG,KACf,CAACL,KAGJuiC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEmlE,GAAmBjhG,OAC3B,IAAKihG,EACH,OAGF,MAAMC,EAAe,KACflhG,OAAOihG,eAAepuD,SAAW9d,SAAS4wD,gBAAgBrJ,aAC5DvnD,SAAStJ,KAAK2hB,UAAU9lB,IAAI,oBAE5ByN,SAAStJ,KAAK2hB,UAAUC,OAAO,qBAMnC,OAFA4zD,EAAevjE,iBAAiB,SAAUwjE,GAEnC,KACLD,EAAetjE,oBAAoB,SAAUujE,MAE9C,KAEHplE,EAAAA,EAAAA,KAAU,KACJja,GACFs9E,EAAS,CAAEn5F,OAAQzM,MAEpB,CAACA,EAAQsoB,EAAWs9E,KAEvBrjE,EAAAA,EAAAA,KAAU,MACHijE,GAAyBvgF,GAC5BiD,EAAiB,CAAEloB,OAAAA,MAEpB,CAACA,EAAQsoB,EAAWk9E,EAAuBvgF,EAAciD,IAE5D,MAAM0/E,IAAkBhgE,EAAAA,EAAAA,KAAah6B,IACnC,GAAIpE,EAAAA,GACF,OAGF,MAAM,MAAEo1F,GAAUhxF,EAAEi6F,cAAgB,GAC9BC,EAAkBlJ,GAASA,EAAMr5F,OAAS,GAAKyoB,MAAM9a,KAAK0rF,GAG7Dv7F,QAAQqqD,GAAuB,kBAAdA,EAAKtsD,OAEtBu2B,MAAM6sE,IAETuB,GAAiB+B,EAAkB7F,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,YAC5D,IAEG8F,IAAqBngE,EAAAA,EAAAA,KAAY,KACrCm+D,GAAiB9D,GAAAA,EAAAA,QAChB,IAEG+F,IAAuBpgE,EAAAA,EAAAA,KAAY,KACvCy+D,IAAoB,KACnB,IAEG4B,IAAkBrgE,EAAAA,EAAAA,KAAY,KAClCy+D,IAAoB,KACnB,IAEG6B,IAAyBtgE,EAAAA,EAAAA,KAAY,KACzCxwB,EAAiB,CAAEpX,OAAAA,IACnBioG,KACAhmG,EAAS,CAAEf,GAAIlB,MACd,CAACoX,EAAkBnV,EAAUgmG,GAAiBjoG,IAE3CmoG,IAAoBvgE,EAAAA,EAAAA,KAAY,KACpC3lC,EAAS,CAAEf,GAAIlB,MACd,CAACiC,EAAUjC,IAER03C,IAAuB9P,EAAAA,EAAAA,KAAY,KACvC+O,EAAY,CAAE32C,OAAAA,MACb,CAAC22C,EAAa32C,IAEX23C,IAAiB/P,EAAAA,EAAAA,KAAY,KACjCvd,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEEutB,IAAmBhQ,EAAAA,EAAAA,KAAY,KACnCiP,EAAW,CAAE72C,OAAAA,MACZ,CAACA,EAAQ62C,IAENuxD,GClToB,EAACv8E,EAAiBw8E,KAC5C,MAAO5yF,EAAO60E,IAAYvmD,EAAAA,EAAAA,IAASskE,GAqBnC,OAnBA9lE,EAAAA,EAAAA,KAAU,KACH8lE,IAIDA,EAAax7D,WAAW,KAC1By9C,EAAS+d,GAETC,GAASt3E,MAAMu3E,EAAAA,GAAsB18E,EAAOy8E,GAASE,KAAKtrD,MACvD/D,MAAMwE,IACL,MAAMzuC,EAAMiuC,IAAIC,gBAAgBO,IAChCwnC,EAAAA,GAAAA,IAAaj2E,GACViqC,MAAK,KACJmxC,EAAU,OAAMp7E,eAIzB,CAACm5F,EAAcx8E,IAEXw8E,EAAe5yF,OAAQpV,GD4RAooG,CAAoB58E,EAAOg5E,GAEnDvhE,IAAYoE,EAAAA,GAAAA,GAChBo/D,IAAqB,mBACrBjC,GAAoB,kBACpBvgB,GAAmB,kBACnBugB,GAAoBF,GAAuB,UAC3C+D,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAA6BjhE,EAAAA,GAAAA,GACjC,sBACC4e,GAAsB,SAGnBsiD,IAAkCC,EAAAA,EAAAA,IACtC9lG,EAAM0iG,EAAyBC,IAI3B,oBACJoD,GADI,mBACiBC,GADjB,mBAEJC,GAFI,kBAEgBC,GAFhB,iBAGJC,GAHI,2BAGcC,KAChBriE,EAAAA,EAAAA,KACF,IvItUW,SAAyCrT,EAAqB2sD,GAC3E,MAAMgpB,EAAc31E,GAAek1B,EAAAA,GARzB,GAUN,GACE0gD,EAmCR,SAA6B51E,GAC3B,GAAIA,EAAcG,EAAAA,GAA0C,CAC1D,MAAM9mB,EAAkBnC,KAAKkpB,IAC3BlpB,KAAKC,IAAkB,IAAd6oB,EAAoBH,IAC7BD,IAGIi2E,EAAmB3+F,KAAKkpB,IACd,IAAdJ,EACAJ,IAGF,OAAO1oB,KAAKkpB,IACVJ,EAAc3mB,EAAkBw8F,EAChCl2E,IAIJ,GAAIK,EAAcK,EAAAA,GAAyC,CACzD,MAAMhnB,EAAkBnC,KAAKkpB,IAC3BlpB,KAAKC,IAAkB,GAAd6oB,EAAmBH,IAC5BD,IAGF,OAAO1oB,KAAKkpB,IACVJ,EAAc3mB,EACdsmB,IAIJ,OAAIK,EAAcL,GACTA,GAGFK,EArEkB81E,CAAoB91E,GACvC+1E,EAAkB/1E,GAAek1B,EAAAA,GACnC,GACA,GAEE8gD,EAAgBrpB,EAClBipB,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAej2E,EAAck1B,EAAAA,GAC/Bh+C,KAAKkpB,IAAIw1E,EAAmBD,EAnBR,KAoBpBC,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,oBAAAA,EACAC,mBAAAA,EACAC,mBAXyB5oB,EACtBopB,EAAkB,EAAKT,EACxB,EAUFE,kBARwB7oB,EACrBopB,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EApBA,IAqCvBP,2BArCuB,IAqB+BO,GuImThDC,CAAgCl2E,EAAaozE,KACnD,CAACA,GAAkBpzE,IAGfm2E,IAAkBliE,EAAAA,GAAAA,GACtB,wBACCm/D,IAAoB,cACrBA,IAAoBX,KAAiB5/C,GAAsB,eAO7D7Z,EAAAA,GAAAA,IACE65D,IAAmBE,IALH,KAChBvkG,EAAS,CAAEf,QAAIb,GAAa,CAAEwpG,gBAAgB,WAM9CxpG,OACAA,OACAA,GACAiN,MAAAA,OAAA,EAAAA,EAAclK,IAAI0mG,GAAAA,KAAsB,KAG1Cr9D,EAAAA,GAAAA,IAAeu4D,EAAsBllG,IACrC2sC,EAAAA,GAAAA,IAAe6Z,EAAoB9kD,GAEnC,MAAMuoG,GAAsBllG,SACzBygG,IAAwBuB,KAAqBD,KAA2BD,KACrED,IAAyBkC,IAEzBoB,GAA6BnlG,QACjC+hG,IAA0BF,IAAyBC,IAAwBrB,GAEvE/gB,GAAiB1/E,QAAQklG,IAAuBzjD,GAAsBg/C,GAE5E,OACE,0BACEpkG,GAAG,eACHoiC,UAAWA,GACX2mE,gBAAiB/C,GACjBnzD,MAAQ,sCACqB+0D,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNnE,oDAEfxgB,IAA8B,SAAVz4D,EAAmBq+E,EAAAA,GAAsBC,EAAAA,eAEnEtlE,QAAUz3B,EAAAA,IAA2BC,EAAqB86F,QAAoB9nG,GAE9E,0BACEa,GAAG,mBACH6yC,MAAOq0D,GAAyB,wBAAuBA,UAA0B/nG,IAEnF,0BAAKa,GAAG,0BACPolG,IAAmBE,IAClB,sCACE,0BAAKljE,UAAU,kBAAkB8mE,YAAavD,GAAmBe,QAAkBvnG,GACjF,mBAAC,GAAD,CACEL,OAAQsmG,GACRrmG,SAAUumG,GACVv/F,gBAAiBw/F,GACjBz/C,QAASA,KAEX,mBAAC7hB,GAAA,EAAD,CACErO,KAAMoU,EAA8B,OAAStV,IAAmBE,EAAAA,GAAsB,QAAU,OAChGsP,UAAWohB,EACX7V,eAAa,EACbC,oBAAqBA,GACrBy5D,OAAQlD,IAER,mBAAC,GAAD,CACE1mE,IAAM,GAAE6lE,MAAmBE,MAAqBC,KAChDzmG,OAAQsmG,GACRrmG,SAAUumG,GACVplG,KAAMqlG,GACNrmB,QAASymB,GACT1mB,SAAU2mB,GACVjsB,YAAaorB,GACbnrB,cAAeqrB,GACfn/C,QAASA,GACTq5B,gBAAiB2pB,KAEnB,0BAAK1mE,UAAWsmE,IACb/C,IACC,mBAAC,GAAD,CACE7mG,OAAQsmG,GACRrmG,SAAUumG,GACVv/F,gBAAiBw/F,GACjBnT,cAAeA,EACfC,WAAYwU,GACZ/gD,QAASA,KAGZs+C,GACC,0BAAKhiE,UAAU,wCAAwCyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAC/E,mBAACglC,GAAA,EAAD,CACEC,KAAK,OACLuL,OAAK,EACL3L,MAAM,YACN5B,UAAU,mBACVuB,QAASmjE,IAET,wBAAG1kE,UAAU,eACb,+BAAOvgC,EAAK,uBAAwBykD,EAAqB,QAI9DuiD,IACC,0BAAKzmE,UAAWqlE,IACd,0BAAKrlE,UAAU,4BACb,+BACGslE,MAKRz7F,EAAAA,IAA2Bu5F,IAC1B,0BAAKpjE,UAAU,wCAAwCyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAC/E,mBAACglC,GAAA,EAAD,CACEC,KAAK,OACLuL,OAAK,EACLrJ,QAAM,EACNlE,UAAU,wBACVuB,QAAS6S,IAER30C,EAAKikG,GAAqB,qBAAuB,sBAIvD75F,EAAAA,IAA2Bw5F,IAC1B,0BAAKrjE,UAAU,wCAAwCyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAC/E,mBAACglC,GAAA,EAAD,CACEC,KAAK,OACLuL,OAAK,EACLrJ,QAAM,EACNlE,UAAU,wBACVuB,QAAS8S,IAER50C,EAAK,cAIXoK,EAAAA,IAA2By5F,IAC1B,0BAAKtjE,UAAU,wCAAwCyB,IAAKhiC,EAAKiiC,MAAQ,WAAQ3kC,GAC/E,mBAACglC,GAAA,EAAD,CACEC,KAAK,OACLuL,OAAK,EACLrJ,QAAM,EACNlE,UAAU,wBACVuB,QAAS+S,IAER70C,EAAK,gBAIZ,mBAAC,GAAD,CACEkE,gBAAiBw/F,GACjBz5F,SAAUs5C,EACV85B,QAASymB,KAEX,mBAAC,GAAD,CACEl9F,OAAQ9E,QAAQoL,GAChBg/B,QAAS42D,IAEX,mBAAC,GAAD,CACEl8F,OAAQ9E,QAAQogG,GAChBh2D,QAAS62D,IAEX,mBAAC,GAAD,CAAan8F,OAAQu7F,IACrB,mBAAC,GAAD,CAAkBv7F,OAAQw7F,MAI9B,mBAAC,GAAD,CACEh3D,QAAS44D,GACT3mB,QAASymB,GACTtiB,eAAgBA,MAGnBp3E,EAAAA,IAA2B,mBAAC,GAAD,CAAcH,SAAUnI,QAAQmgG,MAG/DhlG,GACC,mBAAC,GAAD,CACE2J,OAAQy8F,GACRpmG,OAAQA,EACRwnD,oBAAqBA,EACrBvY,QAASg5D,GACTqC,QAASpC,KAGb,0BAAK5pB,eAAa,GACfzpD,MAAAA,OADH,EACGA,EAAyBzxB,KAAI,CAACsxB,EAAwB3hB,IACrD,mBAAC,GAAD,CACEw3F,cAAex3F,EACf0tB,IAAK/L,EAAuBxzB,GAC5BwzB,uBAAwBA,YExd9B81E,GAA4B,IAAM7nG,EAAAA,GAClConB,IAAwBpZ,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,G,IAErD65F,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,sBAAAA,IAAAA,wBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,0BAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,iCAAAA,IAAAA,mCAAAA,EAAAA,EAAAA,2BAAAA,IAAAA,6BAAAA,EAAAA,EAAAA,yBAAAA,IAAAA,2BAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qBAAAA,EAAAA,EAAAA,qBAAAA,IAAAA,uBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,UAAAA,IAAAA,YAAAA,EAAAA,EAAAA,YAAAA,IAAAA,cAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qB,CAAAA,KAAAA,GAAAA,KAkCL,MA+WA,IAAeznE,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAA6D,gBAApD,OAAEC,EAAF,UAAU0qG,EAAV,aAAqBC,GAA+B,EAC3D,MAAQlqG,MAAOmqG,IAAuB3qF,EAAAA,EAAAA,IAAwBlgB,IAAW,IACjEU,MAAOoqG,IAAuBC,EAAAA,EAAAA,IAA2B/qG,IAAW,IACpEU,MAAOsqG,IAAmBC,EAAAA,EAAAA,IAAuBjrG,IAAW,GAC9D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7Cs0C,EAAYlvC,IAAQuvC,EAAAA,EAAAA,IAAcvvC,GAClCqT,EAAO4xF,GAAa1qG,IAAUuoB,EAAAA,EAAAA,IAASvoB,IAAUia,EAAAA,EAAAA,IAAWla,EAAQC,QAAUK,EAE9EglD,EAAgBvsC,IAAQmyF,EAAAA,EAAAA,IAAiBnyF,GACzCoyF,EAAYrmG,SACf8lG,GACED,IACCrlD,GACD5/C,KACC2vC,EAAAA,EAAAA,IAAqBr1C,EAAQ0F,EAAKvE,OAElCqnB,EAAAA,EAAAA,IAAS9iB,EAAKvE,OAASq5F,EAAAA,EAAAA,IAAY90F,IAASA,EAAK8wC,aAAe9wC,EAAK8yB,cAErE4yE,EAAkBtmG,QAAQ7E,IAAM,UAAID,EAAOgN,WAAWtE,SAASzI,UAA/B,aAAI,EAAoCkhB,gBACxEs1B,EAAoB/wC,MAAAA,GAAH,UAAGA,EAAMyU,gBAAT,aAAG,EAAgBs8B,kBACpCn0B,EAAoBriB,EAAM,UAAGD,EAAOgN,WAAWtE,SAASzI,UAA9B,iBAAG,EAAoCohB,kBAAvC,aAAG,EAAgDH,YAAS5gB,EAE5F,MAAO,CACL6qG,UAAAA,EACA7lD,cAAAA,EACA7O,kBAAAA,EACA7B,UAAAA,EACAloC,OAAQqM,MAAAA,OAAF,EAAEA,EAAM5X,GACd0pG,mBAAAA,EACAC,mBAAAA,EACAE,eAAAA,EACAI,gBAAAA,EACA9oF,kBAAAA,EACA6oB,4BAA6BnrC,EAAOmrC,+BAlCtB3F,EA/W2B,IA2BzC,UA3B0C,OAC9CvlC,EAD8C,aAE9CorG,EAF8C,UAG9CV,EAH8C,SAI9CW,EAJ8C,aAK9CV,EAL8C,aAM9CW,EAN8C,oBAO9CC,EAP8C,gBAQ9CC,EAR8C,YAS9CC,EAT8C,cAU9CC,EAV8C,oBAW9CC,EAX8C,aAY9CC,EAZ8C,iBAa9CC,EAb8C,cAc9CxmD,EAd8C,OAe9C54C,EAf8C,UAgB9Cy+F,EAhB8C,UAiB9Cv2D,EAjB8C,QAkB9C1F,EAlB8C,eAmB9C7D,EAnB8C,mBAoB9Cw/D,EApB8C,mBAqB9CC,EArB8C,eAsB9CE,EAtB8C,gBAuB9CI,EAvB8C,kBAwB9C30D,EAxB8C,kBAyB9Cn0B,EAzB8C,4BA0B9C6oB,GACI,EACJ,MAAM,wBACJ4gE,EADI,sBAEJrY,EAFI,kBAGJC,EAHI,wBAIJqY,EAJI,iBAKJC,EALI,oBAMJjxB,EANI,qBAOJ52B,EAPI,iBAQJ8nD,EARI,yBASJC,EATI,yBAUJC,IACE1rF,EAAAA,EAAAA,MAGE2rF,GAAgB5gE,EAAAA,EAAAA,IAAuB,OACtC6gE,EAAoBC,EAAkBC,IAAqBl8D,EAAAA,GAAAA,KAE5Dm8D,GAAwB5kE,EAAAA,EAAAA,KAAY,KACxCskE,EAAyB,CAAElsG,OAAQA,EAASihB,OAAQoB,IACpD+oB,EAAe0M,EAAAA,GAAAA,cACd,CAAC93C,EAAQqiB,EAAmB+oB,EAAgB8gE,IAEzCO,GAA0B7kE,EAAAA,EAAAA,KAAY,KAC1CukE,EAAyB,CAAEnsG,OAAQA,EAAS0hB,KAAMW,EAAmBX,OACrE0pB,EAAe0M,EAAAA,GAAAA,SACfy0D,MACC,CAACvsG,EAAQusG,EAAmBlqF,EAAmB8pF,EAA0B/gE,IAEtEshE,GAAiC9kE,EAAAA,EAAAA,KAAannC,IAClDqrG,EAAwB,CAAErrG,MAAAA,IAEtBA,EAAM8E,QACRwkB,GAAsBgiF,KAEvB,CAACA,EAAyBD,IAEvBa,GAAiC/kE,EAAAA,EAAAA,KAAannC,IAClDgzF,EAAsB,CAAEhzF,MAAAA,MACvB,CAACgzF,IAEEmZ,GAA6BhlE,EAAAA,EAAAA,KAAannC,IAC9CizF,EAAkB,CAAEjzF,MAAAA,MACnB,CAACizF,IAEEluC,GAAmB5d,EAAAA,EAAAA,KAAY,KACnCuc,EAAqB,CAAE13C,OAAAA,MACtB,CAAC03C,EAAsB13C,KAEnB65B,EAAsBumE,KAA2B9oE,EAAAA,EAAAA,KAAUqnE,IAElE7oE,EAAAA,EAAAA,KAAU,KACR77B,YAAW,KACTmmG,IAAyBzB,KACxBZ,MACF,CAACY,IAEJ,MAAMroG,IAAO+hC,EAAAA,GAAAA,KACPgoE,GAAapC,EACjBkB,IAAiBmB,EAAAA,GAAAA,QACftC,GAAcuC,QACZpB,IAAiBmB,EAAAA,GAAAA,YACnBtC,GAAcwC,YACZrB,IAAiBmB,EAAAA,GAAAA,WACnBtC,GAAcyC,YACX,EACH7B,EACFZ,GAAc0C,OACZzB,EACFjB,GAAc2C,YACZ5B,EACFf,GAAc4C,cACZ5B,EACFhB,GAAc6C,UACZ3B,EACFlB,GAAc8C,cACZ5C,EACFkB,IAAqB/zD,EAAAA,GAAAA,QACnB2yD,GAAc+C,cACZ3B,IAAqB/zD,EAAAA,GAAAA,gBACvB2yD,GAAcgD,sBACZ5B,IAAqB/zD,EAAAA,GAAAA,WACvB2yD,GAAciD,iBACZ7B,IAAqB/zD,EAAAA,GAAAA,mBACvB2yD,GAAckD,yBACZ9B,IAAqB/zD,EAAAA,GAAAA,iBACvB2yD,GAAcmD,uBACZ/B,IAAqB/zD,EAAAA,GAAAA,mBACvB2yD,GAAcoD,yBACZhC,IAAqB/zD,EAAAA,GAAAA,kBACvB2yD,GAAcqD,wBACZjC,IAAqB/zD,EAAAA,GAAAA,oBACvB2yD,GAAcsD,0BACZlC,IAAqB/zD,EAAAA,GAAAA,2BACvB2yD,GAAcuD,iCACZnC,IAAqB/zD,EAAAA,GAAAA,qBACvB2yD,GAAcwD,2BACZpC,IAAqB/zD,EAAAA,GAAAA,mBACvB2yD,GAAcyD,yBACZrC,IAAqB/zD,EAAAA,GAAAA,gBACvB2yD,GAAc0D,uBACZtC,IAAqB/zD,EAAAA,GAAAA,mBACvB2yD,GAAc2D,0BACZvC,IAAqB/zD,EAAAA,GAAAA,aACvB2yD,GAAc4D,mBACZxC,IAAqB/zD,EAAAA,GAAAA,QACvB2yD,GAAc6D,cACZzC,IAAqB/zD,EAAAA,GAAAA,WACvB2yD,GAAc8D,iBACZ1C,IAAqB/zD,EAAAA,GAAAA,eACvB2yD,GAAc+D,qBACZ3C,IAAqB/zD,EAAAA,GAAAA,UACvB2yD,GAAcgE,gBACZ5C,IAAqB/zD,EAAAA,GAAAA,WACvB2yD,GAAciE,iBACZ7C,IAAqB/zD,EAAAA,GAAAA,aACvB2yD,GAAckE,wBACZtuG,EACFirG,EACFb,GAAcmE,WACZrD,EACFd,GAAcoE,uBACZxuG,EAEEyuG,GAAmB,WAAG5lD,EAAAA,GAAAA,GAAiB4jD,IAAY,UAAhC,SAA0C,EAoL7DiC,GACJ5hG,EAAAA,IACG2/F,KAAerC,GAAcwC,aAC7BH,KAAerC,GAAcyC,YAC7BJ,KAAerC,GAAc8C,eAC7B5C,EAGCqE,IAAkBtnE,EAAAA,GAAAA,GACtB,sBACAqnE,IAAgB,cACfzoE,GAAwB4E,IAAgC,iBAG3D,OACE,0BAAK5H,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACE/B,UAAU,eACVpyB,OAAK,EACLg0B,MAAM,cACNI,KAAK,UACLT,QAASoK,EACTxH,UAA0B1kC,GAAfgsG,GAAoB,cAAsB,iBAErD,0BAAKphE,IAAKy+D,EAAe9oE,UAAW0rE,MAEtC,mBAAC7pE,GAAA,EAAD,CACErO,KAAOwP,GAAwB4E,EAA+B,OAAS,aACvE9F,UAAW0pE,IA9MjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKrE,GAAc2C,YACjB,OAAO,6BAAKrqG,GAAK,gBACnB,KAAK0nG,GAAc0C,OACjB,OACE,sCACE,mBAACpjE,GAAA,EAAD,CACEE,yBAAyB,cACzBx0B,MAAOm1F,EACPpgE,SAAUkiE,IAEZ,mBAACrnE,GAAA,EAAD,CACEn0B,OAAK,EACLo0B,KAAK,UACLJ,MAAM,cAENL,QAAS,IAAMk2C,EAAoB,CAAE3rE,YAAY87C,EAAAA,EAAAA,IAAc70C,KAAKC,SACpEmxB,UAAU,2BAEV,wBAAGnE,UAAU,oBAIrB,KAAKmnE,GAAc8C,cACjB,OAAO,6BAAKxqG,GAAK4xC,EAAY,wBAA0B,oBACzD,KAAK81D,GAAc+C,cACjB,OAAO,6BAAKzqG,GAAK,SACnB,KAAK0nG,GAAcgD,sBACjB,OAAO,6BAAK1qG,GAAK4xC,EAAY,oBAAsB,oBACrD,KAAK81D,GAAciD,iBACjB,OAAO,6BAAK3qG,GAAK,eACnB,KAAK0nG,GAAcoD,yBACjB,OAAO,6BAAK9qG,GAAK,0BACnB,KAAK0nG,GAAcyD,yBACjB,OAAO,6BAAKnrG,GAAK,wBACnB,KAAK0nG,GAAc0D,uBACjB,OAAO,6BAAKprG,GAAK,oBACnB,KAAK0nG,GAAc2D,0BACjB,OAAO,6BAAKrrG,GAAK,eACnB,KAAK0nG,GAAcmD,uBACjB,OAAO,6BAAK7qG,GAAK,uBACnB,KAAK0nG,GAAcqD,wBACjB,OAAO,6BAAK/qG,GAAK,iBACnB,KAAK0nG,GAAcsD,0BACjB,OAAO,6BAAKhrG,GAAK,wBACnB,KAAK0nG,GAAcuD,iCACjB,OAAO,6BAAKjrG,GAAK,wBACnB,KAAK0nG,GAAcwD,2BACjB,OAAO,6BAAKlrG,GAAK,qBACnB,KAAK0nG,GAAc6D,cACjB,OAAO,6BAAKvrG,GAAK,2BACnB,KAAK0nG,GAAc8D,iBACjB,OAAO,6BAAuBxrG,GAAlBooG,EAAuB,WAAmB,YACxD,KAAKV,GAAciE,iBACjB,OACE,sCACE,6BAAK3rG,GAAK,eACV,8BAASugC,UAAU,SAChBjhB,IAAsBA,EAAkBf,WACvC,mBAAC+jB,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNI,KAAK,UACLmC,UAAW1kC,GAAK,QAChB8hC,QAAS2nE,GAET,wBAAGlpE,UAAU,eAGhBjhB,GAAqBA,EAAkBf,WACtC,sCACE,mBAAC+jB,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,SACNI,KAAK,UACLmC,UAAW1kC,GAAK,UAChB8hC,QAASynE,GAET,wBAAGhpE,UAAU,iBAEf,mBAAC+Y,GAAA,EAAD,CACE1yC,OAAQ0iG,EACRp9D,QAASs9D,EACTxuF,MAAOhb,GAAK,cACZyB,KAAMzB,GAAK,kBACXkjD,sBAAoB,EACpB3J,aAAcv5C,GAAK,UACnBw5C,eAAgBkwD,OAO9B,KAAKhC,GAAckE,mBACjB,OAAO,6BAAiB5rG,GAAZ4xC,EAAiB,oBAA4B,mBAC3D,KAAK81D,GAAc+D,qBACjB,OAAO,6BAAKzrG,GAAK,oCACnB,KAAK0nG,GAAc4C,cACjB,OACE,mBAACtjE,GAAA,EAAD,CACEt0B,MAAOo1F,EACPxgE,YAAatnC,GAAK,sBAClBksG,iBAAe,EACfzkE,SAAUmiE,IAGhB,KAAKlC,GAAc6C,UACjB,OACE,mBAACvjE,GAAA,EAAD,CACEt0B,MAAOs1F,EACP1gE,YAAatnC,GAAK,mBAClBksG,iBAAe,EACfzkE,SAAUoiE,IAGhB,KAAKnC,GAAcmE,WACjB,OAAO,6BAAK7rG,GAAK4xC,EAAY,qBAAuB,qBACtD,KAAK81D,GAAcoE,kBACjB,OAAO,6BAAK9rG,GAAK,uBACnB,KAAK0nG,GAAcwC,YACjB,OAAO,6BAAKlqG,GAAK,gBACnB,KAAK0nG,GAAckD,yBACjB,OAAO,6BAAK5qG,GAAK,uBACnB,KAAK0nG,GAAcyC,WACnB,KAAKzC,GAAc4D,mBACjB,OAAO,6BAAKtrG,GAAK,iBACnB,KAAK0nG,GAAcgE,gBACjB,OAAO,6BAAK1rG,GAAK,cACnB,QACE,OACE,sCACE,wCACA,8BAASugC,UAAU,SAChB+hB,GACC,mBAAChgB,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNI,KAAK,UACLmC,UAAW1kC,GAAK,cAChB8hC,QAAS2gB,GAET,wBAAGliB,UAAU,mBAGhB4nE,GACC,mBAAC7lE,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNI,KAAK,UACLmC,UAAW1kC,GAAK,QAChB8hC,QAASmnE,GAET,wBAAG1oE,UAAU,eAGhBkT,GACC,mBAACnR,GAAA,EAAD,CACEn0B,OAAK,EACLg0B,MAAM,cACNI,KAAK,UACLmC,UAAW1kC,GAAK,cAChB8hC,QAASonE,GAET,wBAAG3oE,UAAU,mBAuCtB4rE,S,4BClVT,SAASC,GACPC,EACAC,EACApqF,EACAqqF,GAEA,MAAO7qG,EAAa8qG,IAAWC,EAAAA,GAAAA,GAC7BvqF,EAAeoqF,OAAiBhvG,EAChCivG,OACAjvG,EACAovG,EAAAA,IAKF,MAAO,CAAChrG,EAAa8qG,KAFJ9qG,IAAgB6qG,GAAW7qG,EAAY,KAAO6qG,EAAQ,KAKzE,SAASI,GACPC,EACAP,EACAC,EACApqF,EACAhiB,EACA+c,GAEA,MAAM4vF,GAAgBpkE,EAAAA,EAAAA,OAEtByxC,EAAAA,GAAAA,IAAY,KACNmyB,IAAsBO,GAAsB1sG,GAAgB+c,IAC9D4vF,EAAc5tF,SAAU6tF,EAAAA,EAAAA,IACtB5sG,EACA+c,EACA2vF,MAGH,CAAC1sG,EAAc+c,EAAUovF,EAAmBO,IAE/C,MAAOlrG,EAAa8qG,IAAWC,EAAAA,GAAAA,GAC7BvqF,EAAeoqF,OAAiBhvG,EAChCuvG,EAAc5tF,aACd3hB,EACuB,UAAvBsvG,EAAiCxwF,EAAAA,GAAqBgB,EAAAA,IAKxD,MAAO,CAAC1b,EAAa8qG,KAFJ9qG,IAAgBmrG,EAAc5tF,SAAWvd,EAAY,KAAOmrG,EAAc5tF,QAAQ,KCpKrG,MAGM8tF,IAAwBr1F,EAAAA,EAAAA,KAAU7J,GAAOA,KAAM,KAAK,GAE1D,IAAIm/F,IAA8B,E,qGCoFlC,MAAMC,GAAO,CACX,CAAE5uG,KAAM,QAAS2c,MAAO,mBACxB,CAAE3c,KAAM,YAAa2c,MAAO,mBAC5B,CAAE3c,KAAM,QAAS2c,MAAO,mBACxB,CAAE3c,KAAM,QAAS2c,MAAO,mBACxB,CAAE3c,KAAM,QAAS2c,MAAO,oBA6Y1B,SAASkyF,GAAgCC,GACvC,MAAO,CAEJ,gDAA+CA,wBAE/C,4DAA2DA,yBAC5D9rG,KAAK,MAGT,UAAe4+B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAoC,YAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BiD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,IACxCsgB,YAAa6vF,EAAf,cAAgC1kG,IAAkB6T,EAAAA,EAAAA,IAAyBvf,IAAW,IACtF,SAAEigB,GAAcvU,GAAiB0kG,GAAmB1kG,EAAc0kG,IAAqB,IAErFv+F,KAAM0xC,EAAW58B,aAAcF,GAAqBzmB,EAAOwR,OAC3DK,KAAM6zB,GAAc1lC,EAAO4L,MAE7B4qB,EAAU9wB,IAAQs6E,EAAAA,EAAAA,IAAYt6E,GAC9BkvC,EAAYlvC,IAAQuvC,EAAAA,EAAAA,IAAcvvC,GAClC2qG,EAAgB75E,GAAYoe,IAAa4lD,EAAAA,EAAAA,IAAY90F,GACrDk1B,EAAUl1B,MAAAA,GAAH,UAAGA,EAAMyU,gBAAT,aAAG,EAAgBygB,QAC1B01E,EAAmBD,GAAiB3qG,IACpCA,EAAK6qG,aAAgB7qG,EAAKyU,WAAazU,EAAKyU,SAASq2F,gBACrDC,EAAgBJ,GAAiB3qG,KACjCgrG,EAAAA,EAAAA,IAAiBhrG,EAAM,kBAAmBirG,EAAAA,EAAAA,IAAkBjrG,EAAM,gBAAkBA,EAAK8wC,WACzFo6D,EAAmBP,GAAiB3qG,KAASgrG,EAAAA,EAAAA,IAAiBhrG,EAAM,aAAeA,EAAK8wC,WACxFs3B,GAAoBC,EAAAA,EAAAA,IAAwB/tE,EAAQC,GAE1D,IAAI4wG,EACAC,EACA/3F,EAOJ,OANIyP,EAAAA,EAAAA,IAASvoB,KACX6wG,EAAiB7wG,EACjB8Y,GAAOmB,EAAAA,EAAAA,IAAWla,EAAQ8wG,GAC1BD,EAAoB93F,IAASA,EAAKyO,UAAWE,EAAAA,EAAAA,IAAU3O,IAGlD,CACL+S,OAAOga,EAAAA,EAAAA,IAAY9lC,GACnB40C,UAAAA,EACAk8D,eAAAA,EACA5tG,aAAAA,EACA+c,SAAAA,EACAmwF,gBAAAA,EACAS,kBAAAA,EACAR,cAAAA,EACAC,iBAAAA,EACAG,cAAAA,EACAG,iBAAAA,EACA74F,cAAe/X,EAAO+X,cACtBy9B,oBAAoBjvC,EAAAA,EAAAA,IAAyBvG,GAC7CsU,aAAc5O,MAAAA,OAAF,EAAEA,EAAM4O,aACpB4Q,aAAcllB,EAAOklB,aACrB7a,iBAAkBrK,EAAOqK,iBACzByjE,kBAAAA,EACAvqB,UAAAA,EACA98B,iBAAAA,EACAif,UAAAA,EACAqrE,gBAAiBrrG,MAAAA,OAAF,EAAEA,EAAM0uD,eACnBi8C,GAAiBz1E,GAAW,CAAEA,QAAAA,MAC9Bi2E,GAAqB93F,GAAQ,CAAEi4F,cAAa,UAAEj4F,EAAK4O,mBAAP,aAAE,EAAkBpgB,QArDtDi+B,EAhZuB,IA2BrC,IA3BsC,OAC1CvlC,EAD0C,aAE1C4rG,EAF0C,qBAG1CoF,EAH0C,MAI1CnlF,EAJ0C,UAK1C8oB,EAL0C,eAM1Ck8D,EAN0C,cAO1C/4F,EAP0C,aAQ1C7U,EAR0C,SAS1C+c,EAT0C,gBAU1CmwF,EAV0C,kBAW1CS,EAX0C,cAY1CR,EAZ0C,iBAa1CC,EAb0C,cAc1CG,EAd0C,iBAe1CG,EAf0C,cAgB1CI,EAhB0C,QAiB1Cp2E,EAjB0C,UAkB1C2oB,EAlB0C,iBAmB1C98B,EAnB0C,UAoB1Cif,EApB0C,mBAqB1C8P,EArB0C,aAsB1ClhC,EAtB0C,aAuB1C4Q,EAvB0C,kBAwB1C4oD,EAxB0C,iBAyB1CzjE,EAzB0C,gBA0B1C0mG,GACI,EACJ,MAAM,wBACJG,EADI,gBAEJC,EAFI,gBAGJC,EAHI,SAIJlvG,EAJI,yBAKJmvG,EALI,gBAMJn7B,EANI,gBAOJC,EAPI,aAQJlwE,EARI,kBASJqrG,EATI,6BAUJC,IACE7wF,EAAAA,EAAAA,MAGE+4B,GAAehO,EAAAA,EAAAA,IAAuB,MAEtCD,GAAgBC,EAAAA,EAAAA,IAAuB,MACvCzoC,GAAO+hC,EAAAA,GAAAA,MACN2I,EAAW8jE,IAAgBxtE,EAAAA,EAAAA,IAAS,IACpCytE,EAAgBC,IAAqB1tE,EAAAA,EAAAA,MAEtCyJ,GAAO1G,EAAAA,EAAAA,KAAQ,IAAO,IACtBspE,EAAgB,CAAC,CACnBhvG,KAAM,UAAW2c,MAAO42B,EAAY,qBAAuB,iBACxD,MACFq7D,MACCY,EAAoB,CAAC,CACvBxvG,KAAM,cAAe2c,MAAO,qBACzB,KACH,CAAC6yF,EAAmBR,EAAez7D,IACjC+8D,EAAUlkE,EAAKC,GAAWrsC,MAEzB8uG,EAAYzrG,GAAa8qG,GAASoC,IF5J5B,SACbp8D,EACA27D,EACAC,EACAS,EACAF,EACAvB,EACApd,EACAge,EACAztD,EACA98B,EACAif,EACAxiC,EACA+c,EACAhgB,EACAilB,GAEA,IADA7a,EACA,0DADmB,EAEnB,MAAM8lG,EAAyB,YAAZwB,GAA0BvB,EAA4BA,EAAVuB,EAEzDG,GAAY/qE,EAAAA,EAAAA,KAAQ,KACxB,GAAKisD,GAAqBzvC,GAAc98B,EAIxC,OAAOsrF,EAAAA,EAAAA,IACL/e,EAAiB3vF,KAAI,QAAC,OAAEqJ,GAAH,SAAgBA,KACrC62C,EACA98B,OACAnmB,EACA+J,KAED,CAAC2oF,EAAkB3oF,EAAkBk5C,EAAW98B,IAE7C5G,GAAUknB,EAAAA,EAAAA,KAAQ,KACtB,GAAKiqE,GAAkBtrE,EAIvB,OAAOssE,EAAAA,EAAAA,IAAYhB,EAAetrE,GAAW,KAC5C,CAACA,EAAWsrE,KAERiB,EAAmBC,EAAgBC,GAA2B/C,GACnEe,EAAYgB,EAAiBjsF,EAAc4sF,IAGtCM,EAAkBC,EAAcC,GAAyB3C,GAC9D,QAASQ,EAAY0B,EAAgB3sF,EAAchiB,EAAc+c,IAG5DsyF,EAAqBC,EAAkBC,GAA6B9C,GACzE,YAAaQ,EAAY0B,EAAgB3sF,EAAchiB,EAAc+c,IAGhEyyF,EAAiBC,EAAcC,GAAyBjD,GAC7D,QAASQ,EAAY0B,EAAgB3sF,EAAchiB,EAAc+c,IAG5D4yF,EAAkBC,EAAcC,GAAyBpD,GAC9D,QAASQ,EAAY0B,EAAgB3sF,EAAchiB,EAAc+c,IAG5D+yF,EAAkBC,EAAeC,GAA0BvD,GAChE,QAASQ,EAAY0B,EAAgB3sF,EAAchiB,EAAc+c,IAG5DkzF,EAAuBC,EAAoBC,GAA+BjE,GAC/Ee,EAAYiB,EAAiBlsF,EAAcrF,GAG7C,IAAInb,EACA8qG,EACAoC,GAAgB,EAEpB,OAAQzB,GACN,IAAK,UACHzrG,EAAcutG,EACdzC,EAAU0C,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHztG,EAAcyuG,EACd3D,EAAU4D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACH3uG,EAAc0tG,EACd5C,EAAU6C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACH5tG,EAAc6tG,EACd/C,EAAUgD,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACH/tG,EAAcguG,EACdlD,EAAUmD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHluG,EAAcmuG,EACdrD,EAAUsD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACHruG,EAAcsuG,EACdxD,EAAUyD,EACVrB,EAAgBsB,EAIpB,MAAO,CAAC/C,EAAYzrG,EAAa8qG,EAASoC,GE4CgB0B,CACxD99D,EACA27D,EACAC,EACAC,EACAM,EACAvB,EACAx1E,EACAo2E,EACAztD,EACA98B,EACAif,EACAxiC,EACA+c,EACAhgB,EACAilB,EACA7a,GAEIg7B,GAAYoI,EAAKh/B,WAAU,QAAC,KAAEpN,GAAH,SAAcA,IAAS8uG,MAElD,aAAE7tB,ID7KK,SACb7oC,EACAk4D,EACA9F,EACAoF,IAGA/sB,EAAAA,GAAAA,IAAsB,IAAmB,IAAjBqvB,GAAiB,EACvC,GAAIA,GAAeA,IAAgB5B,EAAS,CAC1C,MAAMz7C,EAAYzc,EAAax3B,QACzBuxF,EAASt9C,EAAUvzB,cAA8B,YACnDuzB,EAAUkmB,UAAYo3B,EAAOtxB,YAC/B+uB,EAAiC,YAAZU,EAAwB3E,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvEgD,IAA8B,GAC9Bp8C,EAAAA,GAAAA,GAAiBsC,EAAWs9C,EAAQ,aAASlzG,OAAWA,OAAWA,EArB/C,KAsBpBqG,YAAW,KACTqpG,IAA8B,IAtBD,SA0BlC,CAAC2B,EAASV,KAGb/sB,EAAAA,GAAAA,IAAsB,IAAwB,IAAtBuvB,GAAsB,EAC5C,GAAI5H,IAAiBmB,EAAAA,GAAAA,SAAwBnB,IAAiB4H,EAC5D,OAGF,MAAMv9C,EAAYzc,EAAax3B,QAC/B,IAAKi0C,EACH,OAGF,MAAMw9C,EAAYx9C,EAAUvzB,cAA8B,aACrD+wE,GAAaA,EAAUxxB,UAAYhsB,EAAUkmB,YAIlD4zB,IAA8B,GAC9Bp8C,EAAAA,GAAAA,GACEsC,EACAA,EAAUtb,kBACV,aACAt6C,EACyB,EAAzB41D,EAAUgmB,cAGZv1E,YAAW,KACTqpG,IAA8B,IAtDG,KAyDnCiB,EAAqBpF,MACpB,CAACA,IAEJ,MAAM8H,GAAwB9rE,EAAAA,EAAAA,KAAY,KACxC,MAAMquB,EAAYzc,EAAax3B,QAC/B,IAAKi0C,EACH,OAGF,MAAMw9C,EAAYx9C,EAAUvzB,cAA8B,YAC1D,IAAK+wE,EACH,OAGF,IAAIzxE,EAAsB+qE,EAAAA,GAAAA,QACtB92C,EAAUkmB,WAAas3B,EAAUxxB,YACnCjgD,EAAoB,YAAZ0vE,EACJ3E,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGNiE,EAAqBhvE,KACpB,CAACwX,EAAcw3D,EAAsBU,IAoBxC,OAjBAnvE,EAAAA,EAAAA,KAAU,KACJwtE,IAIJ2D,MACC,CAACA,EAAuBhC,IAWpB,CAAErvB,cARYz6C,EAAAA,EAAAA,KAAY,KAC3BmoE,IAIJD,GAAsB4D,KACrB,CAACA,KCkFqBC,CAAgBn6D,EAAck4D,EAAS9F,EAAcoF,IAExE,mBAAE4C,GAAF,qBAAsBC,IC5Lf,SACbr6D,GAEA,IADAs6D,EACA,uDADuB,uCAGvBvxE,EAAAA,EAAAA,KAAU,KACR,SAASwxE,IACP,MAAM99C,EAAYzc,EAAax3B,QACzBgyF,EAAe/9C,EAAUvzB,cAA8BoxE,GACvDP,EAASt9C,EAAUvzB,cAA8B,YACnDsxE,GAAgBT,IAClBS,EAAajgE,MAAMkgE,UAAeh+C,EAAUgmB,aAAes3B,EAAOt3B,aAAlC,MAQpC,OAJA83B,IAEAttG,OAAO09B,iBAAiB,SAAU4vE,GAAc,GAEzC,KACLttG,OAAO29B,oBAAoB,SAAU2vE,GAAc,MAEpD,CAACv6D,EAAcs6D,IAGlB,MAAMF,GAAqBhsE,EAAAA,EAAAA,KAAY,KACrC,MAAMquB,EAAYzc,EAAax3B,QAC/B,GAAkC,WAA9Bi0C,EAAUliB,MAAMmgE,UAAwB,CAC1C,MAAMC,EAAiBl+C,EAAU3hB,YAAc2hB,EAAUm+C,YACzDn+C,EAAUliB,MAAMmgE,UAAY,SAC5Bj+C,EAAUliB,MAAMsgE,YAAe,GAAEF,SAElC,CAAC36D,IAEEq6D,GAAuBjsE,EAAAA,EAAAA,KAAY,KACvC,MAAMquB,EAAYzc,EAAax3B,QAC/Bi0C,EAAUliB,MAAMmgE,UAAY,SAC5Bj+C,EAAUliB,MAAMsgE,YAAc,MAC7B,CAAC76D,IAEJ,MAAO,CAAEo6D,mBAAAA,EAAoBC,qBAAAA,GDoJwBS,CAAmB96D,IAEjE+6D,GAAaC,IE9LC,MACrB,MAAOD,EAAaE,IAAkB1wE,EAAAA,EAAAA,KAAkB,GAMxD,MAAO,CAACwwE,GAJkB3sE,EAAAA,EAAAA,KAAY,KACpC6sE,GAAgBzyF,IAAaA,MAC5B,MFyLqC0yF,IAEhC96B,QAASrG,KAAgCsG,EAAAA,GAAAA,IAAwB,CACvEC,QAAStgC,EACTyhC,WA1F0B,MA6FtB05B,IAAuB/sE,EAAAA,EAAAA,KAAY,KACvCisE,KACAW,OACC,CAACX,GAAsBW,KAEpBI,IAA4BhtE,EAAAA,EAAAA,KAAY,KAC5C0pE,EAA6BuD,EAAAA,GAAAA,cAC5B,CAACvD,KAGJ/uE,EAAAA,EAAAA,KAAU,KACR0uE,EAAwB,CAAEjwG,UAAW0wG,MACpC,CAACT,EAAyBS,IAE7B,MAAMrpF,GAAYwoF,GAAkB7wG,GAEpCuiC,EAAAA,EAAAA,KAAU,KACJtd,GACFosF,EAAkB,CAAEhpF,UAAAA,OAErB,CAACgpF,EAAmBhpF,GAAWpD,IAElC,MAAM6vF,IAAoBltE,EAAAA,EAAAA,KAAatjC,IACrC2xE,EAAgB,CACdj2E,OAAQqoB,GACRpoB,SAAUkB,EAAAA,GACVmD,UAAAA,EACA2B,OAAQuwE,EAAAA,GAAAA,gBAET,CAACnuD,GAAW4tD,IAET8+B,IAAkBntE,EAAAA,EAAAA,KAAatjC,IACnC4xE,EAAgB,CAAEl2E,OAAQqoB,GAAW/jB,UAAAA,MACpC,CAAC+jB,GAAW6tD,IAET8+B,IAAoBptE,EAAAA,EAAAA,KAAa1mC,IACrCe,EAAS,CAAEf,GAAAA,MACV,CAACe,IAEEgzG,IAAqBrtE,EAAAA,EAAAA,KAAatjC,IACtC0B,EAAa,CAAEhG,OAAQqoB,GAAW/jB,UAAAA,MACjC,CAAC+jB,GAAWriB,IAETkvG,IAAgCttE,EAAAA,EAAAA,KAAY,KAChD6pE,OAAkBpxG,KACjB,IAuBH,IAAI80G,IArBJ5yE,EAAAA,EAAAA,KAAU,KACR,GAAKgJ,EAAcvpB,SAAYxY,EAAAA,GAI/B,OAAO2iC,EAAAA,GAAAA,IAAcZ,EAAcvpB,QAAS,CAC1CoqB,wBAAyB,WACzBC,QAAU,CAACz+B,EAAG7F,IACRA,IAAcukC,GAAAA,GAAAA,MAChBilE,EAAa5mG,KAAKkpB,IAAI4Z,EAAY,EAAGD,EAAKjoC,OAAS,KAC5C,GACEwC,IAAcukC,GAAAA,GAAAA,QACvBilE,EAAa5mG,KAAKC,IAAI,EAAG6iC,EAAY,KAC9B,OAMZ,CAACA,EAAWD,EAAKjoC,SAGpB,MAAM6vG,GAA4B,YAAflF,IAA8BE,GAAgC,UAAfF,EAE9DkF,GACFD,GAAkB5/D,EAA2C,EAtKrC,IAwKd9wC,KACV0wG,GAAiBE,EAAAA,GAEnB,MAAMC,IAAmBzlB,EAAAA,GAAAA,GAAkB,CAAC7vF,EAAQkwG,GAAaiF,IA8JjE,OACE,mBAACI,GAAA,EAAD,CACE5nE,IAAK6L,EACLlW,UAAU,wBACVkyE,aAAcvF,GAAgCC,GAC9CtR,MAAO0W,GAAmB7wG,QAAcpE,EACxCk0G,YAAaA,GACbkB,cAAeC,EAAAA,GACfC,iBAAkBL,GAAmC,YAAfpF,EAA2BT,EAAAA,GAAgBtwF,EAAAA,GAAsB,EAEvGy2F,sBAAoB,EACpBC,YAAU,EACVC,WAAYvG,GACZlrB,SAAUhC,KAERsvB,IAyCR,SAA2B3xG,EAAgB6wG,GACzC,OACE,0BAAKvtE,UAAU,gBACb,mBAACyyE,GAAA,EAAD,CAAatpG,OAAQokG,GAAkB7wG,IACvC,mBAACg2G,GAAA,EAAD,CAAWnrE,aAAcgmE,GAAkB7wG,KA7CxBi2G,CAAkBj2G,EAAQ6wG,IAC3Cx8F,GACA,0BACEivB,UAAU,gBAEV,mBAAC6B,GAAA,EAAD,CACEwI,IAAKpC,EACLzU,KAAM/zB,EAAKiiC,MAAQ,sBAAwB,kBAC3CI,UAAWA,GACXwI,YAAaJ,EAAKjoC,OAClB2wG,qBAAmB,EACnB5yE,UAAU,0BACV6yE,QAASvC,GACTvJ,OAAQsK,IA9KlB,WACE,IAAKlwG,KAAgB6wG,KAAqBryG,EAAc,CACtD,MAAMmzG,EAAYhB,KAAeE,GAC3Be,EAA2BxxG,QAAuB,YAAfqrG,GAA4BG,GAErE,OACE,0BAAK/sE,UAAU,uBACX8yE,IAAcC,GAA4B,mBAACpxE,GAAA,EAAD,MAC3CoxE,GAA4B,mBAACC,GAAA,EAAD,CAAc9xG,KAAK,+CAKtD,IAAKC,GAAYc,OAAQ,CACvB,IAAIf,EAEJ,OAAQ0rG,GACN,IAAK,UACH1rG,EAAO6rG,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACH7rG,EAAOzB,EAAK,oBACZ,MACF,IAAK,YACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,yBACZ,MACF,QACEyB,EAAOzB,EAAK,0BAGhB,OACE,0BAAKugC,UAAU,sBACb,mBAACgzE,GAAA,EAAD,CAAc9xG,KAAMA,KAK1B,OACE,0BACE8+B,UAAY,WAAU4sE,SACtBnrE,IAAKhiC,EAAKiiC,OAAwB,UAAfkrE,EAAyB,WAAQ7vG,EACpDi+E,eAAa,GAEG,UAAf4xB,EACEzrG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACq1G,GAAA,EAAD,CACE91E,IAAKv/B,EACLoC,QAASL,EAAa/B,GACtBizD,YAAa28C,GAAmB7tG,EAAa/B,GAAIizD,YACjDqD,oBAAqB+b,GACrB1uC,QAASiwE,OAGI,cAAf5E,EACDzrG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACk4E,GAAA,EAAD,CACE34C,IAAKv/B,EACLoC,QAASL,EAAa/B,GACtBs1G,UAAQ,EACRC,SAAO,EACPnzE,UAAU,cACVg7B,cAAeuP,EAAkB/lE,SAAS5G,GAC1Cs2D,oBAAqB+b,GACrBmjC,YAAazB,OAGA,UAAf/E,EACDzrG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACy1G,GAAA,EAAD,CACEl2E,IAAKv/B,EACLoC,QAASL,EAAa/B,GACtBizD,YAAa28C,GAAmB7tG,EAAa/B,GAAIizD,YACjDqD,oBAAqB+b,GACrBqjC,eAAgB3B,OAGH,UAAf/E,EACDzrG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC63E,GAAA,EAAD,CACEt4C,IAAKv/B,EACL2qB,MAAOA,EACPvoB,QAASL,EAAa/B,GACtB+E,OAAQ+yE,EAAAA,GAAAA,YACR9uE,KAAMjH,EAAa/B,GAAIgJ,KACvB+a,aAAcA,EACdqe,UAAU,cACV41C,OAAQ67B,GACR2B,YAAazB,GACb32C,cAAeuP,EAAkB/lE,SAAS5G,OAG7B,UAAfgvG,EACDzrG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC63E,GAAA,EAAD,CACEt4C,IAAKv/B,EACL2qB,MAAOA,EACPvoB,QAASL,EAAa/B,GACtB23D,aAAag+C,EAAAA,GAAAA,GAAc9zG,EAAME,EAAa/B,GAAKukC,EAAW6d,GAC9Dr9C,OAAQ+yE,EAAAA,GAAAA,YACR9uE,KAAMjH,EAAa/B,GAAIgJ,KACvB+a,aAAcA,EACdqe,UAAU,cACV41C,OAAQ67B,GACR2B,YAAazB,GACb32C,cAAeuP,EAAkB/lE,SAAS5G,OAG7B,YAAfgvG,EACDzrG,GAA0BrB,KAAI,CAAClC,EAAI6R,KAClC,0BAAC+jG,GAAA,EAAD,CACEr2E,IAAKv/B,EACLqpG,cAAex3F,EACfuwB,UAAU,6CAEVuB,QAAS,IAAMmwE,GAAkB9zG,GACjC61G,gBAtIoBC,EAsImB91G,EArI1C81G,IAAal/F,GAAkB64F,EAA+B,CAAC,CACpE5yF,MAAOhb,EAAK,iCACZ0mC,KAAM,OACNwtE,QAAS,KACPxF,EAAkBuF,WAJmC32G,IAuI/C,mBAAC6pD,GAAA,EAAD,CAAiBz9C,OAAQvL,EAAIg2G,eAAa,KAxItD,IAAgCF,KA2IP,gBAAf9G,EACDzrG,GAA0BrB,KAAI,CAAClC,EAAI6R,IAClC,mBAAC+jG,GAAA,EAAD,CACEr2E,IAAKv/B,EACLqpG,cAAex3F,EACfuwB,UAAU,6CAEVuB,QAAS,IAAM5iC,EAAS,CAAEf,GAAAA,KAE1B,mBAACspD,GAAA,EAAD,CAAexqD,OAAQkB,YAGzBb,GAmCCg5E,IAEH,mBAAC9rC,GAAA,EAAD,CAAS4pE,KAAG,EAAC1pE,UAAWA,EAAWD,KAAMA,EAAME,YAAa6jE,KAI/Df,GACC,mBAAC4G,GAAA,EAAD,CACEjpE,QAAwB,YAAf+hE,EACTrrE,QAAS+vE,GACTntE,UAAW1kC,EAAK,0BAEhB,wBAAGugC,UAAU,0BAGhBqtE,GACC,mBAAC0G,GAAA,EAAD,CACE1tG,OAAQ9E,QAAQ2sG,GAChB/kG,OAAQ+kG,EACRviE,QAASimE,UGrdnB,IAAelyE,EAAAA,EAAAA,KAPyB6K,IACtC,MAAMypE,GAAcvpE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOspE,EAAc,mBAACA,EAAgBzpE,GAAY,mBAACI,GAAA,EAAD,SCKpD,IAAejL,EAAAA,EAAAA,KAPwB6K,IACrC,MAAM0pE,GAAaxpE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOupE,EAAa,mBAACA,EAAe1pE,GAAY,mBAACI,GAAA,EAAD,SCElD,GAPuCJ,IACrC,MAAM+gE,GAAa7gE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO4gE,EAAa,mBAACA,EAAe/gE,GAAY,mBAACI,GAAA,EAAD,OCGlD,GAP8CJ,IAC5C,MAAMghE,GAAoB9gE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAGzD,OAAO6gE,EAAoB,mBAACA,EAAsBhhE,GAAY,mBAACI,GAAA,EAAD,OCChE,IAAejL,EAAAA,EAAAA,KAPgB,KAC7B,MAAMqqE,GAAgBt/D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOq/D,EAAgB,mBAACA,EAAD,MAAoB,mBAACp/D,GAAA,EAAD,SCG7C,IAAejL,EAAAA,EAAAA,KAPY,KACzB,MAAMsqE,GAAYv/D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOs/D,EAAY,mBAACA,EAAD,MAAgB,mBAACr/D,GAAA,EAAD,SCErC,IAAejL,EAAAA,EAAAA,KANc,KAC3B,MAAMoqE,GAAcr/D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAOo/D,EAAc,mBAACA,EAAD,MAAkB,mBAACn/D,GAAA,EAAD,S,eCqCzC,MA4GA,IAAejL,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAACxlC,EAAD,KAAoC,UAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IACxB6f,QAAS23F,GAAoBz3G,EAAO+mB,aAAe,IACnDlV,KAAM6zB,GAAc1lC,EAAO4L,OAC7B,cAAEmM,EAAF,uBAAiB3V,EAAjB,gBAAyC++B,GAAoBnhC,EAC7D40C,EAAYlvC,IAAQuvC,EAAAA,EAAAA,IAAcvvC,IAGtChF,MAAO+kC,EADH,eAEJ95B,EAFI,cAGJa,EAHI,aAIJC,GACEzM,EAAO0oB,WAEX,MAAO,CACLksB,UAAAA,EACAha,QAASl1B,MAAAA,GAAF,UAAEA,EAAMyU,gBAAR,aAAE,EAAgBygB,QACzB7iB,cAAAA,EACA2tB,UAAAA,EACA+xE,gBAAAA,EACAhyE,YAAAA,EACAiyE,YAAa/rG,EACbiS,UAAWxb,IAA2B0yG,EAAAA,GAAAA,QACtCtoG,cAAAA,EACAC,aAAAA,EACA00B,gBAAAA,KA1BcqE,EA5G8B,IAe5C,IAf6C,UACjDoP,EADiD,gBAEjDzT,EAFiD,QAGjDvG,EAHiD,WAIjD+8E,EAJiD,cAKjD5/F,EALiD,UAMjD2tB,EANiD,gBAOjD+xE,EAPiD,UAQjD75F,EARiD,YASjD6nB,EATiD,YAUjDiyE,EAViD,aAWjDjrG,EAXiD,cAYjDD,EAZiD,QAajD0iC,EAbiD,SAcjDjiC,GACI,EACJ,MAAM,mBAAE2qG,EAAF,gBAAsBnwF,IAAoB/G,EAAAA,EAAAA,MAE1C1d,GAAO+hC,EAAAA,GAAAA,MACN8yE,EAAmBC,IAAwB9zE,EAAAA,EAAAA,IAAmB,IAE/D+zE,GADwBz4C,EAAAA,GAAAA,GAAYu4C,KACcA,GAExDr1E,EAAAA,EAAAA,KAAU,KACJv1B,GAAgC,yBAApBk0B,GACd1Z,MAED,CAAC0Z,EAAiBl0B,EAAUwa,KAE/BilB,EAAAA,GAAAA,IAAez/B,EAAUiiC,GAEzB,MAAM4iE,GAAY/qE,EAAAA,EAAAA,KAAQ,IACjBnM,EAAUA,EAAQv3B,KAAK20G,GAAWA,EAAOtrG,SAAU,IACzD,CAACkuB,IAEEq9E,GAAqBpwE,EAAAA,EAAAA,KAAannC,IACtCk3G,EAAmB,CAAEl3G,MAAAA,MACpB,CAACk3G,IAEEM,GAAenxE,EAAAA,EAAAA,KAAQ,KAE3B,MAAMwc,GAAY38C,EAAAA,EAAAA,MAAY4K,MAAMK,KAC9BsmG,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiBl0D,EAAW9d,GAAe,GAE1G,OAAOusE,EAAAA,EAAAA,KACLl5F,EAAAA,EAAAA,IAAO,IACFq/F,KACC1rG,GAAgB,MAChBD,GAAiB,KACpBlJ,QAAQoJ,IACT,MAAMqM,EAAOwqC,EAAU72C,GAOvB,OACGolG,EAAU/pG,SAAS2E,IACjBA,IAAWqL,KACTgB,KAAS2O,EAAAA,EAAAA,IAAU3O,KAAW67B,GAAa77B,EAAKs/F,wBAGzD3yE,KAED,CACD+xE,EAAiB/xE,EAAWD,EAAah5B,EAAcD,EAAeuL,EAAe+5F,EAAWl9D,IAG5F0jE,GAAiBzwE,EAAAA,EAAAA,KAAY,KAC7BgwE,EAAkBryG,SACpBoyG,EAAmB,CAAEl3G,MAAO,KAC5Bi3G,EAAWE,MAEZ,CAACA,EAAmBD,EAAoBD,IAE3C,OACE,0BAAKp0E,UAAU,kBACb,0BAAKA,UAAU,wBACb,mBAACg1E,GAAA,EAAD,CACEhJ,QAAS2I,EACTM,YAAaX,EACbY,YAAahzE,EACbizE,kBAAmB11G,EAAK,yBACxB21G,cAAc,4BACd/6F,UAAW85F,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,gBAAiBf,IAGnB,mBAACV,GAAA,EAAD,CACEjpE,QAAStpC,QAAQ+yG,EAAkBryG,QACnC4yC,SAAUx6B,EACV8pB,UAAW1kC,EAAK,yBAChB8hC,QAASwzE,GAER16F,EACC,mBAACsnB,GAAA,EAAD,CAASC,MAAM,UAEf,wBAAG5B,UAAU,4BCtGnBw1E,GAAqB,IAAMn2G,EAAAA,GAC3Bo2G,GAAqB5zG,OAAOC,KAAK4zG,EAAAA,IAAoBzzG,OAAS,EAC9D0zG,GAA2B9zG,OAAOC,KAAK0yC,EAAAA,IAAmBvyC,OAAS,EAEzE,SAAS2zG,KACP,MAAMlhE,EAAcxc,SAASkH,cAAc,mCACvCsV,GACFA,EAAYzuB,OAIhB,MA+QA,IAAeyZ,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IAAuB,MACtB,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3Do5G,GAAuBC,EAAAA,EAAAA,IAA2Br5G,GAClDs5G,EAAuBr5G,EAAM,UAAGD,EAAOgN,WAAWtE,SAASzI,UAA9B,aAAG,EAAoCkN,gBAAa7M,EAEvF,MAAO,CACLysG,YAAYwM,EAAAA,EAAAA,IAA4Bv5G,GACxCC,OAAAA,EACAC,SAAAA,EACAs5G,eAAgB10G,QAAQ7E,GAAUm5G,GAClCjuE,4BAA6BnrC,EAAOmrC,4BACpCmuE,qBAAAA,KAZc9zE,EA/QgB,IAO9B,UAP+B,WACnCunE,EADmC,OAEnC9sG,EAFmC,SAGnCC,EAHmC,eAInCs5G,EAJmC,4BAKnCruE,EALmC,qBAMnCmuE,GACI,EACJ,MAAM,eACJG,EADI,iBAEJxN,EAFI,qBAGJlsG,EAHI,sBAIJ2zF,EAJI,kBAKJC,EALI,iBAMJ+lB,EANI,eAOJC,EAPI,6BAQJpI,EARI,yBASJpF,EATI,iBAUJD,EAVI,wBAWJ0N,EAXI,oBAYJC,EAZI,4BAaJ7iE,IACEt2B,EAAAA,EAAAA,OAEIkT,MAAOF,IAAgBm0B,EAAAA,GAAAA,MACxBgkD,EAAciO,IAAmB91E,EAAAA,EAAAA,IAAuBgpE,EAAAA,GAAAA,UACxDlB,EAAkBiO,IAAuB/1E,EAAAA,EAAAA,IAA4B+T,EAAAA,GAAAA,UACrEiiE,EAAsBC,IAA2Bj2E,EAAAA,EAAAA,OACjDk2E,EAAyBC,IAA8Bn2E,EAAAA,EAAAA,MACxDo2E,EAAiBvO,IAAiBmB,EAAAA,GAAAA,QAElCpjG,OAAwBtJ,IAAfysG,EACTpC,EAAYoC,IAAekM,EAAAA,GAAAA,SAC3B3N,EAAWyB,IAAekM,EAAAA,GAAAA,OAC1BrO,EAAemC,IAAekM,EAAAA,GAAAA,WAC9B1N,EAAewB,IAAekM,EAAAA,GAAAA,WAC9BzN,EAAsBuB,IAAekM,EAAAA,GAAAA,kBACrCxN,EAAkBsB,IAAekM,EAAAA,GAAAA,cACjCvN,EAAcqB,IAAekM,EAAAA,GAAAA,UAC7BtN,EAAgBoB,IAAekM,EAAAA,GAAAA,YAC/BrN,EAAsBmB,IAAekM,EAAAA,GAAAA,cACrCoB,EAAe3mF,GAAeG,EAAAA,IAE7B0S,EAAsBumE,IAA2B9oE,EAAAA,EAAAA,KAAUp6B,GAE5DmlG,EAAmB,WAAG5lD,EAAAA,GAAAA,GAAiB4jD,GAAY,GAAOyM,UAAvC,SAA2D,EAE9E1vF,GAAQ+d,EAAAA,EAAAA,KAAY,WAA2B,IAA1ByyE,IAA0B,yDACnD,OAAQvN,GACN,KAAKkM,EAAAA,GAAAA,cACH1H,EAA6BuD,EAAAA,GAAAA,QAC7B,MACF,KAAKmE,EAAAA,GAAAA,SACH,GAAImB,GAAkBE,EAAgB,CACpCR,EAAgB9M,EAAAA,GAAAA,SAChB,MAEFyM,OAAen5G,EAAW,CAAEwpG,gBAAgB,IAC5C,MACF,KAAKmP,EAAAA,GAAAA,WACH,OAAQnN,GACN,KAAK/zD,EAAAA,GAAAA,QACHk0D,IACA,MACF,KAAKl0D,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHgiE,EAAoBhiE,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHgiE,EAAoBhiE,EAAAA,GAAAA,kBACpBkiE,OAAwB35G,GACxB65G,OAA2B75G,GAC3B,MACF,KAAKy3C,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHgiE,EAAoBhiE,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHgiE,EAAoBhiE,EAAAA,GAAAA,SACpB8hE,EAAoB,CAAE34F,YAAQ5gB,IAC9B6rG,EAAyB,CAAElsG,OAAAA,EAAQihB,YAAQ5gB,IAI/C,MAEF,KAAK24G,EAAAA,GAAAA,kBACHW,IACA,MACF,KAAKX,EAAAA,GAAAA,WACH/M,IACA,MACF,KAAK+M,EAAAA,GAAAA,OACHE,KACAp5G,IACA,MAEF,KAAKk5G,EAAAA,GAAAA,cACHE,KACAzlB,EAAsB,CAAEhzF,WAAOJ,IAC/B,MACF,KAAK24G,EAAAA,GAAAA,UACHE,KACAxlB,EAAkB,CAAEjzF,WAAOJ,IAC3B,MAEF,KAAK24G,EAAAA,GAAAA,YACHS,OAGH,CACD3M,EAAYqN,EAAgBX,EAAgBC,EAAkBnI,EAC9DzF,EAAkBG,EAAkBlsG,EAAsB2zF,EAAuBC,EACjFwY,EAA0BlsG,EAAQ45G,EAAqB3N,EAAkB0N,IAGrEW,GAAyB1yE,EAAAA,EAAAA,KAAY,CAACovE,EAAUuD,KACpDP,EAAwBhD,GACxBkD,EAA2BK,KAC1B,IAEGC,GAA6B5yE,EAAAA,EAAAA,KAAaiqE,IAC9C6H,EAAe,CAAE15G,OAAAA,EAAQ6xG,UAAAA,MACxB,CAAC6H,EAAgB15G,IAwCpB,SAASq5E,EAAcrsE,GACrB,IAA6B,IAAzB8hG,EAIJ,OAAQA,GACN,KAAKkK,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEv4E,IAAKzgC,EACLA,OAAQA,EACRgN,SAAUrD,GAAUqD,EACpB0qG,WAAY8C,EACZvrE,QAASplB,IAGf,KAAKmvF,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEv4E,IAAKzgC,EACLA,OAAQA,EACR4rG,aAAcA,EACdoF,qBAAsB6I,IAG5B,KAAKb,EAAAA,GAAAA,OACH,OAAO,mBAAC,GAAD,CAAah5G,OAAQA,EAASC,SAAUA,EAAWgvC,QAASplB,EAAO7c,SAAUrD,GAAUqD,IAChG,KAAKgsG,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEv4E,IAAKzgC,EACLA,OAAQA,EACR00C,cAAem3D,EACfoO,wBAAyBA,EACzBF,qBAAsBA,EACtB/sG,SAAUrD,GAAUqD,EACpBo+B,eAAgB0uE,EAChBW,mBAAoBH,EACpBrrE,QAASplB,IAIf,KAAKmvF,EAAAA,GAAAA,WACH,OAAO,mBAAC,GAAD,CAAYh5G,OAAQA,EAASgN,SAAUrD,GAAUqD,IAC1D,KAAKgsG,EAAAA,GAAAA,kBACH,OAAO,mBAAC,GAAD,CAAmBh5G,OAAQA,EAASgN,SAAUrD,GAAUqD,IACjE,KAAKgsG,EAAAA,GAAAA,cACH,OAAO,mBAAC,GAAD,CAAe/pE,QAASplB,EAAO7c,SAAUrD,GAAUqD,IAC5D,KAAKgsG,EAAAA,GAAAA,UACH,OAAO,mBAAC,GAAD,CAAW/pE,QAASplB,EAAO7c,SAAUrD,GAAUqD,IACxD,KAAKgsG,EAAAA,GAAAA,YACH,OAAO,mBAAC,GAAD,CAAa/pE,QAASplB,EAAO7c,SAAUrD,GAAUqD,KAI9D,OA7FAu1B,EAAAA,EAAAA,KAAU,IAAO54B,GAAS6iC,EAAAA,GAAAA,GAAsB3iB,QAASxpB,GAAY,CAACsJ,EAAQkgB,KAE9E0Y,EAAAA,EAAAA,KAAU,KACR77B,YAAW,KACTmmG,GAAyBljG,KACxBmvG,MACF,CAACnvG,KAEJ44B,EAAAA,EAAAA,KAAU,KACJ82E,IACFS,EAAoBT,GACpBtiE,OAA4B12C,MAE7B,CAACg5G,EAAsBtiE,KAG1BxU,EAAAA,EAAAA,KAAU,KACJ54B,GAAUywG,GACZvwF,MAGD,CAACuwF,KAGJn3B,EAAAA,GAAAA,IAA4B,IAAkB,IAAhBgS,GAAgB,EACxCA,IAAej1F,IACjB65G,EAAgB9M,EAAAA,GAAAA,SAChB+M,EAAoBhiE,EAAAA,GAAAA,YAErB,CAAC93C,KAEJysC,EAAAA,GAAAA,IAAe8sE,IACbzM,IAAekM,EAAAA,GAAAA,UACZlM,IAAekM,EAAAA,GAAAA,YACflM,IAAekM,EAAAA,GAAAA,gBACjB,IAAMnvF,GAAM,IAAQ2vF,GA2DrB,0BACEt4G,GAAG,sBACHoiC,UAAYi2E,OAA+Bl5G,EAAd,aAE5B+5G,GACC,0BAAK92E,UAAU,mBAAmBuB,QAAShb,IAE7C,0BAAK3oB,GAAG,eACN,mBAAC,GAAD,CACElB,OAAQA,EACRorG,aAAczhG,EACd+gG,UAAWA,EACXW,SAAUA,EACVV,aAAcA,EACdW,aAAcA,EACdC,oBAAqBA,EACrBC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClB58D,QAASplB,EACTuhB,eAAgB0uE,IAElB,mBAAC30E,GAAA,EAAD,CACErO,KAAOwP,GAAwB4E,EAA+B,OAAS,YACvE0C,YAAamrE,GAAqBE,GAClC7zE,UAAWulE,EAAeoO,GAAqBlN,EAAmBiD,EAClEn+D,eAAa,GAEZ0oC,SChTX,IAAer2C,EAAAA,EAAAA,KANwB,IAAgB,IAAf,OAAEr5B,GAAa,EACrD,MAAM+wG,GAAc3sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBrkC,GAEnE,OAAO+wG,EAAc,mBAACA,EAAD,WAAkBr6G,KCDzC,IAAIs6G,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAAS3rG,EAAa41E,GAC5C61B,GAAiB32G,KAAK,CAAEkL,IAAAA,EAAK41E,SAAAA,IACxB81B,KACHA,IAAU,EACVl0G,YAAWmK,gBAOfA,iBACE,IAAIsH,EAAQ,EACZ,IAAK,MAAM2iG,KAAmBH,GAC5BI,GAAYD,GACZ3iG,IArBoB,KAsBhBA,UACIoD,EAAAA,EAAAA,IAtBW,KAuBjBpD,EAAQ,GAGZwiG,GAAmB,GAhBTK,GACNJ,IAAU,IAXO,MA6BvB,SAASG,GAAT,GAAyD,IAApC,IAAE7rG,EAAF,SAAO41E,GAA6B,EACvD,MAAMpjE,EAAO8Z,SAAS+iB,cAAc,KACpC78B,EAAK+H,KAAOva,EACZwS,EAAKm5F,SAAW/1B,EAChB,IACEpjE,EAAKu5F,QACL,MAAOhsG,GAEPkU,QAAQ/S,MAAMnB,ICtBlB,MAEMisG,GAAoB,IAAIvuF,IACxBwuF,GAAqB,IAAIxuF,IA6D/B,IAAeqW,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IAGQ,CACL2I,gBAHsB3I,EAAO2I,gBAAgBD,SAI7C/G,SAHe3B,EAAO2B,SAAS+G,YAHjB88B,EA3DoB,IAGlC,IAHmC,gBACvC78B,EADuC,SAEvChH,GACI,EACJ,MAAM,4BAAE05G,IAAgC36F,EAAAA,EAAAA,MAElCihE,GAAeC,EAAAA,GAAAA,GAXQ,KAWgC,GAEvD05B,GAA0BzzE,EAAAA,EAAAA,KAAatkC,IAC3C63G,GAAmBptF,IAAIzqB,GACvBo+E,GAAa,KACPy5B,GAAmB71E,OACrB81E,EAA4B,CAAE15G,SAAUssB,MAAM9a,KAAKioG,MACnDA,GAAmBG,cAGtB,CAACF,EAA6B15B,KAEjCn/C,EAAAA,EAAAA,KAAU,KACR,MAAMg5E,EAAiBp2G,OAAOojE,QAAQ7/D,GAAiBtF,KAAI,QAAEpD,EAAQ8C,GAAV,SACzDA,EAAWM,KAAKlC,GAAOQ,EAAS1B,GAAQ4R,KAAK1Q,QAC5Cs6G,OAEED,EAAeh2G,OAKpBg2G,EAAe3yG,SAAStF,IACtB,GAAI43G,GAAkBtnG,IAAItQ,GACxB,OAEF43G,GAAkBntF,IAAIzqB,GACtB,MAAMm4G,GAAehgE,EAAAA,EAAAA,IAAoBn4C,EAAS,YAClD,IAAKm4G,EAEH,YADAJ,EAAwB/3G,GAI1B,MAAMg+C,EAAYptB,GAAAA,GAA0BunF,GAE5C,GAAIn6D,EAGF,OAFAu5D,GAASv5D,GAAWo6D,EAAAA,EAAAA,IAA0Bp4G,SAC9C+3G,EAAwB/3G,GAI1B4wB,GAAAA,GAAkBunF,EAActnF,EAAAA,GAAAA,SAAwB,GAAMglB,MAAMh2C,IAC9DA,GACF03G,GAAS13G,GAAQu4G,EAAAA,EAAAA,IAA0Bp4G,IAE7C+3G,EAAwB/3G,SA3B1B43G,GAAkBI,UA8BnB,CAAC55G,EAAUgH,EAAiB0yG,EAA6BC,Q,0BCjE9D,MA4EA,IAAer4E,EAAAA,EAAAA,KArEiB,IAA+B,IAA9B,WAAEnzB,EAAF,UAAc8rG,GAAgB,EAC7D,MAAM,UAAEC,EAAF,iBAAaryG,EAAb,gBAA+Bf,IAAoBiY,EAAAA,GAAAA,MACnD1d,GAAO+hC,EAAAA,GAAAA,MACP,IAAE51B,EAAF,OAAOlP,EAAP,UAAesE,GAAcuL,GAAc,GAC3ClG,EAAS9E,QAAQqK,GAEjBwlF,GAAoBC,EAAAA,GAAAA,GAAqB30F,IAC/CwrE,EAAAA,GAAAA,IAAY,KACVkpB,EAAkB,CAAEtzF,KAAM,kBACzBuI,EAhB6B,SAgBQtJ,GAExC,MAAMw7G,GAAgBj0E,EAAAA,EAAAA,KAAa+gC,IACjC,IACE,MAAMh6D,EAAOwjB,KAAK2pF,MAAMnzC,EAAMh6D,MACP,gBAAnBA,EAAKotG,YACPvzG,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAY,CAACwB,GAAY4D,aAAa,IAC5E0zG,KAGqB,eAAnBjtG,EAAKotG,WACPxyG,EAAiB,CAAEjG,QAAS,4BAE9B,MAAOsK,OAGR,CAAC5N,EAAQ47G,EAAWt3G,EAAWkE,EAAiBe,IAE7CyyG,GAAap0E,EAAAA,EAAAA,KAAa+gC,IAC9BA,EAAMrS,cAAc5sC,UACnB,IAkBH,OAhBA6Y,EAAAA,EAAAA,KAAU,KACR97B,OAAO09B,iBAAiB,UAAW03E,GAC5B,IAAMp1G,OAAO29B,oBAAoB,UAAWy3E,KAClD,CAACA,KAGJt5E,EAAAA,EAAAA,KAAU,KACR,GAAK54B,EAIL,OAFA+pB,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAAC/pB,IAGF,mBAACsyG,GAAA,EAAD,CACE34E,UAAU,YACV35B,OAAQA,EACRslC,QAAS2sE,EACT79F,MAAO49F,EACPO,gBAAc,GAEbvyG,GACC,6BACE25B,UAAU,aACV82B,OAAQ4hD,EACRv/D,IAAKvtC,EACL6O,MAAOhb,EAAK,cACZo5G,QAAQ,yDACRC,MAAM,mBC3EhB,IAAep5E,EAAAA,EAAAA,KAPgB,IAAgB,IAAf,OAAEr5B,GAAa,EAC7C,MAAM0yG,GAAgBtuE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBrkC,GAGvE,OAAO0yG,EAAgB,mBAACA,EAAD,WAAoBh8G,KCG7C,IAAe2iC,EAAAA,EAAAA,KAPU,IAAgB,IAAf,OAAEr5B,GAAa,EACvC,MAAM2yG,GAAUvuE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAYrkC,GAG3D,OAAO2yG,EAAU,mBAACA,EAAD,WAAcj8G,KCKjC,IAAe2iC,EAAAA,EAAAA,KAR2B6K,IACxC,MAAM,OAAElkC,GAAWkkC,EACb0uE,GAAgBxuE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBrkC,GAGvE,OAAO4yG,EAAgB,mBAACA,EAAkB1uE,QAAYxtC,KCIxD,IAAe2iC,EAAAA,EAAAA,KAR2B6K,IACxC,MAAM,IAAE3+B,GAAQ2+B,EACV2uE,GAAgBzuE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB9+B,GAGvE,OAAOstG,EAAgB,mBAACA,EAAkB3uE,QAAYxtC,KCGxD,IAAe2iC,EAAAA,EAAAA,KAR6B6K,IAC1C,MAAM,OAAElkC,GAAWkkC,EACb4uE,GAAkB1uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBrkC,GAG3E,OAAO8yG,EAAkB,mBAACA,EAAoB5uE,QAAYxtC,KCC5D,IAAe2iC,EAAAA,EAAAA,KARuB6K,IACpC,MAAM,YAAEnM,GAAgBmM,EAClB6uE,GAAY3uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAActM,GAG/D,OAAOg7E,EAAY,mBAACA,EAAc7uE,QAAYxtC,KCKhD,IAAe2iC,EAAAA,EAAAA,KAP8B6K,IAC3C,MAAM,SAAE7gC,GAAa6gC,EACf8uE,GAAmB5uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBhhC,GAE7E,OAAO2vG,EAAmB,mBAACA,EAAD,WAAuBt8G,KCGnD,IAAe2iC,EAAAA,EAAAA,KAPuB6K,IACpC,MAAM,SAAE7gC,GAAa6gC,EACf+uE,GAAY7uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAchhC,GAE/D,OAAO4vG,EAAY,mBAACA,EAAD,WAAgBv8G,KCGrC,IAAe2iC,EAAAA,EAAAA,KAR6B6K,IAC1C,MAAM,OAAElkC,GAAWkkC,EACbgvE,GAAkB9uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBrkC,GAG3E,OAAOkzG,EAAkB,mBAACA,EAAoBhvE,QAAYxtC,KCG5D,IAAe2iC,EAAAA,EAAAA,KARgC6K,IAC7C,MAAM,OAAElkC,GAAWkkC,EACbivE,GAAqB/uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBrkC,GAGjF,OAAOmzG,EAAqB,mBAACA,EAAuBjvE,QAAYxtC,KCGlE,IAAe2iC,EAAAA,EAAAA,KARyB6K,IACtC,MAAM,OAAEpgB,GAAWogB,EACbkvE,GAAchvE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBvgB,GAGnE,OAAOsvF,EAAc,mBAACA,EAAgBlvE,QAAYxtC,KCGpD,IAAe2iC,EAAAA,EAAAA,KAR2B6K,IACxC,MAAM,IAAEn+B,GAAQm+B,EACVmvE,GAAgBjvE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBt+B,GAGvE,OAAOstG,EAAgB,mBAACA,EAAkBnvE,QAAYxtC,KCGxD,IAAe2iC,EAAAA,EAAAA,KAR4B6K,IACzC,MAAM,IAAEn+B,GAAQm+B,EACVovE,GAAiBlvE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBt+B,GAGzE,OAAOutG,EAAiB,mBAACA,EAAmBpvE,QAAYxtC,KCuF1D,IAAI68G,GAGAC,IAAiB,EAmSrB,SAASC,GAAWC,GAClB7hF,SAASumD,iBAAkC,gDACxCn5E,SAAS8Y,IACJ27F,EACG37F,EAAK+H,KAAK3hB,SAAS,oBACtB4Z,EAAK+H,KAAO/H,EAAK+H,KAAKmI,QAAQ,UAAW,mBAG3ClQ,EAAK+H,KAAO/H,EAAK+H,KAAKmI,QAAQ,iBAAkB,cAOxD,SAAS0rF,GAAgBC,GACnB/hF,SAASzd,QAAUw/F,IACrB/hF,SAASzd,MAAQw/F,GAIrB,UAAev6E,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjBxlC,IAAuB,UACtB,MAAQgjB,UAAY8S,OAAO,eAAED,EAAF,SAAkBpY,EAAlB,yBAA4BggG,KAAiCz9G,GAChFC,OAAQ6kB,EAAavgB,UAAWwgB,GAAmB/kB,EAAOsG,YAC5D+/C,EAAevhC,GAAeC,GAChCxV,EAAAA,EAAAA,IAAkBvP,EAAQ8kB,EAAaC,QACvCzkB,EACEwP,EAAa9P,EAAO8P,WACpB4tG,EAAc5tG,IAAcP,EAAAA,EAAAA,IAAkBvP,EAAQ8P,EAAW7P,OAAQ6P,EAAWvL,WACpFq3G,EAAY8B,MAAAA,GAAH,UAAGA,EAAapzG,QAAQsiE,YAAxB,aAAG,EAA2B5uD,MAE7C,MAAO,CACLmjB,gBAAiBnhC,EAAOmhC,gBACxBw8E,UAAW39G,EAAO29G,UAClBz4F,aAAcllB,EAAOklB,aACrB04F,iBAAkB59G,EAAOsN,kBACzBuwG,mBAAmBt3G,EAAAA,EAAAA,IAAyBvG,GAC5C89G,mBAAmBC,EAAAA,EAAAA,IAAwB/9G,GAC3Cg+G,oBAAoBC,EAAAA,EAAAA,IAAyBj+G,GAC7Ck+G,iBAAkBp5G,QAAQ9E,EAAOuO,cAAc/I,QAC/C24G,WAAYr5G,QAAQ9E,EAAOgP,QAAQxJ,QACnC6gD,aAAAA,EACAj3C,iBAAkBpP,EAAOoP,iBACzBgvG,sBAAuBt5G,QAAQ9E,EAAOsP,2BACtC67B,4BAA6BnrC,EAAOmrC,4BACpC/sB,0BAA2Bpe,EAAOoe,0BAClCigG,oBAAoBx+E,EAAAA,EAAAA,IAAyB7/B,GAC7CqhC,kBAAmBrhC,EAAOohC,WAAWC,kBACrCxL,eAAAA,EACApY,SAAAA,EACAggG,yBAAAA,EACAa,kBAAmBx5G,QAAQ9E,EAAOgiC,WAClC7mB,YAAanb,EAAOiM,SAAS4O,MAAMK,OACnCqjG,iBAAgB,UAAEv+G,EAAO2M,kBAAT,aAAE,EAAmBD,OACrC8xG,wBAAuB,UAAEx+G,EAAO2M,kBAAT,aAAE,EAAmBC,gBAC5CkD,WAAAA,EACA8rG,UAAAA,EACA6C,yBAA0B35G,QAAQ9E,EAAO0+G,iBACzC3uG,gBAAiB/P,EAAO+P,gBACxBoe,iBAAkBnuB,EAAOmuB,iBACzBT,OAAQ1tB,EAAO0tB,UAxCD8X,EAtTS,IA8BvB,IA9BwB,gBAC5BrE,EAD4B,UAE5Bw8E,EAF4B,aAG5Bz4F,EAH4B,iBAI5B04F,EAJ4B,kBAK5BC,EAL4B,kBAM5BC,EAN4B,mBAO5BE,EAP4B,iBAQ5BE,EAR4B,WAS5BC,EAT4B,aAU5B93D,EAV4B,kBAW5BhlB,EAX4B,iBAY5BjyB,EAZ4B,sBAa5BgvG,EAb4B,4BAc5BjzE,EAd4B,0BAe5B/sB,EAf4B,mBAgB5BigG,EAhB4B,eAiB5BxoF,EAjB4B,SAkB5BpY,EAlB4B,yBAmB5BggG,EAnB4B,YAoB5BtiG,EApB4B,kBAqB5BmjG,EArB4B,iBAsB5BC,EAtB4B,wBAuB5BC,EAvB4B,WAwB5B1uG,EAxB4B,UAyB5B8rG,EAzB4B,yBA0B5B6C,EA1B4B,gBA2B5B1uG,EA3B4B,iBA4B5Boe,EA5B4B,OA6B5BT,GACI,EACJ,MAAM,KACJixF,EADI,mBAEJ9hG,EAFI,yBAGJ+hG,EAHI,2BAIJC,EAJI,eAKJC,EALI,kBAMJC,EANI,kBAOJC,EAPI,gBAQJC,EARI,uBASJC,EATI,gBAUJjkG,EAVI,kBAWJkkG,EAXI,qBAYJtjG,EAZI,iBAaJujG,EAbI,wBAcJC,EAdI,yBAeJC,EAfI,cAgBJC,EAhBI,mBAiBJp1F,IACEzJ,EAAAA,EAAAA,MAEAyC,EAAAA,KAAUi6F,KACZA,IAAiB,EAEjBh6F,QAAQC,IAAI,qBAGdmf,EAAAA,EAAAA,KAAU,KACgB,yBAApBrB,GAA4D,4BAAdw8E,GAChDgB,MAED,CAACx9E,EAAiBw8E,EAAWgB,KAGhCn8E,EAAAA,EAAAA,KAAU,KACJtd,IACF45F,GAAe,GACfS,IACAL,IACAriG,IACA+hG,IACAC,IACAE,IACAC,EAAkB,CAAEvhG,SAAUs0E,EAAAA,KAC9B5nE,OAED,CACDjF,EAAcrI,EAAoBmiG,EAAmBH,EAA4BD,EACjFG,EAAmBD,EAAgBI,EAAwBK,EAAep1F,KAI5EqY,EAAAA,EAAAA,KAAU,KACJtd,IACEzH,IAAas0E,EAAAA,IACfitB,EAAkB,CAAEvhG,SAAAA,IAGtBwhG,EAAgB,CAAEO,SAAU/hG,OAE7B,CAACA,EAAUyH,EAAc+5F,EAAiBD,KAG7Cx8E,EAAAA,EAAAA,KAAU,KACJtd,IACG/J,EAIHgkG,KAHAlkG,IACAY,QAKH,CAACqJ,EAAc/J,EAAaF,EAAiBY,EAAsBsjG,KAGtE38E,EAAAA,EAAAA,KAAU,KACJtd,GAAgBm5F,GAClBiB,MAED,CAACp6F,EAAcm5F,EAAoBiB,KAGtC98E,EAAAA,EAAAA,KAAU,KACJtd,IAAiBu4F,GACnB2B,MAED,CAACl6F,EAAcu4F,EAA0B2B,KAG5C58E,EAAAA,EAAAA,KAAU,KACJtd,GAAgBu6F,GAAAA,GAAAA,WAAyB,eAC3CC,EAAAA,GAAAA,GAAgBC,mBAAmBF,GAAAA,GAAAA,OAAqB,YAAYj6G,YAErE,CAAC0f,KAGJsd,EAAAA,EAAAA,KAAU,KACR,GAAKnB,EAML,OAFA1N,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAAC0N,IAEJ,MAAMu+E,GAAuBzyE,EAAAA,GAAAA,GAC3BywE,OAAkBt9G,GAAW,OAAMA,EAAW6qC,GAE1C00E,IAA2Bp0E,EAAAA,EAAAA,KAAO,GAClCo+B,IAAcC,EAAAA,GAAAA,MAGpBoT,EAAAA,GAAAA,IAAY,IAA4B,IAA1B4iC,GAA0B,EACtC,QAA6Bx/G,IAAzBw/G,GAAyD,IAAnBjqF,EACxC,OAGFgqF,GAAyB59F,SAAU,EAE/B8G,EAAAA,KACF63C,EAAAA,EAAAA,KAAQ,KACNnlC,SAAStJ,KAAK2hB,UAAUisE,OAAO,8BAA+BnC,MAIlE,MAAMoC,GAA4B57B,EAAAA,GAAAA,OAElC67B,EAAAA,GAAAA,GAAqBxkF,SAASoX,eAAe,iBAAkB,KAC7DmtE,IACAH,GAAyB59F,SAAU,EACnC4nD,UAED,CAAC+zC,IAEJ,MAAMsC,IAAwB/yE,EAAAA,GAAAA,GAC5B0wE,OAAmBv9G,GAAW,OAAMA,EAAW6qC,GAE3Cg1E,IAA4B10E,EAAAA,EAAAA,KAAO,IAClC20E,GAAqBC,KAA0Br8E,EAAAA,EAAAA,IAAS65E,IAG/D3gC,EAAAA,GAAAA,IAAY,IAA6B,IAA3BojC,GAA2B,EACvC,QAA8BhgH,IAA1BggH,GAA0D,IAAnBzqF,EACzC,OAGFsqF,GAA0Bl+F,SAAU,EAEpC,MAAM+9F,GAA4B57B,EAAAA,GAAAA,OAElC67B,EAAAA,GAAAA,GAAqBxkF,SAASoX,eAAe,gBAAiB,KAC5DmtE,IACAG,GAA0Bl+F,SAAU,EACpC4nD,KACAw2C,GAAuBxC,QAExB,CAACA,IAEJ,MAAMt6E,IAAYoE,EAAAA,GAAAA,GAChBi4E,EAAqBW,eAAiB,oBACtCX,EAAqBY,cAAgB,mBACrCX,GAAyB59F,SAAW,wBACpCi+F,GAAsBK,eAAiB,qBACvCL,GAAsBM,cAAgB,oBACtCL,GAA0Bl+F,SAAW,yBACrCm+F,IAAuB,sBACvBj1E,GAA+B,8BAG3BsyD,IAAa51D,EAAAA,EAAAA,KAAY,KAC7Bi3E,GAAe,GAEf,MAAM2B,GAAgBp9E,EAAAA,EAAAA,MACtB,IAAItwB,EAAQ,EAEZuiD,cAAc6nD,IACdA,GAAuBz2G,OAAOg6G,aAAY,KACxC,GAAIjlF,SAASzd,MAAMjW,SAAS44G,EAAAA,IAC1BtD,IAAW,OADb,CAKA,GAAItqG,EAAQ,GAAM,EAAG,CACnB,MAAM6tG,GAAYv9E,EAAAA,EAAAA,MAA6Bo9E,EAC3CG,EAAY,IACdrD,GAAiB,GAAEqD,iBAAyBA,EAAY,EAAI,IAAM,MAClEvD,IAAW,SAGbE,GAAgBsD,EAAAA,IAChBxD,IAAW,GAGbtqG,OAzOwB,OA2OzB,CAAC+rG,IAEE/oC,IAAcluC,EAAAA,EAAAA,KAAY,KAC9Bi3E,GAAe,GAEfxpD,cAAc6nD,IACdA,QAAuB78G,EAElBm7B,SAASzd,MAAMjW,SAAS44G,EAAAA,KAC3BpD,GAAgBsD,EAAAA,IAGlBxD,IAAW,KACV,CAACyB,IAEEgC,IAA6Bj5E,EAAAA,EAAAA,KAAY,KAC7Cw3E,EAAwB,CAAEnjG,yBAAqB5b,MAC9C,CAAC++G,IAQJ,OALAx+C,EAAAA,GAAAA,GAAkB48B,GAAY1nB,IAC9BzzC,GAAgBm7D,I1J1VH,WAAwD,IAApB55D,EAAoB,yDACrErB,EAAAA,EAAAA,KAAU,KACR,GAAK/4B,EAAAA,GAAL,CAIA,IAAIo6B,EAgBJ,OATAnB,MAAAA,IAAAA,GAAcm0B,aAAa,UAAWj0B,IAKlC1uB,EAAAA,KAAWikC,EAAAA,IACb1c,SAAS2I,iBAAiB,eAAgBrB,IAGrC,KACLL,MAAAA,IAAAA,GAAcm0B,aAAa,UAAW,yDAClC3iD,EAAAA,KAAWikC,EAAAA,IACb1c,SAAS4I,oBAAoB,eAAgBtB,KAhB/CL,MAAAA,IAAAA,GAAcm0B,aAAa,UAAW/zB,OAmBvC,CAACe,I0JgUJk9E,CAA2BjD,GAGzB,0BAAK38G,GAAG,OAAOoiC,UAAWA,GAAWy9E,OAAQlrD,GAAAA,EAAWmrD,WAAYnrD,GAAAA,GAClE,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAalsD,OAAQk0G,IACrB,mBAAC,GAAD,CAAel0G,OAAQo0G,IACvB,mBAAC,GAAD,CAAep0G,OAAQs0G,IACvB,mBAAC,GAAD,CAASt0G,OAAQu0G,IAChB93D,GAAgB,mBAAC,GAAD,CAAa3lB,IAAK2lB,EAAallD,GAAIoC,QAAS8iD,EAAcpF,MAAI,IAC/E,mBAAC,GAAD,CAAe9xC,IAAKC,IACpB,mBAAC,GAAD,CAAiBxF,OAAQw0G,IACzB,mBAAC,KAAD,CACEx0G,OAAQ9E,QAAQsZ,GAChB8wB,QAAS4xE,GACT5kG,oBAAqBkC,IAEtBijB,GAAqB,mBAAC,GAAD,CAAWM,YAAaN,IAC9C,mBAAC,GAAD,CAAkBp0B,SAAUnI,QAAQu8B,GAAqBi9E,KACzD,mBAAC,GAAD,CACE10G,OAAQ9E,QAAQy5G,GAAoBC,GACpC9xG,OAAQ6xG,EACR3xG,gBAAiB4xG,IAEnB,mBAAC,GAAD,CAAW1uG,WAAYA,EAAY8rG,UAAWA,IAC9C,mBAAC,GAAD,CAAaluF,OAAQA,IACrB,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAWzgB,SAAUqxG,IACrB,mBAAC,GAAD,CAAap7E,eAAa,IAC1B,mBAAC,GAAD,CAAoBt5B,OAAQ60G,IAC5B,mBAAC,GAAD,CAAe9uG,IAAKI,MAAAA,OAAF,EAAEA,EAAiBJ,IAAKtO,KAAM0O,MAAAA,OAAF,EAAEA,EAAiB1O,OACjE,mBAAC,GAAD,CAAgBsO,IAAKwe,MAAAA,OAAF,EAAEA,EAAkBxe,WC7XzCwT,EAAAA,IAEFC,QAAQC,IAAI,gCAGTzc,EAAAA,EAAAA,MAAYu6B,kBACfzgB,EAAAA,EAAAA,MAAawgG,W","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatBot, selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  const bot = botId && selectChatBot(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { GlobalActions } from '../../types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id].stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateChat(global, chatId, { joinRequests: result }));\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport {\n  ApiChat, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          areCallsEnabled,\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, closeNewContactDialog, replaceUserStatuses, updateChat, updateManagementProgress, updateUser,\n  updateUsers, updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  global = getGlobal();\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      if (url.match(RE_TME_LINK) || url.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url });\n      } else {\n        actions.toggleSafeLinkModal({ url });\n      }\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      actions.getPaymentForm({ chat, messageId });\n      actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n      actions.openPaymentModal({ chatId: chat.id, messageId });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const bot = selectChatBot(global, chatId);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, bot, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      if (!message.viaBotId && !message.senderId) {\n        return;\n      }\n      const bot = selectChatBot(global, message.viaBotId! || message.senderId!);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        bot,\n        peer: chat,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, bot, theme, buttonText,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, bot, peer, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', (global, actions, payload) => {\n  const {\n    bot, peer, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const result = callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const bot = selectChatBot(global, botId);\n  if (!chat || !bot) {\n    return undefined;\n  }\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        bot,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peer: chat,\n    bot,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { bot, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId: bot.id, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, toggleSafeLinkModal, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      toggleSafeLinkModal({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return global;\n\n  if (global.activeReactions[messageId]?.reaction === reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: {\n      ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n      ...(reaction && {\n        [messageId]: {\n          reaction,\n          messageId,\n        },\n      }),\n    },\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n\n  result.views = views;\n  result.forwards = forwards;\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { getMessageRecentReaction } from '../../helpers';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateMessage': {\n      const { message } = update;\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      if (getMessageRecentReaction(message)) {\n        notifyAboutMessage({\n          chat,\n          message,\n          isReaction: true,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport {\n  ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfReactionAdded,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      // Only notify about added reactions, not removed ones\n      const shouldNotify = checkIfReactionAdded(currentReactions, reactions, global.currentUserId);\n\n      global = updateChatMessage(global, chatId, id, { reactions: update.reactions });\n\n      setGlobal(global);\n\n      if (shouldNotify) {\n        const newMessage = selectChatMessage(global, chatId, id);\n        if (!chat || !newMessage) return;\n\n        void notifyAboutMessage({\n          chat,\n          message: newMessage,\n          isReaction: true,\n        });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      if (phoneCall) return undefined;\n\n      const { call } = update;\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        notifyAboutCall({\n          call,\n          user: selectPhoneCallUser(global)!,\n        });\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  BETA_DISCUSSION_CHAT_EN,\n  BETA_DISCUSSION_CHAT_RU,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank');\n  }, []);\n\n  const handleRuDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_RU });\n  }, [openChatByUsername]);\n\n  const handleEnDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_EN });\n  }, [openChatByUsername]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  }, []);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <>\n              <MenuItem\n                icon=\"permissions\"\n                onClick={handleChangelogClick}\n              >\n                Beta Changelog\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleRuDiscussionClick}\n              >\n                Beta Discussion (ru)\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleEnDiscussionClick}\n              >\n                Beta Discussion (en)\n              </MenuItem>\n            </>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  useHotkeys([\n    ['mod+shift+F', handleHotkeySearch],\n    ['mod+shift+S', handleHotkeySavedMessages],\n  ]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n    } = global;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      activeChatFolder,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys([\n    ['meta+F', handleHotkeySearchClick],\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nconst useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n\nexport default useAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n    photoWidth,\n    photoHeight,\n  } = invoice!;\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const photoStyle = photoHeight && photoWidth ? `aspect-ratio: ${photoWidth / photoHeight};` : undefined;\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            style={photoStyle}\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {['buy', 'receipt'].includes(button.type) && <i className=\"icon-card\" />}\n              {button.type === 'url' && !RE_TME_LINK.test(button.url) && <i className=\"icon-arrow-right\" />}\n              {button.type === 'switchBotInline' && <i className=\"icon-share-filled\" />}\n              {['webView', 'simpleWebView'].includes(button.type) && <i className=\"icon-webapp\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n  selectReplySender,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botInfo?.description || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys([['meta+C', handleCopy]]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else if (currentHtml !== undefined) {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__root\",\"compact\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__compact\",\"image\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__image\"};","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\n\nimport { ISettings } from '../../../types';\nimport { ApiDocument, ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { IAnchorPosition, ISettings } from '../../../types';\nimport { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  isPrivateChat?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  isScheduled,\n  isPrivateChat,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && isPrivateChat && Object.values(attachMenuBots).map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n  ApiBotMenuButton,\n} from '../../../api/types';\nimport { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    isPrivateChat?: boolean;\n    theme: ISettings['theme'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  isPrivateChat,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {isChatWithBot && isBotMenuButtonCommands && botCommands !== false && !activeVoiceRecording\n            && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            isPrivateChat={isPrivateChat}\n            attachMenuBots={attachMenuBots}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isPrivateChat = Boolean(selectUser(global, chatId));\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isPrivateChat,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      theme: selectTheme(global),\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat,\n    undefined,\n    undefined,\n    undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","import React, {\n  FC, useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LangCode } from '../../types';\nimport {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { fastRaf } from '../../util/schedulers';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botAttachRequest?: GlobalState['botAttachRequest'];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botAttachRequest,\n  webApp,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequest?.bot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequest?.bot} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest: global.botTrustRequest,\n      botAttachRequest: global.botAttachRequest,\n      webApp: global.webApp,\n    };\n  },\n)(Main));\n","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","isOpen","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","bot","selectChatBot","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getActions","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","days","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","open","blur","location","href","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","isEnabled","loadAttachMenuBots","attachMenu","bots","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","toggleSafeLinkModal","openGame","alert","isError","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","openPollModal","receiptMessageId","getReceipt","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","openChatWithText","queryId","resultId","scheduleDate","param","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","updateMessageStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutMessage","getMessageRecentReaction","isReaction","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","shouldNotify","checkIfReactionAdded","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","isCallPanelVisible","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","hostname","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleRuDiscussionClick","BETA_DISCUSSION_CHAT_RU","handleEnDiscussionClick","BETA_DISCUSSION_CHAT_EN","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","disableHistoryBack","handleOpenTipsChat","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","useHotkeys","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","photoWidth","photoHeight","photoStyle","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","isPending","handleUnfreeze","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","getDocumentMediaHash","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","documentElement","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","shortName","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","isPrivateChat","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","flat","downloadHash","getMessageContentFilename","gameTitle","closeGame","handleMessage","parse","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","ratingPhoneCall","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","langCode","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}