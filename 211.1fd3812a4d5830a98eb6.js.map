{"version":3,"file":"211.1fd3812a4d5830a98eb6.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n","export default \"**Telegram Web Z was updated to version alpha 1.23**\\n\\n👏 **Harder**\\n· An early version of **Video Chats** is available in all groups.\\n\\n🤩 **Better**\\n· Various UI improvements.\\n\\n🚀 **Faster**\\n· Optimized the rendering engine.\\n. Optimized rendering the chat list.\\n· Fixed memory leaks in large audio playlists.\\n\\n💪 **Stronger**\\n· Fixed videos pausing during playback.\\n· Fixed missing sounds when notifications are disabled.\\n· Fixed page refresh when listening to voice messages.\\n· Fixed incorrect track order in audio playlists.\\n· Fixed opening links without `https://` formatting.\\n· Fixed scroll jumps in new chats.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: string, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [string, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: string;\n  globalSearchChatId?: string;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<string, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError' | 'setLeftColumnWidth' | 'resetLeftColumnWidth'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n  setLeftColumnWidth,\n  resetLeftColumnWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError', 'setLeftColumnWidth', 'resetLeftColumnWidth',\n  ]),\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatBasicGroup, isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canExpandActions && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canExpandActions && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canExpandActions && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && chat && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' |\n  'closeAudioPlayer' |\n  'setAudioPlayerVolume' |\n  'setAudioPlayerPlaybackRate' |\n  'setAudioPlayerMuted'\n)>;\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n  setAudioPlayerVolume,\n  setAudioPlayerPlaybackRate,\n  setAudioPlayerMuted,\n  focusMessage,\n  closeAudioPlayer,\n}) => {\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(\n    actions,\n    ['focusMessage', 'closeAudioPlayer', 'setAudioPlayerVolume', 'setAudioPlayerPlaybackRate', 'setAudioPlayerMuted'],\n  ),\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'joinGroupCall' | 'subscribeToGroupCallUpdates'>;\n\nconst GroupCallTopPane: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  joinGroupCall,\n  subscribeToGroupCallUpdates,\n  usersById,\n  chatsById,\n}) => {\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'joinGroupCall',\n    'subscribeToGroupCallUpdates',\n  ]),\n)(GroupCallTopPane));\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isUserId,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<string, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n    noAutoFreeze: true,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000, lang)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n      />\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { transitionClassNames: previewClassNames } = useShowTransition(\n    Boolean(previewBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<string, ApiUser>;\n  chatsById?: Record<string, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isUserId(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = (\n    forwardInfo && (!isChatWithSelf || isScheduled) && !isRepliesChat && !forwardInfo.isLinkedChannelPost\n  );\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && document.getElementById(anchorIdRef.current);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: string;\n  usersById?: Record<string, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: string[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isUserId(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isUserId } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact,\n  isChatAdmin,\n  isChatChannel,\n  isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar' | 'addContact'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n  addContact,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n    'addContact',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  ApiChat,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' | 'loadCommonChats' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState' |\n  'openChat'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  loadCommonChats,\n  openChat,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, chatsById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n    'loadCommonChats',\n    'openChat',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelMessageMediaDownload'>;\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps & DispatchProps> = ({\n  activeDownloads,\n  messages,\n  cancelMessageMediaDownload,\n}) => {\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['cancelMessageMediaDownload']),\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' |\n  'loadCountryList' | 'ensureTimeFormat' | 'checkVersionNotification'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  ensureTimeFormat,\n  openStickerSetShortName,\n  checkVersionNotification,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList', 'ensureTimeFormat',\n    'checkVersionNotification',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","selectUser","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","currentUserId","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","fullInfo","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","some","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","omit","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","langCode","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","canEnterVoiceChat","ARE_CALLS_SUPPORTED","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","contains","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","ApiMediaFormat","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","videoClassName","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","selectIsDownloading","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","noAutoFreeze","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isBot","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","replace","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","appendixRef","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","foundContactIds","fullName","getUserFullName","contactId","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}