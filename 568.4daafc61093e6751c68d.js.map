{"version":3,"file":"568.4daafc61093e6751c68d.js","mappings":"gOAoDO,SAASA,EAAqBC,GACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,OAAKC,GAAWC,GAIhBF,GAASI,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,GACzDF,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,OAAUI,IAJxDN,GA3CXO,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,GAAKC,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,OAGzDK,EAAAA,EAAAA,IAAiB,uBAAwBR,IAEzCQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAM,MAAEQ,GAAUD,EACZE,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,GAAiBb,EAAOc,gBAAgBC,gBAAgBJ,IAAkB,GAQzF,OANID,IAAUG,IACZb,GAASK,EAAAA,EAAAA,IAA8BL,EAAQC,EAAQC,EAAUc,EAAAA,KAG1DZ,EAAAA,EAAAA,IAAsBJ,EAAQC,EAAQC,GAAU,EAAMQ,OAKjEH,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAM,UAAEgB,GAAcR,EACtB,OAAOS,EAAAA,EAAAA,IAA2BlB,EAAQC,EAAQgB,OCvCpDV,EAAAA,EAAAA,IAAiB,YAAY,CAACP,EAAQQ,EAASC,KAC7C,MAAM,GACJU,EADI,SAEJjB,EAAWkB,EAAAA,GAFP,KAGJC,EAAO,SAHH,qBAIJC,GAAuB,GACrBb,EAEEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GA8BpD,OA5BKuB,GAEDA,EAAmBtB,SAAWkB,GAC3BI,EAAmBrB,WAAaA,GAChCqB,EAAmBF,OAASA,IAE7BF,IACFnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQmB,EAAIjB,EAAU,aAAc,KAIlEF,EAASD,EADTC,GAASyB,EAAAA,EAAAA,IAAsBzB,IAG/BA,EAAS,IACJA,EACH0B,mBAAmB,EACnBC,SAAU,IACL3B,EAAO2B,SACVC,0BAAsBtB,MAEpBa,IAAOnB,EAAO6B,gBAAgBC,UAAY,CAC5CD,gBAAiB,MAIrBE,EAAAA,EAAAA,IAAU/B,KAGLgC,EAAAA,EAAAA,IAAyBhC,EAAQmB,EAAIjB,EAAUmB,EAAMC,OAG9Df,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7BgC,EAAAA,EAAAA,IAAyBhC,OAAQM,MAG1CC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,MACrDsB,EAAAA,EAAAA,IAAU,IACL/B,EACHiC,iBAAiB,IAGnBzB,EAAQ0B,SAASzB,OAGnBF,EAAAA,EAAAA,IAAiB,qBAAsBP,IAC9B,IACFA,EACHmC,kBAAc7B,OAIlBC,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAC1D,IACFT,EACHoC,uBAAwB3B,OAI5BF,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,iBAAE4B,EAAF,WAAoBC,GAAe7B,GAEnC,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,IAAKC,EAEH,YADAO,EAAQ0B,SAAS,CAAEf,GAAImB,EAAW,KAIpC,MAAMC,EAAWD,EAAWE,QAAQvC,GAEpC,IAAkB,IAAdsC,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErC7B,EAAQ0B,SAAS,CAAEf,GAAIsB,EAAQnB,sBAAsB,O,iFCjDvD,MACMoB,EAA8BC,EAAAA,GAA2BC,EAAAA,GAI/D,IAAIC,EAmpBJ,SAASC,EAAoB9C,EAAqBC,EAAgB8C,GAChE,MAAM,SAAE7C,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACnDgD,EAAOC,EAAAA,GAEPC,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,IAAKiD,IAAiBhD,EAAU,OAChC,MAKMkD,EALWL,EACdM,KAAKlC,GAAO+B,EAAa/B,KACzBmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAUuD,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASxC,GAAKyC,EAASzC,KAE/B0C,QAAO,CAACC,EAAKP,KACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAIpC,OAHAO,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,GAAU,OACtDD,EAAIG,KAAM,IAAEE,EAAAA,EAAAA,IAAsBnB,EAAMO,GAAS,EAAO,OAAGjD,GAAW,QAE/DwD,IACN,KAEHM,EAAAA,EAAAA,IAAoBhB,EAAOiB,KAAK,QApqBlC9D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,SAAUC,EAAV,aAAoBoE,GAAiB7D,EAE3C,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBoE,OAGtE/D,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,OAAOC,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,eAAgBqE,OAGtEhE,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,UAAE8D,GAAc9D,EAChBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAC7BiD,EAAqB,cAATnD,EAAuB,qBAAuB,YAEhE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWD,OAGjEhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,KACJgE,EADI,OACExE,EADF,SACUC,EADV,KACoBmB,GACtBZ,EAEE+D,EAAqB,cAATnD,EAAuB,wBAA0B,eAEnE,OAAOG,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAUsE,EAAWC,OAGjElE,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcvD,GAC/C2D,QAAQ5B,EAAa/B,KAAOqC,EAAAA,EAAAA,IAA4BxD,EAAQkD,EAAa/B,GAAKjB,GAAU6E,WAGrG,OAAKH,GAIEpD,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAa0E,QAJjE,MAOFrE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,iBAAE4B,GAAqB5B,GACvB,OAAER,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACjE,IAAKC,IAAWC,EACd,OAGF,MAAMgD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC1CyE,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,IAAKgD,IAAiBwB,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAGxD,IAAIqE,EAEJ,IAJiBW,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,IAItC8E,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAKnC,GAE9BoC,EADiBH,EAAgB3C,QAAQwC,EAAaO,YAC1BlD,EAClCkC,EAAYe,GAAYH,EAAgBK,OAAS,GAAKF,GAAY,EAC9DG,OAAON,EAAgBG,SACvBhF,OAfJ,GAAIJ,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCsE,EAAYmB,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC1B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpDqE,EAAYsB,MAAAA,OAAH,EAAGA,EAAYE,cAU5BvF,EAAQwF,gBAAgB,CAAEzB,UAAAA,IAC1B/D,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,QAItBhE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,OACyB2B,EADzB,OACiCC,EADjC,aACyCC,EADzC,QACuDC,GACzD5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,CACXrG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACA2B,OAAQA,MAAAA,EAAAA,EAAUlG,EAAOsG,YAAYJ,OACrCC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAOsG,YAAYH,OACrCC,aAAcA,GAAgBpG,EAAOsG,YAAYF,aACjDC,QAASA,GAAWrG,EAAOsG,YAAYD,cAK7C9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVH,OAAAA,EACAE,SAAS,QAKf9F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVF,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVD,QAAAA,QAKN9F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJyF,GACEzF,EAEJ,MAAO,IACFT,EACHsG,YAAa,IACRtG,EAAOsG,YACVJ,OAAAA,QAKN3F,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHsG,YAAa,CACXH,OAAQnG,EAAOsG,YAAYH,OAC3BC,aAAcpG,EAAOsG,YAAYF,aACjCC,QAASrG,EAAOsG,YAAYD,cAKlC9F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAI9B,IAF4B8F,EAAAA,EAAAA,IAAyBvG,IAe9C,GAAIC,IAAWD,EAAOwG,YAAYvG,QAAUsE,IAAcvE,EAAOwG,YAAYjC,UAClF,MAAO,IACFvE,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,UAlBZC,OAAOC,YAAW,KAChB3G,GAAS4G,EAAAA,EAAAA,OAET7E,EAAAA,EAAAA,IAAU,IACL/B,EACHwG,YAAa,CACXvG,OAAAA,EACAsE,UAAAA,EACAkC,OAAQ,QAnNgB,SAqOlClG,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHwG,YAAa,QAIjBjG,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,KAC5C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAE7B,IAAIwE,EACJ,GAAI7F,IAAakB,EAAAA,GAAgB,OAC/B,MAAMsE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC8F,EAAgBL,MAAAA,GAAH,UAAGA,EAAME,mBAAT,aAAG,EAAmBzE,OAC9B,CACL,MAAM0E,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GAEpD6F,EAAgBF,MAAAA,OAAH,EAAGA,EAAYE,cAGzBA,GAILvF,EAAQyF,aAAa,CACnBhG,OAAAA,EAAQC,SAAAA,EAAUqE,UAAWwB,EAAec,aAAa,QAI7DtG,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,KAC1C,MAAMe,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EAEvBuF,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,GAEpD,GAAK4G,GAAoC,IAAtBA,EAAWtB,OAEvB,CACL,MAAMjB,EAAYuC,EAAWE,MAE7BhH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,KAExE/E,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,SAXF/D,EAAQyG,uBAkBZ1G,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OACJR,EADI,SACIC,EAAWkB,EAAAA,GADf,gBAC+B8F,EAAkB,SADjD,YAC2DL,EAD3D,UACwEM,EADxE,cACmFC,EADnF,eAEJC,EAFI,oBAEYC,GACd7G,EAEJ,IAAI,UAAE8D,GAAc9D,EAEpB,QAAkBH,IAAd6G,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmCxH,EAAQoH,EAAeD,GAClEI,MAAAA,GAAAA,EAAK/B,UACLjB,GAAagD,GAInB,MAAMhG,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAC9CyH,GAAoBlG,GACxBtB,IAAWsB,EAAmBtB,QAC3BC,IAAaqB,EAAmBrB,UAChCgH,IAAoB3F,EAAmBF,KAiB5C,GAdIwB,IACF6E,aAAa7E,GACbA,OAAcvC,GAEhBuC,EAAc6D,OAAOC,YAAW,KAC9B,IAAIgB,GAAYf,EAAAA,EAAAA,MAChBe,GAAYC,EAAAA,EAAAA,IAAqBD,GACjCA,GAAYE,EAAAA,EAAAA,IAAqBF,IACjC5F,EAAAA,EAAAA,IAAU4F,KACTd,EAAcnE,EAtUI,MAwUrB1C,GAAS4H,EAAAA,EAAAA,IAAqB5H,EAAQC,EAAQsE,EAAWsC,EAAaS,GACtEtH,GAAS6H,EAAAA,EAAAA,IAAqB7H,OAAQM,GAElC+G,EAAgB,CAClB,MAAMP,GAAaC,EAAAA,EAAAA,IAAiB/G,EAAQC,EAAQC,IAAa,GACjEF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAAc,IAAI4G,EAAYO,IAGlFI,IACFzH,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQ8H,EAAAA,GAAAA,SAGxC,MAAMpD,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GACtD,GAAIwE,GAAeA,EAAYqD,SAASxD,GAGtC,OAFAxC,EAAAA,EAAAA,IAAU/B,QACVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAUjC,GANIuH,IACFzH,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,IAGvEN,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GAEjEoE,IAAgB+C,EAAkB,CACpC,MAAMO,EAAYzD,EAAYG,EAAY,GAAKoD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrE9H,GAAS6H,EAAAA,EAAAA,IAAqB7H,EAAQgI,IAGxCjG,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQ0B,SAAS,CAAEf,GAAIlB,EAAQC,SAAAA,IAC/BM,EAAQyH,2BAIV1H,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,WACJyH,EADI,WACQnF,EADR,UACoBoE,EADpB,YAC+BgB,GACjC1H,EACJ,IAAI2H,EAIJ,OAHIjB,IACFiB,GAAoBC,EAAAA,EAAAA,IAA0BrI,EAAQkI,EAAYf,IAE7D,IACFnH,EACH6B,gBAAiB,CACfqG,WAAAA,EACAnF,WAAYqF,GAAqBrF,EACjCuF,cAAc,EACdH,YAAAA,QAKN5H,EAAAA,EAAAA,IAAiB,mBAAoBP,KACnC+B,EAAAA,EAAAA,IAAU,IACL/B,EACH6B,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,GAAEU,GAAOV,GAEfsB,EAAAA,EAAAA,IAAU,IACL/B,EACH6B,gBAAiB,IACZ7B,EAAO6B,gBACVC,SAAUX,EACVmH,cAAc,KAIlB9H,EAAQ0B,SAAS,CAAEf,GAAAA,IACnBX,EAAQ+H,mBACR/H,EAAQiB,4BAGVlB,EAAAA,EAAAA,IAAiB,sCAAsC,CAACP,EAAQQ,KAC9D,IAAKR,EAAOwI,iBACV,OAGF,MAAQvI,OAAQiI,EAAV,WAAsBnF,GAAe/C,EAAOwI,iBAElDhI,EAAQiI,gBAAgB,CAAEP,WAAAA,EAAYnF,WAAAA,QAGxCxC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,QAAE8C,GAAY9C,EAEdiI,EAAW1I,EAAO2I,gBAAgBD,SAASnF,EAAQtD,QACpDyI,GAAaA,EAASlD,SAE3BzD,EAAAA,EAAAA,IAAU,IACL/B,EACH2I,gBAAiB,CACfD,SAAU,IACL1I,EAAO2I,gBAAgBD,SAC1B,CAACnF,EAAQtD,QAASyI,EAASpF,QAAQnC,GAAOA,IAAOoC,EAAQpC,aAMjEZ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACP,EAAQQ,EAASC,KAChE,MAAM,SAAEkB,GAAalB,EAEfiI,EAAW1I,EAAO2I,gBAAgBD,SAClCE,EAA0D,GAIhE,OAHAxD,OAAOC,KAAKqD,GAAUG,SAAS5I,IAC7B2I,EAAY3I,GAAUyI,EAASzI,GAAQqD,QAAQnC,IAAQQ,EAASmH,MAAMvF,GAAYA,EAAQpC,KAAOA,SAE5F,IACFnB,EACH2I,gBAAiB,CACfD,SAAUE,QAKhBrI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,QAAE8C,GAAY9C,GAEpBsB,EAAAA,EAAAA,IAAU,IACL/B,EACH2I,gBAAiB,CACfD,SAAU,IACL1I,EAAO2I,gBAAgBD,SAC1B,CAACnF,EAAQtD,QAAS,IAAKD,EAAO2I,gBAAgBD,SAASnF,EAAQtD,SAAW,GAAKsD,EAAQpC,YAM/FZ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,IAAKR,EAAOwI,iBACV,OAGF,MAAM,OAAEvI,EAAF,WAAU8C,GAAe/C,EAAOwI,kBAChC,SAAEtI,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAEnDkD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,GAC3CiD,GAAiBhD,GACL6C,EAAWM,KAAKlC,GAAO+B,EAAa/B,KAClDmC,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,GAAU6I,cACrEF,SAAStF,GAAY/C,EAAQwI,qBAAqB,CAAEzF,QAAAA,UAG/DhD,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UAAE8D,GAAc9D,GAAW,GAC3ByB,GAAW+G,EAAAA,EAAAA,IAAkBjJ,GACnC,OAAKkC,GAIEgH,EAAAA,EAAAA,IAAuBlJ,EAAQkC,EAASf,GAAIoD,GAH1CvE,MAMXO,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,UACJ8D,EADI,UAEJ4C,EAFI,gBAGJgC,EAHI,UAIJC,GACE3I,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAEpDvB,GAASqJ,EAAAA,EAAAA,IACPrJ,EAAQC,EAAQC,EAAUgH,EAAiB3C,EAAW4C,EAAWgC,EAAiBC,IAGpFrH,EAAAA,EAAAA,IAAU/B,GAENA,EAAOsJ,4BACT9I,EAAQ+I,yBACR/I,EAAQgJ,iBAAiB,CAEvBjG,QAAU,mDAAkDkG,EAAAA,GAAe,WAAa,qCAK9FlJ,EAAAA,EAAAA,IAAiB,0BAA2BP,IAC1C,GAAKA,EAAOsJ,0BAIZ,MAAO,IACFtJ,EACHsJ,2BAA2B,OAI/B/I,EAAAA,EAAAA,IAAiB,wBAAyBkB,EAAAA,KAE1ClB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OAAEiJ,GAAWjJ,GAAW,GAC9B,MAAO,IACFT,EACH2J,UAAW,CACTC,QAAQ,EACRF,OAAAA,QAKNnJ,EAAAA,EAAAA,IAAiB,kBAAmBP,IAC3B,IACFA,EACH2J,UAAW,CACTC,QAAQ,QAKdrJ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,KACpD,MAAMqJ,EAAiBC,EAAAA,GAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAG1F,KAAK,MACzD,qBAAE2F,GAAyBhK,EAEjC,GAAIgK,EAAqBlB,MAAK,QAAC,QAAEmB,GAAH,SAAiBA,IAAYJ,KACzD,OAGF,MAAMtG,EAAkC,CACtCtD,OAAQiK,EAAAA,GACRC,MAAMC,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAC3BC,QAAS,CACP7F,MAAM8F,EAAAA,EAAAA,GAAkBC,IAE1BC,YAAY,GAGdjK,EAAQkK,0BAA0B,CAChCnH,QAAAA,EACA0G,QAASJ,QAIbtJ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAAY,MAC1E,MAAM,QAAE8C,EAAF,QAAW0G,GAAYxJ,GACvB,qBAAEuJ,GAAyBhK,EAC3B2K,GAAchF,EAAAA,EAAAA,IAAW3F,EAAQkK,EAAAA,IAEjCU,EAAQC,KAAKC,KACjB,UAAAH,EAAY/E,mBAAZ,eAAyBzE,KAAM,KAC5B6I,EAAqB3G,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEpC4J,GAAkBf,EAAqBxE,OAAS,GArkBf,IAukBjCrE,EAAK0J,KAAKG,MAAMJ,GAASG,EAE/BxH,EAAQpC,GAAKA,EAEb,MAAM8J,EAAsB,CAC1B9J,GAAAA,EACAoC,QAAAA,EACA0G,QAAAA,EACAiB,UAAU,IAGZnJ,EAAAA,EAAAA,IAAU,IACL/B,EACHgK,qBAAsB,IACjBA,EAAqBD,OArlBW,KAslBnCkB,KAIJzK,EAAQ2K,UAAU,CAChB,QAAS,aACThK,GAAIoC,EAAQpC,GACZlB,OAAQsD,EAAQtD,OAChBsD,QAAAA,QAIJhD,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHoL,aAAc,CAAEnL,OAAAA,EAAQsE,UAAAA,QAI5BhE,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACHoL,kBAAc9K,OAIlBC,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAE9B,MAAO,IACFT,EACHqL,YAAa,CAAEpL,OAAAA,EAAQsE,UAAAA,QAI3BhE,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHqL,iBAAa/K,OAIjBC,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,IAAKA,EAAOwI,iBACV,OAGF,MAAM,OAAEvI,EAAF,WAAU8C,GAAe/C,EAAOwI,iBACtC1F,EAAoB9C,EAAQC,EAAQ8C,OAGtCxC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,WAAEsC,GAAetC,EACjBiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC1B+C,GAAoC,IAAtBA,EAAWyC,QAAiBE,GAI/C5C,EAAoB9C,EAAQ0F,EAAKvE,GAAI4B,OC7rBvCxC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAEC,GAAUD,GACZ,OAAER,GAAWD,EAAOsL,aAE1B,OAAOC,EAAAA,EAAAA,IAAmBvL,EAAQ,CAChCwL,cAAe,GACfC,aAAc,GACdC,mBAAepL,KACXI,EAAQ,CAAEiL,eAAgB,CAAEC,OAAQ3L,EAAQ0B,UAAU,IAAW,CAAEgK,oBAAgBrL,GACvFI,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,GAAEU,GAAOV,GACT,qBAAEoL,GAAyB7L,EAAOsL,aAExC,IAAKO,EACH,OAAON,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,qBAAsB,CAAC1K,KAG7D,MAAM2K,EAAeD,EAAqBvI,QAAQrD,GAAWA,IAAWkB,IAMxE,OALA2K,EAAaC,QAAQ5K,GACjB2K,EAAatG,OAzBY,IA0B3BsG,EAAa9E,OAGRuE,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,qBAAsBC,QAG5DvL,EAAAA,EAAAA,IAAiB,2BAA4BP,IACpCuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAE6L,0BAAsBvL,OAG5DC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACP,EAAQQ,EAASC,KAC3D,MAAM,QAAE6J,GAAY7J,EAEpB,OAAOuL,EAAAA,EAAAA,IAA0BhM,EAAQsK,OAG3C/J,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,GAAEU,GAAOV,EAEf,OAAO8K,EAAAA,EAAAA,IAAmBvL,EAAQ,CAAEC,OAAQkB,EAAIT,WAAOJ,EAAWoL,mBAAepL,QC/CnFC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACHiM,SAAU,IACLjM,EAAOiM,SACVC,OAAQ,CACNxL,MAAAA,EACAyL,eAAW7L,SAMnBC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAElB,MAAO,IACFT,EACHoM,KAAM,IACDpM,EAAOoM,KACVF,OAAQ,CACNxL,MAAAA,EACA2L,cAAU/L,EACVgM,aAAShM,SCvBjBC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAElB,OAAO8L,EAAAA,EAAAA,IAAiBvM,EAAQ,CAC9BwM,mBAAelM,EACfmM,kBAAcnM,EACdqL,eAAgB7G,QAAQpE,GACxBA,MAAAA,QAIJH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAEiM,GAAWjM,EAEnB,MAAO,IACFT,EACH2M,WAAY,CAAED,OAAAA,QAIlBnM,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH2M,WAAY,CACVC,iBAAiB,QAKvBrM,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC6M,EAAAA,EAAAA,IAAsB7M,K,iCCvB/BO,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ8M,EAAQrM,KAC3C,IACFT,EACHiC,qBAA6B3B,IAAZG,EAAwBA,GAAWT,EAAOiC,qBAI/D1B,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAGhD,IACFT,EACH+M,gBAJsBtM,OAQ1BF,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACH+M,qBAAiBzM,OAIrBC,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,WAAYjN,EAAOgN,WAAWtE,SAASzI,IAAW,IAAIgN,iBAOhE1M,EAAAA,EAAAA,IAAiB,+BAA+B,CAACP,EAAQQ,EAASC,KAChE,MAAM,OAAEyM,GAAWzM,GAAW,IACxB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,UAAU,EACVE,WAAYD,UAOtB3M,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GAEvD,GAAKC,EAIL,MAAO,IACFD,EACHgN,WAAY,CACVtE,SAAU,IACL1I,EAAOgN,WAAWtE,SACrB,CAACzI,GAAS,IACLD,EAAOgN,WAAWtE,SAASzI,GAC9BgN,UAAU,UAOpB1M,EAAAA,EAAAA,IAAiB,YAAaP,IAC5B,GAAKoN,EAAAA,IAA4BC,EAAAA,GAIjC,MAAO,IACFrN,EACHsN,kBAA2D,IAAxCtN,EAAO2B,SAAS4L,aAAa/H,YAIpDjF,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACH0B,mBAAoB1B,EAAO0B,uBAI/BnB,EAAAA,EAAAA,IAAiB,oBAAqBP,IAC7B,IACFA,EACHsN,mBAAoBtN,EAAOsN,uBAI/B/M,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQ8M,EAAQrM,KAClD,MAAM,MAAE+M,GAAU/M,GACZ,aAAEgN,GAAiBzN,EACzB,IAAKyN,EACH,MAAO,IACFzN,EACHyN,aAAc,CAACD,IAInB,MAAME,EAAYD,EAAanK,QAAQqK,GAAMA,IAAMH,IAMnD,OALAE,EAAU3B,QAAQyB,GACdE,EAAUlI,OA/HU,IAgItBkI,EAAU1G,MAGL,IACFhH,EACHyN,aAAcC,OAIlBnN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQ8M,EAAQrM,KACpD,MAAM,QAAEmN,GAAYnN,GACd,OAAEoN,GAAW7N,EAAOiM,SAC1B,IAAK4B,EACH,MAAO,IACF7N,EACHiM,SAAU,IACLjM,EAAOiM,SACV4B,OAAQ,CACNC,KAAM,IACN7B,SAAU,CAAC2B,MAMnB,MAAMG,EAAcF,EAAO5B,SAAS3I,QAAQ0K,GAAMA,EAAE7M,KAAOyM,EAAQzM,KAGnE,OAFA4M,EAAYhC,QAAQ6B,GAEb,IACF5N,EACHiM,SAAU,IACLjM,EAAOiM,SACV4B,OAAQ,IACHA,EACH5B,SAAU8B,SAMlBxN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMwN,EAAexN,EACrBwN,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,IAErC,MAAMC,EAAmB,IAAIpO,EAAOqO,eAC9BC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAEjL,UAAY0K,EAAa1K,UAO/F,OANmC,IAA/B+K,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiBnK,KAAKgK,GAEf,IACFjO,EACHqO,cAAeD,OAInB7N,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM2N,EAAmBpO,EAAOqO,cAAc/K,QAAO,QAAC,QAAE4K,GAAH,SAAiBA,IAAYzN,EAAQyN,WAE1F,MAAO,IACFlO,EACHqO,cAAeD,OAInB7N,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,KAAEiO,GAASjO,EAGjB,GAAI,YAAaiO,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAO1O,EAGT,MAAM6O,EAAa,IAAI7O,EAAO8O,SAC9B,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWN,WAAWS,GAASA,EAAiBzL,UAAYmL,EAAKnL,WAChE,IAAxBwL,GACFF,EAAWJ,OAAOM,EAAoB,GAM1C,OAFAF,EAAW5K,KAAKyK,GAET,IACF1O,EACH8O,QAASD,OAIbtO,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAM6O,EAAa,IAAI7O,EAAO8O,SAI9B,OAFAD,EAAW7H,MAEJ,IACFhH,EACH8O,QAASD,OAIbtO,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAQwO,IAAKC,GAAqBzO,EAElC,MAAO,IACFT,EACHkP,iBAAAA,OAIJ3O,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,WAAE0O,GAAe1O,EAEvB,MAAO,IACFT,EACHoP,0BAA2BD,OAI/B5O,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACHoP,+BAA2B9O,OAI/BC,EAAAA,EAAAA,IAAiB,YAAY,CAACP,EAAQQ,EAASC,KAC7C,MAAM,IAAEwO,EAAF,OAAOhP,EAAP,UAAesE,GAAc9D,EACnC,MAAO,IACFT,EACHqP,WAAY,CACVJ,IAAAA,EACAhP,OAAAA,EACAsE,UAAAA,QAKNhE,EAAAA,EAAAA,IAAiB,aAAcP,IACtB,IACFA,EACHqP,gBAAY/O,OCnRhBC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EAC9B,MAAO,IACFT,EACHsP,QAAS,IACJtP,EAAOsP,QACVrP,OAAAA,EACAsE,UAAAA,EACAgL,oBAAoB,QAK1BhP,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrCA,GAASwP,EAAAA,EAAAA,IAAaxP,IACbyP,EAAAA,EAAAA,IAAazP,OAIxBO,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,MAAEiP,GAAUjP,EAElB,MAAO,IACFT,EACHsP,QAAS,IACJtP,EAAOsP,QACVI,MAAAA,O,eC5BNnP,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,OACJR,EADI,SACIC,EADJ,UACcqE,EADd,cACyBoL,EADzB,kBACwCC,EADxC,OAC2D1J,EAD3D,OACmEC,EADnE,aAC2EC,EAD3E,QACyFC,GAC3F5F,EAEJ,MAAO,IACFT,EACH6P,YAAa,IACR7P,EAAO6P,YACV5P,OAAAA,EACAC,SAAAA,EACAqE,UAAAA,EACAoL,cAAAA,EACAC,kBAAAA,EACA1J,OAAAA,EACAC,OAAQA,MAAAA,EAAAA,EAAUnG,EAAO6P,YAAY1J,OACrCC,aAAcA,GAAgBpG,EAAO6P,YAAYzJ,aACjDC,QAASA,GAAWrG,EAAO6P,YAAYxJ,SAEzCxE,gBAAiB,QAIrBtB,EAAAA,EAAAA,IAAiB,oBAAqBP,IACpC,MAAM,OAAEmG,EAAF,QAAUE,EAAV,aAAmBD,GAAiBpG,EAAO6P,YACjD,MAAO,IACF7P,EACH6P,YAAa,CACX1J,OAAAA,EACAE,QAAAA,EACAD,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OACJ0F,GACE1F,EAEJ,MAAO,IACFT,EACH6P,YAAa,IACR7P,EAAO6P,YACV1J,OAAAA,EACAE,SAAS,QAKf9F,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAC/D,MAAM,aACJ2F,GACE3F,EAEJ,MAAO,IACFT,EACH6P,YAAa,IACR7P,EAAO6P,YACVzJ,aAAAA,QAKN7F,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,QACJ4F,GACE5F,EAEJ,MAAO,IACFT,EACH6P,YAAa,IACR7P,EAAO6P,YACVxJ,QAAAA,O,wCCJN,MAAMyJ,EAA0B,IAAIC,IAE9BC,GAA0BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAgnB5DC,eAAelI,EACbvC,EACAxF,EACAmM,EACArE,GAGA,IAFAoI,EAEA,wDADAC,EACA,wDACA,MAAMpQ,EAASyF,EAAKvE,GAEpB,IAAImP,EACJ,OAAQtI,GACN,KAAKuI,EAAAA,GAAAA,UACHD,OAAYhQ,EACZ,MACF,KAAKiQ,EAAAA,GAAAA,OACHD,IAAczF,KAAK2F,MAAMC,EAAAA,GAAqB,GAAK,GACnD,MACF,KAAKF,EAAAA,GAAAA,SACHD,IAAcG,EAAAA,GAAqB,GAIvC,MAAMrN,QAAesN,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5ChL,MAAMiL,EAAAA,EAAAA,KAAuB/J,EAAAA,EAAAA,MAAa3G,EAAQC,GAClDmM,SAAAA,EACAiE,UAAAA,EACAM,MAAOH,EAAAA,GACPvQ,SAAAA,IAGF,IAAKkD,EACH,OAGF,MAAM,SACJzB,EADI,MACMkP,EADN,MACajF,EADb,YACoBkF,GACtB1N,EAEJ,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb,MAAMmK,EAAgB9Q,IAAWiK,EAAAA,GAC7BlK,EAAOgK,qBAAqB3G,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEyN,EAAe,GAAoBC,OAAOtP,EAAUoP,GACpDG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCzJ,EAAMnC,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAElCzF,GAASoR,EAAAA,EAAAA,IAAoBpR,EAAQC,EAAQiR,GAC7ClR,EAASoQ,GACLiB,EAAAA,EAAAA,IAAkBrR,EAAQC,EAAQC,EAAUqH,IAC5C+J,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQC,EAAUqH,GAE9CvH,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,OACtD5L,GAASyR,EAAAA,EAAAA,IAAkBzR,EAAQC,EAAQ6Q,GAE3C,IAAIY,GAAYC,EAAAA,EAAAA,IAAgB3R,EAAQC,EAAQC,GAChD,MAAM0R,GAAcC,EAAAA,EAAAA,IAAkB7R,EAAQC,EAAQC,GAWtD,GATIkQ,GAAcsB,GAAaE,IACxBA,EAAYpM,UAAUsM,EAAAA,EAAAA,IAA4BJ,EAAWE,KAChE5R,GAASsR,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQC,EAAU0R,GACnDF,GAAYC,EAAAA,EAAAA,IAAgB3R,EAAQC,EAAQC,GAC5CF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,mBAAeI,GACrE8P,GAAa,KAIZC,EAAiB,CACpB,MAAM0B,EAAa3B,EAAawB,EAAeF,GACzC,eAAEM,GAAmBC,EAAiBF,EAAY1F,EAAUrE,GAClEhI,GAASkS,EAAAA,EAAAA,IAAuBlS,EAAQC,EAAQC,EAAU8R,IAG5DjQ,EAAAA,EAAAA,IAAU/B,GA8CZ,SAASiS,EACPE,EACA9F,EACArE,GAEA,MAAM,OAAExC,GAAW2M,EACbC,EAAQ/F,EArBhB,SAA0B8F,EAAqB9F,GAC7C,OAAIA,EAAW8F,EAAU,GAChB,EAGL9F,EAAW8F,EAAUA,EAAU3M,OAAS,GACnC2M,EAAU3M,OAAS,EAGrB2M,EAAU5D,WAAU,CAACpN,EAAIkR,IAC9BlR,IAAOkL,GACHlL,EAAKkL,GAAY8F,EAAUE,EAAI,GAAKhG,IAUjBiG,CAAiBH,EAAW9F,IAAa,EAE5DkG,EADcvK,IAAcuI,EAAAA,GAAAA,UACM6B,EAASA,EAAQ,GAAM5M,EACzDgN,EAAOD,EAAoB9B,EAAAA,GAC3BgC,EAAKF,EAAoB9B,EAAAA,GAAqB,EAC9CuB,EAAiBG,EAAUpI,MAAMc,KAAKC,IAAI,EAAG0H,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQ3K,GACN,KAAKuI,EAAAA,GAAAA,UACHmC,EAAeH,EAAoB,EACnCI,EAAcH,GAAQ,EACtB,MACF,KAAKjC,EAAAA,GAAAA,SACHmC,EAAeH,EAAoB/M,EACnCmN,EAAcF,GAAMjN,EAAS,EAC7B,MACF,KAAK+K,EAAAA,GAAAA,OACL,QACEmC,EAAeV,EAAexM,OAAS,EACvCmN,EAAcX,EAAexM,SAAWiL,EAAAA,GAI5C,MAAO,CAAEuB,eAAAA,EAAgBU,aAAAA,EAAcC,YAAAA,GAGzCxC,eAAeyC,EAAYC,GAczB,IAAI3E,EACJ,MAAM4E,EAAmBD,EAAOE,WAAa,CAACC,EAAkBC,KACzDnD,EAAwBoD,IAAID,KAC/B/E,EAAU+E,EACVnD,EAAwBqD,IAAIF,EAAgBH,IAG9C,MAAM9S,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHoT,YAAa,CACXC,iBAAkB,IACbrT,EAAOoT,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,SAAAA,aAIxB1S,GAGAuS,EAAOS,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGR,MAAMxT,GAAS4G,EAAAA,EAAAA,MACfiM,EAAOxI,iBAAmBrK,EAAOqK,iBACjC,MAAM9I,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,SAAErB,GAAaqB,EAEhBsR,EAAOS,YAAcpT,IAAakB,EAAAA,KACrCyR,EAAOS,YAAaG,EAAAA,EAAAA,IAAyBzT,EAAQ6S,EAAOnN,KAAKvE,GAAIjB,UAGjEwQ,EAAAA,EAAAA,IAAQ,cAAemC,EAAQC,GAEjCA,GAAoB5E,GACtB4B,EAAwB4D,OAAOxF,IA/zBnC3N,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJuH,EAAYuI,EAAAA,GAAAA,OADR,gBAEJF,GAAkB,GAChB5P,GAAW,GAEf,IAAI,OAAER,EAAF,SAAUC,GAAaO,GAAW,GAEtC,IAAKR,EAAQ,CACX,MAAMsB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGFtB,EAASsB,EAAmBtB,OAC5BC,EAAWqB,EAAmBrB,SAGhC,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,IAAKyF,GAAQA,EAAKiO,aAChB,OAGF,MAAMjP,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChDwR,GAAYC,EAAAA,EAAAA,IAAgB3R,EAAQC,EAAQC,GAC5C0R,GAAcC,EAAAA,EAAAA,IAAkB7R,EAAQC,EAAQC,GAEtD,GAAKwE,GAAgBA,EAAYc,QAAUwC,IAAcuI,EAAAA,GAAAA,OAiBlD,CACL,MAAMlE,EAAWrE,IAAcuI,EAAAA,GAAAA,UAA8B7L,EAAY,GAAKA,EAAYA,EAAYc,OAAS,GACzG4K,EAAatL,QAAQ8M,GACrBG,EAAc3B,EAAawB,EAAcF,GACzC,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAY1F,EAAUrE,GAU3C,GARI0K,IACF1S,GAASkS,EAAAA,EAAAA,IAAuBlS,EAAQC,EAAQC,EAAU8R,KAG5D4B,EAAAA,EAAAA,KAAU,MAYdzD,eACE3P,EACAmS,EAAsBvC,EAAqBC,EAC3C3K,EAAexF,EAAkB8H,EAA8BqE,GAE1DsG,SACG1K,EACJvC,EAAMxF,EAAUmM,EAAUrE,EAAWoI,EAAYC,GAIhDA,GACH7P,EAAQyH,qBAAqB,CAC3BhI,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAU8H,UAAAA,EAAWqI,iBAAiB,IAxBlDwD,CAAerT,EAASmS,EAAavC,EAAYC,EAAiB3K,EAAMxF,EAAU8H,EAAWqE,MAGhGgE,EACF,WAlC+E,CACjF,MAAMhE,GAAWyH,EAAAA,EAAAA,IAAuB9T,EAAQC,KAAW8T,EAAAA,EAAAA,IAAqB/T,EAAQC,EAAQC,GAC1FkQ,EAAatL,QAAQuH,GAAYqF,IAAcA,EAAU3J,SAASsE,IAClE0F,GAAc3B,EAAawB,EAAcF,IAAc,IACvD,eACJM,EADI,aACYU,EADZ,YAC0BC,GAC5BV,EAAiBF,EAAY1F,EAAUkE,EAAAA,GAAAA,QAEvCmC,GAAgBV,EAAexM,QAAUiL,EAAAA,KAC3CzQ,GAASkS,EAAAA,EAAAA,IAAuBlS,EAAQC,EAAQC,EAAU8R,IAGvDW,IACHiB,EAAAA,EAAAA,KAAU,KACH3L,EAAqBvC,EAAMxF,EAAUmM,EAAUkE,EAAAA,GAAAA,OAA0BH,EAAYC,MAwBhG,OAAOrQ,MAqBTO,EAAAA,EAAAA,IAAiB,eAAe4P,MAAOnQ,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,iBACeyP,EADf,aACiCC,GACnCxT,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMnC,QA2lBR4M,eAA2BzK,EAAenB,EAAmByP,GAC3D,MAAM5Q,QAAesN,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhL,KAAAA,EAAMnB,UAAAA,IACrD,IAAKnB,EACH,OAGF,GAAIA,IAAW8Q,EAAAA,GAAiB,CAC9B,GAAIF,EAAkB,CACpB,IAAIhU,GAAS4G,EAAAA,EAAAA,MACb,MAAMuN,GAAeC,EAAAA,EAAAA,IAAkBpU,EAAQ0F,EAAKvE,GAAI6S,GACxDhU,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQ0F,EAAKvE,GAAI6S,EAAkB,IACzDG,EACHG,sBAAkBhU,KAEpByB,EAAAA,EAAAA,IAAU/B,GAGZ,OAGF,IAAIA,GAAS4G,EAAAA,EAAAA,MAKb,OAJA5G,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQ0F,EAAKvE,GAAIoD,EAAWnB,EAAOG,SAC9DvD,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,QAC7D9O,EAAAA,EAAAA,IAAU/B,GAEHoD,EAAOG,QApnBQgR,CAAY7O,EAAMnB,EAAWyP,GACnD,GAAIzQ,GAAW0Q,EAAc,CAC3B,MAAM,cAAElO,EAAF,WAAiByO,GAAeP,GAEtClS,EAAAA,EAAAA,KAAU0S,EAAAA,EAAAA,KACR7N,EAAAA,EAAAA,MACArD,EACAtD,EACA8F,EACAyO,SAKNjU,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAMc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAV,KAAoBmB,GAASE,EAEnC,GAAa,cAATF,IAAyBZ,EAAQiU,YACnC,MAAO,IACF1U,EACH2B,SAAU,IACL3B,EAAO2B,SACVC,qBAAsBnB,IAK5B,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1B4S,EAAS,IACVpS,EACHiF,KAAAA,EACA4N,YAAYrO,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/CyU,WAAWC,EAAAA,EAAAA,IAAgB5U,EAAQC,EAAQC,GAC3C2U,QAAQC,EAAAA,EAAAA,IAAa9U,EAAQC,IAG/BO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQuU,oBAAoB,CAAE9U,OAAAA,EAAQC,SAAAA,EAAU8U,OAAO,IAEvD,MAAMC,GAAYxU,EAAQyU,aAAezU,EAAQyU,YAAY1P,QAAU,EACjE2P,GAAaF,GAAYxU,EAAQyU,aAAezU,EAAQyU,YAAY1P,OAAS,EAEnF,GAAIyP,EAAU,CACZ,MAAM,YAAEC,KAAgBE,GAAevC,EACvCD,EAAY,IACPwC,EACHrC,WAAYmC,EAAcA,EAAY,QAAK5U,SAExC,GAAI6U,EAAW,CACpB,MAAM,KACJ1Q,EADI,SACE4Q,EADF,YACYH,KAAgBI,GAC9BzC,EACE0C,GAAqBC,EAAAA,EAAAA,IAAMN,EAAaO,EAAAA,IAC9C,IAAK,IAAIpD,EAAI,EAAGA,EAAIkD,EAAmB/P,OAAQ6M,IAAK,CAClD,MAAOqD,KAAoBC,GAAmBJ,EAAmBlD,GAC3DlL,EAAa,GAAEyO,KAAKC,QAAQxD,IAElCO,EAAY,IACP0C,EACH7Q,KAAY,IAAN4N,EAAU5N,OAAOnE,EACvB+U,SAAgB,IAANhD,EAAUgD,OAAW/U,EAC/ByS,WAAY2C,EACZvO,UAAWwO,EAAgBnQ,OAAS,EAAI2B,OAAY7G,IAGtDqV,EAAgB9M,SAASkK,IACvBH,EAAY,IACP0C,EACHvC,WAAAA,EACA5L,UAAAA,YAID,CACL,MAAM,KACJ1C,EADI,SACE4Q,EADF,YACYH,EADZ,WACyB5B,KAAegC,GAC1CzC,EAEApO,GACFmO,EAAY,IACP0C,EACH7Q,KAAAA,EACA4Q,SAAAA,EACA/B,WAAAA,IAIJ4B,EAAYrM,SAASkK,IACnBH,EAAY,IACP0C,EACHvC,WAAAA,YAQRxS,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,iBAAE4J,GAAqBrK,GACvB,KAAEyE,EAAF,SAAQ4Q,GAAa5U,EAErBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUuS,EAAAA,EAAAA,IAAqB9V,EAAQC,EAAQC,EAAUgH,GAC1DxB,GAASnC,KAITmN,EAAAA,EAAAA,IAAQ,cAAe,CAC1BhL,KAAAA,EAAMnC,QAAAA,EAASkB,KAAAA,EAAM4Q,SAAAA,EAAUV,WAAWC,EAAAA,EAAAA,IAAgB5U,EAAQC,EAAQC,GAAWmK,iBAAAA,IAGvF7J,EAAQuV,aAAa,CAAExR,eAAWjE,SAGpCC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxB8C,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,GAC5CuO,EAAmBvP,GAAWuM,EAAwBkG,IAAIzS,EAAQ0S,iBAAmB1S,EAAQpC,IAC/F2R,IACFoD,EAAAA,EAAAA,IAAkBpD,GAGpBtS,EAAQ2K,UAAU,CAChB,QAAS,iBACT5D,IAAK,CAAChD,GACNtE,OAAAA,QAIJM,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASC,KAC9C,MAAM,OAAER,EAAF,SAAUC,EAAV,MAAoBiW,GAAU1V,EACpC,IAAK0V,EACH,OAGF,MAAM,KAAE1R,EAAF,SAAQ4Q,GAAac,EACrBzQ,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAchC,OAZIC,IAAakB,EAAAA,KACVsP,EAAAA,EAAAA,IAAQ,YAAa,CACxBhL,KAAAA,EACAjB,KAAAA,EACA4Q,SAAAA,EACAe,cAAcnR,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,KAIrDF,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,QAASiW,IACtDE,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAEqW,UAAWzL,KAAK2F,MAAMoF,KAAKC,MAAQ,WAK3EtV,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoBqW,GAAc9V,EACxC,KAAK+V,EAAAA,EAAAA,IAAYxW,EAAQC,EAAQC,GAC/B,OAGF,MAAMwF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAShC,OAPKsW,GAAarW,IAAakB,EAAAA,KACxBsP,EAAAA,EAAAA,IAAQ,aAAchL,GAG7B1F,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,aAASI,IACtD+V,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAEqW,eAAWhW,QAKnDC,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,EAAF,SAAUC,EAAV,UAAoByU,GAAclU,EAExC,OAAOe,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,YAAayU,OAGnEpU,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAMiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGF,MAAM,UACJnB,EADI,QACOkS,EADP,UACgBC,EADhB,SAC2BC,GAC7BlW,GAECiQ,EAAAA,EAAAA,IAAQ,aAAc,CACzBhL,KAAAA,EAAMnB,UAAAA,EAAWkS,QAAAA,EAASC,UAAAA,EAAWC,SAAAA,QAIzCpW,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQS,EAAQR,QACnCyF,GAOPyK,eAAgCzK,SACxBgL,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhL,KAAAA,IACpC,IAAI1F,GAAS4G,EAAAA,EAAAA,MACb5G,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAa,KAC1EW,EAAAA,EAAAA,IAAU/B,GAPL4W,CAAiBlR,OAUxBnF,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,WAAEsC,EAAF,mBAAc8T,GAAuBpW,EACrCc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAEF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3ByQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhL,KAAAA,EAAM3C,WAAAA,EAAY8T,mBAAAA,IAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgB/W,EAAQC,EAAQC,GAC9C6C,EAAWgF,SAAS+O,IACtBtW,EAAQuV,aAAa,CAAExR,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,WAAEsC,GAAetC,EACjBc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAE3ByQ,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhL,KAAAA,EAAM3C,WAAAA,IAEhD,MAAM+T,GAAYE,EAAAA,EAAAA,IAAyBhX,EAAQC,GAC/C8C,EAAWgF,SAAS+O,IACtBtW,EAAQuV,aAAa,CAAExR,eAAWjE,QAItCC,EAAAA,EAAAA,IAAiB,iBAAiB4P,MAAOnQ,EAAQQ,EAASC,KAAY,MACpE,MAAM,OAAER,EAAF,mBAAU4W,GAAuBpW,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMkF,EAAK,UAAGlF,EAAKE,mBAAR,aAAG,EAAkBzE,SAE1BuP,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhL,KAAAA,EAAMmR,mBAAAA,EAAoBjM,MAAAA,IAE3D,MAAMqM,GAAa9W,EAAAA,EAAAA,IAAyBH,GACxCiX,GAAcA,EAAWhX,SAAWA,GACtCO,EAAQ0B,SAAS,CAAEf,QAAIb,QAI3BC,EAAAA,EAAAA,IAAiB,kBAAkB4P,MAAOnQ,EAAQQ,EAASC,KACzD,MAAM,WACJsC,EADI,OACQmU,EADR,YACgBC,GAClB1W,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,GAAWsB,EACbmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE1BmD,QAAesN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C0G,KAAM1R,EAAM3C,WAAAA,EAAYmU,OAAAA,EAAQC,YAAAA,IAGlC3W,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACLiU,EAAAA,EAAAA,IAAe,2BACf,iFAIR9W,EAAAA,EAAAA,IAAiB,qBAAqB4P,MAAOnQ,EAAQQ,EAASC,KAC5D,MAAM,OAAEqM,EAAF,OAAU7M,EAAV,SAAkBC,GAAaO,EACrC,GAAIR,IAAWD,EAAOsX,cAAe,OAErC,MAAM5R,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,SAECgL,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC0G,KAAM1R,EAAMxF,SAAAA,EAAU4M,OAAAA,QAI1BvM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,iBAAE4J,GAAqBrK,EACvBuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,OAGF,MAAM,OAAEtB,EAAF,SAAUC,GAAaqB,EACvBmE,GAAOiL,EAAAA,EAAAA,IAAuB3Q,EAAQC,EAAQC,GACpD,IAAKwF,EACH,OAGF,MAAM,MAAEkF,GAAUnK,EASlB,GAPAuP,GAAwB,MACjBU,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCrG,iBAAAA,EAAkB3E,KAAAA,EAAMxF,SAAAA,EAAU0K,MAAAA,OAKlC1K,IAAakB,EAAAA,GACf,OAGEnB,IAAWiK,EAAAA,KACblK,EAAS,IACJA,EACHgK,qBAAsBhK,EAAOgK,qBAAqB3G,KAAK4K,GAC9CA,EAAa/C,UAAY+C,EAAa9M,IAAMyJ,EAAQ,IAAKqD,EAAc/C,UAAU,GAAU+C,MAKxG,MAAMvJ,GAAcC,EAAAA,EAAAA,IAAkB3E,EAAQC,EAAQC,GAChDqX,GAAQC,EAAAA,EAAAA,IAAoBxX,EAAQC,EAAQC,GAClD,IAAKwE,IAAgB6S,IAAU7R,EAAK+R,YAClC,OAAOzX,EAGT,MAAM0X,EAmjBR,SAAwBnQ,EAAeiL,EAAcC,GACnD,IAAIkF,EAAQ,EAEZ,IAAK,IAAItF,EAAI,EAAGuF,EAAIrQ,EAAI/B,OAAQ6M,EAAIuF,IAC9BrQ,EAAI8K,IAAMG,GAAQjL,EAAI8K,IAAMI,GAC9BkF,MAGEpQ,EAAI8K,IAAMI,IALuBJ,KAUvC,OAAOsF,EAhkBWE,CAAenT,EAAc6S,EAAO3M,GACtD,OAAK8M,GAIErB,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAChC6X,uBAAwBlN,EACxB6M,YAAa5M,KAAKC,IAAI,EAAGpF,EAAK+R,YAAcC,KALrC1X,MASXO,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAMiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGF,MAAM,WAAE3C,GAAetC,GAElBiQ,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhL,KAAAA,EAAM3C,WAAAA,QAG3CxC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,KAAEgE,GAAShE,GAgJnB0P,eAAkC5M,GAChC,MAAMwU,QAAuBrH,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEnN,QAAAA,KAE9DxB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHmR,eAAAA,IApJGC,CAAmBvT,OAG1BlE,EAAAA,EAAAA,IAAiB,uBAAwBP,IACvC,GAAKA,EAAO+X,eAIZ,MAAO,IACF/X,EACH+X,oBAAgBzX,OAIpBC,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAER,EAAF,UAAUsE,EAAV,QAAqB0T,GAAYxX,EACjCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE5ByF,IACGgL,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhL,KAAAA,EAAMnB,UAAAA,EAAW0T,QAAAA,QAIpD1X,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KACJiF,EADI,UACEnB,EADF,OACa2T,EADb,OACqBC,EADrB,MAC6BvH,EAD7B,kBACoCwH,GACtC3X,GAmVN0P,eACEzK,EACAnB,EACA2T,EACAC,EACAvH,EACAwH,GAEA,MAAMhV,QAAesN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhL,KAAAA,EAAMnB,UAAAA,EAAW2T,OAAAA,EAAQC,OAAAA,EAAQvH,MAAAA,IAGnC,IAAKxN,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MAEb5G,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,OAC7D,MAAM,OAAEpK,GAAWzG,EAAOwG,aAE1BzE,EAAAA,EAAAA,IAAU,IACL/B,EACHwG,YAAa,IACRxG,EAAOwG,YACVC,OAAQ,IACHA,EACH,CAACyR,IAASG,EAAAA,EAAAA,IAAO,KACVD,GAAqB3R,GAAUA,EAAOyR,GAAUzR,EAAOyR,GAAU,MAClE9U,GAAUA,EAAOyN,MAAMxN,KAAKiV,GAASA,EAAKnX,QAGlDoX,QAAS,IACHvY,EAAOwG,YAAY+R,QAAUvY,EAAOwG,YAAY+R,QAAU,GAC9D,CAACL,GAAS9U,EAAOoV,YAAc,OAnXhCC,CAAsB/S,EAAMnB,EAAW2T,EAAQC,EAAQvH,EAAOwH,OAGrE7X,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQ8M,EAAQrM,KACnD,MAAM,WACJyH,EADI,WACQnF,EADR,SACoBjB,EADpB,YAC8BqG,GAChCnI,EAAO6B,gBACL6W,EAAWxQ,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,EACzDqY,EAAS7W,GAAW6D,EAAAA,EAAAA,IAAW3F,EAAQ8B,QAAYxB,EACnDqB,EAAWuG,GAAcnF,EAC3BA,EACCW,MAAK,CAACkV,EAAGC,IAAMD,EAAIC,IACnBxV,KAAKlC,IAAOiT,EAAAA,EAAAA,IAAkBpU,EAAQkI,EAAY/G,KAAKmC,OAAmBwB,cAC3ExE,EAEJ,IAAKoY,IAAaC,IAAWhX,EAC3B,OAGF,MAAM,SAAEgV,EAAF,YAAYjC,GAAgBjU,EAC5BoU,GAASC,EAAAA,EAAAA,IAAa9U,EAAQ8B,GAE9BgX,EAAenX,EAAS2B,QAAQyV,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAatT,SACVkL,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9BgI,SAAAA,EACAC,OAAAA,EACAhX,SAAUmX,EACVzO,kBAAkBzD,EAAAA,EAAAA,MAAYyD,iBAC9BsM,SAAAA,EACAjC,YAAAA,EACAG,OAAAA,EACA1M,YAAAA,IAIJxG,EACG2B,QAAQyV,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3ClQ,SAAStF,IACR,MAAM,KAAEkB,EAAF,SAAQ4Q,GAAa9R,EAAQ+G,QAAQ7F,MAAQ,IAC7C,QAAEmJ,EAAF,KAAWqL,GAAS1V,EAAQ+G,QAE7BsI,EAAY,CACflN,KAAMiT,EACNlU,KAAAA,EACA4Q,SAAAA,EACAzH,QAAAA,EACAqL,KAAAA,EACAtC,SAAAA,EACAjC,YAAAA,EACAG,OAAAA,QAIN9S,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACH/E,gBAAiB,SAIrBtB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GAiZPyK,eAAoCzK,GAClC,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhL,KAAAA,IACxD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,GAAayB,EAEf8N,GAAOC,EAAAA,EAAAA,IAAqBxP,EAAU,MACtC4F,EAAMnC,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAAQ/B,MAAK,CAACkV,EAAGC,IAAMA,EAAID,IAE7D,IAAI5Y,GAAS4G,EAAAA,EAAAA,MACb5G,GAASkZ,EAAAA,EAAAA,IAAyBlZ,EAAQ0F,EAAKvE,GAAI+P,GACnDlR,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,eAAgBmG,IAC7ExF,EAAAA,EAAAA,IAAU/B,GA3ZLmZ,CAAqBzT,OAG5BnF,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,OACJR,EADI,GACIkB,GACNV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAIAgL,EAAAA,EAAAA,IAAQ,wBAAyB,CACpChL,KAAAA,EACA6B,IAAK,CAACpG,SAIVZ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OACJR,EADI,UACIsE,EADJ,YACemQ,GACjBjU,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,EAAUmC,IAAQ0T,EAAAA,EAAAA,IAAuBpZ,EAAQ0F,EAAKvE,GAAIoD,GAC3DmB,GAASnC,IAITmN,EAAAA,EAAAA,IAAQ,oBAAqB,CAChChL,KAAAA,EACAnC,QAAAA,EACAmR,YAAAA,QAIJnU,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,OAAER,EAAF,SAAUC,GAAaO,EACvBiF,GAAOiL,EAAAA,EAAAA,IAAuB3Q,EAAQC,EAAQC,GAC/CwF,IAIAgL,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhL,KAAAA,EAAMxF,SAAAA,QAyQlDK,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GAiEPyK,eAAkCzK,GAChC,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhL,KAAAA,IACtD,IAAKtC,EACH,OAGF,MAAM,SAAEzB,EAAF,MAAYiK,EAAZ,MAAmBiF,GAAUzN,EAE7B8N,GAAOC,EAAAA,EAAAA,IAAqBxP,EAAU,MACtC4F,EAAMnC,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAAQ/B,MAAK,CAACkV,EAAGC,IAAMA,EAAID,IAE7D,IAAI5Y,GAAS4G,EAAAA,EAAAA,MACb5G,GAASoR,EAAAA,EAAAA,IAAoBpR,EAAQ0F,EAAKvE,GAAI+P,GAC9ClR,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQ0F,EAAKvE,GAAIC,EAAAA,GAAgB,YAAamG,GAC1EvH,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,QACtD7J,EAAAA,EAAAA,IAAU/B,GA7ELqZ,CAAmB3T,OAG1BnF,EAAAA,EAAAA,IAAiB,cAAc4P,MAAOnQ,EAAQQ,EAASC,KACrD,MAAM,OAAER,EAAF,UAAUsE,GAAc9D,EACxBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,cAAe,CAAEhL,KAAAA,EAAMnB,UAAAA,IAC/CnB,IAILrB,EAAAA,EAAAA,KAAUsS,EAAAA,EAAAA,KAAkBzN,EAAAA,EAAAA,MAAa3G,EAAQsE,EAAW,CAC1D+U,cAAelW,SAInB7C,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,OAAER,EAAF,SAAUsZ,GAAa9Y,EACvBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BuZ,GAAa7T,EAAAA,EAAAA,IAAW3F,EAAQuZ,KAAaE,EAAAA,EAAAA,IAAWzZ,EAAQuZ,GACtE,GAAK7T,GAAS8T,EAMd,OAFK9I,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmE,OAAQ2E,EAAY9T,KAAAA,KAEjD2Q,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAChCyZ,SAAU,IACLhU,EAAKgU,SACRH,SAAAA,SAKNhZ,EAAAA,EAAAA,IAAiB,cAAc4P,MAAOnQ,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,cAAe,CAAEhL,KAAAA,IACzCtC,GAQLpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,OAC7D7Q,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOwI,MAAO,OAC7D5L,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAE0Z,UAAWvW,EAAOmE,OACxDxF,EAAAA,EAAAA,IAAU/B,KAXR+B,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,KAAWzP,EAAAA,EAAAA,MAAa3G,EAAQ,CACxC0Z,UAAW,UAiDjBpZ,EAAAA,EAAAA,IAAiB,yBAAyB4P,MAAOnQ,EAAQQ,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhL,KAAAA,IACpDtC,IAILpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS4Z,EAAAA,EAAAA,IAAuB5Z,EAAQC,EAAQmD,EAAOzB,SAAS,IAChE3B,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,OAC7D7Q,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOwI,MAAO,QAC7D7J,EAAAA,EAAAA,IAAU/B,QAGZO,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAUsW,EAAAA,EAAAA,IAAuB7Z,EAAQC,GAC1CyF,GAASnC,IAITmN,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEhL,KAAAA,EAAMoU,OAAQvW,EAAQwW,c,cCxiC/D,MAGMC,GAAkBC,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAiapDC,eAAe+J,EAAWxZ,EAAeyX,GACvC,MAAM/U,QAAesN,EAAAA,EAAAA,IAAQ,aAAc,CAAEhQ,MAAAA,EAAOyX,OAAAA,IAC/C/U,IAILrB,EAAAA,EAAAA,KAAUoY,EAAAA,EAAAA,KAAgBvT,EAAAA,EAAAA,OAAcuR,EAAQ/U,EAAOgJ,KAAMhJ,EAAOoV,cAratEjY,EAAAA,EAAAA,IAAiB,mBAAoBP,IACnC,MAAM,KAAE8N,GAAS9N,EAAOiM,SAASmO,OAAS,IAoM5CjK,eAA+BrC,GAC7B,MAAMuM,QAAsB3J,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE5C,KAAAA,IACrDuM,IAILtY,EAAAA,EAAAA,KAAUuY,EAAAA,EAAAA,KACR1T,EAAAA,EAAAA,MACA,QACAyT,EAAcvM,KACduM,EAAcE,OA7MXC,CAAgB1M,OAGvBvN,EAAAA,EAAAA,IAAiB,qBAAqB4P,MAAOnQ,EAAQQ,KACnD,MAAQia,OAAQC,GAAgB1a,EAAOiM,SAASmO,MAC1CO,EAAS3a,EAAOiM,SAAS2O,SAC/B,GAAKF,GAAgBA,EAAYlV,OAIjC,IAAK,IAAI6M,EAAI,EAAGA,EAAIqI,EAAYlV,OAAQ6M,IAAK,CAC3C,MAAMlR,EAAKuZ,EAAYrI,GACnBsI,EAAOxZ,GAAI8K,WAGfzL,EAAQqa,aAAa,CAAEC,aAAc3Z,IAEjCkR,EAvB0B,IAuBQ,GAAKA,EAAI,SACvC0I,EAAAA,EAAAA,IAzBgB,WA8B5Bxa,EAAAA,EAAAA,IAAiB,sBAAuBP,IACtC,MAAM,KAAE8N,GAAS9N,EAAOiM,SAAS4B,QAAU,IAyL7CsC,eAAkCrC,GAChC,MAAMkN,QAAuBtK,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE5C,KAAAA,IAC9D,IAAKkN,EACH,OAGF,MAAMhb,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiM,SAAU,IACLjM,EAAOiM,SACV4B,OAAQmN,KApMPC,CAAmBnN,OAG1BvN,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAE8N,GAAS9N,EAAOiM,SAASiP,UAAY,IAqM/C/K,eAAoCrC,GAClC,MAAMqN,QAAyBzK,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE5C,KAAAA,IAClE,IAAKqN,EACH,OAGF,MAAMnb,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiM,SAAU,IACLjM,EAAOiM,SACViP,SAAUC,KAhNTC,CAAqBtN,OAG5BvN,EAAAA,EAAAA,IAAiB,wBAAwB4P,MAAAA,IACvC,MAAM,KAAErC,GAAS9N,EAAOiM,SAASoP,UAAY,GAEvCA,QAAiB3K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElD,MAAO,OAAQM,KAAAA,IACpEuN,IAILrb,GAAS4G,EAAAA,EAAAA,OAET7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiM,SAAU,IACLjM,EAAOiM,SACVoP,SAAU,CACRvN,KAAMuN,EAASvN,KACf7B,SAAUoP,EAASpP,SAAS3I,QAAQsK,GAA8B,OAAlBA,EAAQJ,iBAMhEjN,EAAAA,EAAAA,IAAiB,wBAAyBP,IACxC,MAAM,KAAE8N,GAAS9N,EAAOiM,SAASqP,UAAY,IA2L/CnL,eAAoCrC,GAClC,MAAMyN,QAAyB7K,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE5C,KAAAA,IAC7DyN,IAILxZ,EAAAA,EAAAA,KAAUuY,EAAAA,EAAAA,KACR1T,EAAAA,EAAAA,MACA,WACA2U,EAAiBzN,KACjByN,EAAiBhB,OApMdiB,CAAqB1N,OAG5BvN,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,aAAEqa,EAAF,oBAAgBW,GAAwBhb,EAC9C,IAAI,qBAAEib,GAAyBjb,EAE/B,IAAKib,IAAyBD,EAAqB,CACjD,MAAME,GAAaC,EAAAA,EAAAA,IAAiB5b,EAAQ8a,GAC5C,IAAKa,EACH,OAGFD,EAAuBC,EAAWE,YA2LtC1L,eAA4B2K,EAAsBe,EAAoBJ,GACpE,MAAME,QAAmBjL,EAAAA,EAAAA,IACvB,gBACA,CAAE+K,oBAAAA,EAAqBX,aAAAA,EAAce,WAAAA,IAEvC,IAAKF,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOlH,EAAP,MAAiB6P,GAAUH,EAEjC,IAAI3b,GAAS4G,EAAAA,EAAAA,MAEb5G,GAAS+b,EAAAA,EAAAA,IAAiB/b,EAAQmT,EAAIhS,GAAI,IAAKgS,EAAKlH,SAAAA,EAAU6P,MAAAA,IAE9D,MAAME,EAAehc,EAAOiM,SAASgQ,SAASzO,MAC1CwO,GAAgBF,EAAME,KACxBhc,GAASkc,EAAAA,EAAAA,IAAwBlc,KAGnC+B,EAAAA,EAAAA,IAAU/B,GA5ML6a,CAAaC,EAAcY,EAAsBD,OAGxDlb,EAAAA,EAAAA,IAAiB,sBAAsB,MA4MvC4P,iBACE,MAAMwL,QAAmBjL,EAAAA,EAAAA,IAAQ,uBACjC,IAAKiL,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOlH,GAAa0P,GAE1B5Z,EAAAA,EAAAA,KAAUoa,EAAAA,EAAAA,KAAsBvV,EAAAA,EAAAA,MAAa,IAAKuM,EAAKlH,SAAAA,KAnNlDmQ,GAsNPjM,iBACE,MAAMwL,QAAmBjL,EAAAA,EAAAA,IAAQ,6BACjC,IAAKiL,EACH,OAGF,MAAM,IAAExI,EAAF,SAAOlH,GAAa0P,GAE1B5Z,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHyV,qBAAsB,IAAKlJ,EAAKlH,SAAAA,KA/N7BqQ,OAGP/b,EAAAA,EAAAA,IAAiB,iBAAkBP,IACjC,MAAM,KAAE8N,GAAS9N,EAAOoM,KAAKmQ,OAoV/BpM,eAA6BrC,GAC3B,MAAM0O,QAAkB9L,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE5C,KAAAA,IACpD,IAAK0O,EACH,OAGF,MAAMxc,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHoM,KAAM,IACDpM,EAAOoM,KACVmQ,MAAOC,KA/VNC,CAAc3O,OAGrBvN,EAAAA,EAAAA,IAAiB,WAAW4P,MAAOnQ,EAAQQ,EAASC,KAAY,MAC9D,MAAM,IAAEic,EAAF,aAAOC,GAAiBlc,EAE9B,UADqBiQ,EAAAA,EAAAA,IAAQ,UAAW,CAAEgM,IAAAA,EAAKC,aAAAA,IAE7C,OAIF,MAAMvQ,GAAO,WADbpM,GAAS4G,EAAAA,EAAAA,OACWwF,KAAKmQ,MAAMnQ,YAAlB,eAAwB9I,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAOub,EAAIvb,QAAO,GACpEyb,EAAUD,EAAevQ,EAAO,CAACsQ,KAAQtQ,IAE/CrK,EAAAA,EAAAA,IAAU,IACL/B,EACHoM,KAAM,IACDpM,EAAOoM,KACVmQ,MAAO,IACFvc,EAAOoM,KAAKmQ,MACfnQ,KAAMwQ,UAMdrc,EAAAA,EAAAA,IAAiB,eAAe,CAACP,EAAQQ,EAASC,KAChD,MAAM,QAAEmN,GAAYnN,EAEhBmN,IACG8C,EAAAA,EAAAA,IAAQ,cAAe,CAAE9C,QAAAA,QAIlCrN,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,QAAEmN,GAAYnN,EAEhBmN,GAyLN,SAAuBA,GACrB,MAAM5N,GAAS4G,EAAAA,EAAAA,OAIf7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiM,SAAU,IACLjM,EAAOiM,SACViP,SAAU,IACLlb,EAAOiM,SAASiP,SACnBjP,SAAUjM,EAAOiM,SAASiP,SAASjP,SAAS3I,QAAO,QAAC,GAAEnC,GAAH,SAAYA,IAAOyM,EAAQzM,WAK/EuP,EAAAA,EAAAA,IAAQ,cAAe,CAAE9C,QAAAA,EAASiP,QAAQ,IAxMxCC,CAAclP,OAIvBrN,EAAAA,EAAAA,IAAiB,oBAAoB,CAACP,EAAQQ,EAASC,KACrD,MAAM,aAAEqa,GAAiBra,EACnBkb,GAAaC,EAAAA,EAAAA,IAAiB5b,EAAQ8a,GAC5C,IAAKa,EACH,OAGF,MAAM,WAAEE,EAAF,cAAckB,GAAkBpB,GAEjCjL,EAAAA,EAAAA,IAASqM,EAAsC,sBAAtB,oBAA6C,CAAEjC,aAAAA,EAAce,WAAAA,QAG7Ftb,EAAAA,EAAAA,IAAiB,qBAAqB4P,MAAOnQ,EAAQQ,EAASC,KAAoC,QAChG,MAAM,SAAEuc,GAAavc,EAErB,IAAIwc,EAAuBjd,EAAOkd,cAAcF,GAChD,aAAIC,SAAJ,OAAI,EAAsBE,UACxB,QAGFpb,EAAAA,EAAAA,IAAU,IACL/B,EACHkd,cAAe,IACVld,EAAOkd,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAKjB,MAAMD,QAAsBxM,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDsM,SAAAA,EACAI,YAAaH,EAAuBA,EAAqBhT,QAAU,IAIrEgT,GADAjd,GAAS4G,EAAAA,EAAAA,OACqBsW,cAAcF,GAEvCE,GAeLnb,EAAAA,EAAAA,IAAU,IACL/B,EACHkd,cAAe,IACVld,EAAOkd,cACV,CAACF,GAAW,CACVG,WAAW,EACXlT,QAASiT,EAAcjT,QACvBoT,SAAU,IACR,UAAIJ,SAAJ,aAAI,EAAsBI,YACvBH,EAAcG,eAvBvBtb,EAAAA,EAAAA,IAAU,IACL/B,EACHkd,cAAe,IACVld,EAAOkd,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAyJrB5c,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,MAAEC,GAAUD,EAEdC,GACGsZ,GAAgB,MAqDzB7J,eAA8BzP,EAAeoN,GAC3C,MAAM1K,QAAesN,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhQ,MAAAA,EAAOoN,UArDpDwP,IAuDJ,IAAKla,EACH,OAGF,MAAMpD,GAAS4G,EAAAA,EAAAA,OACT,SAAEgU,EAAF,MAAYR,GAAUpa,EAAOiM,SAE7BE,EAAY/I,EAAOmX,KAAKlX,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAE1CiZ,EAAMK,QACRL,EAAMK,OAAO5R,SAAS1H,IACpB,IAAKgL,EAAUpE,SAAS5G,GAAK,CAC3B,MAAM,MAAEoc,GAAU3C,EAASzZ,IAAO,GAC9Boc,IAASC,EAAAA,EAAAA,GAAYD,EAAO7c,IAC9ByL,EAAUJ,QAAQ5K,QAM1BY,EAAAA,EAAAA,KAAUuY,EAAAA,EAAAA,IACRta,EACA,SACAoD,EAAO0K,KACP1K,EAAOmX,KACPpO,IAhFEmR,CAAe5c,UAKrBH,EAAAA,EAAAA,IAAiB,qBAAqB,CAACP,EAAQQ,EAASC,KACtD,MAAM,MAAEC,GAAUD,EAEG,iBAAVC,GACJsZ,GAAgB,KACnBE,EAAWxZ,UAKjBH,EAAAA,EAAAA,IAAiB,kBAAmBP,IAClC,MAAM,MAAEU,EAAF,OAASyX,GAAWnY,EAAOoM,KAAKF,OAEjB,iBAAVxL,GACJsZ,GAAgB,KACnBE,EAAWxZ,EAAOyX,UAKxB5X,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,MAAE+M,GAAU/M,GACZ,KAAEqN,GAAS9N,EAAOiM,SAASgQ,SAE5BjC,GAAgB,MAiFvB7J,eAAoC3C,EAAeM,GACjD,IAAI9N,GAAS4G,EAAAA,EAAAA,OACb7E,EAAAA,EAAAA,IAAU,IACL/B,EACHiM,SAAU,IACLjM,EAAOiM,SACVgQ,SAAU,IACLjc,EAAOiM,SAASgQ,SACnBzO,MAAAA,MAKN,MAAMpK,QAAesN,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElD,MAAAA,EAAOM,KAAAA,IAE/D9N,GAAS4G,EAAAA,EAAAA,MAEJxD,GAAUpD,EAAOiM,SAASgQ,SAASzO,QAAUA,IAIlDxN,GAASyd,EAAAA,EAAAA,IAAuBzd,EAAQwN,EAAOpK,EAAO6I,SAAU7I,EAAO0K,OAEvE/L,EAAAA,EAAAA,IAAU/B,IAvGR0d,CAAqBlQ,EAAOM,UAIhCvN,EAAAA,EAAAA,IAAiB,yBAA0BP,IAClC,IACFA,EACHiM,SAAU,IACLjM,EAAOiM,SACVgQ,SAAU,SAKhB1b,EAAAA,EAAAA,IAAiB,2BAA2B,CAACP,EAAQQ,EAASC,KAC5D,MAAM,oBAAEgb,GAAwBhb,EAChC,MAAO,IACFT,EACH2d,0BAA2BlC,M,aC9X/B,MAAMzB,GAAkBC,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAuFpDC,eAAeyN,IAEb,IACIxa,EAFJ1C,EACA,uDADQ,GAAIW,EACZ,uCAD8Cwc,EAC9C,uCADmEnY,EACnE,uCADmFoY,EACnF,uCADqGC,EACrG,uCAGA,GAAIrY,EAAM,CACR,MAAMsY,QAAoBtN,EAAAA,EAAAA,IAAQ,sBAAuB,CACvDhL,KAAAA,EACAhF,MAAAA,EACAW,KAAAA,EACAuP,MAAOqN,EAAAA,GACP5R,SAAUwR,EACVE,QAAAA,EACAD,QAAAA,IAGF,GAAIE,EAAa,CACf,MAAM,SACJrc,EADI,MACMkP,EADN,WACaqN,EADb,aACyBC,GAC3BH,EAEJ5a,EAAS,CACPzB,SAAAA,EACAkP,MAAAA,EACAjF,MAAO,GACPsS,WAAAA,EACAE,SAAUD,SAId/a,QAAesN,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7ChQ,MAAAA,EACAmd,WAAAA,EACAjN,MAAOqN,EAAAA,GACP5c,KAAAA,EACAyc,QAAAA,EACAC,QAAAA,IAIJ,IAAI/d,GAAS4G,EAAAA,EAAAA,MACb,MAAMyX,GAAqBC,EAAAA,EAAAA,IAA+Bte,GAC1D,IAAKoD,GAAqB,KAAV1C,GAAgBA,IAAU2d,EAExC,YADAtc,EAAAA,EAAAA,KAAUwc,EAAAA,EAAAA,IAAiCve,EAAQ,CAAE2B,UAAU,KAIjE,MAAM,SACJA,EADI,MACMkP,EADN,MACajF,EADb,WACoBsS,EADpB,SACgCE,GAClChb,EAEAwI,EAAMpG,SACRxF,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,QAGpDiF,EAAMrL,SACRxF,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,QAGpDlP,EAAS6D,SACXxF,GAASwe,EAAAA,EAAAA,IAAYxe,EAAQ2B,IAG/B3B,GAASye,EAAAA,EAAAA,IACPze,EACA2B,EACAuc,EACA7c,EACA+c,IAGFrc,EAAAA,EAAAA,IAAU/B,GC/CZmQ,eAAeuO,EACbhZ,EACArE,EACAgL,GAEA,IADAgE,EACA,wDACA,MAAMjN,QAAesN,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDhL,KAAAA,EACArE,KAAAA,EACAuP,MAA4B,EAArB+N,EAAAA,GACPtS,SAAAA,IAGF,IAAKjJ,EACH,OAGF,MAAM,MACJwI,EADI,MACGiF,EADH,SACUlP,EADV,WACoBuc,EADpB,aACgCC,GAClC/a,EAEE8N,GAAOC,EAAAA,EAAAA,IAAqBxP,EAAU,MACtCid,EAAcxZ,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAMiY,GAAgBC,EAAAA,EAAAA,IAAyB9e,GAC1C6e,IAIL7e,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,OACtD5L,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,GAASoR,EAAAA,EAAAA,IAAoBpR,EAAQ0F,EAAKvE,GAAI+P,GAC9ClR,GAAS+e,EAAAA,EAAAA,IAA8B/e,EAAQ0F,EAAKvE,GAAIE,EAAMud,EAAaV,EAAYC,IACvFpc,EAAAA,EAAAA,IAAU/B,GAELqQ,GACHqO,EAAkBhZ,EAAMrE,EAAM8c,GAAc,KDnJhD5d,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,OAAER,GAAWD,EAAOsL,cACpB,MAAE5K,GAAUD,EAEdC,IAAUT,GACP+Z,GAAgB,MA0CzB7J,eAA2BzP,GACzB,MAAM0C,QAAesN,EAAAA,EAAAA,IAAQ,cAAe,CAAEhQ,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMyX,GAAqBC,EAAAA,EAAAA,IAA+Bte,GAC1D,IAAKoD,IAAWib,GAAuB3d,IAAU2d,EAE/C,YADAtc,EAAAA,EAAAA,KAAUwc,EAAAA,EAAAA,IAAiCve,EAAQ,CAAE4L,OAAO,KAI9D,MAAM,WACJoT,EADI,WACQC,EADR,YACoBC,EADpB,YACiCC,GACnC/b,GAEA4b,EAAWxZ,QAAU0Z,EAAY1Z,UACnCxF,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqB,IAAI6N,KAAeE,GAAc,SAG9ED,EAAWzZ,QAAU2Z,EAAY3Z,UACnCxF,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB,IAAI8N,KAAeE,GAAc,QAGlFnf,GAASue,EAAAA,EAAAA,IAAiCve,EAAQ,CAAE4L,OAAO,IAC3D5L,GAASuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAClCyL,aAAc,CACZ2T,QAASJ,EAAW3b,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACpCke,QAASJ,EAAW5b,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAEtCqK,cAAe,IACVxL,EAAOsL,aAAaE,cACvB4T,QAASF,EAAY7b,KAAI,QAAC,GAAElC,GAAH,SAAYA,KACrCke,QAASF,EAAY9b,KAAI,QAAC,GAAElC,GAAH,SAAYA,SAIzCY,EAAAA,EAAAA,IAAU/B,GA5ENsf,CAAY5e,UAKlBH,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,KAAE0J,GAAS1J,EACXqd,EAAU3T,GAAOoV,EAAAA,EAAAA,IAAiBpV,GAAQA,EAEhDnK,GAASuL,EAAAA,EAAAA,IAAmBvL,EAAQ,CAClCmK,KAAAA,EACAzJ,MAAO,GACPgL,cAAe,IACV1L,EAAOsL,aAAaI,cACvBjH,KAAM,CACJyZ,gBAAY5d,EACZkf,SAAU,GACVrB,aAAc,OAIpBpc,EAAAA,EAAAA,IAAU/B,GAEV,MAAM,OAAEC,GAAWD,EAAOsL,aAE1BsS,EAAqB,GAAI,YAAQtd,EADpBL,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EACDwd,EAAS3T,OAG7D5J,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KAAY,MACrE,MAAM,MACJC,EADI,cACGgL,EADH,OACkBzL,EADlB,KAC0BkK,GAC5BnK,EAAOsL,aACLwS,EAAU3T,GAAOoV,EAAAA,EAAAA,IAAiBpV,GAAQA,GAC1C,KAAE9I,GAASZ,EAKjBmd,EAAqBld,EAAOW,EAJNqK,MAAAA,GAAJ,UAAIA,EAAgBrK,UAApB,aAAG,EAAuD8c,aAE/Dle,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAEGwd,EAAS3T,OCxCjE5J,EAAAA,EAAAA,IAAiB,2BAA4BP,IAC3C,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7Cue,GAAgBY,EAAAA,EAAAA,IAAwBzf,GAC9C,IAAK0F,IAASmZ,IAAkB3e,EAC9B,OAGF,MAAM,MAAEQ,EAAF,QAAS4L,GAAYuS,EACrBxS,EAAWC,MAAAA,OAAH,EAAGA,EAAS6R,aAE1B,IAAIuB,EACJ,GAAIxf,IAAakB,EAAAA,GAAgB,CAC/B,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAASC,GACrDwf,EAAe7Z,MAAAA,OAAH,EAAGA,EAAY6Z,cA8C/BvP,eACEzK,EACAxF,EACAwf,EACAhf,EACA2L,GAEA,IAAK3L,EACH,OAGF,MAAM0C,QAAesN,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDhL,KAAAA,EACArE,KAAM,OACNX,MAAAA,EACAgf,aAAAA,EACA9O,MAAO+O,EAAAA,GACPtT,SAAAA,IAGF,IAAKjJ,EACH,OAGF,MAAM,MACJwI,EADI,MACGiF,EADH,SACUlP,EADV,WACoBuc,EADpB,aACgCC,GAClC/a,EAEE8N,GAAOC,EAAAA,EAAAA,IAAqBxP,EAAU,MACtCid,EAAcxZ,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAE1C,IAAIzF,GAAS4G,EAAAA,EAAAA,MAEb,MAAMiY,GAAgBY,EAAAA,EAAAA,IAAwBzf,GACzC6e,GAAiBne,IAAUme,EAAcne,QAI9CV,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,OACtD5L,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,GAASoR,EAAAA,EAAAA,IAAoBpR,EAAQ0F,EAAKvE,GAAI+P,GAC9ClR,GAAS4f,EAAAA,EAAAA,IAA6B5f,EAAQ0F,EAAKvE,GAAIjB,EAAU0e,EAAaV,EAAYC,IAC1Fpc,EAAAA,EAAAA,IAAU/B,IArFL6f,CAAmBna,EAAMxF,EAAUwf,EAAchf,EAAO2L,OAG/D9L,EAAAA,EAAAA,IAAiB,4BAA6BP,IAC5C,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B4e,GAAgBC,EAAAA,EAAAA,IAAyB9e,GAE/C,IAAK0F,IAASmZ,EACZ,OAGF,MAAQiB,YAAaze,EAAf,cAAqBqK,GAAkBmT,EACvCkB,EAAiB1e,GAAQqK,GAAiBA,EAAcrK,GACxDgL,EAAW0T,MAAAA,OAAH,EAAGA,EAAgB5B,aAE5B9c,GAIAqd,EAAkBhZ,EAAMrE,EAAMgL,OAGrC9L,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UAAEuf,GAAcvf,GAEhB,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,GA8FPyK,eAAoCzK,EAAesa,GACjD,MAAMzb,QAAkBmM,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7DhL,KAAAA,EACAsa,UAAAA,IAGGzb,IAIL0b,EAAAA,EAAAA,MAAaha,aAAa,CACxBhG,OAAQyF,EAAKvE,GACboD,UAAAA,IAtGG2b,CAAqBxa,EAAMsa,OC1ElCzf,EAAAA,EAAAA,IAAiB,mBAAmB4P,MAAOnQ,EAAQQ,EAASC,KAC1D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAKC,EACH,OAIF,GAAID,EAAOgN,WAAWgG,WAAamN,EAAAA,GAAAA,WACjC,OAGF,MAAM,SAAEC,GAAa3f,EAErBT,GAASqgB,EAAAA,EAAAA,IAAyBrgB,EAAQmgB,EAAAA,GAAAA,YAC1CngB,GAASsgB,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CAAEsgB,yBAAqBjgB,KACjEyB,EAAAA,EAAAA,IAAU/B,GAEV,MAAMugB,QAA4B7P,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE0P,SAAAA,IAEjEpgB,GAAS4G,EAAAA,EAAAA,MACT5G,GAASqgB,EAAAA,EAAAA,IACPrgB,EAAQugB,EAAsBJ,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,OAE9DngB,GAASsgB,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CAAEsgB,oBAAAA,KAC5Cxe,EAAAA,EAAAA,IAAU/B,OAGZO,EAAAA,EAAAA,IAAiB,oBAAoB4P,MAAOnQ,EAAQQ,EAASC,KAC3D,MAAM,OAAER,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,IAAI0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACxC,IAAKA,IAAWyF,EACd,OAGF,MAAM,SAAE0a,GAAa3f,EAKrB,GAHAT,GAASqgB,EAAAA,EAAAA,IAAyBrgB,EAAQmgB,EAAAA,GAAAA,aAC1Cpe,EAAAA,EAAAA,IAAU/B,IAENwgB,EAAAA,EAAAA,IAAiB9a,GAAO,CAG1B,GAFAA,QAAagL,EAAAA,EAAAA,IAAQ,cAAehL,IAE/BA,EACH,OAGFlF,EAAQ0B,SAAS,CAAEf,GAAIuE,EAAKvE,KAG9B,MAAMiC,QAAesN,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEhL,KAAAA,EAAM0a,SAAAA,IAExDpgB,GAAS4G,EAAAA,EAAAA,MACT5G,GAASqgB,EAAAA,EAAAA,IAAyBrgB,EAAQoD,EAAS+c,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,OACjFngB,GAASsgB,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CAAEsgB,yBAAqBjgB,KACjEyB,EAAAA,EAAAA,IAAU/B,OAGZO,EAAAA,EAAAA,IAAiB,qBAAsBP,IACrC,MAAM,OAAEC,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjD0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCA,GAAWyF,IAIhBgL,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEhL,KAAAA,QAGjCnF,EAAAA,EAAAA,IAAiB,4BAA4B,CAACP,EAAQQ,EAASC,KAC7D,MAAM,OAAER,EAAF,OAAUwgB,GAAWhgB,GAE3BsB,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CAAEygB,cAAeD,SAG9DlgB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OAAER,EAAF,OAAUwgB,GAAWhgB,EAErBkgB,EAASF,EAAS,CAAEG,WAAY,CAAEH,OAAAA,IAAa,CAAEG,gBAAYtgB,IAEnEyB,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ0gB,QAG7CpgB,EAAAA,EAAAA,IAAiB,2BAA2B4P,MAAOnQ,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,QACI4gB,EADJ,UACaC,EADb,MACwBlQ,GAC1BnQ,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B8gB,GAAQtH,EAAAA,EAAAA,IAAWzZ,EAAQ6gB,GAAW7gB,EAAOsX,eACnD,IAAKF,IAAS2J,EAAO,OAErB,MAAM3d,QAAesN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0G,KAAAA,EAAM2J,MAAAA,EAAOD,UAAAA,EAAWlQ,MAAAA,IAE1B,IAAKxN,EACH,OAGF,MAAMud,EAASG,EAAY,CAAEE,eAAgB5d,GAAW,CAAE6d,QAAS7d,IAEnErB,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,KAAiB1Z,EAAAA,EAAAA,MAAa3G,EAAQ0gB,QAGlDpgB,EAAAA,EAAAA,IAAiB,0BAA0B4P,MAAOnQ,EAAQQ,EAASC,KACjE,MAAM,OACJR,EADI,KACIihB,EADJ,UACUJ,EADV,WACqBK,EADrB,WACiCC,EADjC,gBAC6CC,EAD7C,MAC8D9D,GAChE9c,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKmX,EAAM,OAEX,MAAMhU,QAAesN,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD0G,KAAAA,EACA8J,KAAAA,EACAJ,UAAAA,EACAK,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAKna,EACH,OAGF,MAAM,UAAEke,EAAF,UAAaC,GAAcne,EAG3B6d,IADNjhB,GAAS4G,EAAAA,EAAAA,OACeoG,WAAWtE,SAASzI,GAAQghB,SAAW,IAC5D3d,QAAQke,GAAYA,EAAQN,OAASI,EAAUJ,OAC5CF,EAAiB,IAAKhhB,EAAOgN,WAAWtE,SAASzI,GAAQ+gB,gBAAkB,IAE7EO,EAAUT,UACZE,EAAejV,QAAQwV,GAEvBN,EAAQhd,KAAKsd,IAGfxf,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzCghB,QAAAA,EACAD,eAAAA,SAIJzgB,EAAAA,EAAAA,IAAiB,oBAAoB4P,MAAOnQ,EAAQQ,EAASC,KAC3D,MAAM,OACJR,EADI,WACIkhB,EADJ,WACgBC,EADhB,gBAC4BC,EAD5B,MAC6C9D,GAC/C9c,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKmX,EAAM,OAEX,MAAMhU,QAAesN,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C0G,KAAAA,EACA+J,WAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACA9D,MAAAA,IAEF,IAAKna,EACH,OAIF,MAAM6d,GADNjhB,GAAS4G,EAAAA,EAAAA,OACcoG,WAAWtE,SAASzI,GAAQghB,SAAW,IAC9Dlf,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzCghB,QAAS,IAAIA,EAAS7d,UAI1B7C,EAAAA,EAAAA,IAAiB,4BAA4B4P,MAAOnQ,EAAQQ,EAASC,KAAY,QAC/E,MAAM,OACJR,EADI,KACIihB,GACNzgB,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKmX,EAAM,OAMX,UAJqB1G,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0G,KAAAA,EACA8J,KAAAA,IAGA,OAIF,MAAMO,GADNzhB,GAAS4G,EAAAA,EAAAA,OACsBoG,WAAWtE,SAASzI,IACnD8B,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzCghB,QAASQ,MAAAA,GAAF,UAAEA,EAAiBR,eAAnB,aAAE,EAA0B3d,QAAQmd,GAAWA,EAAOS,OAASA,IACtEF,eAAgBS,MAAAA,GAAF,UAAEA,EAAiBT,sBAAnB,aAAE,EAAiC1d,QAAQmd,GAAWA,EAAOS,OAASA,WAIxF3gB,EAAAA,EAAAA,IAAiB,oCAAoC4P,MAAOnQ,EAAQQ,EAASC,KAC3E,MAAM,OACJR,EADI,QACI4gB,GACNpgB,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B8gB,GAAQtH,EAAAA,EAAAA,IAAWzZ,EAAQ6gB,GAAW7gB,EAAOsX,eAC9CF,GAAS2J,SAEOrQ,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D0G,KAAAA,EACA2J,MAAAA,MAMF/gB,GAAS4G,EAAAA,EAAAA,OACT7E,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzC+gB,eAAgB,WAIpBzgB,EAAAA,EAAAA,IAAiB,2BAA2B4P,MAAOnQ,EAAQQ,EAASC,KAAY,MAC9E,MAAM,OACJR,EADI,KACIihB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC/Q,GACtCnQ,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B2hB,GAAanI,EAAAA,EAAAA,IAAWzZ,EAAQ2hB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMxe,QAAesN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0G,KAAAA,EACA8J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,IAEF,IAAKxN,EACH,OAIF,MAAMye,EAAiB,WADvB7hB,GAAS4G,EAAAA,EAAAA,OACwBoG,WAAWtE,SAASzI,UAA9B,aAAG,EAAoC2gB,WACzDiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,IAIpEnf,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzC2gB,WAAY,IACPiB,EACHC,UAAW1e,UAKjB7C,EAAAA,EAAAA,IAAiB,4BAA4B4P,MAAOnQ,EAAQQ,EAASC,KAAY,MAC/E,MAAM,OACJR,EADI,KACIihB,EADJ,WACUQ,EADV,aACsBC,EADtB,MACoC/Q,GACtCnQ,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B2hB,GAAanI,EAAAA,EAAAA,IAAWzZ,EAAQ2hB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMxe,QAAesN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0G,KAAAA,EACA8J,KAAAA,EACAQ,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,EACAmR,aAAa,IAEf,IAAK3e,EACH,OAIF,MAAMye,EAAiB,WADvB7hB,GAAS4G,EAAAA,EAAAA,OACwBoG,WAAWtE,SAASzI,UAA9B,aAAG,EAAoC2gB,WACzDiB,MAAAA,GAAAA,EAAmBpB,QAAUoB,EAAkBpB,OAAOS,OAASA,IAIpEnf,EAAAA,EAAAA,KAAUue,EAAAA,EAAAA,IAAiBtgB,EAAQC,EAAQ,CACzC2gB,WAAY,IACPiB,EACHG,WAAY5e,UAKlB7C,EAAAA,EAAAA,IAAiB,wBAAwB4P,MAAOnQ,EAAQQ,EAASC,KAC/D,MAAM,OACJR,EADI,WACIyhB,EADJ,aACgBC,EADhB,MAC8B/Q,GAChCnQ,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B2hB,GAAanI,EAAAA,EAAAA,IAAWzZ,EAAQ2hB,GACtC,IAAKvK,GAASuK,IAAiBC,EAAa,OAE5C,MAAMxe,QAAesN,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0G,KAAAA,EACAsK,WAAAA,EACAE,WAAAA,EACAhR,MAAAA,EACAmR,aAAa,IAEV3e,IAILpD,GAAS4G,EAAAA,EAAAA,OACT7E,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAEgiB,aAAc7e,UAGvD7C,EAAAA,EAAAA,IAAiB,uBAAuB4P,MAAOnQ,EAAQQ,EAASC,KAAY,MAC1E,MAAM,OACJR,EADI,OACIyM,EADJ,WACYwV,GACdzhB,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BqY,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQ0M,GAChC,IAAK0K,IAASkB,EAAM,OAOpB,UALqB5H,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD0G,KAAAA,EACAkB,KAAAA,EACA4J,WAAAA,IAEW,OAEbliB,GAAS4G,EAAAA,EAAAA,MACT,MAAMub,GAAaxc,EAAAA,EAAAA,IAAW3F,EAAQC,GACjCkiB,IAELpgB,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CACnCgiB,aAAY,UAAEE,EAAWF,oBAAb,aAAE,EAAyB3e,QAAQ8e,GAAaA,EAAS1V,SAAWA,WAIpFnM,EAAAA,EAAAA,IAAiB,2BAA2B4P,MAAOnQ,EAAQQ,EAASC,KAClE,MAAM,OACJR,EADI,WACIiiB,EADJ,KACgBhB,GAClBzgB,EACE2W,GAAOzR,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKmX,EAAM,OAOX,UALqB1G,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD0G,KAAAA,EACA8K,WAAAA,EACAhB,KAAAA,IAEW,OAEblhB,GAAS4G,EAAAA,EAAAA,MACT,MAAMub,GAAaxc,EAAAA,EAAAA,IAAW3F,EAAQC,GACjCkiB,IAELpgB,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CACnCgiB,aAAc,GACdvI,SAAU,IACLyI,EAAWzI,SACd2I,mBAAoB,GACpBC,gBAAiB,UAKvB/hB,EAAAA,EAAAA,IAAiB,uBAAuB4P,MAAOnQ,EAAQQ,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACbiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC3ByF,SAEgBgL,EAAAA,EAAAA,IAAQ,sBAAuBhL,KAGpD3D,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,KAAWzP,EAAAA,EAAAA,MAAa3G,EAAQ,CACxCsiB,cAAUjiB,Q,cC9Ud,IAAIkiB,EAoKJ,SAASC,EAAgB/c,GACvB,OAAOgL,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9BhL,KAAAA,EACAxF,SAAUkB,EAAAA,GACViL,SAAU3G,EAAKoS,uBACfxH,YAAazF,KAAK2F,MAAMC,EAAAA,GAAqB,GAAK,GAClDG,MAAOH,EAAAA,MAxKXlQ,EAAAA,EAAAA,IAAiB,QAAQ,KACnBmiB,EAAAA,IAEFC,QAAQC,IAAI,kBAGVJ,GACF9a,aAAa8a,IAGfzgB,EAAAA,EAAAA,IAAU,KAAK6E,EAAAA,EAAAA,MAAaic,WAAW,IAGvCL,EAAuB9b,OAAOC,YAAW,MACvC5E,EAAAA,EAAAA,IAAU,KAAK6E,EAAAA,EAAAA,MAAaic,WAAW,IACvCL,OAAuBliB,IAnBI,MAsB7B,MAAM,aAAEwiB,EAAF,uBAAgBC,IAA2B9C,EAAAA,EAAAA,MAEjD6C,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAW/S,gBAsBfA,iBACE,IAAIgT,GAAoB,EAEpBnjB,GAAS4G,EAAAA,EAAAA,MAGb,MACMwc,EADehe,OAAOC,KAAKrF,EAAO2B,SAAS+G,UACb7E,QAAwC,CAACC,EAAK7D,KAChF6D,EAAI7D,GAAU,GACd6D,EAAI7D,GAAQkW,OAAQK,EAAAA,EAAAA,IAAYxW,EAAQC,EAAQmB,EAAAA,IAChD0C,EAAI7D,GAAQ6W,WAAYC,EAAAA,EAAAA,IAAgB/W,EAAQC,EAAQmB,EAAAA,IACxD0C,EAAI7D,GAAQojB,cAAeC,EAAAA,EAAAA,GAAmBtjB,EAAQC,EAAQmB,EAAAA,IAEvD0C,IACN,KAEK7D,OAAQsjB,EAAerjB,SAAUsjB,IAAoBrjB,EAAAA,EAAAA,IAAyBH,IAAW,GAC3FyjB,EAAcF,EAAgBvjB,EAAO4L,MAAMsF,KAAKqS,QAAiBjjB,EACvE,GAAIijB,GAAiBE,EAAa,CAChC,MAAMrgB,QAAeqf,EAAgBgB,GACrCzjB,GAAS4G,EAAAA,EAAAA,MACT,MAAQ3G,OAAQyjB,IAAqBvjB,EAAAA,EAAAA,IAAyBH,IAAW,GACnE6F,EAAa2d,IAAmB1d,EAAAA,EAAAA,IAAiB9F,EAAQujB,EAAeC,GAE9E,GAAIpgB,GAAUsgB,IAAqBH,EAAe,CAChD,MAAMI,EAAyB3jB,EAAO2B,SAAS+G,SAAS6a,GAClDxS,EAAgBwS,IAAkBrZ,EAAAA,GACpClK,EAAOgK,qBAAqB3G,KAAI,QAAC,QAAEE,GAAH,SAAiBA,KACjD,GACEyN,EAAe,GAAoBC,OAAO7N,EAAOzB,SAAUoP,GAC3DG,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCU,EAAYtM,OAAOC,KAAK6L,GAAM7N,IAAIoC,QAcxC,GAZAzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,KAId1I,GAASoR,EAAAA,EAAAA,IAAoBpR,EAAQujB,EAAerS,GACpDlR,GAASsR,EAAAA,EAAAA,IAAgBtR,EAAQujB,EAAeniB,EAAAA,GAAgBsQ,GAChE1R,GAASkS,EAAAA,EAAAA,IAAuBlS,EAAQujB,EAAeniB,EAAAA,GAAgBsQ,GAEnE8R,GAAmB3d,GAAcA,EAAW+d,gBAAiB,CAC/D,MAAM,gBAAEA,GAAoB/d,EACtBge,EAA+B7jB,EAAO2B,SAAS+G,SAASkb,GACxDE,QAAqBrB,EAAgBziB,EAAO4L,MAAMsF,KAAK0S,IAC7D,GAAIE,EAAc,CAChB,MAAMC,GAAa5S,EAAAA,EAAAA,IAAqB2S,EAAaniB,SAAU,MACzDqiB,EAAkB5e,OAAOC,KAAK0e,GAAY1gB,IAAIoC,QAEpDzF,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,IACL1I,EAAO2B,SAAS+G,SACnB,CAAC7C,EAAW+d,iBAAkB,CAC5B1S,KAAM6S,EACNE,YAAa,CACX,CAAC7iB,EAAAA,IAAiB,IACZyiB,MAAAA,OAAJ,EAAIA,EAA8BI,YAAY7iB,EAAAA,IAC9CsQ,UAAWsS,EACXtf,YAAasf,EACbpS,iBAAatR,KAInB,CAACijB,GAAgB,IACZvjB,EAAO2B,SAAS+G,SAAS6a,GAC5BU,YAAa,IACRjkB,EAAO2B,SAAS+G,SAAS6a,GAAeU,YAC3C,CAACT,GAAkB,IACbG,MAAAA,OAAJ,EAAIA,EAAwBM,YAAYT,GACxC5R,iBAAatR,SAU7BN,GAASkkB,EAAAA,EAAAA,IAAYlkB,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOwI,MAAO,OAChE5L,GAASmkB,EAAAA,EAAAA,IAAYnkB,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,OAChE7Q,GAASyR,EAAAA,EAAAA,IAAkBzR,EAAQujB,EAAengB,EAAO0N,aAEzDqS,GAAoB,GAInBA,IACHnjB,EAAS,IACJA,EACH2B,SAAU,IACL3B,EAAO2B,SACV+G,SAAU,MAMhBtD,OAAOC,KAAK+d,GAAgBva,SAAS5I,IACnCD,GAASokB,EAAAA,EAAAA,IAAapkB,EAAQC,EAAQmB,EAAAA,GAAgBgiB,EAAenjB,QAGvE8B,EAAAA,EAAAA,IAAU/B,GAEV,MAAQC,OAAQokB,EAAa9f,UAAW+f,GAAmBtkB,EAAOsG,YAC9D+d,GAAeC,KAAmBlQ,EAAAA,EAAAA,IAAkBpU,EAAQqkB,EAAaC,KAC3ErE,EAAAA,EAAAA,MAAasE,mBAtILC,IAENziB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACH6d,aAAc7O,KAAKC,MACnBgN,WAAW,IAGTH,EAAAA,IAEFC,QAAQC,IAAI,oBAGd8B,EAAAA,EAAAA,MACA5B,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/CvS,EAAAA,EAAAA,IAAQ,oBACbqS,WCxENxiB,EAAAA,EAAAA,IAAiB,cAAc4P,MAAOnQ,EAAQQ,EAASC,KACrD,MAAM,OACJR,EADI,OAEJiX,EAFI,YAGJC,GACE1W,EACJ,IAAKR,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,OAGF,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,aAAc,CACzC0G,KAAM1R,EACNwR,OAAAA,EACAC,YAAAA,IAGF3W,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACLiU,EAAAA,EAAAA,IAAe,2BACf,iFAIR9W,EAAAA,EAAAA,IAAiB,sBAAsB4P,MAAOnQ,EAAQQ,EAASC,KAC7D,MAAM,OACJR,EADI,OAEJiX,EAFI,YAGJC,EAHI,MAIJwN,GACElkB,EACJ,IAAKR,EACH,OAGF,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,IAASif,EACZ,OAGF,MAAMvhB,QAAesN,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD0G,KAAM1R,EACNif,MAAAA,EACAzN,OAAAA,EACAC,YAAAA,IAGF3W,EAAQgJ,iBAAiB,CACvBjG,QAASH,GACLiU,EAAAA,EAAAA,IAAe,2BACf,gFCxCR,MAAMuN,GAA+B3U,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAAO,GAElE2U,GAAwB5K,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GClBnD,SAAS4U,EACd9kB,EAAqBogB,EAAkB2E,GAEvC,MAAO,IACF/kB,EACHglB,WAAY,IACPhlB,EAAOglB,WACVC,WAAY,IACPjlB,EAAOglB,WAAWC,WACrB,CAAC7E,GAAW2E,KAMb,SAASG,EAA2BllB,EAAqBmd,GAC9D,MAAO,IACFnd,EACHglB,WAAY,IACPhlB,EAAOglB,WACV7H,UAAAA,KDAN5c,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KACjD,MAAM,OAAEiM,GAAWjM,EACb6X,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQ0M,GAChC,IAAK4L,EACH,OAGF,MAAM,GAAEnX,EAAF,WAAM0a,GAAevD,EAE3BsM,GAA6B,KAAMlU,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEvP,GAAAA,EAAI0a,WAAAA,UAGpEtb,EAAAA,EAAAA,IAAiB,YAAY4P,MAAOnQ,EAAQQ,EAASC,KACnD,MAAM,OAAEiM,GAAWjM,EACb6X,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQ0M,GAChC,IAAK4L,EACH,OAGF,MAAMlV,QAAesN,EAAAA,EAAAA,IAAQ,aAAc,CAAEG,MAAO,CAACyH,KACrD,IAAKlV,EACH,OAGF,MAAM,MAAEyN,EAAF,iBAASsU,GAAqB/hB,EAEpCpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASmkB,EAAAA,EAAAA,IAAYnkB,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACzD7Q,GAASolB,EAAAA,EAAAA,IAAoBplB,EAAQ,IAChCA,EAAO6Q,MAAMwU,gBACbF,KAELpjB,EAAAA,EAAAA,IAAU/B,OAGZO,EAAAA,EAAAA,IAAiB,gBAAiBP,IAChC,MAAQslB,UAAU,gBAAEC,IAAsBvlB,IAErCulB,IAAmBnb,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAAoBkb,EAzChC,KAkGnCpV,iBACE,MAAM/M,QAAesN,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKtN,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOsJ,GAAUzN,EAEvB,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb5G,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,EAAS,IACJA,EACHslB,SAAU,IACLtlB,EAAOslB,SACVjG,QAAS9X,EACTge,iBAAiBnb,EAAAA,EAAAA,GAAcpK,EAAOqK,qBAG1CtI,EAAAA,EAAAA,IAAU/B,GA1EHwlB,OAITjlB,EAAAA,EAAAA,IAAiB,mBAAmB,MAyEpC4P,iBACE,MAAMsV,QAAoB/U,EAAAA,EAAAA,IAAQ,oBAClC,IAAK+U,EACH,OAGF,IAAIzlB,GAASuR,EAAAA,EAAAA,KAAS3K,EAAAA,EAAAA,OAAauK,EAAAA,EAAAA,IAAqBsU,EAAY5U,MAAO,OAC3E7Q,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBsU,EAAY7Z,MAAO,OAGlE,MAAM8Z,EAAoBpN,GAAmBA,EAAKqN,UAAYrN,EAAKsN,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAY5U,MAAMnN,MAAK,CAACkV,EAAGC,IAC7CgN,EAASI,QAAQP,EAAiB9M,GAAI8M,EAAiB7M,MACtDvV,QAAQgV,IAAUA,EAAK4N,UAE1BnkB,EAAAA,EAAAA,IAAU,IACL/B,EACHylB,YAAa,CACXpG,QAAS2G,EAAY3iB,KAAKiV,GAASA,EAAKnX,QA5FvCglB,OAGP5lB,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7BmQ,EAAAA,EAAAA,IAAQ,wBAGfnQ,EAAAA,EAAAA,IAAiB,mBAAmB4P,MAAAA,IAAkB,UACpD,MAAM,OAAElQ,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACjDsY,EAAOrY,GAASwZ,EAAAA,EAAAA,IAAWzZ,EAAQC,QAAUK,EACnD,IAAKgY,IAAQ8N,EAAAA,EAAAA,IAAU9N,IAAnB,UAA4BA,EAAK+N,mBAAjC,OAA4B,EAAkBC,cAChD,OAGF,MAAM1b,EAAK,UAAG0N,EAAK+N,mBAAR,aAAG,EAAkBzb,MAC1BxH,QAAesN,EAAAA,EAAAA,IAAQ,mBAAoB4H,EAAKnX,GAAImX,EAAKuD,WAAajR,GAC5E,IAAKxH,EACH,OAGF,MAAM,MAAEwI,EAAF,QAASwT,EAAT,cAAkBkH,GAAkBljB,EAE1CpD,GAAS4G,EAAAA,EAAAA,MACLgF,EAAMpG,SACRxF,GAASwR,EAAAA,EAAAA,IAASxR,GAAQmR,EAAAA,EAAAA,IAAqBvF,EAAO,QAExD5L,GAASumB,EAAAA,EAAAA,IAAWvmB,EAAQsY,EAAKnX,GAAI,CACnCklB,YAAa,CACXzb,MAAOwU,EAAQ5Z,OAAS4Z,EAAQA,EAAQ5Z,OAAS,GAAK,IACtD+B,KAAK8Q,EAAAA,EAAAA,MAAQ,UAAAC,EAAK+N,mBAAL,eAAkB9e,MAAO,IAAI0J,OAAOmO,IACjDkH,cAAAA,MAIJvkB,EAAAA,EAAAA,IAAU/B,OAGZO,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OACJiM,EADI,QACIrG,GAAU,EADd,UACqBuf,EADrB,SACgCD,EADhC,uBAC0Ca,GAC5C/lB,GAyDN0P,eACEzD,EACArG,EACAuf,EACAD,EACAa,GAEA,IAAIxmB,GAAS4G,EAAAA,EAAAA,MACb,MAAM0R,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQ0M,GAChC,IAAK4L,EACH,OAOF,IAAIlV,EACJ,IALA6c,EAAAA,EAAAA,MAAawG,qBAAqB,CAAExmB,OAAQyM,EAAQrG,QAAAA,KAEpDtE,EAAAA,EAAAA,KAAUse,EAAAA,EAAAA,KAAyBzZ,EAAAA,EAAAA,MAAauZ,EAAAA,GAAAA,cAG3C7H,EAAKoO,WAAapO,EAAKqO,YAC1BvjB,QAAesN,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEkW,MAAOtO,EAAKqO,YAAaf,UAAAA,EAAWD,SAAAA,QACzE,CACL,MAAM,GAAExkB,EAAF,WAAM0a,GAAevD,EAC3BlV,QAAesN,EAAAA,EAAAA,IAAQ,gBAAiB,CACtCvP,GAAAA,EACA0a,WAAAA,EACA8K,YAAa,GACbf,UAAAA,EACAD,SAAAA,EACAa,uBAAAA,IAIJxmB,GAAS4G,EAAAA,EAAAA,MACLxD,KACF6c,EAAAA,EAAAA,MAAa4G,iBAAiB,CAAE5mB,OAAQyM,KAExC3K,EAAAA,EAAAA,KAAUwkB,EAAAA,EAAAA,IACRvmB,EACAsY,EAAKnX,GACL,CACEykB,UAAAA,EACAD,SAAAA,MAKN3lB,GAASqgB,EAAAA,EAAAA,IAAyBrgB,EAAQmgB,EAAAA,GAAAA,UAC1CngB,GAAS6M,EAAAA,EAAAA,IAAsB7M,IAC/B+B,EAAAA,EAAAA,IAAU/B,GAvGL8mB,CAAcpa,EAAQrG,EAASuf,EAAWD,EAAUa,OAG3DjmB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACP,EAAQQ,EAASC,KAClD,MAAM,OAAEiM,GAAWjM,GAsGrB0P,eAA6BzD,GAC3B,MAAM1M,GAAS4G,EAAAA,EAAAA,MACT0R,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQ0M,GAEhC,IAAK4L,EACH,OAGF,MAAM,GAAEnX,EAAF,WAAM0a,GAAevD,QAErB5H,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEvP,GAAAA,EAAI0a,WAAAA,IA9GhCkL,CAAcra,OAiHrBnM,EAAAA,EAAAA,IAAiB,qBAAqB4P,MAAOnQ,EAAQQ,EAASC,KAC5D,MAAM,UAAEumB,GAAcvmB,EAChBwmB,GAAYC,EAAAA,EAAAA,IAASF,GAErB1O,EAAO2O,GAAYxN,EAAAA,EAAAA,IAAWzZ,EAAQgnB,QAAa1mB,EACnDoF,EAAQuhB,OAA4C3mB,GAAhCqF,EAAAA,EAAAA,IAAW3F,EAAQgnB,GAC7C,IAAK1O,IAAS5S,EACZ,OAGF,MAAMtC,QAAesN,EAAAA,EAAAA,IAAQ,qBAAsB4H,EAAM5S,GACpDtC,GAAWA,EAAO+jB,SAIvBnnB,GAAS4G,EAAAA,EAAAA,MAELqgB,EACFjnB,GAASumB,EAAAA,EAAAA,IAAWvmB,EAAQgnB,EAAW,CAAEG,OAAQ/jB,EAAO+jB,UAExDnnB,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAQ,OAC9D7Q,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQgnB,EAAW,CAAEG,OAAQ/jB,EAAO+jB,WAG1DplB,EAAAA,EAAAA,IAAU/B,QAGZO,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KACvD,MAAM,MAAEC,GAAUD,EAEbC,GAEAmkB,GAAsB,MAgC7B1U,eAA2BzP,GACzB,MAAM0C,QAAesN,EAAAA,EAAAA,IAAQ,cAAe,CAAEhQ,MAAAA,IAE9C,IAAIV,GAAS4G,EAAAA,EAAAA,MACb,MAAMyX,EAAqBre,EAAOonB,WAAW1mB,MAE7C,IAAK0C,IAAWib,GAAuB3d,IAAU2d,EAE/C,YADAtc,EAAAA,EAAAA,KAAUslB,EAAAA,EAAAA,IAA+BrnB,GAAQ,IAInD,MAAM,WAAEif,EAAF,YAAcE,GAAgB/b,EAEpC,IAAIqJ,EACAD,EACAyS,EAAWzZ,SACbxF,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB8N,EAAY,OAC3DxS,EAAewS,EAAW5b,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAExCge,EAAY3Z,SACdxF,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBgO,EAAa,OAC5D3S,EAAgB2S,EAAY9b,KAAI,QAAC,GAAElC,GAAH,SAAYA,MAG9CnB,GAASqnB,EAAAA,EAAAA,IAA+BrnB,GAAQ,GAChDA,GAASuM,EAAAA,EAAAA,IAAiBvM,EAAQ,CAAEyM,aAAAA,EAAcD,cAAAA,KAElDzK,EAAAA,EAAAA,IAAU/B,GA1DRsnB,CAAY5mB,UAIhBH,EAAAA,EAAAA,IAAiB,iBAAiB4P,MAAOnQ,EAAQQ,EAASC,KACxD,MAAQkmB,YAAaC,EAAf,UAAsBhB,EAAtB,SAAiCD,GAAallB,EAE9C2C,QAAesN,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEkW,MAAAA,EAAOhB,UAAAA,EAAWD,SAAAA,IAC7DviB,GAQL5C,EAAQ0B,SAAS,CAAEf,GAAIiC,KAEvBrB,EAAAA,EAAAA,KAAU8K,EAAAA,EAAAA,KAAsBjG,EAAAA,EAAAA,SAT9BpG,EAAQgJ,iBAAiB,CACvBjG,QAASN,EAAAA,GAA4B,2CAW3C1C,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACb8mB,GAAaL,EAAAA,EAAAA,IAASjnB,IAAUwZ,EAAAA,EAAAA,IAAWzZ,EAAQC,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACjFsnB,IAIA7W,EAAAA,EAAAA,IAAQ,aAAc6W,ME/R7B,MAAMC,EAAkBjU,EAAAA,IAAUkU,EAAAA,GAEnB,MAAMC,EAGnBC,YAAoBC,EAA2BC,G,QAA6B,KAAxDD,SAAAA,EAAwD,KAA7BC,OAAAA,E,OAA6B,G,EAAA,oB,sBAAA,K,uDAAA,K,KAG5EC,kBAMS,MALFN,IAELO,KAAKC,UAAYthB,OAAOuhB,KAAK,mBAAe3nB,EAAWynB,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUE,OAEf,UAAAH,KAAKF,cAAL,cAAAE,OAIJE,KAAKhZ,GACH,GAAI8Y,KAAKC,UAKP,OAJAD,KAAKC,UAAWG,SAASC,KAAOnZ,EAChC8Y,KAAKC,UAAWK,aAChBN,KAAKC,eAAY1nB,GAKnB,IAAKknB,EAAiB,CACpB,MAAMc,EAAQ5hB,OAAOuhB,KAAKhZ,OAAK3O,EAAWynB,KAAKH,UAGxC,MAFHU,EACFA,EAAMD,QAEN,UAAAN,KAAKF,cAAL,cAAAE,OAKNQ,gBAAgB,MACd,UAAAR,KAAKC,iBAAL,SAAgBQ,QAChBT,KAAKC,eAAY1nB,GCpBrB,MAAMmoB,EAAY,4BAEZC,GAAwBzY,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAyW1DC,eAAewY,EACbjjB,EAAe4R,EAAuBsR,EAAiBtV,EAAqBuB,SAEtEnE,EAAAA,EAAAA,IAAQ,cAAe,CAC3BhL,KAAAA,EACAjB,KAAMmkB,EACNtV,WAAAA,EACAuB,OAAAA,IAIJ,IAAIgU,EAEJ1Y,eAAe2Y,EAAqBpjB,EAAenB,EAAmBmK,GAA+B,IAAhBqa,EAAgB,wDACnG,MAAM,WACJC,EADI,iBACQxf,EADR,oBAC0Byf,EAD1B,SAC+CC,IACjDjJ,EAAAA,EAAAA,MAEA8I,IACGF,IACHA,EAAc,IAAInB,EAAa,8BAA8B,KAC3Dle,EAAiB,CAAEjG,QAAS,2CAIhCslB,EAAYf,mBAGd,MAAM1kB,QAAesN,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDzQ,OAAQyF,EAAKvE,GACb0a,WAAYnW,EAAKmW,WACjBtX,UAAAA,EACAmK,KAAAA,EACAqa,OAAAA,IAGF,IAAK3lB,EACH,OAEF,MAAM,QAAEG,EAAS4lB,MAAOC,EAAlB,IAA2Bna,GAAQ7L,EAErCgmB,EACFJ,EAAW,CAAEta,KAAM,CAAEnL,QAASA,GAAW,WAChCA,EACTiG,EAAiB,CAAEjG,QAAAA,IACV0L,IACL8Z,EAEE9Z,EAAIlH,SAAS0gB,GACfI,EAAaZ,KAAKhZ,IAElB4Z,EAAaN,gBACbW,EAAS,CAAEja,IAAAA,EAAKhP,OAAQyF,EAAKvE,GAAIoD,UAAAA,KAGnC0kB,EAAoB,CAAEha,IAAAA,MA9Z5B1O,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UAAE8D,EAAF,OAAa8kB,GAAW5oB,EAE9B,OAAQ4oB,EAAOhoB,MACb,IAAK,UACHb,EAAQmoB,eAAe,CAAEC,QAASS,EAAO5kB,OACzC,MACF,IAAK,MAAO,CACV,MAAM,IAAEwK,GAAQoa,EACZpa,EAAIqa,MAAMC,EAAAA,KAAgBta,EAAIqa,MAAME,EAAAA,IACtChpB,EAAQipB,iBAAiB,CAAExa,IAAAA,IAE3BzO,EAAQyoB,oBAAoB,CAAEha,IAAAA,IAEhC,MAEF,IAAK,WAAY,CACf,MAAMvJ,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGGojB,EAAqBpjB,EAAMnB,EAAW8kB,EAAO3a,MAClD,MAEF,IAAK,cACHlO,EAAQkpB,cAAc,CAAEhgB,OAAQ2f,EAAO3f,SACvC,MACF,IAAK,eAAgB,CACnB,MAAM4O,EAAOtY,EAAOsX,eAAgBmC,EAAAA,EAAAA,IAAWzZ,EAAQA,EAAOsX,oBAAiBhX,EAC/E,IAAKgY,EACH,OAEF9X,EAAQwoB,WAAW,CACjBta,KAAM,CACJiY,YAAarO,EAAKqO,YAClBf,UAAWtN,EAAKsN,UAChBD,SAAUrN,EAAKqN,SACfjZ,OAAQ4L,EAAKnX,MAGjB,MAEF,IAAK,UAAW,CACd,MAAMuE,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAEF,MAAM,iBAAEikB,GAAqBN,EAC7B7oB,EAAQopB,WAAW,CAAED,iBAAAA,EAAkB1pB,OAAQyF,EAAKvE,GAAIoD,UAAAA,IACxD,MAEF,IAAK,MAAO,CACV,MAAMmB,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGFlF,EAAQqpB,eAAe,CAAEnkB,KAAAA,EAAMnB,UAAAA,IAC/B/D,EAAQspB,uBAAsB1V,EAAAA,EAAAA,IAAkBpU,EAAQ0F,EAAKvE,GAAIoD,IACjE/D,EAAQupB,iBAAiB,CAAE9pB,OAAQyF,EAAKvE,GAAIoD,UAAAA,IAC5C,MAEF,IAAK,OAAQ,CACX,MAAMmB,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAGGojB,EAAqBpjB,EAAMnB,OAAWjE,GAAW,GACtD,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAEI,EAAF,WAASspB,GAAeX,EAC9B7oB,EAAQypB,gBAAgB,CAAEvpB,MAAAA,EAAOspB,WAAAA,EAAYzlB,UAAAA,IAC7C,MAGF,IAAK,cAAe,CAClB,MAAM,OAAEmI,GAAW2c,EACnB7oB,EAAQ0pB,iBAAiB,CAAE/oB,GAAIuL,IAC/B,YAKNnM,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,QAAEmoB,EAAF,OAAW3oB,GAAWQ,GACtB,cAAE6W,GAAkBtX,EACpB0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,IAAUgJ,EAAAA,EAAAA,IAAkBjJ,GAC/DuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAEpD,IAAKsX,IAAkB5R,IAASnE,EAC9B,OAGF,MAAM,SAAErB,GAAaqB,EACrBf,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQuU,oBAAoB,CAAE9U,OAAQyF,EAAKvE,GAAIjB,SAAAA,EAAU8U,OAAO,IAE3D2T,EACHjjB,EAAM4R,EAAesR,GAAS3jB,EAAAA,EAAAA,IAAmBjF,EAAQ0F,EAAKvE,GAAIjB,IAAW4U,EAAAA,EAAAA,IAAa9U,EAAQC,QAItGM,EAAAA,EAAAA,IAAiB,cAAc4P,MAAOnQ,EAAQQ,EAASC,KACrD,MAAM,OAAER,GAAWQ,GACb,cAAE6W,GAAkBtX,EACpB0F,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GACzBmqB,EAAM7S,IAAiB8S,EAAAA,EAAAA,IAAcpqB,EAAQC,GAC9CqX,GAAkB5R,GAASykB,SAIXzZ,EAAAA,EAAAA,IAAQ,iBAAkByZ,EAAIhpB,GAAIgpB,EAAItO,eAK3D9Z,EAAAA,EAAAA,KAAUsoB,EAAAA,EAAAA,KAAqBzjB,EAAAA,EAAAA,MAAaujB,EAAIhpB,KAC3CwnB,EAAejjB,EAAM4R,EAAe,cAAUhX,GAAWwU,EAAAA,EAAAA,IAAa9U,EAAQC,SAGrFM,EAAAA,EAAAA,IAAiB,qBAAqB4P,MAAAA,IACpC,MAAM,gBAAEoV,GAAoBvlB,EAAOsqB,cACnC,GAAI/E,IAAmBnb,EAAAA,EAAAA,GAAcpK,EAAOqK,kBAAoBkb,EAhI/B,GAiI/B,OAGF,MAAMniB,QAAesN,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKtN,EACH,OAGF,MAAM,IAAEmE,EAAF,MAAOsJ,GAAUzN,EAEvBpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqBN,EAAO,OACtD7Q,EAAS,IACJA,EACHsqB,cAAe,IACVtqB,EAAOsqB,cACVjL,QAAS9X,EACTge,iBAAiBnb,EAAAA,EAAAA,GAAcpK,EAAOqK,qBAG1CtI,EAAAA,EAAAA,IAAU/B,OAGZO,EAAAA,EAAAA,IAAiB,kBAAkB4P,MAAOnQ,EAAQQ,EAASC,KACzD,MAAM,OACJR,EADI,SACImgB,EADJ,MACc1f,EADd,OACqByX,GACvB1X,EAEJ,IAAI8pB,EAAgBvqB,EAAOglB,WAAWC,WAAW7E,GACjD,IAAsB,IAAlBmK,EAAJ,CAIA,QAAsBjqB,IAAlBiqB,EAA6B,CAC/B,MAAQjS,KAAMkS,EAAR,KAAmB9kB,SAAegL,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE0P,SAAAA,KAAe,GAEnF,GADApgB,GAAS4G,EAAAA,EAAAA,OACJ4jB,IAAc9kB,EAEjB,YADA3D,EAAAA,EAAAA,IAAU+iB,EAAyB9kB,EAAQogB,GAAU,IAIvDpgB,GAASuR,EAAAA,EAAAA,IAASvR,EAAQ,CAAE,CAACwqB,EAAUrpB,IAAKqpB,IAC5CxqB,GAASwR,EAAAA,EAAAA,IAASxR,EAAQ,CAAE,CAAC0F,EAAKvE,IAAKuE,IACvC6kB,EAAgB,CACdppB,GAAIqpB,EAAUrpB,GACdT,MAAO,GACPyX,OAAQ,GACRsS,cAAUnqB,EACVoqB,aAAa,EACbpe,QAAS,IAGXtM,EAAS8kB,EAAyB9kB,EAAQogB,EAAUmK,IACpDxoB,EAAAA,EAAAA,IAAU/B,IAGRU,IAAU6pB,EAAc7pB,OAAU6pB,EAAcG,cAI/ChC,GAAsB,MAgH7BvY,eAAA,GAYG,IAZ4B,SAC7BiQ,EAD6B,cAE7BmK,EAF6B,OAG7BtqB,EAH6B,MAI7BS,EAJ6B,OAK7ByX,GAOC,EACGnY,GAAS4G,EAAAA,EAAAA,MACb,MAAMujB,GAAM1Q,EAAAA,EAAAA,IAAWzZ,EAAQuqB,EAAcppB,IACvCuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKkqB,IAAQzkB,EACX,OAGF,MAAMilB,EAAwBJ,EAAc7pB,QAAUA,EACtDV,EAASklB,EAA2BllB,GAAQ,GAC5CA,EAAS8kB,EAAyB9kB,EAAQogB,EAAU,IAC/CmK,EACH7pB,MAAAA,KACIiqB,GAAyB,CAAExS,YAAQ7X,EAAWgM,QAAS,OAE7DvK,EAAAA,EAAAA,IAAU/B,GAEV,MAAMoD,QAAesN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDyZ,IAAAA,EACAzkB,KAAAA,EACAhF,MAAAA,EACAyX,OAAQwS,OAAwBrqB,EAAY6X,IAGxCyS,EAAmB5qB,EAAOglB,WAAWC,WAAW7E,GAEtD,GADApgB,EAASklB,GAA2Bte,EAAAA,EAAAA,OAAa,IAC5CxD,IAAWwnB,GAAoBlqB,IAAUkqB,EAAiBlqB,MAE7D,YADAqB,EAAAA,EAAAA,IAAU/B,GAIZ,MAAM6qB,EAAa,IAAIC,KAAKF,EAAiBte,SAAW,IAAIjJ,KAAKqL,GAASA,EAAKvN,MACzE4pB,EAAa3nB,EAAOkJ,QAAQhJ,QAAQoL,IAAUmc,EAAW3X,IAAIxE,EAAKvN,MAExEnB,EAAS8kB,EAAyB9kB,EAAQogB,EAAU,IAC/CwK,EACHI,KAAM5nB,EAAO4nB,QACTD,EAAWvlB,QAAU,CAAEylB,UAAW7nB,EAAO6nB,cACzC7nB,EAAOqnB,UAAY,CAAEA,SAAUrnB,EAAOqnB,UAC1CC,YAAatnB,EAAOkJ,QAAQ9G,OAAS,GAAKV,QAAQ1B,EAAOoV,YACzDlM,QAAqC,KAA5Bse,EAAiBzS,QAAiByS,EAAiBzS,SAAW/U,EAAOoV,WAC1EpV,EAAOkJ,SACNse,EAAiBte,SAAW,IAAI2E,OAAO8Z,GAC5C5S,OAAQ4S,EAAWvlB,OAASpC,EAAOoV,WAAa,MAGlDzW,EAAAA,EAAAA,IAAU/B,GAzKRkrB,CAAgB,CACd9K,SAAAA,EACAmK,cAAeA,EACftqB,OAAAA,EACAS,MAAAA,EACAyX,OAAAA,YAKN5X,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,MAAEC,EAAF,WAASspB,EAAT,UAAqBzlB,GAAc9D,EACnCiF,GAAOuD,EAAAA,EAAAA,IAAkBjJ,GAC/B,IAAK0F,EACH,OAEF,MAAMnC,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQ0F,EAAKvE,GAAIoD,GACnD,IAAKhB,EACH,OAGF,MAAM4nB,GAAYf,EAAAA,EAAAA,IAAcpqB,EAAQuD,EAAQ6nB,UAChD,IAAKD,EACH,OAGF,MAAM1mB,EAAQ,IAAG0mB,EAAU/K,YAAY1f,IAEvC,IAAIspB,EAKJ,MAAO,IACFhqB,EACHiqB,gBAAiB,CACfvpB,MAAAA,EACA2qB,YAAaF,EAAU/K,WARzB5f,EAAQ8qB,iBAAiB,CAAErrB,OAAQyF,EAAKvE,GAAIsD,KAAAA,QAahDlE,EAAAA,EAAAA,IAAiB,wBAAyBP,IACjC,IACFA,EACHiqB,qBAAiB3pB,OAIrBC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,GACJU,EADI,QACAoqB,EADA,SACS5U,EADT,YACmBjC,GACrBjU,EACEc,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,IAAuBJ,EAC1B,OAGF,MAAM,OAAElB,EAAF,SAAUC,GAAaqB,EAEvBmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhCO,EAAQwF,gBAAgB,CAAEzB,eAAWjE,IACrCE,EAAQuU,oBAAoB,CAAE9U,OAAAA,EAAQC,SAAAA,EAAU8U,OAAO,KAElDtE,EAAAA,EAAAA,IAAQ,sBAAuB,CAClChL,KAAAA,EACA8lB,SAAUrqB,EACVoqB,QAAAA,EACAjY,YAAYrO,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAC/C2U,QAAQC,EAAAA,EAAAA,IAAa9U,EAAQC,GAC7B0W,SAAAA,EACA8U,aAAc/W,QAIlBnU,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,SAAE2f,GAAa3f,EAErB,IAAI8pB,EAAgBvqB,EAAOglB,WAAWC,WAAW7E,GAE5CmK,IAILA,EAAgB,CACdppB,GAAIopB,EAAcppB,GAClBT,MAAO,GACPyX,OAAQ,GACRsS,cAAUnqB,EACVoqB,aAAa,EACbpe,QAAS,KAGXvK,EAAAA,EAAAA,IAAU+iB,EAAyB9kB,EAAQogB,EAAUmK,SAGvDhqB,EAAAA,EAAAA,IAAiB,YAAY4P,MAAOnQ,EAAQQ,EAASC,KACnD,MAAM,MAAEirB,EAAF,MAASC,GAAUlrB,EAEnB0pB,GAAM1Q,EAAAA,EAAAA,IAAWzZ,EAAQ0rB,GAC1BvB,SAICzZ,EAAAA,EAAAA,IAAQ,WAAY,CACxByZ,IAAAA,EACAyB,WAAYD,O,SC3ThBprB,EAAAA,EAAAA,IAAiB,oBAAoB4P,MAAAA,IACnC,MAAM/M,QAAesN,EAAAA,EAAAA,IAAQ,mBACxBtN,IAILpD,GAAS4G,EAAAA,EAAAA,MACT5G,GAAS6rB,EAAAA,EAAAA,IAAgB7rB,EAAQ,CAAE8rB,YAAa1oB,EAAO0oB,cACvD9rB,GAAS+rB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAEgsB,KAAM5oB,EAAO4oB,QACpDjqB,EAAAA,EAAAA,IAAU/B,QAGZO,EAAAA,EAAAA,IAAiB,iBAAiB4P,MAAOnQ,EAAQQ,EAASC,KACxD,MAAM,gBAAEwrB,EAAF,UAAmBC,GAAczrB,GAEvCsB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAEmd,WAAW,EAAMzN,WAAOpP,KAEhE,MAAM6rB,QAAkBzb,EAAAA,EAAAA,IAAQ,gBAAiBub,IAEjDlqB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,KAAoBnlB,EAAAA,EAAAA,MAAa,CAAEuW,WAAW,KAEpDgP,GACFD,QAIJ3rB,EAAAA,EAAAA,IAAiB,iBAAiB4P,MAAOnQ,EAAQQ,EAASC,KACxD,MAAM,gBAAEwrB,EAAF,UAAmBC,GAAczrB,GAEvCsB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAEmd,WAAW,EAAMzN,WAAOpP,KAEhE,MAAM6rB,QAAkBzb,EAAAA,EAAAA,IAAQ,gBAAiBub,IAEjDlqB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,KAAoBnlB,EAAAA,EAAAA,MAAa,CAAEuW,WAAW,KAEpDgP,GACFD,QAIJ3rB,EAAAA,EAAAA,IAAiB,kBAAkB4P,MAAOnQ,EAAQQ,EAASC,KACzD,MAAM,gBACJwrB,EADI,SACaG,EADb,KACuBJ,EADvB,MAC6BK,EAD7B,UACoCH,GACtCzrB,GAEJsB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAEmd,WAAW,EAAMzN,WAAOpP,KAEhE,MAAM6rB,QAAkBzb,EAAAA,EAAAA,IAAQ,iBAAkBub,EAAiBG,EAAUJ,EAAMK,IAEnFtqB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,KAAoBnlB,EAAAA,EAAAA,MAAa,CAAEuW,WAAW,KAEpDgP,GACFD,QAIJ3rB,EAAAA,EAAAA,IAAiB,uBAAuB4P,MAAOnQ,EAAQQ,EAASC,KAC9D,MAAM,gBACJwrB,EADI,MACaI,EADb,UACoBH,GACtBzrB,GAEJsB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAEmd,WAAW,EAAMzN,WAAOpP,KAEhE,MAAM6rB,QAAkBzb,EAAAA,EAAAA,IAAQ,sBAAuBub,EAAiBI,IAExEtqB,EAAAA,EAAAA,KAAUgqB,EAAAA,EAAAA,KAAoBnlB,EAAAA,EAAAA,MAAa,CAAEuW,WAAW,EAAOmP,4BAAwBhsB,KAEnF6rB,GACFD,QAIJ3rB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,KAAE8rB,GAAS9rB,GAEZiQ,EAAAA,EAAAA,IAAQ,2BAA4B6b,OAG3ChsB,EAAAA,EAAAA,IAAiB,mBAAoBP,IAC5B+rB,EAAAA,EAAAA,IAAoB/rB,EAAQ,CAAE0P,WAAOpP,OCjD9CC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KAC1D,MAAM,YAAE+rB,EAAF,SAAeC,GAAahsB,EAC5BR,GAASysB,EAAAA,EAAAA,IAAoB1sB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAYooB,EAAAA,EAAAA,IAAuB3sB,GACpC0F,GAASnB,GAMhB4L,eAAqCzK,EAAenB,EAAmBioB,EAAkBI,GACvF,MAAMxpB,QAAesN,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhL,KAAAA,EAAMnB,UAAAA,EAAWioB,YAAAA,EAAaI,WAAAA,IAEhC,IAAKxpB,EACH,OAGF,MAAM,GAAEjC,EAAF,gBAAM0rB,GAAoBzpB,EAChC,IAAKjC,EACH,OAGF,IAAInB,GAAS8sB,EAAAA,EAAAA,KAAiBlmB,EAAAA,EAAAA,MAAazF,GACvC0rB,GACF7sB,GAAS+sB,EAAAA,EAAAA,IAAsB/sB,EAAQ6sB,GACvC7sB,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQitB,EAAAA,GAAAA,WAEhCjtB,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQitB,EAAAA,GAAAA,cAElClrB,EAAAA,EAAAA,IAAU/B,GAvBLktB,CAAsBxnB,EAAMnB,EAAWioB,EAAaC,OA0B3DlsB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACP,EAAQQ,EAASC,KACnD,MAAM,KAAEiF,EAAF,UAAQnB,GAAc9D,EACvBiF,GAASnB,GAMhB4L,eAA8BzK,EAAenB,GAC3C,MAAMnB,QAAesN,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhL,KAAAA,EAAMnB,UAAAA,IACvD,IAAKnB,EACH,OAEF,IAAIpD,GAASmtB,EAAAA,EAAAA,KAAevmB,EAAAA,EAAAA,MAAaxD,GACrCgqB,EAAOH,EAAAA,GAAAA,YACPjtB,EAAOsP,QAAQ+d,UACbrtB,EAAOsP,QAAQ+d,QAAQC,0BACxBttB,EAAOsP,QAAQ+d,QAAQE,eACvBvtB,EAAOsP,QAAQ+d,QAAQG,gBACvBxtB,EAAOsP,QAAQ+d,QAAQI,kBAC1BL,EAAOH,EAAAA,GAAAA,cAETjtB,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQotB,IAChCrrB,EAAAA,EAAAA,IAAU/B,GAlBL6pB,CAAenkB,EAAMnB,OAqB5BhE,EAAAA,EAAAA,IAAiB,cAAc,CAACP,EAAQQ,EAASC,KAC/C,MAAM,iBAAEkpB,EAAF,OAAoB1pB,EAApB,UAA4BsE,GAAc9D,EAC1CiF,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACrCsE,GAAcolB,GAAqBjkB,GAO1CyK,eAA0BzK,EAAenB,EAAmBolB,GAC1D,MAAMvmB,QAAesN,EAAAA,EAAAA,IAAQ,aAAchL,EAAMikB,GACjD,IAAKvmB,EACH,OAGF,IAAIpD,GAAS4G,EAAAA,EAAAA,MACb,MAAMrD,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQ0F,EAAKvE,GAAIoD,GACnDvE,GAAS0tB,EAAAA,EAAAA,IAAW1tB,EAAQoD,EAAQG,IACpCxB,EAAAA,EAAAA,IAAU/B,GAZL4pB,CAAWlkB,EAAMnB,EAAWolB,OAenCppB,EAAAA,EAAAA,IAAiB,qBAAsBP,KACrC+B,EAAAA,EAAAA,IAAU,IACL/B,EACHsP,QAAS,IACJtP,EAAOsP,QACVI,WAAOpP,SAKbC,EAAAA,EAAAA,IAAiB,gBAAiBP,KAChC+B,EAAAA,EAAAA,IAAU,IACL/B,EACHsP,QAAS,IACJtP,EAAOsP,QACVqe,aAASrtB,SAKfC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,eAAEmtB,GAAmB5tB,EAAOsP,SAC5B,YAAEue,GAAgBptB,GAClB,KAAEiO,GAASmf,EAEjB,GAAuB,WAAnBD,EAA6B,CAC/B,MAAME,GAAiBC,EAAAA,EAAAA,IAA6B/tB,GACpD,IAAK8tB,EACH,QAgCN3d,eACEzB,EASAof,GAEA,MAAMptB,EC7LD,SAA0BgO,GAC/B,MAAMhO,EAAQ0E,OAAOC,KAAKqJ,GAAMrL,KAAK2qB,GAAO,GAAEA,KAAKtf,EAAKsf,OAAM3pB,KAAK,KACnE,OAAO3D,EAAM8E,OAAS,EAAK,IAAG9E,IAAU,GD2L1ButB,CAAiB,CAC7B,eAAgBvf,EAAKwf,WACrB,kBAAmBxf,EAAKyf,YACxB,iBAAkBzf,EAAK0f,WACvB,YAAa1f,EAAK2f,IAClB,oBAAqB3f,EAAK4f,IAC1B,wBAAyB5f,EAAK6f,UAG1BC,QAAiBC,MAAO,mCAAkC/tB,IAAS,CACvEguB,OAAQ,OACRb,YAAa,cACbc,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASd,OAGvB1qB,QAAeorB,EAASK,OAC9B,GAAIzrB,EAAOsM,MAAO,CAChB,MAAMA,GAAQof,EAAAA,EAAAA,IAAe1rB,EAAOsM,OAC9B1P,GAAS4G,EAAAA,EAAAA,MAUf,YATA7E,EAAAA,EAAAA,IAAU,IACL/B,EACHsP,QAAS,IACJtP,EAAOsP,QACVI,MAAO,IACFA,MAMX,IAAI1P,GAAS+uB,EAAAA,EAAAA,KAAkBnoB,EAAAA,EAAAA,MAAa,CAC1CvF,KAAM+B,EAAO/B,KACbF,GAAIiC,EAAOjC,KAEbnB,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQitB,EAAAA,GAAAA,WAChClrB,EAAAA,EAAAA,IAAU/B,GA/EHgvB,CAAsBtgB,EAAMof,QAC5B,GAAuB,gBAAnBF,EAAkC,CAC3C,MAAMqB,GAAcC,EAAAA,EAAAA,IAA0BlvB,GAC9C,IAAKivB,EACH,QA8EN9e,eACEzB,EAOAugB,GAEA,MAAMpc,EAAS,CACbsc,KAAM,CACJC,OAAQ1gB,EAAKwf,WAAWmB,QAAQ,UAAW,IAC3CC,iBAAkB5gB,EAAKyf,YACvBoB,gBAAiB7gB,EAAK0f,WACtBoB,cAAe9gB,EAAK2f,IAAIgB,QAAQ,UAAW,MAGzCpgB,EAAMwgB,EAAAA,GACR,+DACA,oDAEEjB,QAAiBC,MAAMxf,EAAK,CAChCyf,OAAQ,OACRC,QAAS,CACPe,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBT,GAEpBU,KAAMC,KAAKC,UAAUhd,KAEjBzP,QAAeorB,EAASK,OAE9B,GAAsB,OAAlBzrB,EAAO0sB,OAAiB,CAE1B,MAAMpgB,EAAQ,CAAEyH,YAAa,iBACvBnX,GAAS4G,EAAAA,EAAAA,MAUf,YATA7E,EAAAA,EAAAA,IAAU,IACL/B,EACHsP,QAAS,IACJtP,EAAOsP,QACVI,MAAO,IACFA,MAOX,IAAI1P,GAAS+vB,EAAAA,EAAAA,KAAuBnpB,EAAAA,EAAAA,MAAa,CAC/CvF,KAAM,OACN2uB,MAAO5sB,EAAOsL,KAAKshB,QAErBhwB,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQitB,EAAAA,GAAAA,WAChClrB,EAAAA,EAAAA,IAAU/B,GAlIHiwB,CAA2BvhB,EAAMugB,QAI1C1uB,EAAAA,EAAAA,IAAiB,mBAAmB,CAACP,EAAQQ,EAASC,KACpD,MAAM,iBAAEyvB,EAAF,gBAAoBC,GAAoB1vB,EACxCR,GAASysB,EAAAA,EAAAA,IAAoB1sB,GAC7B0F,EAAOzF,IAAU0F,EAAAA,EAAAA,IAAW3F,EAAQC,GACpCsE,GAAYooB,EAAAA,EAAAA,IAAuB3sB,GACnCowB,GAASC,EAAAA,EAAAA,IAAoBrwB,GAC7BswB,GAAgBC,EAAAA,EAAAA,IAAuBvwB,IACvC,eAAE4tB,GAAmB5tB,EAAOsP,QAC5Bwe,EAAoC,WAAnBF,GACnBG,EAAAA,EAAAA,IAA6B/tB,IAAUkvB,EAAAA,EAAAA,IAA0BlvB,GAChE0F,GAASnB,GAAcupB,GAAmBsC,GAAWxC,GAuH5Dzd,eACEzK,EACAnB,EACAqpB,EACAwC,EACAvC,EACA2C,EACAN,GAMA,IAAe,UAJMxf,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9ChL,KAAAA,EAAMnB,UAAAA,EAAW6rB,OAAAA,EAAQvC,YAAAA,EAAa2C,gBAAAA,EAAiBN,iBAAAA,IAGpC,CACnB,MAAMlwB,GAASwP,EAAAA,EAAAA,KAAa5I,EAAAA,EAAAA,QAC5B7E,EAAAA,EAAAA,KAAU0N,EAAAA,EAAAA,IAAazP,KAlIpBywB,CAAgB/qB,EAAMnB,EAAWqpB,EAAgBwC,EAAQ,CAC5DM,KAAMP,EACNzhB,KAAyB,WAAnBkf,GAA8B+C,EAAAA,EAAAA,IAAwB3wB,IAAU4wB,EAAAA,EAAAA,IAA6B5wB,IAClGswB,EAAeJ,OAmIpB3vB,EAAAA,EAAAA,IAAiB,kBAAkB,SAACP,EAAQQ,GAA0B,IAAjBC,EAAiB,uDAAP,GAC7D,OAAOusB,EAAAA,EAAAA,IAAehtB,EAAQS,EAAQ2sB,MAAQH,EAAAA,GAAAA,kBAGhD1sB,EAAAA,EAAAA,IAAiB,yBAAyB,CAACP,EAAQQ,EAASC,KACnDqpB,EAAAA,EAAAA,IAAsB9pB,EAAQS,K,yBEhTvC,MAEMowB,GAA0B,IACnBC,GAAwB,IACxBC,GAAwB,I,eCmB9B,SAASC,GAA6BhxB,EAAqBixB,GAChE,OAAOA,GAAMjxB,EAAOsN,oBAAsBF,EAAAA,GACtCpN,EAAO+M,mBApBemkB,EAoBuBC,GAAAA,EAAAA,MAAiBC,OAnBhDC,EAAAA,GACTxmB,KAAKymB,IACVzmB,KAAKC,IAAkB,IAAdomB,EAAoBH,IACf,IAAdG,GAIAA,EAAcK,EAAAA,GACT1mB,KAAKymB,IACVzmB,KAAKC,IAAkB,IAAdomB,EAAoBH,IACf,GAAdG,GAIGJ,IAMH,GArBN,IAA4BI,ECQ5B,IAAIM,GAAqB,GAEzBjxB,EAAAA,EAAAA,IAAiB,0BAA0B4P,UACzC,MAAM/M,QAAesN,EAAAA,EAAAA,IAAQ,yBACxBtN,IAKLA,EAAOyF,SAAS4oB,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBvwB,KAAMywB,EAAAA,GAAAA,QAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAW1wB,KAAMywB,EAAAA,GAAAA,YAInE7vB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHkrB,mBAAoB1uB,SAIxB7C,EAAAA,EAAAA,IAAiB,6BAA6B,CAACP,EAAQQ,EAASC,KAC9D,MAAM,MACJ+M,EADI,EACGyjB,EADH,EACMc,EADN,YACSC,EADT,UACsBC,EADtB,WACiCC,GACnCzxB,EAEE0xB,EAAyB,CAC7BhxB,GAAIqwB,KACJY,eAAgB5kB,GAASwkB,EACzBf,EAAGD,GAA6BhxB,EAAQixB,GAlCV,GAkCepmB,KAAKiP,SAClBuY,GAChCN,EAAGA,EApC2B,GAoCvBlnB,KAAKiP,SAAuCuY,GACnDJ,UAAAA,EACAC,WAAAA,GAGF,MAAO,IACFlyB,EACHsyB,wBAAyB,IAAKtyB,EAAOsyB,yBAA2B,GAAKH,QAIzE5xB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,UACJ8D,EADI,OACOtE,EADP,MACeuN,EADf,aACsB+kB,EADtB,YACoCP,GACtCvxB,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAAU8H,GAAUwkB,IAAgB/xB,IAAWD,EAAOsX,gBAItD5G,EAAAA,EAAAA,IAAQ,uBAAwB,CACnChL,KAAAA,EACAnB,UAAAA,EACAiuB,SAAUhlB,IAASilB,EAAAA,EAAAA,IAAqCT,GACxDU,WAAYH,QAIhBhyB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KACxD,MAAM,OACJR,EADI,UACIsE,EADJ,EACe0sB,EADf,EACkBc,GACpBtxB,EACEkyB,GAAWC,EAAAA,EAAAA,IAAsB5yB,EAAQC,GACzCsD,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,GAE7CouB,GAAapvB,KAAWsvB,EAAAA,EAAAA,IAAetvB,IAE5C/C,EAAQsyB,aAAa,CACnB7yB,OAAAA,EACAsE,UAAAA,EACAouB,SAAAA,EACA1B,EAAAA,EACAc,EAAAA,QAIJxxB,EAAAA,EAAAA,IAAiB,gBAAgB,CAACP,EAAQQ,EAASC,KAAY,UAC7D,MAAM,OACJR,GACsBQ,EACxB,IAAI,UAAE8D,GAAc9D,GAEhB,SAAEkyB,GAAalyB,EAEnB,MAAMiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAIsD,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,GAEhD,IAAKmB,IAASnC,EACZ,OAGF,MAAMwvB,EAAoBjuB,QAAQvB,EAAQ4D,aAAe5D,EAAQyvB,UAC3DC,EAA8BF,GAChC1qB,EAAAA,EAAAA,IAA0BrI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACJiD,EAAUwvB,IACN3e,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQgzB,IAClC1vB,EACJgB,GAAmB,QAAP,EAAAhB,SAAA,eAASpC,KAAMoD,EAE3B,UAAIhB,EAAQ2vB,iBAAZ,iBAAI,EAAmB5mB,eAAvB,OAAI,EAA4B6mB,MAAMvb,GAAMA,EAAE+a,WAAaA,GAAY/a,EAAEwb,aACvET,OAAWryB,IAGRoQ,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhL,KAAAA,EAAMnB,UAAAA,EAAWouB,SAAAA,IAEhD,MAAM,eAAEU,GAAmBrzB,EAAOuiB,SAAS+Q,MAiB3C,OAfID,IAAmBE,EAAAA,KACrBvzB,EAAS,IACJA,EACHwzB,gBAAiB,IACXb,EAAW3yB,EAAOwzB,iBAAkBC,EAAAA,EAAAA,IAAKzzB,EAAOwzB,gBAAiB,CAACjvB,OAClEouB,GAAY,CACd,CAACpuB,GAAY,CACXouB,SAAAA,EACApuB,UAAAA,OD1GL,SAA4BvE,EAAqBC,EAAgBsE,EAAmBouB,GACzF,MAAM,UAAEO,IAAc9e,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,IAAc,GAEtE,IAAK2uB,EACH,OAAOlzB,EAIT,IAAIsM,EAAU4mB,EAAU5mB,QAAQjJ,KAAKuU,GAAOA,EAAE+a,WAAaA,EACvD,IACG/a,EACHD,MAAOC,EAAEwb,SAAWxb,EAAED,MAAQC,EAAED,MAAQ,EACxCyb,UAAU,GACPxb,EAAEwb,SAAW,IACbxb,EACHwb,UAAU,EACVzb,MAAOC,EAAED,MAAQ,GACfC,IACHtU,QAAQsU,GAAMA,EAAED,MAAQ,KAEvB,gBAAE+b,GAAoBR,EAE1B,GAAIP,IAAarmB,EAAQ6mB,MAAMvb,GAAMA,EAAE+a,WAAaA,IAAW,CAC7D,MAAM,cAAErb,GAAkBtX,EAE1BsM,EAAU,IAAIA,EAAS,CACrBqmB,SAAAA,EACAS,UAAU,EACVzb,MAAO,IAGLub,EAAUS,aACZD,EAAkB,IAAKA,GAAmB,GAAK,CAC7ChnB,OAAQ4K,EACRqb,SAAAA,KAKN,OAAOte,EAAAA,GAAAA,IAAkBrU,EAAQC,EAAQsE,EAAW,CAClD2uB,UAAW,IACNA,EACH5mB,QAAAA,EACAonB,gBAAAA,KCsEGE,CAAmB5zB,EAAQC,EAAQsE,EAAWouB,OAGvDpyB,EAAAA,EAAAA,IAAiB,YAAaP,IACrB,IACFA,EACHwzB,gBAAiB,QAIrBjzB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACP,EAAQQ,EAASC,KAAY,MACpE,MAAM,UAAE8D,EAAF,SAAaouB,GAAalyB,GAC1B,eAAE4yB,GAAmBrzB,EAAOuiB,SAAS+Q,MAE3C,OAAID,IAAmBE,EAAAA,KAEnB,UAAAvzB,EAAOwzB,gBAAgBjvB,UAAvB,eAAmCouB,YAAaA,EAFD3yB,EAM5C,IACFA,EACHwzB,gBAAiB,IACXb,EAAW3yB,EAAOwzB,iBAAkBC,EAAAA,EAAAA,IAAKzzB,EAAOwzB,gBAAiB,CAACjvB,OAClEouB,GAAY,CACd,CAACpuB,GAAY,CACXouB,SAAAA,EACApuB,UAAAA,UAOVhE,EAAAA,EAAAA,IAAiB,sBAAsB,CAACP,EAAQQ,EAASC,KAAY,MACnE,MAAM,UAAE8D,EAAF,SAAaouB,GAAalyB,EAEhC,OAAI,UAAAT,EAAOwzB,gBAAgBjvB,UAAvB,eAAmCouB,YAAaA,EAC3C3yB,EAGF,IACFA,EACHwzB,iBAAiBC,EAAAA,EAAAA,IAAKzzB,EAAOwzB,gBAAiB,CAACjvB,SAInDhE,EAAAA,EAAAA,IAAiB,sBAAsB4P,MAAOnQ,EAAQQ,EAASC,KAC7D,MAAM,SAAEkyB,GAAalyB,QAEAiQ,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEiiB,SAAAA,MAKrD5wB,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACHitB,UAAW,IACN7zB,EAAO6zB,UACVC,gBAAiBnB,SAKvBpyB,EAAAA,EAAAA,IAAiB,8BAA8B,CAACP,EAAQQ,EAASC,KAAY,MAC3E,MAAM,GAAEU,GAAOV,EAEf,MAAO,IACFT,EACHsyB,wBAAuB,UAAEtyB,EAAOsyB,+BAAT,aAAE,EAAgChvB,QAAQsU,GAAMA,EAAEzW,KAAOA,SAIpFZ,EAAAA,EAAAA,IAAiB,gBAAgB4P,MAAOnQ,EAAQQ,EAASC,KAAY,UACnE,MAAM,OAAER,EAAF,UAAUsE,EAAV,SAAqBouB,GAAalyB,EAClCiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BsD,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,GAClD,IAAKmB,IAASnC,EACZ,OAGF,MAAM4U,EAAM,UAAG5U,EAAQwwB,gBAAX,aAAG,EAAkBvb,WAC3BpV,QAAesN,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDiiB,SAAAA,EACAjtB,KAAAA,EACAnB,UAAAA,EACA4T,OAAAA,IAGF,IAAK/U,EACH,OAGFpD,GAAS4G,EAAAA,EAAAA,MAET,UAAIxD,EAAOyN,aAAX,OAAI,EAAcrL,SAChBxF,GAASuR,EAAAA,EAAAA,IAASvR,GAAQmR,EAAAA,EAAAA,IAAqB/N,EAAOyN,MAAO,QAG/D,MAAM,WAAE2H,EAAF,MAAcb,EAAd,UAAqBub,GAAc9vB,GAEzCrB,EAAAA,EAAAA,KAAUsS,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQsE,EAAW,CACrDwvB,SAAU,CACRvb,WAAAA,EACAb,MAAAA,EACAub,UAAW,KACL,UAAA3vB,EAAQwwB,gBAAR,eAAkBb,YAAa,MAChCA,WAMX3yB,EAAAA,EAAAA,IAAiB,wBAAwB,CAACP,EAAQQ,EAASC,KACzD,MAAM,IAAE8G,EAAF,OAAOtH,GAAWQ,EAElBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE3ByF,IAILgL,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnJ,IAAAA,EAAK7B,KAAAA,QAG1CnF,EAAAA,EAAAA,IAAiB,gCAAgC,CAACP,EAAQQ,EAASC,KAAY,MAC7E,MAAM,OACJR,EADI,SACIuyB,EADJ,EACcvB,EADd,EACiBc,EADjB,UACoBE,EADpB,WAC+BC,EAD/B,GAC2C/wB,GAC7CV,EAEEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,GAAKyF,GAAQ,UAAC1F,EAAOsyB,+BAAR,OAAC,EAAgCa,MAAMvb,GAAMA,EAAEzW,KAAOA,KAAOlB,IAAWD,EAAOsX,cAM5F,OAFA5G,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEhL,KAAAA,EAAM8sB,SAAAA,IAEzC,IACFxyB,EACHsyB,wBAAyBtyB,EAAOsyB,wBAAwBjvB,KAAK8uB,GACvDA,EAAuBhxB,KAAOA,EACzB,IACFgxB,EACHlB,EAAGD,GAA6BhxB,EAAQixB,GACxCc,EAAAA,EACAE,UAAAA,EACAC,WAAAA,GAGGC,SCnSb5xB,EAAAA,EAAAA,IAAiB,kBAAkB4P,MAAOnQ,EAAQQ,EAASC,KAAY,MACrE,MAAM,OAAER,EAAF,QAAU+zB,GAAYvzB,EACtBiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAMgU,SACT,OAGF,MAAMtW,QAAesN,EAAAA,EAAAA,IAAQsjB,EAAU,uBAAyB,yBAA0B,CAAEtuB,KAAAA,IAC5F,GAAKtC,EAAL,CAMA,GAFApD,GAAS4G,EAAAA,EAAAA,MAET,UAAKxD,EAAgC6wB,yBAArC,OAAI,EAAoDzuB,OAAQ,CAC9D,MAAM7D,GAAWwB,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE3CmD,EAAgC6wB,kBAAqB7wB,EAAgC6wB,kBACnF5wB,KAAKE,IAAD,IAAmBA,KAAY5B,EAAS4B,EAAQ2wB,YAGzDnyB,EAAAA,EAAAA,KAAUoyB,EAAAA,EAAAA,IAAiBn0B,EAAQC,EAAQmD,SAG7C7C,EAAAA,EAAAA,IAAiB,4BAA4B4P,MAAOnQ,EAAQQ,EAASC,KACnE,MAAM,OACJR,EADI,MACI+vB,EADJ,KACWoE,EADX,aACiBC,GACnB5zB,EACEiF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,GAAKyF,MAAAA,IAAAA,EAAMgU,SACT,OAGF,MAAM4a,EAAO5uB,EAAKgU,SAAU6a,eACtBnxB,QAAesN,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEsf,MAAAA,EAAOsE,KAAAA,EAAMD,aAAAA,IAEpEjxB,IAILrB,EAAAA,EAAAA,KAAUyyB,EAAAA,EAAAA,KAAsB5tB,EAAAA,EAAAA,MAAa3G,EAAQm0B,EAAMhxB,O,uBC/CtD,SAASqxB,GAA4BC,EAAWC,GACrD,MAAMC,SAAeF,EAErB,GAAIE,WADiBD,EAEnB,OAAO,EAGT,GAAc,WAAVC,EACF,OAAOF,IAAWC,EAGpB,MAAME,EAAWC,MAAMC,QAAQL,GAG/B,GAAIG,IAFaC,MAAMC,QAAQJ,GAG7B,OAAO,EAGT,GAAIE,EAAU,CACZ,MAAMG,EAASN,EACTO,EAASN,EAEf,OAAIK,EAAOxvB,SAAWyvB,EAAOzvB,QAItBwvB,EAAOE,OAAM,CAACC,EAAS9iB,IAAMoiB,GAAaU,EAASF,EAAO5iB,MAGnE,MAAM+iB,EAAUV,EACVW,EAAUV,EAGhB,OAFcvvB,OAAOC,KAAK+vB,GAEbF,OAAOI,GAASb,GAAaW,EAAQE,GAAOD,EAAQC,OCNnE/0B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAeH,OAdKA,EAAO4U,oBAAsBC,EAAAA,EAAAA,GAAmBx1B,EAAQ2gB,EAAOxf,KAElEX,EAAQi1B,gBAGV1zB,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAOxf,GAAIwf,EAAOjb,KAAMib,EAAO+U,uBAExD/U,EAAOjb,KAAKvE,KACdw0B,EAAAA,GAAAA,IAA0B,CACxB11B,OAAQ0gB,EAAOjb,KAAKvE,GACpB2W,uBAAwB6I,EAAOjb,KAAKoS,0BAO1C,IAAK,iBAAkB,CACrB,MAAMkL,GAAW4S,EAAAA,EAAAA,IAAmB51B,EAAQ2gB,EAAOxf,IACnD,IAAK6hB,EACH,OAGFhjB,GAAS61B,EAAAA,EAAAA,IAAkB71B,EAAQgjB,EAAU,CAACrC,EAAOxf,KACrDnB,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAOxf,GAAI,CAAE20B,aAAa,KACtD/zB,EAAAA,EAAAA,IAAU/B,GAEV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ2gB,EAAOxf,IAKvC,YAJIuE,GACFlF,EAAQu1B,kBAAkB,CAAE91B,OAAQyF,EAAKvE,MAM7C,IAAK,kBACH,OAAO60B,EAAAA,EAAAA,IAAUh2B,EAAQ2gB,EAAOxf,IAGlC,IAAK,kBACH,OAAOkV,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAOxf,GAAIwf,EAAOjb,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEvE,EAAF,aAAM80B,GAAiBtV,EAW7B,OAVA5e,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQmB,EAAI,CAAE80B,aAAAA,UAEnCtvB,YAAW,KACT3G,GAAS4G,EAAAA,EAAAA,MACT,MAAMlB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQmB,GAC5BuE,GAAQuwB,GAAgBvwB,EAAKuwB,cAAgBvwB,EAAKuwB,aAAajW,YAAciW,EAAajW,YAC5Fje,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQmB,EAAI,CAAE80B,kBAAc31B,OA1DzB,KAiE9B,IAAK,aAAc,CACjB,MAAM,QAAEiD,GAAYod,GACZ1gB,OAAQsjB,EAAV,SAAyBrjB,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GAEvG,GAAIuD,EAAQ6nB,WAAaprB,EAAOsX,gBAAkB/T,EAAQ2yB,gBACxD,OAGF,MAAMxwB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ2gB,EAAO1gB,QACvC,IAAKyF,EACH,OA2BF,MAvBsB,WAApBwB,GACGhH,IAAakB,EAAAA,IACbuf,EAAO1gB,SAAWsjB,EAIrB5c,YAAW,KACTnG,EAAQu1B,kBAAkB,CAAE91B,OAAQ0gB,EAAO1gB,WApFnB,OAuF1B8B,EAAAA,EAAAA,KAAUsU,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAO1gB,OAAQ,CAC1CwX,YAAa/R,EAAK+R,YAAc/R,EAAK+R,YAAc,EAAI,KACnDkJ,EAAOpd,QAAQ4yB,kBAAoB,CACrCC,oBAAqB1wB,EAAK0wB,oBAAsB1wB,EAAK0wB,oBAAsB,EAAI,WAKrFC,EAAAA,GAAAA,IAAmB,CACjB3wB,KAAAA,EACAnC,QAAAA,IAMJ,IAAK,gBAAiB,CACpB,MAAM,QAAEA,GAAYod,EACdjb,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ2gB,EAAO1gB,QACvC,IAAKyF,EACH,OAWF,aARI4wB,EAAAA,EAAAA,IAAyB/yB,KAC3B8yB,EAAAA,GAAAA,IAAmB,CACjB3wB,KAAAA,EACAnC,QAAAA,EACAgzB,YAAY,KAOlB,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEhvB,EAAF,cAAOivB,GAAkB7V,EAC/B,IAAuC,IAAnC6V,EAAcL,iBAChB,OAaF,OAVA5uB,EAAIsB,SAAS1H,IACX,MAAMlB,EAAU,cAAe0gB,EAASA,EAAO8V,WAAYC,EAAAA,EAAAA,IAAsB12B,EAAQmB,GACnFuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC5ByF,MAAAA,GAAAA,EAAM0wB,sBACRp2B,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAClCm2B,oBAAqB1wB,EAAK0wB,oBAAsB,QAK/Cp2B,EAGT,IAAK,qBAAsB,CACzB,MAAM,SAAE0Z,GAAaiH,EACfwB,EAAaniB,EAAO4L,MAAMsF,KAAKyP,EAAOxf,IAC5C,IAAKghB,EACH,OAGF,OAAO9L,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAOxf,GAAI,CACnCuY,SAAU,IACLyI,EAAWzI,YACXA,KAKT,IAAK,sBAAuB,CAC1B,MAAM,IAAEnS,EAAF,SAAOovB,GAAahW,EACpBqC,EAAW2T,IAAaC,EAAAA,GAAqB,WAAa,SAEhE,MAAO,IACF52B,EACH4L,MAAO,IACF5L,EAAO4L,MACVirB,iBAAkB,IACb72B,EAAO4L,MAAMirB,iBAChB,CAAC7T,GAAWzb,EAAI/B,OAAS+B,OAAMjH,KAMvC,IAAK,mBAAoB,CACvB,MAAM,GAAEa,EAAF,SAAM21B,GAAanW,EACnBqC,GAAW4S,EAAAA,EAAAA,IAAmB51B,EAAQmB,GAC5C,IAAK6hB,EACH,OAGF,MAAQ,CAACA,GAAW6T,GAAqB72B,EAAO4L,MAAMirB,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoBhvB,SAAS5G,GAAK,CAK5C,GAAiB,WAAb6hB,GAAyB+T,EAAoBvxB,QAAUwxB,EAAAA,GAAyB,CAClF,MAAMC,EAAUj3B,EAAO4L,MAAMqrB,QAAQC,OACrCH,EAAsBA,EAAoBzzB,QAAQ6zB,GAAaF,GAAWA,EAAQlvB,SAASovB,KAG7FJ,EAAsB,CAAC51B,KAAO41B,SAX9BA,EAAsBA,EAAoBzzB,QAAQ6zB,GAAaA,IAAah2B,IAc9E,MAAO,IACFnB,EACH4L,MAAO,IACF5L,EAAO4L,MACVirB,iBAAkB,IACb72B,EAAO4L,MAAMirB,iBAChB,CAAC7T,GAAW+T,EAAoBvxB,OAASuxB,OAAsBz2B,KAMvE,IAAK,qBAAsB,CACzB,MAAM,GAAEa,EAAF,SAAMw1B,GAAahW,EAEzB,OAAOyW,EAAAA,EAAAA,IAAmBp3B,EAAQmB,EAAIw1B,GAGxC,IAAK,mBAAoB,CACvB,MAAM,GAAEx1B,EAAF,OAAMk2B,GAAW1W,GACfzP,KAAMomB,EAAR,WAAyBh1B,GAAetC,EAAOu3B,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAACn2B,GAAKk2B,IAC5BI,EAAAA,EAAAA,IACAH,EACAlyB,OAAOC,KAAKiyB,GAAiBj0B,IAAIoC,QAAQnC,QAAQqzB,GAAaA,IAAax1B,KAGzEu2B,EAAgBL,EAClB/0B,GAAcA,EAAWyF,SAAS5G,GAAMmB,EAAa,IAAKA,GAAc,GAAKnB,GAC7EmB,EAAaA,EAAWgB,QAAQq0B,GAAcA,IAAcx2B,SAAMb,EAEtE,MAAO,IACFN,EACHu3B,YAAa,IACRv3B,EAAOu3B,YACVrmB,KAAMsmB,EACNl1B,WAAYo1B,IAKlB,IAAK,yBAA0B,CAC7B,MAAM,WAAEp1B,GAAeqe,EAEvB,MAAO,IACF3gB,EACHu3B,YAAa,IACRv3B,EAAOu3B,YACVj1B,WAAAA,IAKN,IAAK,+BAAgC,CACnC,MAAM,QAAEs1B,GAAYjX,EAEpB,MAAO,IACF3gB,EACHu3B,YAAa,IACRv3B,EAAOu3B,YACVM,YAAaD,IAKnB,IAAK,oBAAqB,OACxB,MAAMzV,EAAaniB,EAAO4L,MAAMsF,KAAKyP,EAAOxf,KACtC,gBAAE22B,EAAF,YAAmBC,EAAnB,gBAAgCC,GAAoBrX,EAC1D,IAAKwB,EACH,OAGF,IAAI8V,GAAe,EACfC,EAAU,UAAA/V,EAAWzI,gBAAX,SAAqBwe,QAC/B,IAAI/V,EAAWzI,SAASwe,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQ1yB,QACL0yB,EAAQ/E,MAAMpa,GAAMA,EAAErM,SAAWqrB,EAAYrrB,WAEjDwrB,EAAQj0B,KAAK8zB,GACbE,GAAe,QAEZ,GAAIC,EAAQ1yB,QAAUwyB,EAAiB,CAC5C,MAAMG,EAAcD,EAAQ3pB,WAAWwK,GAAMA,EAAErM,SAAWsrB,IACtDG,GAAe,IACjBD,EAAQnuB,MAAMouB,EAAa,GAC3BF,GAAe,GAInB,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQ50B,QAAO,QAAC,QAAE+0B,EAAF,QAAWC,GAAZ,SAA0BD,GAAWC,KAGzE,OAAOjiB,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAOxf,GAAI,CACnCo3B,aAAcL,EAAQ1yB,OACtBkU,SAAU,IACLyI,EAAWzI,SACdwe,QAAAA,EACAE,aAAAA,KAKN,OAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEn4B,EAAF,IAAUsH,GAAQoZ,EAClBjb,EAAO1F,EAAO4L,MAAMsF,KAAKjR,GAE/B,OAAIyF,MAAAA,GAAAA,EAAMyhB,QACD9Q,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAChCknB,OAAQzhB,EAAKyhB,OAAO7jB,QAAQqhB,IAAWpd,EAAIQ,SAAS4c,EAAMxjB,aAI9D,EAGF,IAAK,eAAgB,CACnB,MAAM,OACJlB,EADI,cACIu4B,EADJ,KACmBruB,EADnB,aACyBnF,GAC3B2b,EAEJ,IADa3gB,EAAO4L,MAAMsF,KAAKjR,GAE7B,OAMF,OAHAD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,QAASo3B,GACrEx4B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB4D,GAC5EhF,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAEqW,UAAWnM,IAInD,IAAK,aAAc,CACjB,MAAM,KAAEuE,GAASiS,EAIjB,YAFAngB,EAAQwoB,WAAW,CAAEta,KAAAA,IAKvB,IAAK,4BAA6B,CAChC,MAAM,OAAEzO,EAAF,gBAAUqiB,EAAV,mBAA2BD,GAAuB1B,EAClDjb,EAAO1F,EAAO4L,MAAMsF,KAAKjR,GAC/B,IAAKyF,EACH,OAGF1F,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAClCyZ,SAAU,IACLhU,EAAKgU,SACR4I,gBAAAA,EACAD,mBAAAA,MAGJtgB,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQi4B,qBAAqB,CAAEx4B,OAAAA,SClVrC,MAAMy4B,GAAkB,IAgdxB,SAASC,GACP34B,EAAqBC,EAAgBkB,EAAYoC,GACjD,IAD+Eq1B,EAC/E,wDAEA,MAAMC,EAAiBD,GACnBxf,EAAAA,EAAAA,IAAuBpZ,EAAQC,EAAQkB,IACvCiT,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GACtC,GAAI03B,GAAkBt1B,EAAQ+G,QAAS,CACrC,MAAM,MACJqa,EADI,MACGmU,EADH,QACUlrB,EADV,SACmBmrB,IACrBC,EAAAA,EAAAA,IAAkBH,GAClBlU,GAASphB,EAAQ+G,QAAQqa,OAC3BphB,EAAQ+G,QAAQqa,MAAMsU,QAAUtU,EAAMsU,QACtC11B,EAAQ+G,QAAQqa,MAAMuU,UAAYvU,EAAMuU,WAC/BJ,GAASv1B,EAAQ+G,QAAQwuB,MAClCv1B,EAAQ+G,QAAQwuB,MAAMG,QAAUH,EAAMG,QAC7BrrB,GAAWrK,EAAQ+G,QAAQsD,QACpCrK,EAAQ+G,QAAQsD,QAAQurB,oBAAsBvrB,EAAQurB,oBAC7CJ,GAAYx1B,EAAQ+G,QAAQyuB,WACrCx1B,EAAQ+G,QAAQyuB,SAASK,eAAiBL,EAASK,gBAIvD,OAAOR,GACHS,EAAAA,EAAAA,IAAuBr5B,EAAQC,EAAQkB,EAAIoC,IAC3C8Q,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQkB,EAAIoC,GAG5C,SAAS+1B,GAAmBt5B,EAAqBQ,EAAwB+C,EAAqBiR,GAC5F,MAAM,OAAEvU,GAAWsD,GAEb,WAAEsC,IAAe0zB,EAAAA,EAAAA,IAAsBv5B,EAAQC,EAAQsD,IAAY,GAEzE,IAAKsC,GAActC,EAAQ+Q,iBAAkB,CAC3C,MAAMklB,GAAgBplB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsD,EAAQ+Q,kBAC5DklB,EACFx5B,GAASyU,EAAAA,EAAAA,IAAuCzU,EAAQw5B,EAAev5B,EAAQsD,EAAQpC,GAAIqT,IAE3FZ,EAAAA,EAAAA,KAAU,KACRpT,EAAQ+T,YAAY,CAClBtU,OAAAA,EACAsE,UAAWhB,EAAQ+Q,iBACnBL,aAAc,CACZO,WAAAA,EACAzO,cAAexC,EAAQpC,SAOjC,OAAOnB,EAGT,SAASy5B,GAA2Bz5B,EAAqBQ,EAAwB+C,GAC/E,MAAM,GAAEpC,EAAF,OAAMlB,GAAWsD,GAEjB,WAAEsC,EAAF,eAAc6zB,IAAmBH,EAAAA,EAAAA,IAAsBv5B,EAAQC,EAAQsD,IAAY,GAEnFmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B05B,GAAwBj0B,MAAAA,OAAA,EAAAA,EAAM+R,gBAAgB9F,EAAAA,EAAAA,IAAgB3R,EAAQC,EAAQmB,EAAAA,IAwBpF,GAtBApB,EAASs5B,GAAmBt5B,EAAQQ,EAAS+C,GAEzCsC,KACE6zB,IAAmB7G,EAAAA,EAAAA,IAAetvB,KACpCvD,GAASsR,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQ4F,EAAW3F,SAAU,CAACiB,KAE3D+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQ4F,EAAW3F,YACpDF,GAAS45B,EAAAA,EAAAA,IAAc55B,EAAQC,EAAQ4F,EAAW3F,SAAUiB,GAEvDu4B,IACH15B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,iBAAkBqD,EAAQpC,OAKjGnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQ4F,EAAW3F,SAAU,aAAc,IAC1E2F,EACHE,cAAexC,EAAQpC,GACvB04B,cAAeh0B,EAAWg0B,cAAgB,KAI1CF,EACF,OAAO35B,EAKT,GAFAA,GAASsR,EAAAA,EAAAA,IAAgBtR,EAAQC,EAAQmB,EAAAA,GAAgB,CAACD,KAEtD+D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQmB,EAAAA,IAAiB,CAE1D,MAAM04B,GAAgBtiB,EAAAA,EAAAA,IAAoBxX,EAAQC,EAAQmB,EAAAA,IACpD24B,GAAkBH,EAAAA,EAAAA,IAAc55B,EAAQC,EAAQmB,EAAAA,GAAgBD,GAChE6Q,GAAiBrN,EAAAA,EAAAA,IAAkBo1B,EAAiB95B,EAAQmB,EAAAA,IAE7D04B,IAAiB9nB,EAAgBjK,SAAS+xB,KAC7C95B,EAAS+5B,GAIb,OAAO/5B,EAGT,SAASg6B,GACPh6B,EACAC,EACAsD,GAEA,UADA02B,EACA,wDACA,MAAM,MAAEruB,GAAU5L,EACZk6B,EAAkB,UAAGtuB,EAAMsF,KAAKjR,UAAd,aAAG,EAAoB2F,YAE/C,OAAIs0B,GAAuBD,GAEvBC,EAAmB/4B,KAAOoC,EAAQpC,IAAM+4B,EAAmB/4B,KAAOoC,EAAQ0S,iBACvE1S,EAAQpC,GAAK+4B,EAAmB/4B,IAOhCkV,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAE2F,YAAarC,IAJtCvD,EAOb,SAASm6B,GAAgBn6B,EAAqBC,GAC5C,MAAMiR,GAAO/N,EAAAA,EAAAA,IAAmBnD,EAAQC,GAClCyR,GAAYC,EAAAA,EAAAA,IAAgB3R,EAAQC,EAAQmB,EAAAA,IAElD,IAAK8P,IAASQ,EACZ,OAGF,IAAIW,EAAIX,EAAUlM,OAClB,KAAO6M,KAAK,CACV,MAAM9O,EAAU2N,EAAKQ,EAAUW,IAC/B,IAAK9O,EAAQiR,WACX,OAAOjR,GAOb,SAAS62B,GAAen6B,EAA4BsH,EAAe/G,EAAwBR,GAGzF,GAAIC,EAAQ,CACVsH,EAAIsB,SAAS1H,IAKX,MAAMk5B,EAAiBF,GAJvBn6B,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQkB,EAAI,CAC7CqT,YAAY,IAGiCvU,GAC3Co6B,IACFr6B,EAASg6B,GAAsBh6B,EAAQC,EAAQo6B,GAAgB,QAInEt4B,EAAAA,EAAAA,IAAU/B,GAEVQ,EAAQu1B,kBAAkB,CAAE91B,OAAAA,IAE5B,MAAMq6B,EAA8B,GA0BpC,OAxBA/yB,EAAIsB,SAAS1H,IACX,MAAMoC,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GAClD,IAAKoC,EACH,OAGFvD,EAASs5B,GAAmBt5B,EAAQQ,EAAS+C,GAAS,GAEtD,MAAM,WAAEsC,IAAe0zB,EAAAA,EAAAA,IAAsBv5B,EAAQC,EAAQsD,IAAY,GACrEsC,GACFy0B,EAAkBr2B,KAAK4B,EAAW3F,cAItC6B,EAAAA,EAAAA,IAAU/B,QAEV2G,YAAW,MACT5E,EAAAA,EAAAA,KAAUw4B,EAAAA,EAAAA,KAAmB3zB,EAAAA,EAAAA,MAAa3G,EAAQsH,KAElD8Q,EAAAA,EAAAA,IAAOiiB,GAAmBzxB,SAAS3I,IACjCM,EAAQg6B,wBAAwB,CAAEv6B,OAAAA,EAAQC,SAAAA,SAE3Cw4B,IAOL,MAAM+B,EAA6B,GAEnClzB,EAAIsB,SAAS1H,IACX,MAAMu5B,GAAkBhE,EAAAA,EAAAA,IAAsB12B,EAAQmB,GACtD,GAAIu5B,EAAiB,CACnBD,EAAiBx2B,KAAKy2B,GAMtB,MAAML,EAAiBF,GAJvBn6B,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQ06B,EAAiBv5B,EAAI,CACtDqT,YAAY,IAGiCkmB,GAC3CL,IACFr6B,EAASg6B,GAAsBh6B,EAAQ06B,EAAiBL,GAAgB,IAG1E1zB,YAAW,MACT5E,EAAAA,EAAAA,KAAUw4B,EAAAA,EAAAA,KAAmB3zB,EAAAA,EAAAA,MAAa8zB,EAAiB,CAACv5B,OAC3Du3B,SAIP32B,EAAAA,EAAAA,IAAU/B,IAEVqY,EAAAA,EAAAA,IAAOoiB,GAAkB5xB,SAAS1H,IAChCX,EAAQu1B,kBAAkB,CAAE91B,OAAQkB,QA1qBxCZ,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJ1gB,EADI,GACIkB,EADJ,QACQoC,EADR,iBACiBo3B,GACnBha,EAEJ3gB,EAASy5B,GADTz5B,EAAS24B,GAAqB34B,EAAQC,EAAQkB,EAAIoC,GACN/C,EAAS+C,GAEjDA,EAAQsC,aACV7F,GAAS46B,EAAAA,EAAAA,IACP56B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,cAIZ9D,EAAAA,EAAAA,IAAU/B,GAEV,MAAM66B,GAAazmB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GAErD,IAAI25B,EAAAA,EAAAA,IAAoC96B,EAAQC,EAAQsD,GAAwB,OAC9E,GAAIA,EAAQkH,aAAc,UAAElH,EAAQ+G,eAAV,QAAE,EAAiBwC,QAAS,CACpD,MAAMvL,GAAqBpB,EAAAA,EAAAA,IAAyBH,GAChDuB,GAEFf,EAAQyF,aAAa,CACnBhG,OAAAA,EACAC,SAAUqB,EAAmBrB,SAC7BqE,UAAWhB,EAAQpC,GACnB0F,aAAa,EACbS,qBAAqB,IAK3B,MAAM,WAAEzB,IAAe0zB,EAAAA,EAAAA,IAAsBv5B,EAAQC,EAAQsD,IAA0B,GACnFsC,GACFrF,EAAQg6B,wBAAwB,CAAEv6B,OAAAA,EAAQC,SAAU2F,EAAW3F,YAI5D2yB,EAAAA,EAAAA,IAAetvB,IAClBoD,YAAW,KACT,IAAIo0B,GAAgBn0B,EAAAA,EAAAA,MAChB+zB,IACFI,GAAgBv5B,EAAAA,EAAAA,IAAmBu5B,EAAe96B,EAAQmB,EAAAA,GAAgB,eAAgBD,KAE5FY,EAAAA,EAAAA,IAAUi4B,GAAsBe,EAAe96B,EAAQ46B,MACtDnC,SAGL32B,EAAAA,EAAAA,IAAUi4B,IAAsBpzB,EAAAA,EAAAA,MAAa3G,EAAQ46B,KAIlDrF,EAAAA,EAAAA,GAAmBx1B,EAAQC,IAC9BO,EAAQi1B,eAGV,MAGF,IAAK,8BAA+B,OAClC,MAAQx1B,OAAQsjB,IAAkBpjB,EAAAA,EAAAA,IAAyBH,IAAW,GAEtE,GAAIujB,IAAkB5C,EAAOxf,GAAI,OACjC,MAAMoC,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQujB,EAAe5C,EAAOpc,WAEhE,IAAKhB,EAAS,OAGd,IAAIy3B,EAAAA,EAAAA,IAAez3B,KAAaod,EAAOnT,MAAO,OAE9C,MAAMytB,GAAaC,EAAAA,EAAAA,IAAyBl7B,EAAQ2gB,EAAOnT,OAE3DxN,EAAS,IACJA,EACHsyB,wBAAyB,IAAKtyB,EAAOsyB,yBAA2B,GAAK,CACnEnxB,IAAI,UAAAnB,EAAOsyB,+BAAP,eAAgC9sB,SAAU,EAC9C4sB,eAAgB6I,GAAaE,EAAAA,EAAAA,IAA+BF,GAActa,EAAOnT,MACjFjJ,UAAWoc,EAAOpc,cAItBxC,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAYod,EAEhC3gB,EAAS24B,GAAqB34B,EAAQC,EAAQkB,EAAIoC,GAAS,GAE3D,MAAM63B,GAAeC,EAAAA,EAAAA,IAAmBr7B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,gBAAgBiX,EAAAA,EAAAA,IAAO,IAAI+iB,EAAcj6B,MAErGY,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,gBAAiB,SACpB,MAAM,OAAEC,EAAF,GAAUkB,EAAV,QAAcoC,GAAYod,EAGhC,KADuBvM,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GAEvD,OAGFnB,EAAS24B,GAAqB34B,EAAQC,EAAQkB,EAAIoC,GAElD,MAAMs3B,GAAazmB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GACjDoC,EAAQsC,aACV7F,GAAS46B,EAAAA,EAAAA,IACP56B,EACAuD,EAAQsC,WAAW5F,OACnBsD,EAAQsC,WAAW3F,SACnBqD,EAAQsC,aAGZ7F,EAASg6B,GAAsBh6B,EAAQC,EAAQ46B,IAE/C94B,EAAAA,EAAAA,IAAU/B,GAIV,MAAM0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAE9ByF,IACInC,EAAQkH,aACT,UAAA/E,EAAKE,mBAAL,eAAkBzE,MAAOoC,EAAQpC,KACjCm6B,EAAAA,EAAAA,IAAoBt7B,EAAQ0F,KAC5Bo1B,EAAAA,EAAAA,IAAoC96B,EAAQC,EAAQsD,KACpD2B,EAAAA,EAAAA,IAAuBlF,EAAQC,GAAQ,UAAAsD,EAAQsC,kBAAR,eAAoB3F,WAAYkB,EAAAA,KAE1EZ,EAAQyG,mBAGV,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEhH,EAAF,GAAUkB,EAAV,QAAcoC,GAAYod,EAGhC,KADuBvH,EAAAA,EAAAA,IAAuBpZ,EAAQC,EAAQkB,GAE5D,OAGFnB,EAAS24B,GAAqB34B,EAAQC,EAAQkB,EAAIoC,GAAS,GAC3D,MAAMgE,EAAMnC,OAAOC,MAAKk2B,EAAAA,EAAAA,IAAwBv7B,EAAQC,IAAW,IAAIoD,IAAIoC,QAAQ/B,MAAK,CAACkV,EAAGC,IAAMA,EAAID,IACtG5Y,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBmG,IAC5ExF,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,6BAA8B,CACjC,MAAM,OAAEC,EAAF,QAAUiO,EAAV,QAAmB3K,GAAYod,EAErC3gB,EAASy5B,GAA2Bz5B,EAAQQ,EAAS+C,GAErD,MAAMs1B,GAAiBzkB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQiO,GAEzDlO,GAASu6B,EAAAA,EAAAA,IAAmBv6B,EAAQC,EAAQ,CAACiO,IAGzC3K,EAAQq1B,cACV54B,GAASw7B,EAAAA,EAAAA,IAA4Bx7B,EAAQC,EAAQ,CAACiO,KAGxDlO,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQsD,EAAQpC,GAAI,IAClD03B,KACAt1B,EACH0S,gBAAiB/H,IAGnB,MAAM2sB,GAAazmB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsD,EAAQpC,IAC7DnB,EAASg6B,GAAsBh6B,EAAQC,EAAQ46B,GAE/C,MAAMY,GAASlC,EAAAA,EAAAA,IAAsBv5B,EAAQC,EAAQsD,GAEjDk4B,MAAAA,GAAAA,EAAQ51B,aACVrF,EAAQk7B,oBAAoB,CAAE9wB,MAAOrH,EAAQpC,KAE7CnB,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQw7B,EAAO51B,WAAW3F,SAAU,aAAc,IACjFu7B,EAAO51B,WACVE,cAAexC,EAAQpC,GACvB2W,uBAAwBvU,EAAQpC,OAIpCY,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,sCAAuC,CAC1C,MAAM,OAAEC,EAAF,QAAUiO,EAAV,QAAmB3K,GAAYod,EAC/Bya,GAAeC,EAAAA,EAAAA,IAAmBr7B,EAAQC,IAAW,GAC3DD,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgB,IAAIg6B,EAAc73B,EAAQpC,KAEtG,MAAM03B,GAAiBzf,EAAAA,EAAAA,IAAuBpZ,EAAQC,EAAQiO,GAE9DlO,GAASw7B,EAAAA,EAAAA,IAA4Bx7B,EAAQC,EAAQ,CAACiO,IACtDlO,GAASq5B,EAAAA,EAAAA,IAAuBr5B,EAAQC,EAAQsD,EAAQpC,GAAI,IACvD03B,KACAt1B,EACH0S,gBAAiB/H,KAGnBnM,EAAAA,EAAAA,IAAU/B,GACV,MAGF,IAAK,kBAAmB,CACtB,MAAM,OAAEC,EAAF,SAAU62B,EAAV,WAAoB/zB,GAAe4d,EAEnCgb,GAAmBC,EAAAA,EAAAA,IAAgB57B,EAAQC,IAAW,GACtD47B,EAAe/E,EACjB,IAAI6E,KAAqB54B,GAAYW,MAAK,CAACkV,EAAGC,IAAMA,EAAID,IACxD+iB,EAAiBr4B,QAAQnC,IAAQ4B,EAAWgF,SAAS5G,MAEzDY,EAAAA,EAAAA,KAAUP,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQmB,EAAAA,GAAgB,YAAay6B,IAE1E,MAGF,IAAK,mBAAoB,CACvB,MAAM,OACJ57B,EADI,SACIC,EADJ,WACc2F,EADd,eAC0B6zB,GAC5B/Y,EAGEmb,EAAe,KADKh2B,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,MAGtD2F,GAGL,IAAKi2B,EAAa57B,SAChB,OAGFF,GAAS46B,EAAAA,EAAAA,IAAiB56B,EAAQC,EAAQC,EAAU47B,GAEhDpC,IACF15B,GAASwB,EAAAA,EAAAA,IAAmBxB,EAAQC,EAAQC,EAAU,iBAAkBw5B,KAG1E33B,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,gBAAiB,CACpB,MAAQmB,GAAIlB,GAAW0gB,EACjBob,GAAe54B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAE5C87B,KAAiB7U,EAAAA,EAAAA,IAASjnB,KAC5BD,GAASu6B,EAAAA,EAAAA,IAAmBv6B,EAAQC,EAAQmF,OAAOC,KAAK02B,GAAc14B,IAAIoC,UAC1E1D,EAAAA,EAAAA,IAAU/B,GACVQ,EAAQw7B,aAAa,CAAE/7B,OAAAA,EAAQg6B,OAAO,KAGxC,MAGF,IAAK,iBAAkB,CACrB,MAAM,IAAE1yB,EAAF,OAAOtH,GAAW0gB,EAExByZ,GAAen6B,EAAQsH,EAAK/G,EAASR,GACrC,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEuH,EAAF,OAAOtH,GAAW0gB,GAwZ9B,SACE1gB,EAA4BsH,EAAe/G,EAAwBR,GAE9DC,IAILsH,EAAIsB,SAAS1H,IACXnB,GAASq5B,EAAAA,EAAAA,IAAuBr5B,EAAQC,EAAQkB,EAAI,CAClDqT,YAAY,QAIhBzS,EAAAA,EAAAA,IAAU/B,GAEV2G,YAAW,KACT3G,GAASw7B,EAAAA,EAAAA,KAA4B50B,EAAAA,EAAAA,MAAa3G,EAAQsH,GAC1D,MAAM00B,GAAoBV,EAAAA,EAAAA,IAAwBv7B,EAAQC,GAC1DD,GAASwB,EAAAA,EAAAA,IACPxB,EAAQC,EAAQmB,EAAAA,GAAgB,eAAgBgE,OAAOC,KAAK42B,GAAqB,IAAI54B,IAAIoC,UAE3F1D,EAAAA,EAAAA,IAAU/B,KACT04B,KA5aCwD,CAAwBj8B,EAAQsH,EAAK/G,EAASR,GAC9C,MAGF,IAAK,gBAAiB,CACpB,MAAM,OAAEC,GAAW0gB,EACbzd,EAAelD,EAAO2B,SAAS+G,SAASzI,GAC1CiD,EAEFk3B,GAAen6B,EADHmF,OAAOC,KAAKnC,EAAagO,MAAM7N,IAAIoC,QACnBjF,EAASR,GAErCQ,EAAQu1B,kBAAkB,CAAE91B,OAAAA,IAG9B,MAGF,IAAK,0BAA2B,CAC9B,MAAM,IAAEsH,EAAF,cAAOivB,GAAkB7V,EAE/BpZ,EAAIsB,SAAS1H,IACX,MAAMlB,GAASy2B,EAAAA,EAAAA,IAAsB12B,EAAQmB,GACzClB,IACFD,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQkB,EAAIq1B,QAInDz0B,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,wBAAyB,CAC5B,MAAM,UAAEy2B,EAAF,IAAalvB,EAAb,cAAkBivB,GAAkB7V,EAE1CpZ,EAAIsB,SAAS1H,IACXnB,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQy2B,EAAWt1B,EAAIq1B,OAGpDz0B,EAAAA,EAAAA,IAAU/B,GAEV,MAGF,IAAK,oBAAqB,CACxB,MAAM,OAAEm8B,EAAF,WAAUC,GAAezb,EAEzBpd,GAAU84B,EAAAA,EAAAA,IAA0Br8B,EAAQm8B,GAElD,GAAI54B,MAAAA,GAAAA,EAAS+G,QAAQ2O,KAAM,CACzB,MAAMqjB,EAAc,IAAK/4B,EAAQ+G,QAAQ2O,QAASmjB,IAG1C9vB,QAASiwB,GAAmBD,EAAYhwB,SAAW,GAC3D,GAAIiwB,IAAmBA,EAAepJ,MAAO/vB,GAAWA,EAAOgwB,WAAY,CACzE,MAAM,QAAE9mB,GAAY/I,EAAQ+G,QAAQ2O,KAAK3M,QACnCkwB,EAAgBlwB,GAAWA,EAAQhJ,QAAQF,GAAWA,EAAOgwB,WAC/DoJ,GACFA,EAAc3zB,SAAS4zB,IACrB,MAAMC,EAAoBH,EAAehuB,WAAWnL,GAAWA,EAAO8U,SAAWukB,EAAavkB,SAC1FwkB,GAAqB,IACvBJ,EAAYhwB,QAAQA,QAASowB,GAAmBtJ,UAAW,OAMnErxB,EAAAA,EAAAA,KAAUsS,EAAAA,EAAAA,IACRrU,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACEmJ,QAAS,IACJ/G,EAAQ+G,QACX2O,KAAMqjB,MAKd,MAGF,IAAK,wBAAyB,CAC5B,MAAM,OAAEH,EAAF,OAAUzvB,EAAV,QAAkBuL,GAAY0I,EAC9Bpd,GAAU84B,EAAAA,EAAAA,IAA0Br8B,EAAQm8B,GAClD,IAAK54B,IAAYA,EAAQ+G,QAAQ2O,OAAS1V,EAAQ+G,QAAQ2O,KAAK3M,QAC7D,MAGF,MAAM,KAAE2M,GAAS1V,EAAQ+G,SAEnB,eAAEqyB,EAAF,YAAkBC,EAAlB,QAA+BtwB,GAAY2M,EAAK3M,QAChDuwB,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjD7R,EAAaze,EAAU,IAAIA,GAAW,GAE5CuwB,EAAkB54B,KAAKyI,GAEvBuL,EAAQpP,SAASqP,IACf,MAAM6kB,EAAehS,EAAWjiB,MAAM1F,GAAWA,EAAO8U,SAAWA,IAC7D8kB,EAAoBjS,EAAWxc,WAAWnL,GAAWA,EAAO8U,SAAWA,IACvE+kB,EAA+BF,EAAe,IAAKA,GAAiB,CAAE7kB,OAAAA,EAAQglB,YAAa,GAEjGD,EAAcC,aAAe,EACzBxwB,IAAW1M,EAAOsX,gBACpB2lB,EAAc7J,UAAW,GAGvB4J,EACFjS,EAAWiS,GAAqBC,EAEhClS,EAAW9mB,KAAKg5B,OAIpBl7B,EAAAA,EAAAA,KAAUsS,EAAAA,EAAAA,IACRrU,EACAuD,EAAQtD,OACRsD,EAAQpC,GACR,CACEmJ,QAAS,IACJ/G,EAAQ+G,QACX2O,KAAM,IACDA,EACH3M,QAAS,IACJ2M,EAAK3M,QACRqwB,eAAgBE,EAChBD,YAAaE,EACbxwB,QAASye,QAOnB,MAGF,IAAK,4BAA6B,CAChC,MAAM,QAAExnB,GAAYod,GAEhBwc,EAAAA,EAAAA,IAAyBn9B,IAC3BQ,EAAQkK,0BAA0B,CAAEnH,QAAAA,IAGtC,MAGF,IAAK,yBAA0B,CAC7B,MAAM,OAAEtD,EAAF,GAAUkB,EAAV,UAAc+xB,GAAcvS,EAC5Bpd,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GAC5CuE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ2gB,EAAO1gB,QACjCm9B,EAAmB75B,MAAAA,OAAH,EAAGA,EAAS2vB,UAGlC,GAAIkK,GAAoB3I,GAAavB,EAAWkK,GAC9C,OAIF,MAAMC,GAAeC,EAAAA,EAAAA,IAAqBF,EAAkBlK,EAAWlzB,EAAOsX,eAI9E,GAFAtX,GAASqU,EAAAA,EAAAA,IAAkBrU,EAAQC,EAAQkB,EAAI,CAAE+xB,UAAWvS,EAAOuS,YAE/DmK,EAAc,CAChB,MAAMxC,GAAazmB,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkB,GACrD,IAAKuE,IAASm1B,EAAY,QAC1BjnB,EAAAA,EAAAA,KAAU,MACRyiB,EAAAA,GAAAA,IAAmB,CACjB3wB,KAAAA,EACAnC,QAASs3B,EACTtE,YAAY,QAKlBx0B,EAAAA,EAAAA,IAAU/B,GACV,WCvfN,MAEMu9B,IAA8BtjB,EAAAA,EAAAA,KASpC,WACE,MAAMja,GAAS4G,EAAAA,EAAAA,OAEf7E,EAAAA,EAAAA,KAAUqjB,EAAAA,EAAAA,IAAoBplB,EAAQ,IACjCA,EAAO6Q,MAAMwU,gBACbmY,MAGLA,GAAuB,KAnBM,KAE0D,GAEzF,IAAIA,GAAsD,IAkB1Dj9B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOoG,EAAAA,EAAAA,IAAc/mB,EAAQ2gB,EAAOxf,IAGtC,IAAK,aACH,OAAOolB,EAAAA,EAAAA,IAAWvmB,EAAQ2gB,EAAOxf,GAAIwf,EAAOrI,MAG9C,IAAK,mBAGH,OA7BwB5L,EA4BHiU,EAAOjU,OA5BY+wB,EA4BJ9c,EAAOmP,OA3B/C0N,GAAqB9wB,GAAU+wB,OAC/BF,KA8BE,IAAK,qBAAsB,CACzB,MAAM,GAAEp8B,EAAF,SAAMuY,GAAaiH,EACnB+c,EAAa19B,EAAO6Q,MAAMK,KAAK/P,GACrC,IAAKu8B,EACH,OAGF,OAAOnX,EAAAA,EAAAA,IAAWvmB,EAAQmB,EAAI,CAC5BuY,SAAU,IACLgkB,EAAWhkB,YACXA,MA1Cb,IAA8BhN,EAAgB+wB,MCT9Cl9B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO5E,EAAAA,EAAAA,IAAiB/b,EAAQ2gB,EAAOxf,GAAIwf,EAAOhF,gBCCxDpb,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOgd,WACFC,EAAAA,EAAAA,KAAkBh3B,EAAAA,EAAAA,MAAa+Z,EAAOxf,KAEtCkpB,EAAAA,EAAAA,KAAqBzjB,EAAAA,EAAAA,MAAa+Z,EAAOxf,IAGpD,IAAK,0BACHY,EAAAA,EAAAA,IAAU,KACL6E,EAAAA,EAAAA,MACH6e,YAAa,CACXpG,QAAS,MAGb,MAEF,IAAK,yBACH7e,EAAQ4a,uBACR,MAEF,IAAK,gBACHpb,EAAOuiB,SAASsb,QAAQld,EAAOmd,KAAwBnd,EAAOod,MAC9D,MAEF,IAAK,kCACH/9B,GAASg+B,EAAAA,EAAAA,KAAqBp3B,EAAAA,EAAAA,MAAa+Z,EAAO1R,KAClDjP,GAASgtB,EAAAA,EAAAA,IAAehtB,EAAQitB,EAAAA,GAAAA,iBAChClrB,EAAAA,EAAAA,IAAU/B,QCjChBO,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOsd,EAAAA,EAAAA,IAAqBj+B,EAAQ2gB,EAAOud,SAAUvd,EAAOhK,SAAUgK,EAAOwd,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJl+B,EADI,QACIoG,EADJ,SACasQ,EADb,mBACuBwnB,GACzBxd,EACS3gB,EAAO4L,MAAMsF,KAAKjR,KAG7BD,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQC,EAAQ,CAAEoG,QAAAA,MAGxCtE,EAAAA,EAAAA,KAAUq8B,EAAAA,EAAAA,IAAmBp+B,EAAQC,EAAQ,CAAEoG,QAAAA,EAASsQ,SAAAA,EAAUwnB,mBAAAA,KAClE,YCnBN59B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF3gB,EACHq+B,cAAe,IACVr+B,EAAOq+B,cACVlhB,WAAW,EACXmP,uBAAwB3L,EAAOnb,SAKrC,IAAK,mBACH,MAAO,IACFxF,EACHq+B,cAAe,IACVr+B,EAAOq+B,cACV3uB,MAAOiR,EAAOpd,c,2BCVxBhD,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBACH,MAAoC,cAAhCA,EAAO2d,KAAKC,gBACVv+B,EAAOw+B,WAAWC,uBACpBj+B,EAAQk+B,eAAe,CAAEC,cAAc,KAGhCC,EAAAA,GAAAA,IAAgB5+B,EAAQ2gB,EAAO2d,KAAKn9B,KAIxC09B,EAAAA,GAAAA,IAAgB7+B,EACrB2gB,EAAO2d,KAAKn9B,IACZsyB,EAAAA,EAAAA,IAAK9S,EAAO2d,KAAM,CAAC,yBACnBh+B,EACAqgB,EAAO2d,KAAKQ,mBAEhB,IAAK,wBAAyB,CAC5B,MAAMp5B,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ2gB,EAAO1gB,QASvC,OARIyF,IACF1F,GAASqW,EAAAA,EAAAA,IAAWrW,EAAQ2gB,EAAO1gB,OAAQ,CACzCyZ,SAAU,IACLhU,EAAKgU,SACRqlB,YAAape,EAAO2d,KAAKn9B,OAIxBnB,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAE++B,EAAF,aAAeC,EAAf,WAA6BxmB,GAAemI,GAC5C,cAAErJ,GAAkBtX,EAgB1B,OAbAA,GAAS4G,EAAAA,EAAAA,MACTo4B,EAAan2B,SAASo2B,IAChBA,EAAY99B,KACdnB,GAASk/B,EAAAA,GAAAA,IACPl/B,EAAQ++B,EAAaE,EAAY99B,GAAI89B,EAAan6B,QAAQ0T,IAAelB,IAAkB2nB,EAAY99B,QAIzGqX,IACFxY,GAAS6+B,EAAAA,GAAAA,IAAgB7+B,EAAQ++B,EAAa,CAC5CvmB,WAAAA,KAGGxY,EAET,IAAK,kBAAmB,CACtB,IAAKm/B,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EADI,cAEJ9nB,GACEtX,EAEJ,GAAIo/B,EAAW,OAEf,MAAM,KAAEd,GAAS3d,EAGjB,IAFmB2d,MAAAA,OAAA,EAAAA,EAAMzd,WAAYvJ,GAEH,cAAfgnB,EAAKe,MAMtB,OALAC,EAAAA,GAAAA,IAAgB,CACdhB,KAAAA,EACAhmB,MAAMinB,EAAAA,GAAAA,IAAoBv/B,MAEvBw/B,EAAAA,EAAAA,MACE,IACFx/B,EACHo/B,UAAWd,EACXmB,oBAAoB,SC9E9Bl/B,EAAAA,EAAAA,IAAiB,aAAa,CAACP,EAAQQ,EAASmgB,KAC9C,GACO,gCADCA,EAAO,SAEX,OAAOnR,EAAAA,EAAAA,IAAaxP,M,iFCHX,SAAS0/B,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACDC,EAAAA,EAAAA,IAAeF,IACrB,CAACA,I,eCJN,MAAMG,GAAe/G,SAASgH,cAAc,yBACtCC,IAAyBF,MAAAA,QAAA,EAAAA,GAAcG,aAAa,aAAc,GAClEC,GAA6B,4EAiCnC,SAASC,GAAaxyB,GACpBA,EAAEyyB,iB,2DC5BJ,MAmBA,IAAeC,EAAAA,EAAAA,KAnBqB,IAAuB,IAAtB,cAAEC,GAAoB,GACzDC,EAAAA,GAAAA,MACA,MAAMC,GAA2BC,EAAAA,EAAAA,MAQjC,IANAb,EAAAA,EAAAA,KAAU,KACJU,IACFI,EAAAA,GAAAA,GAAeF,KAEhB,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACE,0BAAKG,UAAU,wBAAuBC,EAAAA,GAAAA,IAAqBJ,O,sGCrBxD,IAAKK,GAYG,SAASC,GACtB99B,EACAu7B,EACA1b,EACAke,EACAC,EACAC,GAEA,IAAInR,EAUAvtB,EAWAkC,EAWJ,OA3BEqrB,EC5BW,WACb,MAAOoR,EAAUC,IAAeC,EAAAA,EAAAA,IAAS16B,OAAO26B,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAYz6B,OAAO26B,UAAUC,QAM/B,OAHA56B,OAAO86B,iBAAiB,SAAUD,GAClC76B,OAAO86B,iBAAiB,UAAWD,GAE5B,KACL76B,OAAO+6B,oBAAoB,UAAWF,GACtC76B,OAAO+6B,oBAAoB,SAAUF,MAEtC,IAEIL,EDOiBQ,IACoB,8BAApBnD,EAEb1b,EACAge,GAAiBc,QAEjBd,GAAiBe,OAJjBf,GAAiBgB,kBAS1Bt/B,EADEutB,IAAW+Q,GAAiBe,QAAUX,EAC7B,OACFF,EACE,eACFC,EACE,YAEA,UAITlR,IAAW+Q,GAAiBgB,kBAC9Bp9B,EAAOzB,EAAK,qBACH8sB,IAAW+Q,GAAiBc,UACrCl9B,EAAOzB,EAAK,aAGG,iBAAbT,IACFkC,EAAOA,EAAMq9B,cAAczS,QAAQ,OAAQ,KAGtC,CACL0S,iBAAkBjS,EAClBkS,yBAA0Bz/B,EAC1B0/B,qBAAsBx9B,I,SAvDdo8B,GAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,K,0FEYZ,MA0BA,IAAeR,EAAAA,EAAAA,KA1B+B,IAIxC,IAJyC,iBAC7C0B,EAD6C,qBAE7CE,EAF6C,QAG7CC,GACI,EACJ,MAAMl/B,GAAOm/B,EAAAA,GAAAA,KAEb,OACE,0BAAKhhC,GAAG,0BAA0BihC,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,EAAW4hC,QAASA,GAC9E,mBAACI,GAAA,EAAD,CAASC,MAAM,UACf,0BAAK5B,UAAU,cACb,mBAAC6B,GAAA,EAAD,CAAYC,UAAWV,EAAkB3N,KAAK,cAC3C6N,IAGL,mBAACS,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,OACLJ,MAAM,qBAEN,2BAAM5B,UAAU,oBC4RxB,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MACEU,MAAOmiC,EADH,eACgBl3B,EADhB,OACgC1L,EADhC,KACwCkK,GAC1CnK,EAAOsL,cACL,cAAEgM,EAAF,gBAAiBinB,EAAjB,UAAkC1b,GAAc7iB,GAC9CkR,KAAM4xB,GAAc9iC,EAAO4L,OAC7B,4BAAEm3B,EAAF,eAA+B1P,GAAmBrzB,EAAOuiB,SAAS+Q,MAExE,MAAO,CACLuP,YAAAA,EACA1lB,YAAWxR,GAAiB7G,QAAQ6G,EAAeC,OAASD,EAAehK,UAC3E2V,cAAAA,EACAwrB,UAAAA,EACAE,mBAAoB/iC,EACpBgjC,WAAY94B,EACZ+4B,OAAOC,EAAAA,EAAAA,IAAYnjC,GACnBqzB,eAAAA,EACAkL,gBAAAA,EACA1b,UAAAA,EACAugB,kBAAmBt+B,SAAQ3E,EAAAA,EAAAA,IAAyBH,IACpD+iC,4BAAAA,EACAM,eAAgBv+B,QAAQ9E,EAAO4L,MAAMqrB,QAAQC,WAtB/B0L,EA/P8B,IAsB5C,IAtB6C,QACjDt4B,EADiD,eAEjDg5B,EAFiD,cAGjDC,EAHiD,iBAIjDC,EAJiD,iBAKjDC,EALiD,iBAMjDC,EANiD,QAOjDC,EAPiD,YAQjDd,EARiD,UASjD1lB,EATiD,qBAUjDymB,EAViD,cAWjDtsB,EAXiD,mBAYjD0rB,EAZiD,WAajDC,EAbiD,MAcjDC,EAdiD,eAejD7P,EAfiD,UAgBjDyP,EAhBiD,gBAiBjDvE,EAjBiD,UAkBjD1b,EAlBiD,kBAmBjDugB,EAnBiD,4BAoBjDL,EApBiD,eAqBjDM,GACI,EACJ,MAAM,SACJnhC,EADI,aAEJ2hC,EAFI,oBAGJC,EAHI,iBAIJC,EAJI,sBAKJC,IACE/jB,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,KACP8B,EAAU35B,IAAY45B,EAAAA,GAAAA,SAGtBC,GAAqBC,EAAAA,EAAAA,KAAQ,IAC1BnB,GACHoB,EAAAA,EAAAA,IAAmB,IAAIzuB,KAAkB,IAAbqtB,SAC5B3iC,GACH,CAAC2iC,IACEqB,GAA2BF,EAAAA,EAAAA,KAAQ,IAClCH,GAAYnB,EAIV19B,OAAOm/B,OAAOzB,GAAWj/B,QAAO,CAAC2gC,EAAO9+B,KACxC++B,EAAAA,EAAAA,IAAe/+B,IAIbA,EAAK+R,YAAc+sB,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACP,EAASnB,KAEP,iBAAEf,EAAF,qBAAoBE,EAApB,yBAA0CD,GAA6BlB,GAC3E99B,EAAMu7B,EAAiB1b,EAAWugB,EAAmBL,GAA8BM,GAG/EqB,EA9DoB,qBA8DAh+B,OAAOyhB,SAASwc,SAEpCC,GAA8DR,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAES,EAAF,OAAaj7B,GAAd,SACL,mBAAC84B,GAAA,EAAD,CACElyB,OAAK,EACLs0B,OAAQb,IAAY72B,EAAAA,GACpBu1B,KAAK,UACLJ,MAAM,cACN5B,UAAW/2B,EAAS,SAAW,GAE/Bs4B,QAAS+B,EAAUY,EAAY,IAAMlB,IACrCoB,UAAWd,EAAUjhC,EAAK,qBAAuB,uBAEjD,0BAAK29B,WAAWqE,EAAAA,GAAAA,GACd,sBACCf,GAAW,aACZL,GAAwB,qBAK7B,CAACK,EAASjhC,EAAM2gC,EAASC,IAEtBqB,GAAoBC,EAAAA,EAAAA,KAAY,KAC/BrC,GACHU,EAAc,MAEf,CAACV,EAAaU,IAEX4B,GAAyBD,EAAAA,EAAAA,KAAY,KACzCnB,EAAiB,CAAEhB,6BAA8BA,MAChD,CAACA,EAA6BgB,IAE3BqB,GAAoBF,EAAAA,EAAAA,KAAY,KACpChjC,EAAS,CAAEf,GAAImW,EAAehW,sBAAsB,MACnD,CAACgW,EAAepV,IAEbmjC,GAAuBH,EAAAA,EAAAA,KAAav3B,IACxCA,EAAE23B,kBACF,MAAMC,EAAqB,UAAVrC,EAAoB,OAAS,QAE9Ca,EAAiB,CAAEb,MAAOqC,IAC1BxB,EAAiB,CAAEyB,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAUlS,IAAmBE,EAAAA,MACxC,CAACF,EAAgB0Q,EAAkBb,IAEhCwC,GAAqBR,EAAAA,EAAAA,KAAY,MACrCS,EAAAA,GAAAA,GAAuB,MACvBC,EAAAA,GAAAA,OACAC,EAAAA,GAAAA,QACC,IAEGC,GAAqBZ,EAAAA,EAAAA,KAAY,KACrCrB,EAAa,CAAEkC,SAAU/iC,EAAKupB,SAC7B,CAACvpB,EAAKupB,KAAMsX,IAETmC,EACJlhC,QAAQk+B,IACL14B,IAAY45B,EAAAA,GAAAA,cACZ55B,IAAY45B,EAAAA,GAAAA,SAGX+B,EAAyB37B,IAAY45B,EAAAA,GAAAA,SACvClhC,EAAK,iBACLA,EAAK,UAET,OACE,0BAAK29B,UAAU,kBACb,0BAAKx/B,GAAG,iBAAiBw/B,UAAU,eACjC,mBAACuF,GAAA,EAAD,CACEC,QAASvB,EACTwB,OAAS,GAAEC,EAAAA,MAAY3jB,EAAAA,GAAQ4jB,SAAex8B,EAAAA,MAE9C,mBAACy8B,GAAA,EAAD,CACEC,KAAK,iBACLtE,QAASkD,GAERpiC,EAAK,kBAER,mBAACujC,GAAA,EAAD,CACEC,KAAK,UACLtE,QAASwB,GAET,2BAAM/C,UAAU,kBAAkB39B,EAAK,kBACtCshC,EAA2B,GAC1B,0BAAK3D,UAAU,kBAAkB2D,IAGrC,mBAACiC,GAAA,EAAD,CACEC,KAAK,OACLtE,QAASuB,GAERzgC,EAAK,aAER,mBAACujC,GAAA,EAAD,CACEC,KAAK,WACLtE,QAASsB,GAERxgC,EAAK,aAER,mBAACujC,GAAA,EAAD,CACEC,KAAK,WACLtE,QAASmD,GAET,2BAAM1E,UAAU,kBAAkB39B,EAAK,wBACvC,mBAACyjC,GAAA,EAAD,CACEtlC,GAAG,WACHulC,MAAO1jC,EAAe,SAAVkgC,EAAmB,mCAAqC,mCACpEyD,QAAmB,SAAVzD,EACT0D,aAAW,KAGf,mBAACL,GAAA,EAAD,CACEC,KAAK,OACLtE,QAAS4D,GAER9iC,EAAK,qBAER,mBAACujC,GAAA,EAAD,CACEC,KAAK,MACLpe,KAAMye,EAAAA,IAFR,cAMCnC,GACC,sCACE,mBAAC6B,GAAA,EAAD,CACEC,KAAK,SACLpe,KA7LS,8BA8LT8Z,QAASwD,GAHX,uBAOA,mBAACa,GAAA,EAAD,CACEC,KAAK,SACLpe,KArMW,qCAsMX8Z,QAAS2D,GAAAA,IAHX,2BAUN,mBAACiB,GAAA,EAAD,CACEC,QAAQ,wBACRC,yBAAyB,aACzBrG,UAAWqC,GAAsBC,EAAa,mBAAqB,GACnEjuB,MAAOsuB,GAAkBT,EACzBoE,QAASjB,EACT7oB,UAAWA,GAA0C,cAA7B6kB,EACxBkF,aAA2C,cAA7BlF,EAA2C,cAAW1hC,EACpE6mC,uBAAqD,cAA7BnF,GAAsD,UAAVkB,EAAoB,aAAU5iC,EAClG8mC,YAAanB,EACboB,aAAa,MACbC,SAAUxiC,QAAQk+B,GAAsBC,GACxCsE,SAAUhE,EACVI,QAASA,EACT6D,QAASvC,EACTwC,eAA6C,cAA7BzF,EAA2CmD,OAAyB7kC,GAEnF6jC,GACC,mBAACuD,GAAA,EAAD,CACElB,KAAK,WACLjpB,MAAO4mB,EACPmD,UAAQ,EACRtG,YAAal8B,QAAQk+B,GACrBrC,UAAU,cACVuB,QAAS4B,EACT6D,SAlMmB,CAAEx9B,UAAM7J,KAqM9B0iC,GACC,mBAAC0E,GAAA,EAAD,CACEE,aAAc5E,EACdd,QAAS8B,EACTsD,UAAQ,EACRK,SAzMmB,CAAExmC,QAAIb,MA6M/B,mBAACunC,GAAA,EAAD,CACEj+B,OAAqC,YAA7Bo4B,EACR8F,UAAQ,EACRnH,UAAU,4BAEV,mBAAC,GAAD,CACEoB,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAASiD,W,qCCpRrB,MAkLA,IAAe9E,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MACEu3B,aACErmB,KAAMomB,EACNh1B,WAAYylC,EAFD,iBAGXC,GAJE,cAMJ1wB,EANI,aAOJmN,EAPI,4BAQJwjB,GACEjoC,EAEJ,MAAO,CACLs3B,gBAAAA,EACAyQ,iBAAAA,EACAC,iBAAAA,EACA1wB,cAAAA,EACAmN,aAAAA,EACAwjB,4BAAAA,KAnBcrF,EAhL2B,IASzC,IAT0C,gBAC9CsF,EAD8C,eAE9CC,EAF8C,gBAG9C7Q,EAH8C,iBAI9CyQ,EAJ8C,iBAK9CC,EAL8C,cAM9C1wB,EAN8C,aAO9CmN,EAP8C,4BAQ9CwjB,GACI,EACJ,MAAM,gBACJG,EADI,oBAEJC,EAFI,SAGJnmC,IACE+d,EAAAA,EAAAA,MAGEqoB,GAAgBC,EAAAA,EAAAA,IAAuB,MAEvCvlC,GAAOm/B,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJnb,GACF2jB,MAED,CAAC3jB,EAAc2jB,IAElB,MAAMI,GAAmBpE,EAAAA,EAAAA,KAAQ,IACxB2D,EACHA,EAAiB1kC,KAAKlC,GAAOm2B,EAAgBn2B,IAAO,KAAImC,OAAOwB,cAC/DxE,GACH,CAACg3B,EAAiByQ,IAEfU,GAAqBlI,EAAAA,GAAAA,MACrBmI,GAAatE,EAAAA,EAAAA,KAAQ,KACzB,GAAKoE,GAAqBA,EAAiBhjC,OAI3C,MAAO,CACL,CACErE,GAAIwnC,EAAAA,GACJprB,MAAqB,OAAdva,EAAKupB,KAAgB,MAAQvpB,EAAK,sBAExCwlC,EAAiBnlC,KAAI,gBAAC,GAAElC,EAAF,MAAMoc,GAAP,QAAoB,CAC1Cpc,GAAAA,EACAoc,MAAAA,EACAqrB,WAAU,UAAEH,EAAmBtnC,UAArB,aAAE,EAAwB0nC,WACpCC,cAAehkC,QAAO,UAAC2jC,EAAmBtnC,UAApB,aAAC,EAAwB4nC,2BAGlD,CAACP,EAAkBC,EAAoBzlC,IAEpCgmC,GAAkB9D,EAAAA,EAAAA,KAAa9yB,IACnCi2B,EAAoBj2B,EAAO,CAAE62B,uBAAuB,MACnD,CAACZ,KAGJzI,EAAAA,EAAAA,KAAU,KACH8I,GAAeA,EAAWljC,QAI3BwiC,GAAoBU,EAAWljC,QACjC6iC,EAAoB,KAErB,CAACL,EAAkBU,EAAYL,KAElCzI,EAAAA,EAAAA,KAAU,KACR,GAAK0I,EAAc9mB,SAAY/X,EAAAA,IAAiBi/B,GAAeA,EAAWljC,OAI1E,OAAO0jC,EAAAA,GAAAA,IAAcZ,EAAc9mB,QAAS,CAC1C2nB,wBAAyB,aACzBC,QAAU,CAACz7B,EAAG3F,IACRA,IAAcqhC,GAAAA,GAAAA,MAChBhB,EAAoBx9B,KAAKymB,IAAI0W,EAAmB,EAAGU,EAAWljC,OAAS,GAAI,CAAEyjC,uBAAuB,KAC7F,GACEjhC,IAAcqhC,GAAAA,GAAAA,QACvBhB,EAAoBx9B,KAAKC,IAAI,EAAGk9B,EAAmB,GAAI,CAAEiB,uBAAuB,KACzE,OAMZ,CAACjB,EAAkBU,EAAYL,IAElC,MAAMiB,GAAmBf,EAAAA,EAAAA,MACzBe,EAAiB9nB,QAA+B,IAArBwmB,GAC3BpI,EAAAA,EAAAA,KAAU,IAAO0J,EAAiB9nB,SAAU+nB,EAAAA,GAAAA,IAAsB,KAC5DD,EAAiB9nB,SACnB6mB,EAAoB,WAEnB/nC,GAAY,CAAC0nC,EAAkBK,KAEpCmB,EAAAA,GAAAA,IAAoC,IAArBxB,GAAwB,IAAMK,EAAoB,EAAG,CAAEY,uBAAuB,OAE7FrJ,EAAAA,EAAAA,KAAU,KACR,MAAM6J,EAAiB97B,IACrB,GAAIA,EAAE+7B,SAAW/7B,EAAEg8B,UAAYh8B,EAAE4e,KAAKqd,WAAW,UAAYlB,EAAY,CACvE,MAAO,CAAEmB,GAASl8B,EAAE4e,KAAKjD,MAAM,cAAgB,GAC/C,IAAKugB,EAAO,OAEZ,GA3GsB,MA2GlBA,EAEF,YADA3nC,EAAS,CAAEf,GAAImW,EAAehW,sBAAsB,IAItD,MAAM+1B,EAAS5xB,OAAOokC,GAAS,EAC/B,GAAIxS,EAASqR,EAAWljC,OAAS,EAAG,OAEpC6iC,EAAoBhR,EAAQ,CAAE4R,uBAAuB,IACrDt7B,EAAEyyB,mBAMN,OAFArH,SAASyI,iBAAiB,UAAWiI,GAAe,GAE7C,KACL1Q,SAAS0I,oBAAoB,UAAWgI,GAAe,OAI3D,MACEK,aAAcC,EADV,qBACmCC,IACrCC,EAAAA,GAAAA,IAAmBlC,OAAkBznC,GAAW,GAEpD,SAAS4pC,EAAiBj9B,GACxB,MAAMk9B,EAAe/kC,OAAOm/B,OAAOjN,GAChCxuB,MAAK,QAAC,GAAE3H,GAAH,SAAYA,IAAOunC,EAAYV,GAAkB7mC,MAEzD,OAAKgpC,GAAqC,IAArBnC,EAanB,mBAACoC,GAAA,EAAD,CACEC,WAAW,SACX1T,SAAUwT,EAAahpC,GACvB8L,SAAUA,EACVwX,aAAcA,EACd0jB,eAAgBA,EAChBD,gBAAiBA,IAjBjB,mBAACkC,GAAA,EAAD,CACEC,WAAW,MACXp9B,SAAUA,EACVwX,aAAcA,EACdyjB,gBAAiBA,EACjBC,eAAgBA,IAiBxB,OACE,0BAAKxH,UAAU,eACZ+H,MAAAA,GAAAA,EAAYljC,OACX,mBAAC8kC,GAAA,EAAD,CAASC,KAAM7B,EAAY8B,UAAWxC,EAAkByC,YAAazB,IACnEe,EACF,0BAAKpJ,WAAWqE,EAAAA,GAAAA,GAAe,mBAAoBgF,UACjD1pC,EACJ,mBAACkiC,GAAA,EAAD,CACEkI,IAAKpC,EACLlU,KAAM6T,EAA8B,OAASjlC,EAAKq/B,MAAQ,sBAAwB,kBAClFI,UAAWuF,EACX2C,YAAajC,EAAaA,EAAWljC,YAASlF,GAE7C4pC,Q,qCC1MT,MAOA,IAAe7J,EAAAA,EAAAA,KAPwBuK,IACrC,MAAMC,GAAaC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOF,EAAa,mBAACA,EAAeD,GAAY,mBAACI,GAAA,EAAD,SCGlD,IAAe3K,EAAAA,EAAAA,KAPyBuK,IACtC,MAAMK,GAAcH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOE,EAAc,mBAACA,EAAgBL,GAAY,mBAACI,GAAA,EAAD,S,eCSpD,MA0DA,IAAe3K,EAAAA,EAAAA,KA1DqB,IAK9B,IAL+B,QACnC6K,EADmC,iBAEnCC,EAFmC,aAGnCC,EAHmC,WAInCC,GACI,EACJ,MAAOC,EAAYC,IAAiBnK,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACHsL,GACHK,GAAc,KAEf,CAACL,IAEJ,MAAMloC,GAAOm/B,EAAAA,GAAAA,KAEPqJ,GAAexG,EAAAA,GAAAA,GACnB,gBACAkG,GAAW,WACXI,GAAc,gBAGVG,GAAmBvG,EAAAA,EAAAA,KAAY,KACnCqG,GAAeD,KACd,CAACA,IAEEI,GAAcxG,EAAAA,EAAAA,KAAY,KAC9BqG,GAAc,KACb,IAEH,OACE,0BAAK5K,UAAW6K,GACd,mBAAC9I,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,UACN5B,UAAW2K,EAAa,SAAW,GACnCpJ,QAASuJ,EACT1G,UAAW/hC,EAAKsoC,EAAa,QAAU,mBACvCK,UAAW,GAEX,wBAAGhL,UAAU,yBACb,wBAAGA,UAAU,gBAEf,mBAACiL,GAAA,EAAD,CACEhiC,OAAQ0hC,EACRO,UAAU,QACVC,UAAU,SACVC,WAAS,EACTC,QAASN,GAET,mBAACnF,GAAA,EAAD,CAAUC,KAAK,UAAUtE,QAASkJ,GAAepoC,EAAK,eACtD,mBAACujC,GAAA,EAAD,CAAUC,KAAK,QAAQtE,QAASmJ,GAAaroC,EAAK,aAClD,mBAACujC,GAAA,EAAD,CAAUC,KAAK,OAAOtE,QAASiJ,GAAmBnoC,EAAK,yBCpCzDipC,GAA0B7mC,OAAOC,KAAK6+B,EAAAA,IAAmB1+B,OAAS,EAIxE,IAAI0mC,GAsKJ,UAAe7L,EAAAA,EAAAA,KApKgB,IAWzB,IAX0B,QAC9B/1B,EAD8B,YAE9Bu4B,EAF8B,WAG9BI,EAH8B,eAI9BK,EAJ8B,qBAK9BM,EAL8B,gBAM9BsE,EAN8B,cAO9B3E,EAP8B,gBAQ9B4I,EAR8B,eAS9BhE,EAT8B,QAU9BxE,GACI,EACJ,MAAOyI,EAAsBC,IAA2BjL,EAAAA,EAAAA,IAAS33B,EAAAA,IAE3D6iC,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBgE,GAAuBrH,EAAAA,EAAAA,KAAY,KACvCiH,EAAgBjI,EAAAA,GAAAA,YACf,CAACiI,IAEEK,GAAuBtH,EAAAA,EAAAA,KAAY,KACvCiH,EAAgBjI,EAAAA,GAAAA,YACf,CAACiI,IAEEM,GAAyBvH,EAAAA,EAAAA,KAAY,KACzCiH,EAAgBjI,EAAAA,GAAAA,mBACf,CAACiI,IAEEO,GAAuBxH,EAAAA,EAAAA,KAAY,KACvCiH,EAAgBjI,EAAAA,GAAAA,iBACf,CAACiI,IAEEQ,GAAuBzH,EAAAA,EAAAA,KAAY,KACvCiH,EAAgBjI,EAAAA,GAAAA,YACf,CAACiI,IAEES,GAAmB1H,EAAAA,EAAAA,KAAY,KAC/B56B,IAAY45B,EAAAA,GAAAA,WAGhBoI,EAAc9qB,SAAU,EACxB6qB,GAAwB,MACvB,CAAC/hC,IAEEuiC,GAAmB3H,EAAAA,EAAAA,KAAY,KACnCoH,EAAc9qB,SAAU,EAEpB0qB,KACFxkC,aAAawkC,IACbA,QAAe5rC,GAGjB4rC,GAAexlC,OAAOC,YAAW,KAC1B2lC,EAAc9qB,SACjB6qB,GAAwB,KA3DF,OA8DzB,KAEHzM,EAAAA,EAAAA,KAAU,KACR,IAAIkN,EASJ,OARIxiC,IAAY45B,EAAAA,GAAAA,SACd4I,EAAmBpmC,OAAOC,YAAW,KACnC0lC,GAAwB,KApEF,MAsEfC,EAAc9qB,SAAW/X,EAAAA,KAClC4iC,GAAwB,GAGnB,KACDS,IACFplC,aAAaolC,GACbA,OAAmBxsC,MAGtB,CAACgK,IAEJ,MAAOyiC,EAA0BC,EAAwBC,GAmE3D,WACE,MAAOC,EAAeC,IAAqBC,EAAAA,GAAAA,IAAQ,IAEnDxN,EAAAA,EAAAA,KAAU,KACR,MAAMyN,EAAU3mC,OAAOC,WAAWwmC,EAxJT,QA0JzB,MAAO,KACLzlC,aAAa2lC,MAEd,CAACF,IAEJ,MAAM,aAAErD,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiD,GAMjE,MAAO,CAACpD,EAAcE,EAJI,KACxBtjC,OAAOyhB,SAASmlB,WAjF4DC,GAExEvqC,GAAOm/B,EAAAA,GAAAA,KAEb,OACE,0BACEhhC,GAAG,kBACHqsC,aAAe/jC,EAAAA,QAAkCnJ,EAAnBssC,EAC9Ba,aAAehkC,EAAAA,QAAkCnJ,EAAnBusC,GAE9B,mBAAC,GAAD,CACEviC,QAASA,EACTg5B,eAAgBA,EAChBC,cAAeA,EACfC,iBAAkB+I,EAClB9I,iBAAkB+I,EAClB9I,iBAAkBiJ,EAClBhJ,QAASA,EACTC,qBAAsBA,IAExB,mBAACpB,GAAA,EAAD,CACEpO,KAAMwP,EAAuB,OAAS,YACtC+G,YAAasB,GACbxJ,UAAWn4B,EACXojC,eAAa,EACbC,oBAAqBzJ,EAAAA,GAAAA,WAEnBj3B,IACA,OAAQ3C,GACN,KAAK45B,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAaiE,eAAgBA,EAAgBD,gBAAiBA,IACvE,KAAKhE,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACErB,YAAaA,EACbI,WAAYA,EACZh2B,SAAUA,EACV02B,QAASA,IAGf,KAAKO,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAD,CAAa5gC,OAAQggC,EAAgBr2B,SAAUA,EAAU02B,QAASA,IAC3E,QACE,WAIPoJ,GACC,mBAACrK,GAAA,EAAD,CACEkL,OAAK,EACLC,MAAI,EACJlN,WAAWqE,EAAAA,GAAAA,GAAe,aAAcgI,GACxC9K,QAAS+K,GAERjqC,EAAK,wBAGV,mBAAC,GAAD,CACEkoC,QAASkB,EACTjB,iBAAkBqB,EAClBpB,aAAcqB,EACdpB,WAAYqB,QCrKpB,IAAerM,EAAAA,EAAAA,KAPsBuK,IACnC,MAAMkD,GAAWhD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO+C,EAAW,mBAACA,EAAalD,GAAY,mBAACI,GAAA,EAAD,SCG9C,IAAe3K,EAAAA,EAAAA,KAPqBuK,IAClC,MAAMmD,GAAUjD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAOgD,EAAU,mBAACA,EAAYnD,GAAY,mBAACI,GAAA,EAAD,SCE5C,IAAe3K,EAAAA,EAAAA,KAP2BuK,IACxC,MAAMoD,GAAgBlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOiD,EAAgB,mBAACA,EAAkBpD,GAAY,mBAACI,GAAA,EAAD,S,ICkBnDiD,I,SAAAA,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAAe9oC,OAAOC,KAAK4oC,IAAazoC,OAAS,EAgVvD,IAAe66B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MACEsL,cAAc,MACZ5K,EADY,KAEZyJ,GAEFotB,aAAa,iBACXyQ,GANE,4BAQJC,EARI,gBASJl7B,GACE/M,EACJ,MAAO,CACL6iC,YAAaniC,EAAOuiC,WAAY94B,EAAM69B,iBAAAA,EAAkBC,4BAAAA,EAA6Bl7B,gBAAAA,KAdvE61B,EA7Ue,IAM7B,IAN8B,YAClCC,EADkC,WAElCI,EAFkC,iBAGlC+E,EAHkC,4BAIlCC,EAJkC,gBAKlCl7B,GACI,EACJ,MAAM,qBACJohC,EADI,sBAEJnK,EAFI,kBAGJoK,EAHI,oBAIJtK,EAJI,iBAKJuK,EALI,gBAMJC,EANI,mBAOJC,EAPI,qBAQJC,IACEvuB,EAAAA,EAAAA,MAGEwuB,GAAYlG,EAAAA,EAAAA,IAAuB,OAClCj+B,EAASokC,IAActN,EAAAA,EAAAA,IAA4B8C,EAAAA,GAAAA,WACnDyK,EAAgBC,IAAqBxN,EAAAA,EAAAA,IAASyN,EAAAA,GAAAA,OAC9CvL,EAAgBwL,IAAqB1N,EAAAA,EAAAA,IAAiB,KACtD2N,EAAc7G,IAAmB8G,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoB9N,EAAAA,EAAAA,IAAiB,GAE3D,IAAI+N,EAA2BlB,GAAYmB,KAC3C,OAAQ9kC,GACN,KAAK45B,EAAAA,GAAAA,SACHiL,EAAclB,GAAYoB,SAC1B,MACF,KAAKnL,EAAAA,GAAAA,SACHiL,EAAclB,GAAYH,SAC1B,MACF,KAAK5J,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHiL,EAAclB,GAAYqB,WAC1B,MACF,KAAKpL,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHiL,EAAclB,GAAYsB,SAI9B,MAAMC,GAActK,EAAAA,EAAAA,KAAauK,IAC/B,GAAInlC,IAAY45B,EAAAA,GAAAA,eACVuL,EAMN,GAAInlC,IAAY45B,EAAAA,GAAAA,iBACVuL,EADN,CAOA,GAAInlC,IAAY45B,EAAAA,GAAAA,cAAiC,CAC/C,MAAMwL,EAAoB3W,SAAS4W,eAAe,2BAC9CD,GACFA,EAAkBxnB,OAItB,GAAI5d,IAAY45B,EAAAA,GAAAA,SACd,OAAQyK,GACN,KAAKE,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SAEH,YADAD,EAAkBC,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,cAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAD,EAAkBC,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAD,EAAkBC,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADAD,EAAkBC,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADAD,EAAkBC,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAD,EAAkBC,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAD,EAAkBC,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAD,EAAkBC,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAD,EAAkBC,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAD,EAAkBC,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADAD,EAAkBC,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAD,EAAkBC,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADAD,EAAkBC,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAD,EAAkBC,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAH,EAAWxK,EAAAA,GAAAA,eACX0K,EAAkBC,EAAAA,GAAAA,MAOpBvkC,IAAY45B,EAAAA,GAAAA,UAAmD,IAArB8D,GAK9C0G,EAAWxK,EAAAA,GAAAA,UACX4K,EAAkB,IAClBX,EAAqB,CAAEztC,MAAO,KAC9BojC,EAAoB,CAAE35B,UAAM7J,IAC5B0jC,EAAsB,CAAE7iC,QAAIb,IAC5B8tC,IACAznC,YAAW,KACTuoC,EAAiBt5B,KAAKC,SA7LM,MAkL5B64B,EAAWxK,EAAAA,GAAAA,mBAvHXwK,EAAWxK,EAAAA,GAAAA,sBAPXwK,EAAWxK,EAAAA,GAAAA,iBA2IZ,CACD55B,EAAS09B,EAAkB2G,EAAgBR,EAAsBrK,EAAqBE,EACtFoK,IAGIwB,GAAoB1K,EAAAA,EAAAA,KAAaxkC,IACjC4J,IAAY45B,EAAAA,GAAAA,UAKhBwK,EAAWxK,EAAAA,GAAAA,cAEPxjC,IAAUmiC,GACZsL,EAAqB,CAAEztC,MAAAA,KAPvBouC,EAAkBpuC,KASnB,CAAC4J,EAASu4B,EAAasL,KAE1BvO,EAAAA,EAAAA,KACE,IAAOt1B,IAAY45B,EAAAA,GAAAA,UAAmD,IAArB8D,GAC7CuB,EAAAA,GAAAA,IAAsB,IAAMiG,WAC5BlvC,GACJ,CAAC0nC,EAAkB19B,EAASklC,KAG9B5P,EAAAA,EAAAA,KAAU,KACR,GAAIt1B,IAAY45B,EAAAA,GAAAA,aAahB,OAFAnL,SAASyI,iBAAiB,UAAWiI,GAAe,GAE7C,KACL1Q,SAAS0I,oBAAoB,UAAWgI,GAAe,IAVzD,SAASA,EAAc97B,IACfkiC,EAAAA,IAAaliC,EAAEmiC,UAAcD,EAAAA,IAAaliC,EAAE+7B,UAAa/7B,EAAEg8B,UAAmC,OAAvBoG,EAAAA,GAAAA,GAAgBpiC,KAC3FA,EAAEyyB,iBACFsO,EAAWxK,EAAAA,GAAAA,kBASd,CAAC55B,KAEJs1B,EAAAA,EAAAA,KAAU,KACR0O,IAEIK,IAAmBE,EAAAA,GAAAA,SACrBR,MAED,CAACC,EAAiBD,EAAkBM,IAEvC,MAAM,WACJqB,EADI,YACQC,EADR,cACqBC,GCzRtB,SACLC,EACAC,EACAzM,EACA0M,GAEA,MAAOpjC,EAAUqjC,EAAcC,IAAkBnD,EAAAA,GAAAA,MAC1CoD,EAAeC,IAAoBrP,EAAAA,EAAAA,OACnCsP,EAAqBC,IAA0BvP,EAAAA,EAAAA,MAUtD,SAAS8O,IACPnX,SAASpJ,KAAKihB,UAAUC,OAAO,oBA+CjC,OAxDAjR,EAAAA,EAAAA,KAAU,KACHuQ,EAAW3uB,SAAY6uB,IAI5BF,EAAW3uB,QAAQsvB,MAAM1f,MAAS,GAAEif,SACnC,CAACF,EAAYE,KAsBhBzQ,EAAAA,EAAAA,KAAU,KACR,IAAK3yB,EAAU,OAEf,MAAM8jC,EAAmBpjC,IACvB,MAAMqjC,EAAWnmC,KAAKomC,KAAKP,EAAsB/iC,EAAEujC,QAAUV,GAC7DL,EAAW3uB,QAASsvB,MAAM1f,MAAS,GAAE4f,OAGvC,SAASG,IACPC,IACAhB,EAASD,EAAW3uB,QAAS6vB,aAG/B,SAASD,IACPlB,IACAnX,SAAS0I,oBAAoB,YAAasP,GAAiB,GAC3DhY,SAAS0I,oBAAoB,UAAW0P,GAAU,GAClDpY,SAAS0I,oBAAoB,OAAQ0P,GAAU,GAC/CZ,IAOF,OAJAxX,SAASyI,iBAAiB,YAAauP,GAAiB,GACxDhY,SAASyI,iBAAiB,UAAW2P,GAAU,GAC/CpY,SAASyI,iBAAiB,OAAQ2P,GAAU,GAErCC,IACN,CAACV,EAAqBF,EAAeL,EAAYC,EAAUnjC,EAAUsjC,IAEjE,CAAEP,WA5CT,SAAoBriC,GAClBA,EAAEyyB,iBAEFrH,SAASpJ,KAAKihB,UAAUU,IAAI,oBAE5Bb,EAAiB9iC,EAAEujC,SACnBP,EAAuBR,EAAW3uB,QAAS6vB,aAC3Cf,KAqCmBL,YAlCrB,SAAqBtiC,GACnBA,EAAEyyB,iBACF+P,EAAW3uB,QAASsvB,MAAM1f,MAAQ,GAClCuS,KA+BgCuM,cAAAA,GDwN9BqB,CAAU9C,EAAWF,EAAoBC,EAAsBzhC,GAE7DykC,GAA6BtM,EAAAA,EAAAA,KAAah4B,IAC9CwhC,EAAWxK,EAAAA,GAAAA,UACX0K,EAAkB1hC,KACjB,IAEH,OACE,0BACE/L,GAAG,aACHupC,IAAK+D,GAEL,mBAACjM,GAAA,EAAD,CACEpO,KAAM6T,EAA8B,OAASwJ,EAAAA,GAC7C9G,YAAauD,GACbzL,UAAW0M,EACXzB,eAAa,EACbC,oBAAqBM,GAAYmB,OAE/BniC,IACA,OAAQkiC,GACN,KAAKlB,GAAYoB,SACf,OACE,mBAAC,GAAD,CACEpiC,SAAUA,EACV02B,QAAS6L,EACTrD,gBAAiBuC,IAGvB,KAAKT,GAAYH,SACf,OACE,mBAAC,GAAD,CACE7gC,SAAUA,EACVykC,cAAe/C,EACfI,aAAcA,EACd7G,gBAAiBA,EACjBC,eAAgBqJ,EAChB7N,QAAS6L,EACT5L,qBAAsBqE,IAG5B,KAAKgG,GAAYqB,WACf,OACE,mBAAC,GAAD,CACExR,IAAKmR,EACLhiC,SAAUA,EACV0kC,WAAS,EACTrnC,QAASA,EACT6hC,gBAAiBuC,EACjB/K,QAAS6L,IAGf,KAAKvB,GAAYsB,SACf,OACE,mBAAC,GAAD,CACEzR,IAAKmR,EACLhiC,SAAUA,EACV3C,QAASA,EACT6hC,gBAAiBuC,EACjB/K,QAAS6L,IAGf,QACE,OACE,mBAAC,GAAD,CACEllC,QAASA,EACTu4B,YAAaA,EACbI,WAAYA,EACZK,eAAgBA,EAChB4E,gBAAiBA,EACjBiE,gBAAiBuC,EACjBnL,cAAeqM,EACfzH,eAAgBqJ,EAChB7N,QAAS6L,EACT5L,qBAAsBqE,QAMlC,0BACEtH,UAAU,gBACViR,YAAa5B,EACb6B,UAAW3B,EACX4B,cAAe7B,S,gDE1WvB,MCkBA,GAlBsB,KACpB,MAAOtN,EAAMoP,IAAW3Q,EAAAA,EAAAA,IAAwBjQ,GAAAA,EAAAA,OAchD,OAZAyO,EAAAA,EAAAA,KAAU,KACR,MAAMoS,GAAe/3B,EAAAA,EAAAA,KAAS,KAC5B83B,EAAQ5gB,GAAAA,EAAAA,SAPG,KAQA,GAIb,OAFAzqB,OAAO86B,iBAAiB,SAAUwQ,GAE3B,KACLtrC,OAAO+6B,oBAAoB,SAAUuQ,MAEtC,IAEIrP,G,4FCjBT,MAQA,IAAetC,EAAAA,EAAAA,KARiCuK,IAC9C,MAAM,OAAEhhC,GAAWghC,EACbqH,GAAsBnH,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,uBAAwBnhC,GAGnF,OAAOqoC,EAAsB,mBAACA,EAAwBrH,QAAYtqC,KCgRpE,IAAe+/B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAA+D,cAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B0xC,EAAY7sC,QAAQY,IAAQwsC,EAAAA,EAAAA,IAAcxsC,IAEhD,IAAKA,GAAQA,EAAKiO,eAAgBw+B,EAAAA,EAAAA,IAAqBnyC,GACrD,MAAO,CACLoyC,QAAQ,GAIZ,MAAMjoB,GAAMC,EAAAA,EAAAA,IAAcpqB,EAAQC,GAC5BoyC,GAAiBC,EAAAA,EAAAA,IAAqBtyC,EAAQC,GAC9CsyC,EAAmC,WAApBrrC,GAAgChH,IAAakB,EAAAA,GAC5DoxC,EAAyC,WAApBtrC,GAAgChH,IAAakB,EAAAA,GAClEqxC,GAAqBlsC,EAAAA,EAAAA,IAAyBvG,GAE9C0yC,EAAgB5tC,QAAQqlB,IAAOwoB,EAAAA,EAAAA,IAAoB3yC,EAAQmqB,EAAIhpB,KAC/DyxC,GAAeF,GAAiB5tC,SAAQ+tC,EAAAA,EAAAA,IAA0B7yC,EAAQC,IAC1E6yC,EAAehuC,QACnBytC,IAAiBZ,IAAaoB,EAAAA,EAAAA,IAAiBrtC,KAAUA,EAAKowB,aAE1Dkd,EAAYT,GAAgBC,EAC5BS,EAAU9T,EAAAA,KAAuBjY,EAAAA,EAAAA,IAASxhB,EAAKvE,MAAQkxC,IAAmBloB,EAC1E+oB,EAAUX,IAAiBF,IAAmBS,EAC9CK,EAAWZ,IAAiBO,EAC5BM,EAAoBjU,EAAAA,IAAuBz5B,EAAK2tC,aAChDC,EAAqBnU,EAAAA,KAAwBz5B,EAAK2tC,gBAClD,UAAA3tC,EAAK6tC,mBAAL,eAAkBC,aAAe9tC,EAAK+tC,YAAajzB,EAAAA,EAAAA,IAAiB9a,IAI1E,MAAO,CACL0sC,QAAQ,EACRT,UAAAA,EACAc,mBAAAA,EACAG,YAAAA,EACAF,cAAAA,EACAI,aAAAA,EACAE,UAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAQ,kBAbqB,UAAGhuC,EAAKgU,gBAAR,aAAG,EAAeg6B,kBAcvCP,SAAAA,EACAC,kBAAAA,EACAE,mBAAAA,EACAK,oBAhBuB,UAAGjuC,EAAKgU,gBAAR,aAAG,EAAe4I,mBA9B3BsgB,EA7N6B,IAkB3C,IAlB4C,OAChD3iC,EADgD,SAEhDC,EAFgD,OAGhDkyC,EAHgD,UAIhDT,EAJgD,YAKhDiB,EALgD,cAMhDF,EANgD,aAOhDI,EAPgD,UAQhDE,EARgD,QAShDC,EATgD,QAUhDC,EAVgD,kBAWhDQ,EAXgD,SAYhDP,EAZgD,kBAahDC,EAbgD,mBAchDE,EAdgD,oBAehDK,EAfgD,mBAgBhDlB,EAhBgD,iBAiBhDmB,GACI,EACJ,MAAM,YACJC,EADI,eAEJlrB,EAFI,oBAGJmrB,EAHI,WAIJC,EAJI,YAKJC,EALI,4BAMJC,IACEh0B,EAAAA,EAAAA,MAEEi0B,GAAgB3L,EAAAA,EAAAA,IAA0B,OACzC+C,EAAYC,IAAiBnK,EAAAA,EAAAA,KAAS,IACtC+S,EAAcC,IAAmBhT,EAAAA,EAAAA,SAAsC9gC,GAExE+zC,GAAuBnP,EAAAA,EAAAA,KAAY,KACvCqG,GAAc,GACd,MAAM+I,EAAOJ,EAAc1yB,QAAS+yB,wBACpCH,EAAgB,CAAEnjB,EAAGqjB,EAAKE,MAAOziB,EAAGuiB,EAAKG,WACxC,IAEGC,GAAwBxP,EAAAA,EAAAA,KAAY,KACxCqG,GAAc,KACb,IAEGoJ,GAAuBzP,EAAAA,EAAAA,KAAY,KACvCkP,OAAgB9zC,KACf,IAEGs0C,GAAuB1P,EAAAA,EAAAA,KAAY,KACvC2O,EAAY,CAAE5zC,OAAAA,MACb,CAAC4zC,EAAa5zC,IAEX40C,GAAiB3P,EAAAA,EAAAA,KAAY,KACjCvc,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEEmsB,GAAmB5P,EAAAA,EAAAA,KAAY,KACnC6O,EAAW,CAAE9zC,OAAAA,MACZ,CAACA,EAAQ8zC,IAENgB,GAA0B7P,EAAAA,EAAAA,KAAY,KAC1C+O,EAA4B,CAAE/mC,OAAQ8nC,EAAAA,GAAAA,iBACrC,CAACf,IAEEgB,GAAoB/P,EAAAA,EAAAA,KAAY,KACpC4O,IAEI1mC,EAAAA,GAEkB2rB,SAASgH,cAAgC,uBACjD1X,QAEZ1hB,YAAW,KACT,MAAMuuC,EAAcnc,SAASgH,cAAgC,mCACzDmV,GACFA,EAAY7sB,UA3EQ,OA+EzB,CAACyrB,KAMJlU,EAAAA,EAAAA,KAAU,KACR,GAAKoT,EAeL,OAFAja,SAASyI,iBAAiB,UAAWiI,GAAe,GAE7C,KACL1Q,SAAS0I,oBAAoB,UAAWgI,GAAe,IAZzD,SAASA,EAAc97B,GAEnBwnC,EAAAA,KAAYtF,EAAAA,IAAaliC,EAAEmiC,UAAcD,EAAAA,IAAaliC,EAAE+7B,WAAc/7B,EAAEg8B,UAAmC,OAAvBoG,EAAAA,GAAAA,GAAgBpiC,KAEpGA,EAAEyyB,iBACF6U,QASH,CAACjC,EAAWiC,IAEf,MAAMjyC,GAAOm/B,EAAAA,GAAAA,KAEb,OACE,0BAAKxB,UAAU,kBACXvzB,EAAAA,IACA,sCACGwmC,GAAoBd,GACnB,mBAACpQ,GAAA,EAAD,CACEC,KAAK,OACLmC,QAAM,EACN8I,OAAK,EACL1L,QAAS0S,GAER5xC,EAAK2uC,EAAY,qBAAuB,qBAG5CiC,GAAoBhB,GACnB,mBAAClQ,GAAA,EAAD,CACEC,KAAK,OACLmC,QAAM,EACN8I,OAAK,EACL1L,QAAS2S,GAER7xC,EAAK,aAGT4wC,GAAoBlB,GACnB,mBAAChQ,GAAA,EAAD,CACEC,KAAK,OACLmC,QAAM,EACN8I,OAAK,EACL1L,QAAS4S,GAER9xC,EAAK,eAGTgwC,GACC,mBAACtQ,GAAA,EAAD,CACElyB,OAAK,EACLs0B,OAAQ2N,EACRlQ,MAAM,cACNI,KAAK,UACLT,QAAS+S,EACTlQ,UAAU,uBAEV,wBAAGpE,UAAU,iBAGhBsS,GACC,mBAACvQ,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UAELT,QA/EZ,WACE8R,EAAY,CAAEtnC,OAAQzM,KA+EZ8kC,UAAU,QAEV,wBAAGpE,UAAU,iBAKpB77B,QAAQ6uC,IACP,mBAACjR,GAAA,EAAD,CACElyB,OAAK,EACLmwB,UAAU,eACVmE,OAAQ2N,EACRlQ,MAAM,cACNI,KAAK,UACLT,QAAS6S,EACThQ,UAAuB/hC,EAAZ2uC,EAAiB,oBAA4B,mBAExD,wBAAGhR,UAAU,cACb,0BAAKA,UAAU,SAASgT,IAG5B,mBAACjR,GAAA,EAAD,CACEgI,IAAKwJ,EACLvT,UAAW2K,EAAa,SAAW,GACnC96B,OAAK,EACLs0B,QAAS13B,EAAAA,GACTu1B,KAAK,UACLJ,MAAM,cACN6S,SAAUhD,EACVrN,UAAU,eACV7C,QAASmS,GAET,wBAAG1T,UAAU,eAEdwT,GACC,mBAAC,GAAD,CACEl0C,OAAQA,EACRC,SAAUA,EACV0J,OAAQ0hC,EACR+J,OAAQlB,EACRmB,iBAAkBloC,EAAAA,KAA4BwmC,EAC9CjC,UAAWA,EACXiB,YAAaA,EACbF,cAAeA,EACfI,aAAcA,EACdE,UAAWA,EACXC,QAASA,EACTC,QAASA,EACTQ,kBAAmBA,EACnBP,SAAUA,EACVC,kBAAmBA,EACnBE,mBAAoBA,EACpBiC,mBAAoBX,EACpBY,cAAeP,EACfjJ,QAAS0I,EACTe,oBAAqBd,S,oCC3QhB,SAASe,GAAiBnyC,GAAsB,MAC7D,MAAMoyC,EAAepyC,IAAWqyC,EAAAA,EAAAA,IAA4BryC,GACtDqK,EAAUrK,MAAAA,GAAH,UAAGA,EAAS+G,eAAZ,aAAG,EAAkBsD,QAC5BioC,EAAwBF,GAAgB/nC,KAAYkoC,EAAAA,EAAAA,OAAqBH,EAAa5tC,SAAS,eAC9FguC,EAAkBC,IAAuB5U,EAAAA,EAAAA,IAAS6U,GAAAA,IACnD1xC,EAAYhB,MAAAA,OAAH,EAAGA,EAASpC,GAiB3B,OAfA+0C,EAAAA,EAAAA,KAAgB,KACTL,IAILM,EAAAA,GAAAA,IAAiB,OAAM5xC,IAAaoxC,GACjCS,KAAKJ,GACLK,OAAOrnC,IACF0T,EAAAA,IAEFC,QAAQjT,MAAMV,QAGnB,CAACzK,EAAWsxC,EAAuBF,IAE/BE,EAAwBE,EAAmBJ,E,oCCsJpD,SAASW,GAASrlB,EAAWc,EAAWX,EAAemlB,EAAgBC,GACrE,MAAQ,IAAGvlB,KAAKc,EAAIykB,KAAUA,KAAUA,eACtCplB,OAAWmlB,EAAS,EAAIC,KAAUA,KAAUA,YAAiBplB,OAqCjE,UAAeiP,EAAAA,EAAAA,KA3M+B,IAExC,IAFyC,MAC7C1oB,EAD6C,MACtCvF,GACH,EAEJ,MAAMqkC,GAAelO,EAAAA,EAAAA,IAAuB,MAEtCmO,GAAetS,EAAAA,EAAAA,KAAQ,IA8E/B,SAAyBzsB,EAAevF,GACtC,MAAMukC,EAAeh/B,EAAQvF,EAAQ,EAC/BwkC,EAmBR,SAAsBj/B,GACpB,IAAIi/B,EAAY,EAahB,OAZc,IAAVj/B,EACFi/B,EAAY,GACO,IAAVj/B,EACTi/B,EAAY,GACO,IAAVj/B,EACTi/B,EAAY,IACO,IAAVj/B,GAEAA,EAAQ,KADjBi/B,EAAY,KAKPA,EAjCWC,CAAal/B,GACzBm/B,EAmCR,SAAuBn/B,EAAevF,GACpC,IAAIwkC,EAAY,GAahB,OAZc,IAAVj/B,EACFi/B,EAAY,GACO,IAAVj/B,EACTi/B,EAAY,GACO,IAAVj/B,EACTi/B,EAAsB,IAAVxkC,EAAc,GAAK,IACZ,IAAVuF,GAEAA,EAAQ,KADjBi/B,EAAY,KAKPA,EAjDYG,CAAcp/B,EAAOg/B,GAClCK,EAmDR,SAAwBr/B,EAAei/B,GACrC,OAAOj/B,GAAS,EAAI,GAAKi/B,EAAYj/B,EAAQ,GAAKA,EAAQ,GApDtCs/B,CAAet/B,EAAOi/B,GAEpCM,EAAc,WAAUv/B,IACxBw/B,EAoDR,SAAqBh2C,EAAYy1C,EAAmBj/B,GAGlD,IAAIy/B,EAAI,GACR,GAAc,IAAVz/B,EACFy/B,EAAId,GAAS,EAAG,EAAG,EAAGM,EAJT,GAKTN,GAAS,EAAG,GAAI,EAAGM,EAAY,EALtB,GAMTN,GAAS,EAAG,GAAI,EAAGM,EANV,QAQb,IAAK,IAAIvkC,EAAI,EAAGA,EAAIsF,EAAOtF,IACzB+kC,GAAKd,GAAS,GAAIM,EAAY,GAAKvkC,EAAG,EAAGukC,EAT9B,GAaf,MACG,iBAAgBz1C,uBACJi2C,yBApEEC,CAAYH,EAAYN,EAAWj/B,GAE9C2/B,EA4ER,SAA2BllC,EAAewkC,EAAmBj/B,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVvF,EAAc,EAAIwkC,EAAY,EAGzB,IAAVj/B,EACY,IAAVvF,EACK,EACY,IAAVA,EACF,GAGF,IAECwkC,EAAY,GAAKxkC,EA5FJmlC,CAAkBZ,EAAcC,EAAWj/B,GAC5D6/B,EA+FR,SAA4BplC,EAAeuF,EAAei/B,EAAmBI,GAC3E,OAAIr/B,GAAS,GAITvF,GAAS,EAHJ,EAKEA,GAASuF,EAAQ,EACnBq/B,EAAc,IAGfJ,EAAY,GAAK,GAAKxkC,EAAQ,IAAMwkC,EAAY,GA1GhCa,CAAmBd,EAAch/B,EAAOi/B,EAAWI,GAC3E,MAAO,CACLF,WAAAA,EACAK,SAAAA,EACAG,eAAAA,EACAE,gBAAAA,EACAR,YAAAA,EACAE,WAAAA,GA9FOQ,CAAgB//B,EAAOvF,IAC7B,CAACuF,EAAOvF,IAyCX,IAvCAwtB,EAAAA,EAAAA,KAAU,KACR,IAAK6W,EAAaj1B,QAChB,OAGF,MAAM,YACJw1B,EADI,gBAEJQ,EAFI,WAGJV,EAHI,eAIJQ,EAJI,WAKJJ,EALI,SAMJC,GACET,EAEEiB,EAAalB,EAAaj1B,QAAQo2B,kBACxC,GAAInB,MAAAA,GAAAA,EAAcj1B,QAAS,CACzB,MAAMq2B,EAAiBpB,EAAaj1B,SAC9B,MAAEsvB,GAAU+G,EAClB/G,EAAMyF,OAAU,GAAES,MAClBlG,EAAMgH,UAAa,eAAcN,OACjC1G,EAAMqG,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAe9X,cAAc,OACnCiY,EAAMH,EAAe9X,cAAc,OACnCkY,EAAOJ,EAAe9X,cAAc,QACrCgY,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIlH,MAAMyF,OAAU,GAAEO,MACtBkB,EAAIlH,MAAMgH,UAAa,cAAaR,WAGvC,CAACZ,IAEU,IAAV/+B,EACF,OACE,0BAAKgpB,UAAU,yBACb,0BACEA,UAAU,kCACV+J,IAAK+L,KAMb,MAAM,YACJO,EADI,gBACSQ,EADT,WAC0BV,EAD1B,eACsCQ,EADtC,WACsDJ,GACxDR,EAEJ,OACE,0BAAK/V,WAAWqE,EAAAA,GAAAA,GAAe,wBAAyBrtB,EAnElC,GAmE+D,+BACnF,0BACEgpB,UAAU,gCACV+J,IAAK+L,EACL3F,MACG,oBAAmBoG,uCACVF,+BAAyCQ,SAGrD,gCACA,0BACE7W,UAAU,6BACVmQ,MAAQ,WAAUgG,8BAAuCQ,eCcnE,IAAejX,EAAAA,EAAAA,KA9E2B,IAEpC,IAFqC,QACzC98B,EADyC,MAChCoU,EADgC,MACzBvF,EADyB,YAClB+lC,EADkB,UACLxX,EADK,eACMyX,EADN,QACsBlW,EADtB,iBAC+BmW,GACpE,EACJ,MAAMr1C,GAAOm/B,EAAAA,GAAAA,KACPmW,EAAiB5C,GAAiBnyC,GAClCg1C,GAAeC,EAAAA,GAAAA,IAASC,EAAAA,EAAAA,IAAoBl1C,EAAS,cAErDkB,GAAOi0C,EAAAA,GAAAA,GAAqB11C,EAAMO,EAASuB,QAAQwzC,KAClDK,EAAmBC,EAAiBC,IAAoBzL,EAAAA,GAAAA,KAEzD0L,GAAqB5T,EAAAA,EAAAA,KAAY,KACrC2T,IAEIT,GACFA,EAAe70C,EAAQpC,MAExB,CAAC03C,EAAkBT,EAAgB70C,EAAQpC,KAE9C,OACE,0BAAKw/B,WAAWqE,EAAAA,GAAAA,GAAe,8BAA+BrE,IAC3DhpB,EAAQ,GACP,mBAAC+qB,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,UACLJ,MAAM,cACN5B,UAAU,kBACVoE,UAAW/hC,EAAK,gCAChBk/B,QAASmW,GAET,wBAAG1X,UAAU,mBAGhByX,GACC,mBAAC1V,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,UACLJ,MAAM,cACNwC,UAAW/hC,EAAK,0BAChB29B,UAAU,eACVuB,QAAS0W,GAET,wBAAGjY,UAAU,gBAGjB,mBAACoY,GAAA,EAAD,CACEnvC,OAAQ+uC,EACR3M,QAAS6M,EACTp0C,KAAK,wCACLu0C,aAAa,QACbC,eAAgBH,IAElB,0BAAKnY,UAAU,sBAAsBuB,QAASA,EAASE,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAC/E,mBAAC,GAAD,CACEqX,MAAOA,EACPvF,MAAOA,IAERkmC,GAcT,SAAyB3C,EAAsB1c,GAC7C,MAAM,MAAE7H,EAAF,OAASmlB,IAAW2C,EAAAA,GAAAA,MAE1B,OACE,0BAAKC,IAAKlgB,GAAW0c,EAAcvkB,MAAOA,EAAOmlB,OAAQA,EAAQ6C,IAAI,KAlB9CC,CAAgBf,EAAgBC,GACnD,0BAAK5X,UAAU,gBACb,0BAAKA,UAAU,QAAQyB,IAAI,QACxB+V,GAAgB,GAAEn1C,EAAK,oBAAoBoP,EAAQ,EAAK,KAAGuF,EAAQvF,GAAU,MAEhF,wBAAGgwB,IAAI,QAAQ39B,IAGjB,mBAAC60C,GAAA,EAAD,W,oCC9FD,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAmD,uDAA9B,YACnF,MAAMzqC,EAAMuqC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAIC,SAASC,IAClBH,EAAII,OAAS,KACXC,GAAML,EAAKA,EAAI1oB,MAAQqoB,EAAOK,EAAIvD,OAASkD,EAAOC,GAC/CtD,MAAMgE,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOT,IAAIC,gBAAgBO,MAE5BhE,KAAK6D,GACLK,SAAQ,KACHd,aAAiBG,MACnBC,IAAIW,gBAAgBtrC,OAI5B6qC,EAAIX,IAAMlqC,KA2BdkB,eAAegqC,GACbL,EAAuB1oB,EAAemlB,GAChB,IADgCmD,EAChC,uDADqD,YAG3E,KAAI,sBAAuBhzC,QAwBzB,OAAO8zC,GAAaV,EAAK1oB,EAAOmlB,OAAQj2C,EAAWo5C,GAvBnD,IACE,MAAMe,QAAe/zC,OAAOg0C,kBAAkBZ,EAC5C,CAAEa,YAAavpB,EAAOwpB,aAAcrE,EAAQsE,cAAe,SAC7D,GAAIJ,EAAOlE,SAAWA,GAAUkE,EAAOrpB,QAAUA,EAC/C,MAAM,IAAIipB,MAAM,sCAElB,aAAa,IAAIL,SAASc,IACxB,MAAMC,EAAShiB,SAASiiB,cAAc,UACtCD,EAAO3pB,MAAQqpB,EAAOrpB,MACtB2pB,EAAOxE,OAASkE,EAAOlE,OACvB,MAAM0E,EAAMF,EAAOG,WAAW,kBAC1BD,EACFA,EAAIE,wBAAwBV,GAE5BM,EAAOG,WAAW,MAAOE,UAAUX,EAAQ,EAAG,GAEhDM,EAAOM,OAAOP,EAAKpB,MAErB,MAAO/rC,GAEP,OAAO6sC,GAAaV,EAAK1oB,EAAOmlB,OAAQj2C,EAAWo5C,IAOzD,SAASc,GACPV,EAAuB1oB,EAAemlB,GAChB,IADgCnpB,EAChC,uDAD+C,GAAKssB,EACpD,uDADyE,YAE/F,MAAMqB,EAAShiB,SAASiiB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MACxBI,EAAKviB,SAASiiB,cAAc,UAC5BO,EAAOD,EAAGJ,WAAW,MAK3B,GAHAH,EAAO3pB,MAAQA,EACf2pB,EAAOxE,OAASA,EAEZuD,EAAI1oB,MAAQhE,EAAOgE,EAAO,CAC5B,MAAMoqB,EAAM,EAAIpuB,EAChB,IAAIquB,EAAM,CACRrqB,MAAOvmB,KAAKG,MAAM8uC,EAAI1oB,MAAQhE,GAC9BmpB,OAAQ1rC,KAAKG,MAAM8uC,EAAIvD,OAASnpB,IAQlC,IALAkuB,EAAGlqB,MAAQqqB,EAAIrqB,MACfkqB,EAAG/E,OAASkF,EAAIlF,OAEhBgF,EAAKH,UAAUtB,EAAK,EAAG,EAAG2B,EAAIrqB,MAAOqqB,EAAIlF,QAElCkF,EAAIrqB,MAAQhE,EAAOgE,GACxBqqB,EAAM,CACJrqB,MAAOvmB,KAAKG,MAAMywC,EAAIrqB,MAAQhE,GAC9BmpB,OAAQ1rC,KAAKG,MAAMywC,EAAIlF,OAASnpB,IAElCmuB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAIrqB,MAAQoqB,EAAKC,EAAIlF,OAASiF,EAAK,EAAG,EAAGC,EAAIrqB,MAAOqqB,EAAIlF,QAGnF0E,EAAIG,UAAUE,EAAI,EAAG,EAAGG,EAAIrqB,MAAOqqB,EAAIlF,OAAQ,EAAG,EAAGwE,EAAO3pB,MAAO2pB,EAAOxE,aAE1E0E,EAAIG,UAAUtB,EAAK,EAAG,EAAGiB,EAAO3pB,MAAO2pB,EAAOxE,QAGhD,OAAO,IAAIyD,SAASC,IAClBc,EAAOM,OAAOpB,EAASP,M,eC9F3B,MAAMgC,GAAkB,CAAEtqB,MAAO,IAAKmlB,OAAQ,KACxCoF,GAAe,IA4DrB,GAzDgC,CAC9Bp4C,EAAqBQ,EAA4B2B,KAEjD,MAAM1C,GAAOm/B,EAAAA,GAAAA,MAEP,MAAEyZ,EAAF,MAASC,IAAU7iB,EAAAA,EAAAA,IAAkBz1B,GACrCga,EAAQq+B,EAASA,EAAMr+B,OAASq+B,EAAME,SAAYD,EAAQ,gBAAkB,GAC5EE,GAASH,MAAAA,OAAA,EAAAA,EAAOI,YAAcj4C,IAAUG,EAAAA,EAAAA,IAAelB,EAAMe,GAC7Dk4C,EAASv2C,IAAQw2C,EAAAA,EAAAA,GAAal5C,EAAM0C,IAAU,WAE9Cy2C,EAAkBP,IAASQ,EAAAA,EAAAA,IAAiBR,KAAUnD,EAAAA,EAAAA,IAAoBl1C,EAAS,aACnF84C,EAAat4C,IAAUu4C,EAAAA,EAAAA,IAAkBv4C,EAAQ,OACjD+J,EAAQ8tC,GAASO,GAAoBN,GAASQ,EAC9CE,GAAQ/D,EAAAA,GAAAA,GAAS1qC,GAEjB60B,GAAOyB,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsBwX,EAAkBC,EAAkB5sC,GACxD,IAAKA,EAAK,OAAOysC,GACjB,GAAIE,EAAO,OACT,GAAI,UAACA,EAAMY,sBAAP,QAAC,EAAsBh3C,OAAQ,OACnC,MAAMi3C,EAAYb,EAAMY,eAAe1zC,MAAM65B,GAAuB,MAAdA,EAAKthC,OAC3D,OAAOo7C,GAAab,EAAMY,eAAe,GAG3C,OAAIX,EACKa,GAAAA,QADT,EAlCSC,CAAaf,EAAOC,EAAOU,IACjC,CAACX,EAAOW,EAAOV,KACVz4C,OAAQ6L,GCvCD,EAAI2tC,EAAsBC,EAAaC,KACtD,MAAO3/B,EAAW4/B,IAAgB3b,EAAAA,EAAAA,KAAkB,IAC7C1xB,EAAOstC,IAAY5b,EAAAA,EAAAA,OACnBh+B,EAAQ65C,IAAa7b,EAAAA,EAAAA,IAAwB0b,GAkBpD,OAjBAld,EAAAA,EAAAA,KAAU,KACRmd,GAAa,GACb,IAAIG,GAAe,EAUnB,OATAN,IAAKxG,MAAM0E,IACLoC,IACJH,GAAa,GACbE,EAAUnC,OACR9rC,IACEkuC,IACJH,GAAa,GACbC,EAAShuC,OAEJ,KACLkuC,GAAe,KAGhBL,GACI,CAAE1/B,UAAAA,EAAWzN,MAAAA,EAAOtM,OAAAA,IDkBH+5C,EAAS,IAanC,SAAyBluC,EAAc0zB,GACrC,IAAK1zB,EAAK,OAAO+qC,QAAQC,QAAQmD,IACjC,IAAKza,EAAM,ODnCN,SACL6W,EAAsBpoB,EAAemlB,GACpB,IADoCmD,EACpC,uDADyD,YAE1E,MAAMzqC,EAAMuqC,aAAiBG,KAAOC,IAAIC,gBAAgBL,GAASA,EAC3DM,EAAM,IAAIC,MAChB,OAAO,IAAIC,SAASC,IAClBH,EAAII,OAAS,KACXC,GAAML,EAAK1oB,EAAOmlB,EAAQmD,GACvBtD,MAAMgE,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOT,IAAIC,gBAAgBO,MAE5BhE,KAAK6D,GACLK,SAAQ,KACHd,aAAiBG,MACnBC,IAAIW,gBAAgBtrC,OAI5B6qC,EAAIX,IAAMlqC,KCgBMouC,CAAYpuC,EAAK0sC,GAAcA,IACjD,MAAMrqB,EAAMzmB,KAAKymB,IAAIqR,EAAKvR,MAAOuR,EAAK4T,QACtC,OAAIjlB,EAAMqqB,GAEDpC,GAAWtqC,EADJ0sC,GAAerqB,GAGxB0oB,QAAQC,QAAQhrC,GApBrBquC,CAAgBf,EAAO5Z,IACtB,CAAC4Z,EAAO5Z,GAAOya,IAClB,OAAOhZ,EAAAA,EAAAA,KAAQ,KACNmZ,EAAAA,GAAAA,IAAmB,CACxBhgC,MAAAA,EACAw+B,OAAAA,EACAE,MAAAA,EACAuB,QAAS,CAAC,CAAErE,IAAKlqC,OAElB,CAACgtC,EAAOF,EAAQx+B,EAAOtO,K,0BE8N5B,UAAe2zB,EAAAA,EAAAA,KACb,CAAC5iC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAMQ,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,SAClC,OAAEkG,EAAF,aAAUC,EAAV,QAAwBC,GAAYrG,EAAOsG,YAEjD,MAAO,CACLvC,OAAAA,EACA2B,KAAAA,EACAS,OAAAA,EACAC,aAAAA,EACAC,QAAAA,KAXN,EAhO+C,IASzC,IAT0C,QAC9C9C,EAD8C,UAE9Co9B,EAF8C,KAG9C8c,EAH8C,OAI9C15C,EAJ8C,KAK9C2B,EAL8C,OAM9CS,EAN8C,aAO9CC,EAP8C,QAQ9CC,GACI,EACJ,MAAM,qBACJq3C,EADI,2BAEJC,EAFI,oBAGJC,EAHI,aAIJ33C,EAJI,iBAKJse,IACEtE,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,MACP,MAAEyZ,EAAF,MAASC,EAAT,MAAgB/iB,IAAUE,EAAAA,EAAAA,IAAkBz1B,GAC5Cs6C,EAAU/4C,QAAQ+2C,GAAS/iB,GAC3BglB,EAAa/5C,GAASG,EAAAA,EAAAA,IAAelB,EAAMe,QAAUzD,EACrDy9C,EAAYpsB,GAAAA,IAA0B8mB,EAAAA,EAAAA,IAAoBl1C,EAAS,WACnEy6C,EAAgBC,GAAwB16C,EAASQ,EAAQ2B,IAEzD,UACJw4C,EADI,KAEJC,EAFI,UAGJC,EAHI,iBAIJC,EAJI,qBAKJC,EALI,QAMJC,EANI,OAOJC,EAPI,UAQJC,EARI,YASJC,EATI,gBAUJC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYt7C,IACZu7C,EAAAA,EAAAA,IAAiBv7C,GACjBs6C,EAAU,QAAU,QACpBE,OACAz9C,EACA09C,OACA19C,GACA,OACAA,OACAA,GACAuyB,EAAAA,EAAAA,IAAetvB,IACf,GAIIw7C,EAAiBlB,GAAWO,GAClCxe,EAAAA,EAAAA,KAAU,KACR,GAAKmf,EAML,OAFA5tB,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAAC4tB,IAEJ,MAAMC,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9Bj/B,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACzD,CAAC8E,EAAc1C,EAAQtD,OAAQsD,EAAQpC,KAEpCuqC,GAAcxG,EAAAA,EAAAA,KAAY,KAC1BkZ,GACFF,IAEF35B,KACA06B,EAAAA,GAAAA,MACAd,MACC,CAAC55B,EAAkB65B,EAAWF,EAAWC,IAEtCe,GAAqBha,EAAAA,EAAAA,KAAalwB,IACtC0oC,EAAqB,CAAEv3C,OAAQ6O,EAAQ,MAEvCypC,EAAUzpC,EAAQ,OACjB,CAAC0oC,EAAsBe,IAEpBU,GAAoBja,EAAAA,EAAAA,KAAY,KAChCz7B,EAAAA,KAAiB8J,EAAAA,KACrBmrC,IACAd,EAAoB,CAAEv3C,SAAUA,OAC/B,CAACA,EAASu3C,EAAqBc,IAE5BU,GAAsBla,EAAAA,EAAAA,KAAY,KACjB,IAAjB9+B,GACFu4C,EA9FqB,KA+FrBhB,EAA2B,CAAEv3C,aA/FR,QAiGrBu4C,EAAgB,GAChBhB,EAA2B,CAAEv3C,aAAc,OAE5C,CAACA,EAAcu3C,EAA4BgB,IAExCU,GAAajb,EAAAA,EAAAA,KAAQ,IACV,IAAXj+B,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAIo3C,EAIJ,OACE,0BAAK9c,WAAWqE,EAAAA,GAAAA,GAAe,cAAerE,GAAYyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAClF,mBAACoiC,GAAA,EAAD,CACElyB,OAAK,EACLs0B,QAAS13B,EAAAA,GACTm1B,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACVyU,SAAUmJ,IACVrc,QAASoc,EACTvZ,UAAU,kBAEV,wBAAGpE,UAAU,wBAEf,mBAAC+B,GAAA,EAAD,CACElyB,OAAK,EACLs0B,QAAS13B,EAAAA,GACTm1B,MAAM,cACNI,KAAK,UACLhC,WAAWqE,EAAAA,GAAAA,GAAe,cAAe,gBAAiBoZ,EAAY,QAAU,QAChFlc,QAASgc,EACTnZ,UAAWqZ,EAAY,cAAgB,cAEvC,wBAAGzd,UAAU,cACb,wBAAGA,UAAU,gBAEf,mBAAC+B,GAAA,EAAD,CACElyB,OAAK,EACLs0B,QAAS13B,EAAAA,GACTm1B,MAAM,cACNI,KAAK,UACLhC,UAAU,gBACVyU,SAAUoJ,IACVtc,QAASmc,EACTtZ,UAAU,cAEV,wBAAGpE,UAAU,oBAGf,0BAAKA,UAAU,sBAAsBuB,QAAS8c,GAC3CpD,EAmDT,SAAqBA,GACnB,MAAM,MAAEr+B,EAAF,UAASy+B,EAAT,SAAoBF,GAAaF,EAEvC,OACE,sCACE,0BAAKjb,UAAU,QAAQyB,IAAI,SAAQkd,EAAAA,GAAAA,GAAW/hC,GAASu+B,IACtDE,GACC,0BAAKrb,UAAU,WAAWyB,IAAI,SAAQkd,EAAAA,GAAAA,GAAWtD,KA1DxCuD,CAAY3D,GAgE7B,SAAqB4D,EAAkB1B,GACrC,OACE,sCACE,0BAAKnd,UAAU,QAAQyB,IAAI,QAAQ0b,IAAcwB,EAAAA,GAAAA,GAAWxB,IAC5D,0BAAKnd,UAAU,WAAWyB,IAAI,QAAQod,IApENC,CAAYz8C,EAAK,eAAgB86C,GAC/D,mBAACxE,GAAA,EAAD,OAGF,mBAAC5W,GAAA,EAAD,CACElyB,OAAK,EACLmwB,UAAU,8BACV4B,MAAM,cACNI,KAAK,UACLoC,UAAU,SACV2a,sBAAoB,GAEpB,wBAAG/e,UAAW0e,EAAYnd,QAASid,KACjC5rC,EAAAA,IACA,sCACE,0BAAKotB,UAAU,yBACf,0BAAKA,UAAU,iBACb,mBAACgf,GAAA,EAAD,CAAaC,MAAI,EAAC5qC,MAAO3O,EAAU,EAAa,IAATF,EAAcohC,SAAU2X,OAMtErB,GACC,mBAACnb,GAAA,EAAD,CACElyB,OAAK,EACLmwB,WAAWqE,EAAAA,GAAAA,GAAe,kBAAoC,IAAjB5+B,GAAsB,WACnEm8B,MAAM,cACNI,KAAK,UACLoC,UAAU,gBACVD,QAAS13B,EAAAA,GACT80B,QAASkd,GAET,2BAAMze,UAAU,yBAAhB,OAIJ,mBAAC+B,GAAA,EAAD,CACElyB,OAAK,EACLmwB,UAAU,eACV4B,MAAM,cACNI,KAAK,UACLT,QAASwJ,EACT3G,UAAU,gBAEV,wBAAGpE,UAAU,oB,cCxNrB,MA0FA,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAwB,IAAf,OAAEC,GAAa,EACtB,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B4/C,GAAYC,EAAAA,GAAAA,IAAoB9/C,EAAQC,GAC9C,MAAO,CACL4/C,UAAAA,EACAE,UAAW//C,EAAO6Q,MAAMK,KACxB4xB,UAAW9iC,EAAO4L,MAAMsF,KACxButB,kBAAmBz+B,EAAOw+B,WAAWC,kBACrCxxB,UAAa4yC,EACRA,EAAU/gB,kBAAoB,GAAK+gB,EAAUG,SADxBt6C,GAAQA,EAAKu6C,gBAAkBv6C,EAAK2tC,eAExDrzC,EAAOw+B,WAAWC,qBAAsBohB,MAAAA,OAAxC,EAAwCA,EAAW1+C,OAX3CyhC,EA1FgC,IAO9C,IAP+C,OACnD3iC,EADmD,SAEnDgN,EAFmD,UAGnD4yC,EAHmD,gBAInDK,EAJmD,UAKnDH,EALmD,UAMnDjd,GACI,EACJ,MAAM,cACJqd,EADI,4BAEJC,IACEngC,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,KAEPke,GAAsBnb,EAAAA,EAAAA,KAAY,KACtCib,EAAc,CACZlgD,OAAAA,MAED,CAACkgD,EAAelgD,IAEb++B,EAAe6gB,MAAAA,OAAH,EAAGA,EAAW7gB,aAE1BshB,GAAsBlc,EAAAA,EAAAA,KAAQ,IAC9BpF,EACK55B,OAAOm/B,OAAOvF,GAAc17B,QAAO,CAACi9C,EAAGluC,IAAMA,EAAI,IAAGhP,KAAI,IAAoB,IAAnB,GAAElC,EAAF,OAAMq/C,GAAa,EACjF,GAAIA,EAAQ,CACV,IAAKT,EAAU5+C,GACb,OAEF,MAAO,CAAEmX,KAAMynC,EAAU5+C,IAEzB,GAAK2hC,EAAU3hC,GAGf,MAAO,CAAEuE,KAAMo9B,EAAU3hC,OAE1BmC,OAAOwB,SACE,IACb,CAACg+B,EAAW9D,EAAc+gB,IAmB7B,IAjBAngB,EAAAA,EAAAA,KAAU,KACR,GAAKigB,MAAAA,GAAAA,EAAW1+C,KACX8L,IAAY4yC,EAAUG,UAO3B,OALAI,EAA4B,CAC1Bj/C,GAAI0+C,EAAU1+C,GACds/C,YAAY,IAGP,KACLL,EAA4B,CAC1Bj/C,GAAI0+C,EAAU1+C,GACds/C,YAAY,OAGf,CAACZ,MAAAA,OAAD,EAACA,EAAW1+C,GAAI0+C,MAAAA,OAAhB,EAAgBA,EAAWG,SAAU/yC,EAAUmzC,IAE7CP,EAEL,OACE,0BACElf,WAAWqE,EAAAA,GAAAA,GACT,mBACAkb,GAAmB,qBAClBjzC,GAAY,aAEfi1B,QAASme,GAET,0BAAK1f,UAAU,QACb,2BAAMA,UAAU,SAAS39B,EAAK,uBAC9B,2BAAM29B,UAAU,gBAAgB39B,EAAK,eAAgB68C,EAAU/gB,mBAAqB,EAAG,OAEzF,0BAAK6B,UAAU,WACZ2f,EAAoBj9C,KAAKq9C,IACxB,GAAKA,EACL,OAAIA,EAAEpoC,KACG,mBAACqoC,GAAA,EAAD,CAAQ7iB,IAAK4iB,EAAEpoC,KAAKnX,GAAImX,KAAMooC,EAAEpoC,OAEhC,mBAACqoC,GAAA,EAAD,CAAQ7iB,IAAK4iB,EAAEh7C,KAAKvE,GAAIuE,KAAMg7C,EAAEh7C,WAI7C,mBAACg9B,GAAA,EAAD,CAAQlyB,OAAK,EAACmwB,UAAU,QACrB39B,EAAK,sB,eChFd,MAiJA,IAAeq9B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,SAAS,OAAEC,GAAX,QAAqC,CACnCqX,cAAetX,EAAOsX,cACtB5R,MAAMC,EAAAA,EAAAA,IAAW3F,EAAQC,GACzBqY,MAAM4O,EAAAA,EAAAA,IAASjnB,IAAUwZ,EAAAA,EAAAA,IAAWzZ,EAAQC,QAAUK,KAJtCsiC,EAjJ+B,IAE7C,IAF8C,OAClD3iC,EADkD,UAC1C0gC,EAD0C,KAC/Bj7B,EAD+B,KACzB4S,EADyB,SACnBiK,EADmB,cACTjL,GACrC,EACJ,MAAM,qBACJspC,EADI,aAEJC,EAFI,WAGJC,EAHI,WAIJC,EAJI,aAKJC,EALI,eAMJC,EANI,cAOJC,EAPI,mBAQJC,EARI,oBASJC,IACEnhC,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,MACNkf,EAAsBC,EAAoBC,IAAuBnU,EAAAA,GAAAA,MACjEoU,EAAkBC,IAAuBrgB,EAAAA,EAAAA,KAAkB,IAC3DsgB,EAAkBC,IAAuBvgB,EAAAA,EAAAA,KAAkB,IAC5D,WAAEvlB,GAAenW,GAAQ,IACzB,eACJk8C,EADI,cACYC,EADZ,cAC2BC,EAD3B,gBAC0CC,GAC5Cx/B,GAAY,GACVy/B,EAAet8C,IAAQ8a,EAAAA,EAAAA,IAAiB9a,GAExCu8C,GAAmB/c,EAAAA,EAAAA,KAAY,KACnC0b,EAAqB,CAAEl0C,OAAQzM,IAC3B2hD,GACFT,EAAmB,CAAElhD,OAAAA,MAEtB,CAAC2gD,EAAsBgB,EAAgBT,EAAoBlhD,IAExDiiD,GAAqBhd,EAAAA,EAAAA,KAAY,KACrCqc,IACAV,EAAa,CAAEsB,UAAWliD,EAAQ4b,WAAAA,IAC9BgmC,GAAiBL,GACnBV,EAAW,CAAE7gD,OAAAA,IAEXyhD,GACFX,EAAW,CAAE9gD,OAAAA,MAEd,CACD4b,EAAYglC,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkBvhD,IAGdmiD,GAAyBld,EAAAA,EAAAA,KAAY,KACzCkc,EAAoB,CAAEnhD,OAAAA,MACrB,CAACA,EAAQmhD,IAENiB,GAAuBnd,EAAAA,EAAAA,KAAY,KACvCqc,IACAT,EAAW,CAAE7gD,OAAAA,IACT+hD,GACFf,EAAe,CAAEhhD,OAAAA,EAAQyM,OAAQ4K,IACjC4pC,EAAc,CAAEjhD,OAAAA,EAAQ4W,oBAAoB,KAE5CmqC,EAAa,CAAE/gD,OAAAA,MAEhB,CACDA,EAAQshD,EAAqBjqC,EAAe2pC,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAKv+B,EAIL,OACE,0BAAKoe,WAAWqE,EAAAA,GAAAA,GAAe,kBAAmBrE,GAAYyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GACrFwhD,GACC,mBAACpf,GAAA,EAAD,CACE4f,QAAM,EACN1U,OAAK,EACLjL,KAAK,OACLhC,UAAU,0BACVuB,QAAS+f,GAERj/C,EAAK,wBAGT++C,GACC,mBAACrf,GAAA,EAAD,CACEH,MAAM,SACN+f,QAAM,EACN1U,OAAK,EACLjL,KAAK,OACLhC,UAAU,0BACVuB,QAASof,GAERt+C,EAAK,0BAGT6+C,IAAkBE,GACjB,mBAACrf,GAAA,EAAD,CACEH,MAAM,SACN+f,QAAM,EACN1U,OAAK,EACLjL,KAAK,OACLhC,UAAU,0BACVuB,QAASof,GAERt+C,EAAK,8BAGV,mBAAC0/B,GAAA,EAAD,CACElyB,OAAK,EACLs0B,QAAM,EACNnC,KAAK,OACLJ,MAAM,cACNL,QAASkgB,EACTrd,UAAW/hC,EAAK,UAEhB,wBAAG29B,UAAU,gBAEf,mBAACoY,GAAA,EAAD,CACEnvC,OAAQy3C,EACRrV,QAASuV,EACThkC,MAAOva,EAAK,iBAAkBsV,GAAOiqC,EAAAA,EAAAA,IAAuBjqC,IAAQ4jC,EAAAA,EAAAA,GAAal5C,EAAM0C,IACvFjB,KAAM6T,EACFtV,EAAK,mCAAmCw/C,EAAAA,EAAAA,IAAgBlqC,IACxDtV,EAAK,mCACTy/C,mBAAiB,EACjBC,sBAAoB,EACpB1J,aAAch2C,EAAK,SACnBi2C,eAAgB3gC,EAAO4pC,EAAqBG,GAE3C/pC,GACC,mBAACqqC,GAAA,EAAD,CACEjc,MAAO1jC,EAAK,kBACZ2jC,QAAS+a,EACTkB,QAASjB,IAGZrpC,GAAQupC,GACP,mBAACc,GAAA,EAAD,CACEjc,MAAO1jC,EAAK,cACZ2jC,QAAS6a,EACToB,QAASnB,UCuQrB,IAAephB,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAA+D,IAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAM,kBAAEoG,EAAF,aAAqBmX,EAArB,4BAAmCwjB,GAAgCjoC,EACnE0F,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IAC1B,aAAEg2B,GAAiBvwB,GAAQ,IAEzBzF,OAAQokB,EAAa9f,UAAW+f,GAAmBtkB,EAAOsG,YAC5Du8C,EAAex+B,GAAeC,GAChClQ,EAAAA,EAAAA,IAAkBpU,EAAQqkB,EAAaC,QACvChkB,EAEJ,IAAIu5B,EACJ,GAAwB,WAApB3yB,EAA8B,CAChC,MAAM47C,GAAYlnB,EAAAA,EAAAA,IAAgB57B,EAAQC,GAC1C45B,EAAgBipB,MAAAA,OAAH,EAAGA,EAAWt9C,YACtB,GAAwB,cAApB0B,EAAiC,CAC1C,MAAMk0B,GAAeC,EAAAA,EAAAA,IAAmBr7B,EAAQC,GAChD45B,EAAgBuB,MAAAA,OAAH,EAAGA,EAAc51B,YACzB,GAAwB,WAApB0B,GAAgChH,IAAakB,EAAAA,GAAgB,CACtE,MAAMyE,GAAaC,EAAAA,EAAAA,IAAiB9F,EAAQC,EAAQC,GACpD25B,GAAgBh0B,MAAAA,OAAA,EAAAA,EAAYg0B,gBAAiB,EAG/C,MAAMwF,EAAoB,CACxBpJ,aAAAA,EACA3oB,kBAAAA,EACAmlC,oBAAoBlsC,EAAAA,EAAAA,IAAyBvG,GAC7C+iD,oBAAoB5Q,EAAAA,EAAAA,IAAqBnyC,GACzC6iD,aAAAA,EACAn9C,KAAAA,EACAm0B,cAAAA,EACAwY,gBAAgBC,EAAAA,EAAAA,IAAqBtyC,EAAQC,GAC7C+iD,cAAet9C,IAAQ41B,EAAAA,EAAAA,IAAoBt7B,EAAQ0F,GACnD+e,aAAAA,EACAwjB,4BAAAA,EACAgb,qBAAsBp4C,KAAKC,IAAI,EAAG9K,EAAO2B,SAAS4L,aAAa/H,OAAS,GACxE+4B,gBAAiBv+B,EAAOu+B,gBACxB1b,UAAW7iB,EAAO6iB,WAGdkZ,GAAe54B,EAAAA,EAAAA,IAAmBnD,EAAQC,GAChD,GAAwB,WAApBiH,IAAiC60B,EACnC,OAAOsD,EAKT,GAFAj6B,OAAO89C,OAAO7jB,EAAO,CAAEtD,aAAAA,IAEnB77B,IAAakB,EAAAA,GAAgB,CAC/B,MAAM+hD,GAAkB1vC,EAAAA,EAAAA,IAAyBzT,EAAQC,EAAQC,GAC3DqD,EAAU4/C,GAAkB/uC,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQkjD,QAAmB7iD,EACjF8iD,EAAmB7/C,GAAU8/C,EAAAA,EAAAA,IAAsBrjD,EAAQuD,QAAWjD,EAE5E,MAAO,IACF++B,EACHikB,iBAAkBH,EAClBI,UAAU,EACVH,iBAAAA,GAIJ,MAAME,GAAmB1nB,EAAAA,EAAAA,IAAgB57B,EAAQC,GACjD,GAAIqjD,MAAAA,GAAAA,EAAkB99C,OAAQ,CAC5B,MAAMg+C,EAAqBznB,EAAaunB,EAAiB,KACnD,SACJC,GACGC,IAAsBhgD,EAAAA,EAAAA,IAA4BxD,EAAQwjD,EAAoBtjD,IAAc,GAEjG,MAAO,IACFm/B,EACHikB,iBAAAA,EACAC,SAAAA,GAIJ,OAAOlkB,IA1ESuD,EAvV4B,IAuB1C,IAvB2C,OAC/C3iC,EAD+C,SAE/CC,EAF+C,gBAG/CgH,EAH+C,QAI/Cu8C,EAJ+C,iBAK/CH,EAL+C,aAM/CvnB,EAN+C,SAO/CwnB,EAP+C,iBAQ/CH,EAR+C,aAS/CntB,EAT+C,mBAU/C8sB,EAV+C,kBAW/Cz1C,EAX+C,mBAY/CmlC,EAZ+C,aAa/CoQ,EAb+C,KAc/Cn9C,EAd+C,cAe/Cm0B,EAf+C,eAgB/CwY,EAhB+C,cAiB/C2Q,EAjB+C,aAkB/Cv+B,EAlB+C,4BAmB/CwjB,EAnB+C,qBAoB/Cgb,EApB+C,gBAqB/C1kB,EArB+C,UAsB/C1b,GACI,EACJ,MAAM,iBACJqH,EADI,WAEJw5B,EAFI,aAGJz9C,EAHI,SAIJ/D,EAJI,iBAKJyhD,EALI,mBAMJtqC,EANI,iBAOJuqC,EAPI,sBAQJniD,IACEwe,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,KACP0hB,GAAqBtb,EAAAA,EAAAA,KAAO,IAE3Bub,EAAoBC,IAAyB3iB,EAAAA,EAAAA,IAAS,GACvD+hB,EAAkBruB,MAAMC,QAAQuuB,GAAoBA,EAAiBQ,GAAsBR,EAC3FU,EAAgBjoB,GAAgBonB,EAAkBpnB,EAAaonB,QAAmB7iD,EAClF2jD,EAAsBnvB,MAAMC,QAAQuuB,GACtCA,EAAiB99C,OAAU89C,EAAmB,OAAIhjD,EAChD4jD,EAAkBx+C,IAAQw2C,EAAAA,EAAAA,GAAal5C,EAAM0C,GAAMF,OACnD2+C,EAAkBf,GAAmBl/C,EAAAA,EAAAA,IAAelB,EAAMogD,QAAoB9iD,GAC9E,SAAEiiB,GAAa7c,GAAQ,IAE7Bk6B,EAAAA,EAAAA,KAAU,KACJ1/B,IAAakB,EAAAA,IAAkBqjB,GAAgBg/B,GACjDpqC,EAAmB,CAAEpZ,OAAAA,MAEtB,CAACA,EAAQoZ,EAAoBoL,EAAcvkB,EAAUujD,KAGxD7jB,EAAAA,EAAAA,KAAU,KACRmkB,EAAsB,KACrB,CAACT,KAEJc,EAAAA,GAAAA,GAAiBnkD,EAAQkjD,EAAiBa,GAE1C,MAAQ5yB,MAAOF,GAAgBmzB,KAEzBC,EAAuBpzB,GAAeK,EAAAA,GACtCgzB,EAAwBl3C,EAAAA,IAA2BC,EAGnDk3C,GAAejc,EAAAA,EAAAA,IAAuB,MACtCkc,GAAqBlc,EAAAA,EAAAA,KAAgB,GAErCmc,GAAoBxf,EAAAA,EAAAA,KAAY,KACpChb,EAAiB,CAAE/oB,GAAIlB,MACtB,CAACiqB,EAAkBjqB,IAEhB64C,GAAqB5T,EAAAA,EAAAA,KAAa3gC,IACtCm/C,EAAW,CAAEzjD,OAAAA,EAAQsE,UAAAA,EAAWkS,SAAS,MACxC,CAACitC,EAAYzjD,IAEV0kD,IAA2Bzf,EAAAA,EAAAA,KAAY,KAC3C,GAAI8e,EAAe,CACjB/9C,EAAa,CAAEhG,OAAQ+jD,EAAc/jD,OAAQC,SAAAA,EAAUqE,UAAWy/C,EAAc7iD,KAEhF,MAAMmE,GAAWs/C,EAAAA,GAAAA,GAAcX,GAAuB,EAAGH,EAAqB,GAC9EC,EAAsBz+C,MAEvB,CAAC0+C,EAAe/9C,EAAc/F,EAAU+jD,EAAqBH,IAE1De,IAAuB3f,EAAAA,EAAAA,KAAY,KACvChjC,EAAS,CAAEf,GAAIlB,EAAQC,SAAUkB,EAAAA,GAAgBC,KAAM,aACtD,CAACa,EAAUjC,IAER6kD,IAAsB5f,EAAAA,EAAAA,KAAY,KACtCv+B,YAAW,KACTk9C,EAAmBriC,SAAU,IA1HD,OA4H7B,IAEGujC,IAAkB7f,EAAAA,EAAAA,KAAav3B,IACnC,GAAKk2C,EAAmBriC,QAAxB,CAIA,GADAqiC,EAAmBriC,SAAU,EACzBpU,EAAAA,GAAyB,CAC3B,MAAM43C,EAAejsB,SAASgH,cAA8BklB,EAAAA,IAC5DD,MAAAA,GAAAA,EAAc98B,OAGhB,GAAI66B,EAGF,OAFAthD,SACAqjD,KAIF,GAAI5kD,IAAakB,EAAAA,IAAsC,WAApB8F,GAAyD,IAAzB+7C,EAUjE,OATI71C,EAAAA,IAA2Bm3C,GAC7B52C,EAAE23B,kBACFpjC,EAAS,CAAEf,QAAIb,KAEfsjD,SAGFkB,KAKFnB,IACAmB,QACC,CACD5kD,EAAUgH,EAAiB+7C,EAAsBF,EAAoBY,EAAkBY,EACvFriD,EAAU0hD,EAAkBniD,EAAuBqjD,KAG/CI,GACJh0B,GAAeK,EAAAA,IACZL,EAAci0B,EAAAA,IAEjBj0B,EAAck0B,EAAAA,IACXl0B,EAAcK,EAAAA,MACZ2yB,GAAmBA,EAAkB,IAEtCmB,GAA6BH,IACjCh0B,EAAcG,EAAAA,IACXH,EAAco0B,EAAAA,GAGbC,GAAkBzgD,SAAQyd,MAAAA,OAAA,EAAAA,EAAUu/B,iBAAiBv/B,MAAAA,OAA3B,EAA2BA,EAAUw/B,mBAAmBx/B,MAAAA,OAAxD,EAAwDA,EAAUs/B,iBAEhG/X,aAAc0b,GACdxb,qBAAsByb,KACpBxb,EAAAA,GAAAA,GAAkBsb,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBhjC,OAAWjiB,GAAW,IAGrFwpC,aAAc8b,GACd5b,qBAAsB6b,KACpB5b,EAAAA,GAAAA,GAAkBnlC,QAAQ+9C,IAExBiD,IAAwBH,EAAAA,GAAAA,GAAiB9C,GAAc,IAG3D/Y,aAAcic,GACd/b,qBAAsBgc,KACpB/b,EAAAA,GAAAA,GAAkBnlC,QAAQk/C,IAExBiC,IAAyBN,EAAAA,GAAAA,GAAiB3B,GAAe,GACzDkC,IAA+BP,EAAAA,GAAAA,GAAiB1B,GAAqB,GACrEkC,IAAoBR,EAAAA,GAAAA,GAAiBpC,GAAU,GAC/C6C,IAA8BT,EAAAA,GAAAA,GAAiBxB,GAE/CkC,GAAkBN,IAA6BE,IAC/CL,IAA2BE,IAGjClmB,EAAAA,EAAAA,KAAU,KACR,MAAM0mB,EAAc9B,EAAahjC,QACjC,GAAK8kC,EAIL,OAAKjB,IAA+BgB,QAMhC5T,GAAsByS,IACpBT,EAAmBjjC,UACrB8kC,EAAY1V,UAAUU,IAAI,gBAAiB,YAC3CmT,EAAmBjjC,SAAU,GAI/B7a,YAAW,KACT2/C,EAAY1V,UAAUC,OAAO,cAhOV,OAmOrByV,EAAY1V,UAAUC,OAAO,iBAC7B4T,EAAmBjjC,SAAU,KAjB7B8kC,EAAY1V,UAAUC,OAAO,gBAAiB,iBAC9C4T,EAAmBjjC,SAAU,MAkB9B,CAAC6jC,GAA4BgB,GAAgBnB,GAA6BzS,IAE7E,MAAM,qBAAExQ,IAAyBnB,GAAoB99B,EAAMu7B,EAAiB1b,GAAW,GAgEvF,SAAS0jC,KAA6D,IAA5CC,EAA4C,wDAA3BC,EAA2B,wDACpE,OACE,0BAAK9lB,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,UACLJ,MAAM,cACNL,QAAS6iB,GACThgB,UAAW/hC,EAAKwjD,EAAU,QAAU,SAEpC,0BAAK7lB,WAAWqE,EAAAA,GAAAA,GAAe,uBAAwBwhB,GAAW,iBAEnEC,GAAqB,mBAAC,GAAD,OAK5B,MAAMC,GAAwB5hD,QAAQ8gD,IAA2BE,IAEjE,OACE,0BAAKnlB,UAAU,eAAe+J,IAAK8Z,GACjC,mBAAChiB,GAAA,EAAD,CACEpO,KAAM6T,EAA8B,OAAS,aAC7CxF,UAAWwgB,GAnFO,WAApB/7C,GAAgChH,IAAakB,EAAAA,GA6B7C,uCACIkjD,GAAwBrB,EAAuB,IAAMsD,GAAiBhC,GAAuB,GAC/F,0BAAK5jB,UAAU,oBAAoBuB,QAASwiB,IACzCx9B,EAAAA,EAAAA,IAASjnB,GACR,mBAAC0mD,GAAA,EAAD,CACEj6C,OAAQzM,EACRg2B,aAAcA,EACdnG,OAAQmS,GACR2kB,SAAU9hD,QAAQm9B,IAClB4kB,aAAc7D,EACd8D,iBAAe,EACfC,oBAAkB,EAClBC,OAAK,IAGP,mBAACC,GAAA,EAAD,CACEhnD,OAAQA,EACRg2B,aAAcA,EACdnG,OAAQmS,GACR2kB,SAAU9hD,QAAQm9B,IAClB6kB,iBAAe,EACfD,cAAY,EACZE,oBAAkB,EAClBC,OAAK,MAlDW,WAApB9/C,EACF,sCACGq/C,KACD,6BACGvjD,EAAK,gBAAiB62B,EAAe,OAGpB,WAApB3yB,EACF,sCACGq/C,KACD,6BACGvjD,EAAK,sBAAuB62B,EAAe,OAG1B,cAApB3yB,EACF,sCACGq/C,KACD,6BACGlU,EAAiBrvC,EAAK,aAAeA,EAAK,WAAY62B,EAAe,YAGxEv5B,GAiEJ,mBAAC,GAAD,CACE4/C,gBACG6F,IAA6BjhD,QAAQmhD,KAClCL,IAA2B9gD,QAAQghD,IAEzC7lD,OAAQA,IAGT8lD,IAA6BE,IAC5B,mBAAC,GAAD,CACEnoB,IAAK79B,EACLsD,QAAS0iD,GACTtuC,MAAOuuC,IAAgC,EACvC9zC,MAAO0xC,EACP3L,YAAaiO,GACbzlB,WAAWqE,EAAAA,GAAAA,GAAeghB,GAAyBU,IAAyB,cAC5EtO,eAAgB+N,GAAoBrN,OAAqBx4C,EACzD4hC,QAASyiB,GACTtM,iBAAkBwM,KAIrBW,IACC,mBAAC,GAAD,CACE1nB,IAAK79B,EACLA,OAAQA,EACRsiB,SAAUmjC,GACV/kB,UAAW8kB,KAIf,0BAAK9kB,UAAU,gBACZ+lB,IACC,mBAAC,GAAD,CACE5oB,KAAKopB,EAAAA,EAAAA,IAAcpB,IACnBviD,QAASuiD,GACTnlB,UAAWklB,KAGf,mBAAC,GAAD,CACE5lD,OAAQA,EACRC,SAAUA,EACVgH,gBAAiBA,EACjB0sC,kBAAmB8S,W,yBC1ZtB,SAASS,GAAQC,GACtB,MAAO,YAAaA,EAGf,SAASC,GAAc1lD,EAAwBm4B,GACpD,IAMIwtB,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAc9lD,EAAS,GAAGwI,KAC1Bu9C,UAAUC,EAAAA,EAAAA,IAAiC,IAAnBhmD,EAAS,GAAGwI,MACpCy9C,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DA7lD,EAASkH,SAAQ,CAACtF,EAAS6O,KACrB7O,EAAQyvB,UACLs0B,GAOHA,EAAa3lD,SAASsC,KAAKV,GACvBA,EAAQ+G,QAAQ7F,OAClB6iD,EAAaQ,YAAcvkD,IAR7B+jD,EAAe,CACbS,QAASxkD,EAAQ4D,UACjBxF,SAAU,CAAC4B,GACXukD,YAAavkD,GASjBgkD,EAAmBtjD,KAAKV,GAG1B,MAAMykD,EAAcrmD,EAASyQ,EAAQ,GASrC,IANEk1C,GACKU,GAAgBA,EAAY7gD,WAAa6gD,EAAY7gD,YAAcmgD,EAAaS,UAErFR,EAAmBtjD,KAAKqjD,GACxBA,OAAehnD,GAEb0nD,EAAa,CACf,MAAMC,GAAyBN,EAAAA,EAAAA,IAAiC,IAAnBK,EAAY79C,MACrDq9C,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAY79C,KAC1Bu9C,SAAUO,EACVL,aAAc,IAEhBC,EAAW5jD,KAAKujD,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAa3jD,KAAKsjD,KAEnCS,EAAY7mD,KAAO24B,GAChBv2B,EAAQ6nB,WAAa48B,EAAY58B,UACjC7nB,EAAQkH,aAAeu9C,EAAYv9C,aACnCy9C,EAAAA,EAAAA,IAAgB3kD,KAChB2kD,EAAAA,EAAAA,IAAgBF,IAEjBzkD,EAAQ4kD,aAAeH,EAAYG,cAEjC5kD,EAAQ4kD,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1D7kD,EAAQ4kD,YAAYjgD,aAAe8/C,EAAYG,YAAYjgD,YAC3D3E,EAAQ4kD,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnE9kD,EAAQ+kD,eACRN,EAAYM,eACXN,EAAY79C,KAAO5G,EAAQ4G,KA9ER,OAgFvBo9C,EAAqB,GACrBC,EAAiBI,aAAa3jD,KAAKsjD,QAKlCM,E,sFCrFT,MAAMU,GAAkC9gC,EAAAA,GAAa,IAAO,IACtD+gC,GAAgCp7C,EAAAA,GAA0B,IAAM,I,eCN/D,SAASq7C,GAAmBC,GACjC,MAA8B,iBAAhBA,ECaT,SAASC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EANwC,IADb,IAQ3BA,EAT+B,IADd,IAajB,SAASC,GAAyBvlD,EAAqBwlD,GAC5D,MAAMC,GAAQC,EAAAA,EAAAA,IAAa1lD,GACrB2lD,GAAcC,EAAAA,EAAAA,IAAmB5lD,GACjCohB,GAAQykC,EAAAA,EAAAA,IAAgB7lD,KAAY8lD,EAAAA,EAAAA,IAAuB9lD,GAC3Du1B,GAAQwwB,EAAAA,EAAAA,IAAgB/lD,GAExBgmD,EAAiBzkD,SAAQukD,EAAAA,EAAAA,IAAuB9lD,KAChD,MAAE6tB,EAAF,OAASmlB,GAAW5xB,GACtB6kC,EAAAA,GAAAA,IAA+B7kC,EAAOqkC,EAAOE,EAAaK,EAAgBR,IAC1EU,EAAAA,GAAAA,IAAyB3wB,EAAQkwB,EAAOE,EAAaH,GAGnDW,EAAgBf,GADN7jD,SAAQk2B,EAAAA,EAAAA,IAAez3B,KAGvC,IAAIomD,EAAgB,EAChBv4B,EAAQs4B,GAAiBA,EAAgBt4B,EAvBjB,KAwB1Bu4B,EAAgBD,EAAgBt4B,GAE9BmlB,EAASoT,EA3BU,OA2B6CpT,EAASoT,EA1BjD,KA2B1BA,EA5BqB,GA4BcpT,GAGrC,MAAMqT,EAAa/+C,KAAK2F,MAAM4gB,EAAQu4B,GAChCE,EAAch/C,KAAK2F,MAAM+lC,EAASoT,GAExC,MAAO,CACLv4B,MAAOw4B,EACPrT,OAAQsT,EACRC,QAASF,EAAaF,GAAiBG,EArClB,ICkDzB,SAASE,GAAWC,EAAgBC,GAClC,OAAOD,EAAKnmD,QAAO,CAACqmD,EAAaC,IAASD,EAAcC,GAAMF,GAGhE,SAASG,GAAMC,EAAaC,EAAaC,GACvC,OAAOF,EAAMC,EAAMA,EAAOD,EAAME,EAAOA,EAAOF,EAOhD,SAASG,GAAuBC,GAC9B,MAAMC,EAAwB,CAAEt5B,MAAO,EAAGmlB,OAAQ,GAalD,OAZAkU,EAAO5hD,SAAQ,IAGT,IAHU,WACd8hD,EADc,MAEdC,GACI,EApEC,EAqEDA,IACFF,EAAOt5B,MAAQu5B,EAAWv5B,MAAQu5B,EAAW15B,GArEzC,EAuEF25B,IACFF,EAAOnU,OAASoU,EAAWpU,OAASoU,EAAW54B,MAI5C24B,EAGF,SAASG,GACd7B,EACAE,EACAH,EACA9M,GAEA,MACM6O,EAtDR,SAAmBnpD,GACjB,OAAOA,EAAS0B,KACbE,IACC,MAAMonD,EAAa7B,GAAyBvlD,GAE5C,OAAOonD,EAAWv5B,MAAQu5B,EAAWpU,UAiD1BwU,CAAU9O,EAAMt6C,UACzBqpD,EA7CR,SAAwBF,GACtB,OAAOA,EAAOznD,KAAKo2C,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOp1C,KAAK,IA4C/D4mD,CAAeH,GAC7BI,EA1CR,SAAyBJ,GACvB,OAAOA,EAAOjnD,QAAO,CAACT,EAAQq2C,IAAUA,EAAQr2C,GAAQ,GAAK0nD,EAAOtlD,OAyC/C2lD,CAAgBL,GAC/BM,EAAaN,EAAOtlD,OACpB6lD,EAAYP,EAAO33B,MAAMsmB,GAAUA,EAAQ,IAC3C6R,GAAWC,EAAAA,GAAAA,IAAkBvC,EAAOE,GAAa,EAAOH,IAAcG,EAAc,IAAM,GAAKsC,GAAAA,GAGrG,IAAIf,EAEJ,MAAM53C,EAAS,CACbi4C,OAAAA,EACAE,YAAAA,EACAE,aAAAA,EACAI,SAAAA,EACAG,SAAU,IACVC,UAVgBJ,EAWhBK,QAlBc,GA+BhB,OATElB,EADEW,GAAc,GAAKC,EAgBzB,YAOkB,IANhBP,OAAQc,EADyB,aAEjCV,EAFiC,SAGjCI,EAHiC,SAIjCG,EAJiC,QAKjCE,EALiC,UAMjCD,EAAa,EAAIJ,EAAY,GACb,EAChB,MAAMR,EAxER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAOznD,KAAKo2C,GAAWyR,EAAe,IAAMd,GAAM3Q,EAAO,EAAG,MAAQ2Q,GAAM3Q,EAAO,MAAQ,KAuEjFoS,CAAWD,EAAgBV,GACpCvzC,EAAQi0C,EAAepmD,OACvBpC,EAAS,IAAI0xB,MAAMnd,GACnBm0C,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAI9zC,EAAS,EACb6zC,EAAWnjD,SAASqjD,IAClBD,EAAQhoD,KAXQ,EAACkU,EAAgBg0C,KACnC,MACMC,EAAMrC,GADUe,EAAO/gD,MAAMoO,EAAQA,EAASg0C,GACd,GAEtC,OAAQb,GAAYa,EAAe,GAAKR,GAAWS,GAOpCC,CAAYl0C,EAAQ+zC,IACjC/zC,GAAU+zC,KAGZJ,EAAS7nD,KAAK,CACZ+nD,WAAAA,EACAC,QAAAA,KAIJ,IAAK,IAAIK,EAAQ,EAAGA,IAAU30C,IAAS20C,EAAO,CAC5C,MAAMC,EAAS50C,EAAQ20C,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,IAIxB,IAAK,IAAID,EAAQ,EAAGA,IAAU30C,EAAQ,IAAK20C,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW50C,EAAQ20C,IAASC,EAAQ,CACvD,MAAMC,EAAQ70C,EAAQ20C,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,IAKlC,IAAK,IAAIF,EAAQ,EAAGA,IAAU30C,EAAQ,IAAK20C,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW50C,EAAQ20C,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU70C,EAAQ20C,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS90C,EAAQ20C,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,IAM3C,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIt6C,EAAI,EAAGA,EAAIy5C,EAAStmD,OAAQ6M,IAAK,CACxC,MAAM,QACJ45C,EADI,WAEJD,GACEF,EAASz5C,GACPu6C,EAAYZ,EAAWxmD,OACvBqnD,EAAc9C,GAAWkC,EAAS,GAAKN,GAAWiB,EAAY,GAE9DE,EADgBjiD,KAAKymB,OAAO26B,GACLR,EAAW,IAAM,EACxCsB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,GAPI,GASPC,EAAOpiD,KAAKqiD,IAAIL,EAAcnB,GAAaoB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASz5C,GAC1Bs6C,EAAcM,GAIlB,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAc3nD,OAC/B,IAAI4M,EAAQ,EACR2f,EAAI,EACR,IAAK,IAAIu7B,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5B/W,EAAS1rC,KAAK2F,MAAMg9C,GAC1B,IAAIv8B,EAAI,EAER,IAAK,IAAIw8B,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAlOJ,GAmOW,IAAR0C,EAlOJ,EADC,IAoOGA,IAAQD,EAAW,EAjOpB,EAHF,IAqOW,IAARI,EAjOH,EAJA,IAsOGA,IAAQF,EAAW,EApOrB,EAFD,GAuOI9T,EAAQqR,EAAO14C,GACfgf,EAAQq8B,IAAQF,EAAW,EAAIjC,EAAWr6B,EAAIpmB,KAAK2F,MAAMipC,EAAQ+T,GACvEpqD,EAAOgP,GAAS,CACdu4C,WAAY,CACV15B,EAAAA,EACAc,EAAAA,EACAX,MAAAA,EACAmlB,OAAAA,GAEFqU,MAAAA,GAEF35B,GAAKG,EAAQu6B,IACXv5C,EAEJ2f,GAAKwkB,EAASoV,EAGhB,OAAOvoD,EA1IIsqD,CAA0B76C,GACX,IAAfu4C,EA4Ib,SAAmBv4C,GACjB,MAAM,OACJi4C,EADI,YAEJE,EAFI,aAGJE,GACEr4C,EACJ,MAAuB,OAAhBm4C,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4Bj4C,GAC1B,MAAM,OACJi4C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACE74C,EACE0jC,EAAS1rC,KAAK2F,MAAM3F,KAAKymB,IAAIg6B,EAAWR,EAAO,GAAIjgD,KAAKymB,IAAIg6B,EAAWR,EAAO,IAAKY,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNhB,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAOk6B,EACP/U,OAAAA,GAEFqU,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG,EACHc,EAAGwkB,EAASoV,EACZv6B,MAAOk6B,EACP/U,OAAAA,GAEFqU,MAAO+C,KA9BLC,CAAmB/6C,GACH,OAAhBm4C,GAAwC,OAAhBA,EAiC9B,SAAiCn4C,GAC/B,MAAM,OACJi4C,EADI,SAEJQ,EAFI,QAGJK,EAHI,UAIJD,GACE74C,EACEue,GAASk6B,EAAWK,GAAW,EAC/BpV,EAAS1rC,KAAK2F,MAAM3F,KAAKymB,IAAIF,EAAQ05B,EAAO,GAAIjgD,KAAKymB,IAAIF,EAAQ05B,EAAO,GAAIY,KAClF,MAAO,CAAC,CACNf,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAAA,EACAmlB,OAAAA,GAEFqU,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAGG,EAAQu6B,EACX55B,EAAG,EACHX,MAAAA,EACAmlB,OAAAA,GAEFqU,MAAO+C,IAxDHE,CAAwBh7C,GA4DhC,SAA4BA,GAC1B,MAAM,OACJi4C,EADI,SAEJW,EAFI,SAGJH,EAHI,QAIJK,EAJI,UAKJD,GACE74C,EACEi7C,EAAejjD,KAAK2F,MAAM,IAAMi7C,GAChCsC,EAAcljD,KAAKymB,IACvBzmB,KAAK2F,MACH3F,KAAKC,IACH,IAAOwgD,EAAWK,IACjBL,EAAWK,GAAWb,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWK,EAAUmC,GAEjBE,EAAa1C,EAAWyC,EAAcpC,EACtCpV,EAAS1rC,KAAKymB,IAAIo6B,EAAW7gD,KAAK2F,MAAM3F,KAAKymB,IAAI08B,EAAalD,EAAO,GAAIiD,EAAcjD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAO48B,EACPzX,OAAAA,GAEFqU,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG+8B,EAAarC,EAChB55B,EAAG,EACHX,MAAO28B,EACPxX,OAAAA,GAEFqU,MAAO+C,IA/FHM,CAAmBp7C,GArJdq7C,CAAUr7C,GACK,IAAfu4C,EAuPb,SAAqBv4C,GACnB,MAAM,YAAEm4C,GAAgBn4C,EAExB,MAA0B,MAAnBm4C,EAAY,GAKrB,SAAiCn4C,GAC/B,MAAM,UACJ64C,EADI,QAEJC,EAFI,OAGJb,EAHI,SAIJQ,EAJI,SAKJG,GACE54C,EACEs7C,EAAczC,EACd0C,EAAcvjD,KAAK2F,MACvB3F,KAAKymB,KACFo6B,EAAYC,GAAW,EACvBb,EAAO,IAAMQ,EAAWK,IAAab,EAAO,GAAKA,EAAO,MAGvDuD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAazjD,KAAKC,IACtB2gD,EACA5gD,KAAK2F,MACH3F,KAAKymB,KACFg6B,EAAWK,GAAW,EACvB9gD,KAAKymB,IACH88B,EAActD,EAAO,GACrBuD,EAAevD,EAAO,OAKxByD,EAAY1jD,KAAKymB,IAAIzmB,KAAK2F,MAAM29C,EAAcrD,EAAO,IAAKQ,EAAWK,EAAU2C,GAErF,MAAO,CAAC,CACN3D,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAOm9B,EACPhY,OAAQ4X,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAGs9B,EAAY5C,EACf55B,EAAG,EACHX,MAAOk9B,EACP/X,OAAQ8X,GAEVzD,MAAO+C,GACN,CACDhD,WAAY,CACV15B,EAAGs9B,EAAY5C,EACf55B,EAAGs8B,EAAe1C,EAClBv6B,MAAOk9B,EACP/X,OAAQ6X,GAEVxD,MAAO+C,IAzDLa,CAAwB37C,GA6D9B,SAAgCA,GAC9B,MAAM,SACJy4C,EADI,OAEJR,EAFI,UAGJY,EAHI,QAIJC,GACE94C,EACEm7C,EAAa1C,EACb6C,EAActjD,KAAK2F,MAAM3F,KAAKymB,IAAI08B,EAAalD,EAAO,GAAI,KAAQY,EAAYC,KAC9EoC,GAAezC,EAAWK,GAAW,EACrC0C,EAAexjD,KAAKymB,IACxBo6B,EAAYyC,EAAcxC,EAC1B9gD,KAAK2F,MAAM3F,KAAKymB,IACdy8B,EAAcjD,EAAO,GACrBiD,EAAcjD,EAAO,MAKzB,MAAO,CAAC,CACNH,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAO48B,EACPzX,OAAQ4X,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG,EACHc,EAAGo8B,EAAcxC,EACjBv6B,MAAO28B,EACPxX,OAAQ8X,GAEVzD,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG88B,EAAcpC,EACjB55B,EAAGo8B,EAAcxC,EACjBv6B,MAtBe48B,EAAaD,EAAcpC,EAuB1CpV,OAAQ8X,GAEVzD,MAAO+C,IAtGLc,CAAuB57C,GA3PhB67C,CAAY77C,GAqWzB,SAAoBA,GAClB,MAAM,YAAEm4C,GAAgBn4C,EAExB,MAA0B,MAAnBm4C,EAAY,GAKrB,YAMkB,IANa,SAC7BM,EAD6B,OAE7BR,EAF6B,QAG7Ba,EAH6B,UAI7BD,EAJ6B,SAK7BD,GACgB,EAChB,MAAMkD,EAAIrD,EACJsD,EAAK/jD,KAAK2F,MAAM3F,KAAKymB,IAAIq9B,EAAI7D,EAAO,GAAI,KAAQY,EAAYC,KAC5DkD,EAAIhkD,KAAK2F,OAAO86C,EAAW,EAAIK,IAAYb,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAKjkD,KAAKC,IAAI2gD,EAAU5gD,KAAK2F,MAAM3F,KAAKymB,IAAI,IAAOg6B,EAAW,EAAIK,GAAUkD,EAAI/D,EAAO,MACvFiE,EAAKlkD,KAAK2F,MAAM3F,KAAKC,IAAID,KAAKC,IAAI2gD,EAAU,KAAQH,EAAW,EAAIK,IAAWkD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIpD,EACvBsD,EAAKpkD,KAAKymB,IAAIo6B,EAAYkD,EAAKjD,EAASkD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAOu9B,EACPpY,OAAQqY,GAEVhE,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG,EACHc,EAAG68B,EAAKjD,EACRv6B,MAAO09B,EACPvY,OAAQ0Y,GAEVrE,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG69B,EAAKnD,EACR55B,EAAG68B,EAAKjD,EACRv6B,MAAO49B,EACPzY,OAAQ0Y,GAEVrE,MAlgBM,GAmgBL,CACDD,WAAY,CACV15B,EAAG69B,EAAKnD,EAAUqD,EAAKrD,EACvB55B,EAAG68B,EAAKjD,EACRv6B,MAAO29B,EACPxY,OAAQ0Y,GAEVrE,MAAO+C,IAlDLuB,CAAsBr8C,GAsD5B,YAMkB,IANc,UAC9B64C,EAD8B,OAE9BZ,EAF8B,SAG9BQ,EAH8B,QAI9BK,EAJ8B,SAK9BF,GACgB,EAChB,MAAMoD,EAAInD,EACJoD,EAAKjkD,KAAK2F,MAAM3F,KAAKymB,IAAIu9B,EAAI/D,EAAO,GAAI,IAAOQ,EAAWK,KAC1DgD,EAAI9jD,KAAK2F,OAAOk7C,EAAY,EAAIC,IAAY,EAAIb,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAK/jD,KAAK2F,MAAMm+C,EAAI7D,EAAO,IAC3BmE,EAAKpkD,KAAK2F,MAAMm+C,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAItD,EACvBqD,EAAKnkD,KAAKC,IAAI2gD,EAAU5gD,KAAKymB,IAAIg6B,EAAWwD,EAAKnD,EAASgD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACV15B,EAAG,EACHc,EAAG,EACHX,MAAO09B,EACPvY,OAAQsY,GAEVjE,MAAO+C,IACN,CACDhD,WAAY,CACV15B,EAAG69B,EAAKnD,EACR55B,EAAG,EACHX,MAAO49B,EACPzY,OAAQqY,GAEVhE,MAAO+C,GACN,CACDhD,WAAY,CACV15B,EAAG69B,EAAKnD,EACR55B,EAAG68B,EAAKjD,EACRv6B,MAAO49B,EACPzY,OAAQ0Y,GAEVrE,MArjBK,GAsjBJ,CACDD,WAAY,CACV15B,EAAG69B,EAAKnD,EACR55B,EAAG68B,EAAKK,EAAK,EAAItD,EACjBv6B,MAAO49B,EACPzY,OAAQ4Y,GAEVvE,MAAO+C,IAnGLyB,CAAuBv8C,GAxWhBw8C,CAAWx8C,GAGf,CACL43C,OAAAA,EACA6E,eAAgB9E,GAAuBC,ICnI3C,IAAI8E,GAEW,SAASC,GAAqB/qD,GAiB3C,OAhBK8qD,KACHA,GAAUx2B,SAASiiB,cAAc,QAEjCuU,GAAQze,MAAM2e,KAAOl8C,EAAAA,GAEjB,qHACA,0GACJg8C,GAAQze,MAAM4e,WAAa,SAC3BH,GAAQze,MAAMvuC,SAAW,WACzBgtD,GAAQze,MAAM6e,KAAO,SACrBJ,GAAQze,MAAM8e,QAAU,MACxB72B,SAASpJ,KAAKkgC,YAAYN,KAG5BA,GAAQrX,UAAYzzC,EAEb8qD,GAAQle,YCZF,SAASye,GACtB3f,EACAlwC,EACA8vD,EACAC,EACAC,EACA3oD,IAEA4uC,EAAAA,EAAAA,KAAgB,KACd,GAAI6Z,GAAa5f,EAAW3uB,QAAS,CACnC,MAAM0uC,EAAoB/f,EAAW3uB,QAAQ2uC,QAAwB,iBAErEC,EAAAA,GAAAA,GACEF,EACA/f,EAAW3uB,QAEXyuC,EAAmB,MAAQ,cAlBd,QAoBM3vD,IAAnB0vD,EArBuB,SAqBiC1vD,EACxD0vD,OACA1vD,EACAgH,MAGH,CAAC6oC,EAAYlwC,EAAQ8vD,EAAWC,EAAgBC,EAAkB3oD,ICrBvE,MAGM+oD,GAA4B,EAAI7E,GAAAA,GAChC8E,GAA6B7qD,OAAO+lD,GAAAA,IACpC+E,GAAgC,+BAEvB,SAASC,GACtBC,EACAha,EACAlyC,EACA4iD,EACAuJ,EACAC,EACAC,EACAC,EACAC,EACA7wD,EACA8wD,EACAC,EACAhI,EACAiI,GAEA,MAAM,gBAAEjrD,EAAF,oBAAmBkrD,IAAwBjxC,EAAAA,EAAAA,OAE1CkxC,EAAwBC,EAA0BC,IAA8BjkB,EAAAA,GAAAA,MAChFkkB,EAAUC,EAAYC,IAAgBpkB,EAAAA,GAAAA,KACvCqkB,GAAsBlpB,EAAAA,EAAAA,MAoJ5B,OAzCA3I,EAAAA,EAAAA,KAAU,KACR,IAAKn2B,EAAAA,IAAgBinD,IAAmBC,GAAYI,EAClD,OAGF,IAAIW,EACJ,OAAOxoB,EAAAA,GAAAA,IAAcuN,EAAaj1B,QAAU,CAC1C2nB,wBAAyB,eACzBC,QAAU,CAACz7B,EAAG3F,IACRA,IAAcqhC,GAAAA,GAAAA,OACXqoB,IACHA,EAAY97C,KAAKC,OAGnB07C,KAEO,GAKXI,UAAW,KACJD,IAIL1rD,EAAgB,CAAEzB,UAAAA,IAElBoC,WAAW6qD,EAAc3mD,KAAKC,IAAI,EAjKT,KAiKwC8K,KAAKC,MAAQ67C,KAC9EA,OAAYpxD,QAGf,CACDm2C,EAAcia,EAAgBnsD,EAAWyB,EAAiBurD,EAAYC,EAAcb,EAAUI,IAQzF,CACLa,gBAAkBlB,OAAmCpwD,EAnJvD,SAAyBqN,IACvBkkD,EAAAA,GAAAA,GAAwBlkD,GACxBmjD,EAAwBnjD,IAkJxBqxC,YAvFF,SAAqBrxC,GACnB,GAAI+iD,EACFD,EAAc9iD,QAIhB,GAAKlE,EAAAA,GAEL,OAAIgoD,EAAoBjwC,SACtBswC,cAAcL,EAAoBjwC,SAClCiwC,EAAoBjwC,aAAUlhB,OArBlC,SAAyBqN,GACvB,MAAQokD,MAAO9gC,EAAG+gC,MAAOjgC,GAAMpkB,EAE/BujD,EAAoB,CAClBjxD,OAAAA,EACAsE,UAAAA,EACA0sB,EAAAA,EACAc,EAAAA,IAeAkgC,CAAgBtkD,SAIlB8jD,EAAoBjwC,QAAU7a,YAAW,KACvC8qD,EAAoBjwC,aAAUlhB,EA5ClC,SAAmBqN,GACjB,GAAI8Z,EAAAA,GAAY,CACd,MAAMyqC,EAASvkD,EAAEukD,OACjB,IAAKA,EAAOthB,UAAUuhB,SAAS,kBAAoBD,EAAOthB,UAAUuhB,SAAS,WAC3E,OAGEhhC,GAAAA,EAAAA,uBACFxqB,YAAW,KACTkqD,EAAcljD,KAvEe,KA0E/BkjD,EAAcljD,IAiChBykD,CAAUzkD,KAzGwB,OAgLpC0kD,kBAAoB3B,EAAsCE,EAAc0B,GAAAA,OAAYhyD,EAnEtF,SAA2BqN,GACzB,GAAI8Z,EAAAA,GAAY,CACd,GAAK9Z,EAAEukD,OAAuBK,QAAQ,YAAcxB,EAClD,OAGFpjD,EAAEyyB,iBACFqwB,SAEAI,EAAcljD,IA2DhB6kD,kBAAoB9B,OAA8CpwD,EAvDpE,WACMmJ,EAAAA,IAEJzD,EAAgB,CAAEzB,UAAAA,KAqDlBkuD,yBAA2BhpD,EAAAA,QAAiCnJ,EAlD9D,SAAyBqN,GACvBA,EAAE23B,mBAkDFyL,gBAnJF,SAAyBpjC,GACvB,MAAM+kD,EAAY1B,EAAWxvC,QAC7B,IAAKkxC,EAAW,OAEhB,MAAM,QAAExhB,EAAF,QAAWyhB,GAAYhlD,GACvB,EACJsjB,EADI,MACDG,EADC,EACMW,EADN,OACSwkB,GACXmc,EAAUne,wBAERqe,EAAa/nD,KAAKqiD,IAAKlE,EAAS9X,EAAUjgB,EAAMA,EAAIG,EAAQ8f,GAAamf,GACzEwC,EAAahoD,KAAKqiD,IAAIn7B,EAAIwkB,EAASoc,GAAWrC,GAChDsC,GAAcC,EAChBzB,IAEAC,KAsIFyB,wBAlIF,SAAiCnlD,GAC/B,MAAM,EAAEsjB,EAAF,EAAKc,GAAMpkB,EAAEolD,cAAcxe,wBACjC2c,EAAoB,CAClBjxD,OAAAA,EACAsE,UAAAA,EACA0sB,EAAAA,EACAc,EAAAA,KA6HF8a,iBAbF,SAA0Bl/B,GACxB0jD,IACIJ,GAyBR,SAAuCtjD,GACrC,MAAMqlD,EAAmBC,GAA8BtlD,EAAEolD,eACrDC,GACFA,EAAiBE,gBAAgB3C,IA5BL4C,CAA8BxlD,IAY1D2jD,SAAAA,EACAH,uBAAAA,EACAiC,8BAAAA,IAIJ,SAASA,GAA8BzlD,GACrC,MAAMqlD,EAAmBC,GAA8BtlD,EAAEolD,eACrDC,GACFA,EAAiBK,aAAa9C,GAA+B,IAWjE,SAAS0C,GAA8B1D,GACrC,IAAI/tC,EAA0B+tC,EAE9B,GACE/tC,EAAUA,EAAQ8xC,yBACX9xC,IAAYA,EAAQovB,UAAUuhB,SAAS,2BAEhD,OAAO3wC,E,eCzNT,MAQA,IAAe6e,EAAAA,EAAAA,KARkCuK,IAC/C,MAAM,OAAEhhC,GAAWghC,EACb2oB,GAAuBzoB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBnhC,GAGrF,OAAO2pD,EAAuB,mBAACA,EAAyB3oB,QAAYtqC,KC2ItE,IAAe+/B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAqC,IAA5B,QAAEuD,GAA0B,EACnC,MAAQ2N,KAAM6uC,GAAc//C,EAAO6Q,MAC7BnE,EAASnJ,EAAQ6nB,UACjB,cAAEooC,EAAF,aAAiBC,GAAiBlwD,EAAQ+G,QAAQwC,QAAU,GAC5D4mD,EAAkBnwD,EAAQ+Q,iBAC1Bq/C,EAAgBD,GAClBt/C,EAAAA,EAAAA,IAAkBpU,EAAQuD,EAAQtD,OAAQyzD,QAC1CpzD,EAEEyvD,GAAY6D,EAAAA,EAAAA,IAAuB5zD,EAAQuD,IACzCyE,UAAWgoD,EAAgBnpD,YAAaopD,GAAsBF,GAAa/vD,EAAO6zD,gBAAmB,GAEvGnuD,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQuD,EAAQtD,QAClC6zD,EAASpuD,KAASwsC,EAAAA,EAAAA,IAAcxsC,IAASgH,IAAWnJ,EAAQtD,QAIlE,MAAO,CACL8/C,UAAAA,EACAgU,YALkBD,GAAUpnD,GAAS+M,EAAAA,EAAAA,IAAWzZ,EAAQ0M,QAAUpM,EAMlE0zD,WALiBF,EAASpuD,OAAOpF,EAMjCmzD,aAAAA,EACAD,cAAAA,EACAG,cAAAA,EACA5D,UAAAA,KACIA,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,MA1BrBrtB,EApG6B,IAe3C,IAf4C,QAChDr/B,EADgD,oBAEhD0wD,EAFgD,WAGhDC,EAHgD,gBAIhDC,EAAkB,EAJ8B,aAKhDC,EALgD,UAMhDrU,EANgD,WAOhDgU,EAPgD,WAQhDC,EARgD,cAShDR,EATgD,cAUhDG,EAVgD,aAWhDF,EAXgD,UAYhD1D,EAZgD,eAahDC,EAbgD,iBAchDC,GACI,EAEJ,MAAMvlB,GAAMnC,EAAAA,EAAAA,IAAuB,OAEnC8rB,EAAAA,GAAAA,IAAe3pB,EAAKupB,IACpB7P,EAAAA,GAAAA,GAAiB7gD,EAAQtD,OAAQsD,EAAQ+Q,iBAAkBq/C,GAC3D7D,GAAgBplB,EAAKnnC,EAAQtD,OAAQ8vD,EAAWC,EAAgBC,GAEhE,MAAMjtD,GAAOm/B,EAAAA,GAAAA,KAEPmyB,EAAwBH,GAAmB,GAC1CjpB,EAASqpB,IAAannB,EAAAA,GAAAA,GAAQknB,IACrC10B,EAAAA,EAAAA,KAAU,KACJ00B,GAIJ3tD,WAAW4tD,EAlCU,GAkCCJ,KACrB,CAACA,EAAiBI,EAAWD,IAChC,MAAM,qBAAEtqB,IAAyBC,EAAAA,GAAAA,GAAkBiB,OAAS5qC,EAAWg0D,GAAuB,GAExFE,GAAcpwB,EAAAA,EAAAA,KAAQ,IACnBovB,EACHA,EAAcnwD,KAAKqJ,GAAWqzC,MAAAA,OAAZ,EAAYA,EAAYrzC,KAASpJ,OAAgBwB,cACnExE,GACH,CAACkzD,EAAezT,IAEbz1C,GAAUmqD,EAAAA,GAAAA,GACdzxD,EACAO,EACAwwD,EACAC,EACAQ,EACAb,EACAF,EACA,CAAEiB,mBAAoBR,KAElB,kBACJS,EADI,oBACeC,EADf,wBAEJ9D,EAFI,kBAEqBuB,EAFrB,uBAGJwC,EAHI,sBAGoBC,IACtBC,EAAAA,GAAAA,GAAuBrqB,GACrBqmB,OAA6CzwD,IAAxBs0D,EAO3B,GAAIV,EACF,OAAO,2BAAMvzB,UAAU,2BAA2Br2B,GAGpD,MAAMq2B,GAAYqE,EAAAA,GAAAA,GAChB,kCACA+qB,IAAcE,GAAoB,UAClCc,GAAsB,gBACtBqD,GAAgB,eAChBpqB,GAGF,OACE,0BACEU,IAAKA,EACLvpC,IAAI6zD,EAAAA,EAAAA,IAAiBzxD,EAAQpC,IAC7Bw/B,UAAWA,EACX,kBAAiBp9B,EAAQpC,GACzBywC,YAvBqBjkC,KACvBkkD,EAAAA,GAAAA,GAAwBlkD,GACxBmjD,EAAwBnjD,IAsBtBkjD,cAAewB,GAEf,+BAAO/nD,GACNsqD,GACC,mBAAC,GAAD,CACEhrD,OAAQ+qD,EACRtf,OAAQuf,EACRrxD,QAASA,EACT2D,gBAAgB,SAChB8kC,QAAS6oB,EACTpf,oBAAqBqf,SCvC/B,GApEsC,IAShC,UATiC,UACrCn0B,EADqC,QAErCp9B,EAFqC,OAGrCQ,EAHqC,MAIrCwZ,EAJqC,WAKrC03C,EALqC,YAMrCrE,EANqC,oBAOrCqD,EAPqC,QAQrC/xB,GACI,EAEJ,MAAMwI,GAAMnC,EAAAA,EAAAA,IAAuB,MAC7B2sB,GAAiBC,EAAAA,GAAAA,IAAkBzqB,EAAKupB,GAExC1b,GAAeC,EAAAA,GAAAA,GAASj1C,IAAWk1C,EAAAA,EAAAA,IAAoBl1C,EAAS,cAAe2xD,GAC/E5c,EAAiB5C,GAAiBnyC,GAClC6xD,EAAetwD,QAAQvB,IAAW8xD,EAAAA,EAAAA,IAAqB9xD,IAEvDP,GAAOm/B,EAAAA,GAAAA,KAEPmzB,GAAc/xD,MAAAA,GAAA,UAAAA,EAAS4kD,mBAAT,eAAsBE,iBAAmBtkD,IAAUG,EAAAA,EAAAA,IAAelB,EAAMe,GAE5F,OACE,0BACE2mC,IAAKA,EACL/J,WAAWqE,EAAAA,GAAAA,GAAe,kBAAmBrE,GAC7CuB,QAAS3+B,EAAU2+B,OAAU5hC,GAE5Bg4C,GAiBP,SACE3C,EACA1c,EACAm8B,EACAxE,GAEA,MAAM,MAAEx/B,EAAF,OAASmlB,IAAW2C,EAAAA,GAAAA,MAE1B,OACE,sCACE,0BACEC,IAAKlgB,GAAW0c,EAChBvkB,MAAOA,EACPmlB,OAAQA,EACR6C,IAAI,GACJzY,UAAWy0B,EAAe,QAAU,GACpCG,WAAY3E,IAEbA,GAAe,2BAAMjwB,UAAU,eAnCb0Y,CAAgBf,EAAgBC,EAAc6c,EAAcxE,GAC/E,0BAAKjwB,UAAU,gBACb,wBAAGyB,IAAI,QACH7+B,GAEE2kD,EAAAA,EAAAA,IAAgB3kD,GAClB,mBAAC,GAAD,CAAeA,QAASA,EAAS2wD,YAAU,KAE3Cxb,EAAAA,GAAAA,GAAqB11C,EAAMO,EAASuB,QAAQwzC,IAJ5C2c,GAlCC,KAyCL,0BAAKt0B,UAAU,gBAAgByB,IAAI,SAAQkd,EAAAA,GAAAA,GAAWgW,GAAe/3C,GAzChE,S,2DCXb,MAsEA,IAAe8iB,EAAAA,EAAAA,KAnE6B,IAKtC,YALuC,SAC3C1N,EAD2C,eAE3C6iC,EAF2C,SAG3CC,EAH2C,mBAI3C3jC,GACI,EACJ,MAAM,mBAAE4jC,IAAuBz1C,EAAAA,EAAAA,MAEzBwR,EAAoBK,MAAAA,OAAH,EAAGA,EAAoBhpB,MAAM6sD,GAAMA,EAAEhjC,WAAaA,IACnEijC,EAAenkC,MAAAA,GAAH,UAAGA,EAAmBI,kBAAtB,aAAG,EAA+B1wB,GAC9C00D,EAAWpkC,MAAAA,GAAH,UAAGA,EAAmBC,uBAAtB,aAAG,EAAoCvwB,GAC/C20D,GAAsBtd,EAAAA,GAAAA,GAAU,UAASod,KAAiBA,EAAchkC,EAAAA,GAAAA,QACxEmkC,GAAkBvd,EAAAA,GAAAA,GAAU,UAASqd,KAAaA,EAAUjkC,EAAAA,GAAAA,QAE5DokC,EAAalxD,SAAQ0wD,MAAAA,OAAA,EAAAA,EAAgB7iC,YAAaA,GAAYmjC,GAAuBC,IAEzFjsB,aAAcmsB,EACdjsB,qBAAsBksB,IACpBjsB,EAAAA,GAAAA,GAAkB+rB,OAAY11D,GAAW,EAAM,QAE7C61D,GAAcjxB,EAAAA,EAAAA,KAAY,KAC9BwwB,EAAmB,CAAEnxD,UAAWixD,MAAAA,OAAF,EAAEA,EAAgBjxD,UAAWouB,SAAAA,MAC1D,CAAC6iC,MAAAA,OAAD,EAACA,EAAgBjxD,UAAWouB,EAAU+iC,KAElCU,EAAmBC,EAAqBC,IAAyBlpB,EAAAA,GAAAA,KAClEmpB,GAAsBP,IAAeI,EAErCz1B,GAAYqE,EAAAA,GAAAA,GAChB,wBACAywB,GAAY,UACZQ,GAAyB,gBAG3B,OACE,0BAAKt1B,UAAWA,GACb41B,GAAsB,mBAACC,GAAA,EAAD,CAAqB7jC,SAAUA,IACrDsjC,GACC,sCACE,mBAACQ,GAAA,EAAD,CACE34B,IAAK83B,EACLz0D,GAAK,kBAAiBy0D,IACtBj1B,UAAWu1B,EACXvzB,KA7Ca,GA8Cb+zB,cAAeZ,EACfa,MAAI,EACJC,QAAM,EACN3tB,uBAAqB,EACrB4tB,OAAQR,EACRS,QAASR,IAEX,mBAACG,GAAA,EAAD,CACE34B,IAAK+3B,EACL10D,GAAK,mBAAkB00D,IACvBl1B,WAAWqE,EAAAA,GAAAA,GAAe,SAAUkxB,GACpCvzB,KAxDQ,IAyDR+zB,cAAeX,EACfY,MAAI,EACJC,QAAM,EACN3tB,uBAAqB,EACrB6tB,QAASX,SCYrB,IAAe91B,EAAAA,EAAAA,KAjEmB,IAI5B,UAJ6B,QACjC98B,EADiC,eACxBwzD,EADwB,UACRC,EADQ,QACG90B,EADH,cACY+0B,EADZ,eAEjCzB,EAFiC,mBAEjB0B,EAFiB,mBAEGplC,EAFH,gBAGjCqlC,GACI,EACJ,MAAMn0D,GAAOm/B,EAAAA,GAAAA,MACNi1B,EAAaC,IAAiBjqB,EAAAA,GAAAA,KAE/Bla,EAAY+jC,IAAiBE,MAAAA,GAAJ,UAAIA,EAAiBjkC,iBAArB,aAAI,EAA4B5mB,QAAQhJ,QAAQsU,GAAMA,EAAED,MAAQ,KAEzF4F,GAAQ6mB,EAAAA,EAAAA,KAAQ,KACpB,IAAKgzB,EAAa,OAClB,MAAME,GAAiBC,EAAAA,EAAAA,IAAsC,IAAfh0D,EAAQ4G,KAAanH,EAAKupB,MAClEirC,EAAej0D,EAAQk0D,WAAYF,EAAAA,EAAAA,IAA2C,IAApBh0D,EAAQm0D,SAAkB10D,EAAKupB,MACzForC,EAAoBp0D,EAAQ4kD,cAAeoP,EAAAA,EAAAA,IAAkD,IAA3Bh0D,EAAQ4kD,YAAYh+C,KAAanH,EAAKupB,MAE9G,IAAI9nB,EAAO6yD,EAUX,OATIE,IACF/yD,GAAQ,KACRA,GAAQzB,EAAK,mBAAmBqsB,QAAQ,SAAUmoC,IAEhDG,IACFlzD,GAAQ,KACRA,GAAQzB,EAAK,sBAAsBqsB,QAAQ,SAAUsoC,IAGhDlzD,IACN,CAAC2yD,EAAap0D,EAAMO,IAEvB,OACE,2BACEo9B,WAAWqE,EAAAA,GAAAA,GAAe,cAAekyB,GAAsB,oBAC/D90B,IAAKp/B,EAAKq/B,MAAQ,MAAQ,MAC1BH,QAASA,GAERhP,GAAaA,EAAU7vB,KAAKuU,GAC3B,mBAAC,GAAD,CACE49C,eAAgBA,EAChB7iC,SAAU/a,EAAE+a,SACZ8iC,UAAQ,EACR3jC,mBAAoBA,MAGvBhtB,QAAQvB,EAAQq0D,QACf,sCACE,2BAAMj3B,UAAU,kBACbC,EAAAA,GAAAA,IAAqBr9B,EAAQq0D,QAEhC,wBAAGj3B,UAAU,uBAGhBq2B,GACC,2BAAMr2B,UAAU,sBAAqB2e,EAAAA,GAAAA,GAAW0X,IAElD,2BAAMr2B,UAAU,eAAepjB,MAAOA,EAAOiwB,aAAc6pB,GACxD9zD,EAAQk0D,UAAa,GAAEz0D,EAAK,qBAC5B60D,EAAAA,EAAAA,IAAW70D,EAAqB,IAAfO,EAAQ4G,OAE3B4sD,GACC,mBAACe,GAAA,EAAD,CAAuBhoC,OAAQinC,Q,yBC9DvC,MA0GA,GA1G8B,IAExB,IAFyB,QAC7BxzD,EAD6B,oBACpB0wD,EADoB,8BACC8D,EADD,WACgCC,EADhC,aAC4CvzC,GACrE,EAEJ,MAAMimB,GAAMnC,EAAAA,EAAAA,IAAuB,OAE5B0vB,EAAaC,EAAWC,IAAc/qB,EAAAA,GAAAA,KAEvCx/B,EAAUrK,EAAQ+G,QAAQsD,SAC1B,SAAEwqD,EAAF,aAAYt9C,EAAZ,QAA0Bu9C,GAAYzqD,EACtC0qD,EAAkBC,EAAAA,GAClBC,EAAkB19C,IAAiB29C,EAAAA,GAEnCC,GAAavD,EAAAA,GAAAA,IAAkBzqB,EAAKupB,GACpC+B,GAAab,EAAAA,GAAAA,IAAkBzqB,EAAKqtB,GAEpCY,EAAY/qD,EAAQurB,oBAAuB,UAASvrB,EAAQzM,MAAOs3C,EAAAA,EAAAA,IAAoBl1C,EAAS,UAChGq1D,EAAmBP,IAAYC,IACnC1qD,EAAQurB,oBAAuB,UAASvrB,EAAQzM,aAAcs3C,EAAAA,EAAAA,IAAoBl1C,EAAS,cACvF61B,GAAiBof,EAAAA,GAAAA,GAASogB,GAC1BjjB,EAAeD,GAAiBnyC,GAChCs1D,EAAaz/B,GAAkBuc,EAE/BoI,GAAYvF,EAAAA,GAAAA,GAChBmgB,GACCD,GACDI,EAAAA,EAAAA,IAAsBv1D,EAAS,UAC/BkhB,GAGIs0C,EAAgBj0D,QAAQi5C,IACvBib,EAAgBC,IAAoB7rB,EAAAA,GAAAA,GAAQ2rB,GAC7CG,EAAed,EAAWY,EAAiBD,EAC3C/uB,GAAuBmvB,EAAAA,GAAAA,GAAmBD,IAE1C,MAAE9nC,EAAF,OAASmlB,IAAW6iB,EAAAA,GAAAA,IAAqBxrD,GACzCyrD,GAAiBr0B,EAAAA,GAAAA,GAAe,aAAc2Q,GAAgB,SAE9D2jB,GAAmBt0B,EAAAA,GAAAA,GACvB,sBACAwzB,GAAmB,YAcrB,OAXA54B,EAAAA,EAAAA,KAAU,KACR,IAAKy4B,IAAY3tB,EAAIlpB,QAAS,OAC9B,MAAMsX,EAAQ4R,EAAIlpB,QAAQue,cAAc,SACnCjH,IACDk9B,GACFuD,EAAAA,GAAAA,GAASzgC,GAETA,EAAM/d,WAEP,CAACs9C,EAASrC,IAGX,0BAAKtrB,IAAKA,EAAK/J,UAAW24B,EAAkBp3B,QAAUs2B,OAA8Bl4D,EAAZ43D,KACnEgB,GAAiBb,IAAYC,IAC9B,0BACEnf,IAAK0f,EACLznC,MAAOA,EACPmlB,OAAQA,EACR6C,IAAI,GACJzY,UAAW04B,KAGbjB,IAAaC,GACb,0BACElf,IAAK4E,EACL3sB,MAAOA,EACPmlB,OAAQA,EACR6C,IAAI,GACJzY,WAAWqE,EAAAA,GAAAA,GAAe,aAAcgF,KAG3CquB,GAAWC,GAAmBY,GAC7B,4BACE/f,IAAK4E,EACL3sB,MAAOA,EACPmlB,OAAQA,EACRijB,SAAUxD,EACVyD,aAAW,EACXC,KAAM1B,EACN2B,OAAK,IAGRvB,GAAYW,GACX,mBAACtC,GAAA,EAAD,CACE34B,IAAK66B,EACLh4B,WAAWqE,EAAAA,GAAAA,GAAe,aAAcgF,GACxC7oC,GAAIw3D,EACJjC,cAAe3Y,EACfpb,KAAMvR,EACNulC,KAAMX,EACNY,QAASoB,EACTnB,OAAQoC,IAGZ,mBAAC,KAAD,CACErvD,OAAQquD,EACR2B,YAAahsD,EACbo+B,QAASmsB,M,qCC3HF,SAAS0B,GAAwBt2D,EAAqBu2D,GACnE,OAAOC,EAAAA,GAAAA,IACLnkB,EAAAA,EAAAA,IAA4BryC,GAC5BuB,QAAQg1D,GACR1sD,EAAAA,KAA4B4sD,EAAAA,ICRhC,MAAMC,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBnhB,EAAa6P,EAAgBuR,EAAwBC,EAAsBt3B,GAE3E,OAAIs3B,EACKxgB,QAAQC,QAAQggB,GAAyB/2B,GAAS,SAAS8lB,EAAQ,WAAa,aAK3F74C,eAAyCgpC,EAAa6P,GACpD,MAAMlP,EAAM,IAAIC,MAChBD,EAAIX,IAAMA,EAELW,EAAI1oB,aACD,IAAI4oB,SAASC,IACjBH,EAAII,OAASD,KAIjB,MAAMc,EAAShiB,SAASiiB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MAE9BH,EAAO3pB,MAAQ0oB,EAAI1oB,MACnB2pB,EAAOxE,OAASuD,EAAIvD,OAEpB0E,EAAIG,UAAUtB,EAAK,EAAG,EAAGA,EAAI1oB,MAAO0oB,EAAIvD,QAExC,MAAMtlB,EAAI+3B,EAAQlP,EAAI1oB,MAAQ,EAAI,EAC5BW,EAAI+nB,EAAIvD,OAAS,EAGvB,MAAQ,QADMzhB,MAAMtiB,KAAKyoC,EAAIwf,aAAaxpC,EAAGc,EAAG,EAAG,GAAGrjB,MACjCrK,KAAK,QAzBnBq2D,CAA0BvhB,EAAK6P,G,eC6BxC,MAwIA,GAxI4B,IAkBtB,IAlBuB,GAC3B7nD,EAD2B,QAE3BoC,EAF2B,oBAG3B0wD,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,eAM3BjK,EAN2B,WAO3B8J,EAP2B,eAQ3BI,EAR2B,KAS3Bj4B,EAAO,SAToB,WAU3BgoB,EAV2B,eAW3BkQ,EAX2B,qBAY3BC,EAZ2B,cAa3BC,EAb2B,YAc3BnK,EAd2B,MAe3B1tB,EAf2B,QAgB3BhB,EAhB2B,eAiB3B84B,GACI,EAEJ,MAAMtwB,GAAMnC,EAAAA,EAAAA,IAAuB,MAG7B0yB,IADS7R,EAAAA,EAAAA,IAAgB7lD,KAAY8lD,EAAAA,EAAAA,IAAuB9lD,IACvC01B,QAErBi8B,GAAiBC,EAAAA,GAAAA,IAAkBzqB,EAAKupB,IAEvCiH,EAAeC,IAAoB/5B,EAAAA,EAAAA,IAASu5B,GAC7CjC,EAAawC,GAAiBhG,GAC9B,UACJnX,EADI,aACOqd,IACTC,EAAAA,GAAAA,IAAyB5iB,EAAAA,EAAAA,IAAoBl1C,EAASo/B,IAAQ+1B,GAC5DoB,EAAgBmB,GAAgBld,EAChCud,EAAWzB,GAAwBt2D,EAASu2D,IAGhDsB,aAAcG,IACZF,EAAAA,GAAAA,IAAyB5iB,EAAAA,EAAAA,IAAoBl1C,EAAS,aAAcw3D,IAElE,YACJS,EADI,eACSC,EADT,iBACyBC,IAC3BC,EAAAA,EAAAA,IACFp4D,EACAq3D,IAAmBG,EAAgBQ,EAAmBH,GACtD1C,IAAeoB,GAEX8B,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BlxB,GAAuBmvB,EAAAA,GAAAA,GAAmBW,IAE9ChwB,aAAcgyB,EACd9xB,qBAAsB+xB,IACpB9xB,EAAAA,GAAAA,GAAkBwxB,OAAgBn7D,EAAWs7D,EAAiB,SAEhE9xB,aAAckyB,EACdhyB,qBAAsBiyB,IACpBhyB,EAAAA,GAAAA,IAAmB6vB,IAAkBoB,GAEnClc,GAAc9Z,EAAAA,EAAAA,KAAY,KAC1Bs2B,EACER,GACFA,EAAez3D,GAEPu2D,EAED53B,GACTA,EAAQ3+B,EAAQpC,IAFhBg6D,GAAkBe,IAAeA,MAIlC,CAACpC,EAAe0B,EAAaj4D,EAASy3D,EAAgB94B,IAEnD8mB,GAAQC,EAAAA,EAAAA,IAAa1lD,IAC3B2yC,EAAAA,EAAAA,KAAgB,KACd,IAAK4kB,EACH,OAGF,MAAMqB,EAAYzxB,EAAIlpB,QAAS2uC,QAAwB,oBAEnD2J,EACFQ,GAAoBR,EAAe9Q,EAAO0H,EAAgB8J,EAAYt3B,GAAOkT,MAAMgmB,IACjFD,EAAUrrB,MAAMurB,YAAY,gBAAiBD,GAC7CD,EAAU9I,aAAaiJ,EAAAA,GAA2B,OAGpDH,EAAUvrB,UAAUU,IAAI,wBAEzB,CAACwoB,EAAe9Q,EAAO8R,EAAsBpK,EAAgB8J,EAAYt3B,IAE5E,MAAM,MAAE9R,EAAF,OAASmlB,EAAT,QAAiBuT,GAAYa,GAAc7B,GAAyBvlD,EAASwlD,GAE7EpoB,GAAYqE,EAAAA,GAAAA,GAChB,eACCw2B,IAAgBX,GAAkB,cACnC/Q,GAAW,cACX14B,IAAUmlB,GAAU,gBAGhBzF,EAAQ6Z,EACT,UAASv5B,gBAAoBmlB,cAAmBoU,EAAW15B,aAAa05B,EAAW54B,OACpF,GAEJ,OACE,0BACE5wB,GAAIA,EACJupC,IAAKA,EACL/J,UAAWA,EACXmQ,MAAOA,EACP5O,QAASs5B,OAAcl7D,EAAY0+C,GAEnC,6BACEtU,IAAK4wB,EACL36B,UAAU,YACVmQ,MAAQ,UAAS1f,gBAAoBmlB,QAEvC,0BACE4C,IAAK2gB,EACLn5B,UAAY,cAAaqJ,IACzB5Y,MAAOA,EACPmlB,OAAQA,EACR6C,IAAI,GACJmc,WAAY3E,IAEbA,GAAe,2BAAMjwB,UAAU,cAC/Bm7B,IAAwBE,GACvB,0BAAKr7B,UAAY,iBAAgBo7B,KAC/B,mBAACQ,GAAA,EAAD,CAAiBvpD,SAAU0oD,EAAkBx5B,QAASs5B,EAAcxc,OAAc1+C,KAGrF07D,GAA8B,wBAAGr7B,WAAWqE,EAAAA,GAAAA,GAAe,gBAAiBi3B,KAC5ER,GACC,2BAAM96B,UAAU,6BAA6B91B,KAAK2F,MAAyB,IAAnBkrD,GAAxD,O,0BC3KO,SAASc,GAAkBC,EAAiDC,GAAkB,MAC3G,MAAMC,GAAap0B,EAAAA,EAAAA,IAAM,UAACk0B,EAAUj7C,eAAX,aAAC,EAAmBo7C,QACvCC,GAAat0B,EAAAA,EAAAA,MACnBs0B,EAAWr7C,QAAUk7C,EAErB,MAAMI,GAAgB53B,EAAAA,EAAAA,KAAY,KAC3Bu3B,EAAUj7C,UAIfm7C,EAAWn7C,SAAWi7C,EAAUj7C,QAAQo7C,OAEpCD,EAAWn7C,SACbi7C,EAAUj7C,QAAQzG,WAEnB,CAAC0hD,IAEEM,GAAkB73B,EAAAA,EAAAA,KAAY,KAEhCu3B,EAAUj7C,SAAWm7C,EAAWn7C,SAAWq7C,EAAWr7C,SAEnDuX,SAASpJ,KAAKwiC,SAASsK,EAAUj7C,WAEpC+3C,EAAAA,GAAAA,GAASkD,EAAUj7C,WAEpB,CAACi7C,IAEEO,GAAuB93B,EAAAA,EAAAA,KAAY,MACvC+3B,EAAAA,EAAAA,IAAQF,KACP,CAACA,KAEJG,EAAAA,GAAAA,GAAkBJ,EAAeE,IACjCG,EAAAA,GAAAA,IAAuBL,EAAeC,G,mNCUxC,MAwKA,GAxK4B,IActB,UAduB,GAC3B57D,EAD2B,QAE3BoC,EAF2B,oBAG3B0wD,EAH2B,UAI3BlL,EAJ2B,YAK3B4R,EAL2B,YAM3ByC,EAN2B,eAO3BxC,EAP2B,aAQ3Bn2C,EAR2B,WAS3BkmC,EAT2B,QAU3BzoB,EAV2B,eAW3B84B,EAX2B,cAY3BD,EAZ2B,YAa3BnK,GACI,EAEJ,MAAMlmB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7B80B,GAAW90B,EAAAA,EAAAA,IAAyB,MAEpCzP,GAASwwB,EAAAA,EAAAA,IAAgB/lD,KAAY+5D,EAAAA,EAAAA,IAAuB/5D,GAC5D03D,EAAeniC,EAAMG,QAErBi8B,GAAiBC,EAAAA,GAAAA,IAAkBzqB,EAAKupB,IAEvCiH,EAAeC,IAAoB/5B,EAAAA,EAAAA,IAASu5B,GAC7CjC,EAAa5zD,QAAQo2D,GAAiBhG,GAAkBzwC,IACvD84C,EAAeC,IAAoBp8B,EAAAA,EAAAA,IAASg8B,GAE7ChkC,GAAiBof,EAAAA,GAAAA,IACrBC,EAAAA,EAAAA,IAAoBl1C,EAAS,eAC3B2xD,GAAkBzwC,IACpBq0C,EAAAA,EAAAA,IAAsBv1D,EAAS,aAC/BkhB,GAEIg5C,GAAoBtE,EAAAA,GAAAA,GAAmB//B,IAEvC,UAAE2kB,EAAF,aAAaqd,IAAiBC,EAAAA,GAAAA,IAClC5iB,EAAAA,EAAAA,IAAoBl1C,EAAS,WAC5Bm1D,GACDI,EAAAA,EAAAA,IAAsBv1D,EAAS,UAC/BkhB,GAEIq1C,EAAgBmB,GAAgBld,EAChC2f,EAAW54D,QAAQowD,GAAkB4E,GAErCwB,EAAWzB,GAAwBt2D,EAAS61B,IAE1CgiC,aAAcG,IAAqBF,EAAAA,GAAAA,IACzC5iB,EAAAA,EAAAA,IAAoBl1C,EAAS,aAC5Bw3D,EACDnpC,EAAAA,GAAAA,QACAnN,IAGI,WAAEk5C,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,IAAclD,IAClD,YAAEa,EAAF,eAAeC,EAAf,iBAA+BC,IAAqBC,EAAAA,EAAAA,IACxDp4D,EACAq3D,IAAmBG,EAAgBQ,EAAmBH,GACrD1C,IAAeiF,GAAe5C,GAE3Ba,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,IAElCpxB,aAAcgyB,EACd9xB,qBAAsB+xB,IACpB9xB,EAAAA,GAAAA,GAAkBwxB,OAAgBn7D,EAAWs7D,IAE/C9xB,aAAcg0B,EACd9zB,qBAAsB+zB,IACpB9zB,EAAAA,GAAAA,GAAkBixB,IAAkBqC,IAAkBzB,IAEnDkC,EAAcC,IAAmB78B,EAAAA,EAAAA,IAAiB,GACnD88B,GAAmBh5B,EAAAA,EAAAA,KAAav3B,IACpCswD,EAAgBpzD,KAAKC,IAAI,EAAG6C,EAAEolD,cAAcoL,YAAc,MACzD,IAEGC,GAAW,UAACf,EAAS77C,eAAV,aAAC,EAAkB48C,WAAatlC,EAAMslC,UAAY,EAE7DpV,GAAQC,EAAAA,EAAAA,IAAa1lD,GACrB2lD,GAAcC,EAAAA,EAAAA,IAAmB5lD,IACjC,MAAE6tB,GAAF,OAASmlB,IAAWoU,IAAclB,EAAAA,GAAAA,IAAyB3wB,EAAOkwB,EAAOE,EAAaH,GAE5FyT,GAAkBa,EAAUK,IAC5BW,EAAAA,GAAAA,GAAgBhB,EAAU,CAACK,IAE3B,MAAM1e,IAAc9Z,EAAAA,EAAAA,KAAY,KAC1Bs2B,EACER,GACFA,EAAez3D,GAERw3D,GACT96C,EAAAA,EAAAA,MAAaq+C,2BAA2B,CAAE/6D,QAAAA,IAChCu2D,EAEDA,IAAkByD,GAC3BC,GAAiB,GACjBH,EAAS77C,QAASm1C,QACTz0B,GACTA,EAAQ3+B,EAAQpC,IALhBg6D,GAAkBe,IAAeA,MAOlC,CAACV,EAAaT,EAAejB,EAAeyD,EAAer7B,EAAS84B,EAAgBz3D,IAEjFo9B,IAAYqE,EAAAA,GAAAA,GAAe,oBAAqBw2B,GAAe,eAC/D1qB,GAAQ6Z,EACT,UAASv5B,iBAAoBmlB,eAAmBoU,EAAW15B,aAAa05B,EAAW54B,OACpF,GAEJ,OACE,0BACE2Y,IAAKA,EACLvpC,GAAIA,EACJw/B,UAAWA,GACXmQ,MAAOA,GACP5O,QAASs5B,OAAcl7D,EAAY0+C,IAEnC,6BACEtU,IAAK4wB,EACL36B,UAAU,YACVmQ,MAAQ,UAAS1f,iBAAoBmlB,UAEvC,0BACE4C,IAAK/f,EACLuH,WAAWqE,EAAAA,GAAAA,GAAe,YAAay4B,GACvC3sB,MAAQ,UAAS1f,iBAAoBmlB,QACrC6C,IAAI,GACJmc,WAAY3E,IAEb8M,GACC,+BACEhzB,IAAK2yB,EACL18B,UAAU,aACVvP,MAAOA,GACPmlB,OAAQA,GACRijB,SAAU+D,EACV5D,OAAK,EACLD,MAAI,EACJD,aAAW,GAEPmE,EAVN,CAWErI,WAAY3E,EACZ2N,aAAcL,IAEd,6BAAQ/kB,IAAK2gB,KAGhBlJ,GAAe,2BAAMjwB,UAAU,cAC/Bm9B,GAA0B,wBAAGn9B,WAAWqE,EAAAA,GAAAA,GAAe,kBAAmB+4B,KAC1EjC,GACC,0BAAKn7B,WAAWqE,EAAAA,GAAAA,GAAe,gBAAiB+2B,IAC9C,mBAACQ,GAAA,EAAD,CAAiBvpD,SAAU0oD,EAAkBx5B,QAAS8c,OAGxDkc,GACA,wBAAGv6B,UAAU,kBAEd86B,EACC,2BAAM96B,UAAU,6BACZ66B,GAAeT,EAAkB,GAAElwD,KAAK2F,MAAyB,IAAnBkrD,MAA6B,OAG/E,0BAAK/6B,UAAU,0BACZ7H,EAAM0lC,MAAQ,OAAQC,EAAAA,EAAAA,IAAoB5zD,KAAKC,IAAIszD,EAAWJ,EAAc,O,eC5LvF,MA8BA,IAAep7B,EAAAA,EAAAA,KACb,CAAC5iC,EAAD,KAAqC,IAA5B,QAAE0+D,GAA0B,EACnC,MAAQC,aAAeC,WAAYC,IAAoB7+D,EACvD,MAAO,CACLsY,MAAMmB,EAAAA,EAAAA,IAAWzZ,EAAQ0+D,EAAQhyD,QACjCmyD,cAAAA,KALN,EA9B2C,IAErC,IAFsC,QAC1CH,EAD0C,KACjCpmD,EADiC,cAC3BumD,GACX,EACJ,MAAM,SAAE38D,IAAa+d,EAAAA,EAAAA,OAEf,UACJ2F,EADI,SAEJD,EAFI,YAGJgB,EAHI,OAIJja,GACEgyD,EAEE1f,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9BhjC,EAAS,CAAEf,GAAIuL,MACd,CAACxK,EAAUwK,IAEd,OACE,0BACEi0B,WAAWqE,EAAAA,GAAAA,GAAe,UAAWlgC,QAAQ4H,IAAW,eACxDw1B,QAASx1B,EAASsyC,OAAc1+C,GAEhC,mBAACqgD,GAAA,EAAD,CAAQhe,KAAK,QAAQrqB,KAAMA,EAAM7T,KAAMmhB,GAAaD,IACpD,0BAAKgb,UAAU,gBACb,0BAAKA,UAAU,gBAAgB/a,EAA/B,IAA2CD,GAC3C,0BAAKgb,UAAU,kBAAiBm+B,EAAAA,GAAAA,IAA0BD,EAAel4C,S,gDCqDjF,SAASo4C,GAAc/pD,EAAewvB,GACpC,OAAOA,EAAQ,GAAMxvB,EAAQwvB,EAAS,KAAKw6B,UAAY,EAGzD,SAnFiC,IAO3B,IAP4B,OAChCC,EADgC,YAEhCC,EAFgC,YAGhCtiC,EAHgC,eAIhCuiC,EAJgC,eAKhCC,EALgC,cAMhCC,GACI,EACJ,MAAMj8D,EAAS87D,GAAeA,EAAYp2D,MAAM6sD,GAAMA,EAAEz9C,SAAW+mD,EAAO/mD,SACpEonD,EAA0C,IAA1BF,EAAe55D,SAA2D,IAA3C45D,EAAe58D,QAAQy8D,EAAO/mD,QAC7EqnD,EAAYH,EAAe55D,OAAS,GAAK85D,IAAmBl8D,MAAAA,OAAjD,EAAiDA,EAAQgwB,UACpEosC,EAAgBp8D,EAAS27D,GAAc37D,EAAO85B,YAAaN,GAAe,GAAK,GAC9E6iC,EAAcC,IAAmBt+B,EAAAA,EAAAA,IAASi+B,EAAgB,EAAIG,GAE/DG,GAAUp3B,EAAAA,EAAAA,IAAuB,MACjCq3B,EAAYx8D,EAAS27D,GAAc37D,EAAO85B,YAAaiiC,GAAkB,GAAK,EAC9EU,EAA0BJ,EAAeD,EA0B/C,IAxBA5/B,EAAAA,EAAAA,KAAU,KACJy/B,GACFK,EAAgBF,KAEjB,CAACH,EAAeG,KAEnB5/B,EAAAA,EAAAA,KAAU,KACR,MAAMkgC,EAASH,EAAQn+C,QAEvB,GAAIs+C,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAOloB,kBAEf9G,EAAQ+uB,EAA0B,GAAK,sDACxCE,EAMHA,EAAM1M,aAAa,QAASviB,GAL5BgvB,EAAO5nB,UAAa,gFACiDpH,mFAOxE,CAAC+uB,EAAyBR,KAExBH,IAAgB97D,EACnB,OAGF,MAAM48D,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACE,0BAAKl/B,UAAU,aAAayB,IAAI,OAC9B,0BAAKzB,UAAY,sBAAsC,QAAlB6+B,EAA0B,cAAgB,KAC5EA,EADH,IAEGD,GACC,2BAAM5+B,WAAWqE,EAAAA,GAAAA,GACf,sBACCs6B,GAAiB,QAClBD,GAAiB,YAGjB,wBAAG1+B,UAAW2+B,EAAgB,aAAe,iBAInD,0BAAK3+B,UAAU,qBACb,0BAAKA,UAAU,mBAAmByB,IAAI,SACnCkd,EAAAA,GAAAA,GAAW2f,EAAOx6D,OAErB,0BAAKk8B,WAAWqE,EAAAA,GAAAA,GAAe,qBAAsBu6B,IAAaD,GAAiB,UACjF,0BAAK3+B,UAAU,qBAAqB+J,IAAKi1B,IACzC,0BACEh/B,UAAU,mBACVmQ,MAAOkvB,QCyQnB,IAAe3/B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAsB,IAAb,KAAEiZ,GAAW,EACpB,MAAM,eAAE0jB,GAAmB1jB,EAAK3M,SAC1B,iBAAEjC,EAAkBwG,OAASK,KAAM6uC,IAAgB//C,EACzD,OAAK28B,GAA4C,IAA1BA,EAAen3B,OAI/B,CACLm3B,eAAAA,EACAojB,UAAAA,EACA11C,iBAAAA,GANO,KALOu4B,EAvToB,IAOlC,IAPmC,QACvCr/B,EADuC,KAEvC0V,EAFuC,eAGvC0jB,EAHuC,UAIvCojB,EAJuC,WAKvCkgB,EALuC,iBAMvC51D,GACI,EACJ,MAAM,YAAEkK,EAAF,gBAAe2rD,IAAoBjgD,EAAAA,EAAAA,OAEjC9e,GAAIoD,EAAN,OAAiBtE,GAAWsD,GAC5B,QAAE48D,EAAF,QAAW7zD,GAAY2M,GACtBmnD,EAAcC,IAAmBj/B,EAAAA,EAAAA,KAAkB,IACnDk/B,EAAeC,IAAoBn/B,EAAAA,EAAAA,IAAmB,KACtDo/B,EAAiBC,IAAsBr/B,EAAAA,EAAAA,KAAkB,IACzDs/B,EAAcC,IAAmBv/B,EAAAA,EAAAA,KAAkB,IACnDw/B,EAAaC,IAAkBz/B,EAAAA,EAAAA,KACnC++B,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxDl2D,KAAKymB,IAAI6uC,EAAQY,UAAYl2D,KAAKG,MAAM4K,KAAKC,MAAQ,KAAQxL,EAAkB81D,EAAQS,aACvF,GAGAI,GAAez4B,EAAAA,EAAAA,IAAuB,OACpCj8B,QAAS4yD,EAAX,YAAwBtiC,GAAgBtwB,EACxC20D,EAAW/B,GAAeA,EAAY/rC,MAAMwiC,GAAMA,EAAEviC,WACpD8tC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAY37D,OAAO6G,EAAQswB,aAAe,EAC9EykC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAcr0D,KAAKC,OAAOo0D,EAAY77D,KAAKsyD,GAAMA,EAAEz4B,eAAgBN,EACpFwiC,EAAiBF,EAAcA,EAAYr7D,QAAO,CAAC09D,EAAmB5L,KACtEA,EAAE6L,WACJD,EAAQt9D,KAAK0xD,EAAEz9C,QAGVqpD,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQl+D,KAAKuV,IAAD,CAClC8tB,MAAO9tB,EAAEnU,KACTuQ,MAAO4D,EAAEV,OACTupD,OAAQ38D,QAAQq7D,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxEhhC,EAAAA,EAAAA,KAAU,KAENwgC,GACGnnD,EAAK3M,QAAQA,SACb2M,EAAK3M,QAAQA,QAAQ6mB,MAAM/vB,GAAWA,EAAOgwB,YAEhDitC,GAAgB,KAEjB,CAACD,EAAcnnD,EAAK3M,QAAQA,WAE/BszB,EAAAA,EAAAA,KAAU,KACJghC,EAAc,GAChBj6D,YAAW,IAAMk6D,EAAeD,EAAc,IAAI,KAGpD,MAAMe,EAAcX,EAAax/C,QAEjC,GAAImgD,EAAa,CACf,MAAMC,EAAgB,GAAQ/2D,KAAKg3D,GAC7B9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAY/pB,kBAK5B,GAJIgpB,GAAe,GACjBe,EAAY/wB,UAAUU,IAAI,YAGvByuB,GAAUgC,EASR,CACL,MAAMC,GAAqB7B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBgB,EACzFG,EAAQE,aAAcxD,EAAAA,EAAAA,IAAoBmC,GACzCb,EAAMnoB,kBAAiCyb,aAAa,oBAAsB,IAAG2O,UAX9EL,EAAYzpB,UAAa,oBACjBumB,EAAAA,EAAAA,IAAoBmC,2LAGJgB,KAAiBA,yEAU5C,CAAChB,EAAaT,EAAQS,eAEzBhhC,EAAAA,EAAAA,KAAU,KACJugC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DvsD,EAAY,CAAEtU,OAAAA,EAAQsE,UAAAA,MAEvB,CAACtE,EAAQ2gE,EAAaK,EAAU1sD,EAAahQ,EAAW47D,EAAQW,OAAQX,EAAQuB,QAGnF9hC,EAAAA,EAAAA,KAAU,KACR,IAAIsiC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQx7D,OAAOC,YAAW,KACxB4N,EAAY,CAAEtU,OAAAA,EAAQsE,UAAAA,MACC,IAAtB47D,EAAQS,cAGN,KACDsB,GACFx7D,OAAOgB,aAAaw6D,MAGvB,CAAChB,EAASjhE,EAAQsU,EAAahQ,EAAW47D,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAe/9B,EAAAA,EAAAA,KAAQ,IACpBzH,EAAiBA,EAAe94B,QAAO,CAACT,EAAmBjC,KAChE,MAAMmX,EAAOynC,EAAU5+C,GAKvB,OAJImX,GACFlV,EAAOa,KAAKqU,GAGPlV,IACN,IAAM,IACR,CAAC28C,EAAWpjB,IAETylC,GAAoBl9B,EAAAA,EAAAA,KACvBhtB,IACCqoD,EAAiB,CAACroD,IAClBmoD,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAAC/nD,MACX,CAAC+nD,IAGAoC,GAAuBn9B,EAAAA,EAAAA,KAC1BjtB,IACCsoD,EAAiBtoD,KAChB,IAGCqqD,GAAkBp9B,EAAAA,EAAAA,KACtB,KACEm7B,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,KACV,CAACL,EAAYK,IAGZiC,GAAyBr9B,EAAAA,EAAAA,KAC7B,KACEg7B,EAAgB,CAAEjgE,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAW27D,IAGnBsC,GAAqBt9B,EAAAA,EAAAA,KAAY,KACrCu7B,GAAmB,KAClB,IAEGgC,GAAqBv9B,EAAAA,EAAAA,KAAY,KACrCu7B,GAAmB,GACnBE,GAAgB,KACf,KAGH/gC,EAAAA,EAAAA,KAAU,KACJ8gC,GAAgBO,GAAYd,EAAQuB,MAAQp1D,EAAQA,SAAW2M,EAAK3M,QAAQo2D,WACxDp2D,EAAQA,QAAQxD,MAAM6sD,GAAMA,EAAEviC,UAAYuiC,EAAE6L,aAEhEf,GAAmB,MAGtB,CAACQ,EAAUP,EAAcp0D,EAAQA,QAAS6zD,EAAQuB,KAAMzoD,EAAK3M,QAAQo2D,WAExE,MAAM1/D,GAAOm/B,EAAAA,GAAAA,KA4Cb,OACE,0BAAKxB,UAAU,OAAOyB,IAAKp/B,EAAKq/B,MAAQ,OAAS,OAZ/Cm+B,GAAmBvnD,EAAK3M,QAAQo2D,UAC9B,mBAACC,GAAA,EAAD,CACEp/D,SAASq/D,EAAAA,GAAAA,GAAuB3pD,EAAK3M,QAAQo2D,SAAUzpD,EAAK3M,QAAQu2D,kBACpEzE,SA7MgB,IA8MhB0E,UAAWL,EACXM,YAhNoB,2BAyNxB,0BAAKpiC,UAAU,kBAAiB2e,EAAAA,GAAAA,GAAW6gB,EAAQ6C,SAAU,CAAC,QAAS,QACvE,0BAAKriC,UAAU,aACZ39B,EAuET,SAA2Bm9D,GAEzB,YAAgC,IAArBA,EAAQiB,SAlSR,IAsSPjB,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGrCjB,EAAQW,OACH,eAGFX,EAAQiB,SAAW,aAAe,gBArF7B6B,CAAkB9C,IA/B1BgC,EAAa38D,OAAS,GACpB,0BAAKm7B,UAAU,sBACZwhC,EAAa9+D,KAAKiV,GACjB,mBAACqoC,GAAA,EAAD,CACEhe,KAAK,QACLrqB,KAAMA,OA4BXsoD,EAAc,GAAKM,GAAW,0BAAKx2B,IAAKs2B,EAAcrgC,UAAU,mBAChEw/B,EAAQuB,MAAQzoD,EAAK3M,QAAQo2D,WAAaxB,GACzC,mBAACx+B,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,OACLJ,MAAM,cACN5B,UAAU,iBACVyU,SAAUorB,EACVt+B,QAASsgC,EACTz9B,UAAU,iBAEV,wBAAGpE,UAAU,gBAIlBugC,GACC,0BAAKvgC,UAAU,gBACZ0gC,EAEG,mBAAC6B,GAAA,EAAD,CACEjrD,QAASspD,EACTh6B,SAAU86B,EACVjtB,SAAU7xC,EAAQq1B,aAAewnC,EACjC+C,eAAgB/C,EAAeE,OAAgBhgE,EAC/CkQ,OAAK,IAIP,mBAAC4yD,GAAA,EAAD,CACEhvC,KAAO,QAAO7vB,IACd0T,QAASspD,EACTh6B,SAAU66B,EACVhtB,SAAU7xC,EAAQq1B,aAAewnC,EACjCiD,cAAejD,EAAeE,EAAc,QAAKhgE,MAKzD4gE,GACA,0BAAKvgC,UAAU,gBACZw/B,EAAQoB,QAAQl+D,KAzFzB,SAA4B47D,GAC1B,OACE,mBAAC,GAAD,CACEnhC,IAAKmhC,EAAO/mD,OACZmnD,cAAeqB,EACfzB,OAAQA,EACRC,YAAaA,EACbtiC,YAAaA,EACbuiC,eAAgBA,EAChBC,eAAgBA,SAmFhB+B,IAAkBE,GAClB,0BAAK1gC,UAAU,qBA0CvB,SAAgC39B,EAAc0G,EAA0BiO,GACtE,OAAKA,EAIE3U,EAAK0G,EAAS,SAAW,OAAQiO,EAAO,KAHtC3U,EAAK0G,EAAS,4BAA8B,mCA5CX45D,CAAuBtgE,EAAMm9D,EAAQuB,KAAMp1D,EAAQswB,cAExFykC,GACC,mBAAC3+B,GAAA,EAAD,CACE4f,QAAM,EACNlN,SAAmC,IAAzBkrB,EAAc96D,OACxBm9B,KAAK,OACLT,QAASogC,GAERt/D,EAAK,oBAGTm+D,GACC,mBAACz+B,GAAA,EAAD,CACE4f,QAAM,EACN3f,KAAK,OACLT,QAASqgC,GAERv/D,EAAK,yB,wBClThB,MAkHA,IAAeq9B,EAAAA,EAAAA,KAjGe,IAaxB,IAbyB,QAC7B98B,EAD6B,oBAE7B0wD,EAF6B,UAG7BlL,EAH6B,YAI7B4R,EAJ6B,YAK7ByC,EAL6B,UAM7BmG,EAN6B,aAO7B9+C,EAP6B,cAQ7Bs2C,GAAgB,EARa,YAS7BnK,EAT6B,MAU7B1tB,EAV6B,aAW7BsgC,EAX6B,sBAY7BC,GACI,EACJ,MAAMC,GAAUC,EAAAA,EAAAA,IAAkBpgE,GAElC,IAAIqgE,GAAgB,EACpB,GAAIF,MAAAA,GAAAA,EAAS/+C,QAAU++C,EAAQ5qC,MAAO,CACpC,MAAM,MAAE1H,EAAF,OAASmlB,GAAWuS,GAAyBvlD,GACnDqgE,EAAgBxyC,IAAUmlB,EAG5B,MAAMstB,GAAmB3+B,EAAAA,EAAAA,KAAY,KACnCs+B,MACC,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJI,EADI,IAEJ70D,EAFI,WAGJ80D,EAHI,MAIJxmD,EAJI,YAKJpG,EALI,MAMJwN,EANI,MAOJmU,GACE4qC,EACEM,GAAsBr/C,GAASmU,IAAU0qC,IAAiBI,EAC1DK,GAAuBC,EAAAA,GAAAA,GAAS/sD,EAzDhB,KA2DhBwpB,GAAYqE,EAAAA,GAAAA,GAChB,UACA4+B,GAAiB,qBAChBj/C,IAAUmU,IAAUyqC,GAAa,gBAClCzqC,GAAS,cAGX,OACE,0BACE6H,UAAWA,EACX,gBAAemjC,GAAYC,GAAY,GACvC3hC,IAAI,QAEHzd,IAAUmU,GACT,mBAAC,GAAD,CACEv1B,QAASA,EACT0wD,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACbh4B,KAAMihC,EAAgB,YAAc,SACpC/I,gBAAiBmJ,EACjB9hC,QAAS8hC,EAAqBH,OAAmBvjE,EACjD06D,eAAgByI,EAChB1I,cAAeA,EACfnK,YAAaA,EACb1tB,MAAOA,IAGX,0BAAKvC,UAAU,gBACb,mBAACwjC,GAAA,EAAD,CAAUxjC,UAAU,YAAY1xB,IAAKA,EAAKxK,KAAMq/D,GAAYC,KAC1DR,GAAahmD,GACb,wBAAGojB,UAAU,eAAc2e,EAAAA,GAAAA,GAAW/hC,IAEvC0mD,GACC,wBAAGtjC,UAAU,qBAAoB2e,EAAAA,GAAAA,GAAW2kB,EAAsB,CAAC,QAAS,UAG9EV,GAAazqC,GACb,mBAAC,GAAD,CACEv1B,QAASA,EACT0wD,oBAAqBA,EACrBlL,UAAWA,EACX4R,YAAaA,EACbyC,YAAaA,EACb34C,aAAcA,EACdyd,QAAS8hC,EAAqBH,OAAmBvjE,EACjD06D,eAAgByI,EAChB1I,cAAeA,EACfnK,YAAaA,Q,eC9GvB,MA0CA,IAAevwB,EAAAA,EAAAA,KA1Ce,IAExB,IAFyB,QAC7B98B,GACI,EACJ,MAAMP,GAAOm/B,EAAAA,GAAAA,KACP9U,GAAU+2C,EAAAA,EAAAA,IAAkB7gE,IAE5B,MACJga,EADI,KAEJ9Y,EAFI,OAGJ4/D,EAHI,SAIJC,EAJI,OAKJC,EALI,SAMJC,GACEn3C,EAEJ,OACE,0BACEsT,UAAU,WAETpjB,GACC,wBAAGojB,UAAU,UAAS2e,EAAAA,GAAAA,GAAW/hC,IAElC9Y,GACC,6BAAI66C,EAAAA,GAAAA,GAAW76C,EAAM,CAAC,QAAS,QAEjC,0BAAKk8B,UAAY,gBAAc6jC,EAAW,YAAc,KACrDA,GACC,0BACE7jC,UAAU,gBACVwY,IAAKqrB,EACLprB,IAAI,KAGR,wBAAGzY,UAAU,qBACV8jC,EAAAA,GAAAA,GAAeJ,EAAQC,EAAUthE,EAAKupB,MACtCg4C,GAAU,+BAAOvhE,EAAK,6B,eClDjC,MAIM0hE,GAAe,IAAI30D,IAAI3K,OAAOu/D,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBC,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCC1F,GAd+B,IAMzB,IAN0B,QAC9BC,EAAU,cADoB,UAE9BC,EAAY,OAFkB,MAG9Br0C,EAH8B,OAI9BmlB,EAJ8B,UAK9B5V,GACI,EACJ,MAAM+kC,GAAa1gC,EAAAA,GAAAA,GAAe,WAAYwgC,EAASC,EAAW9kC,GAC5DmQ,GAAS1f,EAAS,UAASA,OAAa,KAAOmlB,EAAU,WAAUA,OAAc,IACvF,OACE,0BAAK5V,UAAW+kC,EAAY50B,MAAOA,K,eCWvC,MAAM60B,GAAiB,KACjBC,GAAqB,CACzBx0C,MAAO,IACPmlB,OAAQ,IACRsvB,KAAM,GACN1rB,MAAO,GAIH2rB,GAAU,CAAEC,OAAQ,oyBAkP1B,IAAe1lC,EAAAA,EAAAA,KAtOgB,IAQzB,IAR0B,QAC9B98B,EAD8B,KAE9B6T,EAF8B,aAG9BqN,EAH8B,eAI9BisC,EAJ8B,WAK9B8J,EAL8B,MAM9Bt3B,EAN8B,iBAO9B74B,GACI,EAEJ,MAAMqgC,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7By4B,GAAez4B,EAAAA,EAAAA,IAAuB,MACtCvlC,GAAOm/B,EAAAA,GAAAA,KACP6jC,GAAcC,EAAAA,GAAAA,KAEd99C,GAAW+9C,EAAAA,EAAAA,IAAmB3iE,IAC9B,KAAElC,EAAF,IAAQ8kE,GAAQh+C,EAEhBi+C,GAAah8D,EAAAA,EAAAA,GAAcC,GAC3Bg8D,GAAYC,EAAAA,EAAAA,IAAiB/iE,EAAS6iE,GACtCG,EAA6B,YAATllE,GAAuBglE,OAC7C/lE,EAD0DiD,EAAQ4G,KAAOge,EAASq+C,OAASJ,GAGxFK,EAAOC,IAAYtlC,EAAAA,EAAAA,IAAS+kC,GAE7BQ,EAA4B,UAATtlE,GAA8B,YAATA,IAAuBglE,GAC/D,MACJj1C,EADI,OACGmlB,EADH,KACWsvB,EADX,MACiB1rB,GACnByrB,GAEEjN,EAAY7zD,QAAQ2f,KAAiBmiD,EAAAA,EAAAA,IAAmBH,EAAOr1C,EAAOmlB,EAAQsvB,EAAM1rB,GACpF5B,GAAeC,EAAAA,GAAAA,GAASmgB,GACxBkO,GAAmBhL,EAAAA,GAAAA,GAAYtjB,GAC/BuuB,EAAavuB,GAAgBsuB,EAE7BE,EAAa3vD,IAAQ8P,EAAAA,EAAAA,IAAS9P,EAAKjW,IACnC6lE,EAAc5vD,GAAQ2vD,EAAc3vD,OAAkB9W,EACtD2mE,EAAc7vD,IAAS2vD,EAAc3vD,OAAkB9W,EAEvD0oD,GAAQC,EAAAA,EAAAA,IAAa1lD,GAErB2jE,GAAmB9iC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAAT/iC,IAAuBolE,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAF,eAAOD,GAAmBV,EAChC,OAAOU,EFtEJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAeh7D,KAAKw8D,IAAID,GAAOv8D,KAAKg3D,GAAK,MAAS,GAAKgE,EEoErCyB,CAAkBF,EAAKvB,KAC9C,CAACxkE,EAAMolE,EAAOZ,IAOX0B,GAAkBriC,EAAAA,EAAAA,KAAay8B,IACnC,GAAa,YAATtgE,EAAoB,OACxB,MACMugE,EAAgBprB,GAAa3rC,KAAKg3D,GAClC9B,EAAQ4B,EAAYG,iBACpBC,EAAUJ,EAAY/pB,kBAEtB4vB,EAAWjkE,EAAQ4G,KAAOge,EAASq+C,QAASp8D,EAAAA,EAAAA,GAAcC,GAC1D23D,GAAoB,EAAIwF,EAAWr/C,EAASq+C,QAAU5E,EACtDn9D,GAAOgjE,EAAAA,EAAAA,IAAqBzkE,EAAiB,IAAXwkE,GAEnCzH,GAAUgC,GAUbA,EAAQE,YAAcx9D,EACtBs7D,EAAMnoB,kBAAmByb,aAAa,oBAAsB,IAAG2O,MAV/DL,EAAYzpB,UAAa,8CACYzzC,8LAGXm9D,KAAiBA,uCACfI,qCAO7B,CAAC3gE,EAAMkC,EAAQ4G,KAAMge,EAAU9d,EAAkBrH,IAuIpD,OArIAkzC,EAAAA,EAAAA,KAAgB,KACV8qB,EAAax/C,SACf+lD,EAAgBvG,EAAax/C,WAE9B,CAAC+lD,KAEJrxB,EAAAA,EAAAA,KAAgB,KACd,GAAIywB,EAAkB,OACtB,MAAMxK,EAAYzxB,EAAIlpB,QAAS2uC,QAAwB,oBACnD2W,GACFxM,GAAoBwM,EAAY9d,EAAO0H,EAAgB8J,EAAYt3B,GAAOkT,MAAMgmB,IAC9ED,EAAUrrB,MAAMurB,YAAY,gBAAiBD,GAC7CD,EAAUvrB,UAAUU,IAAI,sBACxB6qB,EAAU9I,aAAaiJ,EAAAA,GAA2B,SAGrD,CAACtT,EAAO0H,EAAgB8J,EAAYt3B,EAAO4jC,EAAYH,KAE1D/mC,EAAAA,EAAAA,KAAU,KAEJ/0B,KAAKqiD,IAAIiZ,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkB96D,KAAKqiD,IAAIiZ,EAAIuB,KAAOjB,EAAMiB,MAAQ/B,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,KACR,CAACA,EAAKM,KAETkB,EAAAA,GAAAA,IAAW,KACT3B,MACEK,OAA6C/lE,EAAP,KAAzBimE,GAAoB,KAErCqB,EAAAA,GAAAA,IAAY,KACV,MAAMjG,EAAcX,EAAax/C,QAE7BmgD,GACF4F,EAAgB5F,KAEjB4E,EAAmB,SAAOjmE,GA4F3B,0BACEoqC,IAAKA,EACL/J,UAAU,mCACVuB,QAxKgB,KAAM,MACxB,MAAMjzB,EF9EH,SAAuBm4D,EAAaM,EAAc7B,GACvD,MAAQ,qCAAoBuB,KAAOM,MAASN,KAAOM,KAAQ7B,KE6E7CgC,CAAcpB,EAAMW,IAAKX,EAAMiB,KAAM7B,GACjD,UAAAn/D,OAAOuhB,KAAKhZ,EAAK,iBAAjB,SAA4BoZ,UAwK1B,0BAAKsY,UAAU,eAlEZmmC,EAEH,0BACEnmC,UAAU,iBACVwY,IAAK2tB,EACL1tB,IAAI,oBACJhoB,MAAOw0C,GAAmBx0C,MAC1BmlB,OAAQqvB,GAAmBrvB,SAPP,mBAAC,GAAD,CAAUnlB,MAAOA,EAAOmlB,OAAQA,IA4C1D,WACE,GAAKuwB,EAEL,OACE,sCACGhiE,QAAQoiE,KAAsBb,GAC7B,0BACE1lC,UAAU,oBACVmQ,MAAQ,UAA4B,EAAnBo2B,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMY,GAAe9iC,EAAAA,GAAAA,GACnB,MACA3jC,EACAglE,GAAa,WAEf,GAAa,YAAThlE,EACF,OACE,0BAAKs/B,UAAWmnC,EAAcC,wBAAyBjC,IACrD,mBAACnlB,GAAA,EAAD,CAAQj7C,KAAMuhE,EAAY3uD,KAAM0uD,EAAYrmC,UAAU,yBAChCrgC,IAArB6nB,EAAS6/C,SACR,0BAAKrnC,UAAU,YAAYmQ,MAAQ,gBAAe3oB,EAAS6/C,gBAMnE,GAAa,UAAT3mE,EAAkB,CACpB,MAAMkhC,EFnML,SAAuBlhC,GAC5B,OAAKA,EACEqjE,GAAa1uD,IAAI3U,IACnBqjE,GAAa1uD,IAAI3U,EAAKmU,MAAM,KAAK,KACjC+vD,IAGiB0C,EAHY5mE,EAI3B4mE,EAAIzyD,MAAM,IAAI3R,QAAO,CAACqkE,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrB7C,GAAc//D,SAHtC,UAMpB,IAAwByiE,EE4LJI,CAAclgD,EAASmgD,WAC/B9hC,EF3ML,SAAyBnlC,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,GE0MDknE,CAAgBpgD,EAASmgD,WACtC,OACE,0BAAK3nC,UAAWmnC,EAAcC,wBAAyBjC,GAASh1B,MAAQ,gBAAevO,KACrF,0BAAK4W,IAAK3S,EAAM7F,UAAU,aAAayY,IAAI,MAKjD,OACE,0BAAKzY,UAAWmnC,EAAc3uB,IAAKqvB,GAAQpvB,IAAI,KAe5CqvB,IAaAC,IAjGP,WACE,GAAK/B,EACL,MAAa,UAATtlE,EAEA,0BAAKs/B,UAAU,iBACb,0BAAKA,UAAU,uBACZxY,EAAS5K,OAEZ,0BAAKojB,UAAU,0BACZxY,EAASwgD,UAKL,YAATtnE,EAEA,0BAAKs/B,UAAU,iBACb,0BAAKA,UAAU,uBAAuB39B,EAAK,uBAC3C,0BAAK29B,UAAU,2BACZioC,EAAAA,EAAAA,IAAkB5lE,EAAMojE,EAAY7iE,EAAQm0D,YAE7C2O,GAAa,0BAAK1lC,UAAU,gBAAgB+J,IAAKs2B,UAPzD,EAqFG6H,OCtMP,IAAexoC,EAAAA,EAAAA,KAzDY,IAIrB,IAJsB,QAC1B98B,EAD0B,iBAE1BulE,EAF0B,aAG1BrkD,GACI,EACJ,MAAM,qBAAEskD,IAAyB9oD,EAAAA,EAAAA,MAC3B+oD,EAAOzlE,EAAQ+G,QAAQ0+D,MACvB,MACJzrD,EADI,YACGpG,GACL6xD,EAEEC,EAAYnkE,QAAQ2f,KAAiBykD,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAYrkE,QAAQ2f,KAAiB2kD,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAe7wB,EAAAA,GAAAA,GAASywB,GAAYH,GACpCQ,GAAe9wB,EAAAA,GAAAA,GAAS2wB,GAAYL,GAS1C,OACE,0BAAKnoC,UAAU,QACb,0BACEA,UAAU,UACVmQ,MAAQ,8BACR5O,QAZkB,KACtB6mC,EAAqB,CACnBxkE,UAAWhB,EAAQpC,GACnBkoB,OAAQ9lB,EAAQ+kD,cAAe,GAAG,QAW9B+gB,IAAiBC,GACjB,mBAAC,GAAD,CAAU3oC,UAAU,6BAErB0oC,GACC,0BACE1oC,UAAU,kBACVwY,IAAKkwB,EACLjwB,IAAK77B,IAGR+rD,GACC,4BACE3oC,UAAU,kBACV84B,aAAW,EACXE,OAAK,EACLH,UAAQ,EACRE,MAAI,EACJvgB,IAAKmwB,KAIX,0BAAK3oC,UAAU,SAASpjB,KACtByd,EAAAA,EAAAA,IAAez3B,IAAY,0BAAKo9B,UAAU,eAAexpB,OCnDlD,SAASoyD,GAAkBC,GAiDxC,OAAOnpC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACV,CAAC5iC,EAAQypE,KACP,MAAM,QAAElmE,GAAYkmE,EACpB,MAAO,CACL/Y,gBAAgBve,EAAAA,EAAAA,IAAqBnyC,GACrCw6D,YAAYkP,EAAAA,EAAAA,IAAwB1pE,EAAQuD,EAAQpC,OAL9CyhC,EAhDmDgI,IAC7D,MAAM,eACJ8lB,EADI,WAEJ8J,EAFI,QAGJj3D,EAHI,WAIJonD,GACE/f,GACE,uBAAEvhC,IAA2B4W,EAAAA,EAAAA,MAE7B0pD,GAAsBzkC,EAAAA,EAAAA,KAAav3B,IACvCA,EAAE23B,kBACFj8B,EAAuB,CAAE9E,UAAWhB,EAAQpC,GAAIiI,UAAWuE,MAAAA,OAAF,EAAEA,EAAGg8B,aAC7D,CAACtgC,EAAwB9F,IAEtBqmE,GAAWxlC,EAAAA,EAAAA,KAAQ,KACvB,MAAQumB,WAAYkf,EAAd,QAAoB3nC,GAAY0I,EACtC,MAAO,IACFA,EACH8lB,eAAAA,EACA8J,WAAAA,EACA7P,WAAY,IACPkf,EACH54C,EAAG,EACHc,EAAG,GAELmQ,QAASwuB,OAAiBpwD,EAAY4hC,KAEvC,CAAC0I,EAAO8lB,EAAgB8J,IAE3B,OACE,0BACE75B,WAAWqE,EAAAA,GAAAA,GAAe,4BAA6Bw1B,GAAc,eACrE1pB,MAAO6Z,EAAc,SAAQA,EAAW15B,aAAa05B,EAAW54B,OAAS,GACzEmQ,QAASwuB,EAAiBiZ,OAAsBrpE,GAE/CowD,GACC,0BAAK/vB,UAAU,0BACZ65B,GACC,wBAAG75B,UAAU,iBAKnB,mBAAC6oC,EAAqBI,QChD9B,MAAME,GAAkBP,GAAkBQ,IACpCC,GAAkBT,GAAkBU,IA2G1C,IAAernC,EAAAA,EAAAA,KACb,CAAC5iC,EAAD,KAAmC,IAA1B,MAAEi8C,GAAwB,EACjC,MAAM,OAAEh8C,GAAWg8C,EAAM6L,YACnB5kB,GAAQC,EAAAA,EAAAA,IAAYnjC,GACpBkqE,GAAoBC,EAAAA,EAAAA,IAAwBnqE,EAAQC,GAC1D,MAAO,CACLijC,MAAAA,EACAknC,YAAapqE,EAAOoT,YAAYC,iBAChC62D,kBAAAA,KARN,EAxFyC,IAYnC,IAZoC,MACxCjuB,EADwC,oBAExCgY,EAFwC,kBAGxCoW,EAHwC,aAIxC5lD,EAJwC,MAKxCukC,EALwC,YAMxC4H,EANwC,YAOxC0Z,EAPwC,aAQxC9G,EARwC,YASxC4G,EATwC,kBAUxCF,EAVwC,MAWxChnC,GACI,EACJ,MAAM,qBAAEqnC,IAAyBtqD,EAAAA,EAAAA,MAE3BuqD,EAAavuB,EAAMt6C,SAAS6D,OAE5BilE,GAAqBvlC,EAAAA,EAAAA,KAAa3hC,IACtCgnE,EAAqB,CAAEtqE,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQpC,OACjE,CAACopE,KAyDIn5C,MAAOs5C,EAAgBn0B,OAAQo0B,GAAoBL,EAAYhb,eAEvE,OACE,0BACE3uB,UAAU,QACVmQ,MAAQ,UAAS45B,gBAA6BC,QAE7C1uB,EAAMt6C,SAAS0B,KA9DpB,SAA4BE,EAAqB6O,GAC/C,MAAM,MAAEuS,EAAF,MAASmU,IAAUE,EAAAA,EAAAA,IAAkBz1B,GACrCqnE,EAAaR,EAAY7mE,EAAQ0S,iBAAmB1S,EAAQpC,IAC5Dy5D,EAAiBgQ,MAAAA,OAAH,EAAGA,EAAY53D,UAC7B,WAAE23C,EAAF,MAAcC,GAAU0f,EAAY7f,OAAOr4C,GAG3CuoD,GAAckQ,EAAAA,EAAAA,KAAuBjkE,EAAAA,EAAAA,MAAarD,GAClD65D,GAAc0N,EAAAA,EAAAA,KAAuBlkE,EAAAA,EAAAA,MAAarD,GAExD,GAAIohB,EAAO,CACT,MAAMm2C,EAAuBuP,IAE1BrhB,EAAQ52C,IAAUo4D,EAAa,EAAI1lE,QzB7DpC,EyB6D4C8lD,GzB9D1C,EyB8DwEA,IAG5E,OACE,mBAACkf,GAAD,CACE3oE,GAAK,gBAAc6zD,EAAAA,EAAAA,IAAiBzxD,EAAQpC,MAC5CoC,QAASA,EACT0wD,oBAAqBA,EACrB0G,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChBjQ,WAAYA,EACZiG,YAAaA,EACb1uB,QAASshC,EACTxI,eAAgByP,EAChB1P,cAAemP,EAAkBniE,SAASxE,EAAQpC,IAClD+hC,MAAOA,IAGN,GAAIpK,EACT,OACE,mBAACkxC,GAAD,CACE7oE,GAAK,gBAAc6zD,EAAAA,EAAAA,IAAiBzxD,EAAQpC,MAC5CoC,QAASA,EACT0wD,oBAAqBA,EACrB0G,YAAaA,EACbyC,YAAaA,EACbxC,eAAgBA,EAChBn2C,aAAcA,EACdkmC,WAAYA,EACZiG,YAAaA,EACb1uB,QAASshC,EACTxI,eAAgByP,EAChB1P,cAAemP,EAAkBniE,SAASxE,EAAQpC,IAClD+hC,MAAOA,W,mNCvEjB,IAAI6nC,GAEJ,MA6MA,GA7MiC,IAM3B,IAN4B,QAChCxnE,EADgC,oBAEhC0wD,EAFgC,YAGhC0G,EAHgC,aAIhCl2C,EAJgC,cAKhCs2C,GACI,EAEJ,MAAMrwB,GAAMnC,EAAAA,EAAAA,IAAuB,MAE7ByiC,GAAqBziC,EAAAA,EAAAA,IAAuB,MAE5Ck0B,GAAYl0B,EAAAA,EAAAA,IAAyB,MAErCzP,EAAQv1B,EAAQ+G,QAAQwuB,MAExBo8B,GAAiBC,EAAAA,GAAAA,IAAkBzqB,EAAKupB,IAEvCiH,EAAeC,IAAoB/5B,EAAAA,EAAAA,IAASu5B,GAC7CjC,EAAa5zD,QAAQo2D,GAAiBhG,GAAkBzwC,IACxD,UAAEs5B,EAAF,aAAaqd,IAAiBC,EAAAA,GAAAA,IAClC5iB,EAAAA,EAAAA,IAAoBl1C,EAAS,WAC5Bm1D,GACDI,EAAAA,EAAAA,IAAsBv1D,EAAS,UAC/BkhB,IAGM22C,aAAcG,IAAqBF,EAAAA,GAAAA,IACzC5iB,EAAAA,EAAAA,IAAoBl1C,EAAS,aAC5Bw3D,EACDnpC,EAAAA,GAAAA,QACAnN,GAEI62C,EAAWzB,GAAwBt2D,EAASw6C,IAE5C,WAAE4f,EAAF,kBAAcC,IAAsBC,EAAAA,GAAAA,KACpCpC,EAAkBP,IAAkByC,GAAe5C,EACnDa,GAAiD,KAA/BC,EAAAA,GAAAA,GAAYX,GAE9BlxB,GAAuBmvB,EAAAA,GAAAA,GAAmBpb,IAE9CjU,aAAcmhC,EACdjhC,qBAAsB+xB,IACpB9xB,EAAAA,GAAAA,GAAkBwxB,IAAmBkC,OAAYr9D,EAAWs7D,IAEzDxE,EAAa8T,IAAkB9pC,EAAAA,EAAAA,KAAkB,IACjDpuB,EAAUm4D,IAAe/pC,EAAAA,EAAAA,IAAiB,IAEjDxB,EAAAA,EAAAA,KAAU,KACR,IAAKw3B,EACH,OAGF,MAAMgU,EAAYC,GAAAA,GAA4B,EAExCzJ,EAA0C,GAAzBwJ,EADL,GACkCvgE,KAAKg3D,GACnDG,EAAmBJ,EAAgB5uD,EAAW4uD,EAE9C0J,EAAW7O,EAAUj7C,QACrB+pD,EAAoBP,EAAmBxpD,QACvCu+C,EAAQwL,EAAkB3zB,kBAE3BmoB,EAUFA,EAAMnoB,kBAAiCyb,aAAa,oBAAqB2O,EAAiBz8D,YAT3FgmE,EAAkBrzB,UAAa,yBACfmzB,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnBxJ,KAAiBA,sCAChBA,mCAO7BuJ,EAAYG,EAASnN,YAAcmN,EAASlN,YAC3C,CAAChH,EAAapkD,IAEjB,MAAMgjD,EAAalxD,QAAQi5C,GAAamX,GAElCsW,GAActmC,EAAAA,EAAAA,KAAY,KACzBu3B,EAAUj7C,UAIf0pD,GAAe,GACfC,EAAY,IACZ5R,EAAAA,GAAAA,GAASkD,EAAUj7C,UAEnBy7C,EAAAA,EAAAA,KAAQ,KACN+N,EAAmBxpD,QAAS02B,UAAY,SAEzC,IAEGuzB,GAAiBvmC,EAAAA,EAAAA,KAAY,KAAM,MAC3B,QAAZ,EAAA6lC,UAAA,WACAA,GAAeS,IACd,CAACA,KAEJ5rC,EAAAA,EAAAA,KAAU,KACH68B,EAAUj7C,UAIXw0C,GACFuD,EAAAA,GAAAA,GAASkD,EAAUj7C,SAEnBi7C,EAAUj7C,QAAQzG,WAEnB,CAACi7C,IAEJwG,GAAkBC,EAAWzG,IAC7BqI,EAAAA,GAAAA,GAAgB5B,EAAW,CAAC1e,IAE5B,MAAMiB,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9B,IAAK6Y,EAGH,YAFAod,GAAkBe,IAAeA,IAKnC,GAAInB,EAEF,YADA96C,EAAAA,EAAAA,MAAaq+C,2BAA2B,CAAE/6D,QAAAA,IAI5C,MAAM+nE,EAAW7O,EAAUj7C,QACvB41C,EACEkU,EAAS1O,SACXrD,EAAAA,GAAAA,GAAS+R,IACTI,EAAAA,GAAAA,OAEAJ,EAASvwD,SAGX0wD,IAEAH,EAASvwD,QACTuwD,EAASnN,YAAc,GACvB5E,EAAAA,GAAAA,GAAS+R,IACTI,EAAAA,GAAAA,MAEAR,GAAe,MAEhB,CAACO,EAAgBrU,EAAa2D,EAAehd,EAAWx6C,IAErD26D,GAAmBh5B,EAAAA,EAAAA,KAAav3B,IACpC,MAAM29D,EAAW39D,EAAEolD,cAEnBoY,EAAYG,EAASnN,YAAcmN,EAASlN,YAC3C,IAEGuN,GAAiB3mC,EAAAA,GAAAA,GAAe,aAAcgF,GAEpD,OACE,0BACEU,IAAKA,EACL/J,UAAU,yBACVuB,QAAS8c,GAET,0BAAKre,UAAU,qBACb,6BACE+J,IAAK4wB,EACL36B,UAAU,YACVmQ,MAAQ,UAASu6B,GAAAA,iBAAwCA,GAAAA,UAG5DttB,GACC,0BAAKpd,UAAU,iBAEb,+BACE+J,IAAK+xB,EACL97B,UAAWgrC,EACXv6C,MAAOi6C,GAAAA,GACP90B,OAAQ80B,GAAAA,GACR7R,UAAQ,EACRG,OAAQvC,EACRsC,MAAOtC,EACPqC,aAAW,EACX3C,QAASM,EAAcoU,OAAclrE,GAEjCs9D,EAXN,CAYEW,aAAcnH,EAAc8G,OAAmB59D,IAE/C,6BAAQ64C,IAAK4E,MAInB,0BAAKpd,UAAU,WAAW+J,IAAKsgC,IAC9BC,GACC,0BAAKtqC,UAAY,iBAAgBo7B,KAC/B,mBAACQ,GAAA,EAAD,CAAiBvpD,SAAU+nD,EAAgBQ,EAAmBH,MAGhErd,IAAcmd,GACd,wBAAGv6B,UAAU,kBAEf,0BAAKA,UAAU,0BACZy2B,GAAcqH,EAAAA,EAAAA,IAAoBhC,EAAUj7C,QAAS28C,cAAeM,EAAAA,EAAAA,IAAoB3lC,EAAMslC,YAC5FhH,GAAeqF,EAAUj7C,QAASo7C,SAAW,wBAAGj8B,UAAU,kBCtMrE,GA1BoC,IAA0B,IAAzB,QAAEp9B,EAAF,QAAW2+B,GAAc,EAC5D,MAAMl/B,GAAOm/B,EAAAA,GAAAA,KACb,OACE,0BAAKxB,UAAU,iBACZp9B,EAAQ+kD,cAAejlD,KAAKiqD,GAC3B,0BAAK3sB,UAAU,OACZ2sB,EAAIjqD,KAAKgmB,GACR,mBAACqZ,GAAA,EAAD,CACEC,KAAK,OACLmC,QAAM,EACNsQ,SAA0B,gBAAhB/rB,EAAOhoB,KAEjB6gC,QAAS,IAAMA,EAAQ,CAAE39B,UAAWhB,EAAQpC,GAAIkoB,OAAAA,MAE/Ci2B,EAAAA,GAAAA,GAAWt8C,EAAKqmB,EAAO5kB,OACvB,CAAC,MAAO,WAAWsD,SAASshB,EAAOhoB,OAAS,wBAAGs/B,UAAU,cACzC,QAAhBtX,EAAOhoB,OAAmBkoB,EAAAA,GAAAA,KAAiBF,EAAOpa,MAAQ,wBAAG0xB,UAAU,qBACvD,oBAAhBtX,EAAOhoB,MAA8B,wBAAGs/B,UAAU,8BC0DjE,IAAeN,EAAAA,EAAAA,KArEqB,IAG9B,IAH+B,WACnCx6B,EADmC,SAEnCuvC,GACI,EACJ,MAAM,SAAElzC,IAAa+d,EAAAA,EAAAA,MAEfjd,GAAOm/B,EAAAA,GAAAA,MACP,SACJjiC,EADI,OACMD,EADN,cACc45B,EADd,cAC6B9zB,EAD7B,uBAC4C+R,EAD5C,iBACoE8zD,GACtE/lE,EAEEm5C,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9BhjC,EAAS,CAAEf,GAAIlB,EAAQC,SAAAA,MACtB,CAACgC,EAAUjC,EAAQC,IAEhB2rE,GAAiBznC,EAAAA,EAAAA,KAAQ,KAC7B,GAAKwnC,MAAAA,IAAAA,EAAkBpmE,OACrB,OAIF,MAAQqL,OAASK,KAAM6uC,GAAan0C,OAASsF,KAAM4xB,KAAgBl8B,EAAAA,EAAAA,MAEnE,OAAOglE,EAAiBvoE,KAAKyoE,IACpB5kD,EAAAA,EAAAA,IAAS4kD,GAAU/rB,EAAU+rB,GAAUhpC,EAAUgpC,KACvDxoE,OAAOwB,WACT,CAAC8mE,IAEJ,QAAsBtrE,IAAlBu5B,EACF,OAoBF,MAAMkyC,EAAYjnE,QAAQgT,GAA0B/R,GAAiB+R,EAAyB/R,GAE9F,OACE,0BACE,YAAU66B,EAAAA,GAAAA,IAAqB/G,GAC/B8G,WAAWqE,EAAAA,GAAAA,GAAe,gBAAiB+mC,GAAa,aAAc32B,GAAY,YAClFhT,IAAKp/B,EAAKq/B,MAAQ,MAAQ,MAC1BH,QAAS8c,GAET,wBAAGre,UAAU,4BACVkrC,GAA4C,IAA1BA,EAAermE,SAAiB,wBAAGm7B,UAAU,kBAzBlEkrC,GAAkBA,EAAermE,OAAS,GACxC,0BAAKm7B,UAAU,kBAAkByB,IAAKp/B,EAAKq/B,MAAQ,MAAQ,OACxDwpC,EAAexoE,KAAKiV,GACnB,mBAACqoC,GAAA,EAAD,CACE7iB,IAAKxlB,EAAKnX,GACVwhC,KAAK,QACLrqB,MAAM4O,EAAAA,EAAAA,IAAS5O,EAAKnX,IAAMmX,OAAkBhY,EAC5CoF,MAAOwhB,EAAAA,EAAAA,IAAS5O,EAAKnX,SAAwBb,EAAlBgY,OAoBnC,0BAAKqoB,UAAU,QAAQyB,IAAI,QACxBvI,EAAgB72B,EAAK,WAAY62B,EAAe,KAAO72B,EAAK,kBAE/D,wBAAG29B,UAAU,kBCTnB,IAAeN,EAAAA,EAAAA,KApDV,IAKC,IALA,SACJ1N,EADI,QAEJpvB,EAFI,eAGJiyD,EAHI,mBAIJ1jC,GACI,EACJ,MAAM,aAAEgB,IAAiB7S,EAAAA,EAAAA,OAEnB,gBAAEyT,GAAoBnwB,EAAQ2vB,UAE9B84C,GAAiB5nC,EAAAA,EAAAA,KAAQ,KAC7B,IAAK1Q,GAAmBf,EAAShb,MAlBR,EAmBvB,OAIF,MAAMooC,GAAYn5C,EAAAA,EAAAA,MAAYiK,MAAMK,KAEpC,OAAOwiB,EACJpwB,QAAQ2oE,GAAmBA,EAAet5C,WAAaA,EAASA,WAChEtvB,KAAK4oE,GAAmBlsB,EAAUksB,EAAev/D,UACjDpJ,OAAOwB,WACT,CAAC6tB,EAAUe,IAERsrB,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9BpS,EAAa,CACXH,SAAUA,EAASS,cAAW9yB,EAAYqyB,EAASA,SACnD1yB,OAAQsD,EAAQtD,OAChBsE,UAAWhB,EAAQpC,OAEpB,CAACoC,EAASovB,EAAUG,IAEvB,OACE,mBAAC4P,GAAA,EAAD,CACE/B,WAAWqE,EAAAA,GAAAA,GAAerS,EAASS,UAAY,UAC/CuP,KAAK,OACLT,QAAS8c,GAET,mBAAC,GAAD,CACEwW,eAAgBA,EAChB7iC,SAAUA,EAASA,SACnBb,mBAAoBA,IAErBk6C,MAAAA,GAAAA,EAAgBxmE,OACf,0BAAKm7B,UAAU,WACZqrC,EAAe3oE,KAAKiV,GAAS,mBAACqoC,GAAA,EAAD,CAAQroC,KAAMA,EAAMqqB,KAAK,cAEvD/B,EAAAA,GAAAA,IAAqBjO,EAAShb,WC/BxC,IAAe0oB,EAAAA,EAAAA,KAvBiB,IAM1B,IAN2B,QAC/B98B,EAD+B,UAE/B2oE,EAF+B,eAG/B1W,EAH+B,mBAI/B1jC,EAJ+B,aAK/Bq6C,GACI,EACJ,OACE,0BAAKxrC,WAAWqE,EAAAA,GAAAA,GAAe,YAAaknC,GAAa,eACtD3oE,EAAQ2vB,UAAW5mB,QAAQjJ,KAAKsvB,GAC/B,mBAAC,GAAD,CACEmL,IAAKnL,EAASA,SACdA,SAAUA,EACVpvB,QAASA,EACTiyD,eAAgBA,EAChB1jC,mBAAoBA,MAGvBq6C,M,0BCzBP,MAwEA,IAAe9rC,EAAAA,EAAAA,KAxD0B,IAUnC,IAVoC,aACxC+rC,EADwC,YAExCp6C,EAFwC,MAGxCg3B,EAHwC,QAIxCqjB,EAJwC,KAKxC1pC,EAAO,SALiC,oBAMxCsxB,EANwC,UAOxC1vD,EAPwC,OAQxCtE,EARwC,wBASxCqyB,GACI,EACJ,MAAM,QACJg6C,EADI,IAEJ5hC,EAFI,MAGJoG,EAHI,MAIJ1f,EAJI,YAKJ4tB,EALI,oBAMJqX,IACEkW,EAAAA,GAAAA,GAAiB5pC,EAAM1iC,EAAQsE,EAAW8nE,EAAS/5C,EAAyB02B,EAAOh3B,GACjF7wB,EAAM,eAAcirE,IAEpBlX,GAAiBC,EAAAA,GAAAA,IAAkBzqB,EAAKupB,IAEvCuY,EAA2BC,IAAgCrrC,EAAAA,EAAAA,MASlE,OARAxB,EAAAA,EAAAA,KAAU,KACJwsC,IACFM,EAAAA,GAAAA,GAAiBN,GAAsDh2B,MAAM1nC,IAC3E+9D,EAA6B/9D,QAGhC,CAAC09D,IAGF,0BACE1hC,IAAKA,EACL/J,UAAU,4BACVmQ,MAAOA,EACP5O,QAAS8c,GAERwtB,GACC,mBAAC/V,GAAA,EAAD,CACE34B,IAAK38B,EACLA,GAAIA,EACJu1D,cAAe8V,EACf7pC,KAAMvR,EACNu7C,QA7DM,EA8DNhW,KAAMzB,GAAkBoX,EACxBrjC,uBAAqB,EACrB2tB,QAAM,EACNC,OAAQR,QCWlB,IAAeh2B,EAAAA,EAAAA,KAlEwB,IAIjC,IAJkC,UACtCjB,EADsC,QAEtC77B,EAFsC,OAGtCtD,GACI,EACJ,MAAM,YAAE+zC,IAAgB/zB,EAAAA,EAAAA,MAElBjd,GAAOm/B,EAAAA,GAAAA,MACP,WAAE13B,EAAF,QAAc4tD,EAAd,OAAuBnhD,GAAWkoB,EAClCwtC,EAAsB,WAAX11D,EACX21D,EAAyB,SAAX31D,IAAsBzM,EAEpCqiE,GAAa5nC,EAAAA,EAAAA,KAAY,KAC7B8O,EAAY,CAAEqkB,QAAAA,EAAS3rD,OAAQzM,MAC9B,CAACA,EAAQo4D,EAASrkB,IAEf+4B,GAAa3oC,EAAAA,EAAAA,KAAQ,IACrBi0B,EACEwU,EAAoB,mCACpBD,EAAiBniE,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7CoiE,EAAoB,8BACpBD,EAAiBniE,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAACoiE,EAAaD,EAAUniE,EAAY4tD,IAEjC+F,GAAWh6B,EAAAA,EAAAA,KAAQ,IAChBhF,EAAUg/B,UAAW4O,EAAAA,EAAAA,IAAmBhqE,EAAMo8B,EAAUg/B,eAAY99D,GAC1E,CAAC0C,EAAMo8B,EAAUg/B,WAEd6O,GAAgBpV,EAAAA,EAAAA,IAAW70D,EAAqB,IAAfO,EAAQ4G,MAC/C,OACE,0BAAKw2B,UCzDc,+DD0DjB,mBAAC+B,GAAA,EAAD,CACEC,KAAK,UACLJ,MAAM,cACN/xB,OAAK,EACLs0B,QAAM,EACN5C,QAAS4qC,EACTnsC,UChEsF,gEDiEtFyU,UAAWjW,EAAAA,GACX4F,UAAW/hC,EAAKyH,EAAa,YAAc,aAE3C,wBAAGk2B,UAAW03B,EAAU,sBAAwB,gBAElD,0BAAK13B,UCtE0J,+DDuE7J,0BAAKA,UCvE+N,iEDuEpM39B,EAAK+pE,IACrC,0BAAKpsC,UCxEmgB,+DDyEtgB,wBACEA,WAAWqE,EAAAA,GAAAA,GACT,mBC3EsS,+DD2EpQ4nC,GC3EyZ,iED2E7XniE,GC3EkT,qED8EpX,2BAAMk2B,UC9EykB,mED+E5kBy9B,EAAWp7D,EAAK,0BAA2B,CAACiqE,EAAe7O,IAAa6O,SEkI/EC,GAAe,CAAEnH,OAAQ,kvBAEzBoH,GAAmB,CAAEpH,OAAQ,qvBAqwBnC,IAAe1lC,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAQypE,KACP,MAAM,eACJ5V,EADI,gBACYhyD,EADZ,aAC6B4iB,EAD7B,iBAC2Cpa,GAC7CrK,GACE,QACJuD,EADI,MACK04C,EADL,eACYmxB,EADZ,WAC4BC,EAD5B,SACwCntE,EADxC,gBACkDgH,EADlD,sBACmEomE,GACrE7D,GACE,GACJtoE,EADI,OACAlB,EADA,SACQstE,EADR,cACkBC,EADlB,iBACiCl5D,EADjC,WACmD7J,EADnD,WAC+D5E,GACjEtC,EAEEmC,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BoyC,GAAiBC,EAAAA,EAAAA,IAAqBtyC,EAAQC,GAC9CwtE,GAAgBC,EAAAA,EAAAA,IAAqBztE,GACrC0xC,EAAYjsC,IAAQwsC,EAAAA,EAAAA,IAAcxsC,GAClCioE,EAAejoE,MAAAA,OAAH,EAAGA,EAAM0a,SAErBwtD,GAAmBv7B,IAAkBw7B,EAAAA,EAAAA,IAAsBtqE,GAC3DuqE,EAAgBV,GAAkBC,GAAcO,EAChD7pE,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,GAC9BwqE,GAAe1qB,EAAAA,EAAAA,IAAsBrjD,EAAQuD,GAC7C4nB,EAAYoiD,GAAW9zD,EAAAA,EAAAA,IAAWzZ,EAAQutE,QAAYjtE,EAEtD0tE,EAAqB9tE,GAAWuT,EAAAA,EAAAA,IAAyBzT,EAAQC,EAAQC,QAAYI,EACrF2tE,EAAc1qE,EAAQpC,KAAO6sE,EAE7BE,EAAkB55D,IAAqB05D,EACvC75D,EAAeG,IAAqB45D,GACtC95D,EAAAA,EAAAA,IAAkBpU,EAAQytE,GAAiBD,EAAgBA,EAAgBvtE,EAAQqU,QACnFhU,EACE6tE,EAAqBh6D,IAAgBnQ,EAAAA,EAAAA,IAAahE,EAAQmU,GAE1DymD,GAAiBwT,EAAAA,EAAAA,IAAqBpuE,EAAQuD,GAC9CwsD,EAAgC,WAApB7oD,IAChB+0C,EACIA,EAAMt6C,SAASwxB,MAAMpa,IAAM66C,EAAAA,EAAAA,IAAuB5zD,EAAQ+Y,MAC1D66C,EAAAA,EAAAA,IAAuB5zD,EAAQuD,KAInCyE,UAAWgoD,EAAgBnpD,YAAaopD,EADpC,oBACsD3oD,GACvDyoD,GAAa8D,GAAmB,GAE/Bwa,EAAexsE,EAAgBkB,YAAclB,EAAgBkB,WAAWgF,SAAS5G,IAE/ET,MAAO4tE,IAAc7uD,EAAAA,EAAAA,IAAwBzf,IAAW,GAE1DuuE,GAAcC,EAAAA,EAAAA,IAAsBjrE,GAC1C,IAAIi3D,EAGFA,EADEve,MAAAA,GAAAA,EAAOt6C,SACIs6C,EAAMt6C,SAASuzB,OAAM,QAAG/zB,GAAIoD,GAAP,SAAuBmlE,EAAAA,EAAAA,IAAwB1pE,EAAQuE,OAE5EmlE,EAAAA,EAAAA,IAAwB1pE,EAAQmB,GAG/C,MAAM,SAAEwvD,GAAkC,WAApBzpD,IAAgC1D,EAAAA,EAAAA,IAA4BxD,EAAQuD,EAASrD,IAAc,GAC3G66D,GAAgB0T,EAAAA,EAAAA,IAAoBzuE,EAAQuD,GAC5CmrE,EAAmB7oE,GACrBC,EAAAA,EAAAA,IAAiB9F,EAAQ6F,EAAW5F,OAAQ4F,EAAW3F,WAAa2F,OACpEvF,EAEEyyB,EAAoBjuB,QAAQvB,EAAQ4D,aAAe5D,EAAQyvB,UAC3DC,EAA8BF,GAChC1qB,EAAAA,EAAAA,IAA0BrI,EAAQC,EAAQsD,EAAQ4D,WAAa,QAC/D7G,EACE62D,EAAkBpkC,EACtBu6C,GAAwBl5D,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQgzB,QAAgC3yB,EACxFiD,EAEE6oE,EAAemC,GAAcrzC,EAAAA,EAAAA,IAAyBl7B,EAAQuuE,QAAejuE,EAEnF,MAAO,CACL4iC,OAAOC,EAAAA,EAAAA,IAAYnjC,GACnB2tE,aAAAA,EACAC,gBAAAA,EACA7pE,OAAAA,EACA+pE,cAAAA,EACAC,aAAAA,EACA5iD,UAAAA,EACA+iD,gBAAAA,EACAD,YAAAA,EACA95D,aAAAA,EACAg6D,mBAAAA,EACAp7C,kBAAAA,EACA69B,aAAa+d,EAAAA,EAAAA,IAAyB3uE,EAAQuD,GAC9CwsD,UAAAA,EACAse,aAAAA,EACAlX,gBAAAA,EACA9kB,eAAAA,EACAo7B,cAAAA,EACA97B,UAAAA,EACAgf,SAAAA,EACAlsC,aAAAA,EACApa,iBAAAA,EACAikE,UAAAA,EACAM,cAAe9pE,QAAQypE,GACvBM,cAAeN,GAAcO,EAAAA,EAAAA,IAAoB9uE,EAAQuuE,QAAejuE,EACxEyuE,oBAAqBR,IAAernD,EAAAA,EAAAA,IAASjnB,IAAU+uE,EAAAA,EAAAA,IAA0BhvE,EAAQuuE,QAAejuE,EACxG2uE,qBAAsBV,GAAcW,EAAAA,EAAAA,IAAyBlvE,EAAQuuE,QAAejuE,EACpF8rE,aAAAA,EACAp6C,YAAao6C,IAAgBllD,EAAAA,EAAAA,IAASjnB,IAAUk7B,EAAAA,EAAAA,IAA+BixC,QAAgB9rE,EAC/FowD,gBAAgBve,EAAAA,EAAAA,IAAqBnyC,GACrCw6D,WAAAA,EACA2U,gBACErqE,QAAQvB,EAAQ4D,aACZ5D,EAAQyvB,YACTo8C,EAAAA,EAAAA,IAA8BpvE,EAAQC,EAAQsD,EAAQ4D,WAE3DjH,SAAAA,EACA66D,cAAAA,EACAsU,aAAkC,WAApBnoE,EACd4hE,kBAAkB+B,EAAAA,EAAAA,IAAuB7qE,EAAQuD,GACjD+rE,kBAAkBxE,EAAAA,EAAAA,IAAuB9qE,EAAQuD,GACjDgsE,sBAAuBvvE,EAAOuiB,SAAS+Q,MAAMi8C,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyBzvE,GAC7C6F,WAAY6oE,EACZ58C,mBAAoB9xB,EAAO8xB,mBAC3BgC,iBAAiBjB,EAAAA,EAAAA,IAAetvB,QAAWjD,GAAYsyB,EAAAA,EAAAA,IAAsB5yB,EAAQC,GACrFu1D,eAAgB2B,GAAmBn3D,EAAOwzB,gBAAgB2jC,EAAgBh2D,IAC1EmxB,wBAAyBtyB,EAAOsyB,2BAC5B7nB,GAAc,CAAEssD,gBAAgB2Y,EAAAA,EAAAA,IAAqB1vE,EAAQuD,EAA6B,cAApB2D,OAC5C,iBAAnB0zD,GAA+B,CAAEA,eAAAA,MACxC7K,GAAa,CAAEC,eAAAA,EAAgBC,iBAAAA,EAAkB3oD,oBAAAA,MA5HvCs7B,EAjwBuB,IAkErC,IAlEsC,QAC1Cr/B,EAD0C,aAE1CoqE,EAF0C,6BAG1CgC,EAH0C,4BAI1CC,EAJ0C,uCAK1CC,EAL0C,MAM1C5zB,EAN0C,UAO1C8M,EAP0C,WAQ1CskB,EAR0C,eAS1CD,EAT0C,mBAU1C0C,EAV0C,WAW1CC,EAX0C,gBAY1C5b,EAZ0C,eAa1C6b,EAb0C,cAc1CC,EAd0C,uBAe1CC,EAf0C,sBAgB1C5C,EAhB0C,aAiB1ClZ,EAjB0C,MAkB1ClxB,EAlB0C,gBAmB1C0qC,EAnB0C,OAoB1C7pE,EApB0C,cAqB1C+pE,EArB0C,aAsB1CC,EAtB0C,UAuB1C5iD,EAvB0C,YAwB1C8iD,EAxB0C,gBAyB1CC,EAzB0C,aA0B1C/5D,EA1B0C,mBA2B1Cg6D,EA3B0C,eA4B1CpX,EA5B0C,eA6B1C6D,EA7B0C,kBA8B1C7nC,EA9B0C,YA+B1C69B,EA/B0C,UAgC1Cb,EAhC0C,eAiC1CC,EAjC0C,iBAkC1CC,EAlC0C,oBAmC1C3oD,EAnC0C,aAoC1C+mE,EApC0C,eAqC1Ch8B,EArC0C,cAsC1Co7B,EAtC0C,UAuC1C97B,EAvC0C,SAwC1Cgf,EAxC0C,aAyC1ClsC,EAzC0C,iBA0C1Cpa,EA1C0C,UA2C1CikE,EA3C0C,cA4C1CO,EA5C0C,aA6C1CzC,EA7C0C,YA8C1Cp6C,EA9C0C,oBA+C1C+8C,GA/C0C,qBAgD1CE,GAhD0C,eAiD1Cve,GAjD0C,WAkD1C8J,GAlD0C,gBAmD1C2U,GAnD0C,SAoD1CjvE,GApD0C,gBAqD1Ci3D,GArD0C,mBAsD1CrlC,GAtD0C,gBAuD1CgC,GAvD0C,eAwD1C0hC,GAxD0C,wBAyD1CljC,GAzD0C,gBA0D1CprB,GA1D0C,aA2D1CmoE,GA3D0C,cA4D1CtU,GA5D0C,iBA6D1C+N,GA7D0C,iBA8D1CwG,GA9D0C,mBA+D1CE,GA/D0C,sBAgE1CD,GAhE0C,WAiE1C1pE,IACI,EACJ,MAAM,uBACJwD,GADI,qBAEJ0/D,GAFI,uBAGJx/D,KACE0W,EAAAA,EAAAA,MAGEyqB,IAAMnC,EAAAA,EAAAA,IAAuB,MAE7B4nC,IAAkB5nC,EAAAA,EAAAA,IAAuB,MAEzCyoB,IAAazoB,EAAAA,EAAAA,IAAuB,MAEpCvlC,IAAOm/B,EAAAA,GAAAA,MAEbkyB,EAAAA,GAAAA,IAAe8b,GAAiBR,GAEhC,MAAM,kBACJhb,GADI,oBACeC,GADf,wBAEJ9D,GAAyBuB,kBAAmBxB,GAFxC,uBAGJgE,GAHI,sBAGoBC,KACtBC,EAAAA,GAAAA,GAAuBrqB,GAAKjhC,EAAAA,IAAgBinD,IAAgB,EAAMjpC,EAAAA,KAEtEmY,EAAAA,EAAAA,KAAU,KACJ+0B,IACFprD,OAED,CAACorD,GAAmBprD,KAEvB,MAAM+qD,GAAwBH,GAAmB,GAC1CjpB,GAASqpB,KAAannB,EAAAA,GAAAA,GAAQknB,KACrC10B,EAAAA,EAAAA,KAAU,KACJ00B,IAIJ3tD,WAAW4tD,GA1GU,GA0GCJ,KACrB,CAACA,EAAiBI,GAAWD,KAChC,MAAM,qBAAEtqB,KAAyBC,EAAAA,GAAAA,GAAkBiB,QAAS5qC,EAAWg0D,IAAuB,IAG5FnzD,GAAIoD,GADA,OACWtE,GADX,YACmBkoD,GADnB,SACgColB,IAClChqE,EAEE6sE,IAAUv9C,EAAAA,EAAAA,IAAetvB,GACzBylD,IAAQC,EAAAA,EAAAA,IAAa1lD,GACrBq1B,GAAkC,cAApB1xB,IAAmC3D,EAAQq1B,YACzDy3C,IAAWC,EAAAA,EAAAA,IAAe/sE,KAAa2qE,EACvCqC,GAAYzrE,QAAQe,KAAmC,WAApBqB,GACnCwhD,IAAc8nB,EAAAA,EAAAA,IAAsBjtE,GACpCktE,GAAmBrE,GAAgByC,EACnC6B,IAAevZ,MAAAA,QAAA,EAAAA,GAAiBjkC,cAAcy9C,EAAAA,EAAAA,IAAkBxZ,GAAgBjkC,WAChF09C,GACJzoB,MACK9V,GAAkBzZ,MACnB60C,IACAtlB,GAAY0oB,sBACZnoB,GAEAvB,GAAUriD,QAAQm3C,IAAUA,EAAOt6C,SAAS6D,OAAS,EACrDsrE,GAA4B/9C,IAAsBm9C,EAClDa,GAA2Bh+C,IAAsBu6C,EACjDvc,QAA6CzwD,IAAxBs0D,GACrBoc,KACFjgB,IAAsBL,IAAkB2d,GACtC0C,IAEAE,GAAat/B,IAAc/Y,KAAgBg4B,EAC3CsgB,GAAWpsE,QAAQuqE,IACnBlnB,KACEA,GAAYgpB,eAAkB9+B,IAAmB2W,IAAUykB,IAC5DtlB,GAAYipB,eAGb3gB,IAAgBvrB,EAAAA,EAAAA,KAAY,CAACv3B,EAAkDxG,KACnFkC,GAAuB,CACrB9E,UAAAA,GACA4C,UAAAA,MACIwG,MAAAA,OAAA,EAAAA,EAAGg8B,WAAY,CAAEvgC,WAAW,MAC5B+9C,IAAW,CAAEh+C,gBAAiB8yC,EAAOt6C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,UAEnE,CAACkI,GAAwB9E,GAAW4iD,GAASlL,IAE1Co1B,GAAgBvD,EAAgB/pE,OAASzD,EAEzCgxE,GAAanpB,KAAgB9V,GAAkBo7B,IAAkB4D,IAAiBtD,EAAesD,GACjGE,GAAappB,GAAc4lB,EAAesD,IAE1C,gBACJzf,GADI,YAEJ5S,GAFI,kBAGJqT,GAHI,kBAIJG,GAJI,yBAKJC,GALI,gBAMJ1hB,GANI,wBAOJ+hB,GAPI,iBAQJjmB,GARI,SASJykB,GATI,uBAUJH,GAVI,8BAWJiC,IACE5C,GACFC,GACA/lB,GACAnmC,GACA4iD,EACAriD,QAAQ4rD,IACR5rD,QAAQ6rD,GACR7rD,QAAQ8rD,GACRC,GACAC,GACA7wD,GACA8wD,GACAC,GACAhI,GACA+nB,KAGI,kBACJS,GADI,kBAEJC,GAFI,kBAGJC,GAHI,iBAIJC,GAJI,iBAKJ9N,GALI,gBAMJ+N,GANI,sBAOJC,GAPI,gBAQJC,GARI,gBASJC,GATI,mBAUJtH,GAVI,eAWJuH,GAXI,mBAYJC,GAZI,cAaJC,GAbI,YAcJC,GAdI,qBAeJC,GAfI,6BAgBJC,ICvZW,SACbrvE,EACAytD,EACAltD,EACAtD,EACAC,EACA6yB,EACA69C,EACAh4C,EACA80C,EACAzxB,EACAq1B,EACAC,EACApmD,GAEA,MAAM,SACJjpB,EADI,iBACMsH,EADN,aACwBvD,EADxB,gBACsCqsE,EADtC,gBACuDC,EADvD,iBAEJC,EAFI,qBAEcjI,EAFd,aAEoCkI,EAFpC,gBAEkDhqE,EAFlD,uBAEmEiqE,IACrEzyD,EAAAA,EAAAA,OAGF9e,GAAIoD,EADA,YACW4jD,EADX,iBACwB7zC,EADxB,cAC0Ck5D,EAD1C,oBACyDmF,EADzD,UAC8ExrE,GAChF5D,EAEEiuE,GAAoBtsC,EAAAA,EAAAA,KAAY,KAC/BosC,GAILpvE,EAAS,CAAEf,GAAImwE,EAAWnwE,OACzB,CAACmwE,EAAYpvE,IAEVuvE,GAAoBvsC,EAAAA,EAAAA,KAAY,KAC/BqsC,EAMDX,GAAAA,MAAezoB,GAAAA,EAAayqB,cAC9B3sE,EAAa,CAAEhG,OAAQsxE,EAAWpwE,GAAIoD,UAAW4jD,EAAYyqB,gBAE7D1wE,EAAS,CAAEf,GAAIowE,EAAWpwE,KAR1BqI,EAAiB,CAAEjG,QAASP,EAAK,kBAUlC,CACD4tE,EAAa3qE,EAAckiD,EAAanlD,EAAMd,EAAUqvE,EAAY/nE,IAGhEkoE,GAAoBxsC,EAAAA,EAAAA,KAAY,KAC/B/Z,GAILjpB,EAAS,CAAEf,GAAIgqB,EAAUhqB,OACxB,CAACgqB,EAAWjpB,IAETyvE,GAAmBzsC,EAAAA,EAAAA,KAAY,KACnCj/B,EAAa,CACXhG,OAAQytE,GAAwBF,EAAgBA,EAAgBvtE,EAChEC,SAAAA,EACAqE,UAAW+P,EACXjN,eAAgBqmE,GAAwBF,OAAgBltE,EAAYiE,MAErE,CAAC0B,EAAcynE,EAAsBF,EAAevtE,EAAQC,EAAUoU,EAAkB/P,IAErFs/D,GAAmB3+B,EAAAA,EAAAA,KAAY,KACnCotC,EAAgB,CACdryE,OAAAA,EAAQC,SAAAA,EAAUqE,UAAAA,EAAW2B,OAAQ0yB,EAAci6C,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,WAExF,CAAC5yE,EAAQC,EAAUqE,EAAW+tE,EAAiB15C,IAE5Cg5C,GAAkB1sC,EAAAA,EAAAA,KAAY,KAClCqtC,EAAgB,CAAEtyE,OAAAA,EAAQsE,UAAAA,MACzB,CAACtE,EAAQsE,EAAWguE,IAEjBV,GAAwB3sC,EAAAA,EAAAA,KAAa4tC,IACzCR,EAAgB,CACdryE,OAAAA,EACAC,SAAAA,EACAqE,UAAWuuE,EACX5sE,OAAQ0yB,EAAci6C,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,UAE1D,CAAC5yE,EAAQC,EAAUoyE,EAAiB15C,IAEjCm5C,GAAkB7sC,EAAAA,EAAAA,KAAY,KAClCstC,EAAiB,CAAEzvE,WAAY,CAACwB,OAC/B,CAACA,EAAWiuE,IAET/H,GAAqBvlC,EAAAA,EAAAA,KAAY,KACrCqlC,EAAqB,CAAEtqE,OAAAA,EAAQsE,UAAAA,MAC9B,CAACgmE,EAAsBtqE,EAAQsE,IAE5BytE,GAAiB9sC,EAAAA,EAAAA,KAAajtB,IAClCw6D,EAAa,CAAExyE,OAAAA,EAAQsE,UAAAA,EAAW0T,QAAAA,MACjC,CAAChY,EAAQsE,EAAWkuE,IAEjBR,GAAqB/sC,EAAAA,EAAAA,KAAY,KACrCz8B,EAAgB,CAAEP,WAAYjI,EAAQkH,UAAAA,MACrC,CAACsB,EAAiBxI,EAAQkH,IAEvB+qE,GAAgBhtC,EAAAA,EAAAA,KAAY,KAChC,GAAI+W,GAASA,EAAMt6C,SAAU,CAC3B,MAAMoB,EAAak5C,EAAMt6C,SAAS0B,KAAI,QAAC,GAAElC,GAAH,SAAYA,KAClDsH,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAAA,SAEtC0F,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAY,CAACwB,OAEpD,CAAC03C,EAAOxzC,EAAiBxI,EAAQsE,IAE9B4tE,GAAcjtC,EAAAA,EAAAA,KAAY,KAC9Bj/B,EAAa,CACXhG,OAAAA,EAAQC,SAAUkB,EAAAA,GAAgBmD,UAAAA,MAEnC,CAAC0B,EAAchG,EAAQsE,IAEpB6tE,GAAuBltC,EAAAA,EAAAA,KAAY,KACnCnS,EACF9sB,EAAa,CACXhG,OAAQkoD,EAAajgD,WAAYf,UAAAA,EAAWC,cAAenH,IAK3DytE,GAAwBF,EAC1BkF,EAAuB,CACrBzyE,OAAQutE,EACRttE,SAAUyyE,EACVpuE,UAAW4jD,EAAaipB,gBAG1BnrE,EAAa,CACXhG,OAAQkoD,EAAajgD,WAAY3D,UAAW4jD,EAAaipB,kBAG5D,CACDr+C,EAAmB26C,EAAsBF,EAAevnE,EAAckiD,EAAahhD,EAAWlH,EAC9FyyE,EAAwBC,IAGpBI,GAAsB7tC,EAAAA,EAAAA,KAAav3B,IACvCA,EAAE23B,kBAEFmrB,EAAc9iD,EAAGxG,KAChB,CAACspD,EAAetpD,IAEnB,MAAO,CACLqqE,kBAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACA9N,iBAAAA,EACA+N,gBAAAA,EACAC,sBAAAA,EACAC,gBAAiBiB,EACjBhB,gBAAAA,EACAtH,mBAAAA,EACAuH,eAAAA,EACAC,mBAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,qBAAAA,EACAC,6BAA8BU,GDuP5BC,CACFhwE,GACAytD,GACAltD,EACAtD,GACAC,GACA6yB,EACA69C,GACAh4C,GACA60C,EACAxxB,EACAq1B,GACAC,GACApmD,GAGI8nD,IAAqBjuC,EAAAA,GAAAA,GACzB,4BACAgrC,GAAkB,iBAClBpf,GAAe,eACfqf,GAAiB,gBACjBC,GAA0B,0BAC1B5C,GAAyB,yBACzBlZ,GAAgB,eAChBpL,IAAS,MACTlkD,QAAQvB,EAAQq0D,QAAU,YAC1Br0D,EAAQk0D,UAAY,aACpB4Y,IAAY,YACZtf,IAAsB,gBACtBhB,IAAcE,GAAoB,UAClCoe,GAAgB,gBAChB9qE,EAAQiR,YAAc,cACtBue,GAAqB,uBACrBo0B,IAAW,WACX5jD,EAAQ4yB,kBAAoB,qBAC5BqkC,IAAc,cACd9J,IAAkB,uBAClBud,GAAe,gBACfnpE,QAAQvB,EAAQ+kD,gBAAkB,qBAClCgJ,IAAY,YACZtnB,GACAllC,QAAQ0wD,KAAmB,wBAGvB,KACJ/wD,GADI,MACEkgB,GADF,MACSmU,GADT,MACgB8iB,GADhB,MACuBC,GADvB,SAC8B9iB,GAD9B,QACwCnrB,GADxC,QACiD8wD,GADjD,KAC0DzlD,GAD1D,QACgEyqD,GADhE,QACyEr2C,GADzE,SACkFlF,GADlF,OAC4Frb,GAD5F,KACoGk8D,KACtGhwC,EAAAA,EAAAA,IAAkBz1B,IAEhB,UAAE67B,IAActyB,IAAU,GAE1BomE,GAAoBrtE,KAAekrE,IAAgD,WAApB7pE,KAAiC6oE,EAChGoD,IAA2B1pE,EAAAA,KAAiB21B,KAAcsxB,IAAkB58B,KAC5Ei9C,GAEAqC,GpC/cD,SACL7vE,GAwBA,IAvBA,SACE8sE,EADF,YAEE3nB,EAFF,cAGEunB,EAHF,YAIEW,EAJF,UAKEL,EALF,gBAME3C,EANF,YAOEyF,EAPF,gBAQEC,EARF,aASE5C,EATF,gBAUE6C,GAaF,uDADI,GAEJ,MAAM,KACJ9uE,EADI,MACEkgB,EADF,MACSmU,EADT,MACgB8iB,EADhB,MACuBC,EADvB,SAC8B9iB,EAD9B,KACwC9f,EADxC,QAC8CyqD,EAD9C,QACuDhF,EADvD,SACgEv2C,IAClE6Q,EAAAA,EAAAA,IAAkBz1B,GAEhBmiE,EAAa,CAAC,mBACd8N,EAAU7uD,GAASmU,GAAS3Q,EAC5BygC,EAAUnkD,GAA2B,WAAnB0jB,MAAAA,OAAA,EAAAA,EAAU9mB,OAAoBkyE,EAChDE,EAAoBD,IAAY5qB,EAChC8qB,EAAW5uE,QAAQvB,EAAQgqE,UAkFjC,OAhFI9kB,GAAmBC,GACrBgd,EAAWzhE,KAAM,yBAAwBykD,KAChCE,GACT8c,EAAWzhE,KAAK,QAGdqvE,GACF5N,EAAWzhE,KAAK,qBAGdykD,IACFgd,EAAWzhE,KAAK,gBACZ60B,MAAAA,GAAAA,EAAO66C,SACTjO,EAAWzhE,KAAK,SAGdovE,GACF3N,EAAWzhE,KAAK,iBAGhBuvE,EACF9N,EAAWzhE,KAAK,SACP23C,EACT8pB,EAAWzhE,KAAK,SACP43C,EACT6pB,EAAWzhE,KAAK,SACP80B,EACT2sC,EAAWzhE,KAAK,YACPy6D,EACTgH,EAAWzhE,KAAK,WACPgV,EACTysD,EAAWzhE,KAAK,QACPy/D,IACTgC,EAAWzhE,KAAK,aAEZy/D,EAAQ/+C,OAAS++C,EAAQ5qC,QAC3B4sC,EAAWzhE,KAAK,UAIhB2sE,GACFlL,EAAWzhE,KAAK,gBAGdosE,GACF3K,EAAWzhE,KAAK,YAGdssE,GACF7K,EAAWzhE,KAAK,eAGdysE,GACFhL,EAAWzhE,KAAK,iBAGdyvE,GACFhO,EAAWzhE,KAAK,cAGd2pE,GACFlI,EAAWzhE,KAAK,qBAGbykD,IACHgd,EAAWzhE,KAAK,cAEZuvE,GAAWH,GACb3N,EAAWzhE,KAAK,mBAGdosE,GAAYO,IAAgB6C,GAAqBC,GAAY9F,IAC/DlI,EAAWzhE,KAAK,wBAGdgsE,IAAkBtrD,GAAUwD,IAAaygC,IAAa6qB,IACxD/N,EAAWzhE,KAAK,iBAIbyhE,EAAWrhE,KAAK,KoC2VEuvE,CAAsBrwE,EAAS,CACtD8sE,SAAAA,GACA3nB,YAAAA,GACAunB,cAAAA,EACAW,YAAAA,GACAL,UAAAA,GACA3C,gBAAAA,EACAyF,YAAaxtE,KAAcA,MAAAA,QAAA,EAAAA,GAAYg0B,eAAgB,EACvDy5C,gBAAiBrC,IAAcC,GAC/BR,aAAAA,GACA6C,gBAAoC,aAAnBprD,MAAAA,QAAA,EAAAA,GAAU9mB,SAAuBilE,EAAAA,EAAAA,IAAiB/iE,GAAS6G,EAAAA,EAAAA,GAAcC,MAGtFwpE,GAAeT,GAAiBrrE,SAAS,gBACzC+rE,IAAYC,EAAAA,GAAAA,GAAkBxwE,EAAS+qE,EAAW7lB,GAAmBC,KAE3E,IAAIsrB,GAWAC,GATFD,GADE50C,IAEO2xC,GADM,QAGN+C,IAAcrD,IAAqB/M,GAG7B,aAFA,UAMboM,EACFmE,GAAoB,UACXvD,GACLhoB,KAAiB/jC,IAASmU,IAAS23C,MAAsBqD,GAC3DG,GAAoB,UACXrD,IACToD,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,QAGtB7vB,EAAAA,GAAAA,GACEqpB,GAAiBlqE,EAAQiqE,cAAgBjqE,EAAQiqE,cAAgBvtE,GACjEowE,GAAW9sE,EAAQ+Q,sBAAmBhU,EACtC6T,EACA5Q,EAAQpC,IAEV2uD,GAAgBplB,GAAKzqC,GAAQ8vD,EAAWC,EAAgBC,EAAkB3oD,GAE1E,IACI4sE,GADApjC,GAAQ,GAERqjC,IAAiB,EACrB,MAAM7J,IAAclmC,EAAAA,EAAAA,KAAQ,IACnB+iB,GAAU0D,GAAqB7B,GAAOlkD,QAAQ8rE,IAAc9rE,QAAQikD,GAAY9M,QAAU37C,GAChG,CAAC6mD,GAAS6B,GAAO4nB,GAAa7nB,EAAW9M,IAEtCm4B,GAAexD,GAAc,GAAK,EACxC,GAAKzpB,KAAYxiC,KAASmU,GAkBfwxC,KACT4J,GAAkBrpE,KAAKC,IAAI69C,GAAiB7jD,QAAQL,IAAOyuE,IAAoB5I,GAAYhb,eAAel+B,OACtG8iD,GAAkB5J,GAAYhb,eAAel+B,MAhVlB,KAiV7B+iD,IAAiB,QArBa,CAChC,IAAI/iD,EACAzM,GACFyM,EAAQ03B,GAAyBvlD,EAASwlD,GAAW33B,MAC5C0H,KAEP1H,EADE0H,GAAM66C,QACAtI,GAAAA,GAEAviB,GAAyBvlD,EAASwlD,GAAW33B,OAIrDA,IACF8iD,GAAkBrpE,KAAKC,IAAI69C,GAAiB7jD,QAAQL,IAAOyuE,IAAoB9hD,GAC3E8iD,GAAkB9iD,EA1UO,KA2U3B+iD,IAAiB,IAUnBD,KACFpjC,GAAS,UAASojC,GAAkBE,QAGtC,MAAMpd,GAAarlB,GAAapuC,EAAQ8wE,aAAiBzD,KAAezoB,MAAAA,QAAhB,EAAgBA,GAAaksB,kBAAe/zE,EAC9Fg0E,IAAsBlwC,EAAAA,EAAAA,KAAQ,IAC3B4yB,GAAYxH,GAAqBwH,SAAa12D,GACpD,CAAC02D,KAoBJ,SAASud,KACP,MAAMC,EACJ,mBAAC,GAAD,CACEjxE,QAASA,EACT4zD,gBAAiBA,GACjBJ,eAAgBA,EAChBC,UAAWA,GACXC,cAAqC,YAAtBgd,GACf/c,mBAA0C,WAAtB+c,GACpBniD,mBAAoBA,GACpB0jC,eAAgBA,GAChBtzB,QAAS4vC,KAIb,MAA0B,WAAtBmC,GACKO,EAIP,mBAAC,GAAD,CACEhf,eAAgBA,GAChBjyD,QAAS4zD,GACTgV,aAAcqI,EACd1iD,mBAAoBA,KAuQ1B,OACE,0BACE4Y,IAAKA,GACLvpC,IAAI6zD,EAAAA,EAAAA,IAAiBzxD,EAAQpC,IAC7Bw/B,UAAWsyC,GACXniC,MAAOwjC,GAAuB,6BAA4BA,YAA0Bh0E,EACpF,kBAAiBiE,GACjBqtC,YAAaggB,GACb1vB,QAAS8c,GACT6R,cAAewB,GACfvgB,cAAe0gB,GACfhlB,aAAcujC,GAA2B3d,QAAgC9yD,EACzEm0E,YAAatB,GAA0BpiC,QAAkBzwC,EACzDmtC,aAAe0lC,IAA2BpC,GAA4BlkC,QAAmBvsC,GAEzF,0BACEoqC,IAAKylC,GACLxvC,UAAU,gBACV,kBAAiBp8B,GACjB,uBAAsB03C,EAAQA,EAAMt6C,SAASs6C,EAAMt6C,SAAS6D,OAAS,GAAGrE,QAAKb,EAC7E,0BAAyBiD,EAAQ4yB,oBAEjCpD,GACA,0BAAK4N,UAAU,0BACZ65B,IAAc,wBAAG75B,UAAU,iBAG/B2sC,GACC,0BACE3sC,WAAWqE,EAAAA,GAAAA,GAAe,sCAAuCmqC,IAAmB,eACpFjtC,QAASmwC,IAERlD,IACC,wBAAGxuC,UAAU,iBAIlB0sC,GAtVL,WACE,MAAMqH,EAAmBpD,KAAcpqD,EAAAA,EAAAA,IAASoqD,GAAWnwE,IACrD6lE,EAAcsK,IAAcoD,EAAoBpD,QAAwBhxE,EACxE2mE,EAAcqK,KAAeoD,EAAoBpD,QAAwBhxE,EACzEq0E,GAAerD,IAAcnpB,GAAeA,GAAYE,oBAAiB/nD,EAE/E,OACE,mBAACqgD,GAAA,EAAD,CACEhe,KAAK,QACLrqB,KAAM0uD,EACNthE,KAAMuhE,EACNxiE,KAAMkwE,EACNlwD,aAAcA,EACdyd,QAAU8kC,GAAcC,EAAcuK,QAAoBlxE,IAyU7Cs0E,GACf,0BACEj0C,WAAWqE,EAAAA,GAAAA,GAAe,0BAA2BouC,GAAiBrrE,SAAS,SAAW,oBAE1F,0BACE2iC,IAAKsmB,GACLrwB,UAAWyyC,GACXtiC,MAAOA,GACP1O,IAAI,QAEHwuC,KAAgBE,IACf,0BAAKnwC,UAAU,iBAAiB39B,GAAK,qBAlT/C,WACE,MAAM29B,GAAYqE,EAAAA,GAAAA,GAChB,gBACA4rC,IAAe,oBACfP,IAAY,gBACZ8D,IAAkB,oBAEd9J,EAAoB4F,IAAkB6D,KAAclD,KAAgBL,GACpEsE,GAAmB7vC,EAAAA,GAAAA,GACvB,eACiB,YAAjBgvC,IAA8B,YAC9Bjd,GAAkB,sBAGpB,OACE,0BAAKp2B,UAAWA,EAAWmR,cAAe2gB,GAA0BrwB,IAAI,QA4L5E,WAME,GAJuBsmB,KAAgB6kB,MACpCH,KAFWzoD,IAASmU,IAAS3Q,KAEAyoD,IAAerD,IAAYK,IACrDkD,IAA+BT,IAAY3nB,GAG/C,OAGF,IAAI4M,EACAwf,EAWJ,OAVIvD,IAAgB7oB,IAAe6kB,GAMxBplB,MAAAA,IAAAA,GAAaE,iBACtBiN,EAAcnN,GAAYE,iBAN1BiN,GAAcpxD,EAAAA,EAAAA,IAAelB,GAAMuuE,IAE9BX,KACHkE,EAAe,UAAQC,EAAAA,EAAAA,IAAgBxD,QAOzC,0BAAK5wC,UAAU,gBAAgByB,IAAI,OAChCkzB,EACC,2BACE30B,WAAWqE,EAAAA,GAAAA,GAAe,cAAe8vC,GACzC5yC,QAASuvC,GACTrvC,IAAI,SAEHkd,EAAAA,GAAAA,GAAWgW,IAEXnqC,OAED7qB,EAhoBC,IAioBJ6qB,GACC,sCACE,2BAAMwV,UAAU,OAAO39B,GAAK,WAC5B,2BACE29B,UAAU,cACVuB,QAASwvC,KAERpyB,EAAAA,GAAAA,GAAY,IAAGn0B,EAAU/K,cAI/B+nC,MAAAA,IAAAA,GAAa0oB,oBACZ,2BAAMlwC,UAAU,cAAcyB,IAAI,QAAQp/B,GAAK,mBAC7CO,EAAQ8wE,aAAe1iC,EACzB,2BAAMhR,UAAU,cAAcyB,IAAI,QAAQ7+B,EAAQ8wE,iBAChD/zE,GA7OH00E,GACA3E,IACC,mBAAC,GAAD,CACE9sE,QAAS4Q,EACTy8C,YAAaA,EACb7sD,OAAQoqE,EACRla,oBAAqB2b,EACrB1tC,QAASyvC,KAGZ/jE,IACC,mBAAC,GAAD,CACErK,QAASA,EACT0wD,oBAAqB2b,EACrB7X,8BAA+B8X,EAC/B7X,WAAYwX,GACZ/qD,aAAcA,IAGjBoqD,GACC,mBAACoG,GAAA,EAAD,CACEtyC,KAAK,QACLqmB,MAAOA,GACPp7C,QAASihE,EACTqG,OAAQnG,GACR1C,QAAS4C,GACThb,oBAAqB2b,EACrBnrD,aAAcA,EACd0wD,iBAAkB/E,GAClB7rE,UAAWA,GACXtE,OAAQA,GACRqyB,wBAAyBA,KAG5B85C,GACC,mBAAC,GAAD,CACEzpC,KAAK,QACLqmB,MAAOA,GACPojB,aAAcA,EACdp6C,YAAaA,EACbq6C,QAAS4C,GACThb,oBAAqB2b,EACrBnrD,aAAcA,EACd0wD,iBAAkB/E,GAClB7rE,UAAWA,GACXtE,OAAQA,GACRqyB,wBAAyBA,KAG5B60B,IACC,mBAAC,GAAD,CACElL,MAAOA,EACPquB,YAAaA,GACbrW,oBAAqB2b,EACrB5mB,MAAOA,GACP4H,YAAaA,EACbyZ,kBAAmBA,EACnB5lD,aAAcA,EACd++C,aAAcqO,KAGjBzyC,IACC,mBAAC,GAAD,CACE77B,QAASA,EACT67B,UAAWA,GACXn/B,OAAQA,MAGVknD,IAAWxiC,IACX,mBAAC,GAAD,CACEphB,QAASA,EACT0wD,oBAAqB2b,EACrB7mB,UAAWA,EACX4R,YAAamO,GACblO,eAAgBA,EAChBE,qBAAsBuP,EACtBnoC,QAAS2hC,GACT7I,eAAgByP,GAChB1P,cAAeA,GACfnK,YAAaA,EACb1tB,MAAOA,KAGTikB,IAAWruB,IAASA,GAAM66C,SAC1B,mBAAC,GAAD,CACEpwE,QAASA,EACT0wD,oBAAqB2b,EACrBjV,YAAamO,GACbrkD,aAAcA,EACds2C,cAAeA,MAGjB5T,IAAWruB,KAAUA,GAAM66C,SAC3B,mBAAC,GAAD,CACEpwE,QAASA,EACT0wD,oBAAqB2b,EACrB7mB,UAAWA,EACX4R,YAAamO,GACb1L,YAAakS,GACb1U,eAAgBA,EAChBn2C,aAAcA,EACdyd,QAAS2hC,GACT7I,eAAgByP,GAChB1P,cAAeA,GACfnK,YAAaA,KAGfhV,IAASC,KACT,mBAACu5B,GAAA,EAAD,CACElyC,MAAOA,EACP3/B,QAASA,EACT2C,OAAQmvE,EAAAA,GAAAA,OACRza,eAAgBA,EAChBn2C,aAAcA,EACd6wD,aAAcviD,EACdynC,WAAYA,GACZ+a,OAAQ3D,GACR4D,aAAa35B,IAAWmN,KAAS3W,OAAoC/xC,EAAlByxE,GACnD/W,eAAgByP,GAChB1P,cAAeA,KAGlBhiC,IACC,mBAAC08C,GAAA,EAAD,CACElyE,QAASA,EACT0wD,oBAAqB2b,EACrBjV,YAAamO,GACbyG,sBAAuBA,GACvB3U,eAAgBA,EAChB0a,aAAcviD,EACdynC,WAAYA,GACZgJ,aAAcK,GACd7I,eAAgByP,GAChB1P,cAAeA,KAGlB2D,IACC,mBAAC,GAAD,CAASA,QAASA,KAEnBzlD,IACC,mBAAC,GAAD,CAAM1V,QAASA,EAAS0V,KAAMA,GAAMgnD,WAAY+R,KAEjDhJ,IACC,mBAAC,GAAD,CACEzlE,QAASA,EACTulE,iBAAkBA,GAClBrkD,aAAcA,KAGhBgsD,IAAoBqD,IACpB,wBAAGnzC,UAAWk0C,EAAkBzyC,IAAI,QACjC0xC,GACiB,YAAjBE,IAA8BO,MAIlC7Q,IACC,mBAAC,GAAD,CACEngE,QAASA,EACT0wD,oBAAqB2b,EACrB7mB,UAAWA,EACX4R,YAAamO,GACb1L,YAAakS,GACb7qD,aAAcA,EACd++C,aAAcK,GACdJ,sBAAuBgH,GACvB1P,cAAeA,GACfnK,YAAaA,EACb1tB,MAAOA,IAGV7V,IAAW,mBAAC,GAAD,CAAS9pB,QAASA,IAC7B4kB,IACC,mBAAC,GAAD,CACE5kB,QAASA,EACTkhB,aAAcA,EACdisC,eAAgBA,GAChB8J,WAAYA,GACZt3B,MAAOA,EACP9rB,KAAMrT,EACNsG,iBAAkBA,KAgHnBqrE,IACC3E,IAA6C,eAAjBiD,IAAiCO,KAC9DvD,IAAuBC,GACtB,mBAACvuC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACN/xB,OAAK,EACLmyB,KAAK,OACLoC,UAAW/hC,GAAK,2BAChBk/B,QAASorC,EAAwB2E,GAAqBC,IAEtD,wBAAGvxC,UAAU,uBAEbqwC,IAAuBE,GACzB,mBAACxuC,GAAA,EAAD,CACE/B,UAAU,wBACV4B,MAAM,oBACN/xB,OAAK,EACLmyB,KAAK,OACLoC,UAAU,gBACV7C,QAASmtC,GAAe8C,GAAcC,IAEtC,wBAAGzxC,UAAU,2BAEbrgC,EACH4yE,IAAqB,mBAAC,GAAD,CAAertE,WAAYA,GAAauvC,SAAU26B,IACvE8D,IACC,0BAAKlzC,UAAU,eAAeonC,wBAAyB/e,GAAQkkB,GAAeC,KAE/EgG,IACC,0BACExyC,WAAWqE,EAAAA,GAAAA,GAAe,iBAAkBmsB,KAA2BqE,IAAkB,WACzFtzB,QAAS4wB,IAET,mBAAC0D,GAAA,EAAD,CAAqB7jC,SAAUmB,OAIpCvwB,EAAQ+kD,eACP,mBAAC,GAAD,CAAe/kD,QAASA,EAAS2+B,QAAS6mC,KAErB,YAAtBkL,IACC,mBAAC,GAAD,CACE1wE,QAAS4zD,GACT+U,WAAS,EACT1W,eAAgBA,GAChB1jC,mBAAoBA,MAIzB8iC,IACC,mBAAC,GAAD,CACEhrD,OAAQ+qD,GACRtf,OAAQuf,GACRrxD,QAASA,EACT04C,MAAOA,EACP0xB,aAAcA,EACdzmE,gBAAiBA,GACjB8kC,QAAS6oB,GACTpf,oBAAqBqf,UE51B/B,IAAez0B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAoC,IAA3B,OAAEC,GAAyB,EAClC,MAAMsD,GAAUsW,EAAAA,EAAAA,IAAuB7Z,EAAQC,IACvCA,OAAQiI,EAAV,MAAsBytE,GAAUpyE,GAAW,GAEjD,MAAO,CACLA,QAAAA,EACA4mB,IAAKjiB,GAAcytE,GAAQl8D,EAAAA,EAAAA,IAAWzZ,EAAQkI,QAAc5H,EAC5Ds1E,SAAUD,GAASztE,GAAavC,EAAAA,EAAAA,IAAW3F,EAAQkI,QAAc5H,KARnDsiC,EAtFgC,IAM9C,IAN+C,OACnD3iC,EADmD,QAEnDsD,EAFmD,aAGnDkzC,EAHmD,IAInDtsB,EAJmD,QAKnDyrD,GACI,EACJ,MAAM,qBACJC,EADI,SAEJ3zE,EAFI,iBAGJ4zE,EAHI,SAIJC,EAJI,aAKJ9vE,IACEga,EAAAA,EAAAA,MACEjd,GAAOm/B,EAAAA,GAAAA,KAEP6uB,GAAazoB,EAAAA,EAAAA,IAAuB,MACpCytC,EAAgBlxE,QAAQvB,IAE5B0yE,QAAShiB,IACPiiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT2/B,WAxB6B,IAyB7BC,UAAW,KAGbz2C,EAAAA,EAAAA,KAAU,IACDo2C,EAAgB/hB,EAAoBjD,EAAWxvC,SAAW0wC,IAC3DA,EAAOgD,gBACT2gB,EAAqB,CAAE51E,OAAAA,YAEtBK,GACJ,CAACL,EAAQ+1E,EAAe/hB,EAAqB4hB,IAEhD,MAAM72B,GAAc9Z,EAAAA,EAAAA,KAAY,KACzB3hC,IACDA,EAAQ+yE,eACVR,EAAiB,CAAEhoE,KAAMvK,EAAQ+yE,iBACxB/yE,EAAQqvE,cACjB3sE,EAAa,CAAEhG,OAAQsD,EAAQtD,OAAQsE,UAAWhB,EAAQqvE,iBAE1D1wE,EAAS,CAAEf,GAAIoC,EAAQtD,SAEnBsD,EAAQqoB,YACVmqD,EAAS,CACPrqD,MAAOnoB,EAAQtD,OACf0rB,MAAOpoB,EAAQqoB,iBAIpB,CAAC3lB,EAAc1C,EAASrB,EAAU4zE,EAAkBC,IAEvD,GAAKxyE,EAIL,OACE,0BAAKo9B,UAAU,gCAAgC7C,IAAI,qBACjD,0BAAK6C,UAAU,kDAAkDyB,IAAI,QACnE,0BAAKzB,UAAU,gBAAgByB,IAAI,QACjC,0BAAKzB,UAAU,gBAAgByB,IAAI,OAChCjY,IAAOm1B,EAAAA,GAAAA,IAAWkD,EAAAA,EAAAA,IAAgBr4B,IAAQ,IAC1CyrD,IAAWt2B,EAAAA,GAAAA,GAAW/7C,EAAQgzE,kBAAmBr6B,EAAAA,EAAAA,GAAal5C,EAAM4yE,EAASzrD,IAAQ,KAGxF,wBAAGwW,UAAU,yBAAyByB,IAAI,OAAOsI,IAAKsmB,GACpD,2BAAMrwB,UAAU,qBAAqByB,IAAI,SACtCwgC,EAAAA,GAAAA,GAAuBr/D,EAAQkB,KAAKA,KAAMlB,EAAQkB,KAAK4Q,WAG1D,2BAAMsrB,UAAU,cAAcyB,IAAI,OAChC,2BAAMzB,UAAU,qBAAqB39B,EAAK,uBAI9C,mBAAC0/B,GAAA,EAAD,CAAQH,MAAM,YAAYI,KAAK,OAAOmC,QAAM,EAAC5C,QAAS8c,EAAare,UAAU,4BAC1E39B,EAAKO,EAAQoyE,MACV,uBACCpyE,EAAQqvE,cAAgB,wBAA0B,oCC4JnE,IAAevyC,EAAAA,EAAAA,KAvN0B,IAwBnC,IAxBoC,OACxCpgC,EADwC,WAExC8C,EAFwC,cAGxCyzE,EAHwC,iBAIxCC,EAJwC,SAKxCvrE,EALwC,UAMxCwrE,EANwC,mBAOxC5G,EAPwC,UAQxC/mB,EARwC,aASxCtS,EATwC,YAUxCkgC,EAVwC,6BAWxCC,EAXwC,qBAYxCC,EAZwC,SAaxC32E,EAbwC,KAcxCmB,EAdwC,QAexCoiD,EAfwC,eAgBxCqzB,EAhBwC,uBAiBxCC,EAjBwC,mBAkBxC/I,EAlBwC,cAmBxCgJ,EAnBwC,WAoBxCC,EApBwC,sBAqBxC3iB,EArBwC,YAsBxC4iB,EAtBwC,cAuBxCC,GACI,EACJ,MAAM,oBAAEC,IAAwBn3D,EAAAA,EAAAA,OAE1B,4BACJ2vD,EADI,8BAEJyH,EAFI,uCAGJxH,GxCpEW,SACbxuE,EACAo1C,EACAogC,GAEA,MAAM,oBAAEn7C,EAAF,iBAAuB82C,IAAqBvyD,EAAAA,EAAAA,OAGhDg2D,QAASrG,IACPsG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT6gC,WAAY/uB,GACZgvB,OAAQ/uB,MAIRytB,QAASoB,EAA+BG,OAAQC,EAAkBC,SAAUC,IAC1EzB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT6gC,WArBsC,MAsBpC3S,IACF,GAAa,WAATtjE,EACF,OAGF,IAAIuJ,EAAQ,EACZ,MAAMgtE,EAAuB,GAE7BjT,EAAQ97D,SAASgvE,IACf,MAAM,eAAE3iB,EAAF,OAAkBhD,GAAW2lB,EAEnC,IAAK3iB,EACH,OAGF,MAAM,QAAE4iB,GAAY5lB,EAEd3tD,EAAYkB,OAAOqyE,EAAQ/xE,eAAiB+xE,EAAQvzE,WACtDA,EAAYqG,IACdA,EAAQrG,GAGNuzE,EAAQ3hD,kBACVyhD,EAAW3zE,KAAKM,MAIhBsyE,EAAqBr1D,SAAW5W,GAASisE,EAAqBr1D,SAChEka,EAAoB,CAAE9wB,MAAAA,IAGpBgtE,EAAWpyE,QACbgtE,EAAiB,CAAEzvE,WAAY60E,QAInC1a,EAAAA,GAAAA,GAAkBua,EAAkBE,GAEpC,MAAQ1B,QAASpG,IAA2CqG,EAAAA,GAAAA,IAAwB,CAClFC,QAAS1/B,EACT6gC,WAAY/uB,KAGd,MAAO,CACLqnB,4BAAAA,EACAyH,8BAAAA,EACAxH,uCAAAA,GwCGEkI,CAAoB12E,EAAMo1C,EAAcogC,IAEtC,oBACJmB,EADI,mBAEJC,EAFI,cAGJC,GCtEW,SACb72E,EACAo1C,EACA1zC,EACA0zE,EACAvrE,EACAgsE,EACAC,EACA1zB,EACAqzB,EACAC,GAEA,MAAM,qBAAE9uE,IAAyBgY,EAAAA,EAAAA,OAE1Bk4D,EAAmBC,IAAoBh0C,EAAAA,EAAAA,KAC5C,IAAgB,WAAT/iC,EAAoB,EACzB4O,EAAAA,EAAAA,KAAS,IAAMhI,EAAqB,CAAED,UAAWuI,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FN,EAAAA,EAAAA,KAAS,IAAMhI,EAAqB,CAAED,UAAWuI,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACtI,EAAsBlF,IAInBi1E,GAAsBzvC,EAAAA,EAAAA,IAAuB,MAE7C0vC,GAAqB1vC,EAAAA,EAAAA,IAAuB,MAE5C2vC,GAAgB3vC,EAAAA,EAAAA,IAAuB,MAE7C,SAAS8vC,IACP,IAAK50B,EAAS,OAEd,IAAK1gD,IAAeA,EAAWyC,OAG7B,OAFA0xE,GAAY,QACZC,GAAc,GAIhB,IAAKV,EAGH,OAFAS,GAAY,QACZC,GAAc,GAIhB,IAAK1gC,EAAaj1B,QAChB,OAGF,MAAM,aAAE82D,EAAF,aAAgBC,EAAhB,UAA8BC,GAAc/hC,EAAaj1B,QACzDi3D,EAAe5tE,KAAK2F,MAAM+nE,EAAeC,EAAYF,GAErDI,EAAaD,GAvDC,EAyDpBvB,EAAYhsE,GAAYwtE,IAHHD,GAvDH,KA2DlBtB,GAAeuB,GAGjB,MACEzC,QAAShiB,IACPiiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT8gC,OAAQoB,EAAAA,KACNhU,IACF,IAAKyT,IAAqBD,EACxB,OAKF,GAD4Bp1E,EAAW,IAAM61E,EAAAA,GAE3C,OAGF,MAAMC,EAAelU,EAAQ77D,MAAK,QAAC,eAAEosD,GAAH,SAAwBA,KAC1D,IAAK2jB,EACH,OAGF,MAAM,OAAE3mB,GAAW2mB,EAEM,sBAArB3mB,EAAOvxB,WAEPm4C,EAAAA,IAA0BhC,EAAet1D,SAAWze,EAAWyC,QAAUiL,EAAAA,KAEzEsmE,EAAuBv1D,SAAU,GAGnC22D,KAC8B,qBAArBjmB,EAAOvxB,WAChBy3C,QAIJ/jB,EAAAA,GAAAA,IAAe2jB,EAAqB/jB,IACpCI,EAAAA,GAAAA,IAAe4jB,EAAoBhkB,GAEnC,MACEgiB,QAAS8C,EACTvB,OAAQwB,EACRtB,SAAUuB,IACR/C,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT8gC,OAAQ2B,KACPb,IAEHhkB,EAAAA,GAAAA,IAAe6jB,EAAea,GAE9B,MACE9C,QAASkD,EACT3B,OAAQ4B,EACR1B,SAAU2B,IACRnD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT8gC,OArHoB,GAsHnBc,GAqBH,OAnBAhkB,EAAAA,GAAAA,IAAe6jB,EAAeiB,IAE9BG,EAAAA,GAAAA,IAAY,KACN71B,GACF40B,MAED,CAAC50B,KAGJ61B,EAAAA,GAAAA,IAAY,KACVN,IACAI,IAEAzyE,YAAW,KACT0yE,IACAJ,MAtIuB,OAwIxB,CAACl2E,IAEG,CAAEi1E,oBAAAA,EAAqBC,mBAAAA,EAAoBC,cAAAA,GDjE9CqB,CACFl4E,EACAo1C,EACA1zC,EACA0zE,EACAvrE,EACAgsE,EACAC,EACA1zB,EACAqzB,EACAC,GAGI/zE,GAAOm/B,EAAAA,GAAAA,KAEPq3C,EACJ,0BAAK74C,WAAWqE,EAAAA,GAAAA,GAvDS,iBAuD4B,wBAAyBlH,IAAI,mBAChF,+BAAO96B,EAAK,oBAIVy2E,EAAwBnlB,EAAwB,EAAIkiB,EAAc3yE,QAAO,CAACC,EAAK41E,IAC5E51E,GAAM61E,EAAAA,EAAAA,IAAQD,EAAa9xB,cAAcpiD,QAC/C,GACH,IAAIo0E,EAAkB,EAEtB,MAAM/xB,EAAa2uB,EAAcnzE,KAAI,CACnCw2E,EACAC,EACAC,KAEA,MAAMnyB,EAAeiyB,EAAUjyB,aAAavkD,KAAI,CAC9C22E,EACAC,EACAC,KACG,MACH,GACyB,IAAvBF,EAAYx0E,SACR2hD,GAAQ6yB,EAAY,MACrB9xB,EAAAA,EAAAA,IAAgB8xB,EAAY,MAC5B,UAACA,EAAY,GAAG1vE,QAAQwC,cAAxB,QAAC,EAA+BsyB,WACnC,CACA,MAAM77B,EAAUy2E,EAAY,GACtB5lB,EACJ6lB,IAAqBC,EAAkB10E,OAAS,GAC7Cs0E,IAAmBC,EAAgBv0E,OAAS,EAGjD,OAAO20E,EAAAA,EAAAA,IAAQ,CACb52E,EAAQpC,KAAOy1E,EAA6Bp1D,SAAWg4D,EACvD,mBAAC,GAAD,CACE17C,IAAKv6B,EAAQpC,GACboC,QAASA,EACT0wD,oBAAqBojB,EACrBljB,gBAAiBslB,IAA0BG,EAC3CxlB,aAAcA,MAKpB,IAAIgmB,EAEJ,OAAOT,EAAAA,EAAAA,IAAQK,EAAY32E,KAAI,CAC7B+jD,EACAizB,KAEA,MAAM92E,EAAU4jD,GAAQC,GAAkBA,EAAeU,YAAcV,EACjEnL,EAAQkL,GAAQC,GAAkBA,OAAiB9mD,EACnD0oD,GAAQC,EAAAA,EAAAA,IAAa1lD,GACrB+2E,EAAiBnzB,GAAQC,GACzBY,EAAcgyB,EAAYK,EAAe,GAE3C92E,EAAQ0S,iBAAmB0gE,EAAYn1D,WAAYwzC,EAAAA,EAAAA,IAAiBzxD,EAAQ0S,mBAC9E0gE,EAAYn1D,SAAUwzC,EAAAA,EAAAA,IAAiBzxD,EAAQpC,KAGjD,MAAMo5E,GAAmBD,GAAkB/2E,EAAQ4D,UAAY5D,EAAQ4D,eAAY7G,EAC7Ek6E,EAAsBxyB,IAAgBb,GAAQa,GAAeA,EAAY7gD,eAAY7G,EAErFiC,EAAW,CACfytE,eAAiC,IAAjBqK,EAChBpK,cAAeoK,IAAiBL,EAAYx0E,OAAS,EACrD0qE,uBAAwBprE,QAAQy1E,GAAmBA,IAAoBH,GACvE9M,sBAAuBxoE,QAAQy1E,GAAmBA,IAAoBC,GACtEpmB,aACEimB,IAAiBL,EAAYx0E,OAAS,GACnCy0E,IAAqBC,EAAkB10E,OAAS,GAChDs0E,IAAmBC,EAAgBv0E,OAAS,GAInD40E,EAAyBG,EAEzB,MAAME,GAAaC,EAAAA,EAAAA,IAAqBn3E,GAIlCu6B,EAAe,cAATz8B,EAAuBo5E,EAAc,GAAEl3E,EAAQ4G,QAAQswE,IAEnE,OAAON,EAAAA,EAAAA,IAAQ,CACb52E,EAAQpC,KAAOy1E,EAA6Bp1D,SAAWg4D,EACvD,mBAAC,GAAD,CACE17C,IAAKA,EACLv6B,QAASA,EACTosE,6BAA8B0H,EAC9BzH,4BAA6BA,EAC7BC,uCAAwCA,EACxC5zB,MAAOA,EACP8M,UAAWA,EACXskB,WAAY9qE,EAAS0tE,eAAiByG,IAAc1tB,KAAWzlD,EAAQpC,KAAO6sE,GAC9EZ,eAAgB7qE,EAASytE,gBAAkB0G,IAAc1tB,EACzD8mB,mBAAoBA,EACpB5vE,SAAUA,EACVgH,gBAAiB7F,EACjB0uE,YAA8B,IAAlBiH,EACZ7iB,gBAAiBslB,IAA0BG,EAC3C5J,eAAgBztE,EAASytE,eACzBC,cAAe1tE,EAAS0tE,cACxBC,uBAAwB3tE,EAAS2tE,uBACjC5C,sBAAuB/qE,EAAS+qE,sBAChClZ,aAAc7xD,EAAS6xD,eAEzB7wD,EAAQpC,KAAO6sE,GACb,0BAAKrtC,UAAU,uBAAuB7C,IAAI,sBACxC,+BAAO96B,EAAK,gCAOtB,OACE,0BACE29B,UAAU,qBACV7C,IAAK+7C,EAAUnyB,SACf9V,YAAaigB,GAAAA,EACb8oB,eAAa,GAEb,0BACEh6C,WAAWqE,EAAAA,GAAAA,GAAe,eAAgBiyC,GAAc,eACxDn5C,IAAI,cACJ8T,YAAaigB,GAAAA,EACb3vB,QAAU+0C,OAA6E32E,EAAhE,IAAM82E,EAAoB,CAAEjoE,WAAY0qE,EAAUnyB,YAEzE,2BAAMtlB,IAAI,QACP60C,GAAc4C,EAAUpyB,eAAiBmzB,EAAAA,IACxC53E,EAAK,+BAENi0E,GAAc4C,EAAUpyB,eAAiBmzB,EAAAA,IACxC53E,EAAK,sBAAsB63E,EAAAA,EAAAA,IAAgB73E,EAAM62E,EAAUnyB,cAAUpnD,GAAW,KAEhF22E,IAAc4D,EAAAA,EAAAA,IAAgB73E,EAAM62E,EAAUnyB,aAGnDiyB,EAAAA,EAAAA,IAAQ/xB,OAKf,OACE,0BAAKjnB,UAAU,qBAAqBg6C,eAAa,GAC/C,0BAAKjwC,IAAKstC,EAAqBl6C,IAAI,oBAAoB6C,UAAU,uBAChEg5C,EAAAA,EAAAA,IAAQ9xB,GACR4uB,GAAoB,mBAAC,GAAD,CAAkB34C,IAAK79B,EAAQA,OAAQA,EAAQw2C,aAAcA,IAClF,0BACE/L,IAAKutC,EACLn6C,IAAI,mBACJ6C,UAAU,qBAEZ,0BACE+J,IAAKwtC,EACLp6C,IAAI,cACJ6C,UAAU,oB,eE1OlB,MAoEA,IAAeN,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM,SAAET,GAAajM,EAAOiM,SAASoP,SAC/By/D,GAAWC,EAAAA,EAAAA,IAAkBruE,IAAUquE,EAAAA,EAAAA,IAAkB/6E,EAAOsX,eAChE1J,EAAU3B,MAAAA,GAAAA,EAAUzG,OAASyG,EAAS6uE,EAAW7uE,EAASzG,aAAUlF,EACpEoF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQ0M,GAChC,OAAKhH,EAIE,CACLkI,QAAAA,EACAotE,oBAAqBt1E,EAAKE,aAAeF,EAAKE,YAAYzE,KAAOuE,EAAKoS,uBAClEpS,EAAKE,YAAYzE,QACjBb,EACJi+B,gBAAiBv+B,EAAOu+B,iBARjB,KAPOqE,EAlE+B,IAI7C,IAJ8C,QAClDh1B,EADkD,gBAElD2wB,EAFkD,oBAGlDy8C,GACI,EACJ,MAAM,qBACJC,EADI,YAEJroE,EAFI,oBAGJ8oB,IACEzb,EAAAA,EAAAA,MAEEjd,GAAOm/B,EAAAA,GAAAA,KAEPsU,GAAelO,EAAAA,EAAAA,IAAuB,OAE1C0tC,QAAShiB,IACPiiB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1/B,EACT2/B,WApB6B,OAsB/Bx2C,EAAAA,EAAAA,KAAU,KACJhyB,GAA+B,yBAApB2wB,GAIf08C,MACC,CAAC18C,EAAiB08C,EAAsBrtE,KAE3CgyB,EAAAA,EAAAA,KAAU,KACgB,yBAApBrB,GAA8Cy8C,GAChDt/C,EAAoB,CAAE9wB,MAAOowE,MAE9B,CAACz8C,EAAiB7C,EAAqBs/C,IAE1C,MAAME,GAAsBh2C,EAAAA,EAAAA,KAAai2C,IACvCA,EAAkB,IACbA,EACHhiD,qBAAqB,GAEvBvmB,EAAY,CAAEhF,QAASutE,MACtB,CAACvoE,IAEJ,OACE,0BAAK+tB,UAAU,kBAAkB+J,IAAK+L,GACpC,0BAAK9V,UAAU,WACb,wBAAGA,UAAU,QAAQyB,IAAI,QAAQp/B,EAAK,kCACtC,wBAAG29B,UAAU,cAAcyB,IAAI,QAAQp/B,EAAK,8BAE5C,0BAAK29B,UAAU,WACZ/yB,GACC,mBAACwtE,GAAA,EAAD,CACExtE,QAASA,EACTs0B,QAASg5C,EACTvzC,SAAU/5B,EACVqmD,oBAAqBA,EACrBtxB,KAAM,IACNhC,UAAU,QACV06C,eAAa,WCR3B,IAAeh7C,EAAAA,EAAAA,KA9DkB,IAE3B,IAF4B,eAChCgS,EADgC,KAChBhxC,EADgB,uBACVi6E,GAClB,EACJ,MAAMt4E,GAAOm/B,EAAAA,GAAAA,KAEb,MAAa,cAAT9gC,EAiBN,SAAyB2B,GACvB,OACE,0BAAK29B,UAAU,SAAQ,+BAAO39B,EAAK,wCAlB5Bu4E,CAAgBv4E,GAGrBqvC,EAmBN,SAA6BrvC,GAC3B,OACE,0BAAK29B,UAAU,cACb,0BAAKA,UAAU,WACb,wBAAGA,UAAU,6BACb,yBAAIA,UAAU,SAAS39B,EAAK,wCAC5B,yBAAI29B,UAAU,eACZ,6BAAK39B,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,kDA5BTw4E,CAAoBx4E,GAGzBs4E,EAgCN,SAAqBt4E,GACnB,OACE,0BAAK29B,UAAU,cACb,0BAAKA,UAAU,UAAUyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GACjD,yBAAIqgC,UAAU,SAAS39B,EAAK,yBAC5B,wBAAG29B,UAAU,eAAe39B,EAAK,4BACjC,yBAAI29B,UAAU,mBACZ,6BAAK39B,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,4BAzCTy4E,CAAYz4E,GAInB,0BAAK29B,UAAU,SAAQ,+BAAO39B,EAAK,mBCyEjC04E,IAAwBzrE,EAAAA,EAAAA,KAAUC,GAAOA,KANvB,KAM8C,GAuctE,IAAemwB,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAoD,IAA3C,OAAEC,EAAF,SAAUC,EAAV,KAAoBmB,GAAuB,EAClD,MAAMqE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAChC,IAAKyF,EACH,MAAO,GAGT,MAAM3C,GAAa44E,EAAAA,EAAAA,IAAwB37E,EAAQC,EAAQC,EAAUmB,GAC/D06B,EAAwB,cAAT16B,GACjBk6B,EAAAA,EAAAA,IAAwBv7B,EAAQC,IAChCkD,EAAAA,EAAAA,IAAmBnD,EAAQC,GACzB+tE,GAAqBv6D,EAAAA,EAAAA,IAAyBzT,EAAQC,EAAQC,GAEpE,GACEA,IAAakB,EAAAA,MACR26B,GAAgBiyC,GAAsBjyC,EAAaiyC,IAExD,MAAO,GAGT,MAAM,aAAEr6D,EAAF,kBAAgBioE,EAAhB,YAAmCh2E,GAAgBF,EACnDm2E,GAAa/nE,EAAAA,EAAAA,IAAuB9T,EAAQC,GAE5C67E,EACJ57E,IAAakB,EAAAA,KACT2B,IAAe2C,EAAK+R,cAAgBokE,GAAcj2E,IAAgBA,EAAYuB,UAG9E40E,GAAU3xD,EAAAA,EAAAA,IAAcpqB,EAAQC,GACtC,IAAI+7E,EASJ,OARInpC,EAAAA,EAAAA,IAA0B7yC,EAAQC,KAElC+7E,EADED,EAAQriE,SACOqiE,EAAQriE,SAASsiE,gBAAkB,aAEnC,wBAId,CACLC,cAAc,EACdtoE,aAAAA,EACAioE,kBAAAA,EACAM,eAAehqC,EAAAA,EAAAA,IAAcxsC,GAC7By2E,aAAaC,EAAAA,EAAAA,IAAY12E,GACzB+tC,UAAW/tC,EAAK+tC,UAChBpB,gBAAgBC,EAAAA,EAAAA,IAAqBtyC,EAAQC,GAC7CwtE,eAAeC,EAAAA,EAAAA,IAAqBztE,GACpC01E,MAAO7wE,QAAQi3E,GACfh5E,WAAAA,EACAg5B,aAAAA,EACAjC,eAAetiB,EAAAA,EAAAA,IAAoBxX,EAAQC,EAAQC,GACnDu2E,iBAA2B,WAATp1E,IAAqB6D,EAAAA,EAAAA,IAAuBlF,EAAQC,EAAQC,GAC9Em8E,sBAAsBC,EAAAA,EAAAA,IAAqBt8E,EAAQC,EAAQC,GAC3D27E,WAAAA,EACA94B,oBAAoB5Q,EAAAA,EAAAA,IAAqBnyC,GACzCg8E,eAAAA,EACAhO,mBAAAA,EACAgJ,cAAetxE,EAAKgU,UAAa,iBAAkBhU,EAAKgU,SACpD5U,QAAQY,EAAKgU,SAAS6iE,mBACtBj8E,EACJmkB,aAAczkB,EAAOykB,gBACjBq3D,GAAiC,CAAEl2E,YAAAA,MA7DzBg9B,EArc2B,IA+BzC,oBA/B0C,OAC9C3iC,EAD8C,SAE9CC,EAF8C,KAG9CmB,EAH8C,SAI9Cm7E,EAJ8C,YAK9CtF,EAL8C,cAM9CC,EAN8C,aAO9C8E,EAP8C,cAQ9CC,EAR8C,YAS9CC,EAT8C,QAU9CM,EAV8C,QAW9Ch5B,EAX8C,eAY9CpR,EAZ8C,cAa9Co7B,EAb8C,UAc9Ch6B,EAd8C,MAe9CkiC,EAf8C,WAgB9C5yE,EAhB8C,aAiB9Cg5B,EAjB8C,cAkB9CjC,EAlB8C,iBAmB9C28C,EAnB8C,qBAoB9C4F,EApB8C,aAqB9C1oE,EArB8C,kBAsB9CioE,EAtB8C,WAuB9CC,EAvB8C,mBAwB9C94B,EAxB8C,YAyB9Cn9C,EAzB8C,eA0B9Co2E,EA1B8C,mBA2B9ChO,EA3B8C,cA4B9CgJ,EA5B8C,aA6B9CvyD,EA7B8C,gBA8B9Ci4D,GACI,EACJ,MAAM,qBACJz0E,EADI,gBACkB00E,EADlB,sBACmCC,EADnC,qBAC0DC,EAD1D,kBACgFC,IAClF78D,EAAAA,EAAAA,MAGEw2B,GAAelO,EAAAA,EAAAA,IAAuB,MAItCw0C,GAAkBx0C,EAAAA,EAAAA,IAAyB,WAATlnC,IAAqB27E,EAAAA,EAAAA,KAAmBp2E,EAAAA,EAAAA,MAAa3G,EAAQC,IAAc,GAC7Gy2E,GAAcpuC,EAAAA,EAAAA,MACd00C,IAAe10C,EAAAA,EAAAA,MACf20C,IAAsB30C,EAAAA,EAAAA,MACtBsuC,IAAuBtuC,EAAAA,EAAAA,MACvBquC,IAA+BruC,EAAAA,EAAAA,MAC/B40C,IAAoB50C,EAAAA,EAAAA,MACpB60C,IAA4B70C,EAAAA,EAAAA,KAAO,GACnC80C,IAA6B90C,EAAAA,EAAAA,IAAOzjC,QAAQc,KAE3C+kE,GAAiB2S,KAAsBl8C,EAAAA,EAAAA,MAExCje,GAAoBre,QAAQ/B,IAElCu2E,EAAAA,GAAAA,IAAY,KAENn2D,KACFvP,EAAAA,EAAAA,KAAU,KACRypE,GAA2B77D,SAAU,OAGxC,CAAC2B,MAGJm2D,EAAAA,GAAAA,IAAY,KACVzC,GAAqBr1D,QAAUsY,IAC9B,CAACA,KAEJw/C,EAAAA,GAAAA,IAAY,KACN4C,GAAiBz4B,GAAWh/B,GAC9Bm4D,EAAsB,CAAE38E,OAAAA,MAEzB,CAACA,EAAQwjD,EAASy4B,EAAez3D,KAGpC60D,EAAAA,GAAAA,IAAY,KACNn2D,KACFyzD,GAA6Bp1D,QAAUq1D,GAAqBr1D,WAE7D,CAAC2B,MAEJm2D,EAAAA,GAAAA,IAAY,KACV6D,GAAkB37D,QAAUq6D,IAC3B,CAACA,IC3LiCiB,CAAAA,KACrCl9C,EAAAA,EAAAA,KAAU,KACR,SAAS29C,EAAW5vE,GAClB,IAAMkiC,EAAAA,IAAaliC,EAAEmiC,UAAcD,EAAAA,IAAaliC,EAAE+7B,UAAoC,OAAvBqG,EAAAA,GAAAA,GAAgBpiC,GAAY,CACzF,MAAM5K,GAAay6E,EAAAA,GAAAA,KAEfz6E,GAAcA,EAAWyC,OAAS,IACpCmI,EAAEyyB,iBACF08C,EAAkB,CAAE/5E,WAAAA,MAO1B,OAFAg2B,SAASyI,iBAAiB,UAAW+7C,GAAY,GAE1C,KACLxkD,SAAS0I,oBAAoB,UAAW87C,GAAY,MAErD,CAACT,KD2KJW,CAA8BX,GAE9B,MAAMtG,IAAgBpyC,EAAAA,EAAAA,KAAQ,KAC5B,IAAKrhC,IAAeg5B,EAClB,OAGF,MAAMr3B,GAAcspE,GAAwBjrE,EAAW,IAAMs5E,IAAyBt5E,EAAW,GAE7FA,EADA,CAACirE,KAAuBjrE,GAG5B,IAAK2B,EAAYc,OACf,OAGF,MAAMk4E,EAAiBh5E,EAAYrB,KAAKlC,GAAO46B,EAAa56B,KAAKmC,OAAOwB,SACxE,OAAOuiD,IAAcs2B,EAAAA,EAAAA,IAAQD,EAAgB,CAAC,OAAQ,OAAQ9G,GAA6Bp1D,WAC1F,CAACze,EAAYg5B,EAAcsgD,EAAsBrO,KAEpDpG,EAAAA,GAAAA,IAAY,KACV,IAAK7kE,IAAeg5B,EAClB,OAEF,MAAMx0B,EAAMxE,EAAWO,QAAQsU,IAAD,uBAAOmkB,EAAankB,UAApB,aAAO,EAAiBsb,aAEjD3rB,EAAI/B,QAETq3E,EAAqB,CAAE58E,OAAAA,EAAQsH,IAAAA,MA7HQ,MAgIzC,MAAMq2E,IAAiBx5C,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAAT/iC,EAIJ,OAAO4O,EAAAA,EAAAA,KAAS,IAAMhI,EAAqB,CAAED,UAAWuI,EAAAA,GAAAA,UAA6B,KAAM,GAAM,KAEhG,CAACtI,EAAsBlF,KAEpB,WAAE86E,GAAF,kBAAcC,IE/NP,WAGb,MAAOD,EAAYE,IAAkB3wC,EAAAA,GAAAA,IAAQ,GAEvC4wC,GAAeC,EAAAA,GAAAA,GATN,KAS4B,GA4B3C,MAAO,CACLJ,WAAAA,EACAC,mBA5BwB54C,EAAAA,EAAAA,KAAY,CAACwtB,EAA2B8pB,KAChEuB,IAEKhlD,SAASpJ,KAAKihB,UAAUuhB,SAAS,2BACpC8K,EAAAA,EAAAA,KAAQ,KACNlkC,SAASpJ,KAAKihB,UAAUU,IAAI,4BAIhC0sC,GAAa,MACX/gB,EAAAA,EAAAA,KAAQ,KACN,MAAMihB,EAAenlD,SAASgH,cAAc,UACxCm+C,GACFA,EAAattC,UAAUC,OAAO,SAGhC,MAAMstC,EAgBd,SAAuBzrB,EAAwB8pB,GAC7C,MAAM4B,EAAc1rB,EAAU2rB,iBAAiC,gBACzDC,EAAe5rB,EAAU8lB,UAE/B,OAAO1jD,MAAMtiB,KAAK4rE,GAAat1E,MAAMy1E,IACnC,MAAM,UAAEC,EAAF,aAAalG,GAAiBiG,EAC9BE,EAAMD,EAAYF,EACxB,OAAQhG,GAAgBmG,GAAOA,IAAQjC,EAhDb,GADX,OA0BSkC,CAAchsB,EAAW8pB,GACzC2B,GACFA,EAAYvtC,UAAUU,IAAI,SAG5BvY,SAASpJ,KAAKihB,UAAUC,OAAO,iCAGlC,CAACktC,EAAgBC,KFgMsBW,GAEpC7H,IAAiBvuC,EAAAA,EAAAA,MACjBwuC,IAAyBxuC,EAAAA,EAAAA,MAEzBq2C,IAAe15C,EAAAA,EAAAA,KAAY,KAC/B,GAAIk4C,GAA0B57D,QAE5B,YADA47D,GAA0B57D,SAAU,GAItCs1D,GAAet1D,SAAU,EAEzB,MAAMkxC,EAAYjc,EAAaj1B,QAE1B27D,GAAkB37D,SACrBs8D,GAAkBprB,EAAW8pB,GAG/Bd,IAAsB,KACpB5E,GAAet1D,SAAU,GAEzBy7C,EAAAA,EAAAA,KAAQ,KACDvK,EAAUmsB,gBAIf9B,EAAgBv7D,QAAUkxC,EAAU6lB,aAAe7lB,EAAU8lB,UAEhD,WAATn3E,GACFs7E,EAAgB,CAAE18E,OAAAA,EAAQC,SAAAA,EAAUoE,aAAcy4E,EAAgBv7D,mBAIvE,CAACs8D,GAAmBtB,EAAUn7E,EAAMs7E,EAAiB18E,EAAQC,KAGhE0/B,EAAAA,EAAAA,KAAU,KACR,KAAM,mBAAoBl5B,QACxB,OAGF,MAAMo4E,EAAW,IAAIC,gBAAe,IAAa,IAAXlH,GAAW,EAEzCA,EAAM3lB,OAA0B8sB,cAItC1B,GAAmBzF,EAAMoH,YAAY1oC,WAKvC,OAFAuoC,EAAS7I,QAAQx/B,EAAaj1B,SAEvB,KACLs9D,EAASI,gBAEV,IAGH,MAAQ3oC,OAAQ4oC,IAAiB96B,MAEjCzkB,EAAAA,EAAAA,KAAU,KACR6W,EAAaj1B,QAASs2D,QAAQsH,aAAeC,OAAO5oC,EAAaj1B,QAAS82D,gBACzE,CAAC6G,GAAc1C,KAGlB78C,EAAAA,EAAAA,KAAU,KACR,IAAKg+C,KAAmB3B,GAAgBtoE,GAAgBkoE,EACtD,OAKF,GAD2B94E,GAAcA,EAAWA,EAAWyC,OAAS,IAAMozE,EAAAA,GAE5E,OAGF,MAAMlmB,EAAYjc,EAAaj1B,UAE1Bze,GACHA,EAAWyC,OAASiL,EAAAA,GAAqB,GACrCiiD,EAAU9a,kBAAqC0nC,cAAgB5sB,EAAU4lB,eAE7EsF,OAED,CAAC3B,EAAcl5E,EAAY66E,GAAgB/B,EAAYloE,KAG1D2lE,EAAAA,GAAAA,IAAY,KACV,IAAKv2E,IAAem6E,GAAoB17D,QACtC,OAGF,MAAM+9D,EAAwBrC,GAAoB17D,QAC/Cle,QAAQisD,GAAYxsD,EAAWgF,SAAStC,OAAO8pD,EAAQuoB,QAAQvzE,cAI5D8wC,EAASkqC,EAAsB,IAAMA,EAAsB,GAC5DlqC,IAILshC,EAAYn1D,QAAU6zB,EAAOl0C,GAC7B87E,GAAaz7D,QAAU6zB,EAAOd,wBAAwBkqC,OAErD,CAAC17E,EAAY0zE,EAAkB9L,GAAiB6R,KAGnDgD,EAAAA,GAAAA,IAA4B,IAEtB,IADJC,EAAgBC,EAAsBC,GAClC,EACJ,MAAMjtB,EAAYjc,EAAaj1B,QAC/B07D,GAAoB17D,QAAUsT,MAAMtiB,KAAKkgD,EAAU2rB,iBAAiC,uBAEpF,MAAMuB,EACJ78E,GAAc08E,GAAkB18E,EAAWA,EAAWyC,OAAS,KAAOi6E,EAAeA,EAAej6E,OAAS,GAEzGq6E,GACJ98E,MAAAA,OAAA,EAAAA,EAAa,OAAO08E,MAAAA,OAApB,EAAoBA,EAAiB,MAAM18E,MAAAA,OAAA,EAAAA,EAAYyC,UAAYiL,EAAAA,GAAqB,EAAI,EAExFqvE,EAAkBF,IAA0BC,EAC5CE,EAAoBh9E,GAAco6E,GAAkB37D,UAAYze,EAAWA,EAAWyC,OAAS,GAI/Fw6E,EACJvJ,GACGqJ,GACC/8E,GAAcA,EAAWyC,OAASiL,EAAAA,GAAqB,IACvDiiD,EAAUmsB,cAAejuC,UAAUuhB,SAAS,0BAC5CO,EAAU9a,kBAAsC0nC,cAAyC,EAAzB5sB,EAAU4lB,aAG5E0H,IACFttB,EAAUmsB,cAAejuC,UAAUU,IAAI,yBAEvC3qC,YAAW,KACL+rD,EAAUmsB,eACZnsB,EAAUmsB,cAAcjuC,UAAUC,OAAO,2BA/QhB,MAoR/B,MAAM,UAAE2nC,EAAF,aAAaD,EAAb,aAA2BD,GAAiB5lB,EAC5CpuD,EAAey4E,EAAgBv7D,QAC/By+D,EAAkB/C,GAAoB17D,QAAQ07D,GAAoB17D,QAAQhc,OAAS,GAEzF,IAAI06E,EAAe57E,GAAgBq7E,GAAuBrH,GACtDwH,IAKFI,GADuBD,EAAkBA,EAAgB3H,aAAe,GAG1E,MAAMI,EAAajC,GAAoBiJ,GAAwBQ,GApS1C,GAsSrB,IAAIC,EAEJ,GAAIL,GAAmBpH,IAAeqH,IAChCE,IACFhjB,EAAAA,EAAAA,KAAQ,MACN7M,EAAAA,GAAAA,GACEsC,EACAutB,EACA,MAzSgB,OA+StBE,EAAe5H,EAAeD,EAC9ByE,EAAgBv7D,QAAU3W,KAAKC,IAAID,KAAKomC,KAAKsnC,EAAe4H,GAAe7H,IAGtE0H,GACH,OASJ,MAAMI,OAAoC9/E,IAAxBq/E,GAAqCA,IAAwBhV,GACzEt1B,EAASshC,EAAYn1D,SAAWkxC,EAAU3yB,cAAe,IAAG42C,EAAYn1D,WACxEg4D,GACHnkC,GACEuhC,GAA6Bp1D,SAC7BkxC,EAAU3yB,cAA+B,mBAG9C,GAAI24C,GAAc0H,EAAW,CAC3B,IAAIC,EAAAA,GAAAA,KACF,OAGFF,EAAe5H,EAAeD,OACrBjjC,GACL0hC,GAAuBv1D,UACzBu1D,GAAuBv1D,SAAU,GACjC8+D,EAAAA,GAAAA,GAAoB5tB,IAItBytB,EAAe3H,GADMnjC,EAAOd,wBAAwBkqC,KACRxB,GAAaz7D,SAAW,KAEpE2+D,EADS3G,EACM3uE,KAAKymB,IAClBkoD,EAAcgF,WAAahC,EAxVG,GADX,IA0VnBjE,EAAej0E,GAGFi0E,EAAej0E,GAGhCi8E,EAAAA,GAAAA,GAAY7tB,EAAW7nD,KAAKomC,KAAKkvC,IAE5BhD,GAAkB37D,UACrB47D,GAA0B57D,SAAU,GACpCy7C,EAAAA,EAAAA,KAAQ,KACNmgB,GAA0B57D,SAAU,MAIxCu7D,EAAgBv7D,QAAU3W,KAAKC,IAAID,KAAKomC,KAAKsnC,EAAe4H,GAAe7H,KAO1E,CAACv1E,EAAY0zE,EAAkB9L,GAAiB6R,KAEnDgE,EAAAA,GAAAA,IAAsB,IAA8B,IAA5BC,GAA4B,OACnBngF,IAA3BmgF,IACFC,EAAAA,GAAAA,IA/WiC,IA+W4B99E,EAAAA,MAE9D,CAACmgD,IAEJ,MAAM//C,IAAOm/B,EAAAA,GAAAA,KAEPlb,GAAYniB,QAAQ7E,IAAUinB,EAAAA,EAAAA,IAASjnB,IACvCy2E,GAAY5xE,SAAUmiB,KAAci1D,GAAkB7pC,GAAkBo7B,GACxE1kB,GAAYjkD,SAAS4xE,IAAawF,GAClCyE,IAAuBz5D,EAAAA,EAAAA,IAASjnB,KAAYoyC,IAAmBsjC,KAG9Da,KAAkB5wE,GAAe7C,KAE7Bm6E,GAAoB17D,SAAkD,IAAvC07D,GAAoB17D,QAAQhc,SAEvC,KAAvBzC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,mBAAxDu2B,MAAAA,GAAA,UAAAA,EAAeh5B,EAAW,WAA1B,mBAA+BuH,QAAQwC,cAAvC,eAA+CzL,OACpC,mBAAvCuE,MAAAA,GAAA,UAAAA,EAAa0E,eAAb,mBAAsBwC,cAAtB,eAA8BzL,OAGhCi6E,GAAyBa,GAAe1oC,GAClB,KAAvB1wC,MAAAA,OAAA,EAAAA,EAAYyC,SAAwE,gBAAxDu2B,MAAAA,GAAA,UAAAA,EAAeh5B,EAAW,WAA1B,mBAA+BuH,QAAQwC,cAAvC,eAA+CzL,MAE1Es/B,IAAYqE,EAAAA,GAAAA,GAChB,4BACA+jB,IAAa,cACZ0zB,GAAW,cACH,WAATp7E,GAAqB,cACrBq7E,GAAmB,oBACnB35B,GAAsB,qBACtB86B,IAAc,YACbp6B,GAAW,gBAGd,OACE,0BACE/Y,IAAK+L,EACL9V,UAAWA,GACXigD,SAAUhC,GACVhtC,YAAaigB,GAAAA,GAEZl+C,EACC,0BAAKgtB,UAAU,SACb,+BACGi7C,EAAoBA,EAAkBn3E,KAAQ,sBAAoBy3E,EAAgB,UAAY,UAGjGF,EACF,0BAAKr7C,UAAU,SAAQ,gCAAO2e,EAAAA,GAAAA,GAAWt8C,GAAKg5E,GAAiB,CAAC,KAAM,QAAS,YAC7E2E,GACF,mBAAC,GAAD,CAAiBj0E,OAAQzM,KACvB8C,GAAgByzE,KAAiB8E,GAO/Bv4E,GAAcyzE,IAAkB5wE,EACpC,mBAAC,GAAD,CACE3F,OAAQA,EACR8C,WAAYA,GAAc,CAAC6C,EAAazE,IACxCq1E,cAAeA,IAAiBnvB,GAAc,CAACzhD,IAC/C6wE,iBAAkB3xE,QAAQ2xE,GAC1BvrE,SAAUpG,QAAQg1B,GAClB48C,UAAWA,GACX5G,mBAAoB7oD,GACpB8hC,UAAWA,GACXtS,aAAcA,EACdkgC,YAAaA,EACbC,6BAA8BA,GAC9BC,qBAAsBA,GACtB32E,SAAUA,EACVmB,KAAMA,EACNoiD,QAASA,EACTqzB,eAAgBA,GAChBC,uBAAwBA,GACxB/I,mBAAoBA,EACpBgJ,cAAeA,EACfC,aAAYT,IAAyB,cAATn1E,EAC5BizD,uBAAwBkiB,KAAkB6G,GAA2B77D,QACrE01D,YAAaA,EACbC,cAAeA,IAGjB,mBAACnsC,GAAA,EAAD,CAASzI,MAAM,QAAQs+C,gBAAgB,SAjCvC,mBAAC,GAAD,CACE5gF,OAAQA,EACRoB,KAAMA,EACNgxC,eAAgBA,EAChBipC,uBAAwBA,UGrblC,IAAej7C,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MAAMuB,GAAqBpB,EAAAA,EAAAA,IAAyBH,GACpD,IAAKuB,EACH,MAAO,GAGT,MAAM,OAAEtB,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9CmE,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAEhC,MAAO,CACLiH,gBAAAA,EACAuQ,YAAa/R,GAAQxF,IAAakB,EAAAA,IAAsC,WAApB8F,EAA+BxB,EAAK+R,iBAAcnX,KAZxFsiC,EA1DgC,IAM9C,IAN+C,QACnDsI,EADmD,QAEnDuxC,EAFmD,gBAGnDv1E,EAHmD,YAInDuQ,EAJmD,eAKnDqpE,GACI,EACJ,MAAM,eAAEC,IAAmB9gE,EAAAA,EAAAA,MAErBjd,GAAOm/B,EAAAA,GAAAA,KAEPgO,GAAa5H,EAAAA,EAAAA,IAAuB,MAEpCyW,GAAc9Z,EAAAA,EAAAA,KAAY,KAC9B,GAAKgG,EAIL,GAAwB,WAApBhkC,EACF65E,QACK,CACL,MAAM7wB,EAAoB/f,EAAW3uB,QAASq9D,cAAe9+C,cAA8B,gBACrFihD,EAAkB9wB,EAAkBmuB,iBAAiC,sBACrE4C,EAAqBD,EAAgBA,EAAgBx7E,OAAS,GACpE,IAAKy7E,EACH,QAGF7wB,EAAAA,GAAAA,GAAiBF,EAAmB+wB,EAAoB,MA9BzC,OAgChB,CAAC/1C,EAAShkC,EAAiB65E,IAExBv1C,GAAexG,EAAAA,GAAAA,GACnB,mBACAkG,GAAW,YACVuxC,GAAW,cACZqE,GAAkB,oBAGpB,OACE,0BAAKp2C,IAAKyF,EAAYxP,UAAW6K,GAC/B,0BAAK7K,UAAU,0BACb,mBAAC+B,GAAA,EAAD,CACEH,MAAM,YACN/xB,OAAK,EACL0xB,QAAS8c,EACTja,UAAW/hC,EAAK,qBAEhB,wBAAG29B,UAAU,qBAEd77B,QAAQ2S,IACP,0BAAKkpB,UAAU,iBAAgBC,EAAAA,GAAAA,IAAqBnpB,U,eCnE9D,MAAMypE,GAAqB,KACrBC,GAAiB,YAERhxE,eAAeixE,GAC5BC,EAAkBjnC,EAAYknC,EAAkBrpE,GAEhD,MAAMghB,EAAU2gB,IAAIC,gBAAgBO,IAC5B/4C,KAAMkgF,EAAR,KAAkB5+C,GAASyX,EACjC,IAAIonC,EACA5lC,EACAxiB,EAEJ,GAAIqoD,EAAAA,GAAAA,IAAkCF,GACpC,GAAID,EAAS,CACX,MAAMxnC,QAAY4nC,EAAAA,GAAAA,IAAazoD,IACzB,MAAE7H,EAAF,OAASmlB,GAAWuD,EAE1B,GAAI1oB,EAAQ8vD,IAAsB3qC,EAAS2qC,IAAmC,eAAbK,EAA2B,CAC1F,MAAMI,QAAmBpoC,GAAWtgB,EAASioD,GAAqBr2E,KAAKC,IAAIsmB,EAAOmlB,GAAS,cAG3F,OAFAqD,IAAIW,gBAAgBthB,GAEbmoD,GAAgBC,QADDO,EAAAA,GAAAA,IAAUD,IACU,EAAM1pE,GAGjC,eAAbspE,IACFF,EAAWA,EAAShyD,QAAQ8xD,GAAgB,SAG9CK,EAAQ,CAAEpwD,MAAAA,EAAOmlB,OAAAA,QAEjBnd,EAAiBH,OAEd,GAAI4oD,EAAAA,GAAAA,IAAkCN,GAAW,CACtD,MAAQO,WAAY1wD,EAAO2wD,YAAaxrC,EAAlC,SAA0C6nB,SAAmB4jB,EAAAA,GAAAA,IAAa/oD,GAChFuoD,EAAQ,CAAEpwD,MAAAA,EAAOmlB,OAAAA,EAAQ6nB,SAAAA,GAEzBhlC,QAAuB6oD,EAAAA,GAAAA,IAAqBhpD,QACvC,GAAIipD,EAAAA,GAAAA,IAAkCX,GAAW,CACtD,MAAM,SACJnjB,EADI,MACM7gD,EADN,UACay+B,EADb,SACwBmmC,SC/C3BhyE,eAAkClB,GACvC,MAAM,aAAEmzE,EAAF,YAAgBC,SAAsB,mCACtCC,QAAiBF,EAAanzE,IAC5BszE,QAAQ,MAAEhlE,EAAF,OAASw+B,EAAT,QAAiBymC,GAAWC,QAAQ,SAAErkB,IAAekkB,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLjlE,MAAAA,EACAy+B,UAAWD,EACXqiB,SAAAA,EACA+jB,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMh0E,KAAKnJ,SAAS,iBAAcjF,GD0C9EqiF,CAAmB1pD,GAC7B2iB,EAAQ,CACNwiB,SAAUA,GAAY,EACtB7gD,MAAAA,EACAy+B,UAAAA,GAEF5iB,EAAiB+oD,EAGnB,MAAO,CACLlpD,QAAAA,EACAooD,SAAAA,EACAE,SAAAA,EACA5+C,KAAAA,EACA6+C,MAAAA,EACA5lC,MAAAA,EACAxiB,eAAAA,KACGnhB,GExEQ,SAAS2qE,GAAsBC,GAC5C,MAAMC,EAAYp8E,OAAOq8E,eAEzB,GAAID,MAAAA,GAAAA,EAAWE,YAAcF,EAAUG,WAAY,CACjD,MAAMC,EAAQJ,EAAUE,WAAW,GACnCE,EAAMC,iBAEN,MAAMC,EAAWF,EAAMG,yBAAyBR,GAC1CS,EAAmBF,EAASG,UAClCL,EAAMM,WAAWJ,GACbE,GACFJ,EAAMO,cAAcH,GACpBJ,EAAMQ,YAAYJ,IAElBJ,EAAMS,UAAS,GAEjBb,EAAUc,kBACVd,EAAUe,SAASX,I,eCfvB,IAAIY,GASW,SAASC,GAA8BC,GACpDF,GAAWz7D,QACX27D,EAAQ37D,QATN9U,EAAAA,KACFuwE,GAAa/qD,SAASiiB,cAAc,SACpC8oC,GAAWlzC,UAAUU,IAAI,kCACzBvY,SAASpJ,KAAKkgC,YAAYi0B,K,+CCH5B,MAEMG,GAAmB,CAAEC,YAFP,IAAItqC,IAAI,aAAyDxxB,KAE7C+7D,aAAa,GAC/CC,GAAc,CAAE/iF,KAAM,aAI5B,IAAIgjF,GACAC,GACAC,GAEGp0E,eAAeq0E,KAOpB,OANKH,KACHA,GAAsB,mCACtBC,UAAsBD,IAAqBI,QAC3CF,GAAgB,IAAID,GAAaL,KAG5BI,GAGFl0E,eAAeu0E,GAAMC,SA6C5Bx0E,uBACQq0E,WACAD,GAAcG,QA9CdE,GAEN,MAAMlzB,EAAY97C,KAAKC,MACvB,IAAIgvE,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BR,GAAcS,gBAAmBC,IAC/BH,EAAO7gF,KAAKghF,IAGd,MAAMC,EAsCR,SAA6BC,EAAyBj1E,GACpD,MAAMk1E,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAtEM,GAuEfL,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEM1/E,EAFM0/E,EAAUhiF,QAAO,CAACC,EAAK0d,IAAY1d,EAAM0d,GAAS,GAC1CmkE,EACE,IAzDoCx/E,CAAAA,IAC1D4+E,EAAS9gF,KAAc,IAATkC,GACdw+E,EAAiBx+E,IAyDjB+J,CAAG/J,EAvFY,GAuFU,EAAIA,GAE7B+/E,sBAAsBF,GAGxBA,GAEO,KACLD,GAAc,GAnEQI,CAAoB5B,IAK5C,MAAO,CACLpmC,KAAM,IAAM,IAAInE,SAAgB,CAACC,EAASmsC,KACxC7B,GAAc8B,OAAS,KACrBpsC,EAAQ,CACNG,KAAM,IAAIT,KAAKmrC,EAAQV,IACvBhmB,SAAUvzD,KAAK2F,QAAQq0E,GAAYjvE,KAAKC,OAAS67C,GAAa,KAC9DqzB,SAAAA,KAGJR,GAAc+B,QAAUF,EAExB,MAAMG,EAAY17E,KAAKC,IAAI,EAAG4mD,EAhDT,IAgD0C97C,KAAKC,OACpElP,YAAW,KACT49E,GAAcpmC,OACd+mC,MACCqB,MAELxrE,MAAO,KACL,MAAMwrE,EAAY17E,KAAKC,IAAI,EAAG4mD,EAvDT,IAuD0C97C,KAAKC,OACpElP,YAAW,KACT49E,GAAcxpE,QACd8pE,EAAWjvE,KAAKC,MAChBqvE,MACCqB,K,eC1DT,MAAMC,GAA2B,CAAC,YAAa,aAAc,aCS7D,IAAIjjE,GACAC,G,0BCVW,SAASijE,GACtBC,EAAqBC,EAAYC,GAEjC,MAAM5I,GAAeC,EAAAA,GAAAA,GAAY0I,GAAI,IAC9B3xE,EAAO6xE,IAAYzlD,EAAAA,EAAAA,OACnB0lD,EAAUtP,EAAQE,IAAYtqC,EAAAA,GAAAA,KAcrC,OAZA+vB,EAAAA,GAAAA,IAAuBqa,EAAQE,IAE/B4B,EAAAA,GAAAA,IAAY,KACNwN,GAIJ9I,GAAa,KACX6I,EAASH,UAEV,IAAIE,EAAcE,IAEd9xE,ECnBT,MACM+xE,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrB7mE,SAAU,GACV1f,MAAO,GACPwmF,aAAa,EACbC,gBAAiB,IAGbC,GAASruD,SAASiiB,cAAc,OCPtC,MAAMqsC,IAAeptE,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAC3Co3E,GAAa,mB,eCLnB,MAQA,IAAejnD,EAAAA,EAAAA,KARgCuK,IAC7C,MAAM,OAAEhhC,GAAWghC,EACb28C,GAAqBz8C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBnhC,GAGjF,OAAO29E,EAAqB,mBAACA,EAAuB38C,QAAYtqC,K,mNCMlE,IAAIknF,GACAC,IAAwB,EAE5B,MAuCA,IAAepnD,EAAAA,EAAAA,KAvC6B,IAAoC,IAAnC,WAAEqnD,KAAeC,GAAkB,EAC9E,MAAMr7C,GAAgB/D,EAAAA,EAAAA,KAAO,GAEvBqE,GAAmB1H,EAAAA,EAAAA,KAAY,KAInC,GAHAoH,EAAc9qB,SAAU,EAGpBimE,GAGF,OAFAA,IAAwB,OACxBC,IAIEF,KACF9/E,aAAa8/E,IACbA,QAAclnF,GAEhBknF,GAAc9gF,OAAOC,YAAW,KAC1B2lC,EAAc9qB,SAChBkmE,MAvBsB,OA0BzB,CAACA,IAEE76C,GAAmB3H,EAAAA,EAAAA,KAAY,KACnCoH,EAAc9qB,SAAU,IACvB,IAEH,OACE,mBAACkhB,GAAA,EAAD,MAEMilD,EAFN,CAGEn6C,aAAe/jC,EAAAA,QAAkCnJ,EAAnBssC,EAC9Ba,aAAehkC,EAAAA,QAAkCnJ,EAAnBusC,EAC9B3K,QAASwlD,Q,0BC7Bf,MAgGA,IAAernD,EAAAA,EAAAA,KAhGkB,IAE3B,IAF4B,gBAChCunD,EADgC,eACfC,EADe,eACCC,EADD,aACiBC,EADjB,aAC+BC,GAC3D,EACJ,MAAOC,EAAkBC,EAAgBC,IAAmB/6C,EAAAA,GAAAA,MACrDR,EAAkBC,EAAkBu7C,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,IAE/FvoD,EAAAA,EAAAA,KAAU,KACJqoD,GACFG,MAED,CAACH,EAAkBG,IAEtB,MAAME,GAAyBpjD,EAAAA,EAAAA,KAAY,KACrC+iD,EACFE,IAEAD,MAED,CAACD,EAAkBC,EAAgBC,IAEhCI,GAAmBrjD,EAAAA,EAAAA,KAAY,CAACv3B,EAAU2zE,KAC9C,MAAM,MAAEkH,GAAU76E,EAAEukD,OAEhBs2B,GAASA,EAAMhjF,OAAS,GAC1BuiF,EAAajzD,MAAMtiB,KAAKg2E,GAAQlH,KAEjC,CAACyG,IAEEU,GAAoBvjD,EAAAA,EAAAA,KAAY,MACpCwjD,EAAAA,GAAAA,GACE5zD,MAAMtiB,KAAKm2E,EAAAA,IAA4BtkF,KAAK,MAC3CsJ,GAAM46E,EAAiB56E,GAAG,OAE5B,CAAC46E,IAEEK,GAAuB1jD,EAAAA,EAAAA,KAAY,MACvCwjD,EAAAA,GAAAA,GAAsB,KAAM/6E,GAAM46E,EAAiB56E,GAAG,OACrD,CAAC46E,IAEEvlF,GAAOm/B,EAAAA,GAAAA,KAEb,GAAKylD,EAIL,OACE,0BAAKjnD,UAAU,cACb,mBAAC,GAAD,CACEx/B,GAAG,qBACHw/B,UAAWsnD,EAAmB,+BAAiC,qBAC/Dz3E,OAAK,EACL+xB,MAAM,cACNmlD,WAAYY,EACZvjD,UAAU,oBACV8jD,aAAa,uBACbC,UAAQ,GAER,wBAAGnoD,UAAU,iBAEf,mBAACiL,GAAA,EAAD,CACEzqC,GAAG,uBACHyI,OAAQq+E,EACRl8C,WAAS,EACTF,UAAU,QACVC,UAAU,SACVE,QAASm8C,EACTxnD,UAAU,yBACV8U,oBAAqB0yC,EACrB36C,aAAe/jC,EAAAA,QAAkCnJ,EAAnBssC,EAC9Ba,aAAehkC,EAAAA,QAAkCnJ,EAAnBusC,EAC9Bk8C,mBAAoBt/E,EAAAA,GACpBu/E,eAAe,uBAMbnB,GACA,mBAACthD,GAAA,EAAD,CAAU5F,UAAU,iBAAiByU,UAAQ,GAA7C,uDAEDyyC,GACC,sCACE,mBAACthD,GAAA,EAAD,CAAUC,KAAK,QAAQtE,QAASumD,GAC7BzlF,EAAK,gCAER,mBAACujC,GAAA,EAAD,CAAUC,KAAK,WAAWtE,QAAS0mD,GAAuB5lF,EAAK,oBAGlE8kF,GACC,mBAACvhD,GAAA,EAAD,CAAUC,KAAK,OAAOtE,QAAS8lD,GAAehlF,EAAK,cCpG7D,IAAeq9B,EAAAA,EAAAA,KARwBuK,IACrC,MAAM,OAAEhhC,GAAWghC,EACbq+C,GAAan+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAenhC,GAGjE,OAAOq/E,EAAa,mBAACA,EAAer+C,QAAYtqC,KCGlD,IAAe+/B,EAAAA,EAAAA,KAR8BuK,IAC3C,MAAM,OAAEhhC,GAAWghC,EACbs+C,GAAmBp+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBnhC,GAG7E,OAAOs/E,EAAmB,mBAACA,EAAqBt+C,QAAYtqC,KCG9D,IAAe+/B,EAAAA,EAAAA,KAR4BuK,IACzC,MAAM,OAAEhhC,GAAWghC,EACbu+C,GAAiBr+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBnhC,GAGzE,OAAOu/E,EAAiB,mBAACA,EAAmBv+C,QAAYtqC,K,eCL1D,MAQA,IAAe+/B,EAAAA,EAAAA,KAR4BuK,IACzC,MAAM,OAAEhhC,GAAWghC,EACbw+C,GAAiBt+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBnhC,GAGzE,OAAOw/E,EAAiB,mBAACA,EAAmBx+C,QAAYtqC,K,eCL1D,MAQA,IAAe+/B,EAAAA,EAAAA,KAR+BuK,IAC5C,MAAM,OAAEhhC,GAAWghC,EACby+C,GAAoBv+C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsBnhC,GAG/E,OAAOy/E,EAAoB,mBAACA,EAAsBz+C,QAAYtqC,KCuEhE,IAAe+/B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAuC,IAA9B,UAAEuE,GAA4B,EACrC,MAAM,OAAEtE,IAAWE,EAAAA,EAAAA,IAAyBH,IAAW,GACvD,OAAKC,EAIE,CAAEsD,SAAS6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQsE,IAH3C,KAJOq+B,EAvD+B,IAE7C,IAF8C,OAClDh5B,EADkD,QAC1CrG,EAD0C,QACjCyoC,GACb,EACJ,MAAM,qBAAE+8B,IAAyB9oD,EAAAA,EAAAA,OAE1B2sB,EAAkBC,IAAoBw7C,EAAAA,GAAAA,GAAez+E,EAAQoiC,IAC9D,oBAAEs9C,GAAwB/lF,GAAW,IACpCgmF,EAAWC,EAAeC,IAAmBr8C,EAAAA,GAAAA,IAAQ,GAEtD1B,GAAcxG,EAAAA,EAAAA,KAAY,KAC9BukD,IACAz9C,MACC,CAACA,EAASy9C,IAMb,IAJA7pD,EAAAA,EAAAA,KAAU,KACR4pD,MACC,CAACA,EAAejmF,MAAAA,OAAhB,EAAgBA,EAASmmF,kBAEvBnmF,GAAYA,EAAQmmF,gBAIzB,OACE,mBAAC99C,GAAA,EAAD,CACEhiC,OAAQA,GAAU2/E,EAClBx9C,UAAWu9C,EACXz9C,UAAU,QACVC,UAAU,SACVE,QAASN,EACT/K,UAAU,kBACV8U,oBAAqB/J,EACrB8B,aAAe/jC,EAAAA,QAAkCnJ,EAAnBssC,EAC9Ba,aAAehkC,EAAAA,QAAkCnJ,EAAnBusC,EAC9B88C,WAAS,GAET,0BAAKhpD,UAAU,WACZp9B,EAAQmmF,gBAAgBrmF,KAAKiqD,GAC5B,0BAAK3sB,UAAU,OACZ2sB,EAAIjqD,KAAKgmB,GACR,mBAACqZ,GAAA,EAAD,CACEoC,QAAM,EACNsQ,SAA0B,gBAAhB/rB,EAAOhoB,KAEjB6gC,QAAS,IAAM6mC,EAAqB,CAAExkE,UAAWhB,EAAQpC,GAAIkoB,OAAAA,KAE5DA,EAAO5kB,iB,0BC5BxB,MA6EA,IAAe47B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MAAM,OAAEC,EAAF,SAAUC,EAAUmB,KAAM6F,IAAoB/G,EAAAA,EAAAA,IAAyBH,IAAW,GACxF,IAAKC,IAAWC,IAAagH,EAC3B,MAAO,GAGT,MAAM,cACJoQ,EACAzV,iBAAiB,WAAEqG,EAAF,SAAcpG,EAAUiB,WAAY6mF,IACnD5pF,EAEEgF,GAAeC,EAAAA,EAAAA,IAAmBjF,EAAQC,EAAQC,GAClD4W,EAAgC,cAApB5P,GACd8P,EAAAA,EAAAA,IAAyBhX,EAAQC,IACjC8W,EAAAA,EAAAA,IAAgB/W,EAAQC,EAAQC,GAC9Bm/D,EAAgBr/D,EAAOuiB,SAAS+Q,MAAMD,gBAAkB,EACxDg7C,EAAevsE,IAAa7B,EAElC,IAAIsD,EASAQ,EACJ,GATIiB,EACFzB,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQ+E,GACnC8R,EACTvT,GAAUuS,EAAAA,EAAAA,IAAqB9V,EAAQC,EAAQC,EAAUgH,GAChDmnE,GAA8C,IAA9Bub,EAAmBpkF,SAC5CjC,GAAU6Q,EAAAA,EAAAA,IAAkBpU,EAAQkI,EAAa0hF,EAAmB,MAIjEvb,GAAgBrpE,IAAiBzB,EAAS,CAC7C,MAAM,YAAE4kD,GAAgB5kD,EAClB8uC,EAAiBpyC,IAAWqX,EAC9B6wC,IAAgBA,EAAYgpB,eAAiB9+B,KAC/CtuC,GAASs/C,EAAAA,EAAAA,IAAsBrjD,EAAQuD,IAGpCQ,IACHA,GAASC,EAAAA,EAAAA,IAAahE,EAAQuD,IAG3BQ,IACHA,GAASmjB,EAAAA,EAAAA,IAAShf,IAAeuR,EAAAA,EAAAA,IAAWzZ,EAAQkI,IAAevC,EAAAA,EAAAA,IAAW3F,EAAQkI,IAI1F,MAAO,CACLlD,aAAAA,EACA8R,UAAAA,EACAvT,QAAAA,EACAQ,OAAAA,EACAs7D,cAAAA,EACAwqB,uBAAwBxb,EAAeub,EAAmBpkF,YAASlF,KAnDrDsiC,EA3EuC,IAQrD,IARsD,aAC1D59B,EAD0D,UAE1D8R,EAF0D,QAG1DvT,EAH0D,OAI1DQ,EAJ0D,cAK1Ds7D,EAL0D,uBAM1DwqB,EAN0D,QAO1DC,GACI,EACJ,MAAM,gBACJ9jF,EADI,aAEJ+P,EAFI,aAGJ9P,EAHI,gBAIJ8jF,IACE9pE,EAAAA,EAAAA,MAEEirB,EAAUpmC,SACZE,GAAgB8R,IAAcvT,GAC5BQ,GAAU8lF,GAEVG,GAAaC,EAAAA,GAAAA,GACjB,CAACJ,GACDA,EAxB4B,SAwBuBvpF,IAG/C,aACJwpC,EADI,qBACUE,IACZC,EAAAA,GAAAA,GAAkB+/C,GAAc9+C,OAAS5qC,GAAY++D,OAAe/+D,GAAY++D,GAE9E6qB,GAAgBhlD,EAAAA,EAAAA,KAAY,KAC5BlgC,EACFgB,EAAgB,CAAEzB,eAAWjE,IACpBwW,EACTf,EAAa,CAAExR,eAAWjE,IACjBupF,GACTE,IAEFD,MAAAA,GAAAA,MACC,CAAC9kF,EAAc8R,EAAW+yE,EAAwBC,EAAS9jF,EAAiB+P,EAAcg0E,KAE7FnqD,EAAAA,EAAAA,KAAU,IAAOsL,GAAU3B,EAAAA,GAAAA,GAAsB2gD,QAAiB5pF,GAAY,CAAC4qC,EAASg/C,IAExF,MAAMC,GAAqBjlD,EAAAA,EAAAA,KAAY,KACrCj/B,EAAa,CAAEhG,OAAQsD,EAAStD,OAAQsE,UAAWhB,EAASpC,OAC3D,CAAC8E,EAAc1C,IAEZo9B,GAAYqE,EAAAA,GAAAA,GAAe,0BAA2BgF,GAEtDirB,EAAa40B,GAA0BA,EAAyB,EACjE,GAAEA,4BACHvpF,EAEJ,GAAKwpC,EAIL,OACE,0BAAKnJ,UAAWA,GACd,8BACE,mBAAC+B,GAAA,EAAD,CAAQlyB,OAAK,EAAC45E,OAAK,EAAC7nD,MAAM,cAAcwC,UAAU,kBAAkB7C,QAASgoD,GAC3E,wBAAGvpD,UAAU,gBAEf,mBAAC,GAAD,CACEA,UAAU,eACVp9B,QAASA,EACTQ,OAAQA,EACRkxD,WAAYA,EACZ13C,MAAOzG,EAAY,oBAAiBxW,EACpC4hC,QAASioD,UCpGnB,IAAe9pD,EAAAA,EAAAA,KAR6BuK,IAC1C,MAAM,YAAE11B,GAAgB01B,EAClBy/C,GAAkBv/C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB71B,EAAY1P,QAGvF,OAAO6kF,EAAkB,mBAACA,EAAoBz/C,QAAYtqC,KCG5D,IAAe+/B,EAAAA,EAAAA,KAR4BuK,IACzC,MAAM,OAAEhhC,GAAWghC,EACb0/C,GAAiBx/C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBnhC,GAGzE,OAAO0gF,EAAiB,mBAACA,EAAmB1/C,QAAYtqC,KCG1D,IAAe+/B,EAAAA,EAAAA,KARuBuK,IACpC,MAAM,OAAEhhC,GAAWghC,EACb2/C,GAAYz/C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcnhC,GAG/D,OAAO2gF,EAAY,mBAACA,EAAc3/C,QAAYtqC,KCGhD,IAAe+/B,EAAAA,EAAAA,KARsBuK,IACnC,MAAM,OAAEhhC,GAAWghC,EACb4/C,GAAW1/C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAanhC,GAG7D,OAAO4gF,EAAW,mBAACA,EAAa5/C,QAAYtqC,KCyBxCmqF,GAAU,IAAIC,OAAOC,EAAAA,GAAkB,KAgF7C,IAAetqD,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAA8C,IAArC,OAAEC,EAAF,SAAUC,GAA2B,EAC5C,MAAMyU,GAAYC,EAAAA,EAAAA,IAAgB5U,EAAQC,EAAQC,GAClD,MAAO,CACLgjC,OAAOC,EAAAA,EAAAA,IAAYnjC,GACnB+X,eAAgB/X,EAAO+X,eACvBpD,UAAAA,KANciuB,EA9E8B,IAQ5C,IAR6C,OACjD3iC,EADiD,SAEjDC,EAFiD,YAGjD0qF,EAHiD,SAIjDx1C,EAJiD,eAKjDr9B,EALiD,UAMjDpD,EANiD,MAOjDuuB,GACI,EACJ,MAAM,mBACJlrB,EADI,oBAEJjD,EAFI,qBAGJ81E,IACE5qE,EAAAA,EAAAA,MAEEiB,EAAOulE,IAAiB,KAC5B,MAAM,KAAEhiF,EAAF,SAAQ4Q,IAAa9K,EAAAA,EAAAA,GAAkBqgF,GAEvCE,EAAaz1E,GAAYA,EAASvM,MAAK,QAAC,KAAEzH,GAAH,SAAcA,IAAS0pF,EAAAA,GAAAA,WACpE,GAAID,EACF,OAAOA,EAAW77E,IAGpB,MAAM+7E,EAAYvmF,EAAK6kB,MAAMmhE,IAC7B,OAAIO,EACKA,EAAU,QADnB,IA3BgB,IAgCF,CAACJ,KAEjBhrD,EAAAA,EAAAA,KAAU,KACJ1e,EACFlJ,EAAmB,CAAEvT,KAAMyc,KAE3BnM,IACA81E,EAAqB,CAAE5qF,OAAAA,EAAQC,SAAAA,OAEhC,CAACD,EAAQ4qF,EAAsB91E,EAAqBmM,EAAMlJ,EAAoB9X,KAEjFo5E,EAAAA,GAAAA,IAAY,KACVvkE,IACA81E,EAAqB,CAAE5qF,OAAAA,EAAQC,SAAAA,MAC9B,CAACD,IAEJ,MAAMirC,EAAUpmC,QAAQiT,GAAkB6yE,EAAYplF,SAAWmP,IAAcygC,IACzE,aAAEtL,EAAF,qBAAgBE,IAAyBC,EAAAA,GAAAA,GAAkBiB,GAE3D+/C,GAAmBtlC,EAAAA,GAAAA,GAAiB5tC,GAAgB,GAEpDmzE,GAA4BhmD,EAAAA,EAAAA,KAAY,KAC5C2lD,EAAqB,CAAE5qF,OAAAA,EAAQC,SAAAA,EAAUyU,WAAW,MACnD,CAAC1U,EAAQC,EAAU2qF,IAEtB,IAAK/gD,IAAiBmhD,EACpB,OAIF,MAAM,MAAEtmE,KAAUwmE,GAAwBF,EACpCG,EAAc,CAClB9gF,QAAS,CACPo5D,QAASynB,IAIb,OACE,0BAAKxqD,WAAWqE,EAAAA,GAAAA,GAAe,iBAAkBgF,IAC/C,8BACE,mBAACtH,GAAA,EAAD,CAAQlyB,OAAK,EAAC45E,OAAK,EAAC7nD,MAAM,cAAcwC,UAAU,wBAAwB7C,QAASgpD,GACjF,wBAAGvqD,UAAU,gBAEf,mBAAC,GAAD,CAASp9B,QAAS6nF,EAAa7nB,WAAS,EAACrgC,MAAOA,UChGxD,IAAe7C,EAAAA,EAAAA,KARwBuK,IACrC,MAAM,OAAEhhC,GAAWghC,EACbygD,GAAavgD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAenhC,GAGjE,OAAOyhF,EAAa,mBAACA,EAAezgD,QAAYtqC,K,ICmJ7CgrF,I,SAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,SAAAA,W,CAAAA,KAAAA,GAAAA,KAWL,MAAMC,GAA2B,8BAkhCjC,IAAelrD,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAA+D,kBAAtD,OAAEC,EAAF,SAAUC,EAAV,gBAAoBgH,GAAkC,EAC7D,MAAMxB,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1B87E,EAAU97E,IAAWurF,EAAAA,IAAkBphE,EAAAA,EAAAA,IAAcpqB,EAAQC,QAAUK,EACvE0iD,EAAgBl+C,QAAQi3E,GACxB1pC,GAAiBC,EAAAA,EAAAA,IAAqBtyC,EAAQC,GAC9CwrF,EAA+BzoC,IAAiB0oC,EAAAA,EAAAA,IAA0C1rF,EAAQC,GAClGm7B,GAAeC,EAAAA,EAAAA,IAAmBr7B,EAAQC,IAC1C,SAAE+c,EAAF,sBAAY2uE,GAA0B3rF,EAAOuiB,SAAS+Q,MACtDs4D,EAAoB5rF,EAAOkd,cAAc2uE,EAAAA,IACzC3uE,EAAgBF,IAAa6uE,EAAAA,GAA0B7rF,EAAOkd,cAAcF,QAAY1c,EACxFwrF,EAAuBL,EAA+BA,EAA6BtqF,QAAKb,EACxFyrF,EAAkBD,GAAuB13E,EAAAA,EAAAA,IAAkBpU,EAAQC,EAAQ6rF,QAAwBxrF,GACnG,cAAEgX,GAAkBtX,EACpBgsF,EAAkBtmF,MAAAA,GAAAA,EAAMgU,UAAWhU,MAAAA,GAAA,UAAAA,EAAMgU,gBAAN,eAAgBH,WAAYjC,OAAgBhX,EAC/EiZ,EAAW7T,MAAAA,GAAAA,EAAMiU,WAAaqyE,GAAmBtmF,EAAKiU,UAAU5R,SAASikF,GAC3EA,EACCtmF,MAAAA,GAAA,UAAAA,EAAM6tC,mBAAN,SAAmB04C,UAAYvmF,MAAAA,OAA/B,EAA+BA,EAAMvE,QAAKb,EACzC4rF,EAAa3yE,GAAWE,EAAAA,EAAAA,IAAWzZ,EAAQuZ,QAAYjZ,EACvDkZ,GAAc0yE,GAAc3yE,GAAW5T,EAAAA,EAAAA,IAAW3F,EAAQuZ,QAAYjZ,EACtE6rF,GAAgBC,EAAAA,EAAAA,IAAoBpsF,EAAQC,GAE5CojB,EAAmC,cAApBnc,GACjBmlF,EAAAA,EAAAA,IAA4BrsF,EAAQC,IACpCqjB,EAAAA,EAAAA,GAAmBtjB,EAAQC,EAAQC,GAEvC,MAAO,CACLosF,gBAAgBx2E,EAAAA,EAAAA,IAAqB9V,EAAQC,EAAQC,EAAUgH,GAC/Dq3B,gBAAiBv+B,EAAOu+B,gBACxBpoB,OAAOK,EAAAA,EAAAA,IAAYxW,EAAQC,EAAQC,GACnCwF,KAAAA,EACAs9C,cAAAA,EACA3Q,eAAAA,EACAk6C,wBAAwBC,EAAAA,EAAAA,IAA6BxsF,EAAQC,GAC7D0xC,UAAWjsC,GAAOwsC,EAAAA,EAAAA,IAAcxsC,QAAQpF,EACxCmyC,oBAAoBlsC,EAAAA,EAAAA,IAAyBvG,GAC7C+iD,oBAAoB5Q,EAAAA,EAAAA,IAAqBnyC,GACzCysF,oBACEvsF,IAAakB,EAAAA,IACU,WAApB8F,GACApC,QAAQs2B,MAAAA,OAAD,EAACA,EAAc51B,QAE3BknF,eAAoC,cAApBxlF,EAChB4kF,qBAAAA,EACAa,uBAAwBZ,MAAAA,OAAF,EAAEA,EAAiBa,oBACzCve,aAAcpuE,IAAWD,EAAO6B,gBAAgBC,SAChD6H,UAAW3J,EAAO2J,UAClBkjF,iBAAkB7sF,EAAOiM,SAASgQ,SAAShQ,SAC3C6gF,iBAAkBpnF,MAAAA,GAAF,UAAEA,EAAMgU,gBAAR,aAAE,EAAgBwe,QAClC60D,gBAAe,UAAE/sF,EAAOsqB,qBAAT,aAAE,EAAsBjL,QACvC/H,cAAAA,EACAmN,aAAczkB,EAAOykB,aACrB7iB,qBAAsB5B,EAAO2B,SAASC,qBACtC+pF,sBAAAA,EACAl+E,aAAczN,EAAOyN,aACrBm+E,kBAAmBA,MAAAA,OAAF,EAAEA,EAAmBvuE,SACtCH,cAAeA,MAAAA,OAAF,EAAEA,EAAeG,SAC9B2H,WAAYhlB,EAAOglB,WAAWC,WAC9B+nE,mBAAoBhtF,EAAOglB,WAAW7H,UACtC8vE,gBAAiBvnF,MAAAA,GAAF,UAAEA,EAAMgU,gBAAR,aAAE,EAAgBwzE,YACjCA,YAAanR,MAAAA,GAAAA,EAASriE,SAAYqiE,EAAQriE,SAASwzE,cAAe,OAAS5sF,EAC3E4rF,WAAAA,EACA1yE,WAAAA,EACAD,SAAAA,EACA8J,aAAAA,EACA8oE,cAAAA,KAjEcvpD,EAtgCwB,IA0CtC,IA1CuC,cAC3CuqD,EAD2C,eAE3CT,EAF2C,uBAG3CH,EAH2C,QAI3C9oC,EAJ2C,WAK3C2pC,EAL2C,eAM3Cd,EAN2C,OAO3CrsF,EAP2C,SAQ3CC,EAR2C,gBAS3CgH,EAT2C,MAU3CiP,EAV2C,KAW3CzQ,EAX2C,gBAY3C64B,EAZ2C,cAa3CykB,EAb2C,eAc3C3Q,EAd2C,UAe3CV,EAf2C,mBAgB3Cc,EAhB2C,mBAiB3CsQ,EAjB2C,aAkB3CsrB,EAlB2C,UAmB3C1kE,EAnB2C,qBAoB3CmiF,EApB2C,uBAqB3Ca,EArB2C,oBAsB3CF,EAtB2C,iBAuB3CI,EAvB2C,iBAwB3CC,EAxB2C,gBAyB3CC,EAzB2C,cA0B3Cz1E,EA1B2C,aA2B3CmN,EA3B2C,qBA4B3C7iB,EA5B2C,sBA6B3C+pF,EA7B2C,kBA8B3CC,EA9B2C,cA+B3C1uE,EA/B2C,aAgC3CzP,EAhC2C,WAiC3CuX,EAjC2C,mBAkC3CgoE,EAlC2C,YAmC3CE,EAnC2C,gBAoC3CD,EApC2C,WAqC3Cf,EArC2C,WAsC3C1yE,EAtC2C,SAuC3CD,EAvC2C,aAwC3C8J,EAxC2C,cAyC3C8oE,GACI,EACJ,MAAM,YACJv5E,EADI,WAEJy6E,GAFI,WAGJrkE,GAHI,sBAIJskE,GAJI,kBAKJC,GALI,gBAMJ1rF,GANI,cAOJ6nB,GAPI,eAQJ8jE,GARI,qBASJr0E,GATI,SAUJjX,GAVI,eAWJurF,GAXI,oBAYJC,GAZI,WAaJC,GAbI,aAcJ3xD,GAdI,sBAeJ4xD,KACE3tE,EAAAA,EAAAA,MACEjd,IAAOm/B,EAAAA,GAAAA,KAGP0rD,IAActlD,EAAAA,EAAAA,IAAuB,OACpCs6C,GAAMiL,KAAW1sD,EAAAA,EAAAA,IAAiB,IACnC2sD,IAAUC,EAAAA,GAAAA,GAAYnL,IACtBoL,IAA6B1lD,EAAAA,EAAAA,MAC7B2lD,IAAoBryB,EAAAA,GAAAA,GAAYsxB,IAC9B/7D,MAAOF,IAAgBC,GAAAA,EAAAA,MACzBxX,GAAYjU,MAAAA,OAAH,EAAGA,EAAMiU,UAClBw0E,GAAgBx0E,KAAcA,GAAUnU,OAAS,IAAMmU,GAAU5R,SAASuP,KAEzE82E,GAAoBC,GAAqBC,KAA6BlhD,EAAAA,GAAAA,KACvEmhD,IAAoBC,EAAAA,GAAAA,GAAqBvuF,EAAQC,GAEjDuuF,IAAuBvpD,EAAAA,EAAAA,KAAY,KACvCopD,OACC,CAACA,MACGI,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYrC,EAAwBkC,KAExE7uD,EAAAA,EAAAA,KAAU,KACRquD,GAA2BzsE,aAAUlhB,IACpC,CAACL,KAEJ2/B,EAAAA,EAAAA,KAAU,KACJ3/B,GAAUwkB,GAAgBvkB,IAAakB,EAAAA,IAAkBqiD,GAC3DtqC,GAAqB,CAAElZ,OAAAA,MAExB,CAACwjD,EAASxjD,EAAQkZ,GAAsBsL,EAAcvkB,KAEzD0/B,EAAAA,EAAAA,KAAU,KACJ3/B,GAAUyF,GAAQ+e,IAAiB9K,IAAa8pC,IAAW1Q,EAAAA,EAAAA,IAAiBrtC,IAC9EioF,GAAW,CAAE1tF,OAAAA,MAEd,CAACyF,EAAMzF,EAAQwjD,EAASh/B,EAAckpE,GAAYh0E,MAErDimB,EAAAA,EAAAA,KAAU,KACJ3/B,GAAUyF,GAAQ+e,IAAiB/e,EAAKgU,UAAY+pC,IAAW1Q,EAAAA,EAAAA,IAAiBrtC,IAClFs2B,GAAa,CAAE/7B,OAAAA,MAEhB,CAACyF,EAAMzF,EAAQwjD,EAASh/B,EAAcuX,KAEzC,MAAM6yD,IAA+BtmD,EAAAA,EAAAA,KAAO,IAC5C+wC,EAAAA,GAAAA,IAAY,IAAiC,IAA/BwV,EAAYC,GAAmB,EAE3CF,GAA6BrtE,QAAU1c,QAAQ7E,IAAW6uF,GAAcn1E,KAAco1E,KACrF,CAAC9uF,EAAQ0Z,MAEZu8B,EAAAA,EAAAA,KAAgB,KACT23C,GAAYrsE,UAEjBqsE,GAAYrsE,QAAQ02B,UAjHP,ivBAkHZ,IAEH,MAAOhjC,GAAa85E,KAAkB5tD,EAAAA,EAAAA,IAA0B,KAEzD6tD,GAAmBC,GAAiBC,KAAoB/hD,EAAAA,GAAAA,MACxDgiD,GAAsBC,GAAoBC,KAAuBliD,EAAAA,GAAAA,MACjEmiD,GAAkBC,GAAgBC,KAAmBriD,EAAAA,GAAAA,MACrDsiD,GAAkBC,GAAgBC,KAAmBxiD,EAAAA,GAAAA,MACrDyiD,GAAmBC,GAAiBC,KAAoB3iD,EAAAA,GAAAA,MACxD4iD,GAAoBC,KAA+B7iD,EAAAA,GAAAA,MACnD8iD,GAAiBC,GAAcC,KAAehjD,EAAAA,GAAAA,MAE/C,oBACJijD,GADI,mBAEJC,GAFI,oBAGJC,GAHI,qBAIJC,GAJI,kBAKJC,GACAC,gBAAiBC,GANb,mBAOJC,IC9SsB,MAExB,MAAMF,GAAkBnoD,EAAAA,EAAAA,IAA0B,OAC3CioD,EAAsBK,IAA2BzvD,EAAAA,EAAAA,MAClDwvD,GAAqBroD,EAAAA,EAAAA,OACpBkoD,EAAmBK,IAAwB1vD,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJmxD,EAAAA,IAAaC,EAAAA,IACVC,OAEN,IAEH,MAAMZ,GAAsBnrD,EAAAA,EAAAA,KAAY/0B,UACtC,IACE,MAAM,KAAEguC,EAAF,MAAQpjC,SAAgBk2E,IAAsBC,IAC9CR,EAAgBlvE,UACdovE,EAAmBpvE,SAAW5L,KAAKC,MAAQ,GAAM,IACnD66E,EAAgBlvE,QAAQsvB,MAAMqgD,UAAa,SAA4B,IAAnBD,GAAc,wBAEpEJ,EAAqBl7E,KAAKC,WAG9B+6E,EAAmBpvE,QAAU5L,KAAKC,MAClCi7E,EAAqBl7E,KAAKC,OAE1Bg7E,EAAwB,CAAE1yC,KAAAA,EAAMpjC,MAAAA,IAChC,MAAO/L,GAEP2T,QAAQjT,MAAMV,MAEf,IAEGuhF,GAAsBrrD,EAAAA,EAAAA,KAAY,KACtC,GAAKsrD,EAAL,CAIIE,EAAgBlvE,UAClBkvE,EAAgBlvE,QAAQsvB,MAAMqgD,UAAY,QAE5C,IACE,OAAOX,EAAsBz1E,QAC7B,MAAO/L,GAGP,YADA2T,QAAQjT,MAAMV,OAGf,CAACwhF,IAEEF,GAAqBprD,EAAAA,EAAAA,KAAY,KACrC,GAAKsrD,EAAL,CAIAK,OAAwBvwF,GACxBswF,EAAmBpvE,aAAUlhB,EAC7BwwF,OAAqBxwF,GACjBowF,EAAgBlvE,UAClBkvE,EAAgBlvE,QAAQsvB,MAAMqgD,UAAY,QAE5C,IACE,OAAOX,EAAsBryC,OAC7B,MAAOnvC,GAGP,YADA2T,QAAQjT,MAAMV,OAGf,CAACwhF,IAMJ,OAJA5wD,EAAAA,EAAAA,KAAU,IACD4wD,GAAuBjnD,EAAAA,GAAAA,GAAsB+mD,QAAsBhwF,GACzE,CAACkwF,EAAsBF,IAEnB,CACLD,oBAAAA,EACAE,oBAAAA,EACAD,mBAAAA,EACAE,qBAAAA,EACAC,kBAAAA,EACAC,gBAAAA,EACAE,mBAAAA,ID6NEQ,IAEJxpB,EAAAA,GAAAA,IAAY,KACV2mB,GAAkB,CAAEltF,KAAM,kBACzBmvF,IAAwBa,EAAAA,KAE3BzxD,EAAAA,EAAAA,KAAU,KACH4wD,IACHjC,GAAkB,CAAEltF,KAAM,aAE3B,CAACmvF,GAAsBjC,KAE1B,MAAM+C,GAAkBhF,EAAiBhB,GAAgBiG,MACnDP,EAAAA,IAAgCR,IAAyB3N,KAAS3tE,GAAY1P,QAAW6oE,EACxFqe,EAAiBpB,GAAgBkG,SAAWlG,GAAgBmG,KAC7DnG,GAAgBoG,OAChBC,IAAyBjF,GAEzB,qBACJkF,GADI,oBACkBC,GADlB,cACuCC,GADvC,qBACsDC,KACxDC,EAAAA,GAAAA,IACD98E,GAAY1P,OACbuoF,GACAD,QACAxtF,EACAwsF,EACAC,EACAz1E,IAIA1N,OAAQqoF,GACR9wF,GAAI+wF,GACJjnE,UAAWknE,GACX1nE,SAAU2nE,GACV9lF,QAAS+lF,GACTC,aAAcC,GACdvnE,KAAMwnE,GACNC,SAAUC,IlB5UC,SACbx2B,EACAj8D,EACA4iF,EACA79D,GAEA,MAAM,eAAE2tE,EAAF,eAAkBC,IAAmB3yE,EAAAA,EAAAA,OAEpCrW,EAAQipF,EAAYC,IAAgB1lD,EAAAA,GAAAA,MACrC,SACJhtB,EADI,MACM1f,EADN,YACawmF,EADb,gBAC0BC,GAC5BV,IAAiB,IAuDvB,SAAuB5D,GACrB,MAAMp+E,EAcR,SAAsBo+E,GAGpB,OAFAuE,GAAOlvC,UAAY2qC,EAAKxzD,QAAQ,QAAS,MAElC+3D,GAAO2L,UAjBDC,CAAanQ,GACpBz/E,EAASqB,EAAK6kB,MAAMy9D,IAC1B,OAAK3jF,EAIE,CACLgd,SAAUhd,EAAO,GACjB1C,MAAO0C,EAAO,GACd8jF,YAA2B,KAAd9jF,EAAO,KAAcqB,EAAK6kB,MAAM09D,IAC7CG,gBAAiB/jF,EAAO,GAAG0+B,eAPpBmlD,GA3DkBgM,CAAcpQ,IAvBvB,IAuB2C,CAACA,KAAU,GAClEqQ,GAAYr3B,EAAAA,GAAAA,GAAYn7D,GACxByyF,GAAet3B,EAAAA,GAAAA,GAAYz7C,GAC3BmK,EAAgB48D,EAAkBniE,MAAAA,OAAH,EAAGA,EAAamiE,QAAmB7mF,GAEtEa,GAAIuqB,EADA,SAEJjB,EAFI,OAGJtS,EAHI,QAIJ7L,EAJI,UAKJ2e,EALI,KAMJD,GACET,GAAiB,IAErBqV,EAAAA,EAAAA,KAAU,KACJszD,IAAcxyF,GAChBoyF,MAED,CAACI,EAAWxyF,EAAOoyF,KAEtBlzD,EAAAA,EAAAA,KAAU,KACJs8B,GAAairB,GAAmBlnF,GAClC0yF,EAAe,CAAE1yF,OAAAA,EAAQmgB,SAAU+mE,EAAiBzmF,MAAAA,MAErD,CAACA,EAAOw7D,EAAWy2B,EAAgB1yF,EAAQknF,IAE9C,MAAMsL,GAAWvtD,EAAAA,EAAAA,KAAY,KAC3BytD,EAAe,CACb1yF,OAAAA,EAAQmgB,SAAU+mE,EAAiBzmF,MAAAA,EAAOyX,OAAAA,MAE3C,CAACA,EAAQlY,EAAQS,EAAOiyF,EAAgBxL,IAc3C,OAZAvnD,EAAAA,EAAAA,KAAU,KACJs8B,GAAaxwC,IAAUjB,GAAane,MAAAA,GAAAA,EAAS9G,QAC/CqtF,IAEAC,MAED,CAACpnE,EAAOwwC,EAAW22B,EAAYvmF,EAASme,EAAUqoE,IAEjDK,IAAiB/yE,GACnBwyE,EAAe,CAAExyE,SAAU+yE,IAGtB,CACLvpF,OAAAA,EACAzI,GAAIuqB,EACJT,UAAAA,EACAR,SAAAA,EACAne,QAAAA,EACAgmF,aAAcQ,EACd9nE,KAAMk8D,GAAel8D,EAAQ,IAAG5K,KAAY4K,SAAS1qB,EACrDmyF,SAAAA,GkB+QEW,CACFtuF,SAASoQ,GAAY1P,QAAUif,GAC/BxkB,EACA4iF,GACA79D,IAIApb,OAAQypF,GACR7qE,MAAO8qE,GACPC,oBAAqBC,IjB7VV,SACbt3B,EACA2mB,EACAqK,EACAD,GAEA,MAAOrjF,EAAQipF,EAAYC,IAAgB1lD,EAAAA,GAAAA,MACpCmmD,EAAqBE,IAA0BryD,EAAAA,EAAAA,MAEhDsyD,GAAsBxuD,EAAAA,EAAAA,KAAa5hC,IAClC4pF,GAAgBD,EAMrB5F,IAAa,KACX,MAAMsM,GAA2BzG,GAAeD,GAAmB,IAChE3pF,QAAO,QAAC,QAAEslB,GAAH,SAAkBtlB,GAAUslB,EAAQ7gB,SAASzE,MACvDmwF,EACEE,GAA2BA,EAAwBnuF,OAASmuF,OAA0BrzF,MATxFmzF,OAAuBnzF,KAYxB,CAAC4sF,EAAaD,IA0BjB,OAxBArtD,EAAAA,EAAAA,KAAU,KACR,GAAKs8B,GAAc2mB,EAAKr9E,OAOxB,GAF2Bq9E,EAAKj5C,WAAW,KAEnB,CACtB,MAAMtmC,GAASswF,EAAAA,GAAAA,GAAiB/Q,EAAKgR,OAAO,IAAIvqE,MAAMg+D,IACtDoM,EAAoBpwF,EAASA,EAAO,GAAK,SAEzCmwF,OAAuBnzF,QAVvBmzF,OAAuBnzF,KAYxB,CAACozF,EAAqB7Q,EAAM3mB,EAAW42B,KAE1ClzD,EAAAA,EAAAA,KAAU,KACJ2zD,GAAuBA,EAAoB/tF,QAAUq9E,EAAKr9E,OAAS,EACrEqtF,IAEAC,MAED,CAACS,EAAqB1Q,EAAKr9E,OAAQqtF,EAAYC,IAE3C,CACLlpF,OAAAA,EACA4e,MAAOsqE,EACPS,oBAAAA,GiB0SEO,CACFhvF,QAASooF,GAAeA,EAAY1nF,QAAYynF,GAAmBA,EAAgBznF,QACnFq9E,GACAqK,EACAD,IAIAt4B,kBAAmBo/B,GADf,kBAEJ1hC,GAFI,uBAGJwC,GAHI,sBAIJC,KACEC,EAAAA,GAAAA,GAAuB47B,KAAiBW,KAAoBhG,GAAgBmG,MAAQE,MAElF,gBACJqC,GADI,YACaC,GADb,eAC0BpM,GAD1B,eAC0CC,GAD1C,oBAC0DoM,KAC5D9vD,EAAAA,EAAAA,KAAQ,KAAM+vD,EAAAA,EAAAA,IAA4BzuF,EAAMs9C,IAAgB,CAACt9C,EAAMs9C,IAErE1qB,GAAU5yB,IAAQ0uF,EAAAA,EAAAA,IAAY1uF,GAC9B2uF,IAAWC,EAAAA,EAAAA,IAAuB5uF,IAElC,qBAAE6uF,GAAF,oBAAwBC,IEtXjB,SACbt4B,EACA2mB,EACA52E,GAEA,IADAg1B,EACA,wDACA,MAAMwzD,GAAYrwD,EAAAA,EAAAA,KAAQ,KAAMwvD,EAAAA,GAAAA,GAAiB/Q,GAAM6R,QAAQ,CAAC7R,KAC1D,qBAAEnlE,EAAF,sBAAwBi3E,IAA0B10E,EAAAA,EAAAA,MAClD2uD,EACHgmB,EAAAA,IAA0D,KAApCC,EAAAA,GAAAA,GAAqBJ,KACvCG,EAAAA,IAAsB9vF,QAAQ+9E,EAAKv5D,MAAM,oBAE1CwrE,EAAchwF,QAAQmH,IAAa2iE,EAgBzC,OAdAhvC,EAAAA,EAAAA,KAAU,KAGwB,MAF5BqB,IAEAi7B,GAAa0S,EACflxD,EAAqB,CACnBlQ,MAAOonF,EAAAA,GAAqBH,EAAH,UAAeA,EAAUnrE,MAAM,qBAA/B,aAAe,EAAgC,MAEjEwrE,GAAgBlmB,GACzB+lB,OAID,CAAC9R,EAAMjU,EAAe+lB,EAAuBj3E,EAAsBw+C,EAAWj7B,IAE1E,CACLszD,qBAAsBO,EACtBN,oBAAqBG,GFwV+BI,CACpDjwF,QAAQ6mF,GAAyBqI,KAAoB9+E,GAAY1P,QACjEq9E,GACAgK,GACCppC,IAEG,mBACJuxC,GADI,kBACgBC,GADhB,eACmCC,GADnC,YACmDC,KACrDC,EAAAA,GAAAA,GACFtwF,QAAQ6mF,GAAyBqI,KAAoB9+E,GAAY1P,QACjEuoF,GACAtgF,OACAnN,EACAwtF,GACAlC,EACA1uE,GACCumC,GAGG4xC,IAA4BnwD,EAAAA,EAAAA,KAAY,SAACzgC,GAAsD,IAAxCsiC,EAAwC,uDAAtBuuD,EAAAA,GAC7E,MAAMxS,EAAYp8E,OAAOq8E,eACzB,IAAI/9B,EAEFA,EADEje,IAAYuuD,EAAAA,GACCv8D,SAASgH,cAA8BklB,EAAAA,IAEvClsB,SAAS4W,eAAe5I,GAEzC,MAAMwuD,GAAUj2C,EAAAA,GAAAA,GAAW76C,EAAM,CAAC,cAAe,aAAc,YAC5DJ,KAAK,IACLgrB,QAAQ,WAAY,KAEvB,GAAIyzD,EAAUG,WAAY,CACxB,MAAMuS,EAAiB1S,EAAUE,WAAW,GAC5C,IAAIyS,EAAAA,GAAAA,GAAuBD,EAAgBzuD,GAGzC,OAFA67C,GAAsB2S,QACtBvwC,EAAa0wC,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,KAK7D9H,GAAS,GAAEC,GAAQvsE,UAAW+zE,KAG9BrP,uBAAsB,MACpB2P,EAAAA,GAAAA,GAAqB7wC,QAEtB,CAAC+oC,KAEE+H,IAAe5wD,EAAAA,EAAAA,KAAY,KAC/B,MAAM49C,EAAYp8E,OAAOq8E,eAEzB,GAAID,EAAUG,WAAY,CACxB,MAAMuS,EAAiB1S,EAAUE,WAAW,GAC5C,IAAIyS,EAAAA,GAAAA,GAAuBD,EAAgBF,EAAAA,IAEzC,YADAv8D,SAASg9D,YAAY,UAAU,GAKnCjI,GG3bW,SAA6CjL,GAC1D,MAAMmT,EAAYj9D,SAASiiB,cAAc,OACzCg7C,EAAUC,gBAAkB,OAC5BD,EAAUllD,MAAMvuC,SAAW,WAC3ByzF,EAAUllD,MAAM6e,KAAO,WACvBqmC,EAAUllD,MAAM2tC,IAAM,WACtBuX,EAAU99C,UAAY2qC,EACtB9pD,SAASpJ,KAAKkgC,YAAYmmC,GAC1B,IAAIzmC,EAAUymC,EAAUzS,UAExB,GAAIh0B,EAAQg0B,UAEV,KAAOh0B,EAAQg0B,WACbh0B,EAAUA,EAAQg0B,UAKtB,MAAM2S,EAAa3mC,EAAQ0S,YAAaz8D,OAClC09E,EAAQnqD,SAASo9D,cACjBrT,EAAYp8E,OAAOq8E,eAGzBG,EAAMkT,SAAS7mC,EAAS2mC,GACxBhT,EAAMmT,OAAO9mC,EAAS2mC,GACtBpT,EAAUc,kBACVd,EAAUe,SAASX,GACnBnqD,SAASg9D,YAAY,UAAU,GAE/B,MAAM3yF,EAAS4yF,EAAU99C,UAGzB,OAFAnf,SAASpJ,KAAK2mE,YAAYN,GAEnB5yF,EH2ZGmzF,CAAoCxI,GAAQvsE,YACnD,CAACusE,KAEEyI,IAAgBtxD,EAAAA,EAAAA,KAAY,WAAiC,IAAhCuxD,EAAgC,wDAC5DA,GACH3I,GAAQ,IAEVkB,GAAehuF,EAAAA,GACfwzF,KACA3C,KACAoD,KAEI7nF,EAAAA,GAEFzG,YAAW,IAAM8oF,MAxRY,KA0R7BA,OAED,CAAC+E,GAAqB3C,GAAqBoD,GAAmBxF,KAG3DiH,IAAwBnuD,EAAAA,EAAAA,MAC9BmuD,GAAsBl1E,QAAU8uE,IAChC1wD,EAAAA,EAAAA,KAAU,IACD,KACL82D,GAAsBl1E,UACtBg1E,OAED,CAACv2F,EAAQu2F,GAAeE,KAE3B,MAAOC,GAAoBC,IIzcV,EACjB7I,EACAD,EACA+I,EACAL,EACA1G,EACA7vF,EACAC,EACAmB,EACA8U,EACAkN,KAEA,MAAM,YAAEyzE,EAAF,gBAAeC,IAAoB92E,EAAAA,EAAAA,OAEzCugE,EAAAA,GAAAA,IAAsB,IAAyB,IAAvBwW,GAAuB,EAC7C,IAAKH,EACH,OAEF,IAAIG,MAAAA,OAAA,EAAAA,EAAmB71F,MAAO01F,EAAc11F,GAC1C,OAGF,MAAM0hF,GAAOoU,EAAAA,GAAAA,GAA0B5zE,MAAAA,GAAAA,EAAc5e,KAAKe,OAAS6d,EAAewzE,EAAcvsF,QAAQ7F,MACxGqpF,EAAQjL,GAERqD,uBAAsB,KACpB,MAAMlhC,EAAejsB,SAASgH,cAA8BklB,EAAAA,IACxDD,IACF6wC,EAAAA,GAAAA,GAAqB7wC,GAAc,QAGtC,CAAC6xC,EAAe/I,KAEnBluD,EAAAA,EAAAA,KAAU,KACR,GAAKi3D,EACL,MAAO,KAEL,MAAMK,GAAS3sF,EAAAA,EAAAA,GAAkBwjF,EAAQvsE,SACnCb,EAASu2E,EAAOzyF,KAAKe,OAAS0xF,OAAS52F,EAC7Cy2F,EAAgB,CACd92F,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAMkc,OAGjC,CAAC1gB,EAAQ42F,EAAe9I,EAASgJ,EAAiB72F,EAAUmB,IAE/D,MAAM81F,GAA8BjyD,EAAAA,EAAAA,KAAY,KACzC/uB,IAEL8mD,EAAAA,EAAAA,KAAQ,KACN6wB,GAAQmJ,EAAAA,GAAAA,GAA0B9gF,IAClC,MAAM6uC,EAAejsB,SAASgH,cAA8BklB,EAAAA,IACxDD,GACFkhC,uBAAsB,MACpB2P,EAAAA,GAAAA,GAAqB7wC,GAAc,WAIxC,CAAC7uC,EAAO23E,IAEL8I,GAAmB1xD,EAAAA,EAAAA,KAAY,KACnCsxD,IACAW,MACC,CAACX,EAAeW,IAEbR,GAAqBzxD,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAEzgC,EAAF,SAAQ4Q,IAAa9K,EAAAA,EAAAA,GAAkBwjF,EAAQvsE,SAEhDq1E,IAIApyF,IAAS2yF,EAAAA,EAAAA,IAAgBP,IAK9BC,EAAY,CACVvyF,UAAWsyF,EAAc11F,GACzBsD,KAAAA,EACA4Q,SAAAA,IAGFmhF,IACAW,KAXErH,OAYD,CAACgH,EAAaD,EAAe9I,EAAS+B,EAAiB0G,EAAeW,IAEnEE,GAAanyD,EAAAA,EAAAA,KAAY,KAC7B,IAAK2xD,EAAe,OACpB,MAAMK,GAAS3sF,EAAAA,EAAAA,GAAkBwjF,EAAQvsE,SACnCb,EAASu2E,EAAOzyF,KAAKe,OAAS0xF,OAAS52F,EAC7Cy2F,EAAgB,CACd92F,OAAAA,EAAQC,SAAAA,EAAUmB,KAAAA,EAAMoD,KAAMkc,MAE/B,CAAC1gB,EAAQ42F,EAAe9I,EAASgJ,EAAiB72F,EAAUmB,IAK/D,OAHA67D,EAAAA,GAAAA,GAAkBm6B,GAClB33D,GAAgB23D,GAET,CAACV,EAAoBC,IJuWmBU,CAC7CvJ,GACAD,GACAxB,EACAkK,GACA1G,GACA7vF,EACAC,EACAgH,EACAiP,EACAkN,GpBhda,EACflN,EACAlW,EACAC,EACA6tF,EACAD,EACA+I,KAEA,MAAM,UAAEU,EAAF,WAAalK,IAAeptE,EAAAA,EAAAA,MAE5Bu3E,GAActyD,EAAAA,EAAAA,KAAY,CAACuyD,EAAqBC,KACpD,MAAMC,EAAc5J,EAAQvsE,QACxBq1E,IACAc,EAAYnyF,OACd+xF,EAAU,CAAEt3F,OAAQw3F,EAAav3F,SAAUw3F,EAAevhF,OAAO5L,EAAAA,EAAAA,GAAkBotF,UAC1Dr3F,IAAhBq3F,GACTtK,EAAW,CAAEptF,OAAQw3F,EAAav3F,SAAUw3F,OAE7C,CAACrK,EAAYwJ,EAAe9I,EAASwJ,IAGlCK,GAA2BxzD,EAAAA,EAAAA,KAAQ,KAAMn0B,EAAAA,EAAAA,KAAUC,GAAOA,KAAM2nF,EAAAA,IAAgB,IAAQ,CAAC53F,IAEzF6uF,GAAajzB,EAAAA,GAAAA,GAAY57D,GACzB63F,GAAej8B,EAAAA,GAAAA,GAAY37D,IAGjC0/B,EAAAA,EAAAA,KAAU,KACRrc,GAAgBtjB,EAChBujB,GAAkBtjB,EAEX,KACLqjB,QAAgBjjB,EAChBkjB,QAAkBljB,EAElBk3F,EAAYv3F,EAAQC,MAErB,CAACD,EAAQC,EAAUs3F,KAGtB53D,EAAAA,EAAAA,KAAU,KACJ3/B,IAAW6uF,GAAc5uF,IAAa43F,IAItCjB,GAAkB1gF,IAItB23E,GAAQmJ,EAAAA,GAAAA,GAA0B9gF,IAE7B1M,EAAAA,IACHy8E,uBAAsB,KACpB,MAAMlhC,EAAejsB,SAASgH,cAA8BklB,EAAAA,IACxDD,IACF6wC,EAAAA,GAAAA,GAAqB7wC,GAAc,SAIxC,CAAC/kD,EAAQC,EAAUiW,EAAO23E,EAAS0J,EAAa1I,EAAYgJ,EAAcjB,IAE7E,MAAMhU,EAAOkL,EAAQvsE,QAEfu2E,GAAWl8B,EAAAA,GAAAA,GAAYgnB,IAC7BjjD,EAAAA,EAAAA,KAAU,KACH3/B,GAAWC,GAAY4uF,IAAe7uF,GAAU63F,IAAiB53F,GAAY63F,IAAalV,IAI3FA,EAAKr9E,OACPoyF,GAAyB,KACnBr0E,KAAkBtjB,GAAUujB,KAAoBtjB,GAIpDs3F,EAAYv3F,EAAQC,MAGtBs3F,EAAYv3F,EAAQC,MAErB,CAACD,EAAQ4iF,EAAMiM,EAAYiJ,EAAUD,EAAcF,EAA0B13F,EAAUs3F,IAE1F,MAAMH,GAAanyD,EAAAA,EAAAA,KAAY,KACzBjlC,GAAUC,GACZs3F,EAAYv3F,EAAQC,KAErB,CAACD,EAAQC,EAAUs3F,KAEtBt6B,EAAAA,GAAAA,GAAkBm6B,GAClB33D,GAAgB23D,IoByXhBW,CAAS7hF,EAAOlW,EAAQC,EAAU6tF,GAASD,GAASxB,GrB3d5B,EACxB+I,EACArG,EACA6H,MAEAj3D,EAAAA,EAAAA,KAAU,KACRzvB,eAAe8nF,EAAYtqF,GACzB,IAAKA,EAAEuqF,cACL,OAGF,MAAMC,EAAQp/D,SAASq/D,cACvB,GAAID,IAAU,CAAC7C,EAAAA,GAAmB+C,EAAAA,IAAyBtwF,SAASowF,EAAMh3F,IACxE,OAGF,MAAMm3F,EAAa3qF,EAAEuqF,cAAcK,QAAQ,QAAQC,UAAU,EAlBxC,OAmBf,MAAEC,GAAU9qF,EAAEuqF,cACpB,IAAI1P,EAAgB,GAOpB,GALA76E,EAAEyyB,iBACEq4D,EAAMjzF,OAAS,IACjBgjF,QAAckQ,EAAAA,GAAAA,GAA8BD,IAGzB,IAAjBjQ,EAAMhjF,QAAiB8yF,EAA3B,CAIA,GAAI9P,EAAMhjF,OAAS,IAAMqxF,EAAe,CACtC,MAAM8B,QAAuB3+C,QAAQ4+C,IAAIpQ,EAAMnlF,KAAKw1F,GAC3CzX,GAAgByX,EAAKzkE,KAAMykE,EAAuB,IAAjBrQ,EAAMhjF,QAAgBghF,GAAyBz+E,SAAS8wF,EAAKx3F,UAEvG2tF,GAAgB95E,GAAgBA,EAAYjE,OAAO0nF,KAGjDL,GACFjD,EAA0BiD,EAAYH,MAAAA,OAAb,EAAaA,EAAOh3F,KAMjD,OAFA43B,SAASyI,iBAAiB,QAASy2D,GAAa,GAEzC,KACLl/D,SAAS0I,oBAAoB,QAASw2D,GAAa,MAEpD,CAAC5C,EAA2BwB,EAAe7H,KqB8a9C8J,CAAkBzD,GAA2BrG,GAAgB1C,GAE7D,MAAMyM,IAAsB7zD,EAAAA,EAAAA,KAAY,KAClConD,GACFsK,OAED,CAACtK,EAAgBsK,KAEdrO,IAAmBrjD,EAAAA,EAAAA,KAAY/0B,MAAOq4E,EAAelH,KACzD0N,SAAqBh1C,QAAQ4+C,IAAIpQ,EAAMnlF,KAAKw1F,GAASzX,GAAgByX,EAAKzkE,KAAMykE,EAAMvX,SACrF,IAEG0X,IAAoB9zD,EAAAA,EAAAA,KAAY/0B,MAAOq4E,EAAelH,KAC1D0N,GAAe,IACV95E,YACM8kC,QAAQ4+C,IAAIpQ,EAAMnlF,KAAKw1F,GAASzX,GAAgByX,EAAKzkE,KAAMykE,EAAMvX,UAE3E,CAACpsE,KAEE+jF,IAAwB/zD,EAAAA,EAAAA,KAAY,KACxC8pD,GAAehuF,EAAAA,KACd,IAEGk4F,IAAah0D,EAAAA,EAAAA,KAAY/0B,iBAAkD,IAA3CwG,EAA2C,wDAAzBjC,EAAyB,uCAC/E,GAAwB,yBAApB6pB,EACF,OAGF,IAAI46D,EAAqBjkF,GAEzB,GAAIs7E,GAAsB,CACxB,MAAM4I,QAAe9I,KACrB,GAAI8I,EAAQ,CACV,MAAM,KAAEh/C,EAAF,SAAQgkB,EAAR,SAAkB2mB,GAAaqU,EACrCD,EAAqB,OAAO/X,GAC1BmK,GACAnxC,GACA,EACA,CAAEyB,MAAO,CAAEuiB,SAAAA,EAAU2mB,SAAAA,OAK3B,MAAM,KAAEtgF,EAAF,SAAQ4Q,IAAa9K,EAAAA,EAAAA,GAAkBwjF,GAAQvsE,SAErD,IAAK23E,EAAmB3zF,SAAWf,IAAS4pE,EAC1C,OAIF,MAAM,iBAAEhkE,IAAqBzD,EAAAA,EAAAA,MAEvByyF,EAAYF,EAAmB3zF,OA1Wd,KADA,KA4WvB,IAAIf,MAAAA,OAAA,EAAAA,EAAMe,QAAS6zF,EAAW,CAC5B,MAAMC,EAAc70F,EAAKe,OAAS6zF,EAYlC,YAXArwE,GAAW,CACTta,KAAM,CACJnL,QAAS,4CACTg2F,WAAY,CACV,sBAAuBD,EACvB,aAAcA,EAAc,EAAI,IAAM,IAExC3qF,aAAa,KAOnB,MAAMq2C,EAAejsB,SAASgH,cAA8BklB,EAAAA,IAE5D,GAAIk0C,EAAmB3zF,QAAUf,EAAM,CACrC,GAAI4vF,KAAa/7D,GAAS,CACxB,MAAMkhE,GAAapvF,EAAAA,EAAAA,GAAcC,GAC3BovF,EAA0BxL,GAA2BzsE,SACtD3W,KAAKG,MAAMwuF,EAAavL,GAA2BzsE,SAClDk4E,EAAyBrF,GAASsF,cAAgBtF,GAASsF,aAAeH,EAEhF,GACGC,GAA2BA,EAA0BpF,GAASuF,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBrF,GAASsF,aAAgBH,EACzBnF,GAASuF,QAAUH,EAWvB,OAVAzwE,GAAW,CACTta,KAAM,CACJnL,QAASP,GAAK,gBAAgBy7D,EAAAA,EAAAA,IAAoBo7B,IAClDC,YAAY,EACZnrF,aAAa,UAIjBq2C,MAAAA,GAAAA,EAAc98B,SAMlBtV,EAAY,CACVnO,KAAAA,EACA4Q,SAAAA,EACAH,YAAaikF,EACbzkF,YAAAA,EACAiC,SAAAA,IAIA03D,GACFxsE,GAAgB,CACd6S,YAAAA,EACAiC,SAAAA,IAIJs3E,GAA2BzsE,SAAUpX,EAAAA,EAAAA,GAAcC,GAEnDgjF,GAAW,CAAEptF,OAAAA,EAAQsW,WAAW,IAE5BhD,EAAAA,IAAUyxC,GAAgBA,IAAiBjsB,SAASq/D,eACtDrU,GAA8B/+B,GAIhCkhC,uBAAsB,KACpBsQ,UAED,CACDj4D,EAAiBrpB,GAAas7E,GAAsBniB,EAAcgf,GAAYptF,EAC9Eu2F,GAAelG,GAAoBtnE,GAAYqrE,GAAU/7D,GAAS1lB,EAAa/Q,GAAiBmB,GAAM+qF,KAGlGgM,IAA+B70D,EAAAA,EAAAA,KAAY,KAC/CuqD,KACAJ,OACC,CAACI,GAAiBJ,KAEf2K,IAA2B90D,EAAAA,EAAAA,KAAY,KAC3CoqD,KACAM,KACAJ,OACC,CAACF,GAAqBM,GAAiBJ,KAEpCyK,IAAwB/0D,EAAAA,EAAAA,KAAY,CACxCg1D,EAA4BxlF,KAE5B,GAAIwlF,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAE/4F,EAAF,QAAMoqB,EAAN,SAAe5U,GAAaujF,EAOlC,YANAxM,GAAoB,CAClBvsF,GAAAA,EACAoqB,QAAAA,EACA7W,YAAAA,EACAiC,SAAAA,IAKJ,MAAM,SAAEA,KAAawjF,GAAaD,GAAQ,GAErCA,GAAyC,IAAjC90F,OAAOC,KAAK80F,GAAU30F,OAGjCoN,EAAY,IACPsnF,EACHxlF,YAAAA,IAJGwkF,GAAWp0F,QAAQ6R,GAAWjC,KAOpC,CAACwkF,GAAYxL,GAAqB96E,KAErCgtB,EAAAA,EAAAA,KAAU,KACJh+B,GACF8sF,IAAiBh6E,IACfulF,GAAsBr4F,EAAsB8S,QAG/C,CAAC9S,EAAsBq4F,GAAuBvL,MAEjD9uD,EAAAA,EAAAA,KAAU,KACJusD,IACF2B,GAAQ3B,GACRyB,KACA1H,uBAAsB,KACpB,MAAMlhC,EAAejsB,SAAS4W,eAAe2lD,EAAAA,KAC7CO,EAAAA,GAAAA,GAAqB7wC,GAAc,SAGtC,CAACmnC,EAAeyB,KAEnB,MAAM1S,IAAsBh2C,EAAAA,EAAAA,KAAY,SACtCt3B,EAAqB+I,EAAoByjF,GACtC,IADqE3D,EACrE,wDACH7oF,EAAU,IACLA,EACHurB,qBAAqB,GAGnBuzD,GAAkB0N,GACpB/L,KACAK,IAAiBh6E,IACf45E,KACA2L,GAAsB,CAAErsF,QAAAA,EAAS+I,SAAAA,GAAYjC,GAC7CwxE,uBAAsB,KACpBsQ,GAAcC,WAIlB7jF,EAAY,CAAEhF,QAAAA,EAAS+I,SAAAA,IACvBuvE,uBAAsB,KACpBsQ,GAAcC,SAGjB,CACD/J,EAAgB2B,GAAqBK,GAAiBJ,GAA2B2L,GACjFzD,GAAe5jF,IAGXynF,IAAkBn1D,EAAAA,EAAAA,KAAY,CAACxoB,EAAe/F,EAAoByjF,KAClE1N,GAAkB0N,GACpB/L,KACAK,IAAiBh6E,IACf45E,KACA2L,GAAsB,CAAEv9E,IAAAA,EAAK/F,SAAAA,GAAYjC,GACzCwxE,uBAAsB,KACpBsQ,IAAc,WAIlB5jF,EAAY,CAAE8J,IAAAA,EAAK/F,SAAAA,IACnBuvE,uBAAsB,KACpBsQ,IAAc,SAGjB,CACD9J,EAAgB2B,GAAqBK,GAAiBJ,GAA2B2L,GACjFzD,GAAe5jF,IAGX0nF,IAAwBp1D,EAAAA,EAAAA,KAAY,CACxCq1D,EAA4D5jF,EAAoByjF,KAEhF,GAAwB,yBAApB77D,EACF,OAGEmuD,GAAkB0N,EACpB1L,IAAiBh6E,IACfulF,GAAsB,CACpB94F,GAAIo5F,EAAap5F,GACjBoqB,QAASgvE,EAAahvE,QACtB5U,SAAAA,GACCjC,MAGLg5E,GAAoB,CAClBvsF,GAAIo5F,EAAap5F,GACjBoqB,QAASgvE,EAAahvE,QACtB5U,SAAAA,IAIJ,MAAMquC,EAAejsB,SAASgH,cAA8BklB,EAAAA,IACxD1xC,EAAAA,IAAUyxC,GAAgBA,IAAiBjsB,SAASq/D,eACtDrU,GAA8B/+B,GAGhCqoC,GAAW,CAAEptF,OAAAA,EAAQsW,WAAW,IAChC2vE,uBAAsB,KACpBsQ,UAED,CACDv2F,EAAQotF,GAAY9uD,EAAiB07D,GAAuBvL,GAAiB8H,GAAe9I,GAC5FhB,IAGI8N,IAAyBt1D,EAAAA,EAAAA,KAAY,KACzCmoD,GAAW,CAAEptF,OAAAA,EAAQsW,WAAW,IAChC2vE,uBAAsB,KACpBsQ,UAED,CAACv2F,EAAQotF,GAAYmJ,KAElBiE,IAAiBv1D,EAAAA,EAAAA,KAAajsB,IAC9ByzE,GACFgC,IAAiBh6E,IACfulF,GAAsB,CAAEhhF,KAAAA,GAAQvE,MAElC84E,OAEA56E,EAAY,CAAEqG,KAAAA,IACdu0E,QAED,CAACA,GAAgByM,GAAuBvL,GAAiB97E,EAAa85E,IAEnEgO,IAAmBx1D,EAAAA,EAAAA,KAAY,KAC/BwnD,EACFgC,IAAiBh6E,IACfulF,GAAsB,CAAEtjF,UAAU,GAAQjC,MAGvCwkF,IAAW,KAEjB,CAACe,GAAuBf,GAAYxK,GAAiBhC,IAElDiO,IAAmBz1D,EAAAA,EAAAA,KAAa7jC,IACvB,aAATA,GACFisF,GAAsB,CAAE5sF,MAAO,KAC/B6sF,GAAkB,CAAE7sF,WAAOJ,MAE3BitF,GAAkB,CAAE7sF,MAAO,KAC3B4sF,GAAsB,CAAE5sF,WAAOJ,OAEhC,CAACgtF,GAAuBC,KAErBqN,IAAuB11D,EAAAA,EAAAA,KAAY,KACvC,MAAM8f,EAAejsB,SAASgH,cAA8BklB,EAAAA,IAEvD73C,EAAAA,IAA2B43C,IAAiBjsB,SAASq/D,eAK1DpzC,MAAAA,GAAAA,EAAc98B,OACdvhB,YAAW,KACT2oF,KACAE,OA7nBgC,MAsnBhCA,OASD,CAACA,GAAgBF,KAEduL,IAAuB31D,EAAAA,EAAAA,KAAY,KACvC,MAAM8f,EAAejsB,SAASgH,cAA8BklB,EAAAA,IAE5D,IAAK73C,EAAAA,IAA2B43C,IAAiBjsB,SAASq/D,cAIxD,OAHA9I,KACAG,UACAE,KAIF3qC,MAAAA,GAAAA,EAAc98B,OACdvhB,YAAW,KACT2oF,KACAG,KACAE,OA/oBgC,OAipBjC,CAACL,GAAqBG,GAAiBE,KAEpCmL,IAA0B51D,EAAAA,EAAAA,KAAY,KAC1ChjC,GAAS,CAAEf,GAAIlB,EAAQC,SAAAA,EAAUmB,KAAM,gBACtC,CAACa,GAAUjC,EAAQC,KAEtB0/B,EAAAA,EAAAA,KAAU,KACJ6S,GAAsBrlC,EAAAA,IACxBqiF,OAED,CAACh9C,EAAoBg9C,MAExB7vD,EAAAA,EAAAA,KAAU,KACH6jB,IAEDV,EACFotC,KAEAxpF,YAAW,KACTypF,OAnqB0B,QAsqB7B,CAACrtC,EAAoBqtC,GAAaD,GAAc1sC,IAEnD,MAAMs3C,IAAoB71D,EAAAA,EAAAA,KAAY,KACpC,OAAQosD,IACN,KAAKhG,GAAgBmG,KACnByH,KACA,MACF,KAAK5N,GAAgBoG,OACdrB,KACL,MACF,KAAK/E,GAAgBiG,KACnBoF,KACA,MACF,KAAKrL,GAAgBkG,SACfhB,IACFD,KAEF7B,IAAiBh6E,IACfulF,GAAsB,GAAIvlF,SAM/B,CACD48E,GAAiB4H,GAAY7I,GAAqBsG,GAAoBnG,GAAsB9B,GAC5F6B,GAAqB0J,KAGjBe,GAA6B1J,KAAoBhG,GAAgBoG,SAAW7J,GAE5EmP,IAAoBn7B,EAAAA,GAAAA,GAAYywB,GAAgB,GAChD2O,GAAwB3O,GAAkB0K,GAE1CkE,GAAuB,IAAItlF,KACjCslF,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAIzlF,KAC7BylF,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQlK,IACN,KAAKhG,GAAgBiG,KACnBiK,GAAsB,sBACtB,MACF,KAAKlQ,GAAgBoG,OACnB8J,GAAsBR,GAClB,sCACA,uBAGR,MAAMr6D,IAAYqE,EAAAA,GAAAA,GAChB,YACC+d,GAAsB,QACvBmtC,IAAmB,kBAGfuL,IAA4Bz2D,EAAAA,GAAAA,GAChC,6BACCye,GAAW,YACZusC,GACKT,IAAoB,cACpBA,IAAoB,cAGrBmM,IAAsBx2D,EAAAA,EAAAA,KAAY,KACtCwpD,IAAiBh6E,IACfulF,GAAsB,GAAIvlF,QAE3B,CAACulF,GAAuBvL,KAErBiN,GAASrK,KAAoBhG,GAAgBiG,KAC/CoF,GACArF,KAAoBhG,GAAgBkG,SAAWkK,GAC7CxC,GAEN,OACE,0BAAKv4D,UAAWA,IACbknD,IAAkBpkC,GACjB,mBAAC,GAAD,CACE75C,OAAQujF,IAAkByO,GAAAA,EAAAA,KAC1BC,UAAW1O,IAAkByO,GAAAA,EAAAA,WAA2B1N,KAAsB0N,GAAAA,EAAAA,UAC9EE,OAAQ1O,EACRrF,aAAcQ,KAGlB,mBAAC,GAAD,CACEtoF,OAAQA,EACRC,SAAUA,EACVyxF,sBAAuBA,GACvBz8E,YAAaA,GACb6mF,QAAS7mF,GAAY1P,OAASq9E,GAAO,GACrCiK,iBAAkBA,EAClBx1E,cAAeA,EACf7J,aAAcA,EACdg2C,QAASA,EACTpR,eAAgBA,EAChB2pD,gBAAiBlO,GACjBlC,kBAAmBA,EACnB1uE,cAAeA,EACfuwE,eAAgBA,GAChBf,eAAgBA,EAChBuP,aAAcvB,GACdiB,OAAQzC,GACRgD,gBAAiBR,GACjBS,aAAcnD,GACdlP,QAASmP,KAEX,mBAAC,GAAD,CACErvF,OAAQD,EAAUC,OAClBF,OAAQC,EAAUD,OAClB0yF,kBAAmBzqD,EACnBm4C,QAAS0D,GACTmO,OAAQlB,KAETQ,IACC,mBAAC,GAAD,CACErxF,OAAQimF,GACR5Y,WAAgC,cAApB/vE,EACZ8kC,QAAS+jD,GACTxsF,QAAS03F,KAGb,mBAAC,GAAD,CACErxF,OAAQ8lF,GACR1jD,QAAS4jD,GACT3vF,OAAQA,EACRo8F,iBAAkB9iF,EAClBI,UAAWA,KAEb,mBAAC,GAAD,CACE/P,OAAQgoF,GACR5lD,QAAS6lD,GACTyK,iBAAkBxK,GAClByK,cAAexK,KAEjB,mBAAC,GAAD,CACEnoF,OAAQqoF,GACRvmE,MAAOwmE,GACPjnE,UAAWknE,GACXE,iBAAkBA,GAClB5nE,SAAU2nE,GACVoK,eAAgBlC,GAChB7H,SAAUC,GACV1mD,QAASumD,GACTkK,gBAAiBpqD,EACjB4hD,YAAaA,KAEf,mBAAC,GAAD,CACErqF,OAAQypF,GACRqJ,aAAc53F,QAAQmoF,GACtBC,YAAasG,GACbtxD,QAASs4D,GACTxuD,QAASsnD,KAEX,0BAAKnyF,GAAG,mBACN,0BAAKw/B,UAAU,eAAe+J,IAAKmjD,KACnC,mBAAC,GAAD,CAAyB/D,QAASiP,KAClC,mBAAC,GAAD,CACE94F,OAAQA,EACRC,SAAUA,EACV0qF,YAAc11E,GAAY1P,OAAgB,GAAPq9E,GACnCztC,UAAW8+C,KAEb,0BAAKvzD,UAAU,yBACZqiB,IAAiC,IAAhBkqC,IAA0BsD,KAAyBlE,GACnE,mBAAC,GAAD,CACE3rD,WAAWqE,EAAAA,GAAAA,GAAe,eAAgBoqD,IAAwB,aAClE5+E,OAAK,EACL4kC,cAA0B90C,IAAhB4sF,EACV3qD,MAAM,cACNmlD,WAAYqS,GACZh1D,UAAU,6BAEV,wBAAGpE,UAAU,8BAGhBwtD,KAAkBjC,GAAc1yE,IAC/B,mBAACkpB,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNL,QAASwtD,GAAmBE,GAAkBiL,GAC9C91D,UAAW/hC,GAAK,sBAChB29B,WAAWqE,EAAAA,GAAAA,GAAe,iBAAkB6pD,GAA6BrtE,SAAW,qBAEpF,mBAACm/B,GAAA,EAAD,CACEroC,KAAM4zE,EACNxmF,KAAM8T,EACNmpB,KAAK,UAIVv1B,EAAAA,GACC,mBAACs1B,GAAA,EAAD,CACE/B,UAAW86D,GACXjrF,OAAK,EACL+xB,MAAM,cACNL,QAASqtD,GAAmBE,GAAkBmL,GAC9C71D,UAAU,gCAEV,wBAAGpE,UAAU,eACb,wBAAGA,UAAU,kBACZ4uD,KAAqBS,IAAsB,mBAAC1tD,GAAA,EAAD,CAASC,MAAM,UAG7D,mBAAC,GAAD,CACE5B,UAAW4uD,GAAmB,YAAc,GAC5C/+E,OAAK,EACL+xB,MAAM,cACNmlD,WAAYsS,GACZj1D,UAAU,gCAEV,wBAAGpE,UAAU,gBAGjB,mBAACg8D,GAAA,EAAD,CACEx7F,GAAG,qBACHlB,OAAQA,EACRC,SAAUA,EACV2iF,KAAO3tE,GAAY1P,OAAgB,GAAPq9E,GAC5Bz7C,YACEopD,IAAwBt/D,IAv4BG,IAw4BvB,GACAy7D,GAA0B3pF,GAAK,WAErC45F,kBAAmBpK,GACnBqK,aAAcp5C,IAAYvuC,GAAY1P,OACtCs3F,oBAAqB1vF,EAAAA,IAA2BmiF,GAChDwN,4BAA6B/H,IAAsBpD,IAAwBK,GAC3E+K,SAAUlP,GACV6N,OAAQA,GACRsB,kBAAmBxN,KAEpBzC,GAAsBloF,QAAQotF,KAC7B,mBAAC5vD,GAAA,EAAD,CAASC,MAAM,SAEhBkqD,GACC,mBAAC/pD,GAAA,EAAD,CACElyB,OAAK,EACL45E,OAAK,EACLzpD,UAAU,mBACV4B,MAAM,cACNL,QAAS44D,GACT/1D,UAAU,2BAEV,wBAAGpE,UAAU,mBAGhBmrD,IAAyB0E,KAAyBlE,GACjD,mBAAC,GAAD,CACE3rD,UAAWsuD,GAAoB,YAAc,GAC7Cz+E,OAAK,EACL+xB,MAAM,cACNmlD,WAAYwH,GACZnqD,UAAU,6BAEV,wBAAGpE,UAAU,sBAGhB6vD,IAAwBC,IACvB,2BAAM9vD,UAAU,oBACbu8D,EAAAA,EAAAA,IAA0BzM,GAAoBG,GAAmBpvE,UAGtE,mBAAC,GAAD,CACEvhB,OAAQA,EACRC,SAAUA,EACV0J,OAAQ2qF,GACR4I,gBAAiBjiB,KAEnB,mBAAC,KAAD,CACEtxE,OAAQorF,GACRoI,OAAQlI,GACRlpD,QAASipD,GACToI,cAAelI,GACf1H,eAAgBA,KAElB,mBAAC,GAAD,CACE7F,iBAAkB4I,KAAyBlE,EAC3CzE,eAAgBA,GAChBC,eAAgBA,GAChBC,aAAcQ,GACdP,aAAct+D,KAEfoiE,GACC,mBAAC,GAAD,CACEvnF,UAAWunF,EACXliF,OAAQqlF,GACRjjD,QAASmjD,KAGZjC,GACC,mBAAC,GAAD,CACEtjF,OAAQwlF,GACRlC,YAAaA,EACblhD,QAASsjD,KAGb,mBAAC,GAAD,CACErvF,OAAQA,EACRC,SAAUA,EACV0J,OAAQ2lF,IAAoBnB,GAC5B6F,YAAaA,GACbD,gBAAiBA,GACjBn9B,OAAQo5B,GACRjkD,QAASyjD,GACT4N,cAAehI,GACf8H,gBAAiBjiB,GACjBoiB,YAAajD,GACbkD,eAAgBzH,GAChB0H,aAAc7C,GACdlN,eAAgBA,OAIrB+C,IACC,mBAAC9tD,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,SACN5B,UAAU,SACVuB,QAASouD,GACTvrD,UAAU,0BAEV,wBAAGpE,UAAU,iBAGjB,mBAAC+B,GAAA,EAAD,CACEgI,IAAKimD,GACLngF,OAAK,EACL+xB,MAAM,YACN5B,WAAWqE,EAAAA,GAAAA,GAAessD,IAAkB7tC,GAAW,YAAa+sC,IAAwB,aAC5Fp7C,SAAU4lD,GACVj2D,UAAW/hC,GAAKw4F,IAChBt5D,QAAS64D,GACTlqC,cACEygC,KAAoBhG,GAAgBmG,MAAQE,GAAwBt/B,QAAoB/xD,GAG1F,wBAAGqgC,UAAU,cACb,wBAAGA,UAAU,kBACb,wBAAGA,UAAU,wBACb,wBAAGA,UAAU,gBAEdgxD,IACC,mBAAC,KAAD,CACE/nF,OAAQmqF,GACRkI,aAAe5pD,OAAoC/xC,EAAnBo6F,GAChC+C,eAAiB/Q,OAAuCpsF,EAAtBo7F,GAClC1vD,QAAS6oB,GACTpf,oBAAqBqf,GACrB2nC,gBAAiBpqD,IAGpBs8C,QKxqCP,IAAetuD,EAAAA,EAAAA,KAR0BuK,IACvC,MAAM,SAAE39B,GAAa29B,EACf8yD,GAAe5yD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB99B,GAAU,GAG/E,OAAOywF,EAAe,mBAACA,EAAiB9yD,QAAYtqC,KCGtD,IAAe+/B,EAAAA,EAAAA,KARkCuK,IAC/C,MAAM,SAAE39B,GAAa29B,EACf+yD,GAAuB7yD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB99B,GAGrF,OAAO0wF,EAAuB,mBAACA,EAAyB/yD,QAAYtqC,KCGtE,IAAe+/B,EAAAA,EAAAA,KARmCuK,IAChD,MAAM,OAAEhhC,GAAWghC,EACbgzD,GAAwB9yD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0BnhC,GAGvF,OAAOg0F,EAAwB,mBAACA,EAA0BhzD,QAAYtqC,KCGxE,IAAe+/B,EAAAA,EAAAA,KAR0BuK,IACvC,MAAM,OAAEhhC,GAAWghC,EACbizD,GAAe/yD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBnhC,GAGrE,OAAOi0F,EAAe,mBAACA,EAAiBjzD,QAAYtqC,KCGtD,IAAe+/B,EAAAA,EAAAA,KAR0BuK,IACvC,MAAM,OAAEhhC,GAAWghC,EACbkzD,GAAehzD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBnhC,GAGrE,OAAOk0F,EAAe,mBAACA,EAAiBlzD,QAAYtqC,KCGtD,IAAe+/B,EAAAA,EAAAA,KARyBuK,IACtC,MAAM,OAAEhhC,GAAWghC,EACbmzD,GAAcjzD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBnhC,GAGnE,OAAOm0F,EAAc,mBAACA,EAAgBnzD,QAAYtqC,KCKpD,IAAe+/B,EAAAA,EAAAA,KAVuCuK,IACpD,MAAM,uBAAEzY,GAA2ByY,EAC7BozD,GAA4BlzD,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8B5Y,GAI/C,OAAO6rE,EAA4B,mBAACA,EAA8BpzD,QAAYtqC,KCChF,IAAe+/B,EAAAA,EAAAA,KAR8BuK,IAC3C,MAAM,OAAEhhC,GAAWghC,EACbqzD,GAAmBnzD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBnhC,GAG7E,OAAOq0F,EAAmB,mBAACA,EAAqBrzD,QAAYtqC,KCyGxD49F,GAA2B9wF,EAAAA,GAA0B,IAAMxK,EAAAA,QAAsBtC,EAEvF,SAAS69F,GAAQh0C,GACf,MAAqB,SAAdA,EAAKi0C,MAAmBj0C,EAAK9oD,MAAQogF,EAAAA,GAAAA,IAAkCt3B,EAAK9oD,MAGrF,MAyaA,IAAeg/B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IACC,MAAMkjC,GAAQC,EAAAA,EAAAA,IAAYnjC,IAExBq+F,UAAWC,EAAqBC,WAAYC,EADxC,gBAC0D3d,EAD1D,aAC2E4d,GAC7Ez+F,EAAOuiB,SAASm8E,OAAOx7D,IAAU,IAE/B,aAAE31B,GAAiBvN,EAAO2B,SAC1BJ,GAAqBpB,EAAAA,EAAAA,IAAyBH,IAC9C,kBACJsN,EAAmB1B,OAAO,QAAEqrB,GADxB,wBACmC3E,EADnC,aAC4D7N,GAC9DzkB,EAEEq/B,EAAoB,CACxB6D,MAAAA,EACAs7D,iBAAAA,EACA3d,gBAAAA,EACA4d,aAAAA,EACAnxF,kBAAAA,EACAmlC,oBAAoBlsC,EAAAA,EAAAA,IAAyBvG,GAC7Cs+F,oBAAAA,EACAK,qBAAsB75F,QAAQsI,EAAAA,KAA2BqS,EAAAA,EAAAA,IAAwBzf,IACjF+iD,oBAAoB5Q,EAAAA,EAAAA,IAAqBnyC,GACzCuP,mBAAoBvP,EAAOsP,QAAQC,mBACnCqvF,mBAAoB95F,QAAQ9E,EAAOsP,QAAQqe,SAC3CkxE,kBAAmB/5F,QAAQ9E,EAAOqL,aAClCyzF,uBAAwBh6F,QAAQ9E,EAAOoL,cACvCioB,eAAgBrzB,EAAOuiB,SAAS+Q,MAAMD,eACtC4vB,qBAAsBp4C,KAAKC,IAAI,EAAG9K,EAAO2B,SAAS4L,aAAa/H,OAAS,GACxE8sB,wBAAAA,EACA7N,aAAAA,GAGF,IAAKljB,IAAuB01B,EAAQC,OAClC,OAAOmI,EAGT,MAAM,OAAEp/B,EAAF,SAAUC,EAAUmB,KAAM6F,GAAoB3F,EAC9C0lB,GAAYC,EAAAA,EAAAA,IAASjnB,GACrByF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BkqB,GAAMC,EAAAA,EAAAA,IAAcpqB,EAAQC,GAC5B6iD,GAAYlnB,EAAAA,EAAAA,IAAgB57B,EAAQC,IAClCA,OAAQokB,EAAa9f,UAAW+f,GAAmBtkB,EAAOsG,YAE5Dm2E,EAAU/2E,IAAQq5F,EAAAA,EAAAA,IAAiBr5F,EAAMxF,GACzC8+F,GAAkBnsD,EAAAA,EAAAA,IAA0B7yC,EAAQC,GACpDg/F,EAA0C,WAApB/3F,EACtBg4F,EAA6C,cAApBh4F,EACzBqrC,EAAmC,WAApBrrC,GAAgChH,IAAakB,EAAAA,GAC5DuwC,EAAY7sC,QAAQY,IAAQwsC,EAAAA,EAAAA,IAAcxsC,IAC1CotC,EAAehuC,QACnBY,GAAQ6sC,IAAiBZ,IAAaoB,EAAAA,EAAAA,IAAiBrtC,KAAUA,EAAKowB,aAElE4c,EAAgB5tC,QAAQqlB,IAAOwoB,EAAAA,EAAAA,IAAoB3yC,EAAQmqB,EAAIhpB,KAC/DyxC,GAAeF,GAAiBssD,EAEtC,MAAO,IACF3/D,EACHp/B,OAAAA,EACAC,SAAAA,EACAgH,gBAAAA,EACA+f,UAAAA,EACAk4E,sBAAuBr6F,QAAQY,MAAAA,OAAD,EAACA,EAAM6c,UACrCk6D,SAAUwiB,KAAyBv5F,GAAQ+2E,KAAauiB,EACxDC,oBAAAA,EACAC,uBAAAA,EACAE,wBAAyB15F,MAAAA,OAAF,EAAEA,EAAM05F,wBAC/BC,oBAAqB35F,MAAAA,OAAF,EAAEA,EAAM25F,oBAC3BC,uBACEp/F,IAAakB,EAAAA,IACV0D,SAASm6F,IAAuBn8C,MAAAA,OAAxB,EAAwBA,EAAWt9C,UAC3CV,QAAQuf,GAAeC,GAE5B2/B,oBAAqBnB,EAAYA,EAAUt9C,OAAS,EACpDyiC,4BAA6BjoC,EAAOioC,4BACpC16B,aAAAA,EACAokC,UAAAA,EACAmB,aAAAA,EACAF,YAAAA,EACAF,cAAAA,KA/Ec9P,EAzaiB,IAmC/B,IAnCgC,OACpC3iC,EADoC,SAEpCC,EAFoC,gBAGpCgH,EAHoC,UAIpC+f,EAJoC,oBAKpCg4E,EALoC,aAMpC1xF,EANoC,QAOpCkvE,EAPoC,wBAQpC2iB,EARoC,oBASpCC,EAToC,uBAUpCC,EAVoC,oBAWpCr7C,EAXoC,iBAYpCu6C,EAZoC,MAapCt7D,EAboC,gBAcpC29C,EAdoC,aAepC4d,EAfoC,kBAgBpCnxF,EAhBoC,mBAiBpCmlC,EAjBoC,oBAkBpC6rD,EAlBoC,qBAmBpCK,EAnBoC,mBAoBpC57C,EApBoC,mBAqBpCxzC,EArBoC,mBAsBpCqvF,EAtBoC,kBAuBpCC,EAvBoC,uBAwBpCC,EAxBoC,eAyBpCzrE,EAzBoC,4BA0BpC4U,EA1BoC,qBA2BpCgb,EA3BoC,UA4BpCtR,EA5BoC,sBA6BpCwtD,EA7BoC,aA8BpCrsD,EA9BoC,YA+BpCF,EA/BoC,cAgCpCF,EAhCoC,wBAiCpCpgB,EAjCoC,aAkCpC7N,GACI,EACJ,MAAM,SACJviB,EADI,iBAEJ0U,EAFI,SAGJ2oF,EAHI,iBAIJ14E,EAJI,qBAKJ9mB,EALI,sBAMJ0B,EANI,kBAOJ+9F,EAPI,aAQJC,EARI,YASJ5rD,EATI,eAUJlrB,EAVI,WAWJorB,IACE9zB,EAAAA,EAAAA,OAEImR,MAAOF,GAAgBmzB,KAEzBrhD,GAAOm/B,EAAAA,GAAAA,MACNgrD,EAAeuS,KAAoBt+D,EAAAA,EAAAA,IAASw6D,GAAAA,EAAAA,OAC5C+D,GAAYC,KAAiBx+D,EAAAA,EAAAA,OAC7By+D,GAAcC,KAAmB1+D,EAAAA,EAAAA,OACjC2+D,GAAkBC,KAAuB5+D,EAAAA,EAAAA,KAAS,GAEnDo7C,GAAW8iB,IACfpuE,EAAck0B,EAAAA,IAEZ3S,GAAsBvhB,EAAcG,EAAAA,IACjCH,EAAco0B,EAAAA,IAEjBp0B,GAAeK,EAAAA,IACZL,EAAci0B,EAAAA,IAIf86C,IAAkBC,EAAAA,GAAAA,GAAuBjgG,EAAQi+F,IACjDiC,IAAoBD,EAAAA,GAAAA,GAAuBhgG,EAAUg+F,IACrDkC,IAA2BF,EAAAA,GAAAA,GAAuBh5F,EAAiBg3F,IACnEmC,IAAwBH,EAAAA,GAAAA,GAAuBptD,EAAcorD,IAC7DoC,IAAuBJ,EAAAA,GAAAA,GAAuBttD,EAAasrD,IAC3DqC,IAAyBL,EAAAA,GAAAA,GAAuBxtD,EAAewrD,IAC/DsC,IAAmBN,EAAAA,GAAAA,GAAuBzjB,EAASyhB,MACnDqC,KAA2BD,KAAyBD,GACpDI,IAAoBP,EAAAA,GAAAA,GAAuB1jB,GAAU0hB,IACrDwC,IAAsBR,EAAAA,GAAAA,GAAuBP,GAAYzB,IACzDyC,IAAqBT,EAAAA,GAAAA,GAAuBvuD,EAAWusD,IAEvD0C,IAAoB/kC,EAAAA,GAAAA,GAAY5Y,GAEhCtV,QACkBrtC,IAAtBsgG,IAAmCA,GAAoB39C,EAAuB29C,QAAoBtgG,GAG9F,QAAEmjD,GAAF,cAAWo9C,GAAX,gBAA0BC,IAsalC,SACEC,EACA99C,EACA29C,EACA3gG,GAEA,MAAOwjD,EAASu9C,IAAc5/D,EAAAA,EAAAA,KAAUh0B,EAAAA,IAClC44D,GAAcC,EAAAA,GAAAA,KAEdg7B,OAA8C3gG,IAAtBsgG,GAAmCA,IAAsB39C,EAyBvF,OAxBIg+C,IACEF,EACFC,GAAW,GAEXh7B,MAIJsT,EAAAA,GAAAA,IAAY,KACLynB,GACHC,GAAW,KAEZ,CAACD,IAYG,CACLt9C,QAASA,IAAYw9C,EACrBJ,cAAeE,EAZjB,SAAuBpzF,GACE,cAAnBA,EAAEuzF,cAAgCvzF,EAAEukD,SAAWvkD,EAAEolD,eACnDiuC,EAAWl8F,QAAQ7E,UAU2BK,EAChDwgG,gBAAiBC,EAPnB,WACEC,GAAW,SAMyC1gG,GA3cF6gG,EACjDl5D,GAA+B5U,IAAmB+tE,EAAAA,GACnDn+C,EACA29C,GACA3gG,IAGF2/B,EAAAA,EAAAA,KAAU,IACD3/B,GACHspC,EAAAA,GAAAA,IAAsB,KACtBrnC,EAAS,CAAEf,QAAIb,YAEfA,GACH,CAACL,EAAQiC,KAEZo3E,EAAAA,GAAAA,IAAY,KACVomB,GAAiB9D,GAAAA,EAAAA,MACjBgE,QAAct/F,GACdw/F,QAAgBx/F,KACf,CAACL,KAGJ2/B,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEyhE,GAAmB36F,OAC3B,IAAK26F,EACH,OAGF,MAAMrvD,EAAe,KACftrC,OAAO26F,eAAe9qD,SAAWxd,SAASuoE,gBAAgBhiB,aAC5DvmD,SAASpJ,KAAKihB,UAAUU,IAAI,oBAE5BvY,SAASpJ,KAAKihB,UAAUC,OAAO,qBAMnC,OAFAwwD,EAAe7/D,iBAAiB,SAAUwQ,GAEnC,KACLqvD,EAAe5/D,oBAAoB,SAAUuQ,MAE9C,KAEHpS,EAAAA,EAAAA,KAAU,KACJ3Y,GACFs4E,EAAS,CAAE7yF,OAAQzM,MAEpB,CAACA,EAAQgnB,EAAWs4E,KAEvB3/D,EAAAA,EAAAA,KAAU,MACHu/D,GAAyB16E,GAC5BoC,EAAiB,CAAE5mB,OAAAA,MAEpB,CAACA,EAAQgnB,EAAWk4E,EAAuB16E,EAAcoC,IAE5D,MAAM06E,IAAkBr8D,EAAAA,EAAAA,KAAav3B,IACnC,GAAIlE,EAAAA,GACF,OAGF,MAAM,MAAEgvF,GAAU9qF,EAAE6zF,cAAgB,GAC9BC,EAAkBhJ,GAASA,EAAMjzF,OAAS,GAAKsvB,MAAMtiB,KAAKimF,GAG7Dn1F,QAAQ6mD,GAAuB,kBAAdA,EAAK9oD,OAEtB6zB,MAAMipE,IAETuB,GAAiB+B,EAAkB7F,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,YAC5D,IAEG8F,IAAqBx8D,EAAAA,EAAAA,KAAY,KACrCw6D,GAAiB9D,GAAAA,EAAAA,QAChB,IAEG+F,IAAuBz8D,EAAAA,EAAAA,KAAY,KACvC86D,IAAoB,KACnB,IAEG4B,IAAkB18D,EAAAA,EAAAA,KAAY,KAClC86D,IAAoB,KACnB,IAEG6B,IAAyB38D,EAAAA,EAAAA,KAAY,KACzCtuB,EAAiB,CAAE3W,OAAAA,IACnB2hG,KACA1/F,EAAS,CAAEf,GAAIlB,MACd,CAAC2W,EAAkB1U,EAAU0/F,GAAiB3hG,IAE3C6hG,IAAoB58D,EAAAA,EAAAA,KAAY,KACpChjC,EAAS,CAAEf,GAAIlB,MACd,CAACiC,EAAUjC,IAER20C,IAAuB1P,EAAAA,EAAAA,KAAY,KACvC2O,EAAY,CAAE5zC,OAAAA,MACb,CAAC4zC,EAAa5zC,IAEX40C,IAAiB3P,EAAAA,EAAAA,KAAY,KACjCvc,EAAe,CAAEC,QAAS,aACzB,CAACD,IAEEmsB,IAAmB5P,EAAAA,EAAAA,KAAY,KACnC6O,EAAW,CAAE9zC,OAAAA,MACZ,CAACA,EAAQ8zC,IAENguD,GtGlToB,EAAC7+D,EAAiB8+D,KAC5C,MAAOhtF,EAAO6xE,IAAYzlD,EAAAA,EAAAA,IAAS4gE,GAqBnC,OAnBApiE,EAAAA,EAAAA,KAAU,KACHoiE,IAIDA,EAAap4D,WAAW,KAC1Bi9C,EAASmb,GAETC,GAASxzE,MAAMyzE,EAAAA,GAAsBh/D,EAAO++D,GAASE,KAAKxoD,MACvDvD,MAAMgE,IACL,MAAMnrC,EAAM2qC,IAAIC,gBAAgBO,IAChCsnC,EAAAA,GAAAA,IAAazyE,GACVmnC,MAAK,KACJywC,EAAU,OAAM53E,eAIzB,CAAC+yF,EAAc9+D,IAEX8+D,EAAehtF,OAAQ1U,GsG4RA8hG,CAAoBl/D,EAAOs7D,GAEnD79D,IAAYqE,EAAAA,GAAAA,GAChBy7D,IAAqB,mBACrBjC,GAAoB,kBACpB3d,GAAmB,kBACnB2d,GAAoBF,GAAuB,UAC3C+D,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAA6Bt9D,EAAAA,GAAAA,GACjC,sBACC+d,GAAsB,SAGnBw/C,IAAkCC,EAAAA,EAAAA,IACtCx/F,EAAMo8F,EAAyBC,IAI3B,oBACJoD,GADI,mBACiBC,GADjB,mBAEJC,GAFI,kBAEgBC,GAFhB,iBAGJC,GAHI,2BAGcC,KAChB1+D,EAAAA,EAAAA,KACF,IrItUW,SAAyClT,EAAqBurD,GAC3E,MAAMsmB,EAAc7xE,GAAek0B,EAAAA,GARzB,GAUN,GACE49C,EAmCR,SAA6B9xE,GAC3B,GAAIA,EAAcG,EAAAA,GAA0C,CAC1D,MAAMtkB,EAAkBlC,KAAKymB,IAC3BzmB,KAAKC,IAAkB,IAAdomB,EAAoBH,IAC7BD,IAGImyE,EAAmBp4F,KAAKymB,IACd,IAAdJ,EACAJ,IAGF,OAAOjmB,KAAKymB,IACVJ,EAAcnkB,EAAkBk2F,EAChCpyE,IAIJ,GAAIK,EAAcK,EAAAA,GAAyC,CACzD,MAAMxkB,EAAkBlC,KAAKymB,IAC3BzmB,KAAKC,IAAkB,GAAdomB,EAAmBH,IAC5BD,IAGF,OAAOjmB,KAAKymB,IACVJ,EAAcnkB,EACd8jB,IAIJ,OAAIK,EAAcL,GACTA,GAGFK,EArEkBgyE,CAAoBhyE,GACvCiyE,EAAkBjyE,GAAek0B,EAAAA,GACnC,GACA,GAEEg+C,EAAgB3mB,EAClBumB,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAenyE,EAAck0B,EAAAA,GAC/Bv6C,KAAKymB,IAAI0xE,EAAmBD,EAnBR,KAoBpBC,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,oBAAAA,EACAC,mBAAAA,EACAC,mBAXyBlmB,EACtB0mB,EAAkB,EAAKT,EACxB,EAUFE,kBARwBnmB,EACrB0mB,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EApBA,IAqCvBP,2BArCuB,IAqB+BO,GqImThDC,CAAgCpyE,EAAasvE,KACnD,CAACA,GAAkBtvE,IAGfqyE,IAAkBv+D,EAAAA,GAAAA,GACtB,wBACCw7D,IAAoB,cACrBA,IAAoBX,KAAiB98C,GAAsB,eAO7DvZ,EAAAA,GAAAA,IACEy2D,IAAmBE,IALH,KAChBj+F,EAAS,CAAEf,QAAIb,GAAa,CAAEkjG,gBAAgB,WAM9CljG,OACAA,OACAA,GACAiN,MAAAA,OAAA,EAAAA,EAAclK,IAAIogG,GAAAA,KAAsB,KAG1Cj6D,EAAAA,GAAAA,IAAem1D,EAAsB5+F,IACrCypC,EAAAA,GAAAA,IAAeuZ,EAAoBthD,GAEnC,MAAMiiG,GAAsB5+F,SACzBm6F,IAAwBuB,KAAqBD,KAA2BD,KACrED,IAAyBkC,IAEzBoB,GAA6B7+F,QACjCy7F,IAA0BF,IAAyBC,IAAwBrB,GAEvEne,GAAiBh8E,QAAQ4+F,IAAuB3gD,GAAsBk8C,GAE5E,OACE,0BACE99F,GAAG,eACHw/B,UAAWA,GACXijE,gBAAiB/C,GACjB/vD,MAAQ,sCACqB2xD,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNnE,oDAEf5d,IAA8B,SAAV39C,EAAmB2gE,EAAAA,GAAsBC,EAAAA,eAEnE5hE,QAAU70B,EAAAA,IAA2BC,EAAqBw0F,QAAoBxhG,GAE9E,0BACEa,GAAG,mBACH2vC,MAAOixD,GAAyB,wBAAuBA,UAA0BzhG,IAEnF,0BAAKa,GAAG,0BACP8+F,IAAmBE,IAClB,sCACE,0BAAKx/D,UAAU,kBAAkBojE,YAAavD,GAAmBe,QAAkBjhG,GACjF,mBAAC,GAAD,CACEL,OAAQggG,GACR//F,SAAUigG,GACVj5F,gBAAiBk5F,GACjB38C,QAASA,KAEX,mBAACjhB,GAAA,EAAD,CACEpO,KAAM6T,EAA8B,OAAS5U,IAAmBE,EAAAA,GAAsB,QAAU,OAChGkP,UAAWwgB,EACXvV,eAAa,EACbC,oBAAqBA,GACrBq2D,OAAQlD,IAER,mBAAC,GAAD,CACEhjE,IAAM,GAAEmiE,MAAmBE,MAAqBC,KAChDngG,OAAQggG,GACR//F,SAAUigG,GACV9+F,KAAM++F,GACN3jB,QAAS+jB,GACThkB,SAAUikB,GACVvpB,YAAa0oB,GACbzoB,cAAe2oB,GACfr8C,QAASA,GACTi5B,gBAAiBinB,KAEnB,0BAAKhjE,UAAW4iE,IACb/C,IACC,mBAAC,GAAD,CACEvgG,OAAQggG,GACR//F,SAAUigG,GACVj5F,gBAAiBk5F,GACjBjT,cAAeA,EACfC,WAAYsU,GACZj+C,QAASA,KAGZw7C,GACC,0BAAKt+D,UAAU,wCAAwCyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAC/E,mBAACoiC,GAAA,EAAD,CACEC,KAAK,OACLiL,OAAK,EACLrL,MAAM,YACN5B,UAAU,mBACVuB,QAASy/D,IAET,wBAAGhhE,UAAU,eACb,+BAAO39B,EAAK,uBAAwBihD,EAAqB,QAI9Dy/C,IACC,0BAAK/iE,UAAW2hE,IACd,0BAAK3hE,UAAU,4BACb,+BACG4hE,MAKRn1F,EAAAA,IAA2BizF,IAC1B,0BAAK1/D,UAAU,wCAAwCyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAC/E,mBAACoiC,GAAA,EAAD,CACEC,KAAK,OACLiL,OAAK,EACL9I,QAAM,EACNnE,UAAU,wBACVuB,QAAS0S,IAER5xC,EAAK29F,GAAqB,qBAAuB,sBAIvDvzF,EAAAA,IAA2BkzF,IAC1B,0BAAK3/D,UAAU,wCAAwCyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAC/E,mBAACoiC,GAAA,EAAD,CACEC,KAAK,OACLiL,OAAK,EACL9I,QAAM,EACNnE,UAAU,wBACVuB,QAAS2S,IAER7xC,EAAK,cAIXoK,EAAAA,IAA2BmzF,IAC1B,0BAAK5/D,UAAU,wCAAwCyB,IAAKp/B,EAAKq/B,MAAQ,WAAQ/hC,GAC/E,mBAACoiC,GAAA,EAAD,CACEC,KAAK,OACLiL,OAAK,EACL9I,QAAM,EACNnE,UAAU,wBACVuB,QAAS4S,IAER9xC,EAAK,gBAIZ,mBAAC,GAAD,CACEkE,gBAAiBk5F,GACjBnzF,SAAU81C,EACV05B,QAAS+jB,KAEX,mBAAC,GAAD,CACE52F,OAAQ9E,QAAQyK,GAChBy8B,QAASwzD,IAEX,mBAAC,GAAD,CACE51F,OAAQ9E,QAAQ85F,GAChB5yD,QAASyzD,IAEX,mBAAC,GAAD,CAAa71F,OAAQi1F,IACrB,mBAAC,GAAD,CAAkBj1F,OAAQk1F,MAI9B,mBAAC,GAAD,CACE5zD,QAASw1D,GACTjkB,QAAS+jB,GACT1f,eAAgBA,MAGnB1zE,EAAAA,IAA2B,mBAAC,GAAD,CAAcH,SAAUnI,QAAQ65F,MAG/D1+F,GACC,mBAAC,GAAD,CACE2J,OAAQm2F,GACR9/F,OAAQA,EACRgkD,oBAAqBA,EACrBjY,QAAS41D,GACTqC,QAASpC,KAGb,0BAAKlnB,eAAa,GACfroD,MAAAA,OADH,EACGA,EAAyBjvB,KAAI,CAAC8uB,EAAwB9f,IACrD,mBAAC,GAAD,CACE6xF,cAAe7xF,EACfyrB,IAAK3L,EAAuBhxB,GAC5BgxB,uBAAwBA,YCzd9BzJ,IAAwBzY,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,G,IAErDi0F,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,wBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,0BAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,iCAAAA,IAAAA,mCAAAA,EAAAA,EAAAA,2BAAAA,IAAAA,6BAAAA,EAAAA,EAAAA,yBAAAA,IAAAA,2BAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qBAAAA,EAAAA,EAAAA,qBAAAA,IAAAA,uBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,UAAAA,IAAAA,YAAAA,EAAAA,EAAAA,YAAAA,IAAAA,cAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,cAAAA,IAAAA,gBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qB,CAAAA,KAAAA,GAAAA,KAiCL,MA0WA,IAAe9jE,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAA6D,gBAApD,OAAEC,EAAF,UAAUmkG,EAAV,aAAqBC,GAA+B,EAC3D,MAAQ3jG,MAAO4jG,IAAuB7kF,EAAAA,EAAAA,IAAwBzf,IAAW,IACjEU,MAAO6jG,IAAuBC,EAAAA,EAAAA,IAA2BxkG,IAAW,IACpEU,MAAO+jG,IAAmBC,EAAAA,EAAAA,IAAuB1kG,IAAW,GAC9D0F,EAAOzF,GAAS0F,EAAAA,EAAAA,IAAW3F,EAAQC,QAAUK,EAC7CqxC,EAAYjsC,IAAQwsC,EAAAA,EAAAA,IAAcxsC,GAClC4S,EAAO8rF,GAAankG,IAAUinB,EAAAA,EAAAA,IAASjnB,IAAUwZ,EAAAA,EAAAA,IAAWzZ,EAAQC,QAAUK,EAE9EwhD,EAAgBxpC,IAAQqsF,EAAAA,EAAAA,IAAiBrsF,GACzCssF,EAAY9/F,SACfu/F,GACED,IACCtiD,GACDp8C,KACC4sC,EAAAA,EAAAA,IAAqBtyC,EAAQ0F,EAAKvE,OAElC+lB,EAAAA,EAAAA,IAASxhB,EAAKvE,OAASizF,EAAAA,EAAAA,IAAY1uF,IAASA,EAAK+tC,aAAe/tC,EAAKowB,cAErE+uE,EAAkB//F,QAAQ7E,IAAM,UAAID,EAAOgN,WAAWtE,SAASzI,UAA/B,aAAI,EAAoCygB,gBACxEgzB,EAAoBhuC,MAAAA,GAAH,UAAGA,EAAMgU,gBAAT,aAAG,EAAgBg6B,kBACpC7xB,EAAoB5hB,EAAM,UAAGD,EAAOgN,WAAWtE,SAASzI,UAA9B,iBAAG,EAAoC2gB,kBAAvC,aAAG,EAAgDH,YAASngB,EAE5F,MAAO,CACLskG,UAAAA,EACA9iD,cAAAA,EACApO,kBAAAA,EACA/B,UAAAA,EACAjlC,OAAQ4L,MAAAA,OAAF,EAAEA,EAAMnX,GACdmjG,mBAAAA,EACAC,mBAAAA,EACAE,eAAAA,EACAI,gBAAAA,EACAhjF,kBAAAA,KAjCc+gB,EA1W2B,IA0BzC,UA1B0C,OAC9C3iC,EAD8C,aAE9C6kG,EAF8C,UAG9CV,EAH8C,SAI9CW,EAJ8C,aAK9CV,EAL8C,aAM9CW,EAN8C,gBAO9CC,EAP8C,YAQ9CC,EAR8C,cAS9CC,EAT8C,oBAU9CC,EAV8C,aAW9CC,EAX8C,iBAY9CC,EAZ8C,cAa9CxjD,EAb8C,OAc9Cp1C,EAd8C,UAe9Ck4F,EAf8C,UAgB9CjzD,EAhB8C,QAiB9C3F,EAjB8C,eAkB9C7D,EAlB8C,mBAmB9Cm8D,EAnB8C,mBAoB9CC,EApB8C,eAqB9CE,EArB8C,oBAsB9Cc,EAtB8C,gBAuB9CV,EAvB8C,kBAwB9CnxD,EAxB8C,kBAyB9C7xB,GACI,EACJ,MAAM,wBACJ2jF,EADI,sBAEJlY,EAFI,kBAGJC,EAHI,wBAIJkY,EAJI,iBAKJC,EALI,oBAMJtuB,EANI,qBAOJx2B,EAPI,iBAQJ+kD,EARI,yBASJC,EATI,yBAUJC,IACE5lF,EAAAA,EAAAA,MAGE6lF,GAAgBv9D,EAAAA,EAAAA,IAAuB,OACtCw9D,EAAoBC,EAAkBC,IAAqB74D,EAAAA,GAAAA,KAE5D84D,GAAwBhhE,EAAAA,EAAAA,KAAY,KACxC0gE,EAAyB,CAAE3lG,OAAQA,EAASwgB,OAAQoB,IACpDsmB,EAAe6M,EAAAA,GAAAA,cACd,CAAC/0C,EAAQ4hB,EAAmBsmB,EAAgBy9D,IAEzCO,GAA0BjhE,EAAAA,EAAAA,KAAY,KAC1C2gE,EAAyB,CAAE5lG,OAAQA,EAASihB,KAAMW,EAAmBX,OACrEinB,EAAe6M,EAAAA,GAAAA,SACfixD,MACC,CAAChmG,EAAQgmG,EAAmBpkF,EAAmBgkF,EAA0B19D,IAEtEi+D,GAAiClhE,EAAAA,EAAAA,KAAaxkC,IAClD8kG,EAAwB,CAAE9kG,MAAAA,IAEtBA,EAAM8E,QACRkjB,GAAsB+8E,KAEvB,CAACA,EAAyBD,IAEvBa,GAAiCnhE,EAAAA,EAAAA,KAAaxkC,IAClD4sF,EAAsB,CAAE5sF,MAAAA,MACvB,CAAC4sF,IAEEgZ,GAA6BphE,EAAAA,EAAAA,KAAaxkC,IAC9C6sF,EAAkB,CAAE7sF,MAAAA,MACnB,CAAC6sF,IAEEtrC,GAAmB/c,EAAAA,EAAAA,KAAY,KACnC0b,EAAqB,CAAEl0C,OAAAA,MACtB,CAACk0C,EAAsBl0C,KAEnBk3B,EAAsB2iE,IAA2BnlE,EAAAA,EAAAA,KAAU0jE,IAElEllE,EAAAA,EAAAA,KAAU,KACRj5B,YAAW,KACT4/F,GAAyBzB,KAnHD,OAqHzB,CAACA,IAEJ,MAAM9hG,IAAOm/B,EAAAA,GAAAA,KACPqkE,GAAapC,EACjBiB,IAAiBoB,EAAAA,GAAAA,QACftC,GAAcuC,QACZrB,IAAiBoB,EAAAA,GAAAA,YACnBtC,GAAcwC,YACZtB,IAAiBoB,EAAAA,GAAAA,WACnBtC,GAAcyC,YACX,EACH7B,EACFZ,GAAc0C,OACZ1B,EACFhB,GAAc2C,YACZ7B,EACFd,GAAc4C,cACZ7B,EACFf,GAAc6C,UACZ5B,EACFjB,GAAc8C,cACZ5C,EACFiB,IAAqBtwD,EAAAA,GAAAA,QACnBmvD,GAAc+C,cACZ5B,IAAqBtwD,EAAAA,GAAAA,gBACvBmvD,GAAcgD,sBACZ7B,IAAqBtwD,EAAAA,GAAAA,WACvBmvD,GAAciD,iBACZ9B,IAAqBtwD,EAAAA,GAAAA,mBACvBmvD,GAAckD,yBACZ/B,IAAqBtwD,EAAAA,GAAAA,iBACvBmvD,GAAcmD,uBACZhC,IAAqBtwD,EAAAA,GAAAA,mBACvBmvD,GAAcoD,yBACZjC,IAAqBtwD,EAAAA,GAAAA,kBACvBmvD,GAAcqD,wBACZlC,IAAqBtwD,EAAAA,GAAAA,oBACvBmvD,GAAcsD,0BACZnC,IAAqBtwD,EAAAA,GAAAA,2BACvBmvD,GAAcuD,iCACZpC,IAAqBtwD,EAAAA,GAAAA,qBACvBmvD,GAAcwD,2BACZrC,IAAqBtwD,EAAAA,GAAAA,mBACvBmvD,GAAcyD,yBACZtC,IAAqBtwD,EAAAA,GAAAA,gBACvBmvD,GAAc0D,uBACZvC,IAAqBtwD,EAAAA,GAAAA,mBACvBmvD,GAAc2D,0BACZxC,IAAqBtwD,EAAAA,GAAAA,aACvBmvD,GAAc4D,mBACZzC,IAAqBtwD,EAAAA,GAAAA,QACvBmvD,GAAc6D,cACZ1C,IAAqBtwD,EAAAA,GAAAA,WACvBmvD,GAAc8D,iBACZ3C,IAAqBtwD,EAAAA,GAAAA,eACvBmvD,GAAc+D,qBACZ5C,IAAqBtwD,EAAAA,GAAAA,UACvBmvD,GAAcgE,gBACZ7C,IAAqBtwD,EAAAA,GAAAA,WACvBmvD,GAAciE,iBACZ9C,IAAqBtwD,EAAAA,GAAAA,aACvBmvD,GAAckE,wBACZ/nG,EACF0kG,EACFb,GAAcmE,gBACZhoG,EAEEioG,GAAmB,WAAG5iD,EAAAA,GAAAA,GAAiB6gD,IAAY,UAAhC,SAA0C,EAkL7DgC,GACJp7F,EAAAA,IACGo5F,KAAerC,GAAcwC,aAC7BH,KAAerC,GAAcyC,YAC7BJ,KAAerC,GAAc8C,eAC7B5C,EAGCoE,IAAkBzjE,EAAAA,GAAAA,GACtB,sBACAwjE,IAAgB,cACf5kE,GAAwB2hE,IAAwB,iBAGnD,OACE,0BAAK5kE,UAAU,eACb,mBAAC+B,GAAA,EAAD,CACE/B,UAAU,eACVnwB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UACLT,QAAS8J,EACTjH,UAA0B/hC,GAAfwlG,GAAoB,cAAsB,iBAErD,0BAAK99D,IAAKo7D,EAAenlE,UAAW8nE,MAEtC,mBAACjmE,GAAA,EAAD,CACEpO,KAAOwP,GAAwB2hE,EAAuB,OAAS,aAC/D9iE,UAAW8lE,IA5MjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKpE,GAAc2C,YACjB,OAAO,6BAAK9jG,GAAK,gBACnB,KAAKmhG,GAAc0C,OACjB,OACE,sCACE,mBAAC//D,GAAA,EAAD,CACEE,yBAAyB,cACzBhyB,MAAOsvF,EACP/8D,SAAU6+D,IAEZ,mBAAC1jE,GAAA,EAAD,CACElyB,OAAK,EACLmyB,KAAK,UACLJ,MAAM,cAENL,QAAS,IAAMk1C,EAAoB,CAAEjoE,YAAYw4C,EAAAA,EAAAA,IAAc/xC,KAAKC,SACpEkvB,UAAU,2BAEV,wBAAGpE,UAAU,oBAIrB,KAAKwjE,GAAc8C,cACjB,OAAO,6BAAKjkG,GAAK2uC,EAAY,wBAA0B,oBACzD,KAAKwyD,GAAc+C,cACjB,OAAO,6BAAKlkG,GAAK,SACnB,KAAKmhG,GAAcgD,sBACjB,OAAO,6BAAKnkG,GAAK2uC,EAAY,oBAAsB,oBACrD,KAAKwyD,GAAciD,iBACjB,OAAO,6BAAKpkG,GAAK,eACnB,KAAKmhG,GAAcoD,yBACjB,OAAO,6BAAKvkG,GAAK,0BACnB,KAAKmhG,GAAcyD,yBACjB,OAAO,6BAAK5kG,GAAK,wBACnB,KAAKmhG,GAAc0D,uBACjB,OAAO,6BAAK7kG,GAAK,oBACnB,KAAKmhG,GAAc2D,0BACjB,OAAO,6BAAK9kG,GAAK,eACnB,KAAKmhG,GAAcmD,uBACjB,OAAO,6BAAKtkG,GAAK,uBACnB,KAAKmhG,GAAcqD,wBACjB,OAAO,6BAAKxkG,GAAK,iBACnB,KAAKmhG,GAAcsD,0BACjB,OAAO,6BAAKzkG,GAAK,wBACnB,KAAKmhG,GAAcuD,iCACjB,OAAO,6BAAK1kG,GAAK,wBACnB,KAAKmhG,GAAcwD,2BACjB,OAAO,6BAAK3kG,GAAK,qBACnB,KAAKmhG,GAAc6D,cACjB,OAAO,6BAAKhlG,GAAK,2BACnB,KAAKmhG,GAAc8D,iBACjB,OAAO,6BAAuBjlG,GAAlB6hG,EAAuB,WAAmB,YACxD,KAAKV,GAAciE,iBACjB,OACE,sCACE,6BAAKplG,GAAK,eACV,8BAAS29B,UAAU,SAChB9e,IAAsBA,EAAkBf,WACvC,mBAAC4hB,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UACLoC,UAAW/hC,GAAK,QAChBk/B,QAASgkE,GAET,wBAAGvlE,UAAU,eAGhB9e,GAAqBA,EAAkBf,WACtC,sCACE,mBAAC4hB,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,SACNI,KAAK,UACLoC,UAAW/hC,GAAK,UAChBk/B,QAAS8jE,GAET,wBAAGrlE,UAAU,iBAEf,mBAACoY,GAAA,EAAD,CACEnvC,OAAQm8F,EACR/5D,QAASi6D,EACT1oF,MAAOva,GAAK,cACZyB,KAAMzB,GAAK,kBACX0/C,sBAAoB,EACpB1J,aAAch2C,GAAK,UACnBi2C,eAAgBktD,OAO9B,KAAKhC,GAAckE,mBACjB,OAAO,6BAAiBrlG,GAAZ2uC,EAAiB,oBAA4B,mBAC3D,KAAKwyD,GAAc+D,qBACjB,OAAO,6BAAKllG,GAAK,oCACnB,KAAKmhG,GAAc4C,cACjB,OACE,mBAACjgE,GAAA,EAAD,CACE9xB,MAAOuvF,EACPn9D,YAAapkC,GAAK,sBAClB0lG,iBAAe,EACfnhE,SAAU8+D,IAGhB,KAAKlC,GAAc6C,UACjB,OACE,mBAAClgE,GAAA,EAAD,CACE9xB,MAAOyvF,EACPr9D,YAAapkC,GAAK,mBAClB0lG,iBAAe,EACfnhE,SAAU++D,IAGhB,KAAKnC,GAAcmE,WACjB,OAAO,6BAAKtlG,GAAK2uC,EAAY,qBAAuB,qBACtD,KAAKwyD,GAAcwC,YACjB,OAAO,6BAAK3jG,GAAK,gBACnB,KAAKmhG,GAAckD,yBACjB,OAAO,6BAAKrkG,GAAK,uBACnB,KAAKmhG,GAAcyC,WACnB,KAAKzC,GAAc4D,mBACjB,OAAO,6BAAK/kG,GAAK,iBACnB,KAAKmhG,GAAcgE,gBACjB,OAAO,6BAAKnlG,GAAK,cACnB,QACE,OACE,sCACE,wCACA,8BAAS29B,UAAU,SAChBmhB,GACC,mBAACpf,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UACLoC,UAAW/hC,GAAK,cAChBk/B,QAAS+f,GAET,wBAAGthB,UAAU,mBAGhBikE,GACC,mBAACliE,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UACLoC,UAAW/hC,GAAK,QAChBk/B,QAASwjE,GAET,wBAAG/kE,UAAU,eAGhB+S,GACC,mBAAChR,GAAA,EAAD,CACElyB,OAAK,EACL+xB,MAAM,cACNI,KAAK,UACLoC,UAAW/hC,GAAK,cAChBk/B,QAASyjE,GAET,wBAAGhlE,UAAU,mBAuCtBgoE,S,4BC1UT,SAASC,GACPC,EACAC,EACArkF,EACAskF,GAEA,MAAOrkG,EAAaskG,IAAWC,EAAAA,GAAAA,GAC7BxkF,EAAeqkF,OAAiBxoG,EAChCyoG,OACAzoG,EACA4oG,EAAAA,IAKF,MAAO,CAACxkG,EAAaskG,KAFJtkG,IAAgBqkG,GAAWrkG,EAAY,KAAOqkG,EAAQ,KAKzE,SAASI,GACPC,EACAP,EACAC,EACArkF,EACAvhB,EACAsc,GAEA,MAAM6pF,GAAgB9gE,EAAAA,EAAAA,OAEtB+wC,EAAAA,GAAAA,IAAY,KACNuvB,IAAsBO,GAAsBlmG,GAAgBsc,IAC9D6pF,EAAc7nF,SAAU8nF,EAAAA,EAAAA,IACtBpmG,EACAsc,EACA4pF,MAGH,CAAClmG,EAAcsc,EAAUqpF,EAAmBO,IAE/C,MAAO1kG,EAAaskG,IAAWC,EAAAA,GAAAA,GAC7BxkF,EAAeqkF,OAAiBxoG,EAChC+oG,EAAc7nF,aACdlhB,EACuB,UAAvB8oG,EAAiCzqF,EAAAA,GAAqBgB,EAAAA,IAKxD,MAAO,CAACjb,EAAaskG,KAFJtkG,IAAgB2kG,EAAc7nF,SAAW9c,EAAY,KAAO2kG,EAAc7nF,QAAQ,KCpKrG,MAGM+nF,IAAwBtvF,EAAAA,EAAAA,KAAU/J,GAAOA,KAAM,KAAK,GAE1D,IAAIs5F,IAA8B,E,qGCoFlC,MAAMC,GAAO,CACX,CAAEpoG,KAAM,QAASkc,MAAO,mBACxB,CAAElc,KAAM,YAAakc,MAAO,mBAC5B,CAAElc,KAAM,QAASkc,MAAO,mBACxB,CAAElc,KAAM,QAASkc,MAAO,mBACxB,CAAElc,KAAM,QAASkc,MAAO,oBA6Y1B,SAASmsF,GAAgCC,GACvC,MAAO,CAEJ,gDAA+CA,wBAE/C,4DAA2DA,yBAC5DtlG,KAAK,MAGT,UAAeg8B,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAoC,YAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,GAC1BiD,GAAeC,EAAAA,EAAAA,IAAmBnD,EAAQC,IACxC6f,YAAa8pF,EAAf,cAAgCl+F,IAAkBoT,EAAAA,EAAAA,IAAyB9e,IAAW,IACtF,SAAEwf,GAAc9T,GAAiBk+F,GAAmBl+F,EAAck+F,IAAqB,IAErF14F,KAAM6uC,EAAW16B,aAAcF,GAAqBnlB,EAAO6Q,OAC3DK,KAAM4xB,GAAc9iC,EAAO4L,MAE7BooB,EAAUtuB,IAAQ02E,EAAAA,EAAAA,IAAY12E,GAC9BisC,EAAYjsC,IAAQwsC,EAAAA,EAAAA,IAAcxsC,GAClCmkG,EAAgB71E,GAAY2d,IAAayiD,EAAAA,EAAAA,IAAY1uF,GACrDwyB,EAAUxyB,MAAAA,GAAH,UAAGA,EAAMgU,gBAAT,aAAG,EAAgBwe,QAC1B4xE,EAAmBD,GAAiBnkG,IACpCA,EAAKqkG,aAAgBrkG,EAAKgU,WAAahU,EAAKgU,SAASswF,gBACrDC,EAAgBJ,GAAiBnkG,KAASwkG,EAAAA,EAAAA,IAAiBxkG,EAAM,gBAAkBA,EAAK+tC,WACxF02D,EAAmBN,GAAiBnkG,KAASwkG,EAAAA,EAAAA,IAAiBxkG,EAAM,aAAeA,EAAK+tC,WACxFy2B,GAAoBC,EAAAA,EAAAA,IAAwBnqE,EAAQC,GAE1D,IAAImqG,EACAC,EACA/xF,EAOJ,OANI4O,EAAAA,EAAAA,IAASjnB,KACXoqG,EAAiBpqG,EACjBqY,GAAOmB,EAAAA,EAAAA,IAAWzZ,EAAQqqG,GAC1BD,EAAoB9xF,IAASA,EAAK4N,UAAWE,EAAAA,EAAAA,IAAU9N,IAGlD,CACL4qB,OAAOC,EAAAA,EAAAA,IAAYnjC,GACnB2xC,UAAAA,EACA04D,eAAAA,EACAnnG,aAAAA,EACAsc,SAAAA,EACAoqF,gBAAAA,EACAQ,kBAAAA,EACAP,cAAAA,EACAC,iBAAAA,EACAG,cAAAA,EACAE,iBAAAA,EACA7yF,cAAetX,EAAOsX,cACtBm7B,oBAAoBlsC,EAAAA,EAAAA,IAAyBvG,GAC7C2T,aAAcjO,MAAAA,OAAF,EAAEA,EAAMiO,aACpB8Q,aAAczkB,EAAOykB,aACrBpa,iBAAkBrK,EAAOqK,iBACzB6/D,kBAAAA,EACAnqB,UAAAA,EACA56B,iBAAAA,EACA2d,UAAAA,EACAwnE,gBAAiB5kG,MAAAA,OAAF,EAAEA,EAAMkrD,eACnBi5C,GAAiB3xE,GAAW,CAAEA,QAAAA,MAC9BkyE,GAAqB9xF,GAAQ,CAAEiyF,cAAa,UAAEjyF,EAAK+N,mBAAP,aAAE,EAAkB9e,QApDtDq7B,EAhZuB,IA2BrC,IA3BsC,OAC1C3iC,EAD0C,aAE1ColG,EAF0C,qBAG1CmF,EAH0C,MAI1CtnE,EAJ0C,UAK1CyO,EAL0C,eAM1C04D,EAN0C,cAO1C/yF,EAP0C,aAQ1CpU,EAR0C,SAS1Csc,EAT0C,gBAU1CoqF,EAV0C,kBAW1CQ,EAX0C,cAY1CP,EAZ0C,iBAa1CC,EAb0C,cAc1CG,EAd0C,iBAe1CE,EAf0C,cAgB1CI,EAhB0C,QAiB1CryE,EAjB0C,UAkB1C6nB,EAlB0C,iBAmB1C56B,EAnB0C,UAoB1C2d,EApB0C,mBAqB1C2P,EArB0C,aAsB1C9+B,EAtB0C,aAuB1C8Q,EAvB0C,kBAwB1CylD,EAxB0C,iBAyB1C7/D,EAzB0C,gBA0B1CigG,GACI,EACJ,MAAM,wBACJG,EADI,gBAEJC,EAFI,gBAGJC,EAHI,SAIJzoG,EAJI,yBAKJ0oG,EALI,gBAMJt4B,EANI,gBAOJC,EAPI,aAQJtsE,EARI,kBASJ4kG,EATI,6BAUJC,IACE7qF,EAAAA,EAAAA,MAGEw2B,GAAelO,EAAAA,EAAAA,IAAuB,MAEtCD,GAAgBC,EAAAA,EAAAA,IAAuB,MACvCvlC,GAAOm/B,EAAAA,GAAAA,MACNqI,EAAWugE,IAAgB3pE,EAAAA,EAAAA,IAAS,IACpC4pE,EAAgBC,IAAqB7pE,EAAAA,EAAAA,MAEtCmJ,GAAOnG,EAAAA,EAAAA,KAAQ,IAAO,IACtBylE,EAAgB,CAAC,CACnBxoG,KAAM,UAAWkc,MAAOo0B,EAAY,qBAAuB,iBACxD,MACF83D,MACCW,EAAoB,CAAC,CACvB/oG,KAAM,cAAekc,MAAO,qBACzB,KACH,CAAC6sF,EAAmBP,EAAel4D,IACjCu5D,EAAU3gE,EAAKC,GAAWnpC,MAEzBsoG,EAAYjlG,GAAaskG,GAASmC,IF5J5B,SACb14D,EACAi4D,EACAC,EACAS,EACAF,EACAtB,EACA9c,EACAyd,EACAxqD,EACA56B,EACA2d,EACA5/B,EACAsc,EACAvf,EACAwkB,GAEA,IADApa,EACA,0DADmB,EAEnB,MAAMs/F,EAAyB,YAAZuB,GAA0BtB,EAA4BA,EAAVsB,EAEzDG,GAAYjnE,EAAAA,EAAAA,KAAQ,KACxB,GAAK0oD,GAAqB/sC,GAAc56B,EAIxC,OAAOmmF,EAAAA,EAAAA,IACLxe,EAAiBzpF,KAAI,QAAC,OAAEqJ,GAAH,SAAgBA,KACrCqzC,EACA56B,OACA7kB,EACA+J,KAED,CAACyiF,EAAkBziF,EAAkB01C,EAAW56B,IAE7C/F,GAAUglB,EAAAA,EAAAA,KAAQ,KACtB,GAAKmmE,GAAkBznE,EAIvB,OAAOyoE,EAAAA,EAAAA,IAAYhB,EAAeznE,GAAW,KAC5C,CAACA,EAAWynE,KAERiB,EAAmBC,EAAgBC,GAA2B9C,GACnEe,EAAYe,EAAiBjmF,EAAc4mF,IAGtCM,EAAkBC,EAAcC,GAAyB1C,GAC9D,QAASQ,EAAYyB,EAAgB3mF,EAAcvhB,EAAcsc,IAG5DssF,EAAqBC,EAAkBC,GAA6B7C,GACzE,YAAaQ,EAAYyB,EAAgB3mF,EAAcvhB,EAAcsc,IAGhEysF,EAAiBC,EAAcC,GAAyBhD,GAC7D,QAASQ,EAAYyB,EAAgB3mF,EAAcvhB,EAAcsc,IAG5D4sF,EAAkBC,EAAcC,GAAyBnD,GAC9D,QAASQ,EAAYyB,EAAgB3mF,EAAcvhB,EAAcsc,IAG5D+sF,EAAkBC,EAAeC,GAA0BtD,GAChE,QAASQ,EAAYyB,EAAgB3mF,EAAcvhB,EAAcsc,IAG5DktF,EAAuBC,EAAoBC,GAA+BhE,GAC/Ee,EAAYgB,EAAiBlmF,EAAcrF,GAG7C,IAAI1a,EACAskG,EACAmC,GAAgB,EAEpB,OAAQxB,GACN,IAAK,UACHjlG,EAAc8mG,EACdxC,EAAUyC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHhnG,EAAcgoG,EACd1D,EAAU2D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACHloG,EAAcinG,EACd3C,EAAU4C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACHnnG,EAAconG,EACd9C,EAAU+C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACHtnG,EAAcunG,EACdjD,EAAUkD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHznG,EAAc0nG,EACdpD,EAAUqD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACH5nG,EAAc6nG,EACdvD,EAAUwD,EACVrB,EAAgBsB,EAIpB,MAAO,CAAC9C,EAAYjlG,EAAaskG,EAASmC,GE4CgB0B,CACxDp6D,EACAi4D,EACAC,EACAC,EACAM,EACAtB,EACA1xE,EACAqyE,EACAxqD,EACA56B,EACA2d,EACA5/B,EACAsc,EACAvf,EACAwkB,EACApa,GAEIo4B,GAAY8H,EAAKh8B,WAAU,QAAC,KAAElN,GAAH,SAAcA,IAASsoG,MAElD,aAAE/qB,ID7KK,SACbnoC,EACAy0D,EACA7F,EACAmF,IAGAhqB,EAAAA,GAAAA,IAAsB,IAAmB,IAAjBssB,GAAiB,EACvC,GAAIA,GAAeA,IAAgB5B,EAAS,CAC1C,MAAMx4C,EAAYjc,EAAaj1B,QACzBurF,EAASr6C,EAAU3yB,cAA8B,YACnD2yB,EAAU8lB,UAAYu0B,EAAOvuB,YAC/BgsB,EAAiC,YAAZU,EAAwBzE,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvE+C,IAA8B,GAC9Bp5C,EAAAA,GAAAA,GAAiBsC,EAAWq6C,EAAQ,aAASzsG,OAAWA,OAAWA,EArB/C,KAsBpBqG,YAAW,KACT6iG,IAA8B,IAtBD,SA0BlC,CAAC0B,EAASV,KAGbhqB,EAAAA,GAAAA,IAAsB,IAAwB,IAAtBwsB,GAAsB,EAC5C,GAAI3H,IAAiBoB,EAAAA,GAAAA,SAAwBpB,IAAiB2H,EAC5D,OAGF,MAAMt6C,EAAYjc,EAAaj1B,QAC/B,IAAKkxC,EACH,OAGF,MAAMu6C,EAAYv6C,EAAU3yB,cAA8B,aACrDktE,GAAaA,EAAUzuB,UAAY9rB,EAAU8lB,YAIlDgxB,IAA8B,GAC9Bp5C,EAAAA,GAAAA,GACEsC,EACAA,EAAU9a,kBACV,aACAt3C,EACyB,EAAzBoyD,EAAU4lB,cAGZ3xE,YAAW,KACT6iG,IAA8B,IAtDG,KAyDnCgB,EAAqBnF,MACpB,CAACA,IAEJ,MAAM6H,GAAwBhoE,EAAAA,EAAAA,KAAY,KACxC,MAAMwtB,EAAYjc,EAAaj1B,QAC/B,IAAKkxC,EACH,OAGF,MAAMu6C,EAAYv6C,EAAU3yB,cAA8B,YAC1D,IAAKktE,EACH,OAGF,IAAI5tE,EAAsBonE,EAAAA,GAAAA,QACtB/zC,EAAU8lB,WAAay0B,EAAUzuB,YACnCn/C,EAAoB,YAAZ6rE,EACJzE,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGN+D,EAAqBnrE,KACpB,CAACoX,EAAc+zD,EAAsBU,IAoBxC,OAjBAtrE,EAAAA,EAAAA,KAAU,KACJ4pE,IAIJ0D,MACC,CAACA,EAAuBhC,IAWpB,CAAEtsB,cARY15C,EAAAA,EAAAA,KAAY,KAC3BskE,IAIJD,GAAsB2D,KACrB,CAACA,KCkFqBC,CAAgB12D,EAAcy0D,EAAS7F,EAAcmF,IAExE,mBAAE4C,GAAF,qBAAsBC,IC5Lf,SACb52D,GAEA,IADA62D,EACA,uDADuB,uCAGvB1tE,EAAAA,EAAAA,KAAU,KACR,SAAS2tE,IACP,MAAM76C,EAAYjc,EAAaj1B,QACzBgsF,EAAe96C,EAAU3yB,cAA8ButE,GACvDP,EAASr6C,EAAU3yB,cAA8B,YACnDytE,GAAgBT,IAClBS,EAAa18D,MAAM28D,UAAe/6C,EAAU4lB,aAAey0B,EAAOz0B,aAAlC,MAQpC,OAJAi1B,IAEA7mG,OAAO86B,iBAAiB,SAAU+rE,GAAc,GAEzC,KACL7mG,OAAO+6B,oBAAoB,SAAU8rE,GAAc,MAEpD,CAAC92D,EAAc62D,IAGlB,MAAMF,GAAqBloE,EAAAA,EAAAA,KAAY,KACrC,MAAMwtB,EAAYjc,EAAaj1B,QAC/B,GAAkC,WAA9BkxC,EAAU5hB,MAAM48D,UAAwB,CAC1C,MAAMC,EAAiBj7C,EAAUrhB,YAAcqhB,EAAUk7C,YACzDl7C,EAAU5hB,MAAM48D,UAAY,SAC5Bh7C,EAAU5hB,MAAM+8D,YAAe,GAAEF,SAElC,CAACl3D,IAEE42D,GAAuBnoE,EAAAA,EAAAA,KAAY,KACvC,MAAMwtB,EAAYjc,EAAaj1B,QAC/BkxC,EAAU5hB,MAAM48D,UAAY,SAC5Bh7C,EAAU5hB,MAAM+8D,YAAc,MAC7B,CAACp3D,IAEJ,MAAO,CAAE22D,mBAAAA,EAAoBC,qBAAAA,GDoJwBS,CAAmBr3D,IAEjEs3D,GAAaC,IE9LC,MACrB,MAAOD,EAAaE,IAAkB7sE,EAAAA,EAAAA,KAAkB,GAMxD,MAAO,CAAC2sE,GAJkB7oE,EAAAA,EAAAA,KAAY,KACpC+oE,GAAgBzsF,IAAaA,MAC5B,MFyLqC0sF,IAEhCj4B,QAASrG,KAAgCsG,EAAAA,GAAAA,IAAwB,CACvEC,QAAS1/B,EACT6gC,WA1F0B,MA6FtB62B,IAAuBjpE,EAAAA,EAAAA,KAAY,KACvCmoE,KACAW,OACC,CAACX,GAAsBW,KAEpBI,IAA4BlpE,EAAAA,EAAAA,KAAY,KAC5C4lE,EAA6BuD,EAAAA,GAAAA,cAC5B,CAACvD,KAGJlrE,EAAAA,EAAAA,KAAU,KACR6qE,EAAwB,CAAExpG,UAAWiqG,MACpC,CAACT,EAAyBS,IAE7B,MAAMlkF,GAAYqjF,GAAkBpqG,GAEpC2/B,EAAAA,EAAAA,KAAU,KACJnb,GACFomF,EAAkB,CAAE7jF,UAAAA,OAErB,CAAC6jF,EAAmB7jF,GAAWvC,IAElC,MAAM6pF,IAAoBppE,EAAAA,EAAAA,KAAa3gC,IACrC+tE,EAAgB,CACdryE,OAAQ+mB,GACR9mB,SAAUkB,EAAAA,GACVmD,UAAAA,EACA2B,OAAQ2sE,EAAAA,GAAAA,gBAET,CAAC7rD,GAAWsrD,IAETi8B,IAAkBrpE,EAAAA,EAAAA,KAAa3gC,IACnCguE,EAAgB,CAAEtyE,OAAQ+mB,GAAWziB,UAAAA,MACpC,CAACyiB,GAAWurD,IAETi8B,IAAoBtpE,EAAAA,EAAAA,KAAa/jC,IACrCe,EAAS,CAAEf,GAAAA,MACV,CAACe,IAEEusG,IAAqBvpE,EAAAA,EAAAA,KAAa3gC,IACtC0B,EAAa,CAAEhG,OAAQ+mB,GAAWziB,UAAAA,MACjC,CAACyiB,GAAW/gB,IAETyoG,IAAgCxpE,EAAAA,EAAAA,KAAY,KAChD+lE,OAAkB3qG,KACjB,IAuBH,IAAIquG,IArBJ/uE,EAAAA,EAAAA,KAAU,KACR,GAAK0I,EAAc9mB,SAAY/X,EAAAA,GAI/B,OAAOy/B,EAAAA,GAAAA,IAAcZ,EAAc9mB,QAAS,CAC1C2nB,wBAAyB,WACzBC,QAAU,CAACz7B,EAAG3F,IACRA,IAAcqhC,GAAAA,GAAAA,MAChB0hE,EAAalgG,KAAKymB,IAAIkZ,EAAY,EAAGD,EAAK/kC,OAAS,KAC5C,GACEwC,IAAcqhC,GAAAA,GAAAA,QACvB0hE,EAAalgG,KAAKC,IAAI,EAAG0/B,EAAY,KAC9B,OAMZ,CAACA,EAAWD,EAAK/kC,SAGpB,MAAMopG,GAA4B,YAAfjF,IAA8BE,GAAgC,UAAfF,EAE9DiF,GACFD,GAAkBl8D,EAA2C,EAtKrC,IAwKd/tC,KACViqG,GAAiBE,EAAAA,GAEnB,MAAMC,IAAmB7kB,EAAAA,GAAAA,GAAkB,CAAChqF,EAAQ0pG,GAAagF,IA8JjE,OACE,mBAACI,GAAA,EAAD,CACErkE,IAAK+L,EACL9V,UAAU,wBACVquE,aAActF,GAAgCC,GAC9ClR,MAAOqW,GAAmBpqG,QAAcpE,EACxCytG,YAAaA,GACbkB,cAAeC,EAAAA,GACfC,iBAAkBL,GAAmC,YAAfnF,EAA2BT,EAAAA,GAAgBvqF,EAAAA,GAAsB,EAEvGywF,sBAAoB,EACpBC,YAAU,EACVC,WAAYtG,GACZpoB,SAAUhC,KAERusB,IAyCR,SAA2BlrG,EAAgBoqG,GACzC,OACE,0BAAK1pE,UAAU,gBACb,mBAAC4uE,GAAA,EAAD,CAAa7iG,OAAQ29F,GAAkBpqG,IACvC,mBAACuvG,GAAA,EAAD,CAAW5nE,aAAcyiE,GAAkBpqG,KA7CxBwvG,CAAkBxvG,EAAQoqG,IAC3C12F,GACA,0BACEgtB,UAAU,gBAEV,mBAAC6B,GAAA,EAAD,CACEkI,IAAKpC,EACLlU,KAAMpxB,EAAKq/B,MAAQ,sBAAwB,kBAC3CI,UAAWA,GACXkI,YAAaJ,EAAK/kC,OAClBkqG,qBAAmB,EACnB/uE,UAAU,0BACVgvE,QAASvC,GACTpJ,OAAQmK,IA9KlB,WACE,IAAKzpG,KAAgBoqG,KAAqB5rG,EAAc,CACtD,MAAM0sG,EAAYhB,KAAeE,GAC3Be,EAA2B/qG,QAAuB,YAAf6kG,GAA4BG,GAErE,OACE,0BAAKnpE,UAAU,uBACXivE,IAAcC,GAA4B,mBAACvtE,GAAA,EAAD,MAC3CutE,GAA4B,mBAACC,GAAA,EAAD,CAAcrrG,KAAK,+CAKtD,IAAKC,GAAYc,OAAQ,CACvB,IAAIf,EAEJ,OAAQklG,GACN,IAAK,UACHllG,EAAOqlG,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACHrlG,EAAOzB,EAAK,oBACZ,MACF,IAAK,YACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,wBACZ,MACF,IAAK,QACHyB,EAAOzB,EAAK,yBACZ,MACF,QACEyB,EAAOzB,EAAK,0BAGhB,OACE,0BAAK29B,UAAU,sBACb,mBAACmvE,GAAA,EAAD,CAAcrrG,KAAMA,KAK1B,OACE,0BACEk8B,UAAY,WAAUgpE,SACtBvnE,IAAKp/B,EAAKq/B,OAAwB,UAAfsnE,EAAyB,WAAQrpG,EACpDq6E,eAAa,GAEG,UAAfgvB,EACEjlG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAAC4uG,GAAA,EAAD,CACEjyE,IAAK38B,EACLoC,QAASL,EAAa/B,GACtByvD,YAAa05C,GAAmBpnG,EAAa/B,GAAIyvD,YACjDqD,oBAAqB2b,GACrB1tC,QAASosE,OAGI,cAAf3E,EACDjlG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACs0E,GAAA,EAAD,CACE33C,IAAK38B,EACLoC,QAASL,EAAa/B,GACtB6uG,UAAQ,EACRC,SAAO,EACPtvE,UAAU,cACVo6B,cAAemP,EAAkBniE,SAAS5G,GAC1C8yD,oBAAqB2b,GACrBsgC,YAAazB,OAGA,UAAf9E,EACDjlG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACgvG,GAAA,EAAD,CACEryE,IAAK38B,EACLoC,QAASL,EAAa/B,GACtByvD,YAAa05C,GAAmBpnG,EAAa/B,GAAIyvD,YACjDqD,oBAAqB2b,GACrBwgC,eAAgB3B,OAGH,UAAf9E,EACDjlG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACi0E,GAAA,EAAD,CACEt3C,IAAK38B,EACL+hC,MAAOA,EACP3/B,QAASL,EAAa/B,GACtB+E,OAAQmvE,EAAAA,GAAAA,YACRlrE,KAAMjH,EAAa/B,GAAIgJ,KACvBsa,aAAcA,EACdkc,UAAU,cACV40C,OAAQg5B,GACR2B,YAAazB,GACb1zC,cAAemP,EAAkBniE,SAAS5G,OAG7B,UAAfwoG,EACDjlG,GAA0BrB,KAAKlC,GAAO+B,EAAa/B,IAClD,mBAACi0E,GAAA,EAAD,CACEt3C,IAAK38B,EACL+hC,MAAOA,EACP3/B,QAASL,EAAa/B,GACtBm0D,aAAa+6C,EAAAA,GAAAA,GAAcrtG,EAAME,EAAa/B,GAAK2hC,EAAWid,GAC9D75C,OAAQmvE,EAAAA,GAAAA,YACRlrE,KAAMjH,EAAa/B,GAAIgJ,KACvBsa,aAAcA,EACdkc,UAAU,cACV40C,OAAQg5B,GACR2B,YAAazB,GACb1zC,cAAemP,EAAkBniE,SAAS5G,OAG7B,YAAfwoG,EACDjlG,GAA0BrB,KAAI,CAAClC,EAAIkR,KAClC,0BAACi+F,GAAA,EAAD,CACExyE,IAAK38B,EACL+iG,cAAe7xF,EACfsuB,UAAU,6CAEVuB,QAAS,IAAMssE,GAAkBrtG,GACjCovG,gBAtIoBC,EAsImBrvG,EArI1CqvG,IAAal5F,GAAkB6yF,EAA+B,CAAC,CACpE5sF,MAAOva,EAAK,iCACZwjC,KAAM,OACNiqE,QAAS,KACPxF,EAAkBuF,WAJmClwG,IAuI/C,mBAACqmD,GAAA,EAAD,CAAiBj6C,OAAQvL,EAAIuvG,eAAa,KAxItD,IAAgCF,KA2IP,gBAAf7G,EACDjlG,GAA0BrB,KAAI,CAAClC,EAAIkR,IAClC,mBAACi+F,GAAA,EAAD,CACExyE,IAAK38B,EACL+iG,cAAe7xF,EACfsuB,UAAU,6CAEVuB,QAAS,IAAMhgC,EAAS,CAAEf,GAAAA,KAE1B,mBAAC8lD,GAAA,EAAD,CAAehnD,OAAQkB,YAGzBb,GAmCCo1E,IAEH,mBAACprC,GAAA,EAAD,CAASqmE,KAAG,EAACnmE,UAAWA,EAAWD,KAAMA,EAAME,YAAasgE,KAI/Dd,GACC,mBAAC2G,GAAA,EAAD,CACE1lE,QAAwB,YAAfy+D,EACTznE,QAASksE,GACTrpE,UAAW/hC,EAAK,0BAEhB,wBAAG29B,UAAU,0BAGhBwpE,GACC,mBAAC0G,GAAA,EAAD,CACEjnG,OAAQ9E,QAAQkmG,GAChBt+F,OAAQs+F,EACRh/D,QAAS0iE,UGrdnB,IAAeruE,EAAAA,EAAAA,KAPyBuK,IACtC,MAAMkmE,GAAchmE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO+lE,EAAc,mBAACA,EAAgBlmE,GAAY,mBAACI,GAAA,EAAD,SCKpD,IAAe3K,EAAAA,EAAAA,KAPwBuK,IACrC,MAAMmmE,GAAajmE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOgmE,EAAa,mBAACA,EAAenmE,GAAY,mBAACI,GAAA,EAAD,SCElD,GAPuCJ,IACrC,MAAM09D,GAAax9D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOu9D,EAAa,mBAACA,EAAe19D,GAAY,mBAACI,GAAA,EAAD,OCClD,IAAe3K,EAAAA,EAAAA,KAPgB,KAC7B,MAAM0mE,GAAgBj8D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOg8D,EAAgB,mBAACA,EAAD,MAAoB,mBAAC/7D,GAAA,EAAD,SCG7C,IAAe3K,EAAAA,EAAAA,KAPY,KACzB,MAAM2mE,GAAYl8D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOi8D,EAAY,mBAACA,EAAD,MAAgB,mBAACh8D,GAAA,EAAD,SCErC,IAAe3K,EAAAA,EAAAA,KANc,KAC3B,MAAMymE,GAAch8D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAO+7D,EAAc,mBAACA,EAAD,MAAkB,mBAAC97D,GAAA,EAAD,S,eCqCzC,MA4GA,IAAe3K,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KAClB,CAAC5iC,EAAD,KAAoC,UAA3B,OAAEC,GAAyB,EAClC,MAAMyF,GAAOC,EAAAA,EAAAA,IAAW3F,EAAQC,IACxBof,QAAS2xF,GAAoBhxG,EAAOylB,aAAe,IACnDvU,KAAM4xB,GAAc9iC,EAAO4L,OAC7B,cAAE0L,EAAF,uBAAiBlV,EAAjB,gBAAyCm8B,GAAoBv+B,EAC7D2xC,EAAYjsC,IAAQwsC,EAAAA,EAAAA,IAAcxsC,IAGtChF,MAAOmiC,EADH,eAEJl3B,EAFI,cAGJa,EAHI,aAIJC,GACEzM,EAAOonB,WAEX,MAAO,CACLuqB,UAAAA,EACAzZ,QAASxyB,MAAAA,GAAF,UAAEA,EAAMgU,gBAAR,aAAE,EAAgBwe,QACzB5gB,cAAAA,EACAwrB,UAAAA,EACAkuE,gBAAAA,EACAnuE,YAAAA,EACAouE,YAAatlG,EACbwR,UAAW/a,IAA2BisG,EAAAA,GAAAA,QACtC7hG,cAAAA,EACAC,aAAAA,EACA8xB,gBAAAA,KA1BcqE,EA5G8B,IAe5C,IAf6C,UACjD+O,EADiD,gBAEjDpT,EAFiD,QAGjDrG,EAHiD,WAIjDg5E,EAJiD,cAKjD55F,EALiD,UAMjDwrB,EANiD,gBAOjDkuE,EAPiD,UAQjD7zF,EARiD,YASjD0lB,EATiD,YAUjDouE,EAViD,aAWjDxkG,EAXiD,cAYjDD,EAZiD,QAajDw/B,EAbiD,SAcjD/+B,GACI,EACJ,MAAM,mBAAEkkG,EAAF,gBAAsBhrF,IAAoBlG,EAAAA,EAAAA,MAE1Cjd,GAAOm/B,EAAAA,GAAAA,MACNivE,EAAmBC,IAAwBjwE,EAAAA,EAAAA,IAAmB,IAE/DkwE,GADwBz1C,EAAAA,GAAAA,GAAYu1C,KACcA,GAExDxxE,EAAAA,EAAAA,KAAU,KACJ3yB,GAAgC,yBAApBsxB,GACdpY,MAED,CAACoY,EAAiBtxB,EAAUkZ,KAE/BqjB,EAAAA,GAAAA,IAAev8B,EAAU++B,GAEzB,MAAMq/D,GAAYjnE,EAAAA,EAAAA,KAAQ,IACjBlM,EAAUA,EAAQ70B,KAAKkuG,GAAWA,EAAO7kG,SAAU,IACzD,CAACwrB,IAEEs5E,GAAqBtsE,EAAAA,EAAAA,KAAaxkC,IACtCywG,EAAmB,CAAEzwG,MAAAA,MACpB,CAACywG,IAEEM,GAAertE,EAAAA,EAAAA,KAAQ,KAE3B,MAAM2b,GAAYn5C,EAAAA,EAAAA,MAAYiK,MAAMK,KAC9BwgG,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiBjxD,EAAWld,GAAe,GAE1G,OAAO0oE,EAAAA,EAAAA,KACLlzF,EAAAA,EAAAA,IAAO,IACFq5F,KACCjlG,GAAgB,MAChBD,GAAiB,KACpBlJ,QAAQoJ,IACT,MAAM4L,EAAOynC,EAAUrzC,GAOvB,OACG2+F,EAAUtjG,SAAS2E,IACjBA,IAAW4K,KACTgB,KAAS8N,EAAAA,EAAAA,IAAU9N,KAAWq5B,GAAar5B,EAAKs5F,wBAGzD9uE,KAED,CACDkuE,EAAiBluE,EAAWD,EAAap2B,EAAcD,EAAe8K,EAAe+zF,EAAW15D,IAG5FkgE,GAAiB3sE,EAAAA,EAAAA,KAAY,KAC7BksE,EAAkB5rG,SACpB2rG,EAAmB,CAAEzwG,MAAO,KAC5BwwG,EAAWE,MAEZ,CAACA,EAAmBD,EAAoBD,IAE3C,OACE,0BAAKvwE,UAAU,kBACb,0BAAKA,UAAU,wBACb,mBAACmxE,GAAA,EAAD,CACE/I,QAAS0I,EACTM,YAAaX,EACbY,YAAanvE,EACbovE,kBAAmBjvG,EAAK,yBACxBkvG,cAAc,4BACd/0F,UAAW8zF,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,gBAAiBf,IAGnB,mBAACV,GAAA,EAAD,CACE1lE,QAASpmC,QAAQssG,EAAkB5rG,QACnC4vC,SAAUj4B,EACV4nB,UAAW/hC,EAAK,yBAChBk/B,QAAS2vE,GAER10F,EACC,mBAACmlB,GAAA,EAAD,CAASC,MAAM,UAEf,wBAAG5B,UAAU,4BCtGnB2xE,GAAqBltG,OAAOC,KAAKktG,EAAAA,IAAoB/sG,OAAS,EAC9DgtG,GAA2BptG,OAAOC,KAAK2vC,EAAAA,IAAmBxvC,OAAS,EAEzE,SAASitG,KACP,MAAMv9D,EAAcnc,SAASgH,cAAc,mCACvCmV,GACFA,EAAYhtB,OAIhB,MAwQA,IAAemY,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IAAuB,MACtB,MAAM,OAAEC,EAAF,SAAUC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3D0yG,GAAuBC,EAAAA,EAAAA,IAA2B3yG,GAClD4yG,EAAuB3yG,EAAM,UAAGD,EAAOgN,WAAWtE,SAASzI,UAA9B,aAAG,EAAoCkN,gBAAa7M,EAEvF,MAAO,CACLkmG,YAAYqM,EAAAA,EAAAA,IAA4B7yG,GACxCC,OAAAA,EACAC,SAAAA,EACA4yG,eAAgBhuG,QAAQ7E,GAAUyyG,GAClCzqE,4BAA6BjoC,EAAOioC,4BACpC2qE,qBAAAA,KAZchwE,EAxQgB,IAO9B,UAP+B,WACnC4jE,EADmC,OAEnCvmG,EAFmC,SAGnCC,EAHmC,eAInC4yG,EAJmC,4BAKnC7qE,EALmC,qBAMnC2qE,GACI,EACJ,MAAM,eACJG,EADI,iBAEJrN,EAFI,qBAGJ3lG,EAHI,sBAIJutF,EAJI,kBAKJC,EALI,iBAMJylB,EANI,eAOJC,EAPI,6BAQJnI,EARI,yBASJlF,EATI,iBAUJD,EAVI,oBAWJuN,EAXI,4BAYJj/D,IACEh0B,EAAAA,EAAAA,OAEImR,MAAOF,GAAgBmzB,MACxBghD,EAAc8N,IAAmB/xE,EAAAA,EAAAA,IAAuBqlE,EAAAA,GAAAA,UACxDnB,EAAkB8N,IAAuBhyE,EAAAA,EAAAA,IAA4B4T,EAAAA,GAAAA,UACrEq+D,EAAsBC,IAA2BlyE,EAAAA,EAAAA,OACjDmyE,EAAyBC,IAA8BpyE,EAAAA,EAAAA,MACxDqyE,EAAiBpO,IAAiBoB,EAAAA,GAAAA,QAElC78F,OAAwBtJ,IAAfkmG,EACTpC,EAAYoC,IAAe+L,EAAAA,GAAAA,SAC3BxN,EAAWyB,IAAe+L,EAAAA,GAAAA,OAC1BlO,EAAemC,IAAe+L,EAAAA,GAAAA,WAC9BvN,EAAewB,IAAe+L,EAAAA,GAAAA,WAC9BtN,EAAkBuB,IAAe+L,EAAAA,GAAAA,cACjCrN,EAAcsB,IAAe+L,EAAAA,GAAAA,UAC7BpN,EAAgBqB,IAAe+L,EAAAA,GAAAA,YAC/BnN,EAAsBoB,IAAe+L,EAAAA,GAAAA,cACrCmB,EAAexiF,GAAeG,EAAAA,IAE7BuS,EAAsB2iE,IAA2BnlE,EAAAA,EAAAA,KAAUx3B,GAE5D2+F,EAAmB,WAAG5iD,EAAAA,GAAAA,GAAiB6gD,GAAY,GAAOsM,UAAvC,SAA2D,EAE9EtqF,GAAQ0c,EAAAA,EAAAA,KAAY,WAA2B,IAA1ByuE,IAA0B,yDACnD,OAAQnN,GACN,KAAK+L,EAAAA,GAAAA,cACHzH,EAA6BuD,EAAAA,GAAAA,QAC7B,MACF,KAAKkE,EAAAA,GAAAA,SACH,GAAIkB,GAAkBE,EAAgB,CACpCR,EAAgB1M,EAAAA,GAAAA,SAChB,MAEFsM,OAAezyG,EAAW,CAAEkjG,gBAAgB,IAC5C,MACF,KAAK+O,EAAAA,GAAAA,WACH,OAAQjN,GACN,KAAKtwD,EAAAA,GAAAA,QACH0wD,IACA,MACF,KAAK1wD,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHo+D,EAAoBp+D,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHo+D,EAAoBp+D,EAAAA,GAAAA,kBACpBs+D,OAAwBhzG,GACxBkzG,OAA2BlzG,GAC3B,MACF,KAAK00C,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHo+D,EAAoBp+D,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHo+D,EAAoBp+D,EAAAA,GAAAA,SACpBk+D,EAAoB,CAAEzyF,YAAQngB,IAC9BslG,EAAyB,CAAE3lG,OAAAA,EAAQwgB,YAAQngB,IAI/C,MAEF,KAAKiyG,EAAAA,GAAAA,WACH5M,IACA,MACF,KAAK4M,EAAAA,GAAAA,OACHE,KACA1yG,IACA,MAEF,KAAKwyG,EAAAA,GAAAA,cACHE,KACAnlB,EAAsB,CAAE5sF,WAAOJ,IAC/B,MACF,KAAKiyG,EAAAA,GAAAA,UACHE,KACAllB,EAAkB,CAAE7sF,WAAOJ,IAC3B,MAEF,KAAKiyG,EAAAA,GAAAA,YACHS,OAGH,CACDxM,EAAYiN,EAAgBV,EAAgBC,EAAkBlI,EAC9DxF,EAAkBI,EAAkB3lG,EAAsButF,EAAuBC,EACjFqY,EAA0B3lG,EAAQizG,EAAqBvN,IAGnDiO,GAAyB1uE,EAAAA,EAAAA,KAAY,CAACsrE,EAAUqD,KACpDP,EAAwB9C,GACxBgD,EAA2BK,KAC1B,IAEGC,GAA6B5uE,EAAAA,EAAAA,KAAammE,IAC9C4H,EAAe,CAAEhzG,OAAAA,EAAQorG,UAAAA,MACxB,CAAC4H,EAAgBhzG,IAwCpB,SAASy1E,EAAczoE,GACrB,IAA6B,IAAzBs7F,EAIJ,OAAQA,GACN,KAAKgK,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEz0E,IAAK79B,EACLA,OAAQA,EACRgN,SAAUrD,GAAUqD,EACpBikG,WAAY4C,EACZ9nE,QAASxjB,IAGf,KAAK+pF,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEz0E,IAAK79B,EACLA,OAAQA,EACRolG,aAAcA,EACdmF,qBAAsB2I,IAG5B,KAAKZ,EAAAA,GAAAA,OACH,OAAO,mBAAC,GAAD,CAAatyG,OAAQA,EAASC,SAAUA,EAAW8rC,QAASxjB,EAAOvb,SAAUrD,GAAUqD,IAChG,KAAKslG,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEz0E,IAAK79B,EACLA,OAAQA,EACRyxC,cAAe4zD,EACfiO,wBAAyBA,EACzBF,qBAAsBA,EACtBpmG,SAAUrD,GAAUqD,EACpBk7B,eAAgBirE,EAChBW,mBAAoBH,EACpB5nE,QAASxjB,IAIf,KAAK+pF,EAAAA,GAAAA,WACH,OAAO,mBAAC,GAAD,CAAYtyG,OAAQA,EAASgN,SAAUrD,GAAUqD,IAC1D,KAAKslG,EAAAA,GAAAA,cACH,OAAO,mBAAC,GAAD,CAAevmE,QAASxjB,EAAOvb,SAAUrD,GAAUqD,IAC5D,KAAKslG,EAAAA,GAAAA,UACH,OAAO,mBAAC,GAAD,CAAWvmE,QAASxjB,EAAOvb,SAAUrD,GAAUqD,IACxD,KAAKslG,EAAAA,GAAAA,YACH,OAAO,mBAAC,GAAD,CAAavmE,QAASxjB,EAAOvb,SAAUrD,GAAUqD,KAI9D,OA3FA2yB,EAAAA,EAAAA,KAAU,IAAOh2B,GAAS2/B,EAAAA,GAAAA,GAAsB/gB,QAASloB,GAAY,CAACsJ,EAAQ4e,KAE9EoX,EAAAA,EAAAA,KAAU,KACRj5B,YAAW,KACT4/F,GAAyB38F,KArJE,OAuJ5B,CAACA,KAEJg2B,EAAAA,EAAAA,KAAU,KACJgzE,IACFQ,EAAoBR,GACpB3+D,OAA4B3zC,MAE7B,CAACsyG,EAAsB3+D,KAG1BrU,EAAAA,EAAAA,KAAU,KACJh2B,GAAU8pG,GACZlrF,MAGD,CAACkrF,KAGJl0B,EAAAA,GAAAA,IAA4B,IAAkB,IAAhBsP,GAAgB,EACxCA,IAAe7uF,IACjBkzG,EAAgB1M,EAAAA,GAAAA,SAChB2M,EAAoBp+D,EAAAA,GAAAA,YAErB,CAAC/0C,KAEJupC,EAAAA,GAAAA,IAAespE,IACbtM,IAAe+L,EAAAA,GAAAA,UACZ/L,IAAe+L,EAAAA,GAAAA,YACf/L,IAAe+L,EAAAA,GAAAA,gBACjB,IAAM/pF,GAAM,IAAQuqF,GAyDrB,0BACE5xG,GAAG,sBACHw/B,UAAYmyE,OAA+BxyG,EAAd,aAE5BozG,GACC,0BAAK/yE,UAAU,mBAAmBuB,QAAS1Z,IAE7C,0BAAKrnB,GAAG,eACN,mBAAC,GAAD,CACElB,OAAQA,EACR6kG,aAAcl7F,EACdw6F,UAAWA,EACXW,SAAUA,EACVV,aAAcA,EACdW,aAAcA,EACdC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClBt5D,QAASxjB,EACT+8E,oBAAqB3hE,GAAwBqE,EAC7CE,eAAgBirE,IAElB,mBAAC5wE,GAAA,EAAD,CACEpO,KAAOwP,GAAwBqE,EAA+B,OAAS,YACvE0C,YAAa2nE,GAAqBE,GAClC/vE,UAAW4hE,EAAeiO,GAAqBhN,EAAmBiD,EAClE76D,eAAa,GAEZgoC,SCxSX,IAAer1C,EAAAA,EAAAA,KANwB,IAAgB,IAAf,OAAEz2B,GAAa,EACrD,MAAMoqG,GAAclpE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBnhC,GAEnE,OAAOoqG,EAAc,mBAACA,EAAD,WAAkB1zG,KCDzC,IAAI2zG,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAASllG,EAAaoyE,GAC5C4yB,GAAiBhwG,KAAK,CAAEgL,IAAAA,EAAKoyE,SAAAA,IACxB6yB,KACHA,IAAU,EACVvtG,YAAWwJ,gBAOfA,iBACE,IAAIwH,EAAQ,EACZ,IAAK,MAAMy8F,KAAmBH,GAC5BI,GAAYD,GACZz8F,IArBoB,KAsBhBA,UACIoD,EAAAA,EAAAA,IAtBW,KAuBjBpD,EAAQ,GAGZs8F,GAAmB,GAhBTK,GACNJ,IAAU,IAXO,MA6BvB,SAASG,GAAT,GAAyD,IAApC,IAAEplG,EAAF,SAAOoyE,GAA6B,EACvD,MAAMngE,EAAO6X,SAASiiB,cAAc,KACpC95B,EAAKkH,KAAOnZ,EACZiS,EAAKizF,SAAW9yB,EAChB,IACEngE,EAAKqzF,QACL,MAAOvlG,GAEP2T,QAAQjT,MAAMV,ICtBlB,MAEMwlG,GAAoB,IAAI1pF,IACxB2pF,GAAqB,IAAI3pF,IA6D/B,IAAeuV,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IAGQ,CACL2I,gBAHsB3I,EAAO2I,gBAAgBD,SAI7C/G,SAHe3B,EAAO2B,SAAS+G,YAHjBk6B,EA3DoB,IAGlC,IAHmC,gBACvCj6B,EADuC,SAEvChH,GACI,EACJ,MAAM,4BAAE+yG,IAAgCz0F,EAAAA,EAAAA,MAElC00F,GAAwB12B,EAAAA,GAAAA,GAXD,KAWqC,GAE5D22B,GAA0B1vE,EAAAA,EAAAA,KAAa3hC,IAC3CkxG,GAAmBnjE,IAAI/tC,GACvBoxG,GAAsB,KAChBF,GAAmB9xE,OACrB+xE,EAA4B,CAAE/yG,SAAUmzB,MAAMtiB,KAAKiiG,MACnDA,GAAmBI,cAGtB,CAACH,EAA6BC,KAEjC/0E,EAAAA,EAAAA,KAAU,KACR,MAAMk1E,EAAiB1vG,OAAOu/D,QAAQh8D,GAAiBtF,KAAI,QAAEpD,EAAQ8C,GAAV,SACzDA,EAAWM,KAAKlC,GAAOQ,EAAS1B,GAAQiR,KAAK/P,QAC5C4zG,OAEED,EAAetvG,OAKpBsvG,EAAejsG,SAAStF,IACtB,GAAIixG,GAAkBthG,IAAI3P,GACxB,OAEFixG,GAAkBljE,IAAI/tC,GACtB,MAAMyxG,GAAev8D,EAAAA,EAAAA,IAAoBl1C,EAAS,YAClD,IAAKyxG,EAEH,YADAJ,EAAwBrxG,GAI1B,MAAMw6C,EAAYpsB,GAAAA,GAA0BqjF,GAE5C,GAAIj3D,EAGF,OAFAo2D,GAASp2D,GAAWk3D,EAAAA,EAAAA,IAA0B1xG,SAC9CqxG,EAAwBrxG,GAI1BouB,GAAAA,GAAkBqjF,EAAcpjF,EAAAA,GAAAA,SAAwB,GAAMwkB,MAAMhzC,IAC9DA,GACF+wG,GAAS/wG,GAAQ6xG,EAAAA,EAAAA,IAA0B1xG,IAE7CqxG,EAAwBrxG,SA3B1BixG,GAAkBK,UA8BnB,CAAClzG,EAAUgH,EAAiB+rG,EAA6BE,Q,0BCjE9D,MA4EA,IAAev0E,EAAAA,EAAAA,KArEiB,IAA+B,IAA9B,WAAEhxB,EAAF,UAAc6lG,GAAgB,EAC7D,MAAM,UAAEC,EAAF,iBAAa3rG,EAAb,gBAA+Bf,IAAoBwX,EAAAA,GAAAA,MACnDjd,GAAOm/B,EAAAA,GAAAA,MACP,IAAElzB,EAAF,OAAOhP,EAAP,UAAesE,GAAc8K,GAAc,GAC3CzF,EAAS9E,QAAQmK,GAEjBs/E,GAAoBC,EAAAA,GAAAA,GAAqBvuF,IAC/C2nE,EAAAA,GAAAA,IAAY,KACV2mB,EAAkB,CAAEltF,KAAM,kBACzBuI,EAhB6B,SAgBQtJ,GAExC,MAAM80G,GAAgBlwE,EAAAA,EAAAA,KAAa6/B,IACjC,IACE,MAAMr2D,EAAOkhB,KAAKylF,MAAMtwC,EAAMr2D,MACP,gBAAnBA,EAAK4mG,YACP7sG,EAAgB,CAAEP,WAAYjI,EAAQ8C,WAAY,CAACwB,GAAY4D,aAAa,IAC5EgtG,KAGqB,eAAnBzmG,EAAK4mG,WACP9rG,EAAiB,CAAEjG,QAAS,4BAE9B,MAAOoK,OAGR,CAAC1N,EAAQk1G,EAAW5wG,EAAWkE,EAAiBe,IAE7C+rG,GAAarwE,EAAAA,EAAAA,KAAa6/B,IAC9BA,EAAMhS,cAAc1qC,UACnB,IAkBH,OAhBAuX,EAAAA,EAAAA,KAAU,KACRl5B,OAAO86B,iBAAiB,UAAW4zE,GAC5B,IAAM1uG,OAAO+6B,oBAAoB,UAAW2zE,KAClD,CAACA,KAGJx1E,EAAAA,EAAAA,KAAU,KACR,GAAKh2B,EAIL,OAFAunB,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAACvnB,IAGF,mBAAC4rG,GAAA,EAAD,CACE70E,UAAU,YACV/2B,OAAQA,EACRoiC,QAASmpE,EACT53F,MAAO23F,EACPO,gBAAc,GAEb7rG,GACC,6BACE+2B,UAAU,aACVk2B,OAAQ0+C,EACRp8D,IAAKlqC,EACLsO,MAAOva,EAAK,cACZ0yG,QAAQ,yDACRC,MAAM,mBC3EhB,IAAet1E,EAAAA,EAAAA,KAPgB,IAAgB,IAAf,OAAEz2B,GAAa,EAC7C,MAAMgsG,GAAgB9qE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBnhC,GAGvE,OAAOgsG,EAAgB,mBAACA,EAAD,WAAoBt1G,KCG7C,IAAe+/B,EAAAA,EAAAA,KAPU,IAAgB,IAAf,OAAEz2B,GAAa,EACvC,MAAMisG,GAAU/qE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAYnhC,GAG3D,OAAOisG,EAAU,mBAACA,EAAD,WAAcv1G,KCKjC,IAAe+/B,EAAAA,EAAAA,KAR2BuK,IACxC,MAAM,OAAEhhC,GAAWghC,EACbkrE,GAAgBhrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBnhC,GAGvE,OAAOksG,EAAgB,mBAACA,EAAkBlrE,QAAYtqC,KCIxD,IAAe+/B,EAAAA,EAAAA,KAR2BuK,IACxC,MAAM,IAAE37B,GAAQ27B,EACVmrE,GAAgBjrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB97B,GAGvE,OAAO8mG,EAAgB,mBAACA,EAAkBnrE,QAAYtqC,KCGxD,IAAe+/B,EAAAA,EAAAA,KAR6BuK,IAC1C,MAAM,OAAEhhC,GAAWghC,EACborE,GAAkBlrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBnhC,GAG3E,OAAOosG,EAAkB,mBAACA,EAAoBprE,QAAYtqC,KCC5D,IAAe+/B,EAAAA,EAAAA,KARuBuK,IACpC,MAAM,YAAE7L,GAAgB6L,EAClBqrE,GAAYnrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAchM,GAG/D,OAAOk3E,EAAY,mBAACA,EAAcrrE,QAAYtqC,KCKhD,IAAe+/B,EAAAA,EAAAA,KAP8BuK,IAC3C,MAAM,SAAE39B,GAAa29B,EACfsrE,GAAmBprE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB99B,GAE7E,OAAOipG,EAAmB,mBAACA,EAAD,WAAuB51G,KCGnD,IAAe+/B,EAAAA,EAAAA,KAPuBuK,IACpC,MAAM,SAAE39B,GAAa29B,EACfurE,GAAYrrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAc99B,GAE/D,OAAOkpG,EAAY,mBAACA,EAAD,WAAgB71G,KCGrC,IAAe+/B,EAAAA,EAAAA,KAR6BuK,IAC1C,MAAM,OAAEhhC,GAAWghC,EACbwrE,GAAkBtrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBnhC,GAG3E,OAAOwsG,EAAkB,mBAACA,EAAoBxrE,QAAYtqC,KCG5D,IAAe+/B,EAAAA,EAAAA,KARgCuK,IAC7C,MAAM,OAAEhhC,GAAWghC,EACbyrE,GAAqBvrE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBnhC,GAGjF,OAAOysG,EAAqB,mBAACA,EAAuBzrE,QAAYtqC,KC4ElE,IAAIg2G,GAGAC,IAAiB,EAyQrB,SAASC,GAAWC,GAClB19E,SAASslD,iBAAkC,gDACxCx1E,SAASqY,IACJu1F,EACGv1F,EAAKkH,KAAKrgB,SAAS,oBACtBmZ,EAAKkH,KAAOlH,EAAKkH,KAAKiH,QAAQ,UAAW,mBAG3CnO,EAAKkH,KAAOlH,EAAKkH,KAAKiH,QAAQ,iBAAkB,cAOxD,SAASqnF,GAAgBC,GACnB59E,SAASxb,QAAUo5F,IACrB59E,SAASxb,MAAQo5F,GAIrB,UAAet2E,EAAAA,EAAAA,KAAKuC,EAAAA,EAAAA,KACjB5iC,IAAuB,UACtB,MAAQuiB,UAAY+Q,OAAO,eAAED,EAAF,SAAkBrW,EAAlB,yBAA4B45F,KAAiC52G,GAChFC,OAAQokB,EAAa9f,UAAW+f,GAAmBtkB,EAAOsG,YAC5Du8C,EAAex+B,GAAeC,GAChClQ,EAAAA,EAAAA,IAAkBpU,EAAQqkB,EAAaC,QACvChkB,EACE+O,EAAarP,EAAOqP,WACpBwnG,EAAcxnG,IAAc+E,EAAAA,EAAAA,IAAkBpU,EAAQqP,EAAWpP,OAAQoP,EAAW9K,WACpF2wG,EAAY2B,MAAAA,GAAH,UAAGA,EAAavsG,QAAQ0+D,YAAxB,aAAG,EAA2BzrD,MAE7C,MAAO,CACLghB,gBAAiBv+B,EAAOu+B,gBACxBu4E,UAAW92G,EAAO82G,UAClBryF,aAAczkB,EAAOykB,aACrBnX,kBAAmBtN,EAAOsN,kBAC1BmlC,oBAAoBlsC,EAAAA,EAAAA,IAAyBvG,GAC7C+2G,mBAAmBC,EAAAA,EAAAA,IAAwBh3G,GAC3Ci3G,oBAAoBC,EAAAA,EAAAA,IAAyBl3G,GAC7Cm3G,iBAAkBryG,QAAQ9E,EAAOqO,cAAc7I,QAC/C4xG,WAAYtyG,QAAQ9E,EAAO8O,QAAQtJ,QACnCq9C,aAAAA,EACA3zC,iBAAkBlP,EAAOkP,iBACzBmoG,sBAAuBvyG,QAAQ9E,EAAOoP,2BACtC64B,4BAA6BjoC,EAAOioC,4BACpCtqB,0BAA2B3d,EAAO2d,0BAClC25F,oBAAoBn6E,EAAAA,EAAAA,IAAyBn9B,GAC7Cy+B,kBAAmBz+B,EAAOw+B,WAAWC,kBACrCpL,eAAAA,EACArW,SAAAA,EACA45F,yBAAAA,EACAW,kBAAmBzyG,QAAQ9E,EAAOo/B,WAClC1kB,YAAa1a,EAAOiM,SAASmO,MAAMK,OACnC+8F,iBAAgB,UAAEx3G,EAAO2M,kBAAT,aAAE,EAAmBD,OACrC+qG,wBAAuB,UAAEz3G,EAAO2M,kBAAT,aAAE,EAAmBC,gBAC5CyC,WAAAA,EACA6lG,UAAAA,EACAwC,yBAA0B5yG,QAAQ9E,EAAO23G,oBArC3B/0E,EA5RS,IA2BvB,IA3BwB,gBAC5BrE,EAD4B,UAE5Bu4E,EAF4B,aAG5BryF,EAH4B,kBAI5BnX,EAJ4B,mBAK5BmlC,EAL4B,kBAM5BskE,EAN4B,mBAO5BE,EAP4B,iBAQ5BE,EAR4B,WAS5BC,EAT4B,aAU5Bv0D,EAV4B,kBAW5BpkB,EAX4B,iBAY5BvvB,EAZ4B,sBAa5BmoG,EAb4B,4BAc5BpvE,EAd4B,0BAe5BtqB,EAf4B,mBAgB5B25F,EAhB4B,eAiB5BjkF,EAjB4B,SAkB5BrW,EAlB4B,yBAmB5B45F,EAnB4B,YAoB5Bl8F,EApB4B,kBAqB5B68F,EArB4B,iBAsB5BC,EAtB4B,wBAuB5BC,EAvB4B,WAwB5BpoG,EAxB4B,UAyB5B6lG,EAzB4B,yBA0B5BwC,GACI,EACJ,MAAM,KACJE,EADI,mBAEJx7F,EAFI,yBAGJy7F,EAHI,2BAIJC,EAJI,eAKJC,EALI,kBAMJC,EANI,kBAOJC,EAPI,gBAQJC,EARI,uBASJC,EATI,gBAUJ39F,EAVI,kBAWJ49F,EAXI,qBAYJh9F,EAZI,iBAaJi9F,EAbI,wBAcJC,EAdI,yBAeJC,EAfI,cAgBJC,IACEv4F,EAAAA,EAAAA,MAEAyC,EAAAA,KAAU6zF,KACZA,IAAiB,EAEjB5zF,QAAQC,IAAI,qBAGdgd,EAAAA,EAAAA,KAAU,KACgB,yBAApBrB,GAA4D,4BAAdu4E,GAChDc,MAED,CAACr5E,EAAiBu4E,EAAWc,KAGhCh4E,EAAAA,EAAAA,KAAU,KACJnb,IACFszF,GAAe,GACfS,IACAL,IACA/7F,IACAy7F,IACAC,IACAE,IACAC,EAAkB,CAAEj7F,SAAU6uE,EAAAA,QAE/B,CACDpnE,EAAcrI,EAAoB67F,EAAmBH,EAA4BD,EACjFG,EAAmBD,EAAgBI,EAAwBK,KAI7D54E,EAAAA,EAAAA,KAAU,KACJnb,IACEzH,IAAa6uE,EAAAA,IACfosB,EAAkB,CAAEj7F,SAAAA,IAGtBk7F,EAAgB,CAAEnyE,SAAU/oB,OAE7B,CAACA,EAAUyH,EAAcyzF,EAAiBD,KAG7Cr4E,EAAAA,EAAAA,KAAU,KACJnb,IACG/J,EAIH09F,KAHA59F,IACAY,QAKH,CAACqJ,EAAc/J,EAAaF,EAAiBY,EAAsBg9F,KAGtEx4E,EAAAA,EAAAA,KAAU,KACJnb,GAAgB6yF,GAClBiB,MAED,CAAC9zF,EAAc6yF,EAAoBiB,KAGtC34E,EAAAA,EAAAA,KAAU,KACJnb,IAAiBmyF,GACnByB,MAED,CAAC5zF,EAAcmyF,EAA0ByB,KAG5Cz4E,EAAAA,EAAAA,KAAU,KACJnb,GAAgBg0F,GAAAA,GAAAA,WAAyB,eAC3CC,EAAAA,GAAAA,GAAgBC,mBAAmBF,GAAAA,GAAAA,OAAqB,YAAYjzG,YAErE,CAACif,KAGJmb,EAAAA,EAAAA,KAAU,KACR,GAAKnB,EAML,OAFAtN,GAAAA,EAAAA,iBAEO,KACLA,GAAAA,EAAAA,mBAED,CAACsN,IAEJ,MACEuL,qBAAsB4uE,IACpB3uE,EAAAA,GAAAA,IAAmB38B,OAAmBhN,GAAW,OAAMA,EAAW2nC,IAGpE+B,qBAAsB6uE,IACpB5uE,EAAAA,GAAAA,GAAkBwI,OAAoBnyC,GAAW,OAAMA,EAAW2nC,GAEhEtH,GAAYqE,EAAAA,GAAAA,GAChB4zE,EAAiCvpF,QAAQ,YAAa,oBACtDwpF,EAAgCxpF,QAAQ,YAAa,mBACrD4Y,GAA+B,+BAIjCqxC,EAAAA,GAAAA,IAAY,IAA6B,IAA3Bw/B,GAA2B,EACvC,QAA8Bx4G,IAA1Bw4G,GAA0D,IAAnBzlF,EACzC,OAGF,MAAM0lF,GAA4Br4B,EAAAA,GAAAA,OAElCs4B,EAAAA,GAAAA,GAAqBjgF,SAAS4W,eAAe,gBAAkBopE,KAC9D,CAACzrG,KAGJgsE,EAAAA,GAAAA,IAAY,IAA8B,IAA5B2/B,GAA4B,EACxC,QAA+B34G,IAA3B24G,GAA2D,IAAnB5lF,EAC1C,QAGF4pC,EAAAA,EAAAA,KAAQ,KACNlkC,SAASpJ,KAAKihB,UAAUU,IAAI,6BAG9B,MAAMynE,GAA4Br4B,EAAAA,GAAAA,OAElCs4B,EAAAA,GAAAA,GAAqBjgF,SAAS4W,eAAe,gBAAiB,KAC5DopE,KAEA97C,EAAAA,EAAAA,KAAQ,KACNlkC,SAASpJ,KAAKihB,UAAUC,OAAO,kCAGlC,CAAC4B,IAEJ,MAAM4kD,GAAanyD,EAAAA,EAAAA,KAAY,KAC7B6yE,GAAe,GAEf,MAAMmB,GAAgBz4E,EAAAA,EAAAA,MACtB,IAAIruB,EAAQ,EAEZ0/C,cAAcwkD,IACdA,GAAuB5vG,OAAOyyG,aAAY,KACxC,GAAIpgF,SAASxb,MAAMxV,SAASqxG,EAAAA,IAC1B5C,IAAW,OADb,CAKA,GAAIpkG,EAAQ,GAAM,EAAG,CACnB,MAAMinG,GAAY54E,EAAAA,EAAAA,MAA6By4E,EAC3CG,EAAY,IACd3C,GAAiB,GAAE2C,iBAAyBA,EAAY,EAAI,IAAM,MAClE7C,IAAW,SAGbE,GAAgB4C,EAAAA,IAChB9C,IAAW,GAGbpkG,OAlNwB,OAoNzB,CAAC2lG,IAEE5lC,GAAcjtC,EAAAA,EAAAA,KAAY,KAC9B6yE,GAAe,GAEfjmD,cAAcwkD,IACdA,QAAuBh2G,EAElBy4B,SAASxb,MAAMxV,SAASqxG,EAAAA,KAC3B1C,GAAgB4C,EAAAA,IAGlB9C,IAAW,KACV,CAACuB,IAEEwB,IAA6Br0E,EAAAA,EAAAA,KAAY,KAC7CozE,EAAwB,CAAE78F,yBAAqBnb,MAC9C,CAACg4G,IAQJ,OALAp7C,EAAAA,GAAAA,GAAkBm6B,EAAYllB,GAC9BzyC,GAAgB23D,GnJxTH,WAAwD,IAApBp2D,EAAoB,yDACrErB,EAAAA,EAAAA,KAAU,KACR,GAAKn2B,EAAAA,GAAL,CAIA,IAAIw3B,EAgBJ,OATAnB,MAAAA,IAAAA,GAAcuzB,aAAa,UAAWrzB,IAKlCzsB,EAAAA,KAAW4hC,EAAAA,IACbpc,SAASyI,iBAAiB,eAAgBrB,IAGrC,KACLL,MAAAA,IAAAA,GAAcuzB,aAAa,UAAW,yDAClC9/C,EAAAA,KAAW4hC,EAAAA,IACbpc,SAAS0I,oBAAoB,eAAgBtB,KAhB/CL,MAAAA,IAAAA,GAAcuzB,aAAa,UAAWnzB,OAmBvC,CAACe,ImJ8RJu4E,CAA2BzC,GAGzB,0BAAK51G,GAAG,OAAOw/B,UAAWA,EAAW84E,OAAQnnD,GAAAA,EAAWonD,WAAYpnD,GAAAA,GAClE,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAa1oD,OAAQmtG,IACrB,mBAAC,GAAD,CAAentG,OAAQqtG,IACvB,mBAAC,GAAD,CAAertG,OAAQutG,IACvB,mBAAC,GAAD,CAASvtG,OAAQwtG,IAChBv0D,GAAgB,mBAAC,GAAD,CAAa/kB,IAAK+kB,EAAa1hD,GAAIoC,QAASs/C,EAAcpF,MAAI,IAC/E,mBAAC,GAAD,CAAexuC,IAAKC,IACpB,mBAAC,GAAD,CAAiBtF,OAAQytG,IACzB,mBAAC,KAAD,CACEztG,OAAQ9E,QAAQ6Y,GAChBquB,QAASutE,GACT99F,oBAAqBkC,IAEtB8gB,GAAqB,mBAAC,GAAD,CAAWM,YAAaN,IAC9C,mBAAC,GAAD,CAAkBxxB,SAAUnI,QAAQ25B,GAAqB84E,KACzD,mBAAC,GAAD,CACE3tG,OAAQ9E,QAAQ0yG,GAAoBC,GACpC/qG,OAAQ8qG,EACR5qG,gBAAiB6qG,IAEnB,mBAAC,GAAD,CAAWpoG,WAAYA,EAAY6lG,UAAWA,IAC9C,mBAAC,GAAD,MACA,mBAAC,GAAD,CAAWjoG,SAAUsqG,IACrB,mBAAC,GAAD,CAAaj3E,eAAa,IAC1B,mBAAC,GAAD,CAAoB12B,OAAQ8tG,SCxV9Bh1F,EAAAA,IAEFC,QAAQC,IAAI,gCAGThc,EAAAA,EAAAA,MAAY23B,kBACfte,EAAAA,EAAAA,MAAa05F,W","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n  return {\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  };\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { GlobalActions } from '../../types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id].stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateChat(global, chatId, { joinRequests: result }));\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport {\n  ApiChat, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, closeNewContactDialog, replaceUserStatuses, updateChat, updateManagementProgress, updateUser,\n  updateUsers, updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  global = getGlobal();\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      if (url.match(RE_TME_LINK) || url.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url });\n      } else {\n        actions.toggleSafeLinkModal({ url });\n      }\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      actions.getPaymentForm({ chat, messageId });\n      actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n      actions.openPaymentModal({ chatId: chat.id, messageId });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, toggleSafeLinkModal, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      toggleSafeLinkModal({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return global;\n\n  if (global.activeReactions[messageId]?.reaction === reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: {\n      ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n      ...(reaction && {\n        [messageId]: {\n          reaction,\n          messageId,\n        },\n      }),\n    },\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { getMessageRecentReaction } from '../../helpers';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateMessage': {\n      const { message } = update;\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      if (getMessageRecentReaction(message)) {\n        notifyAboutMessage({\n          chat,\n          message,\n          isReaction: true,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport {\n  ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfReactionAdded,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      // Only notify about added reactions, not removed ones\n      const shouldNotify = checkIfReactionAdded(currentReactions, reactions, global.currentUserId);\n\n      global = updateChatMessage(global, chatId, id, { reactions: update.reactions });\n\n      if (shouldNotify) {\n        const newMessage = selectChatMessage(global, chatId, id);\n        if (!chat || !newMessage) return;\n        onTickEnd(() => {\n          notifyAboutMessage({\n            chat,\n            message: newMessage,\n            isReaction: true,\n          });\n        });\n      }\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      onTickEnd(() => {\n        actions.loadMessage({\n          chatId,\n          messageId: message.replyToMessageId,\n          threadUpdate: {\n            isDeleting,\n            lastMessageId: message.id,\n          },\n        });\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      if (phoneCall) return undefined;\n\n      const { call } = update;\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        notifyAboutCall({\n          call,\n          user: selectPhoneCallUser(global)!,\n        });\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, DEBUG, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  }, []);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openTipsChat({ langCode: lang.code });\n  }, [lang.code, openTipsChat]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${DEBUG ? APP_REVISION : APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nconst useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n\nexport default useAsync;\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = message?.forwardInfo?.hiddenUserName || (sender && getSenderTitle(lang, sender));\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              {renderText(lang(button.text))}\n              {['buy', 'receipt'].includes(button.type) && <i className=\"icon-card\" />}\n              {button.type === 'url' && !RE_TME_LINK.test(button.url) && <i className=\"icon-arrow-right\" />}\n              {button.type === 'switchBotInline' && <i className=\"icon-share-filled\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_MAC_OS } from '../util/environment';\nimport getKeyFromEvent from '../util/getKeyFromEvent';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        const messageIds = getMessageIdsForSelectedText();\n\n        if (messageIds && messageIds.length > 0) {\n          e.preventDefault();\n          copyMessagesByIds({ messageIds });\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleCopy, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copyMessagesByIds]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else if (currentHtml !== undefined) {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isButtonVisible, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n              {lang('AttachmentMenu.PhotoOrVideo')}\n            </MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if ((isForwarding || replyingToId) && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo?.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat,\n    undefined,\n    undefined,\n    undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useDebounce from '../../hooks/useDebounce';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload } = getActions();\n\n  const debouncedGlobalUpdate = useDebounce(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    debouncedGlobalUpdate(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, debouncedGlobalUpdate]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType } from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n    };\n  },\n)(Main));\n","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","isOpen","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","versionNotification","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getActions","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","open","blur","location","href","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","toggleSafeLinkModal","openGame","alert","isError","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","openPollModal","receiptMessageId","getReceipt","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","isSamePeer","switchBotInline","openChatWithInfo","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","senderId","botUsername","openChatWithText","queryId","resultId","scheduleDate","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","isGroup","recentTopMessages","msgId","updateStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","Array","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutMessage","getMessageRecentReaction","isReaction","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","shouldNotify","checkIfReactionAdded","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","isCallPanelVisible","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","hostname","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","disableHistoryBack","handleOpenTipsChat","langCode","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_REVISION","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","isButtonVisible","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","debouncedGlobalUpdate","handleMessageDownloaded","clear","activeMessages","flat","downloadHash","getMessageContentFilename","gameTitle","closeGame","handleMessage","parse","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","NewContactModal","RatePhoneCallModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","authState","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","ratingPhoneCall","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}