{"version":3,"file":"7941.55b0f148b16a6efd2e8a.js","mappings":"ykBAsDe,MAAMA,EAKnBC,YAAoBC,GAAgB,KAAhBA,OAAAA,EAAc,uBAJV,IAAIC,KAA4B,iCAEtB,IAAIA,KAGpCC,KAAKC,WACP,CAEAC,QAAQC,GACN,MAAM,OAAEL,EAAM,cAAEM,EAAa,wBAAEC,GAA4BL,KAErDM,GAAYC,EAAAA,EAAAA,GAAcH,GAC1BI,EAA0B,CAC9BC,KAAM,aACNH,eACGH,GAGCO,EAAe,CAAEJ,aAGjBK,EAAwB,IAAIC,SAAQ,CAACC,EAASC,KAClDC,OAAOC,OAAON,EAAc,CAAEG,UAASC,UAAS,IAGlD,GAAqD,mBAA1CN,EAAQS,KAAKT,EAAQS,KAAKC,OAAS,GAAmB,CAC/DV,EAAQW,cAAe,EAEvB,MAAMC,EAAWZ,EAAQS,KAAKI,MAC9BX,EAAaU,SAAWA,EACxBf,EAAwBiB,IAAIF,EAAUV,EACxC,CAeA,OAbAN,EAAckB,IAAIhB,EAAWI,GAC7BC,EACGY,OAAM,KAAe,IACrBC,SAAQ,KACPpB,EAAcqB,OAAOnB,GAEjBI,EAAaU,UACff,EAAwBoB,OAAOf,EAAaU,SAC9C,IAGJtB,EAAO4B,YAAYlB,GAEZG,CACT,CAEAgB,eAAeC,GACbA,EAAiBC,YAAa,EAE9B,MAAM,UAAEvB,GAAcN,KAAKK,wBAAwByB,IAAIF,IAAqB,CAAC,EACxEtB,GAILN,KAAKF,OAAO4B,YAAY,CACtBjB,KAAM,iBACNH,aAEJ,CAEQL,YACN,MAAM,OAAEH,EAAM,cAAEM,GAAkBJ,KAElCF,EAAOiC,iBAAiB,WAAW,IAAkC,IAAjC,KAAEC,GAA0B,EAC9D,GAAkB,mBAAdA,EAAKvB,KAA2B,CAClC,MAAMC,EAAeN,EAAc0B,IAAIE,EAAK1B,WACxCI,IACEsB,EAAKC,MACPvB,EAAaI,OAAOkB,EAAKC,OAEzBvB,EAAaG,QAAQmB,EAAKE,UAGhC,MAAO,GAAkB,mBAAdF,EAAKvB,KACOL,EAAc0B,IAAIE,EAAK1B,YAC9Bc,cAAcY,EAAKG,mBAC5B,GAAkB,mBAAdH,EAAKvB,KACd,MAAM,IAAI2B,MAAMJ,EAAKC,OAAOI,QAC9B,GAEJ,E,2cCvHF,MAAMC,EAAUC,OAAO,WAOjBC,EAAwBC,EAAAA,GAA0B,IAAO,EACzDC,EAAuBC,EAAAA,GAAa,GAAM,IAC1CC,EAAsC,GACtCC,EAA6BC,EAAAA,GAAY,EAAI,EAG7CC,EAAgB,IAAIhD,IAEpBiD,EAAU,IAAIC,MATA,GASmBC,UAAKC,GAAWC,KACrD,IAAM,IAAIxD,EAAgB,IAAIyD,OAAO,IAAIC,IAAI,uBAE/C,IAAIC,GAAmB,EAEvB,MAAMC,EAqDJC,cAA4D,2BAA7CxC,EAAI,yBAAJA,EAAI,gBACjB,MAAOyC,EAAWC,EAAQC,EAAQC,EAAG,CAAGC,GAAU7C,EAClD,IAAI8C,EAAWhB,EAAcjB,IAAI+B,GAUjC,OARKE,EAKHA,EAASC,aAAaN,EAAWC,EAAQC,EAAQE,GAAQG,SAHzDF,EAAW,IAAIP,KAAWvC,GAC1B8B,EAAczB,IAAIuC,EAAIE,IAKjBA,CACT,CAEAlE,YACEqE,EACAR,EACAE,EACQC,EACAM,GAKR,IAJQL,EAAiB,UAAH,6CAAG,CAAC,EAClBM,EAAsC,uCACtCC,EAAyC,uCACzCC,EAAmB,4CALnBT,GAAAA,EAAU,KACVM,OAAAA,EAAc,KACdL,OAAAA,EAAc,KACdM,YAAAA,EAAsC,KACtCC,QAAAA,EAAyC,KACzCC,OAAAA,EAAmB,oBA1ER,IAAIvE,KAQrB,wEAMiB,IAAO,IAAE,sBAEP,GAAC,0EAME,IAAE,mDAMN,GAAK,oBAEP,GAAI,kBAEN,GAAK,sBAED,GAAK,2BAEA,GAAK,0BAEL,GAAC,yBAEF,GAAC,wBAED,GAAC,eAEX,GAAC,mBAEW,GAAC,8BA8B3BC,KAAKgE,aAAaE,EAAaR,EAAWE,EAAQE,EAAOG,QACzDjE,KAAKuE,aACLvE,KAAKwE,cACP,CAEOC,gBAAgBP,GACrB,MAAM,OACJP,EAAM,IAAEe,EAAG,eAAEC,EAAc,OAAEV,GAC3BjE,KAAK4E,WAAW9C,IAAIoC,GAEpBS,EACFD,EAAIG,UAAUZ,EAAQa,EAAGb,EAAQc,EAAG/E,KAAKgF,QAAShF,KAAKgF,SAEvDrB,EAAOsB,SAGTjF,KAAK4E,WAAWnD,OAAOyC,GAElBlE,KAAK4E,WAAWM,MACnBlF,KAAKmF,SAET,CAEAC,YACE,OAAOpF,KAAKqF,aAAerF,KAAKsF,SAClC,CAEAC,OAAiD,IAA5CC,EAAe,UAAH,8CAAUtB,EAAoB,uCACzCA,IACFlE,KAAK4E,WAAW9C,IAAIoC,GAAcuB,UAAW,GAG3CzF,KAAK0F,SAAWF,IAClBxF,KAAK2F,iBAAmBC,KAAKC,MAAM,IAGrC7F,KAAK8F,oBAAiB3C,EACtBnD,KAAK+F,UAAY,EACjB/F,KAAKgG,QACP,CAEAC,MAAM/B,GACAA,IACFlE,KAAK4E,WAAW9C,IAAIoC,GAAcuB,UAAW,GAEdxC,MAAMiD,KAAKlG,KAAK4E,WAAWuB,UAAUC,OAAM,QAAC,SAAEX,GAAU,SAAKA,CAAQ,OAMlGzF,KAAKsF,UACPtF,KAAK8F,eAAiB9F,KAAK2F,iBAE3B3F,KAAKqF,aAAc,EAGhBrF,KAAK8D,OAAOuC,gBACfrG,KAAKsG,OAAStG,KAAKsG,OAAOlD,KAAI,CAACmD,EAAOC,IAChCA,IAAMxG,KAAKyG,eACNF,OAEHA,GAASA,IAAUjE,GACrBiE,EAAMG,YAOhB,CAEAC,YAAY,GAAqD,IAApDC,EAAiBd,GAAiC,EAC7D9F,KAAK2F,iBAAmBC,KAAKC,MAAMe,EAAkB5G,KAAK6G,cAC1D7G,KAAK8F,eAAiBF,KAAKC,MAAMC,EAAiB9F,KAAK6G,cACvD7G,KAAK+F,UAAYa,EAAkBd,EAAiB,GAAK,EACzD9F,KAAKgG,QACP,CAEAc,SAASC,GACP/G,KAAK+G,MAAQA,CACf,CAEAC,UAAUC,GACRjH,KAAK8D,OAAOmD,OAASA,CACvB,CAEAC,sBAAsBhD,EAAqBiD,GACzC,MAAMC,EAAgBpH,KAAK4E,WAAW9C,IAAIoC,IACpC,OACJP,EAAM,IAAEe,GACN0C,EAEJ,IAAKzD,EAAO0D,QAAQC,eAAkD,UAAjC3D,EAAO0D,QAAQC,cAA2B,CAC7E,MAAMC,EAAavH,KAAKwH,iBACxBC,EAAiB9D,EAAQ4D,GACzB7C,EAAIG,UAAU,EAAG,EAAGlB,EAAO+D,MAAO/D,EAAOgE,QACzChE,EAAO0D,QAAQC,cAAgB,QAC/BM,EAAAA,EAAAA,KAAQ,KACNjE,EAAO0D,QAAQC,cAAgB,OAAO,GAE1C,CAEAF,EAAcnD,OAAS,CACrBa,EAAGc,KAAKiC,OAAOV,GAAWrC,GAAK,GAAKnB,EAAO+D,OAC3C3C,EAAGa,KAAKiC,OAAOV,GAAWpC,GAAK,GAAKpB,EAAOgE,SAG7C,MAAMpB,EAAQvG,KAAK8H,SAAS9H,KAAKyG,iBAAmBzG,KAAK8H,SAASlC,KAAKiC,MAAM7H,KAAK2F,mBAE9EY,GAASA,IAAUjE,GACrBoC,EAAIqD,UAAUxB,EAAOa,EAAcnD,OAAOa,EAAGsC,EAAcnD,OAAOc,EAEtE,CAEQf,aACNE,EACAR,EACAE,EACAK,GAEA,MAAMsD,EAAavH,KAAKwH,iBAExB,IAAIxC,EAEJ,GAAItB,aAAqBsE,eAAgB,CACvC,KAAMtE,EAAUuE,sBAAsBC,aACpC,MAAM,IAAI9F,MAAM,sCAGlB,IAAI,KAAE8C,GAASlF,KAAK8D,OAEpB,IAAKoB,IACHA,EACExB,EAAUyE,aACPC,SAAS1E,EAAU2E,MAAMX,MAAO,KAChChE,EAAUuE,WAAWE,aAGrBjD,GACH,MAAM,IAAI9C,MAAM,mDAIpB,MAAMuB,EAAS2E,SAASC,cAAc,UAChC7D,EAAMf,EAAO6E,WAAW,MAE9B7E,EAAO0E,MAAMX,MAAS,GAAExC,MACxBvB,EAAO0E,MAAMV,OAAU,GAAEzC,MAEzBF,EAAUY,KAAKiC,MAAM3C,EAAOqC,GAE5B5D,EAAO+D,MAAQ1C,EACfrB,EAAOgE,OAAS3C,EAEhBtB,EAAU+E,YAAY9E,GAEtB3D,KAAK4E,WAAWtD,IAAI4C,EAAa,CAC/BP,SAAQe,MAAKd,UAEjB,KAAO,CACL,IAAKF,EAAUgF,aACb,MAAM,IAAItG,MAAM,0CAGlB,MAAMuB,EAASD,EACTgB,EAAMf,EAAO6E,WAAW,MAE9Bf,EAAiB9D,EAAQ4D,GAEzBvC,EAAUY,KAAKiC,MAAM7H,KAAK8D,OAAOoB,KAAQqC,GAEzCvH,KAAK4E,WAAWtD,IAAI4C,EAAa,CAC/BP,SACAe,MACAC,gBAAgB,EAChBV,OAAQ,CACNa,EAAGc,KAAKiC,OAAO5D,GAAQa,GAAK,GAAKnB,EAAO+D,OACxC3C,EAAGa,KAAKiC,OAAO5D,GAAQc,GAAK,GAAKpB,EAAOgE,SAE1C/D,UAEJ,CAEK5D,KAAKgF,UACRhF,KAAKgF,QAAUA,EACfhF,KAAK2I,UAAY,IAAIC,UAAU5D,EAASA,IAGtChF,KAAK6I,kBACP7I,KAAKgG,QAET,CAEQwB,iBACN,MAAM,cACJnB,EAAa,KACbnB,EAAI,QAEJ4D,GAAUzC,KAAmBnB,GAAQA,EAAOtC,GACxCF,EACAF,IACFxC,KAAK8D,OAGT,OAAO8B,KAAKmD,IAAIC,EAAAA,GAAMF,EAAS,EACjC,CAEQ3D,UACNnF,KAAKiJ,aAAc,EACnBjJ,KAAKiG,QACLjG,KAAKkJ,aACLlJ,KAAKmJ,kBAELpG,EAActB,OAAOzB,KAAK6D,GAC5B,CAEQqF,aACNlJ,KAAKsG,OAAO8C,SAAS7C,IACfA,GAASA,IAAUjE,GACrBiE,EAAMG,OACR,IAIF1G,KAAK2I,eAAYxF,EACjBnD,KAAKsG,OAAS,EAChB,CAEQ/B,aACN,MAAM,cAAE8B,GAAkBrG,KAAK8D,OAE/B9D,KAAKqJ,YAAchD,EAhUW,EAgUiCxD,CACjE,CAEAyG,SAASC,GACPvJ,KAAKoE,YAAcmF,CACrB,CAEQ/E,eACNxE,KAAKwJ,aAAcC,EAAAA,EAAAA,GA7UH,IA6UgClG,GAEhDP,EAAQhD,KAAKwJ,aAAatJ,QAAQ,CAChCwJ,KAAM,OACNzI,KAAM,CACJjB,KAAK6D,GACL7D,KAAKmE,OACLnE,KAAKgF,QACLhF,KAAK8D,OAAOuC,cACZrG,KAAKoE,YACLpE,KAAK2J,eAAeC,KAAK5J,QAG/B,CAEQmJ,kBACNnG,EAAQhD,KAAKwJ,aAAatJ,QAAQ,CAChCwJ,KAAM,UACNzI,KAAM,CAACjB,KAAK6D,KAEhB,CAEQ8F,eAAe9C,EAAsBgD,EAAoBC,GAC/D9J,KAAK6I,kBAAmB,EACxB7I,KAAK6G,aAAeA,EACpB7G,KAAK6J,WAAaA,EAClB7J,KAAK8J,YAAcA,EAEf9J,KAAKsF,WACPtF,KAAKgG,QAET,CAEA+D,WAAW5F,GACTnE,KAAKiG,QACLjG,KAAKmE,OAASA,EACdnE,KAAKuE,aAELvB,EAAQhD,KAAKwJ,aAAatJ,QAAQ,CAChCwJ,KAAM,aACNzI,KAAM,CACJjB,KAAK6D,GACL7D,KAAKmE,OACLnE,KAAK8D,OAAOuC,cACZrG,KAAKgK,aAAaJ,KAAK5J,QAG7B,CAEQgK,aAAanD,EAAsBgD,EAAoBC,GAC7D9J,KAAK6G,aAAeA,EACpB7G,KAAK6J,WAAaA,EAClB7J,KAAK8J,YAAcA,EACnB9J,KAAKsF,WAAY,EACjBtF,KAAKqF,aAAc,EAEnBrF,KAAKgG,QACP,CAEQA,SACDhG,KAAK8J,cAIN9J,KAAKiJ,aAILjJ,KAAKqF,cAIJrF,KAAKsF,YACRtF,KAAKiK,kBAAe9G,GAGtBnD,KAAK0F,SAAU,EACf1F,KAAKqF,aAAc,EACnBrF,KAAKsF,WAAY,GAEjB4E,EAAAA,EAAAA,KAAQ,KACN,GAAIlK,KAAKiJ,YACP,OAAO,EAIT,IAAKjJ,KAAKqF,aACapC,MAAMiD,KAAKlG,KAAK4E,WAAWuB,UAAUC,OAAM,QAAC,SAAE+D,GAAU,SAAKA,CAAQ,IAExF,OAAO,EAIX,MAAMC,EAAaxE,KAAKiC,MAAM7H,KAAK2F,kBAC7BY,EAAQvG,KAAK8H,SAASsC,GAC5B,IAAK7D,GAASA,IAAUjE,EAOtB,OANKiE,GACHvG,KAAKqK,aAAaD,GAGpBpK,KAAKqF,aAAc,EACnBrF,KAAKsF,WAAY,GACV,EAGLtF,KAAKqJ,aAAee,EAAapK,KAAKqJ,aAAgB,GACxDrJ,KAAKsK,iBAAiBF,GAGpBA,IAAepK,KAAKyG,iBACtBzG,KAAK4E,WAAWwE,SAASmB,IACvB,MAAM,IACJ7F,EAAG,SAAEyF,EAAQ,SAAE1E,EAAUxB,QAAQ,EAAEa,EAAC,EAAEC,GAAM,CAAC,EAAC,OAAEnB,GAC9C2G,EAECJ,GAAa1E,IAChBf,EAAIG,UAAUC,GAAK,EAAGC,GAAK,EAAG/E,KAAKgF,QAAShF,KAAKgF,SACjDN,EAAIqD,UAAUxB,EAAOzB,GAAK,EAAGC,GAAK,IAG/BoF,IACHI,EAAcJ,UAAW,EACzBvG,MACF,IAGF5D,KAAKyG,eAAiB2D,GAGxB,MAAMI,EAAMC,KAAKD,MACXE,EAAe1K,KAAKiK,aAAejK,KAAK6J,YAAcW,EAAMxK,KAAKiK,cAAgB,EACjFU,EAAQ/E,KAAKgF,IAAI,EAAI5K,KAAK+F,UAAY/F,KAAK+G,MAAS2D,GACpDG,EAAyBjF,KAAKiC,MAAM7H,KAAK2F,iBAAmBgF,GAKlE,GAHA3K,KAAKiK,aAAeO,EAGhBG,EAAQ,IAAMP,IAAepK,KAAK8J,YAAe,GAAKe,EAAyB7K,KAAK8J,YAAe,GAAI,CACzG,GAAI9J,KAAK8D,OAAOmD,OAId,OAHAjH,KAAKqF,aAAc,EACnBrF,KAAK0F,SAAU,EACf1F,KAAKqE,aACE,EAETrE,KAAKsE,WAELtE,KAAK2F,iBAAmB,CAG1B,MAAO,GAAIgF,EAAQ,IAAqB,IAAfP,GAAoBS,EAAyB,GAAI,CACxE,GAAI7K,KAAK8D,OAAOmD,OAId,OAHAjH,KAAKqF,aAAc,EACnBrF,KAAK0F,SAAU,EACf1F,KAAKqE,aACE,EAETrE,KAAKsE,WAELtE,KAAK2F,iBAAmB3F,KAAK8J,YAAe,CAG9C,KAAO,SACmB3G,IAAxBnD,KAAK8F,iBACDsE,IAAepK,KAAK8F,gBAEnB6E,EAAQ,GAAKE,EAAyB7K,KAAK8F,gBACxC6E,EAAQ,GAAKE,EAAyB7K,KAAK8F,gBAKnD,OAFA9F,KAAK8F,oBAAiB3C,EACtBnD,KAAKqF,aAAc,GACZ,EAIPrF,KAAK2F,kBAAoBgF,CAC3B,CAEA,MAAMG,EAAiBlF,KAAKiC,MAAM7H,KAAK2F,kBAEvC,QAAK3F,KAAK8H,SAASgD,KACjB9K,KAAKqK,aAAaS,GAClB9K,KAAKsF,WAAY,EACjBtF,KAAKqF,aAAc,GACZ,EAGE,KAEf,CAEQyC,SAASsC,GACf,OAAOpK,KAAKsG,OAAO8D,EACrB,CAEQC,aAAaD,GACnBpK,KAAKsG,OAAO8D,GAAc9H,EAE1BU,EAAQhD,KAAKwJ,aAAatJ,QAAQ,CAChCwJ,KAAM,eACNzI,KAAM,CAACjB,KAAK6D,GAAIuG,EAAYpK,KAAK+K,YAAYnB,KAAK5J,QAEtD,CAEQsK,iBAAiBF,GACvB,GAAIpK,KAAK8J,YAAe,EACtB,OAGF,MAAMrD,GAAiBgD,EAAAA,EAAAA,GAAczJ,KAAK8J,YAAcM,EAAa,GACrEpK,KAAKsG,OAAOG,QAAkBtD,CAChC,CAEQ4H,YAAYX,EAAoBY,GAClChL,KAAKsG,OAAO8D,KAAgB9H,IAIhCtC,KAAKsG,OAAO8D,GAAcY,EAEtBhL,KAAKsF,WACPtF,KAAKgG,SAET,EAGF,SAASyB,EAAiB9D,EAA2B4D,GACnD,MAAM0D,EAAgBrF,KAAKiC,MAAMlE,EAAOwE,YAAcZ,GAChD2D,EAAiBtF,KAAKiC,MAAMlE,EAAOwH,aAAe5D,GACpD5D,EAAO+D,QAAUuD,GAAiBtH,EAAOgE,SAAWuD,IACtDvH,EAAO+D,MAAQuD,EACftH,EAAOgE,OAASuD,EAEpB,CAEA,S,iBCjlBe,SAASzB,EAAcvI,EAAgBkK,GACpD,OAAOA,EAAQxF,KAAKC,MAAMuF,EAAQlK,GAAUA,CAC9C,C","sources":["webpack://telegram-t/./src/util/WorkerConnector.ts","webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/cycleRestrict.ts"],"sourcesContent":["import generateIdFor from './generateIdFor';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n  acceptsBuffer?: boolean;\n}\n\ntype CallMethodData = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype OriginMessageData = CallMethodData | {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type WorkerMessageData = {\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\n// TODO Replace `any` with proper generics\nexport default class WorkerConnector {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(private worker: Worker) {\n    this.subscribe();\n  }\n\n  request(messageData: { name: string; args: any }) {\n    const { worker, requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateIdFor(requestStates);\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    worker.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.worker.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  private subscribe() {\n    const { worker, requestStates } = this;\n\n    worker.addEventListener('message', ({ data }: WorkerMessageEvent) => {\n      if (data.type === 'methodResponse') {\n        const requestState = requestStates.get(data.messageId);\n        if (requestState) {\n          if (data.error) {\n            requestState.reject(data.error);\n          } else {\n            requestState.resolve(data.response);\n          }\n        }\n      } else if (data.type === 'methodCallback') {\n        const requestState = requestStates.get(data.messageId);\n        requestState?.callback?.(...data.callbackArgs);\n      } else if (data.type === 'unhandledError') {\n        throw new Error(data.error?.message);\n      }\n    });\n  }\n}\n","import {\n  DPR,\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_SAFARI,\n  IS_ANDROID,\n} from '../../util/environment';\nimport WorkerConnector from '../../util/WorkerConnector';\nimport { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { fastRaf } from '../../util/schedulers';\n\ninterface Params {\n  noLoop?: boolean;\n  size?: number;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst MAX_WORKERS = 4;\nconst HIGH_PRIORITY_QUALITY = IS_SINGLE_COLUMN_LAYOUT ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst instancesById = new Map<string, RLottie>();\n\nconst workers = new Array(MAX_WORKERS).fill(undefined).map(\n  () => new WorkerConnector(new Worker(new URL('./rlottie.worker.ts', import.meta.url))),\n);\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private containers = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [container, canvas, onLoad, id, , params] = args;\n    let instance = instancesById.get(id);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesById.set(id, instance);\n    } else {\n      instance.addContainer(container, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    containerId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad: NoneToVoidFunction | undefined,\n    private id: string,\n    private tgsUrl: string,\n    private params: Params = {},\n    private customColor?: [number, number, number],\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addContainer(containerId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeContainer(containerId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.containers.get(containerId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.containers.delete(containerId);\n\n    if (!this.containers.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, containerId?: string) {\n    if (containerId) {\n      this.containers.get(containerId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(containerId?: string) {\n    if (containerId) {\n      this.containers.get(containerId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.containers.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number]) {\n    this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  setSharedCanvasCoords(containerId: string, newCoords: Params['coords']) {\n    const containerInfo = this.containers.get(containerId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    if (!canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false') {\n      const sizeFactor = this.calcSizeFactor();\n      ensureCanvasSize(canvas, sizeFactor);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      canvas.dataset.isJustCleaned = 'true';\n      fastRaf(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvas.width),\n      y: Math.round((newCoords?.y || 0) * canvas.height),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addContainer(\n    containerId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      let { size } = this.params;\n\n      if (!size) {\n        size = (\n          container.offsetWidth\n          || parseInt(container.style.width, 10)\n          || container.parentNode.offsetWidth\n        );\n\n        if (!size) {\n          throw new Error('[RLottie] Failed to detect width from container');\n        }\n      }\n\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n\n      canvas.style.width = `${size}px`;\n      canvas.style.height = `${size}px`;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      canvas.width = imgSize;\n      canvas.height = imgSize;\n\n      container.appendChild(canvas);\n\n      this.containers.set(containerId, {\n        canvas, ctx, onLoad,\n      });\n    } else {\n      if (!container.offsetParent) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      ensureCanvasSize(canvas, sizeFactor);\n\n      imgSize = Math.round(this.params.size! * sizeFactor);\n\n      this.containers.set(containerId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round((coords?.x || 0) * canvas.width),\n          y: Math.round((coords?.y || 0) * canvas.height),\n        },\n        onLoad,\n      });\n    }\n\n    if (!this.imgSize) {\n      this.imgSize = imgSize;\n      this.imageData = new ImageData(imgSize, imgSize);\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      isLowPriority,\n      size,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY\n        : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(DPR * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesById.delete(this.id);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'init',\n      args: [\n        this.id,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'destroy',\n      args: [this.id],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'changeData',\n      args: [\n        this.id,\n        this.tgsUrl,\n        this.params.isLowPriority,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.containers.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.containers.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'renderFrames',\n      args: [this.id, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    canvas.width = expectedWidth;\n    canvas.height = expectedHeight;\n  }\n}\n\nexport default RLottie;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["WorkerConnector","constructor","worker","Map","this","subscribe","request","messageData","requestStates","requestStatesByCallback","messageId","generateIdFor","payload","type","requestState","promise","Promise","resolve","reject","Object","assign","args","length","withCallback","callback","pop","set","catch","finally","delete","postMessage","cancelCallback","progressCallback","isCanceled","get","addEventListener","data","error","response","callbackArgs","Error","message","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_SINGLE_COLUMN_LAYOUT","LOW_PRIORITY_QUALITY","IS_ANDROID","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","instancesById","workers","Array","fill","undefined","map","Worker","URL","lastWorkerIndex","RLottie","static","container","canvas","onLoad","id","params","instance","addContainer","coords","containerId","tgsUrl","customColor","onEnded","onLoop","initConfig","initRenderer","removeContainer","ctx","isSharedCanvas","containers","clearRect","x","y","imgSize","remove","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","direction","doPlay","pause","from","values","every","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","startFrameIndex","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","dataset","isJustCleaned","sizeFactor","calcSizeFactor","ensureCanvasSize","width","height","fastRaf","round","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","offsetWidth","parseInt","style","document","createElement","getContext","appendChild","offsetParent","imageData","ImageData","isRendererInited","quality","max","DPR","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","lastRenderAt","animate","isLoaded","frameIndex","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","min","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","expectedHeight","offsetHeight","index"],"sourceRoot":""}