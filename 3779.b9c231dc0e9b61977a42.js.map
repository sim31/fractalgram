{"version":3,"file":"3779.b9c231dc0e9b61977a42.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) return;\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations } = global;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatId({ id: recipientId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatId, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <FullNameTitle peer={user} withEmojiStatus />\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^[^\\d]([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  checkedUsername,\n  isUsernameAvailable,\n  maxBioLength,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable, checkedUsername } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n          play={isIntersecting}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <OptimizedVideo canPlay src={mediaData} className={transitionClassNames} loop disablePictureInPicture />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCoverAnimated from '../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  const preview = useMemo(() => {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }, [firstSticker, lang.isRtl, observeIntersection, stickerSet]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {preview}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji } = getActions();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n        {!isRecent && isEmoji && !stickerSet.installedDate && (\n          <Button\n            className=\"symbol-set-add-button\"\n            withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n            onClick={handleAddClick}\n            pill\n            size=\"tiny\"\n            fluid\n          >\n            {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n          </Button>\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className: string;\n  loadAndPlay: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  featuredCustomEmojiIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  shouldPlay,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedCustomEmojiIds));\n\n    const filteredFeaturedIds = featuredCustomEmojiIds?.filter((id) => !addedCustomEmojiIds.includes(id)) || [];\n    const featuredSetIds = Object.values(pickTruthy(stickerSetsById, filteredFeaturedIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n      ...featuredSetIds,\n    ];\n  }, [addedCustomEmojiIds, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleEmojiSelect}\n            isSavedMessages={isSavedMessages}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"checkout-info-item\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkoutInfoItem\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkout-info-item-icon\":\"YqZr6__8x50n06_r2wD8\",\"checkoutInfoItemIcon\":\"YqZr6__8x50n06_r2wD8\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiWebDocument } from '../../api/types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photo?: ApiWebDocument;\n    isRecurring?: boolean;\n    recurringTermsUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  onAcceptTos?: (isAccepted: boolean) => void;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  onAcceptTos,\n}) => {\n  const lang = useLang();\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl,\n  } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className={styles.checkoutInfoItem}>\n      <i className={buildClassName(icon, styles.checkoutInfoItemIcon)}> </i>\n      <div className={styles.checkoutInfoItemInfo}>\n        <div className={styles.checkoutInfoItemInfoTitle}>\n          {title}\n        </div>\n        <p className={styles.checkoutInfoItemInfoData}>\n          {data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            tabIndex={0}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        validateRequest();\n        break;\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.PaymentInfo);\n        break;\n      case PaymentStep.PaymentInfo:\n        sendCredentials();\n        break;\n      case PaymentStep.Checkout:\n        sendForm();\n        break;\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n  }, [paymentDispatch]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoiceContent?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoiceContent?.isRecurring && 'recurring')}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photo,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","downloadProgress","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","onEnter","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","chatId","threadId","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","type","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","settings","byKey","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","chat","renderText","formatMediaDateTime","date","shouldSkipHistoryAnimations","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","messageIds","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatId","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","getUserFirstOrLastName","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","children","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","userOrChat","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","firstSticker","handleCardClick","preview","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","customEmojiForEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","isCustomEmojiPicker","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","isRecent","isPremiumSet","handleClearRecent","handleAddClick","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","shouldPlay","featuredCustomEmojiIds","featuredIds","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","filteredFeaturedIds","featuredSetIds","noPopulatedSets","stickerSetEl","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","withPreview","listEmojis","usePrevDuringAnimation","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","isRecurring","recurringTermsUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","forceAspectRatio","langStringSplit","renderTosLink","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","setIsTosAccepted","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}