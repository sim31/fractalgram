{"version":3,"file":"860.99bd0f1a7907dd047a09.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/getSenderName.ts","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Search });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail?.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet, selectStickerSetByShortName } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker, stickerSetShortName }: OwnProps) => {\n    return {\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  useEffect(() => {\n    setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [items, shouldRemoveSelectionOnReset]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_FOR_QUICK_UPLOAD).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail?.dataUri) || thumbnailDataUrl}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","chat","user","dir","renderText","formatMediaDateTime","date","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","downloadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","disabled","step","value","type","onChange","Number","target","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","previewMediaHash","blobUrlPreview","startsWith","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","AudioOrigin","Audio","onPlay","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","previewBlobUrl","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","loadMore","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}