{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/hooks/useBrowserOnline.ts","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["window","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","targetIndexDelta","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","indexOf","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","setTimeout","newGlobal","getGlobal","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","hasDraft","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","selectEmojiKeywords","isLoading","emojiKeywords","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","isSensitiveEnabled","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","handleKeyDown","metaKey","startsWith","digit","preventDefault","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","duration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","hasDocument","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","noMediaCorners","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","IS_ANDROID","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_IOS","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","shouldSupressTextFormatter","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","footerClassName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Errors","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","handleUnload","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.19d1e55c6fce9e812d29.js","sourcesContent":["import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId, selectIsViewportNewest, selectReplyingToId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { hasDraft: true });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { hasDraft: false });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    actions.openChat({ id: undefined });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectEmojiKeywords, selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n  let currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n    global = updateChat(global, chatId, { hasDraft: Boolean(result.draftsById[chatId]) });\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', () => {\n  callApi('fetchNotificationExceptions');\n});\n\naddReducer('loadNotificationSettings', (global) => {\n  const { serverTimeOffset } = global;\n  (async () => {\n    const result = await callApi('fetchNotificationSettings', {\n      serverTimeOffset,\n    });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n\naddReducer('loadContentSettings', () => {\n  (async () => {\n    const result = await callApi('fetchContentSettings');\n    if (!result) return;\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateContentSettings', (global, actions, payload) => {\n  (async () => {\n    setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: payload }));\n\n    const result = await callApi('updateContentSettings', payload);\n    if (!result) {\n      setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: !payload }));\n    }\n  })();\n});\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const { chatId, formattedText, replyingToId } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { hasDraft: Boolean(formattedText) });\n\n        setGlobal(global);\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        id, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[id];\n\n      if (chat) {\n        global = updateChat(global, id, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, id, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name=\"zoom-fade\"\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId, resetChatCreation,\n    settingsScreen,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={IS_SINGLE_COLUMN_LAYOUT ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n    } = global;\n    return { searchQuery: query, searchDate: date, activeChatFolder };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [\n    openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode,\n    shouldShowCloseButton,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const isMediaInteractive = photo && onMediaClick && !isSquarePhoto && !webPage.hasDocument;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    handleContextMenu(e);\n  }, [handleContextMenu]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isMessageLocal(message)}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectEmojiKeywords,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      // If selection is outside of input, set cursor at the end of input\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput);\n      });\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showError, slowMode, isAdmin, sendMessage, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        language={language}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        loadEmojiKeywords={loadEmojiKeywords}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSupressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n            language={language}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = selectEmojiKeywords(global, 'en');\n    const emojiKeywords = language !== 'en' ? selectEmojiKeywords(global, language) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_SINGLE_COLUMN_LAYOUT),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ISettings,\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default memo(ErrorsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    updateIsOnline(false);\n  }, () => {\n    updateIsOnline(true);\n  });\n\n  useEffect(() => {\n    function handleUnload() {\n      updateIsOnline(false);\n    }\n\n    window.addEventListener('beforeunload', handleUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleUnload);\n    };\n  }, [updateIsOnline]);\n\n  // Browser tab indicators\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}