{"version":3,"file":"3779.8db9609fb77de268ba1e.js","mappings":"gqDAiNA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXX,EACTO,EAAIK,IAAMZ,EACDA,aAAkBa,iBAC3BN,EAAIK,IAAMZ,EAAOc,OAEjBP,EAAIK,IAAMZ,EAAOY,IAGnBV,EAAMa,YAAYR,GAEdN,IAAWe,EAAAA,GAAAA,eAAmCf,IAAWe,EAAAA,GAAAA,eAAkC,CAC7Fd,EAAMG,UAAUC,IAAI,eAChBL,IAAWe,EAAAA,GAAAA,gBACbd,EAAMG,UAAUC,IAAI,QAEtB,MAAMW,EAAcd,SAASe,cAC3BjB,IAAWe,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFf,EAAMa,YAAYE,EAAYE,WAAU,IAI5C,OAAOjB,EAyBT,SAASkB,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBpB,SAASe,cAA8B,6CAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASrC,EAA2BsC,GAC3C,IAAIC,EACAC,EAEJ,OAAQxC,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,2DAAyDE,EAAAA,EAAAA,IAAiBH,EAASZ,MACxGc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,6DACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,kEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,qEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,+CAA6CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC5Fc,EAAgB,4DAGpB,MAAMpB,EAAYlB,SAASe,cAA2BsB,GAChDG,EAAWtB,GAAaA,EAAUuB,iBAAsDH,GAE9F,MAAO,CACLpB,UAAAA,EACAwB,QAASF,MAAAA,OAAF,EAAEA,EAAWA,EAASG,OAAS,IAI1C,SAASC,EAAW7C,EAAuBD,GACzC,OAAQA,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFd,EAAM8C,WAA2BX,MAAMY,UAAY,QACpD,MAEF,KAAKjC,EAAAA,GAAAA,mBACHd,EAAMG,UAAUC,IAAI,W,yDChS1B,SAAS4C,EAAuBC,GAE9B,GAAIA,EAAMC,gCAA6E,mBAApCD,EAAME,0BAEvD,OAAOF,EAAME,0BAA0BC,KAAKH,GAkBzC,SAASI,IACd,GAAIpD,SAASqD,wBACX,IACErD,SAASsD,uBACT,MAAOC,GACHC,EAAAA,IAEFC,QAAQC,IAAI,8BAA+BH,I,0FChGnD,MAIMI,EAAQ,IAAIC,IC4BX,MAAMC,EAAgB,IAMR,UANS,QAC5BzB,EAD4B,QAE5B0B,EAAU,EAFkB,YAG5BC,EAH4B,OAI5BjE,EAJ4B,MAK5BkE,GACmB,EACnB,MAAMC,EAAQ7B,GAAU8B,EAAAA,EAAAA,IAAgB9B,QAAW+B,EAC7CnB,EAAQZ,GAAUgC,EAAAA,EAAAA,IAAgBhC,QAAW+B,EAC7CE,EAAejC,GAAUkC,EAAAA,EAAAA,IAAuBlC,QAAW+B,EAC3DI,EAAenC,GAAUoC,EAAAA,EAAAA,IAAuBpC,QAAW+B,EAC3DM,IAAkBrC,IAAUsC,EAAAA,EAAAA,IAAuBtC,GACnDuC,IAAkBvC,IAAUwC,EAAAA,EAAAA,IAAuBxC,GACnDyC,EAAYzC,GAAU0C,EAAAA,EAAAA,IAAmB1C,QAAW+B,EACpDY,EAAchB,MAAAA,GAAH,UAAGA,EAAaiB,cAAhB,aAAG,EAAsBlB,GACpCmB,EAAgBC,QAAQH,MAAAA,OAAD,EAACA,EAAaI,SACrCA,EAAUD,QAAQlC,GAASuB,GAAgBI,GAC3CS,EAAUF,SAASC,IAAYlB,GAASI,GAAgBI,KACxD,MAAEY,GAAUrC,GAASuB,GAAgB,GACrCe,EAAoBxF,IAAWe,EAAAA,GAAAA,YAC/B0E,EAAezF,IAAWe,EAAAA,GAAAA,aAE1B2E,GAAeC,EAAAA,EAAAA,KAAQ,IAAOC,GAC9B3B,EACEgB,EACEA,EAAYI,SAAWO,GAClBC,EAAAA,EAAAA,IAAwBZ,GACV,IAAZjB,GAEF8B,EAAAA,EAAAA,IAAkB7B,EAAa2B,EAAS,MAAQ,UAE/C,QAAOX,EAAYvD,aAGtBoE,EAAAA,EAAAA,IAAkB7B,EAAa2B,EAAS,MAAQ,UAGpDtD,IAAWyD,EAAAA,EAAAA,IAAoBzD,EAASsD,EAAS,aAAe,kBACtE,CAAC3B,EAAa3B,EAAS2C,EAAajB,IAEjCgC,GAAmBC,EAAAA,EAAAA,GACvB3D,IAAYkD,GAAqBC,KAAiBM,EAAAA,EAAAA,IAAoBzD,EAAS,kBAC/E+B,EACA6B,EAAAA,GAAAA,aACA7B,EACAH,GAEIiC,EAAmBT,IACnBU,GAAiBH,EAAAA,EAAAA,GACrBE,OACA9B,EACA6B,EAAAA,GAAAA,aACA7B,EACAH,IAGAmC,UAAWC,EADP,aAEJC,IACEC,EAAAA,EAAAA,GACFd,GAAa,QACbrB,EACA/B,IAAWmE,EAAAA,EAAAA,IAAsBnE,EAAS,mBAC1C+B,EACAH,GAGIwC,EAAgBvC,GAASjB,GAAUiB,GAASjB,GAAQyD,aAAUtC,EACpE,IAAIuC,GAAkBvB,IAAYqB,GAAgBJ,IAAsBF,GAAkBJ,EAC1F,MAAMa,EChGO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,IAAY,KAKV,GAJAD,GAAY,EAEZF,EAAWI,aAAU9C,GAEhByC,EACH,OAGF,MAAMxG,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMmG,GACLxG,EAAI8G,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYhH,IAC3BiH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAxBlD,EACI,GAyBfV,EAAWI,QAAUE,EAAOK,cAC3B,CAACZ,IAIJ,MAAMa,EF1BO,SAAiBb,GAAsD,IAApCc,EAAoC,wDAAhB1D,EAAgB,uCACpF,MAAM6C,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUjD,EAAMgE,IAAIf,QAAWzC,GACvEyD,GAAad,EAAAA,EAAAA,MACbe,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWX,SAAWS,IACxBK,aAAaH,EAAWX,SACxBW,EAAWX,aAAU9C,IAGvB6D,EAAAA,EAAAA,KAAU,KACR,IAAKpB,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAMtH,EAAM,IAAIC,MAEhBD,EAAI6H,OAAS,KACX,MAAMd,GAASC,EAAAA,EAAAA,IAAYhH,IAC3BiH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBpD,EACI,GAyBb,MAAMW,EAAiBf,EAAOK,YAE9BX,EAAWI,QAAUiB,EACrBL,IAEIlE,EAAMwE,MA7BO,KA8BfxE,EAAMyE,QAERzE,EAAM0E,IAAIzB,EAASsB,IAGjBlE,EACF4D,EAAWX,QAAUqB,OAAOC,YAAW,KACrCnI,EAAIK,IAAMmG,IACT5C,GAEH5D,EAAIK,IAAMmG,IAEX,CAACA,EAAS5C,EAAO6D,EAAaH,IAE1Bb,EAAWI,QEdGuB,CAAQ5B,QAAWzC,EAAWe,QAAQ2B,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAWzC,EDkEnDsE,EAAa/B,GAAiBtE,IAAWsG,EAAAA,EAAAA,IAA4BtG,IACrFsE,GAAiB5G,IAAWe,EAAAA,GAAAA,eAC/B6F,EAAgBC,GAEd1B,GAAiBiB,IACnBQ,EAAgBR,GAGlB,MAAMyC,EAAWvG,GACbwG,EAAAA,EAAAA,IAAmBxG,GACnB2B,EACG,SAAQA,EAAavC,MAAMuC,MAAAA,GAAAA,EAAa8E,eAAiB,MAAQ,aAClE1E,EAEN,IAAI2E,EAaJ,OAZI1G,EACEqC,GAAmBE,EACrBmE,GAAaC,EAAAA,EAAAA,IAAmB3G,GAAU4G,UACjC/E,GAASI,EAClByE,GAAaG,EAAAA,EAAAA,IAAwBhF,GAASI,IACrCrB,GAASuB,KAClBuE,GAAaI,EAAAA,EAAAA,IAAoBlG,GAASuB,IAG5CuE,EAAa7D,EAAgBkE,EAAAA,GAA+BC,EAAAA,GAGvD,CACL5D,aAAAA,EACAvB,MAAAA,EACAjB,MAAAA,EACAqB,aAAAA,EACAE,aAAAA,EACAY,QAAAA,EACAC,QAAAA,EACAC,MAAAA,EACAZ,gBAAAA,EACAE,gBAAAA,EACAgE,SAAAA,EACAjC,cAAAA,EACAoC,WAAAA,EACAxD,kBAAAA,EACA+D,YAAatE,EACbE,cAAAA,EACAuB,aAAAA,EACAJ,iBAAAA,EACAF,eAAAA,EACAJ,iBAAAA,EACAO,aAAAA,EACAxB,UAAAA,I,oGEjHJ,MAyEA,GAAeyE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAiD,IAAxC,QAAEpH,EAAF,WAAWqH,GAA6B,EAC/C,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,IACnD,gBAAEI,GAAqBF,IAAYG,EAAAA,EAAAA,IAA4BL,EAAQpH,EAASsH,IAAc,GAC9FI,GAAOC,EAAAA,EAAAA,IAAWP,EAAQpH,EAAQ4H,QAQxC,MAAO,CACLJ,iBAAkBH,GAAcG,EAChCK,YATkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKtI,KACtC2I,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D3F,EAQFmG,6BANmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAOtEY,iBANuBV,IAAQW,EAAAA,EAAAA,IAAiBX,MAVlCP,EAzEkC,IAWhD,IAXiD,OACrDmB,EADqD,WAErDjB,EAFqD,QAGrDrH,EAHqD,MAIrDuI,EAJqD,gBAKrDf,EALqD,YAMrDK,EANqD,6BAOrDK,EAPqD,iBAQrDE,EARqD,UASrDI,EATqD,QAUrDC,GACI,EACJ,MAAM,eACJC,EADI,wBAEJC,IACEC,EAAAA,EAAAA,MAEEC,GAA4BC,EAAAA,EAAAA,KAAY,KAC5CN,MAAAA,GAAAA,IACA,MAAMO,EAAaR,MAAAA,GAAAA,EAAOS,SACtBT,EAAMS,SAASC,KAAI,QAAC,GAAE7J,GAAH,SAAYA,KAC/B,CAACY,EAAQZ,IACbsJ,EAAe,CAAEK,WAAAA,EAAYG,oBAAoB,IACjDT,MACC,CAACD,EAAWD,EAAOvI,EAAQZ,GAAIsJ,EAAgBD,IAE5CU,GAA6BL,EAAAA,EAAAA,KAAY,KAC7CN,MAAAA,GAAAA,IACA,MAAMO,EAAaR,MAAAA,GAAAA,EAAOS,SACtBT,EAAMS,SAASC,KAAI,QAAC,GAAE7J,GAAH,SAAYA,KAC/B,CAACY,EAAQZ,IACTiI,EACFsB,EAAwB,CAAEI,WAAAA,IAE1BL,EAAe,CACbK,WAAAA,EACAG,oBAAoB,IAGxBT,MACC,CAACD,EAAWD,EAAOvI,EAAQZ,GAAIiI,EAAYoB,EAASE,EAAyBD,IAE1EU,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTc,QAASjB,IAAWd,EAAkB2B,OAA6BpH,EACnEyH,UAAU,SACVC,MAAOL,EAAK,8BAEZ,4BAAIA,EAAK,kCACRlB,GACC,4BAAIkB,EAAK,8BAA+B,EAAG,MAE5ChB,GACC,4BAAIgB,EAAK,+BAAgC,EAAG,MAE7C5B,GACC,mBAACkC,EAAA,EAAD,CAAQC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAAShB,GACtEhB,IAAeiC,EAAAA,EAAAA,GAAWV,EAAK,iCAAkCvB,KAChEA,GAAeuB,EAAK,2CAG1B,mBAACM,EAAA,EAAD,CAAQC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASV,GACtEC,EAAK5B,EAAkB,gCAAkC,WAE5D,mBAACkC,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,gBCzD/E,GAAelC,EAAAA,EAAAA,KAnC+B,IAMxC,IANyC,OAC7CoB,EAD6C,MAE7CzG,EAF6C,UAG7CkI,EAH6C,QAI7CtB,EAJ6C,UAK7CD,GACI,EACJ,MAAM,mBACJwB,IACEpB,EAAAA,EAAAA,MAEEqB,GAAoBnB,EAAAA,EAAAA,KAAY,KACpCN,MAAAA,GAAAA,IACAwB,EAAmB,CAAEnI,MAAAA,EAAOkI,UAAAA,IAC5BtB,MACC,CAACD,EAAWwB,EAAoBnI,EAAOkI,EAAWtB,IAE/CW,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTc,QAASU,EACTT,UAAU,SACVC,MAAM,iBAEN,mBAACC,EAAA,EAAD,CAAQC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASI,GACtEb,EAAK,wBAER,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,eCqR/E,GAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAsD,IAA7C,QAAEpH,EAAF,gBAAWkK,GAAkC,EACpD,MAAMC,GAAqB5C,EAAAA,EAAAA,IAAyBH,IAC9C,SAAEE,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACnDgD,IAAgBpK,IAAUqK,EAAAA,EAAAA,IAAoBjD,EAAQpH,GACtDsK,GAAcC,EAAAA,EAAAA,IAAyBnD,EAAQpH,GAC/CwK,EAAkBxK,IAAWyK,EAAAA,EAAAA,IAAsBrD,EAAQpH,MAAAA,OAAT,EAASA,EAAS4H,SAClE8C,UAAWC,GAAsBrD,GACpCtH,IAAWyH,EAAAA,EAAAA,IAA4BL,EAAQpH,EAASsH,IAAc,GAI3E,MAAO,CACL8C,cAAAA,EACAE,YAAAA,EACAE,gBAAAA,EACAE,UAPgBC,GAAoBT,EAQpCU,gBAPsBT,MAAAA,OAAH,EAAGA,EAAoBU,QAV5B1D,EAvQkC,IAmBhD,IAnBiD,UACrDpD,EADqD,QAErDhB,EAFqD,QAGrD/C,EAHqD,YAIrDiH,EAJqD,cAKrD6D,EALqD,SAMrDvE,EANqD,gBAOrDiE,EAPqD,cAQrDJ,EARqD,YASrDE,EATqD,UAUrDS,EAVqD,gBAWrDC,EAXqD,UAYrDN,EAZqD,gBAarDE,EAbqD,SAcrDK,EAdqD,mBAerDC,EAfqD,eAgBrDC,EAhBqD,UAiBrDC,EAjBqD,mBAkBrDC,GACI,EACJ,MAAOC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,IAAQ,IAEjE,qBACJC,EADI,2BAEJC,IACE/C,EAAAA,EAAAA,OAEI3E,aAAc2H,IAAqB1H,EAAAA,EAAAA,GACzClE,IAAWyD,EAAAA,EAAAA,IAAoBzD,EAAS,aACvCoK,EACDpK,IAAWmE,EAAAA,EAAAA,IAAsBnE,EAAS,aAGtC6L,GAAsB/C,EAAAA,EAAAA,KAAY,KAClCsB,EACFuB,EAA2B,CAAE3L,QAASA,IAEtC0L,EAAqB,CAAE1L,QAASA,MAEjC,CAAC2L,EAA4BD,EAAsBtB,EAAepK,IAE/D8L,GAAgBhD,EAAAA,EAAAA,KAAY,KAEhCuC,GADeL,EAAkB,EAAIA,EAAkB,GAC3B,KAC3B,CAACK,EAAoBL,IAElBe,GAAejD,EAAAA,EAAAA,KAAY,KAE/BuC,GADeL,EAAkB,EAAIA,EAAkB,GAC3B,KAC3B,CAACK,EAAoBL,IAElB5B,GAAOC,EAAAA,EAAAA,KAEP2C,GAA8D3I,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAE4I,EAAF,OAAa3D,GAAd,SACL,mBAACoB,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNH,UAAWlB,EAAS,cAAWvG,EAC/B8H,QAASoC,EACTE,UAAU,gBAEV,wBAAG3C,UAAU,iBAGhB,IAEH,SAAS4C,IACP,OAAOpM,EAEH,mBAAC,EAAD,CACEsI,OAAQgD,EACRjE,WAAgC,cAApBuD,EACZnC,QAAS+C,EACThD,UAAW2C,EACXnL,QAASA,IAGV8K,GAAiB7D,EAClB,mBAAC,EAAD,CACEqB,OAAQgD,EACR7C,QAAS+C,EACThD,UAAW2C,EACXpB,UAAWe,EACXjJ,MAAOoF,SAEPlF,EAoCR,GAAIsK,EAAAA,GAAyB,CAC3B,MAAMC,EAA6B,GAyCnC,GAxCKtM,MAAAA,GAAAA,EAASuM,qBAAwB/B,GACpC8B,EAAUE,KAAK,CACbC,KAAM,UACN5C,QAASuB,EACTsB,SAAUtD,EAAK,aAGdkB,IACCvH,EACFuJ,EAAUE,KAAK,CACbC,KAAMrC,EAAgB,SAAW,WACjCP,QAASgC,EACTa,SAAUtC,EAAiB,GAAEuC,KAAKT,MAAyB,IAAnBN,qBAA4C,aAGtFU,EAAUE,KAAK,CACbC,KAAM,WACNG,KAAM7I,EACN8I,SAAUtG,EACVmG,SAAUtD,EAAK,wBAKjB2B,GACFuB,EAAUE,KAAK,CACbC,KAAM,SACN5C,QAASoB,EACTyB,SAAUtD,EAAK,uBAIfsB,GACF4B,EAAUE,KAAK,CACbC,KAAM,SACN5C,QAAS0B,EACTmB,SAAUtD,EAAK,YAIM,IAArBkD,EAAU/L,OACZ,OAGF,OACE,0BAAKiJ,UAAU,6BACb,mBAACsD,EAAA,EAAD,CACEC,QAASf,EACTgB,UAAU,SAETV,EAAUrD,KAAI,QAAC,KACdwD,EADc,QACR5C,EADQ,KACC+C,EADD,SACOC,EADP,SACiBH,GADlB,SAGb,mBAACO,EAAA,EAAD,CACEC,IAAKT,EACLA,KAAMA,EACNG,KAAMA,EACNC,SAAUA,EACVhD,QAASA,GAER6C,OAINtC,GAAiB,mBAAC+C,EAAA,EAAD,CAAiBC,SAAUxB,EAAkB7F,KAAK,IAAIsH,SAAO,IAC9E3C,GAAa0B,KAKpB,OACE,0BAAK5C,UAAU,uBACZxJ,MAAAA,OAAA,EAAAA,EAASuM,uBAAwB/B,GAChC,mBAACd,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,WAChBS,QAASuB,GAET,wBAAG5B,UAAU,kBAnHrB,WACE,IAAIc,EAIJ,OAAOvH,EACL,mBAAC2G,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,qBAChBS,QAASgC,GAERzB,EACC,mBAAC+C,EAAA,EAAD,CAAiBC,SAAUxB,EAAkB7F,KAAK,IAAI8D,QAASgC,IAE/D,wBAAGrC,UAAU,mBAIjB,mBAACE,EAAA,EAAD,CACEkD,KAAM7I,EACN8I,SAAUtG,EACV2F,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,sBAEhB,wBAAGI,UAAU,mBA0Fd8D,GACD,mBAAC5D,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,gBAChBS,QAASiC,GAET,wBAAGtC,UAAU,mBAEf,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,eAChBS,QAASkC,GAET,wBAAGvC,UAAU,kBAEduB,GACC,mBAACrB,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAKrG,EAAU,8BAAgC,+BAC1D8G,QAASoB,GAET,wBAAGzB,UAAU,eAGhBkB,GACC,mBAAChB,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,UAChBS,QAAS0B,GAET,wBAAG/B,UAAU,iBAGjB,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,EAAK,SAChBS,QAASqB,GAET,wBAAG1B,UAAU,gBAEdkB,GAAa0B,S,2GCtTpB,MAAMmB,GAAOC,KAqFb,SAASA,KACP,YAA0C,IAA/B5P,SAAS6P,kBACX,yBAC2C,IAAlC7P,SAAS8P,qBAClB,4BAC8C,IAArC9P,SAAS+P,wBAClB,0BAEF,G,gBC3FT,MA2DA,GAjDwC,IAElC,IAFmC,KACvCC,EAAO,GADgC,SAC5BC,EAD4B,WAClBC,EADkB,QACNjE,EADM,YACGS,GACtC,EACJ,MAAOyD,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CrI,EAAAA,EAAAA,KAAU,KACR,MAAMsI,EAAgBtQ,SAASe,cAAc,kCAEvCwP,EAAmB,KACvB,MAAMhJ,EAAS+I,EAAgBA,EAAcE,aAAe,EAE5DJ,EAAe7I,EAAe,EAANkJ,EAAAA,KAI1BF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EA1BP,KA0B6C,GAIpE,OAFAjI,OAAOsI,iBAAiB,SAAUF,GAAc,GAEzC,KACLpI,OAAOuI,oBAAoB,SAAUH,GAAc,MAEpD,IAQH,MAAMI,GAAaC,EAAAA,EAAAA,GACjB,oBACAb,GAAc,eACdD,GAAY,YACZvD,GAAe,gBAGjB,OACE,0BAAKd,UAAWkF,EAAY7E,QAd9B,SAAmB+E,GACbhB,GACFgB,EAAEC,oBAaDjB,GACC,0BAAKpE,UAAU,8BAA8BK,QAAUwC,EAAAA,QAAoCtK,EAAV8H,GAC/E,wBAAGL,UAAY,6BAA2BuE,EAAc,YAAc,IAAMe,IAAI,QAAQlB,M,qFCjBlG,MAAMxP,GAAawQ,IACjBA,EAAEC,mBAGEE,GAAiB,CACrB,GACA,EACA,IACA,GA0OF,GArO0C,IAwBpC,IAxBqC,eACzCC,EADyC,iBAEzCC,EAFyC,YAGzCC,EAHyC,SAIzCC,EAJyC,SAKzCC,EALyC,qBAMzCC,EANyC,UAOzCC,EAPyC,sBAQzCC,EARyC,aASzCC,EATyC,UAUzCC,EAVyC,WAWzCC,EAXyC,OAYzCC,EAZyC,QAazCC,EAbyC,aAczCC,EAdyC,mBAezCC,EAfyC,cAgBzCC,EAhByC,eAiBzCC,EAjByC,qBAkBzCC,EAlByC,4BAmBzCC,EAnByC,yBAoBzCC,EApByC,YAqBzCC,EArByC,cAsBzCC,EAtByC,OAuBzCC,GACI,EACJ,MAAOC,EAAoBC,EAAkBC,IAAqBhF,EAAAA,EAAAA,KAE5DiF,GAAYhM,EAAAA,EAAAA,IAAuB,MACnCiM,GAAejM,EAAAA,EAAAA,KAAgB,GAC/BkM,EAAYD,EAAa9L,SAE/Be,EAAAA,EAAAA,KAAU,KACR,IAAKiL,EAAAA,GAAc,OACnB,IAAIC,EACJ,GAAKrB,GAAcH,IAAasB,IAAaL,EAO7C,OAHAO,EAAU5K,OAAOC,YAAW,KAC1BkK,GAAc,KAzCa,KA2CtB,KACDS,GAAS5K,OAAOP,aAAamL,IAP7BA,GAAS5K,OAAOP,aAAamL,KASlC,CAACxB,EAAWG,EAAWmB,EAAWP,EAAeE,KAEpD3K,EAAAA,EAAAA,KAAU,KACJ6J,EACF7R,SAASmT,KAAKjT,UAAUC,IAAI,0BAE5BH,SAASmT,KAAKjT,UAAUkT,OAAO,0BAE1B,KACLpT,SAASmT,KAAKjT,UAAUkT,OAAO,6BAEhC,CAACvB,KAEJ7J,EAAAA,EAAAA,KAAU,KACH6J,GACHgB,MAED,CAACA,EAAmBhB,IAEvB,MAAMrG,GAAOC,EAAAA,EAAAA,KAEP4H,GAAanI,EAAAA,EAAAA,KAAa8F,IAC9B,GAAI+B,EAAa9L,SAAW6L,EAAU7L,QAAS,CAC7C,MAAM,MACJC,EADI,KAEJoM,GACER,EAAU7L,QAAQsM,wBAChBC,EAAUxC,aAAayC,WAAazC,EAAEwC,QAAUxC,EAAE0C,cAAc,GAAGF,QACzEd,EAAO3D,KAAK4E,IAAI5E,KAAK6E,IAAIrC,IAAaiC,EAAUF,GAAQpM,GAAQqK,GAAW,OAE5E,CAACA,EAAUmB,IAERmB,GAAkB3I,EAAAA,EAAAA,KAAa8F,IACnC+B,EAAa9L,SAAU,EACvBoM,EAAWrC,KACV,CAACqC,IAEES,GAAiB5I,EAAAA,EAAAA,KAAY,KACjC6H,EAAa9L,SAAU,IACtB,KAEHe,EAAAA,EAAAA,KAAU,KACR,GAAK8K,EAAU7L,SAAY4K,EAC3B,OAAOkC,EAAAA,EAAAA,IAAcjB,EAAU7L,QAAS,CACtC+M,UAAWH,EACXI,UAAWH,EACX7H,QAAS6H,EACTI,OAAQb,MAET,CAACxB,EAAWgC,EAAiBR,EAAYS,IAE5C,MAAMK,GAAa1O,EAAAA,EAAAA,KAAQ,IACV,IAAXsM,GAAgBC,EAAgB,aAChCD,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQC,IAEZ,OACE,0BACEpG,WAAWmF,EAAAA,EAAAA,GAAe,sBAAuBU,GAAwB,SAAUI,GAAa,UAChG5F,QAASzL,IAqGf,SACE8Q,EAAqBC,EAAkBH,EAAiC0B,GAExE,MAAMsB,EAAoB9C,EAAcC,EAAY,IAEpD,OACE,0BAAK3F,UAAU,kBAAkByI,IAAKvB,GACpC,0BAAKlH,UAAU,yBACZwF,EAAe/F,KAAI,QAAC,MAAEiJ,EAAF,IAASC,GAAV,SAClB,0BACE3I,UAAU,2BACV1J,MAAQ,SAAgB,IAARoS,cAAwB,IAAY,IAANC,UAGlD,0BACE3I,UAAU,yBACV1J,MAAQ,UAASkS,GAAoB,SAnHxCI,CAAelD,EAAaC,EAAUH,EAAgB0B,GACvD,0BAAKlH,UAAU,WACb,mBAACE,EAAA,EAAD,CACEyC,UAAW/C,EAAK,iBAChBrD,KAAK,OACLsM,QAAShG,EAAAA,GACT1C,MAAM,oBACNH,UAAU,OACV0C,OAAK,EACLrC,QAASuG,GAET,wBAAG5G,UAAW8F,EAAY,aAAe,eAE3C,mBAAC5F,EAAA,EAAD,CACEyC,UAAU,SACVpG,KAAK,OACL4D,MAAM,oBACNH,UAAU,SACV0C,OAAK,EACLrC,QAASkG,GAET,wBAAGvG,UAAWuI,MAEdO,EAAAA,IACA,mBAACC,GAAA,EAAD,CAAaC,MAAI,EAAChJ,UAAU,gBAAgBiJ,MAAO7C,EAAU,EAAa,IAATD,EAAc+C,SAAU1C,IAmEnG,SAAoBd,EAAqBC,GACvC,OACE,0BAAK3F,UAAU,eACX,IAAEmJ,EAAAA,GAAAA,IAAoBzD,SAAkByD,EAAAA,GAAAA,IAAoBxD,MApE3DyD,CAAW1D,EAAaC,IACvBO,GACA,0BAAKlG,UAAU,oBACX,IAAEqJ,EAAAA,GAAAA,IAAezJ,EAAMgG,EAAWH,SAAuB4D,EAAAA,GAAAA,IAAezJ,EAAMgG,MAGpF,0BAAK5F,UAAU,WACf,mBAACE,EAAA,EAAD,CACEyC,UAAU,gBACVpG,KAAK,OACL4D,MAAM,oBACNH,UAAU,gBACV0C,OAAK,EACLrC,QAAS2G,GAEP,GAAEX,MAELK,GACC,mBAACxG,EAAA,EAAD,CACEyC,UAAU,qBACVpG,KAAK,OACL4D,MAAM,oBACNH,UAAU,aACV0C,OAAK,EACLrC,QAASsG,GAET,wBAAG3G,UAAU,cAGhB+F,GACC,mBAAC7F,EAAA,EAAD,CACEyC,UAAU,aACVpG,KAAK,OACL4D,MAAM,oBACNH,UAAU,aACV0C,OAAK,EACLrC,QAASiG,GAET,wBAAGtG,UAAWgG,EAAe,mBAAqB,sBAIxD,mBAACsD,GAAA,EAAD,CACExK,OAAQiI,EACR/G,WAAWmF,EAAAA,EAAAA,GACT,sBACCY,GAAyB,iBACzBW,GAA+B,UAElClD,UAAU,QACV+F,UAAU,SACVC,WAAS,EACTvK,QAASgI,GAER1B,GAAe9F,KAAKgK,GAEnB,mBAAChG,EAAA,EAAD,CAAUiG,SAAUrD,IAAiBoD,EAAMpJ,QAAS,IAAMoG,EAAqBgD,IAC3E,GAAEA,W,mNC5MhB,MA8QA,IAAe/L,EAAAA,EAAAA,KA3QmB,IAkB5B,UAlB6B,IACjCiM,EADiC,MAEjClQ,EAFiC,WAGjCmQ,EAHiC,WAIjCC,EAJiC,aAKjCpP,EALiC,SAMjCmL,EANiC,kBAOjCkE,EAPiC,OAQjCC,EARiC,OASjC5D,EATiC,QAUjCC,EAViC,aAWjCC,EAXiC,QAYjCpH,EAZiC,eAajC+K,EAbiC,mBAcjCC,EAdiC,mBAejCC,EAfiC,YAgBjCpJ,EAhBiC,gBAiBjCqJ,GACI,EACJ,MAAM,qBACJC,EADI,oBAEJC,EAFI,2BAGJC,EAHI,qBAIJC,IACEnL,EAAAA,EAAAA,MAEEoL,GAAWtP,EAAAA,EAAAA,IAAyB,OACnC4K,EAAW2E,IAAgBhG,EAAAA,EAAAA,KAAU4C,EAAAA,KAAiByB,EAAAA,KACtDpD,EAAagF,IAAkBjG,EAAAA,EAAAA,IAAS,IACxCuB,EAAc2E,EAAeC,GHlEvB,SAAuBC,EAAgBC,GACpD,MAAO9E,EAAc+E,IAAmBtG,EAAAA,EAAAA,IAASnL,QAAQyK,IAAQ3P,SAAS2P,MAqD1E,OAnCAiH,EAAAA,EAAAA,KAAgB,KACd,MAAM5T,EAAQyT,EAAMxP,QACd4P,EAAW,KACf,MAAMC,EAAY5R,QAAQyK,IAAQ3P,SAAS2P,KAC3CgH,EAAgBG,GAEhB9T,EAAO+T,SAAWD,GAEdE,EAAgB,KAAQL,GAAgB,IACxCM,EAAe,KACnBN,GAAgB,GAChBD,GAAY,IAYd,OATA1W,SAAS4Q,iBAAiB,mBAAoBiG,GAAU,GACxD7W,SAAS4Q,iBAAiB,yBAA0BiG,GAAU,GAC9D7W,SAAS4Q,iBAAiB,sBAAuBiG,GAAU,GAEvD7T,IACFA,EAAM4N,iBAAiB,wBAAyBoG,GAAe,GAC/DhU,EAAM4N,iBAAiB,sBAAuBqG,GAAc,IAGvD,KACLjX,SAAS6Q,oBAAoB,mBAAoBgG,GAAU,GAC3D7W,SAAS6Q,oBAAoB,yBAA0BgG,GAAU,GACjE7W,SAAS6Q,oBAAoB,sBAAuBgG,GAAU,GAC1D7T,IACFA,EAAM6N,oBAAoB,wBAAyBmG,GAAe,GAClEhU,EAAM6N,oBAAoB,sBAAuBoG,GAAc,OAIlE,IAEEtH,IAAS+E,EAAAA,GAIP,CAAC9C,EAvDc,KAgGjB,IAA+B5O,EA/F7ByT,EAAMxP,UAAa0I,IAAQ+E,EAAAA,OA+FE1R,EA5FZyT,EAAMxP,SA6FpBiQ,kBACRlU,EAAMkU,oBACGlU,EAAMmU,wBACfnU,EAAMmU,0BACGnU,EAAMoU,sBACfpU,EAAMoU,wBACGpU,EAAMqU,sBACfrU,EAAMqU,uBAnGNV,GAAgB,KAGK,KAChBF,EAAMxP,UAoGTjH,SAASwW,eACXxW,SAASwW,iBACAxW,SAASsX,oBAClBtX,SAASsX,sBACAtX,SAASuX,uBAClBvX,SAASuX,yBACAvX,SAASwX,sBAClBxX,SAASwX,uBAvGTb,GAAgB,MAuCT,EAAC,GGW4Cc,CAAcrB,EAAUC,GAExEqB,GAAwBxM,EAAAA,EAAAA,KAAY,KAEpCyM,EAAAA,IACJxB,GAAqB,KACpB,CAACA,IAEEyB,GAAwB1M,EAAAA,EAAAA,KAAY,KACpCyM,EAAAA,IACJxB,GAAqB,KACpB,CAACA,KAGF7D,EACAuF,GVjFW,SACbpB,EACA9K,EACAmM,GAEA,MAAOC,EAAaC,IAAkB3H,EAAAA,EAAAA,KAAS,IAE/CuG,EAAAA,EAAAA,KAAgB,KAAM,MAEpB,GAAKlC,EAAAA,IAAUuD,EAAAA,KAAYxB,EAAMxP,QAAS,OAC1C,MAAMjE,EAAQyT,EAAMxP,QACdiR,EAAUnV,EAAuBC,GAGvC,OAFmBhD,SAASmY,0BAA2B,UAAC1B,EAAMxP,eAAP,QAAC,EAAemR,+BACtDjU,IAAZ+T,GAGLlV,EAAMqV,sBAAuB,EAC7BL,GAAe,GACfhV,EAAM4N,iBAAiB,wBAAyBjF,GAChD3I,EAAM4N,iBAAiB,wBAAyBkH,GACzC,KACL9U,EAAM6N,oBAAoB,wBAAyBlF,GACnD3I,EAAM6N,oBAAoB,wBAAyBiH,UARrD,IAUC,CAACrB,EAAO9K,EAASmM,IAEpB,MAAMxU,GAAuB4H,EAAAA,EAAAA,KAAY,KACvC,IAAKuL,EAAMxP,QAAS,OACpB,MACMiR,EAAUnV,EADF0T,EAAMxP,SAEhBiR,EACFA,EAAQ,UAER9U,MAED,CAACqT,IAEEoB,GAAwB3M,EAAAA,EAAAA,KAAY,KACxC,IAAKuL,EAAMxP,QAAS,OACpB3D,IACA,MAAMN,EAAQyT,EAAMxP,QACdyK,GAAY4G,EAAAA,EAAAA,GAAkBtV,GAC9BkV,EAAUnV,EAAuBC,GACnCkV,EACFA,EAAQ,sBA0Bd,SAAiClV,GAC/B,GAAIA,EAAMuV,wBACR,IACEvV,EAAMuV,0BACN,MAAOhV,GACHC,EAAAA,IAEFC,QAAQC,IAAI,8BAA+BH,IA/B7CgV,CAAwBvV,GAGtB0O,IACF8G,EAAAA,EAAAA,GAASxV,KAEV,CAACyT,EAAOnT,IAEX,OAAKyU,EAIE,CAACA,EAAaF,GAHZ,EAAC,GU2BNY,CAAoBrC,EAAUsB,EAAuBE,GAEnDc,GAAkBxN,EAAAA,EAAAA,KAAY,KAClC0K,GAAe,KACd,CAACA,IAEE+C,GAAmBzN,EAAAA,EAAAA,KAAa8F,IAAM,MAC1C,MAAM4H,EAAM,UAAGxC,EAASnP,eAAZ,aAAG,EAAkBsM,wBAC5BqF,IACD5H,EAAEwC,QAAUoF,EAAOtF,MAAQtC,EAAEwC,QAAUoF,EAAOC,OAAS7H,EAAE8H,QAAUF,EAAOG,KAAO/H,EAAE8H,QAAUF,EAAOI,SACtGpD,GAAe,KAEhB,CAACA,KAEE,WACJ9D,EADI,eACQV,EADR,kBACwB6H,EADxB,iBAC2C5H,IAC7C6H,EAAAA,GAAAA,MAEFC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,IAAmBzH,OAAY3N,OAAWA,EAAW,SAEvDgV,aAAcK,EACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GAAkB7E,EAAAA,KAAWhD,IAAc0H,OAAqBjV,OAAWA,EAAW,SAE1F6D,EAAAA,EAAAA,KAAU,KACJ2N,IAAWD,EACbU,EAASnP,QAASyS,QACTnE,IAAQtC,EAAAA,KAIjBuF,EAAAA,EAAAA,GAASpC,EAASnP,WAEnB,CAAC0O,EAAQD,EAAmBH,EAAKU,KAEpCjO,EAAAA,EAAAA,KAAU,KACJoO,EAASnP,QAASqK,cAAgB8E,EAASnP,QAASsK,UACtD+E,EAAe,GACfD,GAAa,IAEbC,EAAeF,EAASnP,QAASqK,eAElC,CAACA,KAEJtJ,EAAAA,EAAAA,KAAU,KACRoO,EAASnP,QAAS8K,OAASA,IAC1B,CAACA,KAEJ/J,EAAAA,EAAAA,KAAU,KACRoO,EAASnP,QAASgL,aAAeA,IAChC,CAACA,IAEJ,MAAM0H,IAAkBzO,EAAAA,EAAAA,KAAa8F,IACnCA,EAAEC,kBACES,GACF0E,EAASnP,QAASyS,QAClBrD,GAAa,MAEbmC,EAAAA,EAAAA,GAASpC,EAASnP,SAClBoP,GAAa,MAEd,CAAC3E,IAEEkI,IAAc1O,EAAAA,EAAAA,KAAa8F,IAC3B+E,IACAD,EACFjL,EAAQmG,GAER2I,GAAgB3I,MAEjB,CAACnG,EAASiL,EAAoB6D,GAAiB5D,KAElD8D,EAAAA,GAAAA,GAAgBzD,EAAU,IAE1B,MAAM0D,IAAmB5O,EAAAA,EAAAA,KAAa8F,IACpCsF,EAAetF,EAAE+I,cAAczI,eAC9B,IAEG0I,IAAc9O,EAAAA,EAAAA,KAAY,KAC9BoL,EAAe,GACfD,GAAa,GACbT,GAAe,KACd,CAACA,IAEEqE,IAAyB/O,EAAAA,EAAAA,KAAY,KACrC0G,GAAgB4E,EAClBA,KACU5E,GAAgB2E,GAC1BA,MAED,CAACC,EAAgB5E,EAAc2E,IAE5BlD,IAAanI,EAAAA,EAAAA,KAAagP,IAC9B9D,EAASnP,QAASqK,YAAc4I,IAC/B,IAEGC,IAAqBjP,EAAAA,EAAAA,KAAakP,IACtCpE,EAAqB,CAAEjE,OAAQqI,EAAY,QAC1C,CAACpE,IAEEqE,IAAoBnP,EAAAA,EAAAA,KAAY,KAEpCkL,EAASnP,QAASqT,OAASlE,EAASnP,QAASqT,MAC7CrE,EAAoB,CAAEjE,SAAUA,MAC/B,CAACA,EAASiE,IAEPsE,IAA2BrP,EAAAA,EAAAA,KAAasP,IAC5CtE,EAA2B,CAAEjE,aAAcuI,MAC1C,CAACtE,KAEJlO,EAAAA,EAAAA,KAAU,KACR,IAAK0N,EAAmB,OACxB,MAAM+E,EAA4BzJ,IAClB,UAAVA,EAAE1B,KAA6B,MAAV0B,EAAE1B,MACzB0B,EAAE0J,iBACFf,GAAgB3I,KAMpB,OAFAhR,SAAS4Q,iBAAiB,UAAW6J,GAA0B,GAExD,KACLza,SAAS6Q,oBAAoB,UAAW4J,GAA0B,MAEnE,CAACd,GAAiBjE,IAErB,MAAMiF,GAAelF,GAAe,UAASA,EAAWvO,oBAAoBuO,EAAWlO,WACjFqT,GAAc,yBAAwBpF,KACtCjE,IAAW,UAAA6E,EAASnP,eAAT,eAAkBsK,WAAY,EAE/C,OACE,0BACE3F,UAAU,cACViP,YAAc5H,EAAAA,QAAiC9O,EAAlBuU,EAC7BoC,WAAa7H,EAAAA,QAAkC9O,EAAnBwU,GAE5B,0BACEzW,MAAOyY,IAGNjO,GACC,0BACEqO,cAAeva,EAAAA,EACfwa,cAAgB/H,EAAAA,QAAwC9O,EAAzB8V,GAC/BhO,QAAUwC,EAAAA,QAA4CtK,EAAlBwV,GACpC/N,UAAU,cAGd,+BACEyI,IAAK+B,EACL6E,SAAUhI,EAAAA,GACViI,aAAcxO,EAAc,kBAAevI,EAC3CgX,aAAW,EACXC,KAAM/V,GAASkM,IA1MC,GA4MhB+I,MAAOjV,GAAS2M,EAChBxQ,GAAG,qBACHU,MAAO0Y,GACPS,OAAQ,IAAMhF,GAAa,GAC3BiF,QAAStB,GACT/N,QAAUwC,EAAAA,QAAwCtK,EAAdyV,GACpCoB,cAAgB/H,EAAAA,QAAwC9O,EAAzB8V,IAE3BhB,EAfN,CAgBEsC,QAAUvK,IACRqF,GAAa,GACb4C,EAAkBsC,QAAQvK,IAE5BwK,aAAc1B,KAEbvE,GAAO,6BAAQ9U,IAAK8U,MAGxBiE,GACC,mBAAC1N,EAAA,EAAD,CAAQwC,OAAK,EAAC1C,UAAY,eAAc6N,KAAwBxN,QAAS0N,IACvE,wBAAG/N,UAAU,eAGhBwN,GACC,0BAAKxN,UAAW,CAAC,oBAAqB0N,GAAmBmC,KAAK,OAC1D3J,GAAc,0BAAKlG,UAAU,aAAf,gBAChB,mBAAC2D,EAAA,EAAD,CACEpH,KAAK,KACLqH,SAAUsC,EAAa,EAAIzL,EAC3BqV,QAAM,EACNzP,QAASpB,MAIbxF,IAAU+T,GACV,mBAAC,GAAD,CACE1H,UAAWA,EACXN,eAAgBA,EAChBC,iBAAkBA,EAClBS,WAAYA,EACZR,YAAaA,EACbK,sBAAuBzM,QAAQqR,GAC/BjE,4BAA6BA,EAC7BV,aAAcA,EACdJ,SAAUA,EACVD,SAAUA,GACVM,UAAWgE,EACXpD,cAAemD,EACfnE,qBAAsBgE,GAAcA,EAAWvO,MA7PpB,IA8P3BwL,OAAQW,GACRnB,mBAAoB+H,GACpB1H,yBAA0BsF,EAC1BrF,YAAamH,GACb5H,OAAQA,EACRE,aAAcA,EACdD,QAASA,EACTG,cAAekI,GACfjI,eAAgB+H,GAChB9H,qBAAsBkI,SC/GhC,IAAejR,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAQmS,KACP,MAAM,OACJ3R,EADI,SAEJN,EAFI,QAGJ5F,EAHI,cAIJoJ,EAJI,OAKJpN,GACE6b,GAEE,OACJ5J,EADI,QAEJC,EAFI,aAGJC,EAHI,SAIJhC,GACEzG,EAAOoS,YAEX,GAAI9b,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmJ,IAAUlG,EACd,MAAO,CAAEiO,OAAAA,EAAQC,QAAAA,EAASC,aAAAA,GAG5B,MAAM7P,GAAUyZ,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQlG,GAClD,OAAK1B,EAIE,CACL4H,OAAAA,EACAlG,QAAAA,EACAgY,SAAU1Z,EAAQ0Z,SAClBhc,OAAAA,EACAsC,QAAAA,EACAsK,aAAaC,EAAAA,EAAAA,IAAyBnD,EAAQpH,GAC9C2P,OAAAA,EACAC,QAAAA,EACA/B,SAAAA,EACAgC,aAAAA,GAbO,CAAEF,OAAAA,EAAQC,QAAAA,EAASC,aAAAA,GAiB9B,GAAI/E,EAGF,MAAO,CACLpJ,QAAAA,EACAgY,SAAU5O,EACVnJ,aALaqG,EAAAA,EAAAA,IAAWZ,EAAQ0D,KAAkBnD,EAAAA,EAAAA,IAAWP,EAAQ0D,GAMrEpN,OAAAA,EACAiS,OAAAA,EACAC,QAAAA,EACA/B,SAAAA,EACAgC,aAAAA,GAIJ,KAAMjI,GAAUN,GAAY5F,GAC1B,MAAO,CAAEiO,OAAAA,EAAQC,QAAAA,EAASC,aAAAA,GAG5B,IAAI7P,EAOJ,OALEA,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFic,EAAAA,EAAAA,IAAuBvS,EAAQQ,EAAQlG,IAEvC+X,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQlG,GAGzC1B,EAIE,CACL4H,OAAAA,EACAN,SAAAA,EACA5F,QAAAA,EACAgY,SAAU1Z,EAAQ0Z,SAClBhc,OAAAA,EACAsC,QAAAA,EACAsK,aAAaC,EAAAA,EAAAA,IAAyBnD,EAAQpH,GAC9C2P,OAAAA,EACAC,QAAAA,EACA/B,SAAAA,EACAgC,aAAAA,GAdO,CAAEF,OAAAA,EAAQC,QAAAA,EAASC,aAAAA,KApEZ1I,EA5ImCyS,IACrD,MAAM,QACJlY,EADI,SAEJmY,EAFI,YAGJlY,EAHI,OAIJiG,EAJI,QAKJ5H,EALI,OAMJtC,EANI,eAOJoc,EAPI,mBAQJrG,EARI,YASJnJ,EATI,OAUJqF,EAVI,aAWJE,EAXI,QAYJD,EAZI,SAaJ/B,EAbI,QAcJpF,EAdI,cAeJsR,EAfI,mBAgBJC,EAhBI,SAiBJC,GACEL,EAEEM,EAAsC,IAAnBJ,GAEnB,QACJ/W,EADI,QAEJC,EAFI,cAGJsB,EAHI,WAIJoC,EAJI,MAKJzD,EALI,cAMJJ,EANI,aAOJuB,EAPI,iBAQJJ,EARI,eASJF,EATI,iBAUJJ,EAVI,UAWJjB,EAXI,aAYJwB,GACExC,EAAc,CAChBzB,QAAAA,EAAS2B,YAAAA,EAAaD,QAAAA,EAAShE,OAAAA,EAAQkE,MAAOsY,GAvCvB,MA0CnB5R,EAASxF,QAAQnB,GAAeD,GAEhC8R,GAAiB1K,EAAAA,EAAAA,KAAa2G,IAClCuK,MAAAA,GAAAA,EAAqBvK,KACpB,CAACuK,IAEJ,GAAIrY,EACF,OAAKkB,EAaD,0BAAKqK,IAAKtF,EAAQ4B,UAAU,sBAC1B,mBAAC,GAAD,CACE0D,IAAKxL,EACLyR,IAAK/O,GAAgBJ,EACrBf,OAAK,EACLmQ,WAAY9O,EACZ+O,YAAY8G,EAAAA,EAAAA,IAA+BzT,GAAa,GAAO,GAC/DzC,aAAcA,EACdmL,SAAU3M,EACV6Q,kBAAmBhL,GAAUuR,EAC7BpG,mBAAoBA,EACpBD,eAAgBA,EAChBlJ,YAAaA,EACbiJ,QAASsG,EACTpR,QAASA,EACTmH,SAAO,EACP8D,oBAAkB,EAClB/D,OAAQ,EACRgE,gBAAiBsG,EACjBpK,aAAc,KA9BlB,0BAAK3C,IAAKtF,EAAQ4B,UAAU,sBACzB4Q,GACCpW,GAAoBF,GACpBqW,EAAAA,EAAAA,IAA+BzT,GAAY,IAC1C2F,EAAAA,KAA4B/B,EAC7BA,IAgCV,IAAKtK,EAAS,OACd,MAAMqa,GAAYC,EAAAA,EAAAA,GAAkBta,GAC9Bua,EAAYzX,QAAQuX,GAE1B,OACE,0BACE7Q,WAAWmF,EAAAA,EAAAA,GAAe,qBAAsB4L,GAAa,eAE5DvX,GAAWoX,GACVhW,GAAgBJ,GAAoBF,GAAkBJ,EACtD1D,IAAWma,EAAAA,EAAAA,IAA+BzT,EAAa6T,IACtDlO,EAAAA,KAA4B/B,EAC7BA,GAEDvH,IAAa8W,EAMZ,mBAAC,GAAD,CACE3M,IAAKxL,EACLyR,IAAK/O,GAAgBJ,EACrBf,MAAOA,EACPmQ,WAAY9O,EACZ+O,WAAYrT,IAAWma,EAAAA,EAAAA,IAA+BzT,EAAa6T,GAAW,GAC9EtW,aAAcA,EACdmL,SAAU3M,EACVgR,mBAAoBA,EACpBH,kBAAmBhL,GAAUuR,EAC7BrG,eAAgBA,EAChBD,QAASsG,EACTpR,QAASA,EACTmH,QAASA,EACT/B,SAAUA,EACVvD,YAAaA,EACbqF,OAAQA,EACRgE,gBAAiBsG,EACjBpK,aAAcA,IA+HxB,SAA4BxL,EAAkBmW,EAA2BC,EAAmBnQ,GAC1F,MAAMiO,EAAeiC,GAAc,UAASA,EAAU1V,oBAAoB0V,EAAUrV,WAC9EqT,EAAc,yBAAwBnU,KAC5C,OAAOA,EAEH,0BACEmF,UAAU,eAETc,GAAe,0BAAKqO,cAAeva,EAAAA,EAAWoL,UAAU,cACzD,0BACE1J,MAAOyY,GAGP,4BACEzY,MAAO0Y,EACPhP,WAAWmF,EAAAA,EAAAA,GAAerE,GAAe,gBACzCpM,UAAW4E,QAAQ2X,OAMzB,0BACEjR,UAAU,kBACV1J,MAAO0a,EAAa,UAASA,EAAU1V,UAAY,IAEnD,mBAAC4V,GAAA,EAAD,CAAS/Q,MAAM,WAjLQgR,CACvBrW,EACAtE,IAAWma,EAAAA,EAAAA,IAA+BzT,EAAa6T,GAAW,IACjElO,EAAAA,KAA4B/B,EAC7BA,IAuBD+P,GACC,mBAAC,GAAD,CACEzM,KAAMyM,EACNxQ,QAASkQ,EACTzP,YAAaA,EACbuD,WAAUgD,EAAAA,KAAgB4C,EAC1B3F,WAAY/K,IAAYE,SA8FlC,SAASmX,GAAY/V,EAAkBmW,EAA2BC,EAAmBnQ,GACnF,OAAOjG,EAEH,0BAAKvE,MAAM,uBACRwK,GAAe,0BAAKqO,cAAeva,EAAAA,EAAWoL,UAAU,cACzD,0BACEnL,IAAKgG,EACLuW,IAAI,GACJpR,WAAWmF,EAAAA,EAAAA,GAAerE,GAAe,gBACzCxK,MAAO0a,EAAa,UAASA,EAAU1V,UAAY,GACnD5G,UAAW4E,QAAQ2X,MAKvB,0BACEjR,UAAU,kBACV1J,MAAO0a,EAAa,UAASA,EAAU1V,UAAY,IAEnD,mBAAC4V,GAAA,EAAD,CAAS/Q,MAAM,W,mNCpRvB,MAAM,aAAEkR,GAAF,aAAgBC,IAAiBC,EAAAA,GAwBjCC,GAAanK,EAAAA,GAAe,GAAK,EACjCoK,GAAqB,IAS3B,IAAIC,GACAC,G,IAQCC,I,SAAAA,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,KAAAA,GAAAA,KAKL,MAgqBA,IAAelU,EAAAA,EAAAA,KAhqByB,IAalC,IAbmC,QACvCxF,EADuC,WAEvC2Z,EAFuC,YAGvCC,EAHuC,QAIvCvY,EAJuC,MAKvCE,EALuC,QAMvCD,EANuC,OAOvCsF,EAPuC,UAQvCiS,EARuC,gBASvCvP,EATuC,eAUvC8O,EAVuC,SAWvCjM,KACG0N,GACC,EAEJ,MAAMC,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC+W,GAAiB/W,EAAAA,EAAAA,IAAuB,MACxCgX,GAAehX,EAAAA,EAAAA,IAAkB,CAAEiX,EAAG,EAAGC,EAAG,EAAGC,MAAO,IACtDC,GAAmBpX,EAAAA,EAAAA,IAAkB,CAAEiX,EAAG,EAAGC,EAAG,EAAGC,MAAO,IAC1DE,GAAoBrX,EAAAA,EAAAA,SAAmC3C,GACvDia,GAActX,EAAAA,EAAAA,KAAO,GACrBuX,GAAgBvX,EAAAA,EAAAA,KAAO,IACtBwX,EAAeC,IAAoBlO,EAAAA,EAAAA,IAA6BvM,GACjE0a,GAAsBC,EAAAA,EAAAA,GAAYrR,GAClCsR,OAAyCva,IAAxBqa,GAAqCA,IAAwBpR,EAC9EvF,GAAcC,EAAAA,EAAAA,MACb+N,EAAoBuG,IAAsB/L,EAAAA,EAAAA,KAAS,GACpDuB,EL/B2B,MACjC,MAAOA,EAAc+E,IAAmBtG,EAAAA,EAAAA,KAAS,GAkBjD,OAhBArI,EAAAA,EAAAA,KAAU,KACR,MAAM6O,EAAW,KACfF,EA4BC,WACL,MAAMgI,EAAiB/O,KACvB,OAAO1K,QAAQyZ,GAAkB3e,SAAS2e,IA9BtBC,KAOlB,OAJA5e,SAAS4Q,iBAAiB,mBAAoBiG,GAAU,GACxD7W,SAAS4Q,iBAAiB,yBAA0BiG,GAAU,GAC9D7W,SAAS4Q,iBAAiB,sBAAuBiG,GAAU,GAEpD,KACL7W,SAAS6Q,oBAAoB,mBAAoBgG,GAAU,GAC3D7W,SAAS6Q,oBAAoB,yBAA0BgG,GAAU,GACjE7W,SAAS6Q,oBAAoB,sBAAuBgG,GAAU,MAE/D,IAEIjF,GKYciN,IACdC,EAAaC,IAAkB1O,EAAAA,EAAAA,KAAS,IACvC9I,OAAQyX,EAAc9X,MAAO+X,EAA/B,WAA4CC,IAAeC,EAAAA,GAAAA,MAC3D,QAAEtU,GAAY8S,EAEdnS,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAUvR,EACV2U,OAAQxU,EACRyU,kBAAkB,IAGpB,MAAMC,GAAerU,EAAAA,EAAAA,KAAa2J,IAChCiJ,EAAa7W,QAAU4N,EACvBhN,MACC,CAACA,IAEE2X,GAAuBC,EAAAA,GAAAA,GAAqB/B,EAAa,GApExC,KAoE8D,GAC/EgC,GAA+BD,EAAAA,GAAAA,IAAqB,KACxDtB,EAAkBlX,aAAU9C,IAC3B,GAtEkB,KAsEE,GACjBwb,GAAuBF,EAAAA,GAAAA,IAAsB5K,IACjDuJ,EAAYnX,QAAU4N,EACtBhN,MACC,CAACA,GAzEkB,KAyEa,GAE7B+X,EAAqBva,IAAUqP,EAAAA,GAC/BmL,EAAkB5M,EAAAA,GAAe,GAAKgM,EAAc,GAEpDa,GAA2B5U,EAAAA,EAAAA,KAAa8F,IAC5C,IAAKiC,EAAAA,GAAc,OACnB,MAAM8M,EAAWf,EAAehO,EAAEgP,MA9EZ,IA+EjBD,GAAY/O,EAAEiP,MAAQJ,IACtBE,GAAY/O,EAAEiP,MAAQhB,EAAcY,GACzCzD,GAAoBvG,KACnB,CAACgK,EAAiBhK,EAAoBmJ,EAAcC,IAkhBvD,IAhhBAiB,EAAAA,GAAAA,IAAW,IAAM9D,GAAmB,IAAOiB,MAE3CrV,EAAAA,EAAAA,KAAU,KACRuW,EAAiBza,KAChB,CAACA,KAEJkE,EAAAA,EAAAA,KAAU,KACR,IAAK4V,EAAa3W,cAA6B9C,IAAlBma,GAA+BrO,GAAY2B,EACtE,OAEF,IAAIuO,EAAgBjC,EAAiBjX,QACrC,MAAMmZ,EAAiB,CACrBrC,EAAG,EACHC,EAAG,GAECqC,EAAiB,CACrBtC,EAAG,EACHC,EAAG,GAECsC,EAAW,CACfvC,EAAG,EACHC,EAAG,GAEL,IACIuC,EACAC,EAFAC,EAAkBC,KAAKC,MAG3B,MAAMC,GAAqBC,EAAAA,GAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,QACtB,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAMvD,EAAWa,EAAeyC,GACtC,QAAY5c,IAAR6c,EAAmB,CACrB,MAAMC,GAAUhC,EAAc7B,IAAc2D,EAO5C,OANAjD,EAAa7W,QAAQ8W,GAAKkD,EAC1B7C,EAAYnX,SAAU,EACtBsX,EAAiByC,GACjBxB,EAAqBwB,GACrBrB,GAAqB,GACrBQ,EAAgB,CAAEpC,EAAG,EAAGC,EAAG,EAAGC,MAAO,GACd,IAAnB/B,GACFqD,EAAaY,IACN,IAET7C,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAMrD,EAAa7W,QAAQ8W,EAC3BqD,GAAI,EACJ7P,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,GAAU0K,EAAa,CAChCvB,EAAG,EACHD,EAAGlJ,EACHoJ,MAAO,OAGJ,GAET,OAAO,GAGHsD,EAAsBvQ,IAC1B,GAAmC,IAA/B8M,EAAa7W,QAAQgX,MAAa,MAAO,EAAC,GAAO,GACrD,GAAKjN,EAAEwQ,OAAuBjgB,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAIwf,EAAY,EAChB,OAAI/B,EAAehO,EAAEgP,MAtJD,GAuJX,EAAC,GAAO,IAEbhP,EAAEiP,MAAQJ,EACZkB,GAAa,EACJ/P,EAAEiP,MAAQhB,EAAcY,IACjCkB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,MAK7BU,EAAiBzQ,IACrB,GAAmC,IAA/B8M,EAAa7W,QAAQgX,MACzB,OAAQjN,EAAE1B,KACR,IAAK,OACL,IAAK,YACHwR,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,KAKZY,EAA4B,YAGC,IAFjC,EAAE3D,EAAF,EAAKC,EAAL,MAAQC,GAEyB,EADjC3c,EACiC,uDADrB,EAEZ,IAAKif,EAAoB,MAAO,CAAC,CAAExC,EAAAA,EAAGC,EAAAA,EAAGC,MAAAA,IAAS,GAAM,GAExD,IAAI0D,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAW5C,EAAcA,EAAchB,GAAS,EAChD6D,GAAW9C,EAAeA,EAAef,GAAS,EAIlD8D,EAAahT,KAAK4E,KAAK4M,EAAmBjN,KAAO2K,EAAO4D,GACxDG,EAAa/C,EAAcsB,EAAmB1H,MAAQoF,EAC5D0D,GAAYM,EAAAA,EAAAA,IAAUlE,EAAGiE,EAAYD,GACrChE,GAAImE,EAAAA,EAAAA,IAAMnE,EAAGiE,EAAYD,GAEzB,MAAMI,EAAapT,KAAK4E,KAAK4M,EAAmBxH,IAAMkF,EAAQ3c,EAAWwgB,GACnEM,EAAapD,EAAeuB,EAAmBvH,OAASiF,EAI9D,OAHA2D,GAAYK,EAAAA,EAAAA,IAAUjE,EAAGoE,EAAYD,GACrCnE,GAAIkE,EAAAA,EAAAA,IAAMlE,EAAGoE,EAAYD,GAElB,CAAC,CAAEpE,EAAAA,EAAGC,EAAAA,EAAGC,MAAAA,GAAS0D,EAAWC,IAGhC3N,EAAajD,IAGjB,GAAIqN,EAAcpX,QAEhB,YADAoX,EAAcpX,SAAU,GAGX,YAAX+J,EAAE/D,MACJ8R,GAAe,GAEjB,MAAMsD,EAAOtT,KAAKuT,IAAIxE,EAAa7W,QAAQ8W,GACrCwE,EAAOxT,KAAKuT,IAAIxE,EAAa7W,QAAQ+W,IACrC,MACJC,EADI,EAEJF,EAFI,EAGJC,GACEF,EAAa7W,QAMjB,GAJAyY,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAkC,EAAgB,CAAEpC,EAAG,EAAGC,EAAG,EAAGC,MAAO,QACrCX,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACpD,EAAGC,EAAGC,GACbmD,GAAI,CAAC,EAAG,EAAG,GACX7P,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,GAAU0K,EAAa,CAChCxB,EAAGlJ,EAAM,GACTmJ,EAAGnJ,EAAM,GACToJ,MAAOpJ,EAAM,QAKnB,GAAIoJ,EAAQ,EAAG,CAEb,MAAMuE,EAAKzT,KAAK6E,IAAIqK,EAlPX,GAmPHwE,EAAcD,EAAKvE,EAIzB,IAAIyE,EAAK3E,EAAI0E,GAAepC,EAAetC,EAAI0E,EAAcpC,EAAetC,GACxE4E,EAAK3E,EAAIyE,GAAepC,EAAerC,EAAIyE,EAAcpC,EAAerC,GAG5E,MAAM4E,EAAI,IAGV,GAAe,UAAX5R,EAAE/D,MAAoBkT,EAAclC,QAAUA,EAAO,CAEvD,MAAM4E,EAAK9T,KAAKuT,IAAIlC,EAAerC,IAAM2C,KAAKC,MAAQF,GAChDqC,EAAK/T,KAAKuT,IAAIlC,EAAepC,IAAM0C,KAAKC,MAAQF,GAGtDiC,GAAM3T,KAAKuT,IAAIlC,EAAerC,GAAK8E,EAAKD,EAAItC,EAASvC,EACrD4E,GAAM5T,KAAKuT,IAAIlC,EAAepC,GAAK8E,EAAKF,EAAItC,EAAStC,EAevD,OAZCmC,GAAiBuB,EAA0B,CAAE3D,EAAG2E,EAAI1E,EAAG2E,EAAI1E,MAAOuE,GAzQrD,SA0QdlF,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACpD,EAAGC,EAAGC,GACbmD,GAAI,CAACjB,EAAcpC,EAAGoC,EAAcnC,EAAGmC,EAAclC,OACrD1M,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,GAAU0K,EAAa,CAChCxB,EAAGlJ,EAAM,GACTmJ,EAAGnJ,EAAM,GACToJ,MAAOpJ,EAAM,QAUnB,GALAsL,EAAgB,CACdpC,EAAAA,EACAC,EAAAA,EACAC,MAAAA,GAEEsE,GApSgB,GAsSlB,YADA1X,IAIF,GAAI0X,EAAO,EAYT,YAXAjF,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAMnD,EACNoD,GAAI,EACJ7P,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,GAAU0K,EAAa,CAChCxB,EAAG,EACHC,EAAGnJ,EACHoJ,MAAAA,OAMN,MAAM8C,EAAYhD,EAAI,EAAI,GAAK,EACzBiD,EAAMvD,EAAWa,EAAeP,EAAI,EAAI,GAAK,GAK7CgF,EAAOzC,EAASvC,EAAI,GAAK,EAAI,EACnC,QAAY5Z,IAAR6c,GAAqBqB,GAhUL,IAgUkCtB,IAAcgC,EAAM,CACxE,MAAM9B,GAAUhC,EAAc7B,IAAc2D,EAG5CjD,EAAa7W,QAAQ8W,GAAKkD,EAC1B1C,EAAiByC,GACjBxB,EAAqBwB,GAGvB1D,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAMrD,EAAa7W,QAAQ8W,EAC3BqD,GAAI,EACJ7P,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,IAAD,eAAW0K,EAAa,CAChCvB,EAAG,EACHD,EAAGlJ,EACHoJ,MAAK,oBAAEH,EAAa7W,eAAf,aAAE,EAAsBgX,aAAxB,QAAiC,QAKtC+E,GAAUjP,EAAAA,EAAAA,IAAc6J,EAAa3W,QAAS,CAClDgc,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,oCACzBC,QA/UW,EAgVXC,QAjVW,EAkVXC,cArVkB,EAsVlBtP,UAAYhD,IACV,GAAIuS,GAAqBvS,GAAI,OAC7B,GAAe,cAAXA,EAAE/D,OACJ8R,GAAe,GACoB,IAA/BjB,EAAa7W,QAAQgX,OAEvB,YADAjN,EAAE0J,iBAIN+F,EAAkBC,KAAKC,MACvB,MAAM,EAAE5C,EAAF,EAAKC,EAAL,MAAQC,GAAUH,EAAa7W,QACrC,GAAU,IAAN8W,GAAiB,IAANC,GAAqB,IAAVC,EAAa,CACrC,IAAKJ,EAAe5W,QAAS,OAE7B,GADAuZ,EAAU3C,EAAe5W,QAAQlG,cAAc,eAC1Cyf,EAAS,OAEdD,EAAqBC,EAAQjN,0BAGjCW,OAAQ,CAACsP,EAAOC,EAAR,EAGLC,KAAe,IAHY,YAC5BC,EAD4B,YAE5BC,GACgB,EAChB,GAAIvF,EAAcpX,SAAWsc,GAAqBC,GAAQ,OAE1D,GAAI9O,EAAAA,IAAgC,eAAtB+O,EAAaxW,KAAuB,CAChD,MAAM,MAAEgT,GAAWwD,EAAgCI,QAAQ,GAC3D,GAAI5D,GAAS6D,EAAAA,IAA6B7D,GAAShB,EAAc6E,EAAAA,GAC/D,OAGAxG,KACFA,KACAA,QAAkBnZ,GAEpBmc,EAASvC,EAAIqC,EAAerC,EAAI4F,EAChCrD,EAAStC,EAAIoC,EAAepC,EAAI4F,EAChCxD,EAAerC,EAAI4F,EACnBvD,EAAepC,EAAI4F,EACnB,MAAMG,EAAahV,KAAKuT,IAAIqB,GACtBK,EAAajV,KAAKuT,IAAIsB,IACtB,MACJ3F,EADI,EAEJF,EAFI,EAGJC,GACEF,EAAa7W,QASjB,GAHA2Z,IAGc,IAAV3C,GAkBJ,GAAmB,cAAfuF,EAAMvW,KAAV,CACA,GAAIkR,EAAkBlX,UAAYuW,GAAeyG,WAG3C9F,EAAkBlX,UAAYuW,GAAe0G,YAC5CnV,KAAKuT,IAAIvE,GA/BE,IA+BgBgG,EAAaC,EA9B7B,KA8BqD,CACnE7F,EAAkBlX,QAAUuW,GAAe0G,WAC3C9F,EAAYnX,SAAU,EACtB,MAAMkd,EAAQlF,EAAc7B,GACtBsF,GAAKR,EAAAA,EAAAA,IAAMyB,GAAcQ,EAAOA,GAatC,OAZA5E,EAAa,CACXxB,EAAG2E,EACH1E,EAAG,EACHC,MAAAA,SAKiB,UAAfuF,EAAMvW,MAAoB8B,KAAKuT,IAAII,GAAM0B,MAC3CnQ,EAAUuP,GACVnF,EAAcpX,SAAU,IAM9B,GAAIkX,EAAkBlX,UAAYuW,GAAeyG,UAC5ClV,KAAKuT,IAAItE,GArDI,IAqDcgG,EAAaD,EApD3B,IAoDmD,CACnE5F,EAAkBlX,QAAUuW,GAAeyG,SAC3C,MAAME,EAAQnF,EACR2D,GAAKT,EAAAA,EAAAA,IAAM0B,GAAcO,EAAOA,GACtC5E,EAAa,CACXxB,EAAG,EACHC,EAAG2E,EACH1E,MAAAA,IAEiB,UAAfuF,EAAMvW,MAAoB8B,KAAKuT,IAAIK,GAAM0B,MAC3CpQ,EAAUuP,GACVnF,EAAcpX,SAAU,SAxD5B,CACE,MAAMyb,EAAKvC,EAAcpC,EAAI4F,EACvBhB,EAAKxC,EAAcnC,EAAI4F,EAC7B,GAAI,CAAC,QAAS,aAAaniB,SAAS+hB,EAAMvW,MAAO,CAC/C,MAAOqX,EAAW3C,EAAWC,GAAaF,EAA0B,CAAE3D,EAAG2E,EAAI1E,EAAG2E,EAAI1E,MAAAA,GA9Y1E,IAiZV,OAFIyF,GAAYA,GAAY/B,GAAYC,QACxCrC,EAAa+E,GAGX,YAAad,GAAkC,IAAzBA,EAAMK,QAAQlhB,QACtC4c,EAAa,CACXxB,EAAG2E,EACH1E,EAAG2E,EACH1E,MAAAA,MA+CRsG,OAAQ,CAACvT,EAAD,KASF,IATM,KACVwT,EADU,WAEVC,EAFU,eAGVC,EAHU,eAIVC,EAJU,YAKVhB,EALU,YAMVC,EANU,eAOVgB,EAPU,eAQVC,GACI,EACAvH,IAAiBA,KACrBoH,EAAiBA,GAAkBzF,EAAc,EACjD0F,EAAiBA,GAAkB3F,EAAe,EAClD4F,EAAiBA,GAAkB3F,EAAc,EACjD4F,EAAiBA,GAAkB7F,EAAe,EAGlD,MAAMf,EAAQuG,MAAAA,EAAAA,GAAQtC,EAAAA,EAAAA,IAAM/B,EAAclC,MAAQwG,EAAaK,GAAgBC,IACzEtC,EAAcxE,EAAQkC,EAAclC,MACpC+G,EAAUjW,KAAKuT,IAAIvT,KAAK6E,IAAIuM,EAAcpC,EAAG,IAC7CkH,EAAUlW,KAAKuT,IAAIvT,KAAK6E,IAAIuM,EAAcnC,EAAG,IAGnDqC,EAAetC,EAAI6G,EACnBvE,EAAerC,EAAI6G,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgBzC,EAAcyC,EAC9CG,EAAgBF,EAAgB1C,EAAc0C,GAE7Cb,GAAa5C,EAA0B,CAC5C3D,EAAGoC,EAAcpC,EAAIqH,EAAezB,EACpC3F,EAAGmC,EAAcnC,EAAIqH,EAAezB,EACpC3F,MAAAA,IAGFsB,EAAa+E,IAEfrY,QAAQ+E,GACN+N,GAAe,GACf,MAAOuG,EAAeC,GAAgBhE,EAAmBvQ,GACzD,GAAIsU,EAAJ,CAGE,GAFAtU,EAAE0J,iBACF1J,EAAEC,kBACEgC,EAAAA,GAAc,OACbsS,GAAc1a,SAGO,IAAxBsV,EAAclC,OAAehL,EAAAA,KAC7B2M,GAAuB4F,GAAsBxU,EAAEwQ,OAAuB,iBACxE3W,KAGJmQ,cAAchK,EAAD,GAGV,IAHc,QACf6Q,EADe,QAEfC,GACC,EACD,MAAOwD,GAAiB/D,EAAmBvQ,GAC3C,GAAIsU,EAGF,OAFAtU,EAAE0J,sBACF1J,EAAEC,kBAGJ,IAAKgC,EAAAA,IAA2B,UAAXjC,EAAE/D,KAAkB,OACzC,MAAM,EAAE8Q,EAAF,EAAKC,EAAL,MAAQC,GAAUH,EAAa7W,QAIrC,GAAc,IAAVgX,EAAa,CACf,GAAU,IAANF,GAAiB,IAANC,EAAS,OACxBmC,EAAgBuB,EAA0B,CACxC3D,EALkB8D,EA9gBN,EA8gBkCA,EAM9C7D,EALkB8D,EA/gBN,EA+gBkCA,EAM9C7D,MArhBY,IAshBX,QAEHkC,EAAgB,CACdpC,EAAG,EACHC,EAAG,EACHC,MAAO,GAGXX,IAAkB4D,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACpD,EAAGC,EAAGC,GACbmD,GAAI,CAACjB,EAAcpC,EAAGoC,EAAcnC,EAAGmC,EAAclC,OACrD1M,SAAU8L,GACVgE,OAAQpE,GACRqE,SAAWzM,IACT,MAAMyP,EAAY,CAChBvG,EAAGlJ,EAAM,GACTmJ,EAAGnJ,EAAM,GACToJ,MAAOpJ,EAAM,IAEf0K,EAAa+E,OAInBrQ,UAAAA,IAGF,OADAjU,SAAS4Q,iBAAiB,UAAW6Q,GAAe,GAC7C,KACLuB,IACAhjB,SAAS6Q,oBAAoB,UAAW4Q,GAAe,MAExD,CACD5W,EACA0U,EACA9B,EACAa,EACAW,EACAD,EACAa,EACAD,EACAJ,EACAG,EACAD,EACAxD,EACA6C,EACA9O,EACA2B,KAGF5J,EAAAA,EAAAA,KAAU,KACR,IAAK4V,EAAa3W,UAAYyX,GAAkBzO,GAAY2B,EAAc,OAC1E,MAAM,MAAEqM,GAAUH,EAAa7W,QACzBiK,EAAM9D,EAAkB,GAAK,EAAI,EAGvC,IAAIqY,EAAQ,IACRC,EAAY,EACZzH,GAJY6G,IAIQ5T,EAAM,GAC1B+M,GAJY8G,IAIQ7T,EAAM,IAChB,IAAV+M,GAAe/M,EAAM,IAAGuU,EAAQ,IAChClI,IAAqBA,KACzBA,IAAsB2D,EAAAA,EAAAA,IAAc,CAClCC,KAAMjQ,EACNkQ,GAAIlQ,EAAMuU,EACVlU,SAAU8L,GACVgE,OAAQnE,GACRoE,SAAWzM,IACT,IAAK+I,EAAa3W,QAAS,OAC3B,MAAM0e,GAAQrX,EAAAA,EAAAA,IAAMuG,EAAQ6Q,EAAW,GACvCA,EAAY7Q,EAEZ,MAAM+Q,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEXnI,EAAa3W,QAAQ+e,cAAcJ,SAGtC,CAACxY,EAAiBsR,EAAgBzO,EAAU2B,SAEzBzN,IAAlBma,EAA6B,OAEjC,MAAM2H,EAAcxI,EAAWa,EAAe,GACxC4H,EAAczI,EAAWa,GAAgB,GACzC6H,OAA0BhiB,IAAhB+hB,EACVE,QAA0BjiB,IAAhB8hB,EACVjB,GAAUlH,EAAa7W,QAAQ8W,EAC/BkH,GAAUnH,EAAa7W,QAAQ+W,GAC/B,MAAEC,IAAUH,EAAa7W,QACzBoV,GAAWyC,GAAeb,GAAQ,EAExC,OACE,0BAAKrS,UAAU,oBAAoByI,IAAKuJ,GACrCuI,GAAqB,IAAVlI,KAAgBiB,GAC1B,0BAAKtT,UAAU,mBAAmB1J,MAAOmkB,IAAmBpH,EAAc+F,GAAU5H,KAClF,mBAAC,GAAD,MAEMO,EAFN,CAGEzB,eAAgBA,EAChBG,SAAUA,GACVxG,mBAAoBA,EACpB/R,QAASoiB,MAIf,0BACEta,WAAWmF,EAAAA,EAAAA,GACT,mBACA,2BACAsL,IAAY,4BAEdpQ,QAAS6T,EACTzL,IAAKwJ,EACL3b,MAAOmkB,GAAkBrB,GAASC,GAAShH,KAE3C,mBAAC,GAAD,MAEMN,EAFN,CAGE7Z,QAASwa,EACTpC,eAAgBA,EAChBD,SAAUmC,EAAYnX,QACtBmV,mBAAoBA,EACpBC,SAAUA,GACVxG,mBAAoBA,GAAgC,IAAVoI,OAG7CmI,IAAqB,IAAVnI,KAAgBiB,GAC1B,0BAAKtT,UAAU,mBAAmB1J,MAAOmkB,GAAkBpH,EAAc+F,GAAU5H,KACjF,mBAAC,GAAD,MAEMO,EAFN,CAGEzB,eAAgBA,EAChBG,SAAUA,GACVxG,mBAAoBA,EACpB/R,QAASmiB,MAIdE,GAAqB,IAAVlI,KAAgBhL,EAAAA,IAC1B,6BACEhG,KAAK,SACLrB,UAAY,mBAAkBzG,IAAYE,GAAS,WACnD,aAAYmG,EAAK,oBACjB0F,IAAK1F,EAAK8a,MAAQ,WAAQniB,IAG7BiiB,IAAqB,IAAVnI,KAAgBhL,EAAAA,IAC1B,6BACEhG,KAAK,SACLrB,UAAY,mBAAkBzG,IAAYE,GAAS,WACnD,aAAYmG,EAAK,QACjB0F,IAAK1F,EAAK8a,MAAQ,WAAQniB,QASpC,SAASkiB,KAA2C,IAAzBtI,EAAyB,uDAArB,EAAGC,EAAkB,uDAAd,EAAGC,EAAW,uDAAH,EAC/C,MAAQ,0BAAyBF,EAAEwI,QAAQ,SAASvI,EAAEuI,QAAQ,oBAAoBtI,EAAMsI,QAAQ,OAGlG,SAASf,GAAsB1jB,EAAsB0kB,GACnD,QAAK1kB,MACDA,EAAQ2kB,QAAQD,IACbthB,QAAQpD,EAAQP,QAAQilB,KAGjC,SAASjD,GAAqBvS,GAC5B,MAAMwQ,EAASxQ,EAAEwQ,OACjB,QAAIgE,GAAsBhE,EAAQ,0BAC5BgE,GACFhE,EACA,qFAIFxQ,EAAE0J,kBAFO,G,gBC5tBb,MA0DA,IAAenR,EAAAA,EAAAA,KACb,CAACC,EAAD,KAAyD,IAAhD,OAAEQ,EAAF,UAAU0c,EAAV,SAAqBC,GAA2B,EACvD,MAAM,eAAEzK,GAAmB1S,EAAOod,SAASC,MAC3C,GAAIF,GAAY3c,EACd,MAAO,CACL8c,QAAQ5c,EAAAA,EAAAA,IAASF,IAAUI,EAAAA,EAAAA,IAAWZ,EAAQQ,IAAUD,EAAAA,EAAAA,IAAWP,EAAQQ,GAC3EkS,eAAAA,GAIJ,IAAKwK,IAAc1c,EACjB,MAAO,CAAEkS,eAAAA,GAGX,MAAM9Z,GAAUyZ,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQ0c,GAElD,MAAO,CACLtkB,QAAAA,EACA0kB,OAAQ1kB,IAAW2kB,EAAAA,EAAAA,IAAavd,EAAQpH,GACxC8Z,eAAAA,KAnBN,EAxD8C,IAOxC,IAPyC,OAC7ClS,EAD6C,UAE7C0c,EAF6C,OAG7CI,EAH6C,SAI7CH,EAJ6C,QAK7CvkB,EAL6C,eAM7C8Z,GACI,EACJ,MAAM,iBACJ8K,EADI,aAEJC,EAFI,eAGJC,IACElc,EAAAA,EAAAA,MAEEmc,GAAqBjc,EAAAA,EAAAA,KAAY,KACrC8b,IAEIvY,EAAAA,GACFlG,YAAW,KACT2e,GAAe,EAAO,CAAEE,gBAAgB,IACxCH,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAAA,MAtBJ,KAyBrBO,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAAA,MAExB,CAAC1c,EAAQid,EAAcC,EAAgBR,EAAWM,IAE/Cxb,GAAOC,EAAAA,EAAAA,KAEb,IAAKqb,IAAY1kB,IAAYukB,EAC3B,OAGF,MAAMU,GAAcC,EAAAA,EAAAA,IAAe9b,EAAMsb,GAEzC,OACE,0BAAKlb,UAAU,aAAaK,QAASkb,IAClCjd,EAAAA,EAAAA,IAAS4c,EAAOtlB,IACf,mBAAC+lB,GAAA,EAAD,CAAQjY,IAAKwX,EAAOtlB,GAAI2G,KAAK,SAASqf,KAAMV,EAAmB5K,eAAgBA,EAAgBuL,WAAS,IAExG,mBAACF,GAAA,EAAD,CAAQjY,IAAKwX,EAAOtlB,GAAI2G,KAAK,SAAS2B,KAAMgd,EAAmB5K,eAAgBA,EAAgBuL,WAAS,IAE1G,0BAAK7b,UAAU,QACb,0BAAKA,UAAU,QAAQsF,IAAI,QACxBmW,IAAenb,EAAAA,EAAAA,GAAWmb,IAE7B,0BAAKzb,UAAU,OAAOsF,IAAI,QACvByV,EACGnb,EAAK,gCACLkc,EAAAA,GAAAA,IAAoBlc,EAAsB,IAAhBpJ,EAASulB,MAAa,SCfxDtK,GAAqB,IA4S3B,IAAe/T,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJQ,EADI,SAEJN,EAFI,QAGJ5F,EAHI,cAIJoJ,EAJI,OAKJpN,EALI,SAMJmQ,GACEzG,EAAOoS,aACL,eACJM,GACE1S,EAAOod,SAASC,OAEd,4BAAEe,EAAF,cAA+BC,GAAkBre,EACvD,IAmDIpH,EAWA0lB,EAOAC,EArEAC,IAAmBhe,IAAUie,EAAAA,EAAAA,IAAqBze,EAAQQ,GAE9D,GAAIlK,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmJ,IAAUlG,EACd,MAAO,CAAEoY,eAAAA,EAAgB0L,4BAAAA,GAG3B,MAAMxlB,GAAUyZ,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQlG,GAClD,OAAK1B,EAIE,CACL4H,OAAAA,EACAlG,QAAAA,EACAgY,SAAU1Z,EAAQ0Z,SAClBkM,eAAAA,EACAloB,OAAAA,EACAsC,QAAAA,EACA8Z,eAAAA,EACAjM,SAAAA,EACA2X,4BAAAA,GAZO,CAAE1L,eAAAA,EAAgB0L,4BAAAA,GAgB7B,GAAI1a,EAAe,CACjB,MAAMsa,GAAOpd,EAAAA,EAAAA,IAAWZ,EAAQ0D,GAC1BpD,GAAOC,EAAAA,EAAAA,IAAWP,EAAQ0D,GAChC,IAAIgb,GAAiB,EAMrB,OALIV,IAAMU,EAAiBhb,IAAkB2a,GAG7CG,GAAiBC,EAAAA,EAAAA,IAAqBze,EAAQ0D,GAEvC,CACLpJ,QAAAA,EACAgY,SAAU5O,EACVnJ,YAAayjB,GAAQ1d,EACrBke,eAAAA,EACAE,eAAAA,EACAhM,eAAAA,EACApc,OAAAA,EACA8nB,4BAAAA,EACA3X,SAAAA,GAIJ,KAAMjG,GAAUN,GAAY5F,GAC1B,MAAO,CAAEoY,eAAAA,EAAgB0L,4BAAAA,GAU3B,GALExlB,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFic,EAAAA,EAAAA,IAAuBvS,EAAQQ,EAAQlG,IAEvC+X,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQlG,IAGzC1B,EACH,MAAO,CAAE8Z,eAAAA,EAAgB0L,4BAAAA,GAY3B,GANEE,EADEhoB,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IAC5EqoB,EAAAA,EAAAA,IAAwB3e,EAAQQ,IAEhCoe,EAAAA,EAAAA,IAAmB5e,EAAQQ,GAIxClK,IAAWe,EAAAA,GAAAA,QAA4Bf,IAAWe,EAAAA,GAAAA,MACpDknB,GAAgBM,EAAAA,EAAAA,IAAkB7e,EAAQQ,EAAQN,KAAa4e,EAAAA,EAAAA,IAAgB9e,EAAQQ,EAAQN,QAC1F,GAAI5J,IAAWe,EAAAA,GAAAA,YAA+B,CACnD,MAAM0nB,GAAgBC,EAAAA,EAAAA,IAAyBhf,IACzC,SAAEif,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GZ,EAAgBU,EAGlB,MAAO,CACLze,OAAAA,EACAN,SAAAA,EACA5F,QAAAA,EACAgY,SAAU1Z,EAAQ0Z,SAClBkM,eAAAA,EACAloB,OAAAA,EACAsC,QAAAA,EACA0lB,aAAAA,EACAC,cAAAA,EACA7L,eAAAA,EACAjM,SAAAA,EACA2X,4BAAAA,KA1Gcre,EA1SgB,IAe9B,IAf+B,OACnCS,EADmC,SAEnCN,EAFmC,QAGnC5F,EAHmC,SAInCgY,EAJmC,eAKnCkM,EALmC,eAMnCE,EANmC,OAOnCpoB,EAPmC,YAQnCiE,EARmC,QASnC3B,EATmC,aAUnC0lB,EAVmC,cAWnCC,EAXmC,eAYnC7L,EAZmC,SAanCjM,EAbmC,4BAcnC2X,GACI,EACJ,MAAM,gBACJgB,EADI,iBAEJ5B,EAFI,gBAGJ6B,EAHI,aAIJ5B,EAJI,eAKJC,IACElc,EAAAA,EAAAA,MAEEN,EAASxF,QAAQnB,GAAeD,GAGhCglB,GAAehiB,EAAAA,EAAAA,MACfiiB,GAAetK,EAAAA,EAAAA,GAAgC3C,GAC/CkN,EAAqC,IAAnB9M,EAAuB,aAAe,OACxDI,EAAsC,IAAnBJ,IAAyB0L,GAG3CqB,GAAmBC,GAAiBC,KAAoBtb,EAAAA,EAAAA,MACxDT,GAAiBK,KAAsB4C,EAAAA,EAAAA,IAAiB,IAEzD,aACJhM,GADI,aAEJE,GAFI,QAGJY,GAHI,QAIJC,GAJI,cAKJsB,GALI,WAMJoC,GANI,MAOJzD,GAPI,kBAQJC,GARI,YASJ+D,GATI,SAUJV,GAVI,iBAWJvC,GAXI,eAYJF,IACErC,EAAc,CAChBzB,QAAAA,EAAS2B,YAAAA,EAAaD,QAAAA,EAASE,MAAOsY,GAAoBe,KAGtDlQ,KAAc9D,KAAgB2e,EAC9BnW,IAAa5B,GAAYvF,EAGzB0e,GAAgB/kB,IAAgBE,GAAeT,OAAUK,EAEzDklB,IAAW5jB,EAAAA,EAAAA,KAAQ,KACvB,OAAI2jB,GACK,CAACA,IACCrlB,GACF,UAAAA,EAAYiB,cAAZ,eAAoBqG,KAAI,CAACie,EAAGC,IAAMA,MAAM,IAExCC,EAAAA,EAAAA,IAAuB1B,GAAgB,GAAIC,GAAiB,GAAIziB,IAHjD,QAKvB,CAAC8jB,GAAerlB,EAAa+jB,EAAcC,EAAeziB,KAEvDmkB,GAAqB3lB,EAAUulB,GAASK,QAAQ5lB,IAAY,GAE9D4G,GAAYqe,GAAgBA,IAAiBjN,GAAagN,EAAa7hB,UACzE6hB,EAAa7hB,QAAUwiB,KAGzBzhB,EAAAA,EAAAA,KAAU,KACJ6J,IACFzO,MAED,CAACyO,MAEJ7J,EAAAA,EAAAA,KAAU,KACJyG,EAAAA,IACFzO,SAASmT,KAAKjT,UAAUypB,OAAO,uBAAwBjf,GAGrDuI,EAAAA,IACFjT,SAASmT,KAAKjT,UAAUypB,OAAO,eAAgBjf,KAEhD,CAACA,IAEJ,MAAM7C,IAAcC,EAAAA,EAAAA,MACpBE,EAAAA,EAAAA,KAAU,KACR,MAAM4hB,EAAMthB,OAAOuhB,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIhZ,iBACbgZ,EAAIhZ,iBAAiB,SAAU/I,IACK,mBAApB+hB,EAAIG,aACpBH,EAAIG,YAAYliB,IAGX,KACkC,mBAA5B+hB,EAAI/Y,oBACb+Y,EAAI/Y,oBAAoB,SAAUhJ,IACK,mBAAvB+hB,EAAII,gBACpBJ,EAAII,eAAeniB,OAGtB,CAACA,KAEJ,MAAMoiB,IAAcxL,EAAAA,EAAAA,GAAoCrc,GAClD8nB,IAAezL,EAAAA,EAAAA,GAAiCxO,GAChDka,IAAa1L,EAAAA,EAAAA,GAAY3e,GACzBomB,IAAczH,EAAAA,EAAAA,GAAY3a,GAC1BsmB,IAAkB3L,EAAAA,EAAAA,GAA2C1a,GAC7DsmB,IAAoB5L,EAAAA,EAAAA,GAAY/X,IAChC+V,GAAYra,GAAUsa,EAAAA,EAAAA,GAAkBta,QAAW+B,EACnDwY,GAAYzX,QAAQuX,IACpB6N,GAAuBJ,IAAgBhE,KAAgBpiB,GAE7DkE,EAAAA,EAAAA,KAAU,MACJsU,IAAoB5R,GAAYuf,KAAeK,IAA0BF,MAC3EG,EAAAA,EAAAA,IAA4BlN,GAAqBmN,EAAAA,If/KhD,SACL7N,EACA7c,EACA4G,EACAoC,EACA3D,EACA/C,GAEA,MAAQM,QAAS+nB,GAActoB,EAASrC,EAAQsC,GAChD,IAAKqoB,EACH,OAGF,MAAQvjB,MAAO+X,GAAgByL,EAAAA,EAAAA,OAE7BxjB,MAAOyjB,EAAgBpjB,OAAQqjB,IAC7BC,EAAAA,EAAAA,IAAkClO,EAAWxX,IACzC+B,MAAO4jB,EAASvjB,OAAQwjB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB9hB,EAAW5B,MAAO4B,EAAWvB,QAE1D0jB,GAAUhM,EAAc6L,GAAW,EACnCI,EA8OR,SAAsBvO,GACpB,MAAMiN,EAAMthB,OAAOuhB,WAAWC,EAAAA,IAC9B,IAAIqB,EAAe,MAKnB,OAJIxO,IAAc1J,EAAAA,KAChBkY,GAAgBvB,EAAInD,QAAU,KAAQ,OAGjC0E,EAAe1a,EAAAA,GArPR2a,CAAazO,IAAciO,EAAkBG,GAAY,EAEvE,IACEhS,IAAKsS,EAAS/X,KAAMgY,EAAUpkB,MAAOqkB,EAAWhkB,OAAQikB,GACtDf,EAAUlX,wBAEd,GAAI,CACF1S,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,GAAS,CAClB,MAAM2rB,EAiMV,SAAiBC,EAAmBC,EAAoB5S,EAAazF,EAAcpM,EAAeK,GAChG,GAAImkB,IAAcC,EAAY,CAC5B,MAAMxjB,EAAO4G,KAAK4E,IAAIzM,EAAOK,IAAWmkB,EAAYC,GACpDrY,IAASnL,EAAOjB,GAAS,EACzB6R,IAAQ5Q,EAAOZ,GAAU,EACzBL,EAAQiB,EACRZ,EAASY,OACJ,GAAIujB,EAAYC,EAAY,CACjC,MAAMC,EAAW1kB,EAEjBoM,KADApM,EAAQK,GAAUmkB,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYtkB,EAElBwR,KADAxR,EAASL,GAASykB,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACL9S,IAAAA,EAAKzF,KAAAA,EAAMpM,MAAAA,EAAOK,OAAAA,GAnNAukB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAU1S,IACpBuS,EAAWG,EAAUnY,KACrBiY,EAAYE,EAAUvkB,MACtBskB,EAAaC,EAAUlkB,OAGzB,MAAMwkB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE1BhrB,EAAQH,EAAY8G,GAAiB+jB,GAC3C5oB,EAAY9B,EAAO,CACjBgZ,IAAM,GAAEmS,MACR5X,KAAO,GAAE2X,MACT/jB,MAAQ,GAAE4jB,MACVvjB,OAAS,GAAEwjB,MACXzG,UAAY,eAAcyH,QAAqBC,iBAA8BC,MAAeC,OAE9FtpB,EAAW7C,EAAOD,GAElBE,SAASmT,KAAKjT,UAAUC,IAAI,mBAE5BgsB,uBAAsB,KACpBnsB,SAASmT,KAAKvS,YAAYb,GAE1BosB,uBAAsB,KACpBpsB,EAAMmC,MAAMoiB,UAAY,GA8R9B,SAAoBvkB,GACjBA,EAAM8C,WAA2BX,MAAMY,UAAY,UACpD/C,EAAMG,UAAUkT,OAAO,kBAAmB,UA/RtCgZ,CAAWrsB,GAEXwI,YAAW,KACT4jB,uBAAsB,KAChBnsB,SAASmT,KAAKkZ,SAAStsB,IACzBC,SAASmT,KAAKmZ,YAAYvsB,GAE5BC,SAASmT,KAAKjT,UAAUkT,OAAO,wBAvEd,IAyEGoX,EAAAA,UeyGxB+B,CAAe5P,GAAW7c,EAAS4G,GAAgBoC,GAAY3D,GAAS/C,IAGtEka,IAAqB5R,IAAWuf,IAAeG,OACjDG,EAAAA,EAAAA,IAA4BlN,GAAqBmN,EAAAA,IfxGhD,SAAwB1qB,EAA2B4G,EAAuBtE,GAC/E,MAAM,UAAElB,EAAWwB,QAAS8pB,GAAYrqB,EAASrC,EAAQsC,GACzD,IAAKoqB,EACH,OAGF,MAAM/B,EAAYzqB,SAASysB,eAAe,eAAgB1rB,cACxD,kEAEF,IAAK0pB,IAAc+B,EACjB,OAGF,MACEzT,IAAKsS,EAAS/X,KAAMgY,EAAUpkB,MAAOqkB,EAAWhkB,OAAQikB,GACtDf,EAAUlX,yBAEZwF,IAAK2T,EAAWpZ,KAAM2X,EAAQ/jB,MAAO4jB,EAASvjB,OAAQwjB,GACpDyB,EAAQjZ,wBAEZ,IAAI2X,EAAQwB,EACZ,KAAKC,EAAAA,EAAAA,GAAoBzrB,GAAY,CACnC,MAAQqG,OAAQyX,GAAiB0L,EAAAA,EAAAA,MACjCQ,EAAQwB,EAAYrB,GAAWN,EAAW/L,EAG5C,MAAM+M,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM6B,EACJ,CAAC/rB,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAAS3B,KACnEmB,EAA2BC,EAAWsrB,IAE1C,CAAC3rB,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAAS3B,KACjEmB,EAA2BC,EAAWsrB,GAGxC,CACF3rB,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,KACLmsB,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMY,EAAgB7sB,SAAS8sB,uBAAuB,SAAS,GAEzD/sB,EAAQ8sB,GAAiBjtB,EAAY8G,GAAiB8lB,EAAS1sB,GAChE+sB,GACHhrB,EAAY9B,EAAO,CACjBgZ,IAAM,GAAEmS,MACR5X,KAAO,GAAE2X,MACT/jB,MAAQ,GAAE4jB,MACVvjB,OAAS,GAAEwjB,MACXzG,UAAY,eAAcyH,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIU,EAAe,CACjB,MAAM,IACJ9T,EADI,KAEJzF,EAFI,MAGJpM,EAHI,OAIJK,GACEslB,EAActZ,wBAIlB1R,EAAY9B,EAAO,CACjBgtB,WAAY,OACZhU,IAAM,GAAEmS,MACR5X,KAAO,GAAE2X,MACT+B,gBAAiB,WACjB1I,UAAY,eAAchR,EAAO2X,QAAalS,EAAMmS,iBARvChkB,EAAQ4jB,MACRvjB,EAASwjB,KAQtB7jB,MAAQ,GAAE4jB,MACVvjB,OAAS,GAAEwjB,QAGf/qB,SAASmT,KAAKjT,UAAUC,IAAI,mBACvB0sB,GAAe7sB,SAASmT,KAAKvS,YAAYb,GAE9CosB,uBAAsB,KAChBU,IACFA,EAAc3qB,MAAM6qB,WAAa,IAGnChtB,EAAMmC,MAAMoiB,UAAY,GAEpBsI,IACF7sB,EAAMmC,MAAM+qB,QAAU,KAGxBrqB,EAAW7C,EAAOD,GAElByI,YAAW,KACT4jB,uBAAsB,KAChBnsB,SAASmT,KAAKkZ,SAAStsB,IACzBC,SAASmT,KAAKmZ,YAAYvsB,GAE5BC,SAASmT,KAAKjT,UAAUkT,OAAO,wBAzLd,IA2LGoX,EAAAA,UeJxB0C,CAAe/C,GAAaE,GAAoBJ,SAAe9lB,MAEhE,CACDmY,EAAkB5R,EAAQ4f,GAAsBxqB,EAAQqqB,GAAY/nB,EAAS6nB,GAAaG,GAC1F1jB,GAAe2jB,GAAmBvhB,GAAY3D,GAASwX,KAGzD,MAAMwQ,IAAcjiB,EAAAA,EAAAA,KAAY,IAAM8b,KAAoB,CAACA,IAErDoG,IAAoBliB,EAAAA,EAAAA,KAAY,KACpCiiB,KAEI1e,EAAAA,GACFlG,YAAW,KACT2e,GAAe,EAAO,CAAEE,gBAAgB,IACxCH,EAAa,CAAEjd,OAAAA,EAAQN,SAAAA,EAAU5F,QAAAA,MAChCuZ,IAEH4J,EAAa,CAAEjd,OAAAA,EAAQN,SAAAA,EAAU5F,QAAAA,MAElC,CAACqpB,GAAanjB,EAAQN,EAAUud,EAAcC,EAAgBpjB,IAE3DupB,IAAgBniB,EAAAA,EAAAA,KAAY,KAChC2d,EAAgB,CACdyE,WAAYtjB,EACZmB,WAAY,CAACrH,OAEd,CAAC+kB,EAAiB7e,EAAQlG,IAEvB4Z,IAAcxS,EAAAA,EAAAA,KAAa1J,IAC/BonB,EAAgB,CACd5e,OAAAA,EACAN,SAAAA,EACA5F,QAAStC,EACT0L,cAAenJ,MAAAA,OAAF,EAAEA,EAAavC,GAC5B1B,OAAAA,GACC,CACDytB,uBAAuB,MAExB,CAACxpB,MAAAA,OAAD,EAACA,EAAavC,GAAIwI,EAAQ4e,EAAiB9oB,EAAQ4J,KAEtD1B,EAAAA,EAAAA,KAAU,IAAO0C,GAAS8iB,EAAAA,EAAAA,IAAsB,KAC9CL,aACGhpB,GAAY,CAACgpB,GAAaziB,KAE/B1C,EAAAA,EAAAA,KAAU,KACJ7C,KAAYE,KACdooB,EAAAA,EAAAA,QAED,CAACpoB,GAAOF,MAGX6C,EAAAA,EAAAA,KAAU,KACR,GAAK0C,EAKL,OAFAggB,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAAChgB,IAEJ,MAAM+S,IAAavS,EAAAA,EAAAA,KAAY,CAACwiB,EAAiB3M,KAC/C,QAAe5c,IAAXupB,EAAsB,OAC1B,MAAMC,EAAQtE,GAASK,QAAQgE,GAC/B,OAAoB,IAAf3M,GAAoB4M,EAAQ,GAAqB,IAAd5M,GAAmB4M,EAAQtE,GAAS1mB,OAAS,EAC5E0mB,GAASsE,EAAQ5M,QAD1B,IAIC,CAACsI,KAEEuE,IAAqB1iB,EAAAA,EAAAA,KAAY,KACrC,GAAIme,GAAS1mB,QAAU,EAErB,YADAwqB,KAGF,IAAIQ,EAAQ7pB,EAAUulB,GAASK,QAAQ5lB,IAAY,EAEnD6pB,EAAQA,EAAQ,EAAIA,EAAQ,EAAI,EAChCjQ,GAAY2L,GAASsE,MACpB,CAACR,GAAarpB,EAASulB,GAAU3L,KAE9BlS,IAAOC,EAAAA,EAAAA,KAkBb,OACE,mBAACoiB,EAAA,EAAD,CACErsB,GAAG,cACHkJ,OAAQA,EACRuF,SAAUA,EACV6d,kBAAmBlG,GAEnB,0BAAKhc,UAAU,oBAAoBsF,IAAK1F,GAAK8a,MAAQ,WAAQniB,GAC1DsK,EAAAA,IACC,mBAAC3C,EAAA,EAAD,CACEF,UAAU,qBACV0C,OAAK,EACLnG,KAAK,UACL4D,MAAM,oBACNwC,UAAW/C,GAAK,SAChBS,QAASkhB,IAET,wBAAGvhB,UAAU,gBAGjB,mBAACmiB,EAAA,EAAD,CAAYC,UAAWlF,EAAa7hB,QAAUgnB,KAAMjF,GAnCjDjlB,EACL,mBAAC,GAAD,CACEuL,IAAKxL,EACLkG,OAAQjG,EAAYvC,GACpBmlB,UAAQ,IAGV,mBAAC,GAAD,CACErX,IAAKxL,EACLkG,OAAQA,EACR0c,UAAW5iB,KA4BX,mBAAC,EAAD,CACEqC,UAAWC,IAAoBF,GAC/Bf,QAASA,GACT/C,QAASA,EACTkK,gBAAiB4b,KAAoB7e,GACrCA,YAAaA,GACb6D,cAAenJ,MAAAA,OAAF,EAAEA,EAAavC,GAC5BmH,SAAUA,GACVwE,UAAWA,GACXI,eAAgBqgB,GAChBvgB,SAAU6b,GACV5b,mBAAoB6f,GACpB3f,UAAW6f,GACXjgB,gBAAiBA,GACjBK,mBAAoBA,KAEtB,mBAACygB,EAAA,EAAD,CACExjB,OAAQue,GACRpe,QAASse,GACTgF,QAAQ,QACRlqB,MAAOoF,GACPW,OAAQjG,MAAAA,OAAF,EAAEA,EAAavC,MAGzB,mBAAC,GAAD,CACEsC,QAASA,EACT2Z,WAAYA,GACZzT,OAAQA,EACR5E,QAASA,GACTC,MAAOA,GACPqE,SAAUA,EACVwD,cAAenJ,MAAAA,OAAF,EAAEA,EAAavC,GAC5B1B,OAAQA,EACR4K,OAAQA,EACRiS,UAAWA,GACXvP,gBAAiBA,GACjBjI,QAASA,GACT+W,eAAgBA,EAChBrR,QAASsiB,GACTzP,YAAaA,GACbzN,SAAUA,EACVkM,cAAeiR,U,2HC3UvB,MAmGA,IAAe9jB,EAAAA,EAAAA,KAnGwB,IAWjC,IAXkC,OACtCoB,EADsC,cAEtCmd,EAFsC,cAGtCuG,EAHsC,OAItCC,EAJsC,kBAKtCC,EALsC,SAMtCC,EANsC,eAOtCC,EAPsC,mBAQtCC,EARsC,QAStC5jB,EATsC,oBAUtC6jB,GACI,EACJ,MAAMljB,GAAOC,EAAAA,EAAAA,MACNkjB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBN,EAAUH,EAAelpB,QAAQmpB,IAE5ES,GAAYhoB,EAAAA,EAAAA,IAAyB,MAErCioB,GAAc7jB,EAAAA,EAAAA,KAAY,KAC9BsjB,EAAe,MACd,CAACA,KACJQ,EAAAA,GAAAA,GAAoBF,EAAWpkB,EAAQqkB,GAGvC,MAAMnR,GAAe9W,EAAAA,EAAAA,IAAuB,MACtCmoB,GAAqB/jB,EAAAA,EAAAA,KAAa8F,IACtCwd,EAAexd,EAAE+I,cAAclF,SAC9B,CAAC2Z,IACE/M,GAAgByN,EAAAA,GAAAA,GAA0BtR,EAAclT,GAASijB,IACjEgB,GAAeA,EAAYhsB,OAAS,GACtC8rB,EAAmBE,GAAuB,IAAXhB,EAAe,EAAIA,MAEnD,oBAAoB,GAEjBwB,EACJ,0BAAKvjB,UAAU,eAAesF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACtD,mBAAC2H,EAAA,EAAD,CACEwC,OAAK,EACLvC,MAAM,cACN5D,KAAK,UACLoG,UAAW/C,EAAK,SAChBS,QAASpB,GAET,wBAAGe,UAAU,gBAEf,mBAACwjB,GAAA,EAAD,CACE/a,IAAKya,EACLja,MAAOwZ,EACPvZ,SAAUma,EACVI,UAAW5N,EACX6N,YAAahB,KAKbiB,EAAiBnB,EAAe1E,QAAQiF,EAAa,IAE3D,OACE,mBAACjjB,EAAA,EAAD,CACEhB,OAAQA,EACRkB,UAAU,mBACV4jB,OAAQL,EACRtkB,QAASA,EACT6jB,oBAAqBA,GAEpBC,MAAAA,GAAAA,EAAahsB,OACZ,mBAAC8sB,GAAA,EAAD,CACEpb,IAAKuJ,EACLhS,UAAU,4BACV8jB,MAAOf,EACPgB,WAAYf,EACZgB,yBAAuB,EACvBC,UAAWzB,EAAezrB,OAASmtB,EAAAA,GACnCT,UAAW5N,GAEVkN,EAAYtjB,KAAI,CAAC7J,EAAI+nB,IACpB,mBAACwG,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,uDACV1J,MAAQ,SAAQqtB,EAAiBhG,GAAKuG,EAAAA,QAEtC7jB,QAAS,IAAMwiB,EAAmBjtB,KAEjC0I,EAAAA,EAAAA,IAAS1I,GACR,mBAACwuB,GAAA,EAAD,CAAiBC,OAAQzuB,IAAOqmB,EAAgBrc,EAAK,0BAAuBrH,EAAW+rB,OAAQ1uB,IAE/F,mBAAC2uB,GAAA,EAAD,CAAenmB,OAAQxI,QAK7BmtB,IAAgBA,EAAYhsB,OAC9B,wBAAGiJ,UAAU,cAAcJ,EAAK,+BAEhC,mBAAC4kB,GAAA,EAAD,U,gBCrFR,MAiEA,IAAe9mB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MACE6mB,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJ5I,GACEre,EAEJ,MAAO,CACL+mB,UAAAA,EACAG,cAAeF,EAAQG,OACvBC,gBAAiBJ,EAAQK,SACzBC,UAAWL,EAAiBE,OAC5BI,WAAU,UAAEvnB,EAAOwnB,mBAAT,aAAE,EAAoBC,QAChCpJ,cAAAA,KAjBcte,EAjE+B,IAc7C,IAd8C,OAClDmB,EADkD,cAElDmd,EAFkD,UAGlD0I,EAHkD,cAIlDG,EAJkD,gBAKlDE,EALkD,UAMlDE,EANkD,WAOlDC,EAPkD,OAQlDG,EAASC,EAAAA,GARyC,kBASlD7C,EATkD,SAUlDC,EAVkD,kBAWlD6C,EAXkD,QAYlDvmB,EAZkD,oBAalD6jB,GACI,EACJ,MAAMljB,GAAOC,EAAAA,EAAAA,MACN4iB,EAAQgD,IAAahhB,EAAAA,EAAAA,IAAS,IAC/BihB,GAAM7rB,EAAAA,EAAAA,KAAQ,KAClB,IAAKiF,EAAQ,OAEb,IAAI6mB,EAAcT,GAAa,GAC3BjJ,IACF0J,GAAcC,EAAAA,GAAAA,IAAO,CAAC3J,KAAkB0J,KAI1C,MAAM/nB,GAASioB,EAAAA,EAAAA,MACTC,EAAYloB,EAAOmoB,MAAMrB,KAEzBsB,EAAU,IACVlB,GAAiB,MAChBrC,GAAUuC,GAAoB,IACnCM,QAAQ1vB,IACR,MAAMsI,EAAOymB,EAAU/uB,GACjBgmB,EAAOkK,EAAUlwB,GACvB,QAAIgmB,KAAQqK,EAAAA,EAAAA,IAAcrK,KAEnB1d,IAAQgoB,EAAAA,EAAAA,IAAiBhoB,EAAMioB,EAAAA,OAGlCC,GAASC,EAAAA,EAAAA,KAAYT,EAAAA,GAAAA,IAAO,KAC7BU,EAAAA,EAAAA,IAAkB1mB,EAAMomB,EAASrB,EAAWlC,EAAQxG,MACnDkJ,GAAcG,EAAOzvB,SAAS,UAAW0wB,EAAAA,EAAAA,IAAkBpB,EAAYW,EAAWrD,GAAU,KAC9FkC,OAAWpsB,EAAWotB,GAE1B,OAAOa,EAAAA,EAAAA,IAAoB5oB,EAAQwoB,EAAQd,KAC1C,CAACJ,EAAWjJ,EAAe6I,EAAerC,EAAQuC,EAAiBplB,EAAM+kB,EAAWQ,EAAYG,EAAQxmB,IAErG2nB,GAAeC,EAAAA,GAAAA,GAAiBhB,GAAK,GAE3C,OACE,mBAAC,GAAD,CACE5mB,OAAQA,EACR0jB,cAAeiE,EACf/D,kBAAmBA,EACnBD,OAAQA,EACRG,eAAgB6C,EAChB9C,SAAUA,EACVE,mBAAoB2C,EACpBvmB,QAASA,EACT6jB,oBAAqBA,QC7B3B,IAAeplB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IAAuB,MAC/D,MAAO,CACLqe,cAAere,EAAOqe,cACtB0K,iBAAiB,UAAA/oB,EAAOgpB,gBAAgBrnB,kBAAvB,eAAmCxI,SAAU,GAAK,KAHnD4G,EArDsC,IAIpD,IAJqD,OACzDmB,EADyD,cAEzDmd,EAFyD,eAGzD0K,GACI,EACJ,MAAM,iBACJE,EADI,gBAEJC,EAFI,uBAGJC,EAHI,iBAIJC,IACE5nB,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAENonB,EAASC,EAAaC,IAAiBllB,EAAAA,EAAAA,MAC9C7F,EAAAA,EAAAA,KAAU,KACJ0C,GACFooB,MAED,CAACpoB,EAAQooB,IAEZ,MAAME,GAAwB9nB,EAAAA,EAAAA,KAAa+nB,IACrCA,IAAgBpL,GAClB8K,IACAC,EAAiB,CACfxwB,QAASoJ,EAAK+mB,EACV,iDACA,oDAGNE,EAAiB,CAAEjxB,GAAIyxB,MAExB,CAACpL,EAAe8K,EAAwBJ,EAAgB/mB,EAAMinB,EAAkBG,IAE7EzF,GAAcjiB,EAAAA,EAAAA,KAAY,KAC9BwnB,MACC,CAACA,IAEJ,GAAKhoB,GAAWmoB,EAIhB,OACE,mBAAC,GAAD,CACEnoB,OAAQA,EACR4jB,kBAAmB9iB,EAAK,aACxB4lB,kBAAmB4B,EACnBnoB,QAASsiB,EACTuB,oBAAqBqE,QCV3B,IAAezpB,EAAAA,EAAAA,KAzC4B,IAErC,IAFsC,eAC1C4pB,GACI,EACJ,MAAMxoB,EAASxF,QAAQguB,IAAmBA,EAAelpB,SACnD,kBACJmpB,EADI,uBAEJC,IACEpoB,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAENonB,EAASC,EAAaC,IAAiBllB,EAAAA,EAAAA,MAC9C7F,EAAAA,EAAAA,KAAU,KACJ0C,GACFooB,MAED,CAACpoB,EAAQooB,IAEZ,MAAME,GAAwB9nB,EAAAA,EAAAA,KAAa+nB,IACzCE,EAAkB,CAAEnpB,OAAQipB,EAAajjB,KAAMkjB,EAAgBljB,SAC9D,CAACmjB,EAAmBD,IAEjB/F,GAAcjiB,EAAAA,EAAAA,KAAY,KAC9BkoB,MACC,CAACA,IAEJ,GAAK1oB,GAAWmoB,EAIhB,OACE,mBAAC,GAAD,CACEnoB,OAAQA,EACR4jB,kBAAmB9iB,EAAK,aACxB4lB,kBAAmB4B,EACnBnoB,QAASsiB,EACTuB,oBAAqBqE,OCD3B,IAAezpB,EAAAA,EAAAA,KArCgC,IAEzC,IAF0C,yBAC9C+pB,GACI,EACJ,MAAM,sBAAEC,EAAF,cAAyBC,IAAkBvoB,EAAAA,EAAAA,MAC3CQ,GAAOC,EAAAA,EAAAA,KAEPf,EAASxF,QAAQmuB,IAChBR,EAASC,EAAaC,IAAiBllB,EAAAA,EAAAA,MAC9C7F,EAAAA,EAAAA,KAAU,KACJ0C,GACFooB,MAED,CAACpoB,EAAQooB,IAEZ,MAAM,MAAEU,EAAF,OAAStC,EAAT,WAAiBuC,GAAeJ,GAA4B,GAE5DK,GAAsBxoB,EAAAA,EAAAA,KAAa+nB,IACvCM,EAAc,CAAEC,MAAOA,EAAQxpB,OAAQipB,EAAaQ,WAAAA,IACpDH,MACC,CAACE,EAAOD,EAAeD,EAAuBG,IAEjD,GAAK/oB,GAAWmoB,EAIhB,OACE,mBAAC,GAAD,CACEnoB,OAAQA,EACR4jB,kBAAmB9iB,EAAK,UACxB0lB,OAAQA,EACRE,kBAAmBsC,EACnB7oB,QAASyoB,EACT5E,oBAAqBqE,O,gBC0I3B,SAASY,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAexqB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLuqB,QAASvqB,EAAOuqB,QAChB7X,eAAgB1S,EAAOod,SAASC,MAAM3K,kBAJxB3S,EA3KY,IAAiC,IAAhC,QAAEwqB,EAAF,eAAW7X,GAAqB,EAC/D,MAAM,cACJ8X,EADI,yBAEJC,EAFI,YAGJC,EAHI,iBAIJtB,IACE5nB,EAAAA,EAAAA,OACGmpB,EAAaC,EAAWC,IAAcxmB,EAAAA,EAAAA,KAEvCrC,GAAOC,EAAAA,EAAAA,KAmIS6oB,IAAAA,EAlDQC,EAgCTX,EAzGrB,IANA5rB,EAAAA,EAAAA,KAAU,KACJ+rB,EAAQpxB,OAAS,GACnByxB,MAED,CAACL,EAASK,IAERL,EAAQpxB,OAuIb,OACE,0BAAKnB,GAAG,WACL0D,QAAQ6uB,EAAQpxB,UAbf,SADgB2xB,EAcuBP,EAAQA,EAAQpxB,OAAS,IAvHhD6xB,CAAAA,IACpB,MAAM,KACJC,EADI,MACE5oB,EADF,MACS6oB,EADT,kBACgBC,EADhB,UACmCC,EADnC,MAC8C3wB,EAD9C,gBACqD4wB,GACvDL,EAcEM,EACFtpB,EADqBopB,EAChB,cACA,UADeD,EAAmB,KAGrCI,EAAuBvpB,EAAZopB,EAAiB,cAAsB,aAClDI,EACFxpB,EADsBopB,EACjB,sCAA8C,qCAEvD,OACE,mBAAClpB,EAAA,EAAD,CACEhB,OAAQypB,EACRtpB,QAASwpB,EACTzoB,UAAU,QACV4jB,OAAQyF,EAAmBppB,EAAO5H,GAClCyqB,oBAAqBsF,QAEE7vB,IAAtBwwB,GAAmC,wBAAG/oB,UAAU,cAAckpB,GAC9DJ,GAAS,wBAAG9oB,UAAU,gBAAeM,EAAAA,EAAAA,GAAWwoB,EAAO,CAAC,QACxDG,GACC,wBAAGjpB,UAAU,cAEPJ,EADHopB,EACQ,iDACA,iDAGb,mBAAC9oB,EAAA,EAAD,CACEE,QAAM,EACNJ,UAAU,wBAEVK,QAzCkB,KACtBgoB,EAAyB,CACvBQ,KAAAA,IAEEI,GACFjC,EAAiB,CACfxwB,QAAqBoJ,EAAZopB,EAAiB,sCAA8C,uCAG5EP,MAkCKQ,EAAkBG,EAAoBD,GAEzC,mBAACjpB,EAAA,EAAD,CAAQE,QAAM,EAACJ,UAAU,wBAAwBK,QAASooB,GAAa7oB,EAAK,aAyDvE0pB,CAAaZ,GAGlB,gBAAiBA,GAvDOC,EAwDED,EA/C5B,mBAAC5oB,EAAA,EAAD,CACEhB,OAAQypB,EACRtpB,QAASwpB,EACTzoB,UAAU,UACVC,MAAOL,EAAK,4BACZkjB,oBAAqBsF,GAEpBxoB,EAAK,mCACN,8BACE,mBAACM,EAAA,EAAD,CACEF,UAAU,wBACVI,QAAM,EAENC,QArBc,KACpBioB,EAAY,CACViB,SAASC,EAAAA,GAAAA,IAAKb,EAAgB,CAAC,YAAa,WAAY,kBAE1DF,MAmBO7oB,EAAK,OAER,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASooB,GAAa7oB,EAAK,eAM/DooB,EA2BAU,EAzBjB,mBAAC5oB,EAAA,EAAD,CACEhB,OAAQypB,EACRtpB,QAASwpB,EACT3F,oBAAqBsF,EACrBpoB,UAAU,QACVC,MAAO8nB,GAAeC,IAErBA,EAAME,aAAcuB,EAAAA,GAAAA,IAAqBzB,IACtC1nB,EAAAA,EAAAA,GAAW0nB,EAAMxxB,QAAU,CAAC,kBAAmB,QAAS,OAC5D,8BACE,mBAAC0J,EAAA,EAAD,CAAQE,QAAM,EAACC,QAASooB,GAAa7oB,EAAK,YAjHlD,SAASypB,EAAmBppB,EAAe5H,GACzC,OACE,0BAAK2H,UAAU,gBACZ3H,GAAS,mBAACsjB,GAAA,EAAD,CAAQpf,KAAK,QAAQlE,MAAOA,EAAOiY,eAAgBA,EAAgBuL,WAAS,IACtF,0BAAK7b,UAAU,gBACZM,EAAAA,EAAAA,GAAWL,IAEd,mBAACC,EAAA,EAAD,CAAQwC,OAAK,EAACvC,MAAM,cAAc5D,KAAK,UAAUoG,UAAW/C,EAAK,SAAUS,QAASooB,GAClF,wBAAGzoB,UAAU,sB,gBCxCvB,MA0BA,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB4rB,EAAAA,GAAAA,IAAK5rB,EAAQ,CAAC,mBADpBD,EA1BkB,IAAuB,IAAtB,cAAE+rB,GAAoB,EAC3D,MAAM,oBAAEC,IAAwBvqB,EAAAA,EAAAA,MAEhC,GAAKsqB,EAAc3yB,OAInB,OACE,0BAAKnB,GAAG,iBACL8zB,EAAcjqB,KAAI,QAAC,QAClBjJ,EADkB,UACTwJ,EADS,QACE4pB,EADF,OACWC,EADX,WACmBC,EADnB,MAC+B7pB,GADhC,SAGjB,mBAAC8pB,GAAA,EAAD,CACE9pB,MAAOA,GAAQK,EAAAA,EAAAA,GAAWL,EAAO,CAAC,kBAAmB,QAAS,KAAM,eAAY1H,EAChFsxB,OAAQA,EACRC,WAAYA,EACZ9pB,UAAWA,EACXxJ,SAAS8J,EAAAA,EAAAA,GAAW9J,EAAS,CAAC,kBAAmB,QAAS,KAAM,UAEhEwzB,UAAW,IAAML,EAAoB,CAAEC,QAAAA,c,4BCnBjD,MA4BA,IAAelsB,EAAAA,EAAAA,KA5BqB,IAAa,IAAZ,IAAEiM,GAAU,EAC/C,MAAM,oBAAEsgB,IAAwB7qB,EAAAA,EAAAA,MAE1BQ,GAAOC,EAAAA,EAAAA,KAEPqqB,GAAa5qB,EAAAA,EAAAA,KAAY,KAC7B5C,OAAOytB,MAAKC,EAAAA,GAAAA,GAAezgB,GAAM,SAAU,YAC3CsgB,EAAoB,CAAEtgB,SAAKpR,MAC1B,CAAC0xB,EAAqBtgB,IAEnB0gB,GAAgB/qB,EAAAA,EAAAA,KAAY,KAChC2qB,EAAoB,CAAEtgB,SAAKpR,MAC1B,CAAC0xB,IAEEK,GAAe5D,EAAAA,GAAAA,GAAiB/c,GAEtC,OACE,mBAAC4gB,GAAA,EAAD,CACEzrB,OAAQxF,QAAQqQ,GAChB1K,QAASorB,EACTpqB,MAAOL,EAAK,gBACZiR,WAAWvQ,EAAAA,EAAAA,GAAWV,EAAK,gBAAiB0qB,GAAe,CAAC,UAC5DE,aAAc5qB,EAAK,gBACnB6qB,eAAgBP,O,gBCrCtB,SAA2B,uBCgH3B,IAAexsB,EAAAA,EAAAA,KAvFoB,IAE7B,IAF8B,QAClCgtB,EADkC,YACzBC,GACL,EACJ,MAAM,kBAAEC,EAAF,iBAAqBC,EAArB,kBAAuCC,IAAsB1rB,EAAAA,EAAAA,OAC5D2rB,EAAgBC,IAAmBvmB,EAAAA,EAAAA,KAAS,IAC5CwmB,EAAsBC,IAAyBzmB,EAAAA,EAAAA,KAAS,GACzD0mB,GAAczE,EAAAA,GAAAA,GAAiBgE,GAAS,IACxC,OAAEU,EAAF,MAAUxD,EAAV,yBAAiByD,IAA6BF,MAAAA,OAAA,EAAAA,EAAaG,UAAW,GACtEC,EAAM3D,GAAQ/B,EAAAA,EAAAA,MAAYE,MAAMrB,KAAKkD,QAASrvB,EAE9CqH,GAAOC,EAAAA,EAAAA,KAEPqqB,GAAa5qB,EAAAA,EAAAA,KAAY,KACzBorB,MAAAA,GAAAA,EAAS/gB,KAAOohB,GACGL,EAAQc,OAASX,EAAmBC,GAC5C,CACXW,eAAgBR,IAGlBvuB,OAAOytB,MAAKC,EAAAA,GAAAA,GAAee,MAAAA,OAAD,EAACA,EAAaxhB,KAAM,SAAU,YAE1DihB,MACC,CACDF,EAASK,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGnGd,GAAgB/qB,EAAAA,EAAAA,KAAY,KAChCsrB,MACC,CAACA,IAEEc,GAAqBpsB,EAAAA,EAAAA,KAAa2J,IACtC+hB,EAAgB/hB,GAChBiiB,EAAsBjiB,KACrB,CAAC+hB,IAUJ,OAPA5uB,EAAAA,EAAAA,KAAU,KACJgvB,IACFJ,GAAgB,GAChBE,EAAsB5xB,QAAQ+xB,OAE/B,CAACA,EAA0BD,IAG5B,mBAACb,GAAA,EAAD,CACEzrB,OAAQxF,QAAQoxB,MAAAA,OAAD,EAACA,EAAS/gB,KACzB1K,QAASorB,EACTpqB,MAAOL,EAAK,gBACZ4qB,aAAc5qB,EAAK,gBACnB6qB,eAAgBP,IAEf5pB,EAAAA,EAAAA,GAAWV,EAAK,gBAAiBurB,MAAAA,OAAlB,EAAkBA,EAAaxhB,KAAM,CAAC,UACrDyhB,GACC,mBAACO,GAAA,EAAD,CACEC,QAASb,EACTc,MACE,uCACGvrB,EAAAA,EAAAA,GACCV,EAAK,gCAAiC,CAACwrB,GAAQU,EAAAA,EAAAA,IAAgBnB,KAC/D,CAAC,qBAIPoB,QAASL,EACT1rB,UAAW7J,KAGdk1B,GACC,mBAACM,GAAA,EAAD,CACEC,QAASX,EACTY,MACE,uCACGvrB,EAAAA,EAAAA,GACCV,EAAK,yCAAyCksB,EAAAA,EAAAA,IAAgBP,IAC9D,CAAC,qBAIPQ,QAASb,EACTxhB,UAAWqhB,EACX/qB,UAAW7J,SCzFf61B,GAAgB,aAkBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBAkUF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAI1X,KAAKqX,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,GAO3C,SAASG,GAAgB3jB,GACvB,OAAO4jB,OAAO5jB,GAAO6jB,SAAS,EAAG,KAGnC,SAASC,GAAUZ,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,IAcjC,UAAe3uB,EAAAA,EAAAA,KAhWqB,IAa9B,IAb+B,WACnCsvB,EADmC,MAEnCC,EAFmC,MAGnCC,EAHmC,aAInCC,EAJmC,WAKnCC,EALmC,OAMnCtuB,EANmC,eAOnCuuB,EAPmC,kBAQnCC,EARmC,kBASnCC,EATmC,QAUnCtuB,EAVmC,SAWnCuuB,EAXmC,oBAYnCC,GACI,EACJ,MAAM7tB,GAAOC,EAAAA,EAAAA,KACPkV,EAAM,IAAID,KAEVwX,GAAUzyB,EAAAA,EAAAA,KAAQ,IAClBszB,IAAiBF,EAAc,IAAInY,KAChC,IAAIA,KAAK3R,KAAK4E,IAAIklB,GA9CP,OA+CjB,CAACE,EAAcF,IACZV,GAAU1yB,EAAAA,EAAAA,KAAQ,IAClBuzB,IAAeF,EAAc,IAAIpY,KAC9B,IAAIA,KAAK3R,KAAK6E,IAAIklB,GAASlB,GAAeA,MAChD,CAACoB,EAAYF,IAEVQ,GAAqB7zB,EAAAA,EAAAA,KAAQ,IAAOmzB,EAAa,IAAIlY,KAAKkY,GAAc,IAAIlY,MAAS,CAACkY,IACtFW,GAAa9a,EAAAA,EAAAA,GAAY/T,IACxB8uB,EAAoBC,EAAwBC,IAA4B7rB,EAAAA,EAAAA,IAAQ,IAEhF8rB,EAAcC,IAAmBvpB,EAAAA,EAAAA,IAAeipB,IAChDO,EAAqBC,IAA0BzpB,EAAAA,EAAAA,IACpD,IAAIqQ,KAAKiZ,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoB7pB,EAAAA,EAAAA,IACxCmoB,GAAgBc,EAAmBa,cAE9BC,EAAiBC,IAAsBhqB,EAAAA,EAAAA,IAC5CmoB,GAAgBc,EAAmBgB,eAG/BlC,EAAcO,GAAUgB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaY,WAC1FC,EAAcX,EAAoBE,cAClCU,EAAeZ,EAAoBG,YAEzChyB,EAAAA,EAAAA,KAAU,MACHuxB,GAAc7uB,IACjBkvB,EAAgBN,GAChBQ,EAAuB,IAAIpZ,KAAK4Y,EAAmBS,cAAeT,EAAmBU,WAAY,IAC7Ff,IACFiB,EAAiB1B,GAAgBc,EAAmBa,aACpDE,EAAmB7B,GAAgBc,EAAmBgB,mBAGzD,CAAChB,EAAoB5uB,EAAQ6uB,EAAYN,KAE5CjxB,EAAAA,EAAAA,KAAU,KACJ+wB,IAAiBS,GAAsBG,EAAae,UAAYxC,EAAQwC,YAC1Ed,EAAgB1B,GAChBgC,EAAiB1B,GAAgBN,EAAQiC,aACzCE,EAAmB7B,GAAgBN,EAAQoC,kBAE5C,CAACvB,EAAcS,EAAoBtB,EAASyB,KAE/C3xB,EAAAA,EAAAA,KAAU,KACJgxB,IAAeQ,GAAsBG,EAAae,UAAYvC,EAAQuC,YACxEd,EAAgBzB,GAChB+B,EAAiB1B,GAAgBL,EAAQgC,aACzCE,EAAmB7B,GAAgBL,EAAQmC,kBAE5C,CAACvB,EAAcC,EAAYQ,EAAoBrB,EAASD,EAASyB,KAEpE3xB,EAAAA,EAAAA,KAAU,KACR,GAAI4wB,EAAY,CACd,MAAM+B,EAAkB,IAAIja,KAAKkY,GACjCgB,EAAgBe,GAChBT,EAAiB1B,GAAgBmC,EAAgBR,aACjDE,EAAmB7B,GAAgBmC,EAAgBL,kBAEpD,CAAC1B,IAEJ,MAAMgC,EAA0B5B,GAAcwB,GAAe7Z,EAAIoZ,eAAiBU,GAAgB9Z,EAAIqZ,YAChG7B,GAAWqC,GAAerC,EAAQ4B,eAAiBU,GAAgBtC,EAAQ6B,WAC3Ea,EAAyB9B,GAAgByB,GAAe7Z,EAAIoZ,eAAiBU,GAAgB9Z,EAAIqZ,YAEjG,cAAEc,EAAF,iBAAiBC,EAAjB,cAAmCC,IAAkBv1B,EAAAA,EAAAA,KAAQ,IA0MrE,SAA2BsyB,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BrT,EAAO,IAAIjH,KACjBiH,EAAKsT,QAAQ,GACbtT,EAAKuT,SAASlD,GACdrQ,EAAKwT,YAAYpD,GACjB,MAAMqD,EAAWzT,EAAK0T,UAAY,EAC5BC,EAAuB,IAAI5a,KAAKqX,EAAMC,EAAO,GAAGuC,UAEtD,IAAK,IAAIhR,EAAI,EAAGA,EAAI6R,EAAU7R,IAC5BuR,EAAclsB,KAAK0sB,EAAuBF,EAAW7R,EAAI,GAG3D,KAAO5B,EAAKqS,aAAehC,GAAO,CAChC,MAAMuD,EAAW5T,EAAK4S,UACtBQ,EAAiBnsB,KAAK2sB,GACtB5T,EAAKsT,QAAQM,EAAW,GAG1B,MAAMC,GAAoBT,EAAiBp4B,OAASm4B,EAAcn4B,QAAU,EAC5E,GAAI64B,EAAmB,EACrB,IAAK,IAAIjS,EAAI,EAAGA,GAAK,EAAIiS,EAAkBjS,IACzCyR,EAAcpsB,KAAK2a,GAIvB,MAAO,CAAEuR,cAAAA,EAAeC,iBAAAA,EAAkBC,cAAAA,GAtOxCS,CAAkBjB,EAAaC,IAC9B,CAACA,EAAcD,IAEZkB,GAAcj2B,EAAAA,EAAAA,KAAQ,IACnByzB,GA2PX,SAA2B1tB,EAAcmc,GACvC,MAAMsQ,GAAM0D,EAAAA,GAAAA,IAAmBhU,EAAMnc,EAAKowB,MAG1C,OAAI3D,KAFU0D,EAAAA,GAAAA,IAAmB,IAAIjb,KAAQlV,EAAKowB,MAGzCpwB,EAAK,0CAA0CqwB,EAAAA,GAAAA,IAAWrwB,EAAMmc,IAGlEnc,EAAK,sCAAuC,CAACysB,GAAK4D,EAAAA,GAAAA,IAAWrwB,EAAMmc,KAnQ5CmU,CAAkBtwB,EAAMmuB,IACnD,CAACnuB,EAAMmuB,EAAcT,IA+BlB6C,GAAe7wB,EAAAA,EAAAA,KAAY,KAC/BkuB,EAASO,KACR,CAACP,EAAUO,IAERqC,GAAoB9wB,EAAAA,EAAAA,KAAa8F,IACrC,MAAM6D,EAAQ7D,EAAEwQ,OAAO3M,MAAMonB,QAAQ,UAAW,IAChD,IAAKpnB,EAAMlS,OAGT,OAFAu3B,EAAiB,SACjBlpB,EAAEwQ,OAAO3M,MAAQ,IAInB,MAAMqnB,EAAQntB,KAAK4E,IAAI,EAAG5E,KAAK6E,IAAIuoB,OAAOtnB,GAAQ,KAE5C8S,EAAO,IAAIjH,KAAKiZ,EAAae,WACnC/S,EAAKyU,SAASF,GACdtC,EAAgBjS,GAEhB,MAAM0U,EAAW7D,GAAgB0D,GACjChC,EAAiBmC,GACjBrrB,EAAEwQ,OAAO3M,MAAQwnB,IAChB,CAAC1C,IAEE2C,GAAsBpxB,EAAAA,EAAAA,KAAa8F,IACvC,MAAM6D,EAAQ7D,EAAEwQ,OAAO3M,MAAMonB,QAAQ,UAAW,IAChD,IAAKpnB,EAAMlS,OAGT,OAFA03B,EAAmB,SACnBrpB,EAAEwQ,OAAO3M,MAAQ,IAInB,MAAM0nB,EAAUxtB,KAAK4E,IAAI,EAAG5E,KAAK6E,IAAIuoB,OAAOtnB,GAAQ,KAE9C8S,EAAO,IAAIjH,KAAKiZ,EAAae,WACnC/S,EAAK6U,WAAWD,GAChB3C,EAAgBjS,GAEhB,MAAM8U,EAAajE,GAAgB+D,GACnClC,EAAmBoC,GACnBzrB,EAAEwQ,OAAO3M,MAAQ4nB,IAChB,CAAC9C,IA4BJ,OACE,mBAACjuB,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTe,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAASpB,GAET,wBAAGe,UAAU,gBAGf,6BACGJ,EAAM,YAAWivB,EAAe,KAChC,IACAD,GAGH,mBAAC1uB,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNuJ,SAAUulB,EACV5uB,QAAU4uB,OAA2C12B,EA7H/D,WACE21B,GAAwB4C,IACtB,MAAMC,EAAW,IAAIjc,KAAKgc,GAG1B,OAFAC,EAASzB,SAASyB,EAAS3C,WAAa,GAEjC2C,OA0HD,wBAAG/wB,UAAU,mBAGf,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNuJ,SAAUslB,EACV3uB,QAAU2uB,OAA2Cz2B,EA9H/D,WACE21B,GAAwB4C,IACtB,MAAMC,EAAW,IAAIjc,KAAKgc,GAG1B,OAFAC,EAASzB,SAASyB,EAAS3C,WAAa,GAEjC2C,OA2HD,wBAAG/wB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZisB,GAAgBxsB,KAAK4sB,GACpB,0BAAKrsB,UAAU,4BACb,+BAAOJ,EAAKysB,OAGf6C,EAAczvB,KAAKkwB,GAClB,0BAAK3vB,UAAU,uBAAsB,+BAAO2vB,MAE7CR,EAAiB1vB,KAAKkwB,GACrB,0BACEqB,KAAK,SACLC,SAAU,EACV5wB,QAAS,KAAM6wB,OA1IDnV,EA0IkB4T,OAzI1C3B,GAAiB8C,IACf,MAAMC,EAAW,IAAIjc,KAAKgc,GAK1B,OAJAC,EAAS1B,QAAQtT,GACjBgV,EAASzB,SAAST,GAClBkC,EAASxB,YAAYX,GAEdmC,KAPX,IAA0BhV,GA2Id/b,WAAWmF,EAAAA,EAAAA,GACT,aACA+mB,GACE0C,EAAaC,EAAcc,EAAUrD,EAASC,GAE5C,WACGoD,EAAW,YAAc,GAChCnD,IAAgBO,GAAU6B,EAAaC,EAAcc,IAAa,aAGnEr2B,QAAQq2B,IACP,+BAAOA,MAIZP,EAAc3vB,KAAKkwB,GAClB,0BAAK3vB,UAAU,uBAAsB,+BAAO2vB,QAKjDtC,GAzGD,0BAAKrtB,UAAU,cACb,4BACEqB,KAAK,OACLrB,UAAU,eACVmxB,UAAU,UACVloB,MAAOolB,EACPnlB,SAAUknB,EACVgB,QAASvD,EACTwD,OAAQvD,IARZ,IAWE,4BACEzsB,KAAK,OACLrB,UAAU,eACVmxB,UAAU,UACVloB,MAAOulB,EACPtlB,SAAUwnB,EACVU,QAASvD,EACTwD,OAAQvD,KAyFZ,0BAAK9tB,UAAU,UACb,mBAACE,EAAA,EAAD,CAAQG,QAAS8vB,GACdL,GAEFvC,GACC,mBAACrtB,EAAA,EAAD,CAAQG,QAASotB,EAAqBrtB,QAAM,GACzCmtB,QC5Rb,IAAe7vB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CAAEovB,WAAYpvB,EAAO0zB,6BAFZ3zB,EAxB+B,IAE7C,IAF8C,OAClDmB,EADkD,WAC1CkuB,GACJ,EACJ,MAAM,qBAAEuE,EAAF,qBAAwBC,IAAyBpyB,EAAAA,EAAAA,MAEjDqyB,GAAmBnyB,EAAAA,EAAAA,KAAayc,IACpCwV,EAAqB,CAAEG,UAAW3V,EAAK4V,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpB3xB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACEf,OAAQA,EACRkuB,WAAYA,EACZI,YAAU,EACVE,kBAAmB1tB,EAAK,cACxBX,QAASuyB,EACThE,SAAUiE,Q,eCVhB,MA4MA,IAAe/zB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0mB,GAAyB,EAClC,MAAO,CACL1I,KAAM0I,GAAS9lB,EAAAA,EAAAA,IAAWZ,EAAQ0mB,QAAU/rB,EAC5Cq5B,WAAYtN,GAASuN,EAAAA,EAAAA,IAAiBj0B,EAAQ0mB,QAAU/rB,EACxDu5B,iBAAkBl0B,EAAOk0B,iBACzBC,cAAen0B,EAAOo0B,YAAYC,cANpBt0B,EA7L+B,IAQ7C,cAR8C,OAClDmB,EADkD,OAElDwlB,EAFkD,gBAGlD4N,EAHkD,KAIlDtW,EAJkD,WAKlDgW,EALkD,cAMlDG,EANkD,iBAOlDD,GACI,EACJ,MAAM,cAAEK,EAAF,cAAiBC,EAAjB,sBAAgCC,IAA0BjzB,EAAAA,EAAAA,MAE1DQ,GAAOC,EAAAA,EAAAA,KACPyyB,GAAgB5L,EAAAA,GAAAA,GAAiB9K,GACjC2W,GAA2B7L,EAAAA,GAAAA,GAAiBwL,GAE5CM,GAAWt3B,EAAAA,EAAAA,IAAyB,OAEnC+rB,EAASC,EAAaC,IAAiBllB,EAAAA,EAAAA,MACvCwwB,EAAWC,IAAgBjuB,EAAAA,EAAAA,IAAQ,UAAS6tB,MAAAA,OAAT,EAASA,EAAeG,iBAAxB,QAAqC,KACxEE,EAAUC,IAAenuB,EAAAA,EAAAA,IAAQ,UAAS6tB,MAAAA,OAAT,EAASA,EAAeK,gBAAxB,QAAoC,KACrEE,EAAOC,IAAYruB,EAAAA,EAAAA,IAAQ,UAAS6tB,MAAAA,OAAT,EAASA,EAAeS,mBAAxB,QAAuC,KAClEC,EAAwBC,IAA6BxuB,EAAAA,EAAAA,KAAkB,GACxEyuB,EAAiB55B,QAAQm5B,KAAeP,GAAmBW,KAEjEz2B,EAAAA,EAAAA,KAAU,KACI,UAAR0C,IACFooB,IACAwL,EAAY,UAACJ,MAAAA,OAAD,EAACA,EAAeG,iBAAhB,QAA6B,IACzCG,EAAW,UAACN,MAAAA,OAAD,EAACA,EAAeK,gBAAhB,QAA4B,IACvCG,EAAQ,UAACR,MAAAA,OAAD,EAACA,EAAeS,mBAAhB,QAA+B,IACvCE,GAA0B,MAE3B,CAACn0B,EAAQooB,EAAaoL,MAAAA,OAAtB,EAAsBA,EAAeG,UAAWH,MAAAA,OAAhD,EAAgDA,EAAeK,SAAUL,MAAAA,OAAzE,EAAyEA,EAAeS,eAE3F32B,EAAAA,EAAAA,KAAU,MACHiL,EAAAA,IAAgB4f,GACnBtqB,YAAW,KAAM,MAAE,UAAA61B,EAASn3B,eAAT,SAAkB83B,UAnDhB,OAqDtB,CAAClM,IAEJ,MAAMmM,GAAwB9zB,EAAAA,EAAAA,KAAa8F,IACzCstB,EAAattB,EAAEwQ,OAAO3M,SACrB,IAEGoqB,GAAoB/zB,EAAAA,EAAAA,KAAa8F,IACrC0tB,GAASQ,EAAAA,GAAAA,IAA0BvB,EAAe3sB,EAAEwQ,OAAO3M,UAC1D,CAAC8oB,IAEEwB,GAAuBj0B,EAAAA,EAAAA,KAAa8F,IACxCwtB,EAAYxtB,EAAEwQ,OAAO3M,SACpB,IAEGsY,GAAcjiB,EAAAA,EAAAA,KAAY,KAC9B+yB,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,MACR,CAACT,IAEElC,GAAe7wB,EAAAA,EAAAA,KAAY,KAC3B4yB,IAAoB5N,EACtB8N,EAAc,CACZK,UAAAA,EACAE,SAAAA,EACAI,YAAaF,IAGfV,EAAc,CACZ7N,OAAAA,EACAmO,UAAAA,EACAE,SAAAA,EACAK,uBAAAA,MAGH,CAACP,EAAWL,EAAeF,EAAiBS,EAAUE,EAAOG,EAAwBb,EAAe7N,IAEvG,GAAKxlB,GAAWmoB,EAkFhB,OACE,mBAACnnB,EAAA,EAAD,CACEE,UAAU,kBACVC,MAAOL,EAAK,cACZd,OAAQA,EACRG,QAASsiB,EACTuB,oBAAqBqE,GAEpBmL,GApFD,sCACE,0BAAKtyB,UAAU,2BAA2BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAClE,mBAACojB,GAAA,EAAD,CAAQpf,KAAK,QAAQqf,KAAM0W,EAAeluB,KAAO,GAAEquB,KAAaE,MAChE,0BAAK3yB,UAAU,iCACb,wBAAGA,UAAU,iCACVsyB,MAAAA,GAAAA,EAAeS,aACZO,EAAAA,GAAAA,IAA0BvB,EAAeO,EAAcS,aACvDnzB,EAAK,iBAEX,2BAAMI,UAAU,+BAA+BsF,IAAI,SAChDkuB,EAAAA,EAAAA,IAAc5zB,EAAM0yB,EAAgBV,EAAYE,MAIvD,mBAACtO,GAAA,EAAD,CACE/a,IAAK+pB,EACLvpB,MAAOwpB,EACP5G,MAAOjsB,EAAK,aACZqxB,SAAU,EACV/nB,SAAUkqB,IAEZ,mBAAC5P,GAAA,EAAD,CACEva,MAAO0pB,EACP9G,MAAOjsB,EAAK,YACZqxB,SAAU,EACV/nB,SAAUqqB,IAEZ,wBAAGvzB,UAAU,+BACVM,EAAAA,EAAAA,GACCV,EAAK,gCAAgC0yB,MAAAA,OAAA,EAAAA,EAAeG,YAAa,IACjE,CAAC,QAAS,qBAGd,mBAAC9G,GAAA,EAAD,CACEC,QAASoH,EACT/B,SAAU,EACVlF,QAASkH,EACTpH,MAAOjsB,EAAK,2BAEd,wBAAGI,UAAU,+BACVM,EAAAA,EAAAA,GAAWV,EAAK,wCAAyC0yB,MAAAA,OAA1C,EAA0CA,EAAeG,cA6C5EF,GArCD,0BAAKvyB,UAAU,+BAA+BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACtE,mBAACojB,GAAA,EAAD,CAAQpf,KAAK,QAAQ6H,KAAO,GAAEquB,KAAaE,MAC3C,0BAAK3yB,UAAU,yCACb,mBAACwjB,GAAA,EAAD,CACE/a,IAAK+pB,EACLvpB,MAAO4pB,EACP1B,UAAU,MACVtF,MAAOjsB,EAAK,qBACZqxB,SAAU,EACV/nB,SAAUmqB,IAEZ,mBAAC7P,GAAA,EAAD,CACEva,MAAOwpB,EACP5G,MAAOjsB,EAAK,aACZqxB,SAAU,EACV/nB,SAAUkqB,IAEZ,mBAAC5P,GAAA,EAAD,CACEva,MAAO0pB,EACP9G,MAAOjsB,EAAK,YACZqxB,SAAU,EACV/nB,SAAUqqB,MAiBhB,0BAAKvzB,UAAU,kBACb,mBAACE,EAAA,EAAD,CACEE,QAAM,EACNJ,UAAU,wBACVK,QAASkhB,GAER3hB,EAAK,WAER,mBAACM,EAAA,EAAD,CACEE,QAAM,EACNJ,UAAU,wBACV0J,UAAWwpB,EACX7yB,QAAS8vB,GAERvwB,EAAK,e,4BClGhB,MC/DM6zB,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACA5jB,KAAK,KAED6jB,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACRC,MAAO,SA2aT,IAAen2B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEk2B,GAAyB,EAClC,MAAM,MAAElM,GAAUkM,GAAU,GACtBC,EAAYnM,EAAQhqB,EAAOo2B,WAAWC,KAAKrM,QAASrvB,EACpDgzB,EAAM3D,GAAQppB,EAAAA,EAAAA,IAAWZ,EAAQgqB,QAASrvB,EAC1C2F,GAAOg2B,EAAAA,EAAAA,IAAkBt2B,GACzBu2B,GAAQC,EAAAA,EAAAA,IAAYx2B,IACpB,mBAAEy2B,EAAF,OAAsBhQ,GAAWzmB,EAAO02B,QAE9C,MAAO,CACLP,UAAAA,EACAxI,IAAAA,EACArtB,KAAAA,EACAi2B,MAAAA,EACAE,mBAAAA,EACAE,cAAelQ,KAfD1mB,EAxa2B,IAQzC,UAR0C,OAC9Cm2B,EAD8C,KAE9C51B,EAF8C,IAG9CqtB,EAH8C,UAI9CwI,EAJ8C,MAK9CI,EAL8C,mBAM9CE,EAN8C,cAO9CE,GACI,EACJ,MAAM,YACJC,EADI,gBAEJC,EAFI,eAGJC,EAHI,gBAIJC,EAJI,iBAKJC,EALI,SAMJC,EANI,YAOJC,EAPI,qBAQJC,IACE31B,EAAAA,EAAAA,OACG41B,EAAYC,IAAiBxwB,EAAAA,EAAAA,OAC7BywB,EAAqBC,IAA0B1wB,EAAAA,EAAAA,KAAS,IACxD2wB,EAAiBC,IAAsB5wB,EAAAA,EAAAA,KAAS6wB,EAAAA,GAAAA,MAA4BC,WAC5EC,EAAaC,IAAkBhxB,EAAAA,EAAAA,KAAS6wB,EAAAA,GAAAA,MAA4BC,WACpEG,EAAcC,IAAmBlxB,EAAAA,EAAAA,KAAS,IAC1CmxB,EAAkBC,EAAgBC,IAAmB7zB,EAAAA,EAAAA,IAAQ,IAC7D8zB,EAAaC,IAAkBvxB,EAAAA,EAAAA,MAChCwxB,GAAkBpjB,EAAAA,EAAAA,GAAYkjB,GAC9BG,EAAuBH,GAAeE,EAGtCE,GAAWj7B,EAAAA,EAAAA,IAA0B,MAErC0E,GAAOC,EAAAA,EAAAA,MACP,IACJ8J,EADI,WACCysB,EADD,QACaC,GACfvC,GAAU,GACRh1B,EAASxF,QAAQqQ,GACjB2sB,IAAYD,EAEZE,IAAcj3B,EAAAA,EAAAA,KAAasY,IAC/B,MAAM,UAAE4e,EAAF,UAAaC,GAAc7e,EAcjC,GAbkB,kBAAd4e,GACFhC,IAGgB,yBAAdgC,IACFzB,EAAqB,CACnB2B,KAAMD,EAAUC,OAElB5B,EAAY,CACV4B,KAAMD,EAAUC,QAIF,yBAAdF,IAAyCnC,EAAoB,CAC/D,MAAMsC,EAAUC,EAAAA,GAAkBH,EAAUI,UAC5CjC,EAAiB,CAAEjrB,IAAKgtB,IACxBnC,IAGF,GAAkB,sBAAdgC,EAAmC,CACrC,MAAMG,EAAUF,EAAU9sB,IAC1BjN,OAAOytB,KAAKwM,EAAS,SAAU,cAOjC,GAJkB,8BAAdH,GACFrB,EAAuBsB,EAAUK,YAGjB,iCAAdN,EAA8C,CAChD,MAAMO,GAAczB,EAAAA,GAAAA,MACdn1B,GAAQ62B,EAAAA,GAAAA,IAAiBP,EAAUt2B,OAASs2B,EAAUt2B,MAAQ42B,EAAYxB,SAChFF,EAAmBl1B,GAGrB,GAAkB,6BAAdq2B,EAA0C,CAC5C,MAAMO,GAAczB,EAAAA,GAAAA,MAEd2B,EAAWF,EADLN,EAAUS,WAEhB/2B,GAAQ62B,EAAAA,GAAAA,IAAiBC,GAAYA,EAAWF,EAAYxB,SAClEE,EAAet1B,GAYjB,GATkB,sBAAdq2B,IACFhC,IACAC,EAAgB,CACdlJ,IAAKA,EACL6K,WAAYA,EACZe,KAAMV,EAAUU,QAIF,8BAAdX,EAA2C,OAC7C,MAAMO,GAAczB,EAAAA,GAAAA,MACdn1B,GAAQ62B,EAAAA,GAAAA,IAAiBP,EAAUt2B,OAASs2B,EAAUt2B,MAAQ42B,EAAYK,aAC1EC,GAAYL,EAAAA,GAAAA,IAAiBP,EAAUa,YAAcb,EAAUa,WAAaP,EAAYO,WAC9FrC,EAAc,CACZhvB,UAAWwwB,EAAUK,YAAcx9B,QAAO,UAACm9B,EAAUryB,YAAX,aAAC,EAAgBmzB,OAAOxgC,QAClEsZ,SAAUomB,EAAUe,UACpBpzB,KAAMqyB,EAAUryB,MAAQ,GACxBjE,MAAAA,EACAk3B,UAAAA,EACAI,kBAAmBhB,EAAUiB,sBAQjC,GAJkB,mCAAdlB,GACFb,EAAgBc,EAAUkB,mBAGV,uBAAdnB,EAAoC,OACtC,IAAKC,EAAUjgC,QAAQ+gC,OAAOxgC,QAAU,UAAC0/B,EAAUmB,eAAX,QAAC,EAAmB7gC,QAAU0/B,EAAUmB,QAAQ7gC,OAAS,EAAG,OACpGi/B,EAAeS,MAEhB,CACDlL,EAAK6K,EAAY5B,EAAaM,EAAaF,EAAkBH,EAAiBM,EAC9EV,KAGI,YACJwD,GADI,UACSC,GADT,aACoBC,GADpB,UACkCC,IDpDnB,EACrBvvB,EACA3J,EACAm5B,EACAC,KAEA,MAAMC,GAAkBj9B,EAAAA,EAAAA,KAAgB,GAClCk9B,GAAmBl9B,EAAAA,EAAAA,MACnB4jB,GAAavL,EAAAA,GAAAA,KAEbskB,GAAcv4B,EAAAA,EAAAA,KAAaqK,IAC/B,IAAKlB,EAAIpN,QAAS,OAClB,MAAMg9B,EAAQ5vB,EAAIpN,QAClBg9B,EAAMxjC,IAAM,cACZwjC,EAAMrzB,iBAAiB,QAAQ,KAC7BqzB,EAAMxjC,IAAM8U,IACX,CAAE2uB,MAAM,MACV,CAAC7vB,IAEEqvB,GAAYx4B,EAAAA,EAAAA,KAAasY,IAA+B,MACxD,UAACnP,EAAIpN,eAAL,OAAC,EAAak9B,eAClB9vB,EAAIpN,QAAQk9B,cAAcC,YAAYC,KAAKC,UAAU9gB,GAAQ,OAC5D,CAACnP,IAEEsvB,GAAez4B,EAAAA,EAAAA,KAAaq5B,IAChC,IAAKlwB,EAAIpN,QACP,OAEF,MAAM,MAAEC,EAAF,OAASK,GAAW8M,EAAIpN,QAAQsM,wBACtCmwB,EAAU,CACRtB,UAAW,mBACXC,UAAW,CACTn7B,MAAAA,EACAK,OAAAA,EACAi9B,aAAa,EACbC,iBAAkBF,OAGrB,CAACb,EAAWrvB,IAETuvB,GAAY14B,EAAAA,EAAAA,KAAY,KAC5Bw4B,EAAU,CACRtB,UAAW,gBACXC,UAAW,CACTqC,cAAcxD,EAAAA,GAAAA,WAGjB,CAACwC,IAEEiB,GAAkBz5B,EAAAA,EAAAA,KAAahJ,IACnCwhC,EAAU,CACRtB,UAAW,mBACXC,UAAWngC,MAEZ,CAACwhC,IAEEkB,GAAgB15B,EAAAA,EAAAA,KAAasY,IACjC,IAAIugB,EAAgB98B,QAIpB,IACE,MAAM87B,EAAOsB,KAAKQ,MAAMrhB,EAAMuf,MAU9B,GARuB,6BAAnBA,EAAKX,WACPuB,EAAajZ,EAAWxL,YAGH,0BAAnB6jB,EAAKX,WACPwB,IAGqB,iBAAnBb,EAAKX,UAA8B,CACrC,MAAM0C,EAAiBC,iBAAiB/kC,SAASmT,MAAM6xB,iBAAiB,qBACxEL,EA9FiB,4VA8Fe1I,QAAQ,qBAAsB6I,IAGhE,GAAuB,sBAAnB/B,EAAKX,UAAmC,CAC1C,IAAKyB,EAAc,OACnBE,EAAgB98B,SAAU,EAE5B68B,EAAQf,GACR,MAAOx/B,OAGR,CAACsgC,EAAcC,EAASa,EAAiBf,EAAWD,EAAcjZ,IAwBrE,OAtBA1iB,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEd,EAAF,OAASK,EAAT,WAAiB2X,GAAewL,EAClCsZ,EAAiB/8B,SAAW+8B,EAAiB/8B,QAAQC,QAAUA,GAC9D88B,EAAiB/8B,QAAQM,SAAWA,IAAWy8B,EAAiB/8B,QAAQiY,aAC7E8kB,EAAiB/8B,QAAU,CAAEC,MAAAA,EAAOK,OAAAA,EAAQ2X,WAAAA,GAC5CykB,EAAazkB,MACZ,CAACykB,EAAcjZ,KAElB1iB,EAAAA,EAAAA,KAAU,KACRM,OAAOsI,iBAAiB,UAAWg0B,GAC5B,IAAMt8B,OAAOuI,oBAAoB,UAAW+zB,KAClD,CAACA,KAEJ58B,EAAAA,EAAAA,KAAU,KAAM,MACV0C,GAAM,UAAI2J,EAAIpN,eAAR,OAAI,EAAak9B,eACzBR,IACAI,EAAgB98B,SAAU,GAE1B+8B,EAAiB/8B,aAAU9C,IAE5B,CAACuG,EAAQi5B,EAActvB,IAEnB,CACLqvB,UAAAA,EAAWD,YAAAA,EAAaE,aAAAA,EAAcC,UAAAA,ICzDpCqB,CAAelD,EAAUr3B,EAAQw3B,GAAUC,IAEzC+C,IAAuBtE,MAAAA,OAAA,EAAAA,EAAY/uB,YAAa+uB,EAAW5wB,KAAKmzB,OAAOxgC,OAAS,GAEtFwiC,EAAAA,GAAAA,IAAY,KACV7E,EAAe,CACb9M,MAAO2D,EAAK31B,GACZygC,QAASA,EACTmD,OAAQt7B,EAAMtI,OAEfygC,EApJoB,UAoJS99B,GAAW,GAE3C,MAAMkhC,IAAwBn6B,EAAAA,EAAAA,KAAY,KACxCw4B,GAAU,CACRtB,UAAW,0BAEZ,CAACsB,KAEE4B,IAA4Bp6B,EAAAA,EAAAA,KAAY,KAC5Cw4B,GAAU,CACRtB,UAAW,8BAEZ,CAACsB,KAEE6B,IAAqBr6B,EAAAA,EAAAA,KAAY,KACrCu4B,GAAY/D,EAAQnqB,OACnB,CAACkuB,GAAa/D,IAEXvS,IAAcjiB,EAAAA,EAAAA,KAAY,KAC1Bo2B,EACFG,IAEArB,MAED,CAACkB,EAAcG,EAAgBrB,IAE5BoF,IAAmBt6B,EAAAA,EAAAA,KAAau6B,IACpC7D,OAAez9B,GACfu/B,GAAU,CACRtB,UAAW,eACXC,UAAW,CACTqD,UAAWD,OAGd,CAAC/B,KAEEiC,IAAwBz6B,EAAAA,EAAAA,KAAY,KACxCs6B,OACC,CAACA,MAGJx+B,EAAAA,EAAAA,IAAY,KACVuB,YAAW,KACTo7B,OA9LiB,OAgMlB,CAAC/C,MAAAA,OAAD,EAACA,EAAY/uB,UAAW8xB,MAG3B38B,EAAAA,EAAAA,IAAY,KACVuB,YAAW,KACTq7B,OArMiB,OAuMlB,CAAC7D,EAAO6D,MAGX57B,EAAAA,EAAAA,KAAU,KACR,GAAK0C,EAGL,OAFAggB,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAAChgB,KAEJ1D,EAAAA,EAAAA,IAAY,IAA8B,IAA5B4+B,GAA4B,EACpC3F,IAAuB2F,GACvBlG,MAAAA,GAAAA,EAAQ4C,OAASrC,GAAsBE,IACzCuD,GAAU,CACRtB,UAAW,iBACXC,UAAW,CACTC,KAAM5C,EAAO4C,KACbrS,OAAQkQ,KAGZQ,EAAqB,CACnB2B,UAAMn+B,OAGT,CAAC87B,EAAoBE,EAAeuD,GAAW/C,EAAsBjB,IAExE,MAAMmG,IAAoB36B,EAAAA,EAAAA,KAAY,KACpCq1B,EAAgB,CACd/M,MAAO2D,EAAK31B,GACZsV,WAAY6oB,MAEb,CAACxI,EAAKwI,EAAWY,IAEduF,IAAkB56B,EAAAA,EAAAA,KAAY,KAC9B41B,EACF4C,GAAU,CACRtB,UAAW,wBAGbjV,OAED,CAACA,GAAa2T,EAAqB4C,KAEhCqC,IAAc76B,EAAAA,EAAAA,KAAY,KAC9Bu1B,EAAS,CACPj/B,GAAI21B,EAAK31B,KAEX4+B,MACC,CAACjJ,EAAKiJ,EAAaK,KAEtBz4B,EAAAA,EAAAA,KAAU,KACH0C,IACH62B,GAAgB,GAChBG,IACAE,OAAez9B,MAEhB,CAACu9B,EAAiBh3B,IAErB,MAAMs7B,IAAkEvgC,EAAAA,EAAAA,KAAQ,IACvE,QAAC,UAAE4I,EAAW3D,OAAQu7B,GAAtB,SACL,mBAACn6B,EAAA,EAAD,CACEwC,OAAK,EACLmG,QAAShG,EAAAA,GACTtG,KAAK,UACL4D,MAAM,cACNH,UAAWq6B,EAAa,SAAW,GACnCh6B,QAASoC,EACTE,UAAU,gBAEV,wBAAG3C,UAAU,iBAGhB,IAEGs6B,IAAsBn1B,EAAAA,EAAAA,GAC1B,sBACA+vB,GAAuB,cAGnBtR,IAAS/pB,EAAAA,EAAAA,KAAQ,IAEnB,0BAAKmG,UAAU,eAAe1J,MAAQ,qBAAoBk/B,KACxD,mBAACt1B,EAAA,EAAD,CACEwC,OAAK,EACLvC,MAAM,cACN5D,KAAK,UACLoG,UAAW/C,EAAKs1B,EAAsB,OAAS,SAC/C70B,QAAS65B,IAET,0BAAKl6B,UAAWs6B,MAElB,0BAAKt6B,UAAU,eAAeurB,MAAAA,OAA9B,EAA8BA,EAAKkH,WACnC,mBAACnvB,EAAA,EAAD,CACEtD,UAAU,oBACVuD,QAAS62B,GACT52B,UAAU,SAETtF,GAAQqtB,GAAOrtB,EAAKtI,KAAO21B,EAAI31B,IAC9B,mBAAC6N,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAAS85B,IAAcv6B,EAAK,sBAEpD,mBAAC6D,EAAA,EAAD,CAAUR,KAAK,SAAS5C,QAASs5B,IAAqB/5B,EAAK,uBAC1D2rB,MAAAA,OAAA,EAAAA,EAAKgP,cACJ,mBAAC92B,EAAA,EAAD,CACER,KAAM8wB,EAAY,OAAS,UAC3B1zB,QAAS45B,GACTO,YAAalhC,QAAQy6B,IAEpBn0B,EAAKm0B,EAAY,mBAAqB,+BAG1CA,MAAAA,OAAA,EAAAA,EAAW0G,cACV,mBAACh3B,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAASq5B,IAChC95B,EAAK,gBAMf,CACDA,EAAMs6B,GAAiB3O,EAAK6O,GAAgBl8B,EAAMi8B,GAAaR,GAAoB5F,EACnFkG,GAAmBP,GAA2BxE,EAAqBM,EAAa8E,KAG5EI,IAAsB7nB,EAAAA,EAAAA,GAAYmiB,MAAAA,OAAD,EAACA,EAAY70B,OAAO,GACrDw6B,IAA0B9nB,EAAAA,EAAAA,GAAYmiB,MAAAA,OAAD,EAACA,EAAYqC,WAAW,GAC7DuD,IAAyB/nB,EAAAA,EAAAA,GAAYmiB,GAAc17B,QAAQ07B,EAAW3kB,WAAW,GACjFwqB,IAAqBhoB,EAAAA,EAAAA,GAAYmiB,MAAAA,OAAD,EAACA,EAAY5wB,MAAM,GAEnD02B,IAAyB9F,MAAAA,OAAA,EAAAA,EAAY70B,QAASu6B,GAC9CK,IAA6B/F,MAAAA,OAAA,EAAAA,EAAYqC,YAAasD,GACtDK,QAAqDziC,KAAzBy8B,MAAAA,OAAA,EAAAA,EAAY3kB,UAAyB2kB,EAAW3kB,SAAWuqB,GACvFK,IAAwBjG,MAAAA,OAAA,EAAAA,EAAY5wB,OAAQy2B,IAElDz+B,EAAAA,EAAAA,KAAU,KACR,IAAK0C,EAAQ,CACX,MAAMi4B,GAAczB,EAAAA,GAAAA,MACpBL,OAAc18B,GACd48B,GAAuB,GACvBE,EAAmB0B,EAAYxB,UAC/BE,EAAesB,EAAYxB,aAE5B,CAACz2B,IAEJ,MAAOo8B,GAA4BC,KAAiC12B,EAAAA,EAAAA,KAAS,IACtE22B,GAAkBC,KAAuB52B,EAAAA,EAAAA,KAAS,GAEnD62B,IAAsBpgC,EAAAA,EAAAA,MAiB5B,OAfAkB,EAAAA,EAAAA,KAAU,KACJk/B,GAAoBjgC,SAASc,aAAam/B,GAAoBjgC,SAC7Di+B,IAMH+B,IAAoB,GACpBC,GAAoBjgC,QAAUsB,YAAW,KACvCw+B,IAA8B,KAzWH,OAkW7BA,IAA8B,GAC9BG,GAAoBjgC,QAAUsB,YAAW,KACvC0+B,IAAoB,KApWO,QA4W9B,CAACF,GAA+B7B,KAGjC,mBAACx5B,EAAA,EAAD,CACEE,UAAU,cACVlB,OAAQA,EACRG,QAASsiB,GACTqC,OAAQA,GACR2X,gBAAc,EACdjlC,MAAQ,qBAAoB8+B,KAE3Bt2B,GACC,sCACE,6BACEkB,WAAWmF,EAAAA,EAAAA,GAAe,gBAAiB+1B,IAA8B,eACzErmC,IAAK8U,EACL1J,MAAQ,GAAEsrB,MAAAA,OAAH,EAAGA,EAAKkH,oBACf+I,QAAS/H,GACTgI,MAAM,mCACNC,iBAAe,EACfjzB,IAAK0tB,IAEP,mBAACj2B,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GACT,iBACAm0B,IAAwB,UACxB8B,IAAoB,UAEtB9kC,MAAQ,qBAAoBwkC,cAAkCC,KAC9DrxB,UAAWsxB,GACX36B,QAASo5B,IAERwB,IACAjG,MAAAA,OAAA,EAAAA,EAAYyC,oBAAqB,mBAACvmB,GAAA,EAAD,CAAS/Q,MAAM,YAItDu1B,GACC,mBAACnL,GAAA,EAAD,CACEzrB,OAAQ82B,EACR32B,QAAS62B,EACT71B,MAAOL,EAAK,+BACZwE,KAAMxE,EAAK,yBACX6qB,eAAgB+J,EAChBmH,sBAAoB,EACpBnR,aAAc5qB,EAAK,gCAGtBs2B,GACC,mBAACp2B,EAAA,EAAD,CACEhB,OAAQxF,QAAQy8B,GAChB91B,MAAOi2B,EAAqBj2B,OAjazB,IAkaHhB,QAAS86B,GACTwB,gBAAc,EACdv7B,WAAWmF,EAAAA,EAAAA,GAAe,kBAAiB,UAAC+wB,EAAqBj2B,aAAtB,OAAC,EAA4Bs3B,OAAOxgC,SAAU,kBAExFm/B,EAAqB1/B,QACtB,0BAAKwJ,UAAU,uBACZk2B,EAAqB0B,QAAQn4B,KAAK+rB,GACjC,mBAACtrB,EAAA,EAAD,CACEwD,IAAK8nB,EAAO51B,IAAM41B,EAAOpnB,MAAQonB,EAAOnqB,KACxClB,MAAuB,gBAAhBqrB,EAAOnqB,KAAyB,SAAW,UAClDjB,QAAM,EACNw7B,OAAK,EACLr/B,KAAK,UAEL8D,QAAS,IAAMu5B,GAAiBpO,EAAO51B,KAEtC41B,EAAOpnB,MAAQxE,EAAK8zB,GAAoBlI,EAAOnqB,iBC3bhE,IAAe3D,EAAAA,EAAAA,KA5BqB,IAAmB,IAAlB,IAAE6tB,EAAF,KAAOlqB,GAAW,EACrD,MAAM,sBAAEw6B,EAAF,eAAyBC,IAAmB18B,EAAAA,EAAAA,MAC5CQ,GAAOC,EAAAA,EAAAA,KAEPk8B,GAAclpB,EAAAA,EAAAA,GAAY0Y,GAAK,GAC/ByQ,GAAenpB,EAAAA,EAAAA,GAAYxR,GAAM,GACjC46B,EAAa1Q,GAAOwQ,EACpBG,EAAc76B,GAAQ26B,EAEtBG,GAAuB78B,EAAAA,EAAAA,KAAY,KACvCw8B,EAAe,CAAElU,MAAO2D,EAAK31B,OAC5B,CAACkmC,EAAgBvQ,IAEdtrB,EAAiCL,EAAT,SAAhBs8B,EAA8B,UAAkB,oBACxD93B,EAAgCxE,EAAT,SAAhBs8B,EAA8B,yBAClC,sBAD4DpQ,EAAAA,EAAAA,IAAgBmQ,IAGrF,OACE,mBAAC1R,GAAA,EAAD,CACEzrB,OAAQxF,QAAQiyB,GAChBtsB,QAAS48B,EACTpR,eAAgB0R,EAChBl8B,MAAOA,EACP4Q,WAAWvQ,EAAAA,EAAAA,GAAW8D,EAAM,CAAC,KAAM,kBAAmB,eCP5D,IAAe1G,EAAAA,EAAAA,KApB6B,IAEtC,IAFuC,IAC3C6tB,GACI,EACJ,MAAM,uBAAE6Q,EAAF,wBAA0BC,IAA4Bj9B,EAAAA,EAAAA,MAEtDQ,GAAOC,EAAAA,EAAAA,KAEPwiB,GAAOqE,EAAAA,GAAAA,GAAiB6E,MAAAA,OAAD,EAACA,EAAKkH,WAAW,GAE9C,OACE,mBAAClI,GAAA,EAAD,CACEzrB,OAAQxF,QAAQiyB,GAChBtsB,QAASm9B,EACT3R,eAAgB4R,EAChBp8B,MAAOoiB,EACPxR,UAAWjR,EAAK,6BAA8ByiB,QCKpD,IAAe3kB,EAAAA,EAAAA,KAvB0B,IAEnC,IAFoC,qBACxC4+B,GACI,EACJ,MAAM,2BAAEC,EAAF,iBAA8BC,IAAqBp9B,EAAAA,EAAAA,MACnDQ,GAAOC,EAAAA,EAAAA,KAEP48B,GAA4Bn9B,EAAAA,EAAAA,KAAY,KAC5Ci9B,IACAC,EAAiB,CAAE5mC,GAAI0mC,MACtB,CAACC,EAA4BC,EAAkBF,IAElD,OACE,mBAAC/R,GAAA,EAAD,CACEzrB,YAAiCvG,IAAzB+jC,EACRr9B,QAASs9B,EACTn4B,KAAMxE,EAAK,qBACX4qB,aAAc5qB,EAAK,UACnB6qB,eAAgBgS,EAChBd,sBAAoB,O,2BC7B1B,SAAs/B,uBCgDt/B,IAAej+B,EAAAA,EAAAA,KA9B4B,IAMrC,IANsC,UAC1Cg/B,EAD0C,WAE1CC,EAF0C,UAG1C38B,EAH0C,kBAI1C48B,EAJ0C,WAK1CC,GACI,EACJ,MAAMj9B,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKG,WAAWmF,EAAAA,EAAAA,GD5BG,uBC4ByBnF,IACzC48B,GACC,0BAAK58B,UD9ByF,wBC+B5F,wBAAGA,WAAWmF,EAAAA,EAAAA,GD/BsQ,uBC+B7Ny3B,KACvD,0BAAK58B,UDhCuY,uBCgCjWsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYmkC,GACjF,0BAAK18B,UDjCuL,uBCiC9I88B,wBAAyB,CAAEC,OAzB9D,sTA4Bf,0BAAK/8B,WAAWmF,EAAAA,EAAAA,GAAehP,GDpC++B,yBCqC5gC,0BAAK6J,UDrCwf,iECqC5dsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,eAC1Eg9B,GAAqB,0BAAK58B,UDtC+5B,6CCsCj4B08B,IAE5D,0BAAK18B,WAAWmF,EAAAA,EAAAA,GAAehP,GDxC8gC,wBCwCl/BG,MAAOumC,GAChE,0BAAK78B,UDzCmpB,iECyCtnBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,iBAC7E,0BAAKI,UD1CgzB,kEC0CjxB28B,QC1BtCK,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAev/B,EAAAA,EAAAA,KAxB2B,IAMpC,IANqC,MACzCuC,EADyC,YAEzCi9B,EAFyC,UAGzCR,EAHyC,WAIzCC,EAJyC,kBAKzCQ,GACI,EACJ,MAAMh9B,GAAQtG,EAAAA,EAAAA,KAAQ,IACbmjC,GAAYv9B,KAAI,CAACiJ,EAAOiV,KAAMyf,EAAAA,EAAAA,IAAK10B,EAAOu0B,GAAUtf,GAAIwf,MAC9D,CAACA,IAEJ,OACE,0BAAKn9B,UC/Bc,wBDgCjB,0BAAKA,UChC2C,wBDgCjBC,GAC/B,0BAAKD,UCjCgF,wBDiChDk9B,GACrC,mBAAC,GAAD,CACER,UAAWA,EACXC,WAAYA,EACZE,WAAa,mBAAkB18B,EAAM0P,KAAK,c,gGErClD,UAAgB,KAAO,uBAAuB,QAAU,uBAAuB,KAAO,uBAAuB,MAAQ,uBAAuB,MAAQ,wBC6DpJ,IAAenS,EAAAA,EAAAA,KAtCkC,IAO3C,IAP4C,QAChD2/B,EADgD,mBAEhDC,EAFgD,OAGhDC,EAHgD,eAIhDC,EAJgD,MAKhDzb,EALgD,SAMhD1R,GACI,EACJ,MAAM9V,GAAYJ,EAAAA,EAAAA,GAAU,WAAUkjC,KAChCI,GAAeC,EAAAA,GAAAA,GAAcF,EAAexiC,SAC5CyS,GAAuBkwB,EAAAA,GAAAA,GAAmBpjC,GAEhD,OACE,0BAAKyF,UAAW7J,GAAAA,MACd,0BACE6J,WAAWmF,EAAAA,EAAAA,GACThP,GAAAA,QACAmnC,GAAsBnnC,GAAAA,QACtBonC,GAAUpnC,GAAAA,MAEZP,GAAK,iCAAgCmsB,KAErC,0BAAKltB,IAAK+oC,GAAaxsB,IAAI,GAAGpR,UAAW7J,GAAAA,QACzC,6BAAQsS,IAAKg1B,EAAcz9B,UAAW7J,GAAAA,QACtC,mBAAC0nC,GAAA,EAAD,CACEC,QAASztB,EACTrQ,WAAWmF,EAAAA,EAAAA,GAAehP,GAAAA,MAAcsX,GACxC5Y,IAAK0F,EACLiS,yBAAuB,EACvB+C,aAAW,EACXb,OAAK,EACLc,MAAI,S,2BCtDd,MC+BMuuB,GASD,IAGC,YAHA,KACJxhC,EADI,UACEyhC,EADF,YACaC,EADb,QAC0BH,EAD1B,SAEJI,EAFI,MAEMnc,EAFN,UAEaoc,EAFb,YAEwBnwB,GACxB,EACJ,MAAMzT,GAAYJ,EAAAA,EAAAA,GAAU,WAAD,UAAW+jC,EAASE,yBAApB,aAAW,EAA4BxoC,MAC5DyoC,GAAkBlkC,EAAAA,EAAAA,GAAU,WAAD,UAAW+jC,EAASI,uBAApB,aAAW,EAA0B1oC,OAC/D2oC,EAAYC,EAASC,IAAax8B,EAAAA,EAAAA,GAAQg8B,IAC1CS,EAAeC,EAAiBC,IAAqB38B,EAAAA,EAAAA,IAAQ,GAE9D48B,GAActiC,EAxBQ,GAwBDA,GAAgC,EAGrDuiC,EADI/c,EAAQoc,GACW,EAAVh7B,KAAK47B,IAClBC,EAAaF,EAAS37B,KAAK47B,GAAK,EAAK57B,KAAK87B,IAAIH,GAC9CI,EAAe,GAAO,IAAO/7B,KAAKg8B,IAAIH,GAAc,GAAM,EAC1D3sB,EAAQ6sB,EAAe,IAAO,EAAIA,EAElC/sB,EAAIhP,KAAK87B,IAAID,GAAcH,EAC3BzsB,EAAIjP,KAAKg8B,IAAIH,GAAcH,EAAa,GAExCO,GAAmB9/B,EAAAA,EAAAA,KAAY,KACnC0O,EAAYgwB,KACX,CAAChwB,EAAagwB,IASjB,OAPA5hC,EAAAA,EAAAA,KAAU,KACJ6hC,IACFO,IACAI,OAED,CAACX,EAAaO,EAASI,IAGxB,sCACGX,IAAgBS,GACf,mBAACW,GAAA,EAAD,CACEr/B,UD3EkJ,4CC4ElJs/B,OAAQjB,EACRkB,KAAMzB,EACN0B,eAAa,EACbC,QAAM,EACNljC,KAtDqB,GAsDUA,EAC/BjG,MAAQ,QAAO6b,aAAaC,iBAAiBC,KAC7C3C,QAASivB,IAGb,mBAACU,GAAA,EAAD,CACEr/B,UDtFgD,uBCuFhDs/B,OAAQ/kC,EACR8F,QAAS++B,EACTG,KAAMhB,GAAcT,EACpB2B,QAAM,EACNljC,KAlEsB,GAkEQA,EAC9BjG,MAAQ,QAAO6b,aAAaC,iBAAiBC,KAC7C3C,QAAS+uB,MA4DjB,IAAe/gC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL8hC,mBAAoB9hC,EAAO8hC,sBAHb/hC,EAvD8C,IAE5D,UAF6D,mBACjE+hC,EADiE,SAC7CrvB,GAChB,EAEJ,MAAM2B,GAAe9W,EAAAA,EAAAA,IAAuB,OACrCykC,EAAkBC,EAAeC,IAAmB59B,EAAAA,EAAAA,KACrD69B,GAAqB5kC,EAAAA,EAAAA,OACpBma,EAAQ0qB,IAAat7B,EAAAA,EAAAA,IAAS,IAC9BlI,EAAMyjC,IAAWv7B,EAAAA,EAAAA,IAAS,GAE3Bw7B,GAAoBP,MAAAA,GAAA,UAAAA,EAAoBpa,QAAQ4a,GAAMA,EAAEC,mBAApC,eAAgDC,MAAM,EA/E/D,MA+EiF,IAElG7G,EAAAA,GAAAA,IAAY,KACVwG,GAAW1kC,IAAYglC,EAAAA,GAAAA,GAAcJ,EAAkBlpC,OAAQsE,EAAU,OACxEskC,IAAqBtvB,OAAW9X,EArFb,KAuFtB,MAAM6mC,GAAmB9/B,EAAAA,EAAAA,KAAaqe,IACpCoiB,EAAUpiB,GACViiB,IACIE,EAAmBzkC,SAASc,aAAa2jC,EAAmBzkC,SAChEykC,EAAmBzkC,QAAUsB,YAAW,KACtCkjC,MA3Fc,OA6Ff,CAACD,EAAeC,IASnB,OAPAzjC,EAAAA,EAAAA,KAAU,KACR,MAAM9G,EAAY0c,EAAa3W,QAC1B/F,GAEL0qC,EAAQ1qC,EAAUK,QAAQ,iBAAkB2qC,eAC3C,IAGD,0BACEtgC,UDpIiB,uBCqIjByI,IAAKuJ,GAEJiuB,EAAkBxgC,KAAI,CAACygC,EAAGviB,IAEvB,mBAACogB,GAAD,CACExhC,KAAMA,EACN2hC,SAAUgC,EACVlC,UAAWrgB,EACXoE,OAAQpE,EAAItI,EAAS4qB,EAAkBlpC,OAAS,GAAKkpC,EAAkBlpC,OACvEonC,UAAW8B,EAAkBlpC,OAC7BiX,YAAaoxB,EACbnB,YAAa5oB,IAAWsI,EACxBmgB,QAASztB,WCjJrB,GAAsD,uBAAtD,GAAgK,uBCwFhK,IAAe3S,EAAAA,EAAAA,KA1EkB,IAI3B,IAJ4B,OAChC3G,EADgC,OAEhCguB,EAFgC,cAGhCwb,GACI,EACJ,MAAMC,EAAYr9B,KAAK4E,IAAI,EAAG5E,KAAK6E,IAAIjR,EAAS,EAAGguB,EAAS,IACtD0b,EAAiBD,IAAczpC,EAAS,EAAI,EAC5C2pC,EAAcF,IAAczpC,EAAS,EACrC4pC,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiB19B,KAAK6E,IAAIjR,EAAQ,GAElC+pC,GAAkBxhC,EAAAA,EAAAA,KAAY,KAClCihC,EAAcxb,EAAS,KACtB,CAACA,EAAQwb,IAENQ,GAAezhC,EAAAA,EAAAA,KAAY,KAC/BihC,EAAcxb,EAAS,KACtB,CAACA,EAAQwb,IAENS,EAAQ79B,KAAK6E,IAAI,EAAGjR,GAE1B,OACE,+BACIsQ,EAAAA,IACA,mBAACnH,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GAAehP,GAAyB,IAAX4uB,GAAgB5uB,IACxDgK,MAAM,cACNuJ,SAAqB,IAAXqb,EACVriB,OAAK,EACLrC,QAAS0gC,GAET,wBAAG/gC,UAAU,mBAGjB,0BAAKA,UDjDY,uBCiDY1J,MAAQ,iBAAgBkqC,gBAAwBzpC,eAAoBiqC,MAC9FC,MAAMlqC,GAAQmqC,UAAK3oC,GAAWkH,KAAI,CAAC0hC,EAAGxjB,KACrC,MAAMoE,EAAQpE,EACRyjB,EAAUzjB,IAAM6iB,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEY,EAAa1jB,IAAM6iB,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzE/iB,IAAM6iB,EAAYK,EAAiB,GAAKJ,EACxCa,EAAW3jB,IAAM6iB,IAAeG,IAAiBC,EACjDW,EAAe5jB,IAAM6iB,EAAY,IAAOG,IAAiBC,GACzDjjB,IAAM6iB,GAAaI,EACnBY,EAAc7jB,EAAI6iB,GAAa7iB,GAAK6iB,EAAYK,EACtD,OACE,0BACExgC,QAAS,IAAMkgC,EAAc5iB,GAC7B3d,WAAWmF,EAAAA,EAAAA,GD9DoK,uBCgE7K4c,IAAUgD,GDhEqS,wBCiE9Ssc,GAAaE,IDjE+L,wBCkE5MH,GAAUE,IDlEiO,uBCmE5OE,GDnE+Q,+BCyEvRn6B,EAAAA,IACA,mBAACnH,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GAAehP,GAAc4uB,IAAWhuB,EAAS,GAAKZ,GD3EU,wBC4E3EgK,MAAM,cACNuC,OAAK,EACLgH,SAAUqb,IAAWhuB,EAAS,EAC9BsJ,QAASygC,GAET,wBAAG9gC,UAAU,mBCpDjByhC,GASD,IAGC,IAHA,KACJllC,EADI,UACEyhC,EADF,QACaF,EADb,QAEJ4D,EAFI,MAEK3f,EAFL,UAEYoc,EAFZ,QAEuB99B,EAFvB,QAEgCqP,GAChC,EACJ,MAAMnV,GAAYJ,EAAAA,EAAAA,GAAU,UAASunC,EAAQ9rC,MACvCyoC,GAAkBlkC,EAAAA,EAAAA,GAAU,UAASunC,EAAQ9rC,aAE7CqoC,EAAwB,IAAVlc,GACbwc,EAAYC,EAASC,IAAax8B,EAAAA,EAAAA,GAAQg8B,GAE3CY,EAAatiC,EAxBS,GAwBFA,EACpBjB,EAAqB,EAAbujC,EACRljC,EAAsB,IAAbkjC,EAITC,EAFI/c,EAAQoc,GAEW,EAAVh7B,KAAK47B,IAClB1sB,EAAQ4rB,EAAc,EAAI,IAE1B9rB,EAAIhP,KAAK87B,IAAIH,GAASxjC,EAAqB,IAAbujC,EAC9BzsB,EAAIjP,KAAKg8B,IAAIL,GAASnjC,EAEtBqS,GAAc1O,EAAAA,EAAAA,KAAY,KAC9Be,EAAQ29B,KACP,CAAC39B,EAAS29B,IAEP5vB,GAAc9O,EAAAA,EAAAA,KAAY,KAC9Bm/B,IACA/uB,MACC,CAAC+uB,EAAW/uB,IAQf,OANAtT,EAAAA,EAAAA,KAAU,KACJ6hC,GACFO,MAED,CAACP,EAAaO,IAGf,sCACGP,GACC,mBAACoB,GAAA,EAAD,CACEr/B,UC/EkJ,4CDgFlJs/B,OAAQjB,EACRkB,KAAMzB,EACN0B,eAAa,EACbC,QAAM,EACNljC,KA3DqB,GA2DUA,EAC/BjG,MAAQ,aAAY6b,oBAAoBC,SAG5C,mBAACitB,GAAA,EAAD,CACEr/B,UCzFgD,uBD0FhDs/B,OAAQ/kC,EACRglC,KAAMzB,GAAWS,EACjBkB,QAAM,EACNljC,KArEsB,GAqEQA,EAC9BjG,MAAQ,QAAO6b,aAAaC,mBAAmBC,IAC/ChS,QAAS2N,EACT0B,QAAStB,MAuDjB,IAAe1Q,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL+jC,SAAU/jC,EAAO+jC,SAASC,QAAQD,YAHpBhkC,EAlD6C,IAE3D,IAF4D,SAChEgkC,EADgE,SACtDtxB,GACN,EAEJ,MAAM2B,GAAe9W,EAAAA,EAAAA,IAAuB,OACrCma,EAAQ0qB,IAAat7B,EAAAA,EAAAA,IAAS,IAC9BlI,EAAMyjC,IAAWv7B,EAAAA,EAAAA,IAAS,GAE3Bo9B,EAAmBF,MAAAA,OAAH,EAAGA,EAAUvB,MAAM,EAnFxB,IAqFXpyB,GAAc1O,EAAAA,EAAAA,KAAaqe,IAC/BoiB,GAAWpiB,KACV,IAEGvP,GAAc9O,EAAAA,EAAAA,KAAY,KAC9B3C,YAAW,KACTojC,GAAW1kC,IAAYglC,EAAAA,GAAAA,GAAcwB,EAAiB9qC,OAAQsE,EAAU,OA1F1D,OA4Ff,CAACwmC,EAAiB9qC,SASrB,OAPAqF,EAAAA,EAAAA,KAAU,KACR,MAAM9G,EAAY0c,EAAa3W,QAC1B/F,GAEL0qC,EAAQ1qC,EAAUK,QAAQ,iBAAkB2qC,eAC3C,IAGD,0BACEtgC,UClIiB,uBDmIjByI,IAAKuJ,GAEJ6vB,MAAAA,OAJH,EAIGA,EAAkBpiC,KAAI,CAACygC,EAAGviB,IAEvB,mBAAC8jB,GAAD,CACEllC,KAAMA,EACNmlC,QAASxB,EACTlC,UAAWrgB,EACXoE,OAAQpE,EAAItI,EAASwsB,EAAiB9qC,QAAU8qC,EAAiB9qC,OACjEonC,UAAW0D,EAAiB9qC,OAC5BsJ,QAAS2N,EACT0B,QAAStB,EACT0vB,QAASztB,WE/IrB,GAAmW,uBAAnW,GAAkY,uBAAlY,GAAmqB,uBAAnqB,GAAwsB,uBCwB3rByxB,GAAiD,CAC5DC,cAAe,uBACfC,iBAAkB,0BAClBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,kCAGRC,GAAuD,CAClEX,cAAe,kCACfC,iBAAkB,qCAClBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,6CAGRE,GAA2B,CACtC,gBACA,cACA,kBACA,gBACA,SACA,mBACA,mBACA,iBACA,2BACA,gBACA,qBAGIC,GAAkC,CACtC,kBACA,gBACA,2BACA,gBACA,qBAKIC,GAA4C,CAChD,WACA,qBACA,iBACA,YACA,gBACA,cACA,gBACA,gBACA,sBAGIC,GAA2D,CAC/DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,2BAGhBC,GAAiE,CACrET,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,8BA0NtB,IAAe7lC,EAAAA,EAAAA,KA5M2B,IAOpC,IAPqC,MACzC+lC,EADyC,eAEzCC,EAFyC,OAGzCjwB,EAHyC,iBAIzCkwB,EAJyC,UAKzCxD,EALyC,OAMzCyD,GACI,EACJ,MAAMhkC,GAAOC,EAAAA,EAAAA,KAEPgkC,GAAqB3oC,EAAAA,EAAAA,IAAuB,OAC3C4oC,EAAmBC,IAAwBt/B,EAAAA,EAAAA,IAASk+B,GAAyB7kB,QAAQ4lB,KACrFM,EAA4BC,IAAiCx/B,EAAAA,EAAAA,IAAS,IACtEy/B,EAAaC,EAAgBC,IAAiBniC,EAAAA,EAAAA,MAE9CoiC,EAAiBC,IAAsB7/B,EAAAA,EAAAA,KAAS,IAChD8/B,EAAoBC,IAAyB//B,EAAAA,EAAAA,KAAS,GAEvDggC,GAAqB5xB,EAAAA,EAAAA,GAAY6wB,GA6BvC,SAASgB,EAAmBt/B,GAC1B,MAAM,UAAErP,EAAF,aAAa6O,EAAb,aAA2B+/B,GAAiBv/B,EAAE+I,cACpDm2B,EAAmBvuC,GA5DE,IA6DrByuC,EAAsBzuC,GAAa4uC,EAAe//B,EA7D7B,KAgEvBxI,EAAAA,EAAAA,KAAU,KACR,MAAMwoC,EAAkBf,EAAmBxoC,QAC3C,IAAKupC,GAAoBH,IAAuBf,EAAiB,OAEjE,MAAM3hB,EAAQ4gB,GAAyB7kB,QAAQ4lB,GAC/CK,EAAqBhiB,GACrBoiB,KACAU,EAAAA,GAAAA,GAA2BD,EAAiBA,EAAgBtE,YAAcve,EAAO,GAC9E+iB,KAAKV,KACP,CAACN,EAAmBJ,EAAgBe,EAAoBN,EAAgBC,IAE3E,MAAMW,GAAoBzlC,EAAAA,EAAAA,KAAY0lC,MAAAA,IACpC,MAAMJ,EAAkBf,EAAmBxoC,QACtCupC,IAELb,EAAqBhiB,GAErBoiB,UACMU,EAAAA,GAAAA,GAA2BD,EAAiBA,EAAgBtE,YAAcve,EAAO,KACvFqiB,OACC,CAACD,EAAgBC,IAGdhY,EAAQqX,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAEpD,OACE,0BAAKplC,UD1Mc,wBC2MjB,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACLyD,WAAWmF,EAAAA,EAAAA,GD9M4L,uBC8MpI,IAAtB2+B,GD9M8O,wBC+M3R3jC,MAA6B,IAAtB2jC,EAA0B,cAAgB,oBACjDzjC,QAASoT,EACT9Q,UAAW/C,EAAK,SAEhB,wBAAGI,UAAU,qBAGf,0BAAKA,UDtNynB,yBCwN9nB,0BAAKA,WAAWmF,EAAAA,EAAAA,GDxN8S,uBCwN/Q,gBAAiBkgC,SArEpE,SAAsBjgC,GACpB,MAAM,YAAEk7B,EAAagF,WAAYC,GAAuBngC,EAAE+I,cAEpDm3B,EAAaniC,KAAKT,MAAM6iC,GAGxB3hC,EADO0hC,EAAchF,EACFA,EACzBl7B,EAAE+I,cAAc7X,MAAMkvC,YAAY,oBAAqB5hC,EAAS6hC,YAChErgC,EAAE+I,cAAc7X,MAAMkvC,YAAY,wBAAyBriC,KAAKuT,IAAI9S,GAAU6hC,YAC9E,MAAMC,EAAeviC,KAAKwiC,MAAML,EAAa,GAAKhF,GAElD2D,EAA8ByB,GAE9B,MAAME,EAAcxgC,EAAE+I,cAAchZ,cAAe,mCAAiCuwC,EAAe,IAC7FG,EAAiBzgC,EAAE+I,cAAchZ,cAAe,kCAAiCuwC,KAIvF,GAHAE,MAAAA,GAAAA,EAAatxC,UAAUypB,OAAO,WAAW,GACzC8nB,MAAAA,GAAAA,EAAgBvxC,UAAUypB,OAAO,WAAW,GAExCmmB,EAAa,OACjB,MAAM4B,EAAQ3iC,KAAKT,MAAM4iC,EAAahF,GACtCyD,EAAqB+B,IAiDqEr9B,IAAKo7B,GAE1FlB,GAAyBljC,KAAI,CAACsmC,EAAShkB,KACtC,GAAgB,kBAAZgkB,EACF,OACE,0BAAK/lC,WAAWmF,EAAAA,EAAAA,GAAehP,GD7NqX,yBC8NlZ,yBAAI6J,WAAWmF,EAAAA,EAAAA,GD9Nkf,uBC8Npdk/B,GD9NsiB,yBC+NhlBzkC,EAAKkiC,GAAuBC,gBAE/B,0BAAK/hC,WAAWmF,EAAAA,EAAAA,GDjOid,uBCiO5a,iBAAkBkgC,SAAUX,GAC9E7B,GAAapjC,KAAI,CAAC8Y,EAAOoF,KACxB,MAAMqoB,EAAepC,MAAAA,OAAH,EAAGA,EAASrrB,GAAO,GAAGktB,WAClCQ,EAAerC,MAAAA,OAAH,EAAGA,EAASrrB,GAAO,GAAGktB,WACxC,OACE,mBAAC,GAAD,CACExlC,MAAOL,EAAKkjC,GAAcvqB,IAC1B2kB,YAAat9B,EAAK4jC,GAAoBjrB,GAAQ0tB,GAC9CvJ,UAAWsJ,EACXrJ,WAAYsJ,EACZ9I,kBAAmBxf,GAAKklB,GAAa9rC,OAAS,UAQ5D,GAAgB,qBAAZgvC,EACF,OACE,0BAAK/lC,UAAW7J,IACd,0BAAK6J,UAAW7J,IACd,mBAAC,GAAD,CAAgCka,SAAUyzB,IAAsB/hB,KAElE,yBAAI/hB,UAAW7J,IACZyJ,EAAKkiC,GAAuBE,mBAE/B,0BAAKhiC,UAAW7J,KACbmK,EAAAA,EAAAA,GAAWV,EAAK8iC,GAA6BV,kBAAmB,CAAC,SAM1E,GAAgB,qBAAZ+D,EACF,OACE,0BAAK/lC,UAAW7J,IACd,0BAAK6J,UAAW7J,IACd,mBAAC,GAAD,CAA+Bka,SAAUyzB,IAAsB/hB,KAEjE,yBAAI/hB,UAAW7J,IACZyJ,EAAKkiC,GAAuBG,mBAE/B,0BAAKjiC,UAAW7J,KACbmK,EAAAA,EAAAA,GAAWV,EAAK8iC,GAA6BT,kBAAmB,CAAC,SAM1E,MAAMtkB,EAAI8lB,EAAMyC,cAAcpoB,QAAQioB,GACtC,OAAW,IAAPpoB,EAEF,0BAAK3d,UAAW7J,IACd,0BAAK6J,UAAW7J,IACd,mBAAC,GAAD,CACEka,SAAUyzB,IAAsB/hB,EAChCsb,QAASoG,EAAM0C,OAAOxoB,GAAG/nB,GACzB4nC,eAAgBiG,EAAM0C,OAAOxoB,GAAGyoB,UAChC7I,OAAQqF,GAAsB/sC,SAASkwC,GACvChkB,MAAOA,EACPub,mBAAoBvb,IAAUiiB,KAGlC,yBAAIhkC,UAAW7J,IACZyJ,EAAKkiC,GAAuB2B,EAAMyC,cAAcvoB,MAEnD,0BAAK3d,UAAW7J,KACbmK,EAAAA,EAAAA,GAAWV,EAAK8iC,GAA6Be,EAAMyC,cAAcvoB,KAAO,CAAC,cAjBhF,MAyBJ,0BACE3d,WAAWmF,EAAAA,EAAAA,GD9SqtB,wBCgT7tBo/B,GAA4C,IAAtBT,IDhTyxB,yBCmTlzB,mBAAC,GAAD,CACE/sC,OAAQ4rC,GAAyB5rC,OACjCguB,OAAQ+e,EACRvD,cAAewE,IAEjB,mBAAC7kC,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GDzTkC,wBC0T7CkhC,SAAUlG,EACVmG,qBAAsBnG,EACtB9/B,QAAS8/B,EAAY1sB,EA7K7B,WACEkwB,EAAiBD,KA8KVvD,EACGvgC,EAAK,MACLA,EAAK,sBAAsB2mC,EAAAA,GAAAA,GAAehW,OAAOnE,EAAMoa,QAASpa,EAAMqa,SAAU7mC,EAAKowB,a,2BChUnG,UAAgB,KAAO,uBAAuB,KAAO,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,KAAO,wBCgBlJ0W,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAqBzD,IAAehpC,EAAAA,EAAAA,KAlB0B,IAMnC,IANoC,KACxCuF,EADwC,MAExChD,EAFwC,KAGxCmE,EAHwC,MAIxC2d,EAJwC,QAKxC1hB,GACI,EACJ,OACE,mBAAC8jB,GAAA,EAAD,CAAUwiB,gBAAiBxwC,GAAAA,KAAakK,QAASA,GAC/C,0BAAKxL,IAAKoO,EAAMjD,UAAW7J,GAAAA,KAAaib,IAAI,GAAG9a,MAAQ,iBAAgBowC,GAAO3kB,OAC9E,0BAAK/hB,UAAW7J,GAAAA,MACd,0BAAK6J,UAAW7J,GAAAA,QAAemK,EAAAA,EAAAA,GAAWL,EAAO,CAAC,QAClD,0BAAKD,UAAW7J,GAAAA,aAAqBiO,Q,wjBCjC7C,GAAisB,uBC+C3rBwiC,GAAsD,CAC1D7E,cAAe8E,GACf7E,iBAAkB8E,GAClB7E,iBAAkB8E,GAClB7E,eAAgB8E,GAChB7E,OAAQ8E,GACR7E,cAAe8E,GACf7E,cAAe8E,GACf7E,gBAAiB8E,GACjB7E,YAAa8E,GACb7E,yBAA0B8E,GAC1B7E,kBAAmB8E,IA2PrB,IAAe7pC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IAAuB,4BAC/D,MAAO,CACLqe,cAAere,EAAOqe,cACtBwnB,MAAK,UAAE7lC,EAAO4pC,oBAAT,aAAE,EAAqB/D,MAC5BgE,UAAS,UAAE7pC,EAAO4pC,oBAAT,aAAE,EAAqBC,UAChCC,UAAS,UAAE9pC,EAAO4pC,oBAAT,aAAE,EAAqBE,UAChCC,OAAM,UAAE/pC,EAAO4pC,oBAAT,aAAE,EAAqBG,OAC7BC,aAAY,UAAEhqC,EAAO4pC,oBAAT,aAAE,EAAqBI,aACnCC,SAAU,UAAAjqC,EAAO4pC,oBAAP,SAAqBM,YAAatpC,EAAAA,EAAAA,IAAWZ,EAAQA,EAAO4pC,aAAaM,iBAAcvvC,EACjGwvC,OAAQ,UAAAnqC,EAAO4pC,oBAAP,SAAqBQ,UAAWxpC,EAAAA,EAAAA,IAAWZ,EAAQA,EAAO4pC,aAAaQ,eAAYzvC,EAC3FmrC,eAAc,UAAE9lC,EAAO4pC,oBAAT,aAAE,EAAqB9D,eACrCvD,WAAW8H,EAAAA,EAAAA,IAA2BrqC,GACtCsqC,eAAeC,EAAAA,GAAAA,GAAmBvqC,EAAQ,YAC1CwqC,cAAcD,EAAAA,GAAAA,GAAmBvqC,EAAQ,iBACzCyqC,WAAWF,EAAAA,GAAAA,GAAmBvqC,EAAQ,sBACtC0qC,YAAYH,EAAAA,GAAAA,GAAmBvqC,EAAQ,kBACvCgmC,OAAM,UAAEhmC,EAAO2qC,iBAAT,aAAE,EAAkB3E,OAC1B4E,YAAW,UAAE5qC,EAAO2qC,iBAAT,aAAE,EAAkBE,mBAC/BC,mBAAkB,UAAE9qC,EAAO2qC,iBAAT,aAAE,EAAkBG,mBACtCC,kBAAiB,UAAE/qC,EAAO2qC,iBAAT,aAAE,EAAkBI,qBAnBrBhrC,EA/NgC,IAoB9C,IApB+C,OACnDmB,EADmD,cAEnDmd,EAFmD,SAGnD4rB,EAHmD,MAInDpE,EAJmD,eAKnDC,EALmD,UAMnDvD,EANmD,cAOnD+H,EAPmD,WAQnDI,EARmD,aASnDF,EATmD,UAUnDC,EAVmD,OAWnDzE,EAXmD,YAYnD4E,EAZmD,mBAanDE,EAbmD,UAcnDjB,EAdmD,UAenDC,EAfmD,OAgBnDC,EAhBmD,OAiBnDI,EAjBmD,aAkBnDH,EAlBmD,kBAmBnDe,GACI,EAEJ,MAAMC,GAAY1tC,EAAAA,EAAAA,IAAuB,OACnC,kBACJ2tC,EADI,YACe/T,EADf,gBAC4BgU,EAD5B,iBAC6ClU,IAC/Cx1B,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACNkpC,EAAgBC,IAAmBvkC,EAAAA,EAAAA,KAAS,IAC5CwkC,EAAgBC,IAAqBzkC,EAAAA,EAAAA,IAA6Bi/B,GAEnExZ,GAAa5qB,EAAAA,EAAAA,KAAaymC,GACvB,KACLmD,EAAkBnD,KAEnB,IAQH,SAASoD,EAA0BthB,GAClB+gB,EAAUvtC,UAGrBmtC,EACF1T,EAAY,CACV4B,KAAM8R,IAECE,IACT9T,EAAiB,CACfjrB,IAAM,GAAEitB,EAAAA,KAAkB8R,WAA4B7gB,GAAc,YAEtEghB,MAQJ,MAAMO,GAAe9pC,EAAAA,EAAAA,KAAY,KAC/B,MAAMopB,EAASkgB,EAAUvtC,QACzB,GAAKqtB,GACD5pB,EAAQ,CACV,MAAM,IACJqO,EADI,KACCzF,EADD,MACOpM,EADP,OACcK,GAChB+sB,EAAOvzB,cAAc,kBAAmBwS,wBAC5CmhC,EAAgB,CACd37B,IAAAA,EACAzF,KAAAA,EACApM,MAAAA,EACAK,OAAAA,OAGH,CAACmD,EAAQgqC,IAcZ,IAZA1sC,EAAAA,EAAAA,KAAU,KACJsrC,GACF0B,MAED,CAAC1B,EAAW0B,KAEfhuC,EAAAA,EAAAA,IAAY,IAAqB,IAAnBiuC,GAAmB,EAC3BA,IAAkBlJ,GAEtBiJ,MACC,CAACjJ,KAECsD,EAAO,OAGZ,MAAMrX,EAAQqX,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAsCpD,OACE,mBAACtlC,EAAA,EAAD,CACEE,UD5NiB,uBC8NjB8iB,oBAAqB,IAAM+lB,EAAkB,CAAES,UAAU,IACzDrqC,QAAS4pC,EACT/pC,OAAQA,IAAW2oC,EACnBmB,UAAWA,GAEX,mBAACzmB,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAW6mB,EAAiB,EAAI,EAAGjpC,UDnOP,wBCoOjDipC,EAkEA,mBAAC,GAAD,CACEvF,eAAgBuF,EAChBx1B,OAAQyW,OAAW3xB,GACnBkrC,MAAOA,EAEPE,iBAAkBwF,EAClBhJ,UAAWA,EACXyD,OAAQA,IAxEV,0BAAK5jC,WAAWmF,EAAAA,EAAAA,GDrO+F,uBCqOnE,iBAAkBkgC,SA1GtE,SAAsBjgC,GACpB,MAAM,UAAErP,GAAcqP,EAAE+I,cAExB66B,EAAgBjzC,GAAa,OAwGrB,mBAACmK,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACLyD,UDzOkhB,uBC0OlhBG,MAAM,cAENE,QAAS,IAAMwoC,IACflmC,UAAW/C,EAAK,UAEhB,wBAAGI,UAAU,gBAEf,0BAAKA,UDjPsI,uBCiP9GnL,IAAK00C,GAAan4B,IAAI,KACnD,yBAAIpR,UDlPgN,yBCmPjNM,EAAAA,EAAAA,GA5DPqnC,GACKE,MAAAA,OAAA,EAAAA,EAAUjyC,MAAOqmB,EACpBrc,EAAK,sDAAuD,EAACksB,EAAAA,EAAAA,IAAgBic,GAASH,IACtFhoC,EAAK,8CAA+C,EAACksB,EAAAA,EAAAA,IAAgB+b,GAAWD,IAG/EC,EACHjoC,EAAK,kCAAkCksB,EAAAA,EAAAA,IAAgB+b,IACvDjoC,EAAKugC,EAAY,iCAAmC,mBAoDjB,CAAC,kBAAmB,WAEnD,0BAAKngC,UDrPoP,yBCsPtPM,EAAAA,EAAAA,GAnDPqnC,GACKE,MAAAA,OAAA,EAAAA,EAAUjyC,MAAOqmB,EACpBrc,EAAK,0DAA0DksB,EAAAA,EAAAA,IAAgBic,IAC/EnoC,EAAK,kDAIPA,EADGioC,EACE,oCACA1H,EAAY,oCAAsC,2BA2Cb,CAAC,kBAAmB,WAE1D,0BAAKngC,WAAWmF,EAAAA,EAAAA,GDxP4W,uBCwP9U4jC,GDxP2Z,yBCyPvc,yBAAI/oC,UDzPsmB,wBC0PvmBJ,EAAK,qBAIV,0BAAKI,WAAWmF,EAAAA,EAAAA,GD9PuQ,uBC8P3Og7B,GD9PgT,0BC+PxVwI,GAAqBhG,IAA0BljC,KAAI,CAACsmC,EAAShkB,KAC7D,GAAK4gB,GAAyB9sC,SAASkwC,GACvC,OACE,mBAAC,GAAD,CACEriC,IAAKqiC,EACL9lC,MAAOL,EAAKkiC,GAAuBiE,IACnC3hC,KAAkB,kBAAZ2hC,EACFnmC,EAAK8iC,GAA6BqD,GAClC,CAACmC,EAAeE,EAAcC,EAAWC,EA1N1C,IA2NC1oC,EAAK8iC,GAA6BqD,IACtC9iC,KAAM2jC,GAA4Bb,GAClChkB,MAAOA,EACP1hB,QAAS6pB,EAAW6b,QAI1B,0BACE/lC,WAAWmF,EAAAA,EAAAA,GAAehP,GDhR+uB,wBCiRzwBmP,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAE1B,6BACG+H,EAAAA,EAAAA,GAAWV,EAAK,2BAA4B,CAAC,qBAEhD,6BACGU,EAAAA,EAAAA,GAAWV,EAAK,4BAA6B,CAAC,sBAzE/D,WACE,GAAK6jC,KAAUkE,IAAUE,MAAAA,OAAA,EAAAA,EAAUjyC,MAAOqmB,GAI1C,OACE,0BAAKjc,UAAW7J,GAAmBmP,IAAK1F,EAAK8a,MAAQ,WAAQniB,IAC1DixC,EAAAA,GAAAA,GAAuB/F,EAAMgG,WAAYhG,EAAMiG,iBAqEzCC,KAEDxJ,GACA,0BAAKngC,UD7RsyB,wBC+RzyB,mBAACE,EAAA,EAAD,CAAQF,UD/RmE,uBC+RzCqmC,SAAO,EAACC,qBAAmB,EAACjmC,QA9I5E,WACE8oC,MA8IevpC,EAAK,sBAAsB2mC,EAAAA,GAAAA,GAAehW,OAAOnE,EAAMoa,QAASpa,EAAMqa,SAAU7mC,EAAKowB,gB,eChSxG,MC8DA,IAAetyB,EAAAA,EAAAA,KA5CkB,IAE3B,IAF4B,OAChCynC,EADgC,QACxBvZ,EADwB,kBACfge,EADe,SACI1gC,GAChC,EACJ,MAAMtJ,GAAOC,EAAAA,EAAAA,MAEP,OAAEulC,EAAF,OAAUoB,EAAV,SAAkBC,GAAatB,EAC/B0E,EAAW1mC,KAAK2mC,MAAMtD,EAASpB,GAE/B2E,GAAWlwC,EAAAA,EAAAA,KAAQ,IAChB+vC,GAAqBA,EAAoBC,EAC5C1mC,KAAKwiC,KAAK,IAAMkE,GAAYD,EAAoB,WAChDrxC,GACH,CAACqxC,EAAmBC,IAEjBG,GAAe1qC,EAAAA,EAAAA,KAAa8F,IAC5BA,EAAEwQ,OAAOgW,SACX1iB,EAASk8B,KAEV,CAACA,EAAQl8B,IAEZ,OACE,4BAAOlJ,WAAWmF,EAAAA,EAAAA,GDvCI,uBCuC2BymB,GDvCK,wBCuCsBtmB,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACpG,4BACEyH,UDzCiF,uBC0CjFqB,KAAK,QACLghB,KAAK,cACLpZ,MAAOm8B,EACPxZ,QAASA,EACT1iB,SAAU8gC,IAEZ,0BAAKhqC,UDhD+G,wBCiDlH,0BAAKA,UDjD4I,wBCiDlHJ,EAAK,SAAUwlC,IAC9C,0BAAKplC,UDlD8K,wBCmDhLJ,EAAK,iBAAiB2mC,EAAAA,GAAAA,GAAesD,EAAUpD,EAAU7mC,EAAKowB,OAC9D+Z,GACC,2BAAM/pC,UDrD2O,uBCqD/MC,MAAOL,EAAK,iBAA9C,KAAwEmqC,EAAxE,OAGJ,0BAAK/pC,UDxD8M,yBCwDnLumC,EAAAA,GAAAA,GAAeC,EAAQC,EAAU7mC,EAAKowB,YCwG9E,IAAetyB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IAAuB,MAC/D,MAAM,UAAEqsC,EAAF,gBAAaC,EAAb,cAA8BC,GAAkBvsC,EAAOwsC,kBAAoB,GAC3ExuB,EAAOquB,GAAYzrC,EAAAA,EAAAA,IAAWZ,EAAQqsC,QAAa1xC,EAGzD,MAAO,CACLqjB,KAAAA,EACAyuB,MAJYzuB,EAAI,UAAGA,EAAK0uB,gBAAR,aAAG,EAAeC,kBAAehyC,EAKjD2xC,gBAAAA,EACAC,cAAeA,EAAgB5Z,OAAO4Z,QAAiB5xC,EACvD+X,eAAgB1S,EAAOod,SAASC,MAAM3K,kBAVtB3S,EA5HgC,IAO9C,IAP+C,OACnDmB,EADmD,KAEnD8c,EAFmD,MAGnDyuB,EAHmD,gBAInDH,EAJmD,cAKnDC,EALmD,eAMnD75B,GACI,EACJ,MAAM,iBAAEk6B,EAAF,sBAAoBC,EAApB,QAA2CC,IAAYtrC,EAAAA,EAAAA,MAEvDQ,GAAOC,EAAAA,EAAAA,KACP8qC,GAAejkB,EAAAA,GAAAA,GAAiB9K,GAAM,GACtCgvB,GAAgBlkB,EAAAA,GAAAA,GAAiB2jB,GAAO,IACvCQ,EAAgBC,IAAqBrmC,EAAAA,EAAAA,MACtCsmC,EAAYH,MAAAA,OAAH,EAAGA,EAAgB,GAC5BhB,GAAoB/vC,EAAAA,EAAAA,KAAQ,KAChC,IAAK+wC,GAA0C,IAAzBA,EAAc7zC,SAAiBg0C,EACnD,OAGF,MAAMC,EAAcJ,EAAcK,QAAO,CAACC,EAAKC,IACtCA,EAAK3E,QAASuE,MAAAA,OAAd,EAAcA,EAAWvE,QAAS2E,EAAOJ,GAC/CA,GAEH,OAAOC,EAAYvE,WAAayD,GAAmBC,EAC/CA,EACAhnC,KAAK2mC,MAAMkB,EAAYxE,OAASwE,EAAY5F,UAC/C,CAAC2F,EAAWH,EAAeT,EAAeD,KAE7C9tC,EAAAA,EAAAA,KAAU,KACJ0C,GACFgsC,EAAkBC,MAAAA,OAAD,EAACA,EAAW3F,UAE9B,CAAC2F,MAAAA,OAAD,EAACA,EAAW3F,OAAQtmC,IAEvB,MAAMssC,GAAevxC,EAAAA,EAAAA,KAAQ,IACpB+wC,MAAAA,OAAP,EAAOA,EAAe1F,MAAMiG,GAASA,EAAK/F,SAAWyF,KACpD,CAACD,EAAeC,IAEb1a,GAAe7wB,EAAAA,EAAAA,KAAY,KAC1B8rC,IAILX,IACAC,EAAQ,CAAE/gC,IAAKyhC,EAAaC,YAC3B,CAACZ,EAAuBC,EAASU,IAE9BE,GAAqBhsC,EAAAA,EAAAA,KAAY,KACrCkrC,MACC,CAACA,IAoBJ,OACE,mBAAC1qC,EAAA,EAAD,CACEb,QAASwrC,EACT3rC,OAAQA,EACRkB,UC9GwB,wBDgHxB,0BAAKA,UAAU,iBACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACLyD,UCpHyD,uBDqHzDG,MAAM,cAENE,QAAS,IAAMoqC,IACf9nC,UAAW/C,EAAK,UAEhB,wBAAGI,UAAU,gBAEf,mBAAC2b,GAAA,EAAD,CAAQC,KAAM+uB,EAAcpuC,KAAK,QAAQyD,UC5HkD,uBD4HxBsQ,eAAgBA,EAAgBuL,WAAS,IAC5G,yBAAI7b,UC7H2H,wBD8H5HJ,EAAK,6BAER,wBAAGI,UChIiK,yBDiIjKM,EAAAA,EAAAA,GACCV,EAAK,kCAAkCrB,EAAAA,EAAAA,IAAuBosC,IAC9D,CAAC,QAAS,qBAId,0BAAK3qC,UCvIyO,wBDwI3O4qC,MAAAA,OADH,EACGA,EAAenrC,KAAK0rC,GACnB,mBAAC,GAAD,CACEznC,IAAKynC,EAAK3E,OACVrB,OAAQgG,EACRvB,kBAAmBA,EACnBhe,QAASuf,EAAK/F,SAAWyF,EACzB3hC,SAAU4hC,OAtDtB,WACE,MAEMS,EAFO3rC,EAAK,mCAEC4rC,MAAM,0BAEzB,GAAKD,KAASA,EAAMx0C,OAAS,GAI7B,OACE,wBAAGiJ,UClG4M,wBDmG5MurC,EAAM,GACP,mBAACE,GAAA,EAAD,CAAMC,WAAS,EAACrrC,QAASirC,GAAqBC,EAAM,IACnDA,EAAM,IA8CNI,IAGH,mBAACzrC,EAAA,EAAD,CAAQF,UCtJwQ,uBDsJ9OqmC,SAAO,EAAC38B,UAAWmhC,EAAgBxqC,QAAS8vB,GAC3EvwB,EACC,sBACAwrC,IAAgB7E,EAAAA,GAAAA,GAAehW,OAAO6a,EAAa5E,QAAS4E,EAAa3E,SAAU7mC,EAAKowB,aErI5F4b,GAA2D,CAC/DrI,mBAAoB,4BACpBsI,mBAAoB,uBACpBvI,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,2BAGN+I,GAAmE,CACvEvI,mBAAoB,kCACpBsI,mBAAoB,6BACpBvI,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,iCAGNgJ,GAAmE,CACvExI,mBAAoB,mCACpBsI,mBAAoB,8BACpBvI,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,kCAGNiJ,GAAoD,CACxDzI,mBAAoB,kBACpBsI,mBAAoB,kBACpBvI,cAAe,oBACfN,mBAAoB,iBACpBC,eAAgB,kBAChBF,SAAU,oBAGNkJ,GAA4F,CAChGJ,mBAAoB,CAACjsC,EAAcqJ,IAEnB,MAAVA,EAAuBrJ,EAAK,cAAe,KACjC,MAAVqJ,EAAuBrJ,EAAK,cAAe,MACxCyJ,EAAAA,GAAAA,IAAezJ,EAAMqJ,EAAQijC,EAAAA,KA6IxC,IAAexuC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAmC,IAA1B,MAAE2a,GAAwB,EACjC,MAAM,OAAEqrB,GAAWhmC,EAAO2qC,WAAa,GACjCpI,GAAY8H,EAAAA,EAAAA,IAA2BrqC,GAE7C,MAAO,CACLuuC,aAAc5zB,EAAQqrB,MAAAA,OAAH,EAAGA,EAASrrB,GAAO,QAAKhgB,EAC3C6zC,aAAc7zB,EAAQqrB,MAAAA,OAAH,EAAGA,EAASrrB,GAAO,QAAKhgB,EAC3C8zC,gBAAgBC,EAAAA,EAAAA,IAA+B1uC,GAC/CuiC,UAAAA,KATcxiC,EA5FwC,IAMtD,IANuD,aAC3DwuC,EAD2D,aAE3DC,EAF2D,MAG3D7zB,EAH2D,UAI3D4nB,EAJ2D,cAK3DkM,GACI,EACJ,MAAM,uBAAEE,EAAF,iBAA0B/B,IAAqBprC,EAAAA,EAAAA,MAC/CQ,GAAOC,EAAAA,EAAAA,MAEN4nC,EAAW+E,EAAcC,IAAexqC,EAAAA,EAAAA,KAEzC+L,GAAc1O,EAAAA,EAAAA,KAAY,KAC9BkrC,IACAgC,MACC,CAAChC,EAAkBgC,KAEtBpwC,EAAAA,EAAAA,KAAU,MACHmc,GAASkvB,GAAWgF,MACxB,CAAChF,EAAWlvB,EAAOk0B,IAEtB,MAAMxsC,EAAQL,EAAK,gBACb8sC,EAAiBn0B,GAAS0zB,GAAsB1zB,GAChD2kB,EApER,YAgBG,IAhB4B,KAC7Bt9B,EAD6B,UAE7B+sC,EAF6B,UAG7BxM,EAH6B,cAI7BkM,EAJ6B,aAK7BF,EAL6B,aAM7BC,EAN6B,eAO7BM,GASC,EACD,IAAKC,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAe9sC,EAAMusC,GAAgBA,EAC9EU,EAAwBH,EAAiBA,EAAe9sC,EAAMwsC,GAAgBA,EAEpF,OAAIjM,EACKvgC,EAAKmsC,GAA0BY,GAAYE,GAG7CR,EACHzsC,EAAKgsC,GAAkBe,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjFjtC,EAAKksC,GAA0Ba,GAAYC,GAqC3BE,CAAsB,CACxCltC,KAAAA,EACA+sC,UAAWp0B,EACX4nB,UAAAA,EACAkM,cAAAA,EACAF,aAAAA,EACAC,aAAAA,EACAM,eAAAA,IAEIzpC,EAAOsV,GAASyzB,GAAWzzB,GAC3Bw0B,EAAaV,IAAkBlM,EAErC,OACE,mBAACrgC,EAAA,EAAD,CACEb,QAASutC,EACT1pB,oBAAqBypB,EACrBztC,OAAQxF,QAAQif,KAAWkvB,EAC3BxnC,MAAOA,EACPD,UCvJiB,yBDyJf+sC,GACA,0BAAK/sC,UC1JgK,wBD2JnK,wBAAGA,WAAWmF,EAAAA,EAAAA,GC3JqS,uBD2JpQlC,KAC/C,0BAAKjD,UC5JuO,yBD4JxM0sC,MAAAA,OAAA,EAAAA,EAClC9sC,EAAMugC,EAAYiM,EAAeD,MAC7BhM,EAAYiM,EAAeD,KAKpCY,GACC,mBAAC,GAAD,CACE/sC,UCrK0F,uBDsK1F08B,WAAWgQ,MAAAA,OAAA,EAAAA,EAAiB9sC,EAAMusC,MAAiBA,MAAAA,OAAxC,EAAwCA,EAAc1G,YACjE9I,YAAY+P,MAAAA,OAAA,EAAAA,EAAiB9sC,EAAMwsC,MAAiBA,MAAAA,OAAxC,EAAwCA,EAAc3G,YAClE7I,kBAAmB35B,IAIvB,+BACG3C,EAAAA,EAAAA,GAAW48B,EAAa,CAAC,kBAAmB,QAG/C,0BAAKl9B,UChLiY,wBDiLpY,mBAACE,EAAA,EAAD,CACEF,UAAU,wBACVI,QAAM,EACNC,QAASmsC,EACTrsC,MAAM,WAELP,EAAKmtC,EAAa,SAAW,OAE/BA,GAED,mBAAC7sC,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GAAe,wBC5L2b,wBD6LrdkhC,SAAO,EACPhmC,QAAS2N,EACT7N,MAAM,WAELP,EAAK,iBACN,wBAAGI,WAAWmF,EAAAA,EAAAA,GClMghB,uBDkM9e,8B,gBEpL1D,MA4BA,IAAezH,EAAAA,EAAAA,KA5BqB,IAG9B,IAH+B,OACnCoB,EADmC,QAEnCG,GACI,EACJ,MAAMW,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTs8B,gBAAc,EACdt7B,MAAOL,EAAK,yBAEZ,6BAAIU,EAAAA,EAAAA,GAAWV,EAAK,oCAAqC,CAAC,QAC1D,6BAAIU,EAAAA,EAAAA,GAAWV,EAAK,oCAAqC,CAAC,QAC1D,6BAAIU,EAAAA,EAAAA,GAAWV,EAAK,oCAAqC,CAAC,QAC1D,4BACE,mBAACotC,GAAA,EAAD,CACErjC,IAAK/J,EAAK,qCACVwE,KAAMxE,EAAK,wCAGf,6BAAIU,EAAAA,EAAAA,GAAWV,EAAK,oCAAqC,CAAC,QAC1D,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,cC8D/E,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM6uC,GAAgB3uC,EAAAA,EAAAA,IAASF,GACzBge,GAAiBC,EAAAA,EAAAA,IAAqBze,EAAQQ,GAC9CF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B4qB,EAAY1vB,QAAQ4E,KAASgvC,EAAAA,EAAAA,IAAchvC,GAC3CivC,EAAU7zC,QAAQ4E,KAASS,EAAAA,EAAAA,IAAiBT,GAC5CkvC,EAAe9zC,QAAQ4E,KAASW,EAAAA,EAAAA,IAAiBX,GAMvD,MAAO,CACL+uC,cAAAA,EACA7wB,eAAAA,EACA4M,UAAAA,EACAmkB,QAAAA,EACAC,aAAAA,EACAC,aAXoBJ,IAAkB7wB,GAAmBgxB,GAAgBD,EAYzE9uC,YAXkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKtI,KACtC2I,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D3F,KAXYoF,EAhE+B,IAU7C,IAV8C,OAClDmB,EADkD,UAElDgc,EAFkD,OAGlD1c,EAHkD,UAIlD4qB,EAJkD,QAKlDmkB,EALkD,aAMlDC,EANkD,aAOlDC,EAPkD,YAQlDhvC,EARkD,QASlDY,GACI,EACJ,MAAM,WAAEquC,IAAeluC,EAAAA,EAAAA,MAEjBmuC,GAAyBjuC,EAAAA,EAAAA,KAAY,KACzCguC,EAAW,CACTlvC,OAAAA,EAAQ0c,UAAAA,EAAW0yB,SAAS,IAE9BvuC,MACC,CAACquC,EAAYlvC,EAAQ0c,EAAW7b,IAE7BwuC,GAAmBnuC,EAAAA,EAAAA,KAAY,KACnCguC,EAAW,CACTlvC,OAAAA,EAAQ0c,UAAAA,EAAW0yB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhE1uC,MACC,CAACb,EAAQ0c,EAAW7b,EAASquC,IAE1B1tC,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAACC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTe,UAAU,MACVC,MAAOL,EAAK,yBAEZ,4BAjBOA,EADLopB,EACU,yBAGVmkB,GAAWC,EACD,kBAGF,wBAWV,mBAACltC,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASotC,GACvD7tC,EAAK,cAEPytC,GACC,mBAACntC,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASktC,GACvDlvC,GACGiC,EAAAA,EAAAA,GAAWV,EAAK,8BAA+BvB,IAC/CuB,EAAK,qDAGb,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,gBCvD/E,IAAelC,EAAAA,EAAAA,KAxB6B,IAKtC,IALuC,OAC3CoB,EAD2C,oBAE3C8uC,EAAsB,EAFqB,QAG3C3uC,EAH2C,QAI3C4uC,GACI,EACJ,MAAMjuC,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTe,UAAU,YACVC,MAAOL,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqCguC,EAAqB,MACnE,mBAAC1tC,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASwtC,GACvDjuC,EAAK,gBAER,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,e,0BCjC/E,MC2GA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAwC,IAA/B,WAAEC,GAA6B,EACtC,MAAQ0B,WAAYuuC,GAAuBlwC,EAAOmwC,kBAAoB,IAChE,gBAAE/vC,IAAoBgwC,EAAAA,EAAAA,IAAgCpwC,GACtDM,GAAOg2B,EAAAA,EAAAA,IAAkBt2B,GAQ/B,MAAO,CACLkwC,mBAAAA,EACA9vC,iBAAkBH,GAAcG,EAChCK,YAVkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKtI,KACtC2I,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D3F,EASFmG,6BAPmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAQtEY,iBAPuBV,IAAQW,EAAAA,EAAAA,IAAiBX,MAVlCP,EA5E0C,IASxD,IATyD,OAC7DmB,EAD6D,WAE7DjB,EAF6D,mBAG7DiwC,EAH6D,gBAI7D9vC,EAJ6D,YAK7DK,EAL6D,6BAM7DK,EAN6D,iBAO7DE,EAP6D,QAQ7DK,GACI,EACJ,MAAM,eACJC,EADI,wBAEJC,EAFI,sBAGJ8uC,IACE7uC,EAAAA,EAAAA,MAEEuuB,GAAa9a,EAAAA,EAAAA,GAAY/T,GAEzBO,GAA4BC,EAAAA,EAAAA,KAAY,KAC5CL,IACAC,EAAe,CAAEK,WAAYuuC,EAAoBpuC,oBAAoB,MACpE,CAACR,EAAgB4uC,EAAoB7uC,IAElCU,GAA6BL,EAAAA,EAAAA,KAAY,KACzCzB,EACFsB,EAAwB,CAAEI,WAAYuuC,IAEtC5uC,EAAe,CAAEK,WAAYuuC,EAAoBpuC,oBAAoB,IAGvET,MACC,CAACpB,EAAYoB,EAASE,EAAyB2uC,EAAoB5uC,IAEhEU,GAAOC,EAAAA,EAAAA,KASb,IANAzD,EAAAA,EAAAA,KAAU,MACH0C,GAAU6uB,GACbsgB,MAED,CAACA,EAAuBnvC,EAAQ6uB,IAE9BmgB,EAIL,OACE,mBAAChuC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACTc,QAAS/B,OAAkBzF,EAAYoH,EACvCK,UAAU,SACVC,MAAOL,EAAK,oCAEZ,4BAAIA,EAAK,gCACRlB,GACC,2GAEDE,GACC,gFAEDZ,GACC,mBAACkC,EAAA,EAAD,CAAQC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAAShB,GACtEhB,GACGiC,EAAAA,EAAAA,GAAWV,EAAK,6BAA8BvB,IAC9CuB,EAAK,2CAGb,mBAACM,EAAA,EAAD,CAAQC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASV,GACtEC,EAAK5B,EAAkB,gCAAkC,WAE5D,mBAACkC,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,gBC6E/E,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQyD,KAAMD,EAAR,OAAyBhD,IAAWL,EAAAA,EAAAA,IAAyBH,IAAW,GACxEC,EAAiC,cAApBuD,GACb,UAAEF,IAAc8sC,EAAAA,EAAAA,IAAgCpwC,GAChD2D,EAAYjI,SAASuE,IAAcqwC,EAAAA,EAAAA,IAAgCtwC,IACnEuwC,GAAcC,EAAAA,EAAAA,IAAkCxwC,IAC9C2B,WAAYuuC,GAAuBlwC,EAAOmwC,kBAAoB,GAChEM,IAAsBjwC,IAASkwC,EAAAA,EAAAA,IAA0B1wC,EAAQQ,EAAQ0vC,GACzES,IAAanwC,IAASowC,EAAAA,EAAAA,IAAyB5wC,EAAQQ,EAAQ0vC,GAC/DW,EAAqB7wC,EAAOgpB,gBAAgB8nB,aAC5CC,EAAiBr1C,QAAQm1C,GAAsB7wC,EAAO0pB,gBACvD1pB,EAAO6pB,0BAA4B7pB,EAAOgxC,2BAE/C,MAAO,CACL/wC,WAAAA,EACAgxC,uBAAuBC,EAAAA,EAAAA,IAA4BlxC,GACnDmxC,kBAAmB7tC,EACnB8tC,kBAAmBztC,EACnB0tC,oBAAqBd,EACrBe,mBAAoBX,EACpBT,mBAAAA,EACAO,oBAAAA,EACAM,eAAAA,KAvBchxC,EAtIoC,IAalD,IAbmD,QACvDwxC,EADuD,SAEvD9+B,EAFuD,gBAGvDjP,EAHuD,WAIvDvD,EAJuD,sBAKvDgxC,EALuD,kBAMvDE,EANuD,kBAOvDC,EAPuD,oBAQvDC,EARuD,mBASvDC,EATuD,oBAUvDb,EAVuD,eAWvDM,EAXuD,mBAYvDb,GACI,EACJ,MAAM,sBACJG,EADI,mCAEJmB,EAFI,yBAGJC,EAHI,qBAIJC,EAJI,iBAKJtoB,IACE5nB,EAAAA,EAAAA,MACEQ,GAAOC,EAAAA,EAAAA,MAENiC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,MACxDob,EAAmBC,EAAiBC,IAAoBtb,EAAAA,EAAAA,KFrEjC,EAACoO,EAAmBi/B,MAUlDC,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoBnqC,GACbiL,IAILjL,EAAE0J,iBACFwgC,SEgEFE,CAAwBl2C,QAAQ+W,GAAWi/B,IAC3ClzC,EAAAA,EAAAA,KAAU,KACDiU,GAAavO,GAAsBub,GAAsBsxB,OAM5Dp2C,GALAk3C,EAAAA,GAAAA,GAAyB,CACzBC,YAAaX,EAAoBhtC,OAAkBxJ,EACnDo3C,SAAUZ,EAAoBhtC,OAAkBxJ,EAChDq3C,MAAO3B,KAGV,CACD59B,EAAUvO,EAAmBub,EAAmBtb,EAAiBksC,EAAuBU,EACxFI,IAGF,MAAMc,GAAavwC,EAAAA,EAAAA,KAAY,KAC7BgwC,IACAtoB,EAAiB,CACfxwB,QAASoJ,EAAK,uBAEhBquC,MACC,CAACqB,EAAsBrB,EAAuBruC,EAAMonB,IAEjD8oB,GAAiBxwC,EAAAA,EAAAA,KAAY,KACjC+vC,IACApB,MACC,CAACoB,EAA0BpB,IAExB8B,GAA4Bl9B,EAAAA,EAAAA,GAAYg8B,QAAyBt2C,GAAW,GAG5Ey3C,EAAyBpwC,EAAK,kCAFGyQ,EAAWw+B,EAAwBkB,EAE6B,KAEjG/vC,GAAYmF,EAAAA,EAAAA,GAChB,uBACAgqC,GAAW,gBACX9+B,GAAY,SAGR4/B,EAAe,CACnBhtC,EAAc4oB,EAAexrB,EAA4Bm6B,IAGvD,0BACExJ,KAAK,SACLC,SAAU,EACVjxB,WAAWmF,EAAAA,EAAAA,GACT,OACAq1B,GAAe,eAEjBn6B,QAASA,EACTJ,MAAO4rB,GAEP,wBAAG7rB,UAAY,QAAOiD,OAK5B,OACE,0BAAKjD,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAACE,EAAA,EAAD,CACEC,MAAM,cACNuC,OAAK,EACLrC,QAAS4tC,EACTtrC,UAAU,oBAEV,wBAAG3C,UAAU,gBAEf,2BAAMA,UAAU,6BAA6BC,MAAO+vC,GACjDA,GAGF12C,QAAQu1C,IACP,0BAAK7uC,UAAU,gCACQ,cAApBoB,GAAmC8tC,GAClCe,EACE,UAAWrwC,EAAK,4BAA6BwvC,GAGhDJ,GACCiB,EAAa,OAAQrwC,EAAK,+BAAgC0d,GAE3D2xB,IAAwBZ,GACvB4B,EAAa,WAAYrwC,EAAK,sBAAuBkwC,IAErDzB,GACA4B,EAAa,OAAQrwC,EAAK,mCAAoCiwC,GAE/Dd,GACCkB,EAAa,SAAUrwC,EAAK,gCAAiCmC,GAAiB,KAKtF,mBAAC,GAAD,CACEjD,OAAQgD,EACRjE,WAAYA,EACZoB,QAAS+C,IAEX,mBAACsgB,EAAA,EAAD,CACExjB,OAAQue,EACRpe,QAASse,EACThe,WAAYuuC,SCrGpB,IAAepwC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAM,OAAEQ,EAAF,UAAU0c,GAAcld,EAAOsyC,aAAe,GACpD,OAAK9xC,GAAW0c,EAIT,CACLq1B,UAAS,WAAElgC,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQ0c,UAApC,aAAE,EAA8Cs1B,eAJlD,KAJOzyC,EAnD2B,IAGzC,IAH0C,OAC9CmB,EAD8C,UAE9CqxC,GACI,EACJ,MAAM,SACJtb,EADI,iBAEJwb,IACEjxC,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,KAEPmO,GAAc1O,EAAAA,EAAAA,KAAaglB,IAC/B+rB,IAEA1zC,YAAW,KACTk4B,EAAS,CAAEj/B,GAAI0uB,MAjBY,OAmB5B,CAAC+rB,EAAkBxb,IAEhByb,GAAqB5pB,EAAAA,GAAAA,GAAiBypB,GAAW,GAEvD,OACE,mBAACrwC,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASoxC,EACTrwC,UAAU,SACVC,MAAQ,WAAUkwC,MAAAA,OAAX,EAAWA,EAAWp5C,gBAE7B,0BAAKuO,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5B+3C,GAAsBA,EAAmB7wC,KAAK6kB,GAC7C,mBAACH,GAAA,EAAD,CACEzgB,IAAK4gB,EACLtkB,UAAU,6CAEVK,QAAS,IAAM2N,EAAYsW,IAE3B,mBAACF,GAAA,EAAD,CAAiBE,OAAQA,EAAQisB,kBAAgB,QAIvD,mBAACrwC,EAAA,EAAD,CACEF,UAAU,wBACVI,QAAM,EACNC,QAASgwC,GAERzwC,EAAK,e,2BCvCd,MAmKA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,EAAF,UAAU0c,GAAcld,EAAO4yC,cAAgB,GAC/Ch6C,EAAU4H,GAAU0c,GAAY7K,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQ0c,QAAaviB,EAErF,MAAO,CACL6F,OAAAA,EACA0c,UAAAA,EACA21B,UAAWj6C,MAAAA,OAAF,EAAEA,EAASi6C,UACpBC,SAAUl6C,MAAAA,OAAF,EAAEA,EAASk6C,SACnBN,cAAe55C,MAAAA,OAAF,EAAEA,EAAS45C,cACxB9/B,eAAgB1S,EAAOod,SAASC,MAAM3K,kBAXxB3S,EAvJgC,IAQ9C,IAR+C,OACnDmB,EADmD,SAEnD4xC,EAFmD,UAGnDD,EAHmD,OAInDryC,EAJmD,UAKnD0c,EALmD,cAMnDs1B,EANmD,eAOnD9/B,GACI,EACJ,MAAM,aACJqgC,EADI,sBAEJC,EAFI,SAGJ/b,IACEz1B,EAAAA,EAAAA,MAGE0mB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAE9B9kB,GAAOC,EAAAA,EAAAA,MACN4nC,EAAW+E,EAAcC,IAAexqC,EAAAA,EAAAA,IAAQ,IAChD4uC,EAAWC,IAAgBrsC,EAAAA,EAAAA,SAA6BlM,GACzDw4C,EAAiBL,GAAYD,GAAaC,EAAS1P,OAjCnB,IAkCjCyP,EAAUO,QAAQj6C,OAAS,EAC1Bk6C,GAAY/1C,EAAAA,EAAAA,OAElBkB,EAAAA,EAAAA,KAAU,KACJqrC,IAAc3oC,IAChB2tC,IACAqE,OAAav4C,MAEd,CAACkvC,EAAW3oC,EAAQ2tC,IAEvB,MAAMyE,GAA0B5xC,EAAAA,EAAAA,KAAY,KACtC2xC,EAAU51C,SACZw5B,EAAS,CAAEj/B,GAAIq7C,EAAU51C,UAE3Bu1C,MACC,CAACA,EAAuB/b,IAErBtT,GAAcjiB,EAAAA,EAAAA,KAAY,KAC9BktC,MACC,CAACA,IAEEx+B,GAAc1O,EAAAA,EAAAA,KAAaglB,IAC/B2sB,EAAU51C,QAAUipB,EACpB/C,MACC,CAACA,IAEE4vB,GAAiB7xC,EAAAA,EAAAA,KAAY,KACjCqxC,EAAa,CACXvyC,OAAAA,EACA0c,UAAAA,MAED,CAAC1c,EAAQuyC,EAAc71B,IAEpBs2B,GAAev3C,EAAAA,EAAAA,KAAQ,IACpB62C,MAAAA,GAAAA,EAAUD,WAAY7qB,EAAAA,GAAAA,IAAO8qB,EAASD,UAAUhxC,KAAKygC,GAAMA,EAAEhC,YAAa,IAChF,CAACwS,MAAAA,OAAD,EAACA,EAAUD,YAERprB,GAAUxrB,EAAAA,EAAAA,KAAQ,IAClBg3C,EACKH,MAAAA,OAAP,EAAOA,EAAUD,UAAUnrB,QAAQ4a,GAAMA,EAAEhC,WAAa2S,IAAWpxC,KAAKygC,GAAMA,EAAE5b,UAE3EsB,EAAAA,GAAAA,KAAO8qB,MAAAA,OAAA,EAAAA,EAAUD,UAAUhxC,KAAKygC,GAAMA,EAAE5b,SAAQ+sB,OAAOjB,GAAiB,MAAO,KACrF,CAACS,EAAWH,MAAAA,OAAZ,EAAYA,EAAUD,UAAWL,KAE7BrtB,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BkuB,EAAgB9rB,EAASqrB,QAAoCn4C,IAAxBm4C,EAASY,YAOhD,OAJAl1C,EAAAA,EAAAA,KAAU,KACR4mB,MAAAA,GAAAA,EAAU,CAAE7N,UAAWo8B,EAAAA,GAAAA,cACtB,CAACvuB,IAGF,mBAACljB,EAAA,EAAD,CACEhB,OAAQA,IAAW2oC,EACnBxoC,QAASsiB,EACTvhB,UAAU,0BACVC,MAAOL,EAAK,aACZkjB,oBAAqBouB,GAEpBH,GACC,0BAAK/wC,UAAU,aACb,mBAACE,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,IAAgB0rC,GAAa,UACxCt0C,KAAK,OACLsM,QAAM,EAENxI,QAAS,IAAMywC,OAAav4C,IAE5B,wBAAGyH,UAAU,gBACZ0wC,MAAAA,OAAA,EAAAA,EAAU1P,SAASwQ,EAAAA,GAAAA,IAAqBd,EAAS1P,QAEnDoQ,EAAa3xC,KAAKy+B,IAAa,MAC9B,MAAM8C,EAAQyP,MAAAA,GAAH,UAAGA,EAAWO,QAAQ9L,MAAMhF,GAAMA,EAAEhC,WAAaA,WAAjD,aAAG,EAAyD8C,MACvE,OACE,mBAAC9gC,EAAA,EAAD,CACEF,WAAWmF,EAAAA,EAAAA,GAAe0rC,IAAc3S,GAAY,UACpD3hC,KAAK,OACLsM,QAAM,EAENxI,QAAS,IAAMywC,EAAa5S,IAE5B,mBAACuT,GAAA,EAAD,CAAqBvT,SAAUA,EAAUl+B,UAAU,0BAClDghC,IAASwQ,EAAAA,GAAAA,IAAqBxQ,QAOzC,0BAAK17B,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5BwqB,MAAAA,GAAAA,EAAahsB,OACZ,mBAAC8sB,GAAA,EAAD,CACE7jB,UAAU,6BACV8jB,MAAOf,EACPgB,WAAYf,GAEXD,MAAAA,OALH,EAKGA,EAAatjB,KACX6kB,IAAW,MACV,MAAM1I,EAAOkK,EAAUxB,GACjB4Z,EAAWwS,MAAAA,GAAH,UAAGA,EAAUD,UAAUvL,MAAMhF,GAAMA,EAAE5b,SAAWA,WAAhD,aAAG,EAAsD4Z,SACvE,OACE,mBAAC/Z,GAAA,EAAD,CACEzgB,IAAK4gB,EACLtkB,UAAU,yCAEVK,QAAS,IAAM2N,EAAYsW,IAE3B,mBAAC3I,GAAA,EAAD,CAAQC,KAAMA,EAAMrf,KAAK,QAAQ+T,eAAgBA,EAAgBuL,WAAS,IAC1E,mBAAC61B,GAAA,EAAD,CAAeC,KAAM/1B,EAAMg2B,iBAAe,IACzC1T,GAAY,mBAACuT,GAAA,EAAD,CAAqBzxC,UAAU,sBAAsBk+B,SAAUA,SAMpF,mBAAC1Z,GAAA,EAAD,OAEN,mBAACtkB,EAAA,EAAD,CACEF,UAAU,wBACVI,QAAM,EACNC,QAASuwC,GAERhxC,EAAK,e,gBC3Jd,MA0FA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoD,IAA3C,uBAAEi0C,GAAyC,EAClD,MAAMC,OAA2Dv5C,IAA1Cs5C,EAAuBC,iBACzCC,EAAAA,EAAAA,IAA0Bn0C,EAAQi0C,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAel8C,QAAK2C,EACxD05C,sBAAuBH,GAAkBD,EAAuBC,gBAC7D17C,OAAO87C,KAAKC,GAAAA,GAAgBt8C,SAASg8C,EAAuBC,gBAC3DD,EAAuBC,oBAAiBv5C,KAR9BoF,EAtFyC,IAIvD,IAJwD,kBAC5Dq0C,EAD4D,qBAE5DC,EAF4D,uBAG5DJ,GACI,EACJ,MAAM,2BAAEO,IAA+BhzC,EAAAA,EAAAA,OAEhCizC,EAAUC,IAAerwC,EAAAA,EAAAA,IAAQ,IACjC6D,EAAWysC,IAAgBtwC,EAAAA,EAAAA,IAAQ,GACpCjG,GAAad,EAAAA,EAAAA,MAEbs3C,GAAOlzC,EAAAA,EAAAA,KAAY,KACvBgzC,IACIt2C,EAAWX,SACbc,aAAaH,EAAWX,SAE1BsB,YAAW,KACTy1C,EAA2B,CAAEx8C,GAAIi8C,EAAuBj8C,OArB9B,OAuB3B,CAACi8C,EAAuBj8C,GAAI08C,EAAaF,IAEtCK,GAAwBnzC,EAAAA,EAAAA,KAAa8F,IAAe,MACpD,UAAEA,EAAEwQ,cAAJ,OAAC,EAA2BjgB,QAAQ,mBACtC68C,MAED,CAACA,KAEJp2C,EAAAA,EAAAA,KAAU,KACRhI,SAAS4Q,iBAAiB,aAAcytC,GACxCr+C,SAAS4Q,iBAAiB,YAAaytC,GACvCr+C,SAAS4Q,iBAAiB,YAAaytC,GACvCr+C,SAAS4Q,iBAAiB,QAASytC,GAE5B,KACLr+C,SAAS6Q,oBAAoB,aAAcwtC,GAC3Cr+C,SAAS6Q,oBAAoB,YAAawtC,GAC1Cr+C,SAAS6Q,oBAAoB,YAAawtC,GAC1Cr+C,SAAS6Q,oBAAoB,QAASwtC,MAEvC,CAACA,KAEJznC,EAAAA,EAAAA,KAAgB,KACd,MAAM0nC,GAA6B/zB,EAAAA,EAAAA,MAEnC3iB,EAAWX,QAAUsB,YAAW,KAC9B61C,IACAE,MAjDmB,OAmDpB,CAACF,IAEJ,MAAMG,EAAaX,GAAsB,UAASA,IAC5CY,GAAez4C,EAAAA,EAAAA,GAASw4C,GAAaX,GAE3C,IAAKH,EAAuBgB,UAC1B,OAGF,MAAMxgC,GAASw/B,EAAuBgB,WAAa,GA3DjC,IA4DZvT,EAAS2S,GAAyBA,KAAwBE,GAAAA,EAC5DA,GAAAA,EAAeF,GACfW,EAEJ,OACE,0BACE5yC,WAAWmF,EAAAA,EAAAA,GACT,4BACAktC,GAAY,SACZvsC,GAAa,UACb+rC,EAAuBiB,YAAc,YAEvCx8C,MAAQ,YAAW+b,iBAAqBw/B,EAAuB1/B,mBAAmB0/B,EAAuBz/B,QAEzG,mBAACitB,GAAA,EAAD,CACE37B,IAAM,UAASsuC,IACfz1C,KA5EY,IA6EZ+iC,OAAQA,EACRC,KAAMz5B,EACNitC,QAASC,EAAAA,GAAa,QAAMz6C,EAC5BopB,uBAAqB,EACrB8d,QAAM,EACNwT,OAAQV,S,oDCjHhB,MAwBA,GAvBEW,IAGA,MAAMC,GAAYj4C,EAAAA,EAAAA,IAAuB,MAEnC2a,GAAgBvW,EAAAA,EAAAA,KAAa8F,IACnB,UAAVA,EAAE1B,KACYyvC,EAAU93C,UAAYjH,SAASg/C,eAG/CF,MAED,CAACA,IAQJ,OANA92C,EAAAA,EAAAA,KAAU,KACRM,OAAOsI,iBAAiB,UAAW6Q,GAAe,GAE3C,IAAMnZ,OAAOuI,oBAAoB,UAAW4Q,GAAe,KACjE,CAACA,IAEGs9B,G,4BCWT,MA2DA,IAAez1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1Bi1C,EAAoBn1C,IAAQO,EAAAA,EAAAA,IAAqBP,GAOvD,MAAO,CACLA,KAAAA,EACA0d,KARWy3B,GAAoB70C,EAAAA,EAAAA,IAAWZ,EAAQy1C,QAAqB96C,EASvE+6C,UAReC,EAAAA,EAAAA,IAAmB31C,EAAQQ,GAS1CgI,QARclI,GACZs1C,EAAAA,EAAAA,IAAkBt1C,GAAMu1C,EAAAA,EAAAA,IAAqB71C,IAAS81C,EAAAA,EAAAA,IAAuB91C,SAC7ErF,EAOFo7C,gBAAiBr6C,QAAO,UAACsE,EAAOg2C,YAAYC,kBAApB,aAAC,EAA+B98C,WAf1C4G,EA3DoC,IASlD,IATmD,OACvDS,EADuD,aAEvD01C,EAFuD,QAGvDzzC,EAHuD,KAIvDnC,EAJuD,KAKvD0d,EALuD,SAMvD03B,EANuD,QAOvDltC,EAPuD,gBAQvDutC,GACI,EACJ,MAAO7xC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,MACxD8xC,EAAuBC,EAAqBC,IAAwBhyC,EAAAA,EAAAA,KAErEiyC,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3Cj2C,KAAAA,EACA0d,KAAAA,EACA03B,SAAAA,EACAltC,QAAAA,EACAutC,gBAAAA,EACAS,aAAcryC,EACdsyC,uBAAwBL,IACvB,GAEGhmC,GAAc1O,EAAAA,EAAAA,KAAY,KAC9Be,EAAQjC,KACP,CAACA,EAAQiC,IAEN8yC,EAAYmB,GAAmBtmC,GAErC,GAAK9P,EAIL,OACE,mBAACimB,GAAA,EAAD,CACEnkB,UAAU,oCACVK,QAAS2N,EACTkmC,eAAgBA,EAChBf,UAAWA,IAEV70C,EAAAA,EAAAA,IAASF,GACR,mBAACgmB,GAAA,EAAD,CAAiBE,OAAQlmB,EAAQ01C,aAAcA,EAAcS,WAAW,QAAQC,iBAAe,IAE/F,mBAACjwB,GAAA,EAAD,CAAenmB,OAAQA,EAAQ01C,aAAcA,EAAcS,WAAW,QAAQC,iBAAe,IAE/F,mBAACC,GAAA,EAAD,CACE31C,OAAQgD,EACR7C,QAAS+C,EACT9D,KAAMA,IAER,mBAAC,KAAD,CACEY,OAAQi1C,EACR90C,QAASg1C,EACT71C,OAAQA,SCpDVs2C,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAO,GA+EnD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQynB,QAASuvB,GAAeh3C,EAAOi3C,SACjC/uB,EAAYloB,EAAOmoB,MAAMrB,MACzB,qBAAEowB,GAAyBl3C,EAAOm3C,cAClC,eAAEzkC,GAAmB1S,EAAOod,SAASC,MAE3C,MAAO,CACL25B,WAAAA,EACA9uB,UAAAA,EACAgvB,qBAAAA,EACAxkC,eAAAA,KAXc3S,EA7E8B,IAM5C,IAN6C,WACjDi3C,EADiD,UAEjD9uB,EAFiD,qBAGjDgvB,EAHiD,eAIjDxkC,EAJiD,QAKjD0kC,GACI,EACJ,MAAM,aACJC,EADI,SACUpgB,EADV,uBAEJqgB,EAFI,wBAEoBC,IACtB/1C,EAAAA,EAAAA,MAGEg2C,GAAcl6C,EAAAA,EAAAA,IAAuB,OAI3CkB,EAAAA,EAAAA,KAAU,KACRs4C,IAAa,KACXO,SAED,CAACA,KAEJI,EAAAA,GAAAA,GAAoBD,EAAY/5C,SAAUu5C,GAE1C,MAAM5mC,GAAc1O,EAAAA,EAAAA,KAAa1J,IAC/Bi/B,EAAS,CAAEj/B,GAAAA,EAAI0/C,sBAAsB,IACrCN,IACAr4C,YAAW,KACTu4C,EAAuB,CAAEt/C,GAAAA,MAlCC,OAoC3B,CAACi/B,EAAUqgB,EAAwBF,IAEhCp1C,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKG,UAAU,gCACZ40C,GACC,0BAAK50C,UAAU,oBAAoBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC3D,0BAAKkQ,IAAK2sC,EAAap1C,UAAU,0BAC9B40C,EAAWn1C,KAAK6kB,GACf,0BAAKtkB,UAAU,gBAAgBK,QAAS,IAAM2N,EAAYsW,GAAShf,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC3F,mBAACojB,GAAA,EAAD,CAAQC,KAAMkK,EAAUxB,GAAShU,eAAgBA,EAAgBuL,WAAS,IAC1E,0BAAK7b,UAAU,kBAAiBM,EAAAA,EAAAA,IAAW/B,EAAAA,EAAAA,IAAuBunB,EAAUxB,KA/C/E,WAqDNwwB,GACC,0BAAK90C,UAAU,uBACb,yBAAIA,UAAU,2CAA2CsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChFqH,EAAK,UAEN,mBAACM,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNwC,UAAU,qBACVtC,QAAS80C,EACTz6B,MAAO9a,EAAK8a,OAEZ,wBAAG1a,UAAU,iBAGhB80C,EAAqBr1C,KAAK7J,GACzB,mBAAC,GAAD,CACEwI,OAAQxI,EACRyK,QAAS2N,YC0BvB,IAAetQ,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAChC,IAAKF,EACH,MAAO,GAGT,MAAMm1C,GAAoB50C,EAAAA,EAAAA,IAAqBP,GAE/C,MAAO,CACLA,KAAAA,EACAq3C,aAAc33C,EAAO23C,aACrBjlC,eAAgB1S,EAAOod,SAASC,MAAM3K,kBAClC+iC,GAAqB,CAAEmC,iBAAiBh3C,EAAAA,EAAAA,IAAWZ,EAAQy1C,OAbjD11C,EAlF2B,IAQzC,IAR0C,QAC9CnH,EAD8C,YAE9Ci/C,EAF8C,OAG9Cr3C,EAH8C,KAI9CF,EAJ8C,gBAK9Cs3C,EAL8C,eAM9CllC,EAN8C,aAO9CilC,GACI,EACJ,MAAM,aAAEl6B,IAAiBjc,EAAAA,EAAAA,MAEnBs2C,GAAkBC,EAAAA,EAAAA,IAAkBn/C,QAAkD+B,GAAvCuE,EAAAA,EAAAA,IAA4BtG,GAC3Eo/C,GAAez7C,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoBzD,EAAS,UACrDq/C,EAAev8C,SAAQw8C,EAAAA,EAAAA,IAAqBt/C,IAE5CwX,GAAc1O,EAAAA,EAAAA,KAAY,KAC9B+b,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAWtkB,EAAQZ,GAAI0/C,sBAAsB,MACnE,CAACl3C,EAAQid,EAAc7kB,EAAQZ,KAE5BgK,GAAOC,EAAAA,EAAAA,KAEPszC,EAAYmB,GAAmBtmC,GAErC,GAAK9P,EAIL,OACE,mBAACimB,GAAA,EAAD,CACEnkB,UAAU,kCACV6I,QAAShG,EAAAA,GACTxC,QAAS2N,EACTmlC,UAAWA,GAEX,mBAACx3B,GAAA,EAAD,CACEzd,KAAMA,EACN0d,KAAM45B,EACNO,gBAAiBP,MAAAA,OAAF,EAAEA,EAAiBQ,OAClCT,aAAcA,EACd15B,WAAS,EACTvL,eAAgBA,IAElB,0BAAKtQ,UAAU,QACb,0BAAKA,UAAU,YACb,mBAAC0xC,GAAA,EAAD,CACEC,KAAM6D,GAAmBt3C,EACzB0zC,iBAAe,EACfmE,gBAAiB33C,KAAWo3C,MAAAA,OAAL,EAAKA,EAAiB5/C,MAAM4/C,MAAAA,OAAlC,EAAkCA,EAAiBQ,UAEtE,0BAAKh2C,UAAU,gBACb,mBAACyrC,GAAA,EAAD,CAAMzrC,UAAU,SACbi2C,EAAAA,GAAAA,IAAoBr2C,EAAqB,IAAfpJ,EAAQulB,SAKzC,0BAAK/b,UAAU,YACb,0BAAKA,UAAU,UAAUsF,IAAI,QASvC,SACE1F,EAAcpJ,EAAqBqE,EAAkB46C,EAAsBI,GAE3E,OAAKh7C,EAKH,2BAAMmF,UAAU,iBACd,0BAAKnL,IAAKgG,EAASuW,IAAI,GAAGpR,WAAWmF,EAAAA,EAAAA,GAAe,uBAAwB0wC,GAAgB,YAC3Fr9C,EAAAA,EAAAA,IAAgBhC,IAAY,wBAAGwJ,UAAU,eACzCk2C,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,GAAS,EAAMi/C,KAPtCS,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,OAAS+B,EAAWk9C,GAZ7CU,CAAcv2C,EAAMpJ,EAASo/C,GAAgBF,EAAgBD,EAAaI,WClDvF,IAAen4C,EAAAA,EAAAA,KA5CmB,IAE5B,IAF6B,WACjC04C,EADiC,SACrBlD,GACR,EACJ,MAAMmD,GAAcx8C,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCu8C,GAE9B,GADgBA,EAAW5K,MAAM,0BACpB,CACX,MAAMzvB,EAAO,IAAIjH,KAAKshC,GACtB,MAAO,CAAC,CAAEr6B,KAAAA,EAAM3X,MAAM2rB,EAAAA,GAAAA,IAAmBhU,KAG3C,MAAMu6B,EAAa,GACbC,EAAc,IAAIzhC,KAClB8Z,EAAc2nB,EAAYpoB,cAC1BqoB,EAAaD,EAAYznB,UAAa,IAAIha,KAAM,GAAE8Z,KAAewnB,KAAetnB,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAIjR,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAM5B,EAAO,IAAIjH,KAAM,GAAE0hC,EAAa74B,KAAKy4B,KAC3CE,EAAWtzC,KAAK,CAAE+Y,KAAAA,EAAM3X,MAAM2rB,EAAAA,GAAAA,IAAmBhU,KAGnD,OAAOu6B,EAtC2BG,CAAuBL,IAAa,CAACA,IACvE,OACE,8BAASp2C,UAAU,6CAChBq2C,EAAY52C,KAAI,IAAoB,IAAnB,KAAEsc,EAAF,KAAQ3X,GAAW,EACnC,OACE,0BACE/D,QAAS,IAAM6yC,EAASn3B,GACxB/b,UAAU,YACV0D,IAAKU,GAEL,wBAAGpE,UAAU,kBACb,+BAAOoE,W,4BCyBnB,MAGMswC,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GAwOjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAQ8mB,KAAMC,GAAc/mB,EAAO6mB,OAE3BY,QAASqxB,GAAoB94C,EAAOwnB,aAAe,GAE3D,IAAKsxB,EACH,MAAO,CACL/xB,UAAAA,GAIJ,MAAM,cACJ1I,EADI,SACWzc,EADX,aACqB+1C,GACvB33C,GACE,eACJ+4C,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyC/5B,GAC3Clf,EAAOm3C,cACH/uB,QAAS8wB,EAAezxB,QAAS0xB,GAAkBH,GAAiB,IACpE5wB,QAASgxB,EAAc3xB,QAAS4xB,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2B33C,EAG7C,MAAO,CACLyc,cAAAA,EACAy6B,gBAAAA,EACAM,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACAl6B,SATeC,MAAAA,GAAH,UAAGA,EAAe1Y,YAAlB,aAAG,EAAqByY,SAUpCs6B,uBAAAA,EACAxyB,UAAAA,EACAgyB,eAAAA,EACApB,aAAAA,KAlCc53C,EAtO2B,IAKzC,IAL0C,YAC9C83C,EAD8C,WACjCW,EADiC,gBACrBgB,EADqB,cACJn7B,EADI,gBAE9Cy6B,EAF8C,aAE7BM,EAF6B,aAEfC,EAFe,cAEDH,EAFC,cAEcC,EAFd,SAG9Cl6B,EAH8C,uBAGpCs6B,EAHoC,UAGZxyB,EAHY,eAGDgyB,EAHC,aAGepB,EAHf,QAI9CP,EAJ8C,mBAIrCqC,GACL,EACJ,MAAM,SACJxiB,EADI,uBACMqgB,EADN,qBAC8BoC,EAD9B,sBACoDC,IACtDn4C,EAAAA,EAAAA,MAGEo4C,GAAmBt8C,EAAAA,EAAAA,IAAuB,OAEhDm6C,EAAAA,GAAAA,GAAoBmC,EAAiBn8C,aAAS9C,GAAW,GAEzD,MAAMqH,GAAOC,EAAAA,EAAAA,MAEN43C,EAAqBC,IAA0BjzC,EAAAA,EAAAA,KAAkB,IACjEkzC,EAAsBC,IAA2BnzC,EAAAA,EAAAA,KAAkB,GAEpE0sC,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAM,OACNw2C,MAAOpC,SAIZ,CAACF,EAAc+B,EAAsB7B,IAElCqC,GAAkBx4C,EAAAA,EAAAA,KACrB1J,IACCi/B,EAAS,CAAEj/B,GAAAA,EAAI0/C,sBAAsB,IAEjC1/C,IAAOqmB,GACTi5B,EAAuB,CAAEt/C,GAAAA,IAGtBiN,EAAAA,IACHmyC,MAGJ,CAAC/4B,EAAe4Y,EAAUqgB,EAAwBF,IAG9C+C,GAAwBz4C,EAAAA,EAAAA,KAAa1J,IACzC2hD,EAAsB,CAAE3hD,GAAAA,MACvB,CAAC2hD,IAEEV,GAAeh9C,EAAAA,EAAAA,KAAQ,KAC3B,IAAK47C,GAAgBA,EAAYuC,WAAW,MAAQvC,EAAY1+C,OAAS,EACvE,OAAOkhD,GAAAA,EAGT,MAAMC,EAAmB,IACnBj8B,EAAgB,CAACA,GAAiB,MAClCy6B,GAAmB,IAGnB5wB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9ByzB,GAAkB5xB,EAAAA,EAAAA,IACtB2xB,EAAkBpyB,EAAW2vB,EAAax5B,EAAerc,EAAK,kBAGhE,MAAO,KACFymB,EAAAA,EAAAA,KAAYT,EAAAA,GAAAA,IAAO,IAChBuyB,GAAmB,MACnBnB,GAAgB,MAChBC,GAAgB,KAClBtyB,OAAWpsB,EAAW0jB,EAAgB,CAACA,QAAiB1jB,MAE7D,CAACk9C,EAAax5B,EAAey6B,EAAiB92C,EAAMo3C,EAAcC,EAActyB,IAE7EiyB,GAAgB/8C,EAAAA,EAAAA,KAAQ,KACvB47C,GAAeA,EAAY1+C,OAhFO,IAgFyC+/C,IAAkBC,EACzFkB,GAAAA,GAGF5xB,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IAAIkxB,KAAkBC,IAC7BpyB,GACA,IAED,CAACA,EAAWmyB,EAAeC,EAAetB,IAEvC2C,GAAgBv+C,EAAAA,EAAAA,KAAQ,KACtB47C,GAAgBW,IAAgBv5B,GAAgC,IAApBA,EAAS9lB,OAIpD8lB,EACJpd,KAAK7J,IAAO,MACX,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAErC,OAAOlB,MAAAA,GAAP,UAAOA,EAAyB/4C,UAAhC,aAAO,EAAkCsmB,KAAK6L,OAAOzV,OAEtDwK,OAAOhsB,SACPg/C,MAAK,CAACC,EAAGC,IAAMA,EAAEz8B,KAAOw8B,EAAEx8B,OAVpBk8B,GAAAA,GAWR,CAACp7B,EAAUs6B,EAAwB1B,EAAaW,IAE7CqC,GAA2Bn5C,EAAAA,EAAAA,KAAY,KAC3Co4C,GAAwBD,KACvB,CAACA,IAEEiB,GAA4Bp5C,EAAAA,EAAAA,KAAY,KAC5Cs4C,GAAyBD,KACxB,CAACA,IAmBEgB,EAAehC,IAAmBA,EAAelyB,QAAUkyB,EAAen3C,WAC1Eq3C,EAAa9/C,SAAW6/C,EAAc7/C,SAAWqhD,EAAcrhD,OAErE,OAAK0+C,GAAgBW,EAKnB,mBAACvyB,GAAA,EAAD,CACE7jB,UAAU,2BACV8jB,MAAOs0B,EACPr0B,WAAYotB,EAEZyH,sBAAoB,EACpBC,YAAU,GAETzB,GACC,0BAAKp3C,UAAU,4CACb,mBAAC,GAAD,CACEo2C,WAAYgB,EACZlE,SAAUmE,KAIfsB,GACC,mBAACG,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBtG,QAAQu9C,EAAa9/C,SACpB,0BACEiJ,UAAU,2CACVsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,EAC1BkQ,IAAK+uC,GAEJX,EAAap3C,KAAK7J,GACjB,mBAACmjD,GAAA,EAAD,CACEC,aAAcpjD,EACdyK,QAAS03C,EACTkB,SAAUrjD,OAKjB0D,QAAQu9C,EAAa9/C,SACpB,0BAAKiJ,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsF,IAAK1F,EAAK8a,MAAQ,YAASniB,GACxDs+C,EAAa9/C,OAlLK,GAmLjB,mBAAC00C,GAAA,EAAD,CAAMzrC,UAAU,OAAOK,QAASo4C,GAC7B74C,EAAK63C,EAAsB,2BAA6B,6BAG5D73C,EAAK,oCAEPi3C,EAAap3C,KAAI,CAAC7J,EAAImsB,KACrB,GAAK01B,KAAuB11B,GA1LT,GA8LnB,OACE,mBAAC,GAAD,CACE3jB,OAAQxI,EACRyK,QAASy3C,QAMlBx+C,QAAQs9C,EAAc7/C,SACrB,0BAAKiJ,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsF,IAAK1F,EAAK8a,MAAQ,YAASniB,GACxDq+C,EAAc7/C,OA1MI,GA2MjB,mBAAC00C,GAAA,EAAD,CAAMzrC,UAAU,OAAOK,QAASq4C,GAC7B94C,EAAK+3C,EAAuB,2BAA6B,6BAG7D/3C,EAAK,mCAEPg3C,EAAcn3C,KAAI,CAAC7J,EAAImsB,KACtB,GAAK41B,KAAwB51B,GAlNV,GAsNnB,OACE,mBAAC,GAAD,CACE3jB,OAAQxI,EACRk+C,cAAY,EACZzzC,QAASy3C,QAMlBx+C,QAAQ8+C,EAAcrhD,SACrB,0BAAKiJ,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsF,IAAK1F,EAAK8a,MAAQ,YAASniB,GAAYqH,EAAK,mBAC3Ew4C,EAAc34C,KAlHvB,SAA4BjJ,GAC1B,MAAM4N,GAAO8xC,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,GAClC0H,EAAOymB,EAAUnuB,EAAQ4H,QAE/B,GAAKgG,GAASlG,EAId,OACE,mBAAC,GAAD,CACEE,OAAQ5H,EAAQ4H,OAChB5H,QAASA,EACTi/C,YAAaA,SASV,mBAAC,GAAD,CAAgBT,QAASA,QC1J9BN,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GA0FjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ8mB,KAAMC,GAAc/mB,EAAO6mB,OAC7B,cAAExI,EAAezc,UAAY03C,SAAUC,GAAvC,aAAiE5B,GAAiB33C,GAClF,eAAE+4C,EAAF,cAAkB75B,GAAkBlf,EAAOm3C,cAE3C,SAAEl4B,IAAcC,MAAAA,OAAD,EAACA,EAAe1Y,OAAS,GAE9C,MAAO,CACL6X,cAAAA,EACAY,SAAAA,EACAs6B,uBAAAA,EACAxyB,UAAAA,EACAgyB,eAAAA,EACApB,aAAAA,KAdc53C,EAxFkC,IAUhD,IAViD,YACrD83C,EADqD,cAErDx5B,EAFqD,gBAGrDm7B,EAHqD,SAIrDv6B,EAJqD,uBAKrDs6B,EALqD,UAMrDxyB,EANqD,eAOrDgyB,EAPqD,aAQrDpB,EARqD,mBASrD8B,GACI,EACJ,MAAM,qBAAEC,IAAyBl4C,EAAAA,EAAAA,MAE3BQ,GAAOC,EAAAA,EAAAA,KACPsxC,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAM,OACNw2C,MAAOpC,EACPr3C,OAAQ6d,SAIb,CAACA,EAAes5B,EAAc+B,EAAsB7B,IAEjD2C,GAAgBv+C,EAAAA,EAAAA,KAAQ,IACvBgjB,GAAgC,IAApBA,EAAS9lB,OAInB8lB,EACJpd,KAAK7J,IAAO,MACX,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAErC,OAAOlB,MAAAA,GAAP,UAAOA,EAAyB/4C,UAAhC,aAAO,EAAkCsmB,KAAK6L,OAAOzV,OAEtDwK,OAAOhsB,SACPg/C,MAAK,CAACC,EAAGC,IAAMA,EAAEz8B,KAAOw8B,EAAEx8B,OAVpBk8B,GAAAA,GAWR,CAACp7B,EAAUs6B,IAmBRwB,EAAehC,IAAmBA,EAAelyB,QAAUkyB,EAAen3C,WAAa44C,EAAcrhD,OAE3G,OACE,0BAAKiJ,UAAU,cACb,mBAAC6jB,GAAA,EAAD,CACE7jB,UAAU,yCACV8jB,MAAOs0B,EACPr0B,WAAYotB,EACZ0H,YAAU,GAETzB,GACC,0BAAKp3C,UAAU,4CACb,mBAAC,GAAD,CACEo2C,WAAYgB,EACZlE,SAAUmE,KAIfsB,GACC,mBAACG,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBw4C,EAAc34C,KAzCrB,SAA4BjJ,GAC1B,MAAM4N,GAAO8xC,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,GAClC0H,EAAOymB,EAAUnuB,EAAQ4H,QAE/B,GAAKgG,GAASlG,EAId,OACE,mBAAC,GAAD,CACEE,OAAQ5H,EAAQ4H,OAChB5H,QAASA,EACTi/C,YAAaA,aCnEd,SAASyD,GAAsB73C,GACpC,MAAO,CAACzD,EAAqBwS,KAAe,QAC1C,MAAQsU,KAAMC,GAAc/mB,EAAO6mB,OAC3BC,KAAMoB,GAAcloB,EAAOmoB,OAC7B,eACJ4wB,EADI,cACY75B,EADZ,OAC2B1e,GAC7BR,EAAOm3C,aAKL7Y,EAAuB,UAAT76B,EAAmBA,EAAQ+O,MAAAA,GAAAA,EAAO+oC,QAAU,QAAU,SAElEjC,SAAUC,GAA2Bv5C,EAAO4B,SAC9Cqd,EAAWC,MAAAA,GAAH,UAAGA,EAAgBof,UAAnB,aAAG,EAA8Brf,SAEzCu8B,EAAkBx7C,EAAOw7C,gBAAgBlC,SAE/C,MAAO,CACL/iB,OAAOC,EAAAA,EAAAA,IAAYx2B,GACnBy7C,eAAwB9gD,IAAbskB,KACL85B,GAAiBr9C,QAAQq9C,EAAelyB,OAASkyB,EAAen3C,UACtEmlB,UAAAA,EACAmB,UAAAA,EACAqxB,uBAAAA,EACAt6B,SAAAA,EACAy8B,aAAcl7C,EACdg7C,gBAAAA,EACAp4C,gBAAiB5C,EAAM,WAAGD,EAAAA,EAAAA,IAAWP,EAAQQ,UAAtB,aAAG,EAA4B0C,iBAAcvI,EACpEg9C,aAAc33C,EAAO23C,e,uCCtB3B,MAAMgE,GAAe,QAGf7E,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GAqHjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBu7C,GAAsBK,IADJ57C,EAnH4B,IAQ1C,IAR2C,YAC/C83C,EAD+C,aAE/C6D,EAF+C,UAG/CD,EAH+C,uBAI/ClC,EAJ+C,SAK/Ct6B,EAL+C,aAM/C04B,EAN+C,gBAO/Cv0C,GACI,EACJ,MAAM,qBACJs2C,EADI,gBAEJt6B,IACE5d,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC0E,GAAOC,EAAAA,EAAAA,MAEL25C,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS3nC,EACT4nC,WAzB0B,MA4BtBzI,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAMk4C,GACN1B,MAAOpC,EACPr3C,OAAQk7C,SAIb,CAAC/D,EAAc+B,EAAsB7B,EAAa6D,IAE/ClB,GAAgBv+C,EAAAA,EAAAA,KAAQ,IACvBgjB,GAAas6B,EAIXt6B,EAASpd,KAAK7J,IAAO,MAC1B,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAErC,iBAAOlB,EAAuB/4C,UAA9B,aAAO,EAAgCsmB,KAAK6L,OAAOzV,OAClDwK,OAAOhsB,SAPD2+C,GAAAA,GAQR,CAACd,EAAwBt6B,IAEtBg9B,GAAoBv6C,EAAAA,EAAAA,KAAY,CAAC1J,EAAYwI,KACjD4e,EAAgB,CACd5e,OAAAA,EACAlG,QAAStC,EACT1B,OAAQe,EAAAA,GAAAA,iBAET,CAAC+nB,IA6BE88B,GAAoBC,EAAAA,GAAAA,GAAkB,CAACtE,GAAcuE,EAAAA,KAA+BX,EACpFY,EAAcH,GAAqBj9B,GAAYA,EAAS9lB,OAAS,IAAM0+C,EACvEyE,EAAgBJ,GAAqBj9B,GAAYA,EAAS9lB,OAAS,GAAK0+C,EAExEvwC,GAAaC,EAAAA,EAAAA,GACjB,+BACA+0C,GAAiB,aAGnB,OACE,0BAAKzxC,IAAKuJ,EAAchS,UAAU,cAChC,mBAAC6jB,GAAA,EAAD,CACE7jB,UAAWkF,EACX4e,MAAOs0B,EACP+B,aAAe1E,EAAyB,YAAX,SAC7B1xB,WAAYotB,EACZ0H,YAAU,IAERiB,GAAqB,mBAACt1B,GAAA,EAAD,MACtBs1B,KAAuBj9B,GAAgC,IAApBA,EAAS9lB,SAC3C,mBAAC+hD,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBq6C,GAlDH,0BAAKj6C,UAAU,aAAasF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACnD6/C,EAAc34C,KAAKjJ,GAClB,mBAAC4jD,GAAA,EAAD,CACE12C,IAAKlN,EAAQZ,GACbykD,SAAS,eACT7jD,QAASA,EACTsK,YAAaE,GAAmBxK,EAAQsK,YACxCw5C,oBAAqBb,EACrBp5C,QAASw5C,OA2CZK,GAnCE9B,EAAc34C,KAAKjJ,GACxB,mBAAC,GAAD,CACEkN,IAAKlN,EAAQZ,GACbwI,OAAQ5H,EAAQ4H,OAChB5H,QAASA,Y,yBCnFjB,MAAM+iD,GAAe,QAGf7E,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GA2GjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBu7C,GAAsBK,IADJ57C,EAzG2B,IAUzC,IAV0C,YAC9C83C,EAD8C,aAE9C6D,EAF8C,UAG9CD,EAH8C,UAI9C10B,EAJ8C,UAK9CmB,EAL8C,uBAM9CqxB,EAN8C,SAO9Ct6B,EAP8C,aAQ9C04B,EAR8C,gBAS9Cv0C,GACI,EACJ,MAAM,qBACJs2C,EADI,aAEJj8B,IACEjc,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC0E,GAAOC,EAAAA,EAAAA,MAEL25C,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS3nC,EACT4nC,WA3B0B,MA8BtBzI,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAMk4C,GACN1B,MAAOpC,EACPr3C,OAAQk7C,SAIb,CAAC/D,EAAc+B,EAAsB7B,EAAa6D,IAE/ClB,GAAgBv+C,EAAAA,EAAAA,KAAQ,IACvBgjB,GAAas6B,EAIXt6B,EAASpd,KAAK7J,IAAO,MAC1B,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAErC,iBAAOlB,EAAuB/4C,UAA9B,aAAO,EAAgCsmB,KAAK6L,OAAOzV,OAClDwK,OAAOhsB,SAPD2+C,GAAAA,GAQR,CAACd,EAAwBt6B,IAEtB09B,GAAqBj7C,EAAAA,EAAAA,KAAY,CAACwb,EAAmB1c,KACzDid,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAAA,MACtB,CAACO,IA8BEy+B,GAAoBC,EAAAA,GAAAA,GAAkB,CAACtE,GAAcuE,EAAAA,KAA+BX,EAE1F,OACE,0BAAK5wC,IAAKuJ,EAAchS,UAAU,cAChC,mBAAC6jB,GAAA,EAAD,CACE7jB,UAAU,8CACV8jB,MAAOs0B,EACPr0B,WAAYotB,EACZ0H,YAAU,IAERiB,GAAqB,mBAACt1B,GAAA,EAAD,MACtBs1B,KAAuBj9B,GAAgC,IAApBA,EAAS9lB,SAC3C,mBAAC+hD,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBk6C,GAAqBj9B,GAAYA,EAAS9lB,OAAS,GA5CjDqhD,EAAc34C,KAAI,CAACjJ,EAASurB,KACjC,MAAMy4B,EAAkC,IAAVz4B,IACzB04B,EAAAA,GAAAA,IAAYjkD,EAAQulB,SAAU0+B,EAAAA,GAAAA,IAAYrC,EAAcr2B,EAAQ,GAAGhG,MACxE,OACE,0BACE/b,UAAU,sBACVsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,EAC1BmL,IAAKlN,EAAQZ,IAEZ4kD,GACC,wBAAGx6C,UAAU,kBAAkBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,IACtDmiD,EAAAA,GAAAA,IAAmB96C,EAAM,IAAIkV,KAAoB,IAAfte,EAAQulB,QAG/C,mBAAC4+B,GAAA,EAAD,CACEj3C,IAAKlN,EAAQZ,GACbY,QAASA,EACTilB,aAAam/B,EAAAA,GAAAA,GAAch7C,EAAMpJ,EAASmuB,EAAWmB,GACrDhlB,YAAaE,GAAmBxK,EAAQsK,YACxCw5C,oBAAqBb,EACrBoB,eAAgBN,c,gBC9E5B,MAAMhB,GAAe,YAGf7E,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GA4GjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBu7C,GAAsBK,IADJ57C,EA1G2B,IAUzC,IAV0C,YAC9C83C,EAD8C,aAE9C6D,EAF8C,UAG9CD,EAH8C,UAI9C10B,EAJ8C,UAK9CmB,EAL8C,uBAM9CqxB,EAN8C,SAO9Ct6B,EAP8C,gBAQ9Cu8B,EAR8C,aAS9C7D,GACI,EACJ,MAAM,qBACJ+B,EADI,aAEJj8B,IACEjc,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC0E,GAAOC,EAAAA,EAAAA,MAEL25C,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS3nC,EACT4nC,WA3B0B,MA8BtBzI,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAMk4C,GACN1B,MAAOpC,EACPr3C,OAAQk7C,SAIb,CAAC/D,EAAc+B,EAAsB7B,EAAa6D,IAE/ClB,GAAgBv+C,EAAAA,EAAAA,KAAQ,IACvBgjB,GAAas6B,EAIXt6B,EAASpd,KAAK7J,IAAO,MAC1B,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAC/B7hD,EAAO,UAAG2gD,EAAuB/4C,UAA1B,aAAG,EAAgCsmB,KAAK6L,OAAOzV,IAE5D,OAAOtkB,IAAW2G,EAAAA,EAAAA,IAAmB3G,GAAWA,OAAU+B,KACzD+sB,OAAOhsB,SARD2+C,GAAAA,GASR,CAACd,EAAwBt6B,IAEtB09B,GAAqBj7C,EAAAA,EAAAA,KAAY,CAACwb,EAAmB1c,KACzDid,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAAA,MACtB,CAACO,IA8BEy+B,GAAoBC,EAAAA,GAAAA,GAAkB,CAACtE,GAAcuE,EAAAA,KAA+BX,EAE1F,OACE,0BAAK5wC,IAAKuJ,EAAchS,UAAU,cAChC,mBAAC6jB,GAAA,EAAD,CACE7jB,UAAU,8CACV8jB,MAAOs0B,EACPr0B,WAAYotB,EACZ0H,YAAU,IAERiB,GAAqB,mBAACt1B,GAAA,EAAD,MACtBs1B,KAAuBj9B,GAAgC,IAApBA,EAAS9lB,SAC3C,mBAAC+hD,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBk6C,GAAqBj9B,GAAYA,EAAS9lB,OAAS,GA5CjDqhD,EAAc34C,KAAI,CAACjJ,EAASurB,KAAU,MAC3C,MAAMy4B,EAAkC,IAAVz4B,IACzB04B,EAAAA,GAAAA,IAAYjkD,EAAQulB,SAAU0+B,EAAAA,GAAAA,IAAYrC,EAAcr2B,EAAQ,GAAGhG,MACxE,OACE,0BACE/b,UAAU,sBACV0D,IAAKlN,EAAQZ,IAEZ4kD,GACC,wBAAGx6C,UAAU,oBAAmB06C,EAAAA,GAAAA,IAAmB96C,EAAM,IAAIkV,KAAoB,IAAfte,EAAQulB,QAE5E,mBAAC++B,GAAA,EAAD,CACEtkD,QAASA,EACTukD,UAAQ,EACRC,SAAUxkD,EAAQulB,KAClBk/B,SAAO,EACP//B,QAAQ0/B,EAAAA,GAAAA,GAAch7C,EAAMpJ,EAASmuB,EAAWmB,GAChD9lB,UAAU,cACVY,cAAa,UAAEw4C,EAAgB5iD,EAAQ4H,eAA1B,aAAE,EAAiCvI,SAASW,EAAQZ,IACjE0kD,oBAAqBb,EACrByB,YAAaX,c,gBCrFzB,MAAM7F,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GA+GjD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBu7C,GAAsB,SADJv7C,EA7G4B,IAY1C,IAZ2C,MAC/Cw2B,EAD+C,QAE/CglB,EAF+C,YAG/C1D,EAH+C,aAI/C6D,EAJ+C,UAK/CD,EAL+C,UAM/C10B,EAN+C,UAO/CmB,EAP+C,uBAQ/CqxB,EAR+C,SAS/Ct6B,EAT+C,aAU/C04B,EAV+C,gBAW/C6D,GACI,EACJ,MAAM,qBACJ9B,EADI,aAEJj8B,EAFI,gBAGJ8/B,IACE/7C,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,KACPq8B,EAAcid,EAAU,QAAU,QAClChI,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFogC,GAAgBpgC,IAAco8B,EAAAA,GAAAA,WAChCmD,IAAa,KACX4C,EAAqB,CACnBj2C,KAAM66B,EACN2b,MAAOpC,EACPr3C,OAAQk7C,SAIb,CAACpd,EAAaqZ,EAAc+B,EAAsB7B,EAAa6D,IAE5DlB,GAAgBv+C,EAAAA,EAAAA,KAAQ,IACvBgjB,GAAas6B,EAIXt6B,EAASpd,KAAK7J,IAAO,MAC1B,MAAOwI,EAAQ0c,GAAallB,EAAGyiD,MAAM,KAErC,iBAAOlB,EAAuB/4C,UAA9B,aAAO,EAAgCsmB,KAAK6L,OAAOzV,OAClDwK,OAAOhsB,SAPD2+C,GAAAA,GAQR,CAACd,EAAwBt6B,IAEtB09B,GAAqBj7C,EAAAA,EAAAA,KAAY,CAACwb,EAAmB1c,KACzDid,EAAa,CAAEjd,OAAAA,EAAQ0c,UAAAA,MACtB,CAACO,IAEE+/B,GAAkB97C,EAAAA,EAAAA,KAAY,CAACwb,EAAmB1c,KACtD+8C,EAAgB,CAAE/8C,OAAAA,EAAQ0c,UAAAA,MACzB,CAACqgC,IAmCErB,GAAoBC,EAAAA,GAAAA,GAAkB,CAACtE,GAAcuE,EAAAA,KAA+BX,EAE1F,OACE,0BAAKr5C,UAAU,cACb,mBAAC6jB,GAAA,EAAD,CACE7jB,UAAU,8CACV8jB,MAAOs0B,EACPr0B,WAAYotB,EACZ0H,YAAU,IAERiB,GAAqB,mBAACt1B,GAAA,EAAD,MACtBs1B,KAAuBj9B,GAAgC,IAApBA,EAAS9lB,SAC3C,mBAAC+hD,GAAA,EAAD,CACE10C,KAAMxE,EAAK,6BACXs9B,YAAat9B,EAAK,0CAGrBk6C,GAAqBj9B,GAAYA,EAAS9lB,OAAS,GAjDjDqhD,EAAc34C,KAAI,CAACjJ,EAASurB,KAAU,QAC3C,MAAMy4B,EAAkC,IAAVz4B,IACzB04B,EAAAA,GAAAA,IAAYjkD,EAAQulB,SAAU0+B,EAAAA,GAAAA,IAAYrC,EAAcr2B,EAAQ,GAAGhG,MACxE,OACE,0BACE/b,UAAU,sBACV0D,IAAKlN,EAAQZ,IAEZ4kD,GACC,wBAAGx6C,UAAU,kBAAkBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,IACtDmiD,EAAAA,GAAAA,IAAmB96C,EAAM,IAAIkV,KAAoB,IAAfte,EAAQulB,QAG/C,mBAACs/B,GAAA,GAAD,CACE33C,IAAKlN,EAAQZ,GACbu+B,MAAOA,EACP39B,QAASA,EACTtC,OAAQonD,EAAAA,GAAAA,OACR7/B,aAAam/B,EAAAA,GAAAA,GAAch7C,EAAMpJ,EAASmuB,EAAWmB,GACrD/J,KAAMvlB,EAAQulB,KACdw5B,aAAcA,EACdv1C,UAAU,cACVyP,OAAQ2rC,EACRF,YAAaX,EACbpM,cAAa,UAACxpB,EAAUnuB,EAAQ4H,eAAnB,OAAC,EAA2B0C,aAAgBtK,EAAQsK,aACjEF,cAAa,UAAEw4C,EAAgB5iD,EAAQ4H,eAA1B,aAAE,EAAiCvI,SAASW,EAAQZ,gBCvEvE2lD,GAAO,CACX,CAAEl6C,KAAMm6C,EAAAA,GAAAA,SAA8Bv7C,MAAO,uBAC7C,CAAEoB,KAAMm6C,EAAAA,GAAAA,MAA2Bv7C,MAAO,mBAC1C,CAAEoB,KAAMm6C,EAAAA,GAAAA,MAA2Bv7C,MAAO,mBAC1C,CAAEoB,KAAMm6C,EAAAA,GAAAA,MAA2Bv7C,MAAO,mBAC1C,CAAEoB,KAAMm6C,EAAAA,GAAAA,MAA2Bv7C,MAAO,mBAC1C,CAAEoB,KAAMm6C,EAAAA,GAAAA,MAA2Bv7C,MAAO,oBAGtCw7C,GAAY,CAChB,CAAEp6C,KAAMm6C,EAAAA,GAAAA,SAA8Bv7C,MAAO,mBAC1Cs7C,GAAKnb,MAAM,IAGVsb,GAA0BtlD,OAAO87C,KAAKsJ,EAAAA,IAAqBzkD,OAAS,EAkG1E,IAAe2G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAE+9C,EAAF,OAAkBv9C,GAAWR,EAAOm3C,aAE1C,MAAO,CAAE4G,eAAAA,EAAgBv9C,OAAAA,KAJTT,EAhG0B,IAOxC,IAPyC,YAC7C83C,EAD6C,WAE7CW,EAF6C,SAG7C/lC,EAH6C,eAI7CsrC,EAAiBH,EAAAA,GAAAA,SAJ4B,OAK7Cp9C,EAL6C,QAM7C42C,GACI,EACJ,MAAM,uBACJ4G,EADI,oBAEJC,IACEz8C,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACNi8C,EAAWC,IAAgBt3C,EAAAA,EAAAA,IAASk3C,GACrCvE,GAAkBv9C,EAAAA,EAAAA,KAAQ,KAAMmiD,EAAAA,GAAAA,IAAgBvG,IAAc,CAACA,IAE/DwG,GAAkB38C,EAAAA,EAAAA,KAAayiB,IACnC,MAAMm6B,EAAMX,GAAKx5B,GACjB65B,EAAuB,CAAEhnC,QAASsnC,EAAI76C,OACtC06C,EAAah6B,KACZ,CAAC65B,IAEEO,GAAyB78C,EAAAA,EAAAA,KAAa2J,IAC1C4yC,EAAoB,CAAE9/B,KAAM9S,EAAM6lB,UAAY,QAC7C,CAAC+sB,KAEJroC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIV,MAAMhjC,GAAe9W,EAAAA,EAAAA,IAAuB,MACtC2a,GAAgByN,EAAAA,GAAAA,GAA0BtR,EAAc3B,OAAU9X,EAAW,oBAAoB,GAEvG,OACE,0BAAKyH,UAAU,aAAayI,IAAKuJ,EAAcyR,UAAW5N,GACxD,mBAACumC,GAAA,EAAD,CAASN,UAAWA,EAAWO,KAAMj+C,EAASq9C,GAAYF,GAAMe,YAAaL,IAC7E,mBAAC95B,EAAA,EAAD,CACEE,KAAMziB,EAAK8a,MAAQ,sBAAwB,kBAC3C6hC,YAAab,GACbt5B,UAAWu5B,GAEV,MACC,OAAQA,GACN,KAAKH,EAAAA,GAAAA,SACH,OAAIp9C,EAEA,mBAAC,GAAD,CACEq3C,YAAaA,EACb2B,gBAAiBA,EACjBpC,QAASA,EACTqC,mBAAoB8E,IAKxB,mBAAC,GAAD,CACE1G,YAAaA,EACbW,WAAYA,EACZgB,gBAAiBA,EACjBpC,QAASA,EACTqC,mBAAoB8E,IAG1B,KAAKX,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAc/F,YAAaA,IACpC,KAAK+F,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAa/F,YAAaA,IACnC,KAAK+F,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAa/F,YAAaA,IACnC,KAAK+F,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACE93C,IAAI,QACJ+xC,YAAaA,IAGnB,KAAK+F,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACE93C,IAAI,QACJy1C,SAAO,EACP1D,YAAaA,IAGnB,QACE,SA5CL,S,gBCjFT,MAAM+G,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAjzB,KAEA,OAAQA,EAAOxoB,MACb,IAAK,qBACH,MAAO,IACFy7C,EACHL,gBAAiB5yB,EAAOkzB,SAG5B,IAAK,cACH,MAAO,IACFD,EACHJ,SAAU7yB,EAAOkzB,SAGrB,IAAK,UACH,MAAO,IACFD,EACHH,KAAM9yB,EAAOkzB,SAGjB,IAAK,WACH,MAAO,IACFD,EACHF,MAAO/yB,EAAOkzB,SAGlB,IAAK,QACH,OAAOP,GAET,QACE,OAAOM,ICyOb,IAAep/C,EAAAA,EAAAA,KAvQsB,IAM/B,IANgC,cACpCs/C,EADoC,eAEpCC,EAFoC,QAGpCjI,EAHoC,aAIpCkI,EAJoC,eAKpCC,GACI,EACJ,MAAM,QACJC,EADI,0BAEJC,IACEj+C,EAAAA,EAAAA,OAEGk+C,EAAqBC,IAA0B94C,EAAAA,EAAAA,KAAS,GAEzD+4C,ECnCO,SAAuBhX,EAAgBiX,GACpD,MAAMC,GAAmBxiD,EAAAA,EAAAA,IAAO,GAC1Bc,GAAad,EAAAA,EAAAA,MAkBnB,OAjBoBoE,EAAAA,EAAAA,KAAY,KAE9B,GADAo+C,EAAiBriD,UD+BoB,IC9BjCqiD,EAAiBriD,QAGnB,OAFAqiD,EAAiBriD,QAAU,OAC3BoiD,IAIEzhD,EAAWX,SACbc,aAAaH,EAAWX,SAG1BW,EAAWX,QAAUsB,YAAW,KAC9B+gD,EAAiBriD,QAAU,IAlBX,OAoBjB,CDiBoC,ECjB3BoiD,IDiBaE,CAAc,GAAG,KACxCR,EAAeS,EAAAA,GAAAA,iBAGXC,GAA0Bv+C,EAAAA,EAAAA,KAAY,KAC1Ci+C,GAAuB,KACtB,IAEGO,GAA2Bx+C,EAAAA,EAAAA,KAAY,KAC3Ci+C,GAAuB,KACtB,IAEGQ,GAA+Bz+C,EAAAA,EAAAA,KAAY,KAC1C29C,GAELI,EAA0B,CAAEW,SAAUf,MACrC,CAACA,EAAgBI,IAEdY,GAAuB3+C,EAAAA,EAAAA,KAAY,KACvCw+C,IACAV,MACC,CAACU,EAA0BV,IAExBc,GAAsErkD,EAAAA,EAAAA,KAAQ,IAC3E,QAAC,UAAE4I,EAAF,OAAa3D,GAAd,SACL,mBAACoB,EAAA,EAAD,CACEwC,OAAK,EACLmG,QAAShG,EAAAA,GACTtG,KAAK,UACL4D,MAAM,cACNH,UAAWlB,EAAS,SAAW,GAC/BuB,QAASoC,EACTE,UAAU,gBAEV,wBAAG3C,UAAU,iBAGhB,IAEGJ,GAAOC,EAAAA,EAAAA,KA0Lb,OACE,0BAAKG,UAAU,eACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAAS20C,EACTryC,UAAW/C,EAAK,mBAEhB,wBAAGI,UAAU,qBAjMnB,WACE,OAAQg9C,GACN,KAAKY,EAAAA,GAAAA,YACH,OAAO,6BAAKh+C,EAAK,6BACnB,KAAKg+C,EAAAA,GAAAA,QACH,OAAO,6BAAKh+C,EAAK,YACnB,KAAKg+C,EAAAA,GAAAA,cACH,OAAO,6BAAKh+C,EAAK,qBACnB,KAAKg+C,EAAAA,GAAAA,YACH,OAAO,6BAAKh+C,EAAK,UACnB,KAAKg+C,EAAAA,GAAAA,cACH,OAAO,6BAAKh+C,EAAK,kBACnB,KAAKg+C,EAAAA,GAAAA,YACH,OAAO,6BAAKh+C,EAAK,iBACnB,KAAKg+C,EAAAA,GAAAA,QACH,OAAO,6BAAKh+C,EAAK,oBACnB,KAAKg+C,EAAAA,GAAAA,SACH,OAAO,6BAAKh+C,EAAK,aACnB,KAAKg+C,EAAAA,GAAAA,SACH,OAAO,6BAAKh+C,EAAK,iBACnB,KAAKg+C,EAAAA,GAAAA,aACH,OAAO,6BAAKh+C,EAAK,8BAEnB,KAAKg+C,EAAAA,GAAAA,sBACH,OAAO,6BAAKh+C,EAAK,mBACnB,KAAKg+C,EAAAA,GAAAA,2BACH,OAAO,6BAAKh+C,EAAK,aAEnB,KAAKg+C,EAAAA,GAAAA,mBACH,OAAO,6BAAKh+C,EAAK,iBACnB,KAAKg+C,EAAAA,GAAAA,gBACH,OAAO,6BAAKh+C,EAAK,oBACnB,KAAKg+C,EAAAA,GAAAA,oBACH,OAAO,6BAAKh+C,EAAK,yBACnB,KAAKg+C,EAAAA,GAAAA,kBACH,OAAO,6BAAKh+C,EAAK,oBACnB,KAAKg+C,EAAAA,GAAAA,qBACH,OAAO,6BAAKh+C,EAAK,yBACnB,KAAKg+C,EAAAA,GAAAA,kBACH,OAAO,6BAAKh+C,EAAK,2BACnB,KAAKg+C,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAKh+C,EAAK,oBACnB,KAAKg+C,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAKh+C,EAAK,mBAEnB,KAAKg+C,EAAAA,GAAAA,eACH,OAAO,6BAAKh+C,EAAK,kBACnB,KAAKg+C,EAAAA,GAAAA,eACH,OAAO,6BAAKh+C,EAAK,qBACnB,KAAKg+C,EAAAA,GAAAA,oBACH,OAAO,6BAAKh+C,EAAK,iBAEnB,KAAKg+C,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAKh+C,EAAK,wBACnB,KAAKg+C,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAKh+C,EAAK,+BACnB,KAAKg+C,EAAAA,GAAAA,wBACH,OAAO,6BAAKh+C,EAAK,0BACnB,KAAKg+C,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAKh+C,EAAK,iBACnB,KAAKg+C,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAKh+C,EAAK,uBACnB,KAAKg+C,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAKh+C,EAAK,mCACnB,KAAKg+C,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAKh+C,EAAK,+BAEnB,KAAKg+C,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAKh+C,EAAK,aAEnB,KAAKg+C,EAAAA,GAAAA,gBACH,OAAO,6BAAKh+C,EAAK,qCAEnB,KAAKg+C,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACH,OAAO,6BAAKh+C,EAAK,oCAEnB,KAAKg+C,EAAAA,GAAAA,8BACH,OAAO,6BAAKh+C,EAAK,mDAEnB,KAAKg+C,EAAAA,GAAAA,QACH,OAAO,6BAAKh+C,EAAK,YACnB,KAAKg+C,EAAAA,GAAAA,oBACH,OAAO,6BAAKh+C,EAAK,cACnB,KAAKg+C,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAK59C,UAAU,wBACb,6BAAKJ,EAAK,eAETq9C,GACC,mBAAC35C,EAAA,EAAD,CACEtD,UAAU,qBACVuD,QAAS26C,EACT16C,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUR,KAAK,SAASu3B,aAAW,EAACn6B,QAAS09C,GAC1Cn+C,EAAK,aAMlB,KAAKg+C,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAK59C,UAAU,wBACXg9C,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,iCACnB,6BAAKh+C,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACM,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNH,UAAU,gBACVK,QAAS68C,EACTv6C,UAAW/C,EAAK,sBAEhB,wBAAGI,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBAEb,yBAAIK,QAASm9C,GACV59C,EAAK,aAGR,mBAACM,EAAA,EAAD,CACEwC,OAAK,EACLmG,QAAShG,EAAAA,GACTtG,KAAK,UACL4D,MAAM,cAENE,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,aAC9Bj7C,UAAW/C,EAAK,6BAEhB,wBAAGI,UAAU,eAEf,mBAACsD,EAAA,EAAD,CACEtD,UAAU,qBACVuD,QAAS26C,EACT16C,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUR,KAAK,SAAS5C,QAASw9C,GAA0Bj+C,EAAK,mBAkBvEu+C,GACD,mBAAC5zB,GAAA,EAAD,CACEzrB,OAAQw+C,EACRr+C,QAAS6+C,EACT15C,KAAMxE,EAAK,mBACX4qB,aAAc5qB,EAAK,0BACnB6qB,eAAgBwzB,EAChBtiB,sBAAoB,Q,uCE7P5B,MA4HA,IAAej+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEqe,EAAF,aAAiBs5B,GAAiB33C,EAExC,MAAO,CACLwgD,aAAcxgD,EAAOygD,eAAeC,cAAcvnD,OAClD4zB,YAAa1O,GAAgBzd,EAAAA,EAAAA,IAAWZ,EAAQqe,QAAiB1jB,EACjEg9C,aAAAA,EACAlJ,gBAAgBC,EAAAA,EAAAA,IAA+B1uC,MARjCD,EA5H4B,IAQ1C,IAR2C,SAC/C0S,EAD+C,eAE/C8sC,EAF+C,QAG/CnI,EAH+C,YAI/CrqB,EAJ+C,aAK/CyzB,EAL+C,aAM/C7I,EAN+C,cAO/ClJ,GACI,EACJ,MAAM,kBACJkS,EADI,mBAEJC,EAFI,iBAGJhU,IACEprC,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,KACPU,EAAYoqB,MAAAA,OAAH,EAAGA,EAAa/0B,GAmB/B,OAjBAwG,EAAAA,EAAAA,KAAU,KACJmE,GAAag1C,GACfgJ,EAAkB,CAAEh+C,UAAAA,MAErB,CAACg1C,EAAch1C,EAAWg+C,KAE7B/qC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,KAGV54C,EAAAA,EAAAA,KAAU,KACJm5C,GACFiJ,MAED,CAACjJ,EAAciJ,IAGhB,0BAAKx+C,UAAU,kCACb,0BAAKA,UAAU,sBACZ2qB,GACC,mBAAC8zB,GAAA,EAAD,CACEn6B,OAAQqG,EAAY/0B,GACpB8oD,aAAcplD,QAAQ+W,GACtBsuC,eAAa,IAGhBh0B,GACC,mBAACi0B,GAAA,EAAD,CACE5F,aAAcruB,EAAY/0B,GAC1B+oD,eAAa,IAGjB,mBAACx6B,GAAA,EAAD,CACElhB,KAAK,WAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,UAE7Bh+C,EAAK,2CAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,SAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,gBAE7Bh+C,EAAK,kBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,OAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,cAE7Bh+C,EAAK,iBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,OAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,UAE7Bh+C,EAAK,oBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,SAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,UAE7Bh+C,EAAK,YAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,kBAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,iBAE7Bh+C,EAAK,iBACLw+C,EAAe,GAAM,2BAAMp+C,UAAU,gCAAgCo+C,IAExE,mBAACj6B,GAAA,EAAD,CACElhB,KAAK,WAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,WAE7Bh+C,EAAK,YACN,2BAAMI,UAAU,gCAAgCJ,EAAKi/C,WAEvD,mBAAC16B,GAAA,EAAD,CACElhB,KAAK,WAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,WAE7Bh+C,EAAK,iBAEPysC,GACC,mBAACloB,GAAA,EAAD,CACE26B,YAAa,mBAACC,GAAA,EAAD,CAAaC,cAAY,EAACC,KAAG,IAC1Cj/C,UAAU,6BAEVK,QAAS,IAAMmqC,KAEd5qC,EAAK,0B,4BCzHlB,MAEMs/C,GAAoB,sBACpBC,GAAiB,yBAEjBC,IAA+BnqC,EAAAA,GAAAA,KAAU0/B,GAAOA,KAAM,KAAK,GAwFjE,IAAej3C,EAAAA,EAAAA,KAhFqB,IAO9B,IAP+B,gBACnC2hD,EADmC,OAEnCC,EAFmC,UAGnCjG,EAHmC,oBAInCkG,EAJmC,gBAKnCC,EALmC,SAMnCt2C,GACI,EACJ,MAAM,cAAEu2C,EAAF,gBAAiBC,IAAoBtgD,EAAAA,EAAAA,OACpCugD,EAAUC,IAAen7C,EAAAA,EAAAA,IAAS46C,GAAmB,IAEtDz/C,GAAOC,EAAAA,EAAAA,KACPggD,EAAaP,EAAS,SAAW,WACjCzzB,EAAiBjsB,EAAT0/C,EAAc,oBAA4B,YAElDQ,GAA8BjtC,EAAAA,EAAAA,GAAY0sC,GAC1CQ,EAA+BV,IAAoBM,EACpDJ,MAAAA,EAAAA,EAAuBO,OAA+BvnD,EACrDynD,EAAaL,GAAYN,IAAoBM,GAAYH,IAAoBG,GAE5EM,EAAiBC,IAAiBrmD,EAAAA,EAAAA,KAAQ,IAC1C8lD,EAAS5oD,OAIV4oD,EAAS5oD,OAtCW,EAuCf,MAACwB,EAAWqH,EAAM,GAAEigD,kBAEzBF,EAAS5oD,OAxCW,GAyCf,MAACwB,EAAWqH,EAAM,GAAEigD,iBAExBV,GAAegB,KAAKR,QAIYpnD,IAAjCwnD,GAA8CC,EACzC,GAIF,CACLD,EAA+BngD,EAAM,GAAEigD,aAAuBh0B,QAAStzB,GACtC,IAAjCwnD,EAAyCngD,EAAM,GAAEigD,eAAqBtnD,GAV/D,MAACA,EAAWqH,EAAM,GAAEigD,aAVpB,IAsBR,CAACF,EAAUI,EAA8BC,EAAYpgD,EAAMigD,EAAYh0B,KAE1EzvB,EAAAA,EAAAA,KAAU,KACRwjD,EAAYP,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMe,GAAuB9gD,EAAAA,EAAAA,KAAa8F,IACxC,MAAMi7C,EAAcj7C,EAAEwQ,OAAO3M,MAAMsuB,OAAOlH,QAAQ6uB,GAAmB,IACrEU,EAAYS,GAEZ,MAAMC,EA5DV,SAAyBX,GACvB,OAAOA,EAAS5oD,QARU,GASrB4oD,EAAS5oD,QARY,IASrBooD,GAAegB,KAAKR,GAyDPY,CAAgBF,GAC3BC,IAELp3C,MAAAA,GAAAA,EAAWm3C,GAEXjB,IAA6B,KACvBiB,IAAgBhB,IACJC,EAASI,EAAkBD,GACnC,CAAEE,SAAUU,UAGrB,CAACf,EAAQI,EAAiBD,EAAeJ,EAAiBn2C,IAE7D,OACE,mBAACsa,GAAA,EAAD,CACEva,MAAQ,GAAEq2C,EAAS1oB,EAAAA,GAAkB,KAAK+oB,IAC1Cz2C,SAAUk3C,EACVv0B,MAAOm0B,EAAapgD,EAAK,YAAcisB,EACvC7D,MAAOk4B,EACPM,QAASP,EACTQ,SAAUpH,EACVqH,2BAAyB,OCQ/B,IAAehjD,EAAAA,EAAAA,KAxFgB,IAsBzB,IAtB0B,IAC9B+K,EAD8B,GAE9B7S,EAF8B,UAG9BoK,EAH8B,MAI9BiJ,EAJ8B,MAK9B4iB,EAL8B,MAM9B7D,EAN8B,QAO9Bw4B,EAP8B,SAQ9B92C,EAR8B,SAS9B+2C,EAT8B,YAU9B/8B,EAV8B,aAW9Bi9B,EAX8B,UAY9BxvB,EAZ8B,UAa9BgN,EAb8B,mBAc9ByiB,EAd8B,SAe9B3vB,EAf8B,SAgB9B/nB,EAhB8B,QAiB9B23C,EAjB8B,WAkB9BC,EAlB8B,UAmB9Br9B,EAnB8B,OAoB9B4N,EApB8B,QAqB9B0vB,GACI,EAEAC,GAAc9lD,EAAAA,EAAAA,IAA4B,MAC1CuN,IACFu4C,EAAcv4C,GAGhB,MAAM7I,GAAOC,EAAAA,EAAAA,KACPohD,EAAYj5B,GAASw4B,GAAW30B,EAChCq1B,GAAgB/7C,EAAAA,EAAAA,GACpB,cACA8D,GAAS,UACT+e,EAAQ,QAAUw4B,GAAW,UAC7B92C,GAAY,WACZ+2C,GAAY,WACZQ,GAAa,aACbjhD,IAGF5D,EAAAA,EAAAA,KAAU,KACR,MAAM+kD,EAAWH,EAAY3lD,QACxB8lD,IACLA,EAAS7qD,MAAMqF,OAAS,IACxBwlD,EAAS7qD,MAAMqF,OAAU,GAAEwlD,EAASxc,oBACnC,IAEH,MAAMqF,GAAe1qC,EAAAA,EAAAA,KAAa8F,IAChCA,EAAE+I,cAAclF,MAAQ7D,EAAE+I,cAAclF,MAAMonB,QAAQ,KAAM,IAC5DjrB,EAAE+I,cAAc7X,MAAMqF,OAAS,IAC/ByJ,EAAE+I,cAAc7X,MAAMqF,OAAU,GAAEyJ,EAAE+I,cAAcw2B,iBAClDz7B,MAAAA,GAAAA,EAAW9D,KACV,CAAC8D,IAEJ,OACE,0BAAKlJ,UAAWkhD,EAAe57C,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACvD,+BACEkQ,IAAKu4C,EACLhhD,UAAU,eACVpK,GAAIA,EACJ0P,IAAI,OACJ2D,MAAOA,GAAS,GAChBgoB,SAAUA,EACVvN,YAAaA,EACbya,UAAWA,EACXwiB,aAAcA,EACdxvB,UAAWA,EACXznB,SAAUA,EACV+2C,SAAUA,EACVv3C,SAAU8gC,EACV6W,QAASA,EACTC,WAAYA,EACZr9B,UAAWA,EACX4N,OAAQA,EACR0vB,QAASA,EACT,aAAYE,IAEbA,GACC,4BAAOG,QAASxrD,GAAKqrD,GAEtBL,GACC,0BAAK5gD,UAAU,wBAAwB4gD,OCrEzClM,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAO,GAE7C0M,GAA2B,iCAmNjC,IAAe3jD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEqe,GAAkBre,GACpB,SAAEgG,EAAF,oBAAY27C,EAAZ,gBAAiCC,GAAoB5hD,EAAO0jD,aAAe,GAC3E32B,EAAc1O,GAAgBzd,EAAAA,EAAAA,IAAWZ,EAAQqe,QAAiB1jB,EAElEgpD,GAAeC,EAAAA,GAAAA,GAAmB5jD,EAAQ,eAEhD,IAAK+sB,EACH,MAAO,CACL/mB,SAAAA,EACA47C,gBAAAA,EACAD,oBAAAA,EACAgC,aAAAA,GAIJ,MACE9uB,UAAWgvB,EACX9uB,SAAU+uB,EACV/B,SAAUN,EAHN,SAIJ/U,GACE3f,GACIg3B,IAAKC,GAAetX,GAAY,GAGxC,MAAO,CACLuX,mBAHwB7nD,EAAAA,EAAAA,IAAkB2wB,GAI1C82B,iBAAAA,EACAC,gBAAAA,EACAE,WAAAA,EACAvC,gBAAAA,EACAz7C,SAAAA,EACA27C,oBAAAA,EACAC,gBAAAA,EACA+B,aAAAA,KAnCc5jD,EAjNmC,IAYjD,IAZkD,SACtD0S,EADsD,kBAEtDwxC,EAFsD,iBAGtDJ,EAHsD,gBAItDC,EAJsD,WAKtDE,EALsD,gBAMtDvC,EANsD,SAOtDz7C,EAPsD,gBAQtD47C,EARsD,oBAStDD,EATsD,aAUtDgC,EAVsD,QAWtDvM,GACI,EACJ,MAAM,gBACJ8M,EADI,cAEJC,IACE3iD,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAENmiD,EAAmBC,IAAwBx9C,EAAAA,EAAAA,KAAS,IACpDy9C,EAAwBC,IAA6B19C,EAAAA,EAAAA,KAAS,IAC9DujB,EAAOo6B,IAAY39C,EAAAA,EAAAA,OAEnBpM,EAAOgqD,IAAY59C,EAAAA,EAAAA,OACnBguB,EAAWC,IAAgBjuB,EAAAA,EAAAA,IAASg9C,GAAoB,KACxD9uB,EAAUC,IAAenuB,EAAAA,EAAAA,IAASi9C,GAAmB,KACrDC,EAAKW,IAAU79C,EAAAA,EAAAA,IAASm9C,GAAc,KACtCjC,EAAUC,IAAen7C,EAAAA,EAAAA,IAAyB46C,GAAmB,IAEtEkD,GAAuBpoD,EAAAA,EAAAA,GAAS0nD,GAAmB,EAAOznD,EAAAA,GAAAA,SAE1Di/C,EAAYz1C,IAAa4+C,EAAAA,GAAAA,WACzBC,GAA+B,IAAb9C,EAElBG,GAA8BjtC,EAAAA,EAAAA,GAAY0sC,GAC1CQ,EAA+BR,MAAAA,EAAAA,EAAuBO,EAEtD4C,GAAoB7oD,EAAAA,EAAAA,KAAQ,KAC5B4oD,IAIGnpD,QAAQjB,IAAU6pD,GAA2BF,IAAsD,IAAjCjC,IACxE,CAAC0C,EAAiBpqD,EAAO6pD,EAAwBF,EAAmBjC,KAEvEvsC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,KAKV54C,EAAAA,EAAAA,KAAU,KACRs4C,IAAa,KACXoN,SAED,CAACA,KAEJ1lD,EAAAA,EAAAA,KAAU,KACRimD,OAAS9pD,KACR,CAACgqD,KAEJnmD,EAAAA,EAAAA,KAAU,KACRs2B,EAAa+uB,GAAoB,IACjC7uB,EAAY8uB,GAAmB,IAC/BY,EAAOV,GAAc,MACpB,CAACH,EAAkBC,EAAiBE,KAEvCxlD,EAAAA,EAAAA,KAAU,KACRwjD,EAAYP,GAAmB,MAC9B,CAACA,KAEJjjD,EAAAA,EAAAA,KAAU,KACJwH,IAAa4+C,EAAAA,GAAAA,WACfL,GAA0B,GAC1BF,GAAqB,GACrBG,OAAS7pD,MAEV,CAACqL,IAEJ,MAAM++C,GAAoBrjD,EAAAA,EAAAA,KAAasjD,IACrCP,EAASO,KACR,IAEGxvB,GAAwB9zB,EAAAA,EAAAA,KAAa8F,IACzCstB,EAAattB,EAAEwQ,OAAO3M,OACtBk5C,GAA0B,KACzB,IAEG5uB,GAAuBj0B,EAAAA,EAAAA,KAAa8F,IACxCwtB,EAAYxtB,EAAEwQ,OAAO3M,OACrBk5C,GAA0B,KACzB,IAEGU,GAAkBvjD,EAAAA,EAAAA,KAAa8F,IACnCk9C,EAAOl9C,EAAEwQ,OAAO3M,OAChBk5C,GAA0B,KACzB,IAEG/B,GAAuB9gD,EAAAA,EAAAA,KAAa2J,IACxC22C,EAAY32C,GACZg5C,EAAqB5C,IAAoBp2C,KACxC,CAACo2C,IAEEyD,GAAoBxjD,EAAAA,EAAAA,KAAY,KACpC,MAAMyjD,EAAmBtwB,EAAU8E,OAC7ByrB,EAAkBrwB,EAAS4E,OAC3B0rB,EAAatB,EAAIpqB,OAElBwrB,EAAiBhsD,OAKtBgrD,EAAc,CACZ1pD,MAAAA,KACI6pD,GAA0B,CAC5BzvB,UAAWswB,EACXpwB,SAAUqwB,EACVrB,IAAKsB,MAEHjB,GAAqB,CACvBrC,SAAAA,KAZFyC,EAASf,MAeV,CACDhpD,EACAo6B,EAAWE,EAAUgvB,EAAKO,EAC1BvC,EAAUqC,EACVD,IAGF,OACE,0BAAK/hD,UAAU,wBACb,0BAAKA,UAAU,4CACb,0BAAKA,UAAU,uCACb,mBAACkjD,GAAA,EAAD,CACEX,qBAAsBA,EACtBr5C,SAAUy5C,EACV1iD,MAAM,0BACNyJ,SAAU2vC,IAEZ,mBAAC71B,GAAA,EAAD,CACEva,MAAOwpB,EACPvpB,SAAUkqB,EACVvH,MAAOjsB,EAAK,aACZ8J,SAAU2vC,EACVrxB,MAAOA,IAAUq5B,GAA2Br5B,OAAQzvB,IAEtD,mBAACirB,GAAA,EAAD,CACEva,MAAO0pB,EACPzpB,SAAUqqB,EACV1H,MAAOjsB,EAAK,YACZ8J,SAAU2vC,IAEZ,mBAAC,GAAD,CACEpwC,MAAO04C,EACPz4C,SAAU25C,EACVh3B,MAAOjsB,EAAK,WACZ8J,SAAU2vC,EACVlb,UAAWojB,EACXX,mBAAoBW,GAAgBA,EAAeI,EAAI5qD,QAAQ0uC,gBAAaltC,IAG9E,wBAAGyH,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,IAChE+H,EAAAA,EAAAA,GAAWV,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,aAEhF,mBAAC,GAAD,CACEy/C,gBAAiBA,EACjBhG,UAAWA,EACXkG,oBAAqBA,EACrBC,gBAAiBA,EACjBt2C,SAAUk3C,IAGZ,wBAAGpgD,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,IAChE+H,EAAAA,EAAAA,GAAWV,EAAK,gBAAiB,CAAC,KAAM,qBAE1C+/C,GACC,wBAAG3/C,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChEqH,EAAK,qBAAqB,8BAC3B,2BAAMI,UAAU,iBAAiB42B,EAAAA,GAAiB+oB,MAM1D,mBAACwD,GAAA,EAAD,CACEl8B,QAASy7B,EACTriD,QAASyiD,EACTp5C,SAAU2vC,EACV12C,UAAW/C,EAAK,SAEfy5C,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,qBCjEvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ4rB,EAAAA,GAAAA,IAAK5rB,EAAOod,SAASC,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,kBACA,oBACA,2BAjBctd,EArJmC,IAkBjD,IAlBkD,SACtD0S,EADsD,QAEtD2kC,EAFsD,6BAGtDoO,EAHsD,+BAItDC,EAJsD,yBAKtDC,EALsD,2BAMtDC,EANsD,6BAOtDC,EAPsD,+BAQtDC,EARsD,yBAStDC,EATsD,2BAUtDC,EAVsD,4BAWtDC,EAXsD,8BAYtDC,EAZsD,wBAatDC,EAbsD,0BActDC,EAdsD,gBAetDC,EAfsD,kBAgBtDC,EAhBsD,sBAiBtDC,GACI,EACJ,MAAM,iBAAEC,IAAqB/kD,EAAAA,EAAAA,MAEvBQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMoP,GAAyB9kD,EAAAA,EAAAA,KAAa2J,GACnCrJ,EAAK,4BAA6BA,EAAK,cAAeitB,OAAOw3B,EAAAA,GAAgCp7C,IAAS,OAC5G,CAACrJ,IAEE0kD,GAAuBhlD,EAAAA,EAAAA,KAAa2J,IACxCk7C,EAAiB,CAAED,sBAAuBG,EAAAA,GAAgCp7C,OACzE,CAACk7C,IAEEI,GAA8BjlD,EAAAA,EAAAA,KAAa2J,IAC/Ck7C,EAAiB,CAAEH,gBAAiB/6C,MACnC,CAACk7C,IAEEK,GAAgCllD,EAAAA,EAAAA,KAAa2J,IACjDk7C,EAAiB,CAAEF,kBAAmBh7C,MACrC,CAACk7C,IAmBJ,SAASM,EACPxkD,EACAyD,EACAghD,EACAC,EACAC,EACAC,GAEA,OACE,0BAAK7kD,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAY0H,GAE3E,mBAAC0rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,iCACZgsB,QAAS84B,EAGT34B,QAAU+4B,GAAcX,EAAiB,CAAE,CAAE,cAAazgD,iBAAoBohD,MAEhF,mBAACn5B,GAAA,EAAD,CACEE,MAAOjsB,EAAK,qCACZgsB,QAAS+4B,EAET54B,QAAU+4B,GAAcX,EAAiB,CAAE,CAAE,cAAazgD,mBAAsBohD,MAElF,mBAACn5B,GAAA,EAAD,CACEE,MAAOjsB,EAAK,mCACZgsB,QAASg5B,EAET74B,QAAU+4B,GAAcX,EAAiB,CAAE,CAAE,cAAazgD,aAAgBohD,MAE5E,mBAACn5B,GAAA,EAAD,CACEE,MAAOjsB,EAAK,iCACZgsB,QAASi5B,EAET94B,QAAU+4B,GAAcX,EAAiB,CAAE,CAAE,cAAazgD,eAAkBohD,MAGrE,SAARphD,GAvDP,WACE,MAAMuF,EAAQo7C,EAAAA,GAAAA,QAAwCH,GAEtD,OACE,0BAAKlkD,UAAU,QACb,mBAAC+I,GAAA,EAAD,CACE8iB,MAAOjsB,EAAK,2BACZoI,IAAK,EACLD,IAAK,EACLkB,OAAkB,IAAXA,EAAeA,EAAQ,EAC9B87C,YAAaX,EACbl7C,SAAUo7C,KA4COU,IAKzB,OACE,0BAAKhlD,UAAU,kCACZykD,EACC7kD,EAAK,2BACL,QACAwjD,EACAC,EACAC,EACAC,GAEDkB,EACC7kD,EAAK,2BACL,QACA4jD,EACAC,EACAC,EACAC,GAEDc,EACC,sBACA,OACAb,EACAC,EACAC,EACAC,GAGF,0BAAK/jD,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,kBAEhF,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,YACZgsB,QAASo4B,EACTj4B,QAASw4B,IAEX,mBAAC54B,GAAA,EAAD,CACEE,MAAOjsB,EAAK,kCACZgsB,QAASq4B,EACTl4B,QAASy4B,U,4CChJnB,MAAMS,GAAqB,CAAE9yC,EAAG,EAAGC,EAAG,GA0ItC,IAAe1U,EAAAA,EAAAA,KAxIiB,IAQ1B,IAR2B,SAC/BwF,EAD+B,GAE/BtN,EAF+B,OAG/B0S,EAH+B,UAI/B48C,EACA5uD,MAAO6uD,EALwB,UAM/BC,EAN+B,WAO/BtpD,GACI,EACJ,MAAM8D,GAAOC,EAAAA,EAAAA,KAEP4I,GAAMvN,EAAAA,EAAAA,IAAuB,OAE5B4hD,EAAOuI,IAAY5gD,EAAAA,EAAAA,IAAyB,CACjD6gD,YAAY,EACZpxD,OAAQ+wD,GACRM,YAAaN,KAGTO,EAAmBpgD,IAA2C,QAClEA,EAAEC,kBACFD,EAAE0J,iBACF,MAAM,EAAEqD,EAAF,EAAKC,GAAMqzC,GAAoBrgD,GAErCigD,EAAS,IACJvI,EACHwI,YAAY,EACZpxD,OAAQ,CAAEie,EAAAA,EAAGC,EAAAA,GACb9W,MAAK,UAAEmN,EAAIpN,eAAN,aAAE,EAAaqqD,YACpB/pD,OAAM,UAAE8M,EAAIpN,eAAN,aAAE,EAAarF,gBAInB2vD,GAAkBrmD,EAAAA,EAAAA,KAAa8F,IACnC,MAAM,EAAE+M,EAAF,EAAKC,GAAMqzC,GAAoBrgD,GAE/BmgD,EAAc,CAClBpzC,EAAGA,EAAI2qC,EAAM5oD,OAAOie,EACpBC,EAAGA,EAAI0qC,EAAM5oD,OAAOke,GAGtBizC,GAAUhqD,IAAD,IACJA,EACHkqD,YAAAA,MAGFj9C,EAAOi9C,EAAa3vD,KACnB,CAACA,EAAI0S,EAAQw0C,EAAM5oD,OAAOie,EAAG2qC,EAAM5oD,OAAOke,IAEvCwzC,GAAgBtmD,EAAAA,EAAAA,KAAY,KAChCihB,uBAAsB,KACpB8kC,GAAUhqD,IAAD,IACJA,EACHiqD,YAAY,EACZhqD,WAAO/C,EACPoD,YAAQpD,MAGV2sD,SAED,CAACA,KAEJ9oD,EAAAA,EAAAA,KAAU,KACJ0gD,EAAMwI,YAAcxpD,GACtBupD,GAAUhqD,IAAD,IACJA,EACHiqD,YAAY,EACZhqD,WAAO/C,EACPoD,YAAQpD,QAGX,CAACuD,EAAYghD,EAAMwI,cAEtBlpD,EAAAA,EAAAA,KAAU,KACJ0gD,EAAMwI,YACR5oD,OAAOsI,iBAAiB,YAAa2gD,GACrCjpD,OAAOsI,iBAAiB,YAAa2gD,GACrCjpD,OAAOsI,iBAAiB,WAAY4gD,GACpClpD,OAAOsI,iBAAiB,cAAe4gD,GACvClpD,OAAOsI,iBAAiB,UAAW4gD,KAEnClpD,OAAOuI,oBAAoB,YAAa0gD,GACxCjpD,OAAOuI,oBAAoB,YAAa0gD,GACxCjpD,OAAOuI,oBAAoB,WAAY2gD,GACvClpD,OAAOuI,oBAAoB,cAAe2gD,GAC1ClpD,OAAOuI,oBAAoB,UAAW2gD,GAEtCP,GAAUhqD,IAAD,IACJA,EACHkqD,YAAaN,QAIV,KACDnI,EAAMwI,aACR5oD,OAAOuI,oBAAoB,YAAa0gD,GACxCjpD,OAAOuI,oBAAoB,YAAa0gD,GACxCjpD,OAAOuI,oBAAoB,WAAY2gD,GACvClpD,OAAOuI,oBAAoB,cAAe2gD,GAC1ClpD,OAAOuI,oBAAoB,UAAW2gD,OAGzC,CAACD,EAAiBC,EAAe9I,EAAMwI,aAE1C,MAAMpE,GAAgB/7C,EAAAA,EAAAA,GC5II,uBD4I6B23C,EAAMwI,YC5IC,wBD8IxDO,GAAYhsD,EAAAA,EAAAA,KAAQ,KACjBisD,EAAAA,GAAAA,GACJ,wBAAuBhJ,EAAMyI,YAAYpzC,QAAQ2qC,EAAMyI,YAAYnzC,OACpE0qC,EAAMxhD,MAAS,UAASwhD,EAAMxhD,eAAY/C,EAC1CukD,EAAMnhD,OAAU,WAAUmhD,EAAMnhD,gBAAapD,EAC7C4sD,IAED,CAACA,EAAerI,EAAMnhD,OAAQmhD,EAAMyI,YAAYpzC,EAAG2qC,EAAMyI,YAAYnzC,EAAG0qC,EAAMxhD,QAEjF,OACE,0BAAKhF,MAAOuvD,EAAW7lD,UAAWkhD,EAAez4C,IAAKA,GACnDvF,GAECpH,GACA,0BACE,aAAY8D,EAAK,mBACjBqxB,SAAU,EACVD,KAAK,SACLhxB,WAAWmF,EAAAA,EAAAA,GChKyE,uBDgK7C,kBACvC4gD,YAAaP,EACbQ,aAAcR,EACdlvD,MAAO8uD,GAEP,wBAAGplD,UAAU,YAAY,wBASnC,SAASylD,GAAoBrgD,GAC3B,IAAI+M,EACAC,EAUJ,MARI,YAAahN,GACf+M,EAAI/M,EAAE6S,QAAQ,GAAGrQ,QACjBwK,EAAIhN,EAAE6S,QAAQ,GAAG/K,UAEjBiF,EAAI/M,EAAEwC,QACNwK,EAAIhN,EAAE8H,SAGD,CAAEiF,EAAAA,EAAGC,EAAAA,GE3Id,MACM6zC,IAAiClhD,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAO,GA0SrE,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEi2C,WAAYqS,EACZxhC,KAAMyhC,EACNC,YAAaC,GACXzoD,EAAOg2C,YAEX,MAAO,CACLsS,UAAAA,EACAC,YAAAA,EACAhmB,WAAW8H,EAAAA,EAAAA,IAA2BrqC,GACtCyoD,uBAAAA,EACAC,YAAY9E,EAAAA,GAAAA,GAAmB5jD,EAAQ,oBAbzBD,EAxSmC,IAUjD,UAVkD,SACtD0S,EADsD,eAEtDk2C,EAFsD,aAGtDC,EAHsD,QAItDxR,EAJsD,UAKtDkR,EALsD,YAMtDC,EANsD,UAOtDhmB,EAPsD,uBAQtDkmB,EARsD,WAStDC,GACI,EACJ,MAAM,2BACJG,EADI,cAEJC,EAFI,sBAGJC,EAHI,0BAIJtJ,EAJI,gBAKJuJ,IACExnD,EAAAA,EAAAA,OAEG09C,EAAOuI,IAAY5gD,EAAAA,EAAAA,IAAoB,CAC5CoiD,iBAAkBX,EAClBY,aAAcZ,EACda,kBAAcxuD,IAGVyuD,GAAgBn0C,EAAAA,EAAAA,GAAYqzC,IAGlC9pD,EAAAA,EAAAA,KAAU,KACJ4qD,IAAkBd,GACpBb,EAAS,CACPwB,iBAAkBX,EAClBY,aAAcZ,EACda,kBAAcxuD,MAGjB,CAACyuD,EAAed,EAAhB,UAA2BpJ,EAAM+J,wBAAjC,aAA2B,EAAwB9vD,UAItDqF,EAAAA,EAAAA,KAAU,KACR6pD,IAA+B,KAC7BQ,SAED,CAACA,IAEJ,MAAMQ,GAAqB3nD,EAAAA,EAAAA,KAAY,KACjClJ,OAAO87C,KAAKiU,GAAapvD,QAAUuvD,EAAa,EAClDK,EAAsB,CACpBpuC,MAAO,kBAMXguC,MACC,CAACJ,EAAaG,EAAYC,EAAgBI,IAEvC/mD,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMkS,GAAuBC,EAAAA,GAAAA,MACvBC,GAAcvtD,EAAAA,EAAAA,KAAQ,KAC1B,GAAKqsD,EAIL,OAAIA,EAAUnvD,QAAU,EACfkhD,GAAAA,EAGFiO,EAAUzmD,KAAK7J,IACpB,MAAMyxD,EAASlB,EAAYvwD,GAE3B,OAAIA,IAAO0xD,EAAAA,GACF,CACL1xD,GAAAA,EACAqK,MAAOL,EAAK,mBAIT,CACLhK,GAAIyxD,EAAOzxD,GACXqK,MAAOonD,EAAOpnD,MACdsnD,UAAUC,EAAAA,EAAAA,IAAyB5nD,EAAMynD,EAAQH,EAAqBG,EAAOzxD,WAGhF,CAACswD,EAAWC,EAAavmD,EAAMsnD,IAE5BO,GAAoCnoD,EAAAA,EAAAA,KAAa+nD,IACjDjxD,OAAO87C,KAAKiU,GAAapvD,QAAUuvD,EAAa,EAClDK,EAAsB,CACpBpuC,MAAO,kBAMXmuC,EAAc,CAAEW,OAAAA,MACf,CAAClB,EAAaG,EAAYI,EAAeC,IAEtCe,GAAapoD,EAAAA,EAAAA,KAAY,CAACimD,EAAuC3vD,KAAe,QACpF,MAAMmkB,EAAQ5W,KAAKT,MAAM6iD,EAAYnzC,EA7GhB,IA8Gf2P,GAAQ,UAAA+6B,EAAM+J,wBAAN,eAAwB/oC,QAAQloB,KAAO,EAC/CkxD,EAAY,UAAGhK,EAAM+J,wBAAT,aAAG,EAAwBvhC,QAAQ04B,GAAaA,IAAapoD,IA8MnF,IAAiBuc,EAAwBpK,EA5MhC++C,IA4MQ30C,EA5MiB4P,EAAQhI,EAAO,EA4MRhS,GA5MWm+C,MAAAA,OAAA,EAAAA,EAAWnvD,SAAU,EA6MhEob,GA7MwC,GA6M5BA,GAAKpK,KAzMtB++C,EAAaa,OAAO5lC,EAAQhI,GAASomB,EAAY,EAAI,GAAI,EAAGvqC,GAC5DyvD,GAAUhqD,IAAD,IACJA,EACH0rD,aAAchlC,EACd+kC,aAAAA,SAED,CAACZ,MAAAA,OAAD,EAACA,EAAWnvD,OAAQopC,EAAW2c,EAAM+J,mBAElCe,GAAgBtoD,EAAAA,EAAAA,KAAY,KAChC+lD,GAAUhqD,IACRurD,EAAgB,CAAEV,UAAW7qD,EAAQyrD,eAE9B,IACFzrD,EACHwrD,iBAAkBxrD,EAAQyrD,aAC1BC,kBAAcxuD,QAGjB,CAACquD,IAEEiB,GAAqBhuD,EAAAA,EAAAA,KAAQ,KACzBsmC,GAAa/pC,OAAO87C,KAAKiU,GAAapvD,OAASuvD,EAAa,GACnE,CAACH,EAAahmB,EAAWmmB,IAE5B,OACE,0BAAKtmD,UAAU,4CACb,0BAAKA,UAAU,2BACb,mBAAC8nD,GAAA,EAAD,CACEvrD,KAAMwrD,EAAAA,GACNzoB,OAAQ6S,GAAAA,EAAAA,WACRnyC,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,QAC/C1F,EAAK,wBAGPioD,GACC,mBAAC3nD,EAAA,EAAD,CAEEF,UAAU,iBACVG,MAAM,UACN5D,KAAK,UACLyrD,MAAI,EACJpsB,OAAK,EACLv7B,QAAS4mD,EACTvsC,MAAO9a,EAAK8a,OAEZ,wBAAG1a,UAAU,aACZJ,EAAK,qBAKZ,0BAAKI,UAAU,sBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,YAErF,0BAAKI,UAAU,8BAA8B1J,MAAQ,WA9KpC,KA8K+C4vD,MAAAA,OAAA,EAAAA,EAAWnvD,SAAU,QAClFqwD,MAAAA,GAAAA,EAAarwD,OAASqwD,EAAY3nD,KAAI,CAAC4nD,EAAQ1pC,KAAM,YACpD,MAAMsqC,EAAYtqC,EAAI2oC,EAAa,EAC7B4B,EAAYpL,EAAMiK,eAAiBppC,EACnCwqC,EAlLO,IAkLM,oBAACrL,EAAM+J,wBAAP,aAAC,EAAwB/oC,QAAQupC,EAAOzxD,WAAxC,QAA+C,GAC5DuX,EAnLO,IAmLD,oBAAC2vC,EAAMgK,oBAAP,aAAC,EAAoBhpC,QAAQupC,EAAOzxD,WAApC,QAA2C,GAEvD,OAAIyxD,EAAOzxD,KAAO0xD,EAAAA,GAEd,mBAAC,GAAD,CACE5jD,IAAK2jD,EAAOzxD,GACZA,GAAIyxD,EAAOzxD,GACX0S,OAAQo/C,EACRxC,UAAW0C,EACXtxD,MAAQ,QAAO4xD,EAAYC,EAAah7C,OACxCi4C,WAAcxlD,EAAK8a,MAAQ,OAAS,SAAxB,cACZ5e,YAAaqkC,IAAc9vB,GAE3B,mBAAC8T,GAAA,EAAD,CACEzgB,IAAK2jD,EAAOzxD,GACZoK,UAAU,sCACVooD,QAAM,EACNC,UAAQ,EACRC,WAAS,EACTC,UAAQ,GAER,2BAAMvoD,UAAU,SACbqnD,EAAOpnD,OAEV,2BAAMD,UAAU,YAAYJ,EAAK,0BAOvC,mBAAC,GAAD,CACE8D,IAAK2jD,EAAOzxD,GACZA,GAAIyxD,EAAOzxD,GACX0S,OAAQo/C,EACRxC,UAAW0C,EACXtxD,MAAQ,QAAO4xD,EAAYC,EAAah7C,OACxCi4C,WAAcxlD,EAAK8a,MAAQ,OAAS,SAAxB,UACZ5e,WAAYmsD,IAAc53C,GAE1B,mBAAC8T,GAAA,EAAD,CACEnkB,UAAU,sCACVooD,QAAM,EACNI,cAAc,OACdF,WAAS,EACTpU,eAAgB,CACd,CACEuU,QAAS,KACPpL,EAA0B,CAAEW,SAAUqJ,EAAOzxD,MAE/C4kC,aAAa,EACbv6B,MAAOL,EAAK,UACZqD,KAAM,WAIV5C,QAAS,KACH4nD,EACFtB,EAAsB,CACpBpuC,MAAO,kBAGTiuC,EAAaL,EAAYkB,EAAOzxD,OAIpC,2BAAMoK,UAAU,UACbM,EAAAA,EAAAA,GAAW+mD,EAAOpnD,MAAO,CAAC,UAC1BgoD,GAAa,wBAAGjoD,UAAU,mDAE7B,2BAAMA,UAAU,YAAYqnD,EAAOE,eAItCH,IAAgBA,EAAYrwD,OAC/B,wBAAGiJ,UAAU,iCAAiCsF,IAAI,QAAlD,4BAGE,mBAACkf,GAAA,EAAD,QAIN6hC,GAA0B/sD,QAAQ+sD,EAAuBtvD,SACzD,0BAAKiJ,UAAU,sBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjEqH,EAAK,sBAGPymD,EAAuB5mD,KAAK4nD,GAC3B,mBAACljC,GAAA,EAAD,CACEnkB,UAAU,OACVooD,QAAM,EAEN/nD,QAAS,IAAMonD,EAAkCJ,IAEjD,0BAAKrnD,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,UAASM,EAAAA,EAAAA,GAAW+mD,EAAOpnD,MAAO,CAAC,WACnD,2BAAMD,UAAU,YAAYqnD,EAAOnqB,cAGrC,mBAACh9B,EAAA,EAAD,CACEF,UAAU,OACVG,MAAM,UACN5D,KAAK,OACLyrD,MAAI,EACJpsB,OAAK,EACLlhB,MAAO9a,EAAK8a,OAEX9a,EAAK,kB,gBC/TxB,MAyBA,GAzBqC,IAM/B,IANgC,MACpCohC,EADoC,SAEpC0nB,EAFoC,eAGpCC,EAHoC,UAIpCtP,EAJoC,QAKpCh5C,GACI,EACJ,MAAMT,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACK,EAAA,EAAD,CACEF,UAAU,iBACVG,MAAM,cACN5D,KAAK,UACL6D,QAAM,EACNi5C,UAAWA,EACX3+B,MAAO9a,EAAK8a,MACZra,QAASA,GAET,wBAAGL,UAAU,cATf,QAUQghC,EAVR,SAUqBA,EAAQ,EAAI2nB,GAAmB,GAAED,KAAcA,ICclEE,GAAiB,0CACjBC,GAAiB,8BAgPvB,IAAenrD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAmC,IAA1B,MAAEk/C,GAAwB,EACjC,MAAM,QAAEl4B,GAAYhnB,EAAO6mB,OACrB,KAAEC,GAAS9mB,EAAOg2C,YAExB,MAAO,CACLkV,oBAAqBlkC,EAAQG,OAC7BgkC,sBAAuBnkC,EAAQK,SAC/B+jC,eAA8BzwD,IAAnBukD,EAAMkB,WAA2Bt5B,EAAKo4B,EAAMkB,aARzCrgD,EA9OmC,IAWjD,IAXkD,MACtDm/C,EADsD,SAEtDmM,EAFsD,mBAGtDC,EAHsD,mBAItDC,EAJsD,SAKtD94C,EALsD,QAMtD2kC,EANsD,UAOtDgU,EAPsD,OAQtDv1C,EARsD,oBAStDq1C,EATsD,sBAUtDC,GACI,EACJ,MAAM,eACJK,EADI,cAEJ1C,IACEtnD,EAAAA,EAAAA,OAEGiqD,EAA6BC,IAAkC7kD,EAAAA,EAAAA,KAAS,IACxE8kD,EAA6BC,IAAkC/kD,EAAAA,EAAAA,KAAS,IAE/ErI,EAAAA,EAAAA,KAAU,KACJ4sD,GACFhU,MAED,CAACgU,EAAWhU,IAEf,MACEyU,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkB/M,EAAO,aAE3B2M,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkB/M,EAAO,aAE7B1gD,EAAAA,EAAAA,KAAU,KACRktD,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC1M,EAAMkB,WAEV,MAAOgM,EAAwBC,IAA0BpwD,EAAAA,EAAAA,KAAQ,KAC/D,MAAMqwD,EAAoB,IAAIC,IAAI,IAC5BrB,GAAuB,MACvBC,GAAyB,KAGzBqB,GAAwBC,EAAAA,GAAAA,IAAwBX,EAAiBQ,GACjEI,GAAwBD,EAAAA,GAAAA,IAAwBP,EAAiBI,GAEvE,MAAO,CACLb,EACIe,EACAA,EAAsBhqB,MAAM,EAzDV,EAyDmCwpB,EAAkB7yD,QAC3EwyD,EACIe,EACAA,EAAsBlqB,MAAM,EA5DV,EA4DmC2pB,EAAkBhzD,WAE5E,CACD+yD,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,IAGjBnpD,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAAA,IAGF,MAAMu2B,GAAe1qC,EAAAA,EAAAA,KAAasY,IAChC,MAAM,cAAEzJ,GAAkByJ,EAC1BqxC,EAAS,CAAE5nD,KAAM,WAAY07C,QAAS5uC,EAAclF,MAAMsuB,WACzD,CAAC0xB,IAEE94B,GAAe7wB,EAAAA,EAAAA,KAAY,KAC/B,MAAM,MAAEW,GAAU68C,EAAMuK,OAEnBpnD,EAKAypD,EAAgB3yD,QAAWX,OAAO87C,KAAK0X,GAAmB7yD,QAK/DkyD,EAAS,CAAE5nD,KAAM,eAAgB07C,SAAS,IACvB,SAAfD,EAAMyN,KACRnB,EAAe,CAAExzD,GAAIknD,EAAMkB,SAAUwM,aAAc1N,EAAMuK,SAEzDX,EAAc,CAAEW,OAAQvK,EAAMuK,SAGhC1qD,YAAW,KACTq4C,MAvGiB,MA2FjBiU,EAAS,CAAE5nD,KAAM,WAAY07C,QAAS8L,KALtCI,EAAS,CAAE5nD,KAAM,WAAY07C,QAAS6L,OAmBvC,CAAClC,EAAeuC,EAAUG,EAAgBM,EAAgB3yD,OAAQ6yD,EAAmB5U,EAAS8H,IAwBjG,SAAS2N,EAAYF,GACnB,MAAMZ,EAA6B,aAATY,EAAsBX,EAAoBG,EAC9DW,EAA0B,aAATH,EAAsBP,EAAyBC,EAEhEU,EAAsB,aAATJ,EAAsBlB,EAA8BE,EAEjEqB,GADsB,aAATL,EAAsBb,EAAkBI,GACzB/yD,OAAS4yD,EAAkB5yD,OAAS2zD,EAAe3zD,OAC/E8zD,EAAwB,aAATN,EACjB,IAAMjB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkBlqD,KAAKiE,GAnC9B,SAAwBA,EAAa6mD,GACnC,MAAMO,EAAoB,aAATP,EACbQ,GAAAA,GAAAA,MAAyB,QAAGrnD,IAAKsnD,GAAR,SAAsBA,IAAYtnD,KAC3DunD,GAAAA,GAAAA,MAAyB,QAAGvnD,IAAKsnD,GAAR,SAAsBA,IAAYtnD,KAE/D,GAAKonD,EAIL,OACE,mBAAC3mC,GAAA,EAAD,CACEzgB,IAAKonD,EAASpnD,IACd1D,UAAU,kCACViD,KAAM6nD,EAAS7nD,KACfmlD,QAAM,EACNC,UAAQ,GAEPzoD,EAAKkrD,EAAS7qD,QAkBiBirD,CAAexnD,EAAK6mD,KACnDG,EAAejrD,KAAK7J,GACnB,mBAACuuB,GAAA,EAAD,CACEnkB,UAAU,kCACVooD,QAAM,EACNC,UAAQ,IAEP/pD,EAAAA,EAAAA,IAAS1I,GACR,mBAACwuB,GAAA,EAAD,CAAiBmwB,WAAW,QAAQjwB,OAAQ1uB,IAE5C,mBAAC2uB,GAAA,EAAD,CAAegwB,WAAW,QAAQn2C,OAAQxI,QAI7C+0D,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACE5pB,MAAO4pB,EACPlC,SAAS,OAETroD,QAASwqD,KAOnB,OACE,0BAAK7qD,UAAU,wBACb,0BAAKA,UAAU,4CACb,0BAAKA,UAAU,2BACb,mBAAC8nD,GAAA,EAAD,CACEvrD,KAAMwrD,EAAAA,GACNzoB,OAAQ6S,GAAAA,EAAAA,WACR5S,KAAM1S,OAAOiwB,EAAMkB,UACnBh+C,UAAU,0BAGI,WAAf88C,EAAMyN,MACL,wBAAGvqD,UAAU,iCAAiCsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACrEqH,EAAK,sBAIV,mBAAC4jB,GAAA,EAAD,CACExjB,UAAU,OACV6rB,MAAOjsB,EAAK,kBACZqJ,MAAO6zC,EAAMuK,OAAOpnD,MACpBiJ,SAAU8gC,EACVhiB,MAAO80B,EAAM90B,OAAS80B,EAAM90B,QAAU4gC,GAAiBA,QAAiBrwD,KAI5E,0BAAKyH,UAAU,gCACZ88C,EAAM90B,OAAS80B,EAAM90B,QAAU6gC,IAC9B,wBAAG7oD,UAAU,8CAA8CsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAClFqH,EAAKk9C,EAAM90B,QAIhB,yBAAIhoB,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,kBAErF,mBAACukB,GAAA,EAAD,CACEnkB,UAAU,gDACViD,KAAK,MACL5C,QAAS6oD,GAERtpD,EAAK,mBAGP6qD,EAAY,aAGf,0BAAKzqD,UAAU,sBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,kBAErF,mBAACukB,GAAA,EAAD,CACEnkB,UAAU,gDACViD,KAAK,MACL5C,QAAS8oD,GAERvpD,EAAK,mBAGP6qD,EAAY,cAIjB,mBAACtH,GAAA,EAAD,CACEl8B,QAAS3tB,QAAQwjD,EAAMqO,WACvBzhD,SAAUozC,EAAMzD,UAChBh5C,QAAS8vB,EACTxtB,UAA0B,SAAfm6C,EAAMyN,KAAkB,eAAiB,iBAEnDzN,EAAMzD,UACL,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,qBC9DvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLwtD,UAAU5J,EAAAA,GAAAA,GAAmB5jD,EAAQ,yBAHvBD,EA9K0C,IAUxD,IAVyD,KAC7D4sD,EAD6D,QAE7DvkC,EAF6D,YAG7DqlC,EAH6D,kBAI7D1B,EAJ6D,YAK7D2B,EAL6D,oBAM7DC,EAN6D,0BAO7DC,EAP6D,eAQ7DC,EAR6D,SAS7DL,GACI,EACJ,MAAM,sBAAEzE,IAA0BvnD,EAAAA,EAAAA,MAE5BozB,GAAWt3B,EAAAA,EAAAA,IAAyB,MACpCwwD,EAAqB,aAATnB,EAAsBQ,GAAAA,GAAsBE,GAAAA,GACxDU,EAAiBN,EAAYt0D,OAAS4yD,EAAkB5yD,OAtBzC,IAwBrBqF,EAAAA,EAAAA,KAAU,KACRO,YAAW,KACT4jB,uBAAsB,KACpBiS,EAASn3B,QAAS83B,aA7BH,OAgClB,IAEH,MAAMy4B,GAAkBtsD,EAAAA,EAAAA,KAAa1J,IACnC,MAAMi2D,EAAiB,IAAIR,GAC3B,GAAIQ,EAAeh2D,SAASD,GAC1Bi2D,EAAelE,OAAOkE,EAAe/tC,QAAQloB,GAAK,OAC7C,CACL,GAAIy1D,EAAYt0D,QAAUq0D,GAAqB,aAATb,EAIpC,YAHA5D,EAAsB,CACpBpuC,MAAO,uBAIXszC,EAAe7oD,KAAKpN,GAEtB21D,EAAoBM,KACnB,CAACR,EAAaE,EAAqBH,EAAUb,EAAM5D,IAEhDmF,GAAsBxsD,EAAAA,EAAAA,KAAaoE,IACvC,MAAMqoD,EAAuB,IAAIpC,GAC7BoC,EAAqBl2D,SAAS6N,GAChCqoD,EAAqBpE,OAAOoE,EAAqBjuC,QAAQpa,GAAM,GAE/DqoD,EAAqB/oD,KAAKU,GAE5B8nD,EAA0BO,KACzB,CAACpC,EAAmB6B,IAEjBQ,GAAqB1sD,EAAAA,EAAAA,KAAa8F,IACtC,MAAM,MAAE6D,GAAU7D,EAAE+I,cACpBs9C,EAAexiD,KACd,CAACwiD,IAEE7rD,GAAOC,EAAAA,EAAAA,MAiENkjB,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB1qB,EAAWytB,EAAS1sB,QAAQgyD,IAE7E,OACE,0BAAKtrD,UAAU,qCACb,0BAAKA,UAAU,+BACZ2pD,EAAkBlqD,KApEzB,SAAgCiE,GAC9B,MAAMuoD,EAAeP,EAAUxmB,MAAK,QAAGxhC,IAAKsnD,GAAR,SAAsBtnD,IAAQsnD,KAClE,GAAKiB,EAIL,OACE,mBAAClT,GAAA,EAAD,CACE91C,KAAMgpD,EAAahpD,KACnBhD,MAAOL,EAAKqsD,EAAahsD,OACzBisD,YAAaP,EACbQ,UAAQ,EACR9rD,QAASyrD,EACT7S,SAAUgT,EAAavoD,SAwDtB2nD,EAAY5rD,KAAI,CAAC7J,EAAI+nB,IACpB,mBAACo7B,GAAA,EAAD,CACEC,aAAcpjD,EACds2D,YAAaP,GAAkBhuC,EAAI0tC,EAAYt0D,OAxI3B,EAyIpBo1D,UAAQ,EACR9rD,QAASurD,EACT3S,SAAUrjD,MAGd,mBAAC4tB,GAAA,EAAD,CACE/a,IAAK+pB,EACLvpB,MAAOqiD,EACPpiD,SAAU8iD,EACVtoC,YAAa9jB,EAAK,aAGtB,mBAACikB,GAAA,EAAD,CACE7jB,UAAU,4BACVm6C,aAAa,aACbr2B,MAAOf,EACPgB,WAAYf,KAETD,IAAgBA,EAAYhsB,QAAUgsB,EAAYltB,SAASmwB,EAAQ,MACpE,0BAAKtiB,IAAI,UACP,yBAAI1D,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,oBAEP8rD,EAAUjsD,KA9ErB,SAAwB4B,GACtB,OACE,mBAAC8iB,GAAA,EAAD,CACEzgB,IAAKrC,EAAKqC,IACV1D,UAAU,sDAEVK,QAAS,IAAMyrD,EAAoBzqD,EAAKqC,KACxCmF,QAAM,GAEN,wBAAG7I,UAAY,QAAOqB,EAAK4B,SAC3B,yBAAIjD,UAAU,YAAYsF,IAAI,QAAQ1F,EAAKyB,EAAKpB,QAChD,mBAAC0rB,GAAA,EAAD,CACEE,MAAM,GACND,QAAS+9B,EAAkB9zD,SAASwL,EAAKqC,KACzChB,OAAK,QAiEH,0BAAK1C,UAAU,wBACf,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,iBAKXmjB,MAAAA,GAAAA,EAAahsB,OACZgsB,EAAYtjB,KAnEpB,SAAoB7J,GAClB,MAAMw2D,EAAaf,EAAYx1D,SAASD,GAExC,OACE,mBAACuuB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,iDAEVK,QAAS,IAAMurD,EAAgBh2D,GAC/BiT,QAAM,IAELvK,EAAAA,EAAAA,IAAS1I,GACR,mBAACwuB,GAAA,EAAD,CAAiBE,OAAQ1uB,IAEzB,mBAAC2uB,GAAA,EAAD,CAAenmB,OAAQxI,EAAIy2D,cAAY,IAEzC,mBAAC1gC,GAAA,EAAD,CACEE,MAAM,GACND,QAASwgC,EACT1pD,OAAK,QAiDHqgB,IAAgBA,EAAYhsB,OAC9B,wBAAGiJ,UAAU,aAAa0D,IAAI,cAA9B,yBAEA,mBAAC8gB,GAAA,EAAD,CAAS9gB,IAAI,kBC3FvB,IAAehG,EAAAA,EAAAA,KA/FkC,IAM3C,IAN4C,KAChD6sD,EADgD,MAEhDzN,EAFgD,SAGhDmM,EAHgD,SAIhD54C,EAJgD,QAKhD2kC,GACI,EACJ,MAAM,WAAEsX,GAAexP,GACjB,gBAAE2M,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkB/M,EAAOyN,GAAM,GAExE3qD,GAAOC,EAAAA,EAAAA,KAEP0sD,GAAsBC,EAAAA,GAAAA,IAA8BlF,EAAAA,IACpDmF,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,IAEzDC,GAAe9yD,EAAAA,EAAAA,KAAQ,KAE3B,MAAM8qB,GAAYkB,EAAAA,EAAAA,MAAYpB,MAAMC,KAE9BsB,EAAU,IAAIumC,GAAuB,MAAOE,GAA4B,IAC9E,OAAO7mC,EAAAA,GAAAA,IAAO,IACT6jC,MACAnjC,EAAAA,EAAAA,IAAkB1mB,EAAMomB,EAASrB,EAAW2nC,OAEhD,CAACC,EAAqBE,EAA0BhD,EAAiB7pD,EAAM0sD,IAEpEN,GAAqB1sD,EAAAA,EAAAA,KAAastD,IACtC3D,EAAS,CACP5nD,KAAM,gBACN07C,QAAS6P,MAEV,CAAC3D,IAEE4D,GAA0BvtD,EAAAA,EAAAA,KAAaomB,IAEzCujC,EADW,aAATsB,EACO,CACPlpD,KAAM,oBACN07C,QAAS,IAAKD,EAAMgQ,eAAgBpD,gBAAiBhkC,IAG9C,CACPrkB,KAAM,oBACN07C,QAAS,IAAKD,EAAMiQ,eAAgBjD,gBAAiBpkC,OAGxD,CAAC6kC,EAAMzN,EAAOmM,IAEX+D,GAAgC1tD,EAAAA,EAAAA,KAAa4yC,IACjD,MAAM+a,EAAsC,GAC5C/a,EAAKgb,SAASxpD,IACZupD,EAAWvpD,IAAO,KAIlBulD,EADW,aAATsB,EACO,CACPlpD,KAAM,oBACN07C,QAAS,CACP2M,gBAAiBD,KACdwD,IAIE,CACP5rD,KAAM,oBACN07C,QAAS,CACP+M,gBAAiBL,KACdwD,OAIR,CAAC1C,EAAMd,EAAiBR,IAO3B,OALAz1C,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGL2X,EAKH,mBAAC,GAAD,CACEpC,KAAMA,EACNvkC,QAAS2mC,EACTtB,YAAa5B,EACbE,kBAAmBA,EACnB2B,YAAagB,EACbf,oBAAqBsB,EACrBrB,0BAA2BwB,EAC3BvB,eAAgBO,IAZX,mBAACxnC,GAAA,EAAD,SCwCX,IAAe9mB,EAAAA,EAAAA,KA1HuB,IAQhC,IARiC,cACrCs/C,EADqC,YAErCmQ,EAFqC,MAGrCrQ,EAHqC,SAIrCmM,EAJqC,SAKrC54C,EALqC,eAMrC8sC,EANqC,QAOrCnI,GACI,EACJ,MAAMoY,GAAc9tD,EAAAA,EAAAA,KAAY,KAE5B09C,IAAkBY,EAAAA,GAAAA,qBACfZ,IAAkBY,EAAAA,GAAAA,mBAClBZ,IAAkBY,EAAAA,GAAAA,+BAErBjhD,YAAW,KACTssD,EAAS,CAAE5nD,KAAM,YA5BG,KAiCtB27C,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,qBAUvB5I,IARqB,WAAf8H,EAAMyN,KACRpN,EAAeS,EAAAA,GAAAA,qBAEfT,EAAeS,EAAAA,GAAAA,qBAMlB,CACDd,EAAMyN,KAAMtB,EACZjM,EAAehI,EAASmI,IAGpB8J,GAAqB3nD,EAAAA,EAAAA,KAAY,KACrC2pD,EAAS,CAAE5nD,KAAM,UACjB87C,EAAeS,EAAAA,GAAAA,uBACd,CAACT,EAAgB8L,IAEdoE,GAAmB/tD,EAAAA,EAAAA,KAAa+nD,IACpC4B,EAAS,CAAE5nD,KAAM,aAAc07C,QAASsK,IACxClK,EAAeS,EAAAA,GAAAA,qBACd,CAACqL,EAAU9L,IAERmQ,GAAyBhuD,EAAAA,EAAAA,KAAY,KACzC2pD,EAAS,CAAE5nD,KAAM,uBACjB87C,EAAeH,IAAkBY,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACZ,EAAeiM,EAAU9L,IAEvBoQ,GAAyBjuD,EAAAA,EAAAA,KAAY,KACzC2pD,EAAS,CAAE5nD,KAAM,uBACjB87C,EAAeH,IAAkBY,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACZ,EAAeiM,EAAU9L,IAE7B,OAAQH,GACN,KAAKY,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE2I,eAAgBU,EAChBT,aAAc6G,EACdh9C,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAGf,KAAK4I,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEd,MAAOA,EACPmM,SAAUA,EACVC,mBAAoBoE,EACpBnE,mBAAoBoE,EACpBvY,QAASoY,EACT/8C,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACX15C,OAAQuhC,IAGd,KAAK4I,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE2M,KAAK,WACLzN,MAAOA,EACPmM,SAAUA,EACVjU,QAASoY,EACT/8C,SAAUA,IAGhB,KAAKutC,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE2M,KAAK,WACLzN,MAAOA,EACPmM,SAAUA,EACVjU,QAASoY,EACT/8C,SAAUA,IAIhB,QACE,W,wCCvGN,MAAMm9C,GAA0B,CAC9B,mBACA,gBACA,iBAGIC,GAAsC,CAAC,CAC3C5hC,MAAO,UACP5iB,MAAO,OACN,CACD4iB,MAAO,UACP5iB,MAAO,QAkKT,IAAevL,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,MAAEu2B,EAAF,qBAASu5B,GAAyB9vD,EAAOod,SAASC,MAExD,MAAO,KACFuO,EAAAA,GAAAA,IAAK5rB,EAAOod,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,qBACA,qBACA,eAEFkZ,MAAAA,EACAu5B,qBAAAA,KAdc/vD,EA/J+B,IAU7C,IAV8C,SAClD0S,EADkD,eAElD8sC,EAFkD,QAGlDnI,EAHkD,gBAIlD2Y,EAJkD,eAKlDr9C,EALkD,oBAMlDs9C,EANkD,WAOlDC,EAPkD,MAQlD15B,EARkD,qBASlDu5B,GACI,EACJ,MAAM,iBACJvJ,IACE/kD,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,KAEPiuD,EAA2C,CAAC,CAChDjiC,MAAOjsB,EAAK,8BACZqJ,MAAO,SACN,CACD4iB,MAAOjsB,EAAK,6BACZqJ,MAAO,QACN,CACD4iB,MAAOjsB,EAAK,+BACZqJ,MAAO,SAGH8kD,EAAyB1mD,EAAAA,QAO3B9O,EAP0C,CAC5C,CAAE0Q,MAAO,QAAS4iB,MAAOjsB,EAAK,2BAA4BouD,SAAU,6BACpE,CACE/kD,MAAO,aACP4iB,MAAOjsB,EAAKquD,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,sBAIRE,GAA6B5uD,EAAAA,EAAAA,KAAa6uD,IAC9CX,GAAwBN,SAAQ,CAAC/rB,EAAGxjB,KAClCvpB,SAASmT,KAAKjT,UAAUypB,OAAQ,mBAAkBJ,IAAKwwC,IAAaxwC,MAGtEwmC,EAAiB,CAAE7zC,eAAgB69C,MAClC,CAAChK,IAEEiK,GAA8B9uD,EAAAA,EAAAA,KAAa+uD,IAC/Cj6D,SAASk6D,gBAAgBh4D,MAAMkvC,YAC7B,uBAAyB,GAAEriC,KAAK4E,IAAIsmD,EAASvlD,EAAAA,GAAS,GAAK,SAE7D1U,SAASk6D,gBAAgBh4D,MAAMkvC,YAAY,wBAA0B,GAAEriC,KAAK2mC,MAAgB,OAAVukB,QAClFj6D,SAASk6D,gBAAgBh4D,MAAMkvC,YAAY,sBAAwB,GAAE6oB,OACrEj6D,SAASk6D,gBAAgBC,aAAa,yBAA0BF,EAAQ5oB,YAExE0e,EAAiB,CAAEwJ,gBAAiBU,MACnC,CAAClK,IAEEqK,GAA8BlvD,EAAAA,EAAAA,KAAa2J,IAC/C,MAAMwlD,EAAqB,SAAVxlD,GAAmBylD,EAAAA,EAAAA,MAAmBzlD,EAEvDk7C,EAAiB,CAAEhwB,MAAOs6B,IAC1BtK,EAAiB,CAAEuJ,qBAAgC,SAAVzkD,IACrCwlD,IAAat6B,IACfw6B,EAAAA,GAAAA,GAAYF,EAAUn+C,IAAmBs+C,EAAAA,MAE1C,CAACt+C,EAAgB6zC,EAAkBhwB,IAEhC06B,GAAyBvvD,EAAAA,EAAAA,KAAawvD,IAC1C3K,EAAiB,CAAE0J,WAAYiB,IAC/B3K,EAAiB,CAAE4K,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,KACb,CAAC3K,IAEE8K,GAA+B3vD,EAAAA,EAAAA,KAAa4vD,IAChD/K,EAAiB,CAAEyJ,oBAAqBsB,MACvC,CAAC/K,IAOJ,OALA3wC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,aAEhF,mBAACmJ,GAAA,EAAD,CACE8iB,MAAOjsB,EAAK,YACZoI,IAAK,GACLD,IAAK,GACLkB,MAAO0kD,EACPzkD,SAAUklD,IAGZ,mBAACjqC,GAAA,EAAD,CACElhB,KAAK,QAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,wBAE7Bh+C,EAAK,oBAIV,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,UAER,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,QACL4iB,QAAS6oB,EACTsB,SAAU1B,EAAuB,OAASv5B,EAC1CjrB,SAAUslD,KAId,0BAAKxuD,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAA/D,eAGA,mBAAC42D,GAAA,EAAD,CACE9sC,KAAK,aACL4iB,QAASwoB,GACT2B,SAAUvB,EACV3kD,SAAU2lD,KAId,0BAAK7uD,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAA/D,mBAGA,wBAAGyH,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAnE,yCAIA,mBAACwQ,GAAA,EAAD,CACEk8B,QAASuoB,GACTvkD,MAAOqH,EACPpH,SAAUglD,KAIbH,GACC,0BAAK/tD,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,uBAEhF,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,yBACL4iB,QAAS8oB,EACT7kD,SAAU+lD,EACVG,SAAUxB,U,wCCjLtB,MAiFA,IAAelwD,EAAAA,EAAAA,KAjFqB,IAK9B,UAL+B,UACnC2xD,EADmC,MAEnCl7B,EAFmC,WAGnCi4B,EAHmC,QAInC/rD,GACI,EACJ,MAAM,KAAEq2B,EAAF,SAAQtiC,GAAai7D,EACrBC,EAAkB,YAAWl7D,EAASwB,KACtCgF,EAAexG,EAASkG,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEm1D,YAC7BC,GAAW7xB,EAAAA,GAAAA,GAAa,UAACtpC,EAASgyC,iBAAV,aAAC,EAAoBprC,QAAS1B,QAAQgB,IAAiB,IAC/E,qBAAEmT,IAAyBE,EAAAA,GAAAA,GAC/BrU,QAAQgB,GAAkBM,QAC1BrC,OACAA,EACA,SAEKi3D,EAAeC,IAAoBhrD,EAAAA,EAAAA,KAAS,IAEjDlK,UAAWm1D,EADP,aACkBj1D,IACpBC,EAAAA,EAAAA,GAAyB40D,GAAiBE,GACxCG,GAAiD,KAA/B98C,EAAAA,EAAAA,GAAY28C,IAC5BjiD,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpF6hD,IAAkBE,GAAch5B,IAASk5B,EAAAA,QAC1Cr3D,EACAo3D,EACA,QAGIE,GAAc30D,EAAAA,EAAAA,MACpB20D,EAAYx0D,QAAU84B,EAEtB,MAAM27B,GAAexwD,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMywD,QAAaC,EAAAA,EAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAYx0D,QAAU00D,GAChE1vD,EAAQq2B,IAHV,KAKC,CAACg5B,EAAWrvD,EAASq2B,KAExBt6B,EAAAA,EAAAA,KAAU,KACJszD,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAM9hD,GAAc1O,EAAAA,EAAAA,KAAY,KAC1BowD,EACFI,IAEAL,GAAkBW,IAAeA,MAElC,CAACV,EAAWI,IAET9vD,GAAYmF,EAAAA,EAAAA,GAChB,gBACAinD,GAAc,YAGhB,OACE,0BAAKpsD,UAAWA,EAAWK,QAAS2N,GAClC,0BAAKhO,UAAU,eACb,6BACEyI,IAAK8mD,EACLvvD,UAAU,cAEZ,0BACEnL,IAAKyF,GAAkBM,EACvBoF,WAAWmF,EAAAA,EAAAA,GAAe,aAAcsI,GACxC2D,IAAI,KAEL5D,GACC,0BAAKxN,WAAWmF,EAAAA,EAAAA,GAAe,oBAAqBuI,IAClD,mBAAC/J,EAAA,EAAD,CAAiBC,SAAUnJ,EAAc4F,QAAS2N,UC9DxD0mC,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAO,GAgInD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMu2B,GAAQC,EAAAA,EAAAA,IAAYx2B,IACpB,WAAEyyD,EAAF,UAAcC,GAAc1yD,EAAOod,SAASu1C,OAAOp8B,IAAU,IAC7D,iBAAEq8B,GAAqB5yD,EAAOod,SAEpC,MAAO,CACLq1C,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACAr8B,MAAAA,KAVcx2B,EA9HyC,IAQvD,IARwD,SAC5D0S,EAD4D,eAE5D8sC,EAF4D,QAG5DnI,EAH4D,WAI5Dqb,EAJ4D,UAK5DC,EAL4D,iBAM5DE,EAN4D,MAO5Dr8B,GACI,EACJ,MAAM,eACJs8B,EADI,gBAEJC,EAFI,iBAGJC,IACEvxD,EAAAA,EAAAA,MAEEwxD,GAAW11D,EAAAA,EAAAA,MACjB01D,EAASv1D,QAAU84B,GAGnB/3B,EAAAA,EAAAA,KAAU,KACRs4C,IAAa,KACX+b,SAED,CAACA,IAEJ,MAAMI,GAAmBvxD,EAAAA,EAAAA,KAAa8F,IACpC,MAAM,MAAE0rD,GAAU1rD,EAAEwQ,OAEhBk7C,GAASA,EAAM/5D,OAAS,GAC1B25D,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwBzxD,EAAAA,EAAAA,KAAY,MACxC0xD,EAAAA,GAAAA,GAtCoB,aAsCmBH,GAAkB,KACxD,CAACA,IAEEI,GAAiB3xD,EAAAA,EAAAA,KAAY,KACjC69C,EAAeS,EAAAA,GAAAA,8BACd,CAACT,IAEE+T,GAAuB5xD,EAAAA,EAAAA,KAAY,KACvCqxD,EAAiB,CACfx8B,MAAAA,EACAk8B,gBAAY93D,EACZ68B,qBAAiB78B,EACjB+3D,WAAW,EACXa,aAAwB,SAAVh9B,EAAmBi9B,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkBx8B,IAEhBm9B,GAAwBhyD,EAAAA,EAAAA,KAAao3B,IACzCi6B,EAAiB,CAAEx8B,MAAOy8B,EAASv1D,QAASg1D,WAAY35B,IACxD,MAAM66B,EAAmBf,GAAoBA,EAAiBtrB,MAAMmqB,GAAcA,EAAU34B,OAASA,IACjG66B,MAAAA,GAAAA,EAAkBn9D,SAASgyC,YAC7BorB,EAAAA,GAAAA,IAAgBD,EAAiBn9D,SAASgyC,UAAUprC,SACjD8pC,MAAM3kC,IACL,MAAMgxD,GAAeM,EAAAA,GAAAA,IAAgBtxD,GAC/BuxD,EAAY,KAAGC,EAAAA,GAAAA,IAAQxxD,KAC7BwwD,EAAiB,CAAEx8B,MAAOy8B,EAASv1D,QAAS+5B,gBAAiBs8B,EAAUP,aAAAA,SAG5E,CAACX,EAAkBG,IAEhBiB,GAA4BtyD,EAAAA,EAAAA,KAAa8F,IAC7CurD,EAAiB,CAAEx8B,MAAOy8B,EAASv1D,QAASi1D,UAAWlrD,EAAEwQ,OAAOgW,YAC/D,CAAC+kC,IAEE/wD,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAM6c,GAAcrB,MAAAA,OAAA,EAAAA,EAAmB,KAAMA,EAAiB,GAAG95B,OAASk5B,EAAAA,GAE1E,OACE,0BAAK5vD,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,aACLjD,UAAU,OACV0J,SAAUmoD,EACVxxD,QAAS0wD,GAERnxD,EAAK,gBAGR,mBAACukB,GAAA,EAAD,CACElhB,KAAK,WACLjD,UAAU,OACVK,QAAS4wD,GAERrxD,EAAK,aAGR,mBAACukB,GAAA,EAAD,CAAUlhB,KAAK,WAAW5C,QAAS6wD,GAChCtxD,EAAK,yBAGR,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,qBACZgsB,QAAStyB,QAAQg3D,GACjBpnD,SAAU0oD,KAIbpB,EACC,0BAAKxwD,UAAU,uBACZwwD,EAAiB/wD,KAAK4vD,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXl7B,MAAOA,EACPi4B,WAAYiE,IAAehB,EAAU34B,KACrCr2B,QAASixD,OAKf,mBAAC9sC,GAAA,EAAD,WCnHFstC,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACblvD,KAAKT,MAAOyvD,EAAI,IAAOC,EAAME,UAAUh3D,MAAQ,IAC/C6H,KAAKT,OAAO,EAAIyvD,EAAI,KAAOC,EAAME,UAAU32D,OAAS,KAEtD42D,YAAapvD,KAAKT,MAAMyvD,EAAI,IAAMC,EAAMI,QAAQl3D,MAAQ,KAI5D,SAASm3D,GAAT,EAEEL,GAC0B,IAF1B,cAAEC,EAAF,YAAiBE,GAES,EAC1B,MAAO,CACLA,GAAeH,EAAMI,QAAQl3D,MAAQ,GACrC+2D,EAAc,IAAMD,EAAME,UAAUh3D,MAAQ,GAC5C,EAAI+2D,EAAc,IAAMD,EAAME,UAAU32D,OAAS,IA8ErD,UAAe+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMu2B,GAAQC,EAAAA,EAAAA,IAAYx2B,IACpB,gBAAEw3B,GAAoBx3B,EAAOod,SAASu1C,OAAOp8B,IAAU,GAC7D,MAAO,CACLiB,gBAAAA,EACAjB,MAAAA,KANcx2B,EAxSyC,IAKvD,IALwD,SAC5D0S,EAD4D,QAE5D2kC,EAF4D,MAG5D7gB,EAH4D,gBAI5DiB,GACI,EACJ,MAAM,iBAAEu7B,IAAqBvxD,EAAAA,EAAAA,MAEvBwxD,GAAW11D,EAAAA,EAAAA,MACjB01D,EAASv1D,QAAU84B,EAEnB,MAAMniB,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtCw3D,GAAiBx3D,EAAAA,EAAAA,IAAuB,MAExCy3D,GAAez3D,EAAAA,EAAAA,IAAuB,MACtC03D,GAAgB13D,EAAAA,EAAAA,KAAO,IAEtBi3D,EAAKU,IAAUpuD,EAAAA,EAAAA,IAiLxB,SAAuB2wB,GACrB,OAAOA,GAAmBA,EAAgB4iB,WAAW,MACjD+Z,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ58B,EAAgB/E,QAAQ,IAAK,MAC7CyhC,GApL2BgB,CAAc19B,IAEvC29B,GAAS73D,EAAAA,EAAAA,IAAOi3D,IACtB/1D,EAAAA,EAAAA,KAAU,KACR22D,EAAO13D,QAAU82D,IAChB,CAACA,IAEJ,MAAO7M,EAAY0N,EAAgBC,IAAoBhxD,EAAAA,EAAAA,MAChDixD,EAAUC,IAAe1uD,EAAAA,EAAAA,IAAS,KAClC2uD,EAAUC,IAAe5uD,EAAAA,EAAAA,IAAS,IAEnC6uD,GAAWp4D,EAAAA,EAAAA,MACXq4D,GAAcr4D,EAAAA,EAAAA,OAGpBkB,EAAAA,EAAAA,KAAU,KAER,MAAMk2D,EAAY,CAChBkB,WAAYd,EAAer3D,QAASm4D,eACjChqC,EAAAA,GAAAA,IAAKkpC,EAAer3D,QAASsM,wBAAyB,CAAC,MAAO,QAAS,YAEtE6qD,EAAU,CACdgB,WAAYb,EAAat3D,QAASm4D,eAC/BhqC,EAAAA,GAAAA,IAAKmpC,EAAat3D,QAASsM,wBAAyB,CAAC,WAK1D,SAAS8rD,EAAgBruD,GACvB,MAAMitD,EAAgB,CACpBlvD,KAAK6E,IAAI7E,KAAK4E,IAAI,EAAG3C,EAAEiP,MAASi+C,EAAUkB,YAAalB,EAAUh3D,MAAQ,GACzE6H,KAAK6E,IAAI7E,KAAK4E,IAAI,EAAG3C,EAAEgP,MAASk+C,EAAUnlD,IAAM6E,EAAa3W,QAAStF,WAAYu8D,EAAU32D,OAAS,KAGjG,YAAE42D,GAAgBL,GAAca,EAAO13D,QAASi4D,EAASj4D,SAK/D,OAHAw3D,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASj4D,UAC9D23D,KAEO,EAYT,SAASU,EAActuD,GACrB,MAAM,cAAEitD,GAAkBH,GAAca,EAAO13D,QAASi4D,EAASj4D,SAC3Dk3D,EAAcpvD,KAAK6E,IAAI7E,KAAK4E,IAAI,EAAG3C,EAAEiP,MAASm+C,EAAQgB,YAAahB,EAAQl3D,MAAQ,GAKzF,OAHAu3D,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASj4D,UAC9D23D,KAEO,EAhCTM,EAASj4D,QAAU,CAAEi3D,UAAAA,EAAWE,QAAAA,IAgBhCrqD,EAAAA,EAAAA,IAAcuqD,EAAer3D,QAAU,CACrC+M,UAAWqrD,EACXnrD,OAAQmrD,EACRprD,UAAW4qD,EACX5yD,QAAS4yD,EACTU,wBAAyB,kCACzBC,YAAY,KAadzrD,EAAAA,EAAAA,IAAcwqD,EAAat3D,QAAU,CACnC+M,UAAWsrD,EACXprD,OAAQorD,EACRrrD,UAAW4qD,EACX5yD,QAAS4yD,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAASj4D,QAAU62D,GAAcC,EAAKmB,EAASj4D,SAAW,GACxGw4D,GAAMlC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAASrC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxC33D,EAAAA,EAAAA,KAAU,KACR,MAAM63D,GAAMH,EAAAA,GAAAA,IAAQ3B,GACdhyD,EAAS,KAAGwxD,EAAAA,GAAAA,IAAQsC,KAK1B,GAHAd,EAAYc,EAAIpkD,KAAK,OACrBwjD,EAAYlzD,IAEPyyD,EAAcv3D,QAAS,CAC1B,MAAM81D,GAAeM,EAAAA,GAAAA,IAAgBwC,GACrCtD,EAAiB,CACfx8B,MAAOy8B,EAASv1D,QAChBg1D,gBAAY93D,EACZ68B,gBAAiBj1B,EACjBgxD,aAAAA,IAGJyB,EAAcv3D,SAAU,IACvB,CAAC82D,EAAKxB,KAGTv0D,EAAAA,EAAAA,KAAU,MA2GZ,SACEb,EACAw4D,EACAR,EACAD,GAEA,IAAIY,EACAC,EACAC,EAECb,EAAYl4D,SAAYi4D,EAASj4D,SAWpC64D,EAAIZ,EAASj4D,QAAQi3D,UAAUh3D,MAC/B64D,EAAIb,EAASj4D,QAAQi3D,UAAU32D,OAC/By4D,EAAMb,EAAYl4D,UAXlB64D,EAAI34D,EAAOmqD,YACXyO,EAAI54D,EAAOvF,aACXo+D,EAAM74D,EAAOG,WAAW,MAExBH,EAAOD,MAAQ44D,EACf34D,EAAOI,OAASw4D,EAEhBZ,EAAYl4D,QAAU+4D,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBJ,EAAGC,GAClCI,EAASF,EAAQl9B,KACjBq9B,GAAMV,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAIhyC,EAAQ,EAEZ,IAAK,IAAI3P,EAAI,EAAGA,EAAI+hD,EAAG/hD,IAAK,CAC1B,MAAMqiD,EAAO,EAAIriD,GAAK+hD,EAAI,GACpBO,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAItiD,EAAI,EAAGA,EAAI+hD,EAAG/hD,IAAK,CAC1B,MAAMyiD,EAAOziD,GAAK+hD,EAAI,GACtBK,EAAOxyC,KAAW2yC,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxyC,KAAW2yC,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxyC,KAAW2yC,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOxyC,KAAW,KAItBqyC,EAAKS,aAAaR,EAAS,EAAG,GAvJ5BS,CAAUpC,EAAer3D,QAASpE,WAAiC88D,EAAKR,EAAaD,KACpF,CAACS,KAGJ33D,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBb,GACf,MAAM24D,EAAI34D,EAAOmqD,YAEjBnqD,EAAOD,MAAQ44D,EACf34D,EAAOI,OAFG,EAGV,MAAMy4D,EAAM74D,EAAOG,WAAW,MAExB24D,EAAUD,EAAIE,gBAAgBJ,EAL1B,GAMJK,EAASF,EAAQl9B,KAEvB,IAAIpV,EAAQ,EAEZ,IAAK,IAAI5P,EAAI,EAAGA,EAAI+hD,EAAG/hD,IAAK,CAC1B,MAAM4hD,EAAM5hD,GAAK+hD,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BQ,EAAOxyC,KAAWkyC,EAAI,GACtBM,EAAOxyC,KAAWkyC,EAAI,GACtBM,EAAOxyC,KAAWkyC,EAAI,GAEtBM,EAAOxyC,KAAW,IAGpBqyC,EAAIS,aAAaR,EAAS,EAAG,GA5K3BU,CAAQpC,EAAat3D,QAASpE,cAC7B,IAEH,MAAM+9D,GAAkB11D,EAAAA,EAAAA,KAAa8F,IACnC,MAAM6vD,EAAW7vD,EAAE+I,cAAclF,MAAMonB,QAAQ,WAAY,IAAI+P,MAAM,EAAG,IAExE,GAAI60B,EAASzpB,MAAM,mCAAoC,CACrD,MAAMyoB,EAAMgB,EAAS5c,MAAM,KAAK54C,KAAKy1D,GAAY3kC,OAAO2kC,EAAQ39B,UAChEs7B,GAAOd,EAAAA,GAAAA,IAAQkC,IAGjB7uD,EAAE+I,cAAclF,MAAQgsD,IACvB,IAEGE,GAAkB71D,EAAAA,EAAAA,KAAa8F,IACnC,MAAMgwD,EAAWhwD,EAAE+I,cAAclF,MAAMonB,QAAQ,gBAAiB,IAAI+P,MAAM,EAAG,GAEzEg1B,EAAS5pB,MAAM,uBACjBqnB,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQoD,EAAS/kC,QAAQ,IAAK,OAG/CjrB,EAAE+I,cAAclF,MAAQmsD,IACvB,IAEGC,GAA6B/1D,EAAAA,EAAAA,KAAa8F,IAC9CytD,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ5sD,EAAE+I,cAAcmnD,QAAQn1D,MAAOkwB,QAAQ,IAAK,SAClE,IAEGrwB,GAAYmF,EAAAA,EAAAA,GAChB,gEACAmgD,GAAc,eAQhB,OALA9xC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKvsC,IAAKuJ,EAAchS,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAKyI,IAAKiqD,EAAgB1yD,UAAU,gBAClC,kCACA,0BACEA,UAAU,SACV1J,MAAQ,wBAAuB+7D,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG,0BAAKprD,IAAKkqD,EAAc3yD,UAAU,cAChC,kCACA,0BACEA,UAAU,SACV1J,MAAQ,yBAAwBi8D,4BAAsCyB,QAG1E,0BAAKh0D,UAAU,SACb,mBAACwjB,GAAA,EAAD,CAAWva,MAAOmqD,EAAUvnC,MAAM,MAAM3iB,SAAUisD,IAClD,mBAAC3xC,GAAA,EAAD,CAAWva,MAAOiqD,EAAUrnC,MAAM,MAAM3iB,SAAU8rD,MAGtD,0BAAKh1D,UAAU,qBACZiyD,GAAkBxyD,KAAKU,GACtB,0BACEH,UAAWG,IAAW,IAAG0zD,IAAQ,cAAWt7D,EAC5C,aAAY4H,EACZ7J,MAAQ,qBAAoB6J,KAC5BE,QAASg1D,Y,4BCjNrB,MAmNA,IAAe33D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL23D,6BAA8Bj8D,QAAQsE,EAAOod,SAASC,MAAMs6C,8BAC5DC,8BAA+Bl8D,QAAQsE,EAAOod,SAASC,MAAMu6C,+BAC7DC,sBAAuBn8D,QAAQsE,EAAOod,SAASC,MAAMw6C,uBACrDC,uBAAwBp8D,QAAQsE,EAAOod,SAASC,MAAMy6C,wBACtDC,0BAA2Br8D,QAAQsE,EAAOod,SAASC,MAAM06C,2BACzDC,2BAA4Bt8D,QAAQsE,EAAOod,SAASC,MAAM26C,4BAC1DC,8BAA+Bv8D,QAAQsE,EAAOod,SAASC,MAAM46C,+BAC7DC,oBAAqBl4D,EAAOod,SAASC,MAAM66C,oBAC3CC,qBAAsBn4D,EAAOod,SAASC,MAAM86C,qBAC5CC,wBAAyBp4D,EAAOod,SAASC,MAAM+6C,2BAZjCr4D,EAnNqC,IAanD,IAboD,SACxD0S,EADwD,QAExD2kC,EAFwD,6BAGxDugB,EAHwD,8BAIxDC,EAJwD,sBAKxDC,EALwD,uBAMxDC,EANwD,0BAOxDC,EAPwD,2BAQxDC,EARwD,8BASxDC,EATwD,qBAUxDE,EAVwD,oBAWxDD,EAXwD,wBAYxDE,GACI,EACJ,MAAM,yBACJC,EADI,gCAEJC,EAFI,2BAGJC,EAHI,8BAIJC,IACEh3D,EAAAA,EAAAA,OAEJhD,EAAAA,EAAAA,KAAU,KACR65D,MACC,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAAuBj3D,EAAAA,EAAAA,KAAY,CACvC8F,EACAoxD,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBjB,IACc,UAAbiB,EAAuBf,EAAwBE,GAC/CgB,EAAyC,YAAbH,EAC9BhB,EACc,UAAbgB,EAAuBd,EAAyBE,EAErDO,EAA2B,CACzBK,SAAAA,KACgB,WAAZC,GAAwB,CAAE9oB,UAAWvoC,EAAEwQ,OAAOgW,QAASgrC,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoBxxD,EAAEwQ,OAAOgW,QAAS+hB,SAAU+oB,OAErF,CACDd,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIU,GAA+Bv3D,EAAAA,EAAAA,KAAa8F,IAChDgxD,EAA8B,CAC5BN,oBAAqB1wD,EAAEwQ,OAAOgW,YAE/B,CAACwqC,IAEEU,GAAgCx3D,EAAAA,EAAAA,KAAa8F,IACjDgxD,EAA8B,CAC5BL,qBAAsB3wD,EAAEwQ,OAAOgW,YAEhC,CAACwqC,IAEEW,GAAwCz3D,EAAAA,EAAAA,KAAa8F,IACzDmxD,EAAqBnxD,EAAG,UAAW,YAClC,CAACmxD,IAEES,GAAkC13D,EAAAA,EAAAA,KAAa8F,IACnDmxD,EAAqBnxD,EAAG,UAAW,kBAClC,CAACmxD,IAEEU,GAAkC33D,EAAAA,EAAAA,KAAa8F,IACnDmxD,EAAqBnxD,EAAG,QAAS,YAChC,CAACmxD,IAEEW,GAA4B53D,EAAAA,EAAAA,KAAa8F,IAC7CmxD,EAAqBnxD,EAAG,QAAS,kBAChC,CAACmxD,IAEEY,GAAoC73D,EAAAA,EAAAA,KAAa8F,IACrDmxD,EAAqBnxD,EAAG,YAAa,YACpC,CAACmxD,IAEEa,GAA8B93D,EAAAA,EAAAA,KAAa8F,IAC/CmxD,EAAqBnxD,EAAG,YAAa,kBACpC,CAACmxD,IAEEc,GAAkC/3D,EAAAA,EAAAA,KAAa8F,IACnD8wD,EAAgC,CAC9BvoB,UAAWvoC,EAAEwQ,OAAOgW,YAErB,CAACsqC,IAEE3nD,GAAqBjP,EAAAA,EAAAA,KAAa6G,IACtCiwD,EAA8B,CAC5BJ,wBAAyB7vD,IAE3BkwD,GAAa,KAAMiB,EAAAA,GAAAA,SAAgB/+D,EAAW4N,OAC7C,CAACkwD,EAAcD,IAEZx2D,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAA/D,qBAGA,mBAACozB,GAAA,EAAD,CACEE,MAAM,oBAENmiC,SAAUpuD,EAAKk2D,EAAsB,gCAAkC,kCACvElqC,QAASkqC,EACT5sD,SAAU2tD,IAEZ,mBAAClrC,GAAA,EAAD,CACEE,MAAM,wBACNniB,UAAWosD,EAEX9H,SAAUpuD,EAAKm2D,EAAuB,gCAAkC,kCACxEnqC,QAASmqC,EACT7sD,SAAU4tD,IAEZ,0BAAK92D,UAAU,wBACb,mBAAC+I,GAAA,EAAD,CACE8iB,MAAM,QACN7jB,IAAK,EACLD,IAAK,GACLkB,MAAO+sD,EACP9sD,SAAUqF,MAIhB,0BAAKvO,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,6BAGR,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,gCAEZouD,SAAUpuD,EAAK21D,EAA+B,gCAAkC,kCAChF3pC,QAAS2pC,EACTrsD,SAAU6tD,IAEZ,mBAACprC,GAAA,EAAD,CACEE,MAAOjsB,EAAK,kBACZ8J,UAAW6rD,EAEXvH,SAAUpuD,EAAK41D,EAAgC,gCAAkC,kCACjF5pC,QAAS4pC,EACTtsD,SAAU8tD,KAId,0BAAKh3D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,iBAEhF,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,0BACZouD,SAAUpuD,EAAK61D,EAAwB,gCAAkC,kCACzE7pC,QAAS6pC,EACTvsD,SAAU+tD,IAEZ,mBAACtrC,GAAA,EAAD,CACEE,MAAOjsB,EAAK,kBACZ8J,UAAW+rD,EACXzH,SAAUpuD,EAAK81D,EAAyB,gCAAkC,kCAC1E9pC,QAAS8pC,EACTxsD,SAAUguD,KAId,0BAAKl3D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,mBAEhF,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,4BAEZouD,SAAUpuD,EAAK+1D,EAA4B,gCAAkC,kCAC7E/pC,QAAS+pC,EACTzsD,SAAUiuD,IAEZ,mBAACxrC,GAAA,EAAD,CACEE,MAAOjsB,EAAK,kBACZ8J,UAAWisD,EAEX3H,SAAUpuD,EAAKg2D,EAA6B,gCAAkC,kCAC9EhqC,QAASgqC,EACT1sD,SAAUkuD,KAId,0BAAKp3D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,eAEhF,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,iBACZgsB,QAASiqC,EACT3sD,SAAUmuD,UC2FpB,IAAe35D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEod,UACEC,OAAO,YACLs8C,EADK,mBACQC,EADR,mBAC4BC,EAD5B,kCACgDC,GAF/C,QAIRC,GALE,QAOJC,EACAC,UAAU,YACRC,IAEAl6D,EAEJ,MAAO,CACLm6D,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,GACjD25D,YAAAA,EACAO,YAAax+D,QAAQw+D,GACrBE,aAAcJ,EAAQK,WACtBC,aAAct6D,EAAOu6D,kBAAkB7Z,cAAcvnD,OACrDygE,mBAAAA,EACAE,kCAAAA,EACAD,mBAAAA,EACAW,mBAAoBT,EAAQ5kC,YAC5BslC,gBAAiBV,EAAQW,SACzBC,oBAAqBZ,EAAQa,aAC7BC,kBAAmBd,EAAQe,SAC3BC,qBAAsBhB,EAAQiB,cAC9BC,kBAAmBlB,EAAQmB,WAC3BC,iBAAkBpB,EAAQqB,UAC1BC,gBAAiBtB,EAAQuB,YA/BXv7D,EA9R+B,IAoB7C,IApB8C,SAClD0S,EADkD,qBAElD0nD,EAFkD,YAGlDR,EAHkD,YAIlDO,EAJkD,aAKlDE,EALkD,aAMlDE,EANkD,mBAOlDV,EAPkD,mBAQlDC,EARkD,kCASlDC,EATkD,mBAUlDU,EAVkD,gBAWlDC,EAXkD,oBAYlDE,EAZkD,kBAalDE,EAbkD,qBAclDE,EAdkD,kBAelDE,EAfkD,iBAgBlDE,EAhBkD,gBAiBlDE,EAjBkD,eAkBlD9b,EAlBkD,QAmBlDnI,GACI,EACJ,MAAM,oBACJmkB,EADI,oBAEJC,EAFI,mBAGJ5a,EAHI,oBAIJ6a,EAJI,sBAKJC,EALI,0BAMJC,EANI,4BAOJC,EAPI,sBAQJC,EARI,iBASJzyC,IACE5nB,EAAAA,EAAAA,OAEJhD,EAAAA,EAAAA,KAAU,KACRg9D,IACA5a,IACA2a,IACAE,IACAI,MACC,CAACL,EAAqB5a,EAAoB2a,EAAqBE,EAAqBI,KAEvFr9D,EAAAA,EAAAA,KAAU,KACJiU,GACFkpD,MAED,CAAClpD,EAAUkpD,IAEd,MAAM35D,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAM0kB,GAA6Bp6D,EAAAA,EAAAA,KAAa4L,IAC9CsuD,EAA4B,CAC1B9B,kCAAmCxsD,MAEpC,CAACsuD,IAEEG,GAA2Br6D,EAAAA,EAAAA,KAAY,KACvCy4D,EACF5a,EAAeS,EAAAA,GAAAA,sBAEf52B,EAAiB,CACfxwB,QAASoJ,EAAK,uCAGjB,CAACm4D,EAAsBn4D,EAAMu9C,EAAgBn2B,IAEhD,SAAS4yC,EAAmBnD,GAC1B,MAAM,WAAEoD,GAAepD,GAAW,GAC5BqD,EAAarD,EAAUA,EAAQsD,aAAahjE,OAAS0/D,EAAQuD,aAAajjE,OAAS,EACnFkjE,EAAaxD,EAAUA,EAAQyD,aAAanjE,OAAS0/D,EAAQ0D,aAAapjE,OAAS,EACnFqjE,EAAQ,GACVN,GAAYM,EAAMp3D,KAAM,IAAG82D,KAC3BG,GAAYG,EAAMp3D,KAAM,IAAGi3D,KAE/B,MAAMI,EAAkBD,EAAMrjE,OAAU,IAAGqjE,EAAMvqD,KAAK,QAAU,GAEhE,OAAQgqD,GACN,IAAK,YACH,MAAQ,GAAEj6D,EAAK,mBAAmBy6D,IAEpC,IAAK,WACH,MAAQ,GAAEz6D,EAAK,kBAAkBy6D,IAEnC,IAAK,SACH,MAAQ,GAAEz6D,EAAK,gBAAgBy6D,KAMrC,OACE,0BAAKr6D,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,cAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,sBAE7Bh+C,EAAK,gBACN,2BAAMI,UAAU,gCAAgCg4D,GAAgB,KAElE,mBAAC7zC,GAAA,EAAD,CACElhB,KAAK,MAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,iBAE7Bh+C,EAAK,+BACN,2BAAMI,UAAU,gCAAgCk4D,GAAgB,KAElE,mBAAC/zC,GAAA,EAAD,CACElhB,KAAK,MACLmlD,QAAM,EAEN/nD,QAAS,IAAM88C,EACb2a,EAAcla,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,mBAGlD,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,aAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5B1F,EAAKk4D,EAAc,aAAe,kBAIzC,mBAAC3zC,GAAA,EAAD,CACElhB,KAAK,OACLmlD,QAAM,EAEN/nD,QAAS,IAAM88C,EACboa,EAAc3Z,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5B1F,EAAK23D,EAAc,aAAe,mBAM3C,0BAAKv3D,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,iBAErF,mBAACukB,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,qBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,sBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBxB,MAI1B,mBAACj0C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,kBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,kBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBvB,MAI1B,mBAACl0C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,sBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,6BAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBrB,MAI1B,mBAACp0C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,mBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,iBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBb,MAI1B,mBAAC50C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,kBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,eAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBX,MAI1B,mBAAC90C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,oBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,yBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBnB,MAI1B,mBAACt0C,GAAA,EAAD,CACEikC,QAAM,EACN1+C,UAAWquD,EACXuC,oBAAkB,EAClBC,cAAexC,GAAwB,wBAAG/3D,UAAU,yCACpDA,UAAU,UACVK,QAASs5D,GAET,0BAAK35D,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,yBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBjB,MAI1B,mBAACx0C,GAAA,EAAD,CACEikC,QAAM,EACNpoD,UAAU,UAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,oBAE9B,0BAAK59C,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5Bs0D,EAAmBf,OAM5B,0BAAK74D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,4BAER,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,kBACZouD,SAAUpuD,EAAK,sBACfgsB,QAAStyB,QAAQo+D,GACjB3rC,QAAS2tC,KAIZjC,GACC,0BAAKz3D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,iCAER,mBAAC+rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,4CACZouD,SAAUpuD,EAAK,gCACfgsB,QAAStyB,QAAQk+D,GACjB9tD,UAAW+tD,EACX1rC,QAASutC,UClOrB,IAAe57D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL48D,UAAW58D,EAAOod,SAASC,MAAMu/C,UACjCC,SAAU78D,EAAOod,SAASC,MAAMw/C,YAJlB98D,EArEgC,IAK9C,IAL+C,SACnD0S,EADmD,QAEnD2kC,EAFmD,UAGnDwlB,EAHmD,SAInDC,GACI,EACJ,MAAM,cACJC,EADI,iBAEJvW,IACE/kD,EAAAA,EAAAA,OAEGu7D,EAAkBC,IAAuBn2D,EAAAA,EAAAA,IAAiBg2D,IAC1DphB,EAAWwhB,EAAeC,IAAmB74D,EAAAA,EAAAA,MAGpD7F,EAAAA,EAAAA,KAAU,KACRs+D,MACC,CAACA,IAEJ,MAAM1wB,GAAe1qC,EAAAA,EAAAA,KAAay7D,IAChCH,EAAoBG,GACpBF,KAEKG,EAAAA,GAAAA,IAAYD,GAAsB,KACrCD,IAEA3W,EAAiB,CAAEsW,SAAUM,SAE9B,CAACF,EAAeC,EAAiB3W,IAE9Blf,GAAUprC,EAAAA,EAAAA,KAAQ,IACf2gE,EAyBX,SAAsBA,GACpB,MAAMS,GAAmBv+D,OAAOw+D,UAAUT,UAAY,MAAMU,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOb,EAAU/6D,KAAI,QAAC,SAAEs7D,EAAF,WAAYO,EAAZ,KAAwBj5C,GAAzB,QAAqC,CACxDpZ,MAAO8xD,EACPlvC,MAAOyvC,EACPtN,SAAU3rC,MACRi2B,MAAMC,IACD0iB,GAAoB1iB,EAAEtvC,QAAUgyD,GAAmB1iB,EAAEtvC,QAAUmyD,EAAsB,GAAJ,IAlCrEG,CAAaf,QAAajiE,GAC5C,CAACiiE,IAOJ,OALAhnD,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,uFACZilC,EACC,mBAACkqB,GAAA,EAAD,CACE9sC,KAAK,yBACL4iB,QAASA,EACTmqB,SAAUuL,EACVa,cAAeniB,EAAYshB,OAAmBpiE,EAC9C2Q,SAAU8gC,IAGZ,mBAACxlB,GAAA,EAAD,WCtED,SAASi3C,GAAcC,GAC5B,OAAQA,GACN,KAAK9d,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,MAAO,gBACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,aACT,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,MAAO,YACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,YCRb,MA4MA,IAAelgD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAC9B+9D,GADG,OAAED,GAAyB,EAGlC,MACEj3C,OAASC,KAAMC,GACf3J,UAAU,QAAE28C,IACV/5D,EAEJ,OAAQ89D,GACN,KAAK9d,EAAAA,GAAAA,mBACH+d,EAAkBhE,EAAQ5kC,YAC1B,MAEF,KAAK6qB,EAAAA,GAAAA,gBACH+d,EAAkBhE,EAAQW,SAC1B,MAEF,KAAK1a,EAAAA,GAAAA,oBACH+d,EAAkBhE,EAAQa,aAC1B,MAEF,KAAK5a,EAAAA,GAAAA,iBACH+d,EAAkBhE,EAAQqB,UAC1B,MAEF,KAAKpb,EAAAA,GAAAA,gBACH+d,EAAkBhE,EAAQuB,SAC1B,MAEF,KAAKtb,EAAAA,GAAAA,kBACH+d,EAAkBhE,EAAQe,SAC1B,MAEF,KAAK9a,EAAAA,GAAAA,qBACH+d,EAAkBhE,EAAQiB,cAC1B,MAEF,KAAKhb,EAAAA,GAAAA,kBACH+d,EAAkBhE,EAAQmB,WAI9B,OAAK6C,EAIE,IACFA,EACHh3C,UAAAA,GALO,KA5COhnB,EA5MyC,IAWvD,IAXwD,OAC5D+9D,EAD4D,SAE5DrrD,EAF4D,eAG5D8sC,EAH4D,QAI5DnI,EAJ4D,WAK5D6kB,EAL4D,aAM5DM,EAN4D,aAO5DD,EAP4D,aAQ5DF,EAR4D,aAS5DD,EAT4D,UAU5Dp1C,GACI,EACJ,MAAM,qBAAEi3C,IAAyBx8D,EAAAA,EAAAA,MAE3BQ,GAAOC,EAAAA,EAAAA,KAEPg8D,GAAoBhiE,EAAAA,EAAAA,KAAQ,KAChC,OAAQ6hE,GACN,KAAK9d,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAE30C,MAAO,YAAa4iB,MAAOjsB,EAAK,iBAClC,CAAEqJ,MAAO,WAAY4iB,MAAOjsB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAEqJ,MAAO,YAAa4iB,MAAOjsB,EAAK,iBAClC,CAAEqJ,MAAO,WAAY4iB,MAAOjsB,EAAK,gBACjC,CAAEqJ,MAAO,SAAU4iB,MAAOjsB,EAAK,kBAGpC,CAACA,EAAM87D,IAEJI,EAAiB,CACrBC,iBAAiC,WAAflC,EAClBmC,kBAAkC,cAAfnC,GAGfoC,EAAaR,GAAcC,GAE3BQ,GAAariE,EAAAA,EAAAA,KAAQ,KACzB,OAAQ6hE,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAOh+C,EAAK,qBACd,KAAKg+C,EAAAA,GAAAA,gBACH,OAAOh+C,EAAK,iBACd,KAAKg+C,EAAAA,GAAAA,oBACH,OAAOh+C,EAAK,4BACd,KAAKg+C,EAAAA,GAAAA,kBACH,OAAOh+C,EAAK,wBACd,KAAKg+C,EAAAA,GAAAA,qBACH,OAAOh+C,EAAK,6BACd,KAAKg+C,EAAAA,GAAAA,kBACH,OAAOh+C,EAAK,eACd,KAAKg+C,EAAAA,GAAAA,iBACH,OAAOh+C,EAAK,gBACd,KAAKg+C,EAAAA,GAAAA,gBACH,OAAOh+C,EAAK,cACd,QACE,UAEH,CAACA,EAAM87D,KAEVloD,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMmnB,GAAkBtiE,EAAAA,EAAAA,KAAQ,KAC9B,GAAQ6hE,IACD9d,EAAAA,GAAAA,gBACH,OAAOh+C,EAAK,gBAIf,CAACA,EAAM87D,IAEJU,EAAwB,MAC5B,OAAQV,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,oCACT,QACE,OAAOA,EAAAA,GAAAA,mCAjBiB,GAqBxBye,EAAuB,MAC3B,OAAQX,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,mCACT,QACE,OAAOA,EAAAA,GAAAA,kCAjBgB,GAqBvB0e,GAAeziE,EAAAA,EAAAA,KAAQ,IACtBsgE,GAAiBD,GAAiBv1C,EAIhCu1C,EAAajvB,QAAO,CAACsxB,EAAQn+D,IAC3Bm+D,GAAU53C,EAAUvmB,GAAUumB,EAAUvmB,GAAQo+D,aAAgB,IACtErC,EAAapjE,QALP,GAMR,CAACmjE,EAAcC,EAAcx1C,IAE1Bm1C,GAAajgE,EAAAA,EAAAA,KAAQ,IACpBmgE,GAAiBD,GAAiBp1C,EAIhCo1C,EAAa9uB,QAAO,CAACsxB,EAAQn+D,IAC3Bm+D,GAAU53C,EAAUvmB,GAAUumB,EAAUvmB,GAAQo+D,aAAgB,IACtExC,EAAajjE,QALP,GAMR,CAACgjE,EAAcC,EAAcr1C,IAE1B83C,GAAyBn9D,EAAAA,EAAAA,KAAa2J,IAC1C2yD,EAAqB,CACnBK,WAAAA,EACApC,WAAY5wD,MAEb,CAACgzD,EAAYL,IAEhB,OACE,0BAAK57D,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAY2jE,GAE3E,mBAAC/M,GAAA,EAAD,CACE9sC,KAAO,cAAa45C,IACpBh3B,QAAS42B,EACT3yD,SAAUuzD,EACVrN,SAAUyK,IAGXsC,GACC,wBAAGn8D,UAAU,mCAAmCsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAY4jE,IAI1F,0BAAKn8D,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAAYqH,EAAK,sBAEpFk8D,EAAeE,mBACd,mBAAC73C,GAAA,EAAD,CACEikC,QAAM,EACNnlD,KAAK,WAEL5C,QAAS,KACP88C,EAAeif,KAGjB,0BAAKp8D,UAAU,iCACZs8D,EAAe,GAAK,2BAAMt8D,UAAU,OAAOsF,IAAI,QAA3B,IAAoCg3D,GACzD,2BAAMt8D,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,wBAItCk8D,EAAeC,kBACd,mBAAC53C,GAAA,EAAD,CACEikC,QAAM,EACNnlD,KAAK,cAEL5C,QAAS,KACP88C,EAAekf,KAGjB,0BAAKr8D,UAAU,iCACZ85D,EAAa,GAAK,2BAAM95D,UAAU,OAAOsF,IAAI,QAA3B,IAA0Cw0D,GAC7D,2BAAM95D,UAAU,SAASJ,EAAK,eAC9B,2BAAMI,UAAU,YAAYJ,EAAK,8BC7NhC,SAAS88D,GAAeC,GACrC,MAAMC,EAAWD,EAAQC,SAASzB,cAC5B0B,EAASF,EAAQG,YAAY3B,cAC7B4B,EAAgBJ,EAAQI,cAAc5B,cAE5C,OAAI0B,EAAOhnE,SAAS,QACX,OAGLgnE,EAAOhnE,SAAS,YAAcgnE,EAAOhnE,SAAS,cACzC,SAELgnE,EAAOhnE,SAAS,SACX,QAELgnE,EAAOhnE,SAAS,WACX,UAELgnE,EAAOhnE,SAAS,UACX,SAELgnE,EAAOhnE,SAAS,WACX,UAELgnE,EAAOhnE,SAAS,SACX,QAELgnE,EAAOhnE,SAAS,kBACX,UAEL+mE,EAAS/mE,SAAS,WACb,UAGPgnE,EAAOhnE,SAAS,WACbgnE,EAAOhnE,SAAS,SAChB+mE,EAAS/mE,SAAS,QAClB+mE,EAAS/mE,SAAS,UAClBknE,EAAclnE,SAAS,SAEnB,QAEL+mE,EAAS/mE,SAAS,WAAaknE,EAAclnE,SAAS,UACjD,SAEL+mE,EAAS/mE,SAAS,UAAYknE,EAAclnE,SAAS,SAChD,QAEL+mE,EAAS/mE,SAAS,YAAcknE,EAAclnE,SAAS,WAClD,UAGF,U,gBCrDT,UAAgB,sBAAwB,uBAAuB,sBAAwB,uBAAuB,WAAa,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,MAAQ,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,IAAM,uBAAuB,aAAe,uBAAuB,WAAa,uBAAuB,aAAe,wBCwIzmD,IAAe6H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAD,KAAsB,IAAb,KAAEirB,GAAW,EAC7D,MAAO,CACL8zC,QAAS9zC,EAAOjrB,EAAOygD,eAAe2e,OAAOn0C,QAAQtwB,KAFrCoF,EA5GqC,IAEnD,IAFoD,OACxDmB,EADwD,QAChD69D,EADgD,QACvC19D,GACb,EACJ,MAAM,sBAAEg+D,EAAF,uBAAyBC,IAA2B99D,EAAAA,EAAAA,MACpDQ,GAAOC,EAAAA,EAAAA,KAEPs9D,GAAmBz2C,EAAAA,GAAAA,GAAiBi2C,GAAS,GAE7CS,GAA+B99D,EAAAA,EAAAA,KAAY,KAC/C29D,EAAsB,CACpBp0C,KAAM8zC,EAAS9zC,KACfw0C,uBAAwBV,EAASU,0BAElC,CAACJ,EAAuBN,IAErBW,GAAyBh+D,EAAAA,EAAAA,KAAY,KACzC29D,EAAsB,CACpBp0C,KAAM8zC,EAAS9zC,KACf00C,iBAAkBZ,EAASY,oBAE5B,CAACN,EAAuBN,IAErBa,GAA8Bl+D,EAAAA,EAAAA,KAAY,KAC9C49D,EAAuB,CAAEr0C,KAAM8zC,EAAS9zC,OACxC5pB,MACC,CAACA,EAAS09D,EAASO,IAEtB,GAAKC,EAqBL,OACE,mBAACr9D,EAAA,EAAD,CACE8jB,OAjBA,0BAAK5jB,UAAU,yBAAyBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChE,mBAAC2H,EAAA,EAAD,CAAQwC,OAAK,EAACvC,MAAM,cAAc5D,KAAK,UAAUoG,UAAW/C,EAAK,SAAUS,QAASpB,GAClF,wBAAGe,UAAU,gBAEf,0BAAKA,UAAU,eAAeJ,EAAK,yBACnC,mBAACM,EAAA,EAAD,CACEC,MAAM,SACNE,QAASm9D,EACTx9D,WAAWmF,EAAAA,EAAAA,GAAe,sBAAuBhP,GAAAA,eAEhDyJ,EAAK,qCAQVd,OAAQA,EACRy8B,gBAAc,EACdt8B,QAASA,EACTe,UAAW7J,GAAAA,uBAEX,0BAAK6J,WAAWmF,EAAAA,EAAAA,GACdhP,GAAAA,WACAgnE,GAAoBhnE,GAAQ,eAAcumE,GAAeS,SAG3D,yBAAIn9D,UAAW7J,GAAAA,MAAcmP,IAAI,QAAQ63D,MAAAA,OAAzC,EAAyCA,EAAkBL,aAC3D,0BAAK98D,UAAW7J,GAAAA,KAAa,aAAYyJ,EAAK,8BAC3C69D,EAAAA,GAAAA,IAAqD,IAA9BN,EAAiBO,WAAmB99D,EAAKowB,OAGnE,yBAAIhwB,UAAW7J,GAAAA,KACb,6BAAKyJ,EAAK,uBACV,6BACGu9D,MAAAA,OADH,EACGA,EAAkBQ,QADrB,IAC+BR,MAAAA,OAD/B,EAC+BA,EAAkBS,WADjD,IAC8D,IAC3DT,MAAAA,OAFH,EAEGA,EAAkBP,SAFrB,IAEgCO,MAAAA,OAFhC,EAEgCA,EAAkBJ,eAGlD,6BAAKn9D,EAAK,sBACV,6BAAKu9D,MAAAA,OAAL,EAAKA,EAAkBU,IAEvB,6BAAKj+D,EAAK,4BACV,6BAAKu9D,GA2Bb,SAAqBR,GACnB,MAAO,CAACA,EAAQmB,OAAQnB,EAAQoB,SAASz4C,OAAOhsB,SAASuW,KAAK,MA5B/BmuD,CAAYb,KAGvC,wBAAGn9D,UAAW7J,GAAAA,MAAcyJ,EAAK,0BAEjC,yBAAII,UAAW7J,GAAAA,cAAsByJ,EAAK,kCAE1C,mBAACukB,GAAA,EAAD,CAAU9jB,QAAS+8D,GACjB,2BAAMp9D,UAAW7J,GAAAA,YAAoByJ,EAAK,iCAC1C,mBAACq+D,GAAA,EAAD,CACEroE,GAAG,iBACHi2B,MAAM,KACND,QAASuxC,EAAiBE,yBAG9B,mBAACl5C,GAAA,EAAD,CAAU9jB,QAASi9D,GACjB,2BAAMt9D,UAAW7J,GAAAA,YAAoByJ,EAAK,gCAC1C,mBAACq+D,GAAA,EAAD,CACEroE,GAAG,eACHi2B,MAAM,KACND,QAASuxC,EAAiBI,wBCkIpC,SAASS,GAAYrB,GACnB,MAAO,CAACA,EAAQmB,OAAQnB,EAAQoB,SAASz4C,OAAOhsB,SAASuW,KAAK,MAGhE,UAAenS,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,GAAuBA,EAAOygD,gBADb1gD,EAnOsC,IAMpD,IANqD,SACzD0S,EADyD,QAEzD2kC,EAFyD,OAGzDgoB,EAHyD,cAIzD1e,EAJyD,QAKzD4f,GACI,EACJ,MAAM,uBACJhB,EADI,2BAEJiB,EAFI,iBAGJC,IACEh/D,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACNw+D,EAAiCC,EAA+BC,IAAkCt8D,EAAAA,EAAAA,MAClGu8D,EAAmBC,IAAwBh6D,EAAAA,EAAAA,OAC3C8jB,EAAaC,EAAWC,IAAcxmB,EAAAA,EAAAA,KAEvCy8D,GAAqB7kE,EAAAA,EAAAA,KAAQ,KAGjC,QAAgBtB,IAAZ2lE,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,IAKC,CAACA,IAEES,GAAyB9kE,EAAAA,EAAAA,KAAQ,KACrC,MAAMorC,EAAU,CAAC,CACfpZ,MAAOjsB,EAAK,QAAS,EAAG,KACxBqJ,MAAO,KACN,CACD4iB,MAAOjsB,EAAK,SAAU,EAAG,KACzBqJ,MAAO,MACN,CACD4iB,MAAOjsB,EAAK,SAAU,EAAG,KACzBqJ,MAAO,MACN,CACD4iB,MAAOjsB,EAAK,SAAU,EAAG,KACzBqJ,MAAO,QAQT,OANIi1D,GAAWA,GAAW,KACxBj5B,EAAQjiC,KAAK,CACX6oB,MAAOjsB,EAAK,QAAS,EAAG,KACxBqJ,MAAO,QAGJg8B,IACN,CAACrlC,EAAMs+D,IAEJV,GAA8Bl+D,EAAAA,EAAAA,KAAaupB,IAC/Cq0C,EAAuB,CAAEr0C,KAAAA,MACxB,CAACq0C,IAEE0B,GAA6Bt/D,EAAAA,EAAAA,KAAY,KAC7Ci/D,IACAJ,MACC,CAACI,EAAgCJ,IAE9BU,GAAyBv/D,EAAAA,EAAAA,KAAaupB,IAC1C41C,EAAqB51C,GACrBL,MACC,CAACA,IAEEs2C,GAA0Bx/D,EAAAA,EAAAA,KAAY,KAC1Cm/D,OAAqBlmE,GACrBkwB,MACC,CAACA,IAEEs2C,GAAyBz/D,EAAAA,EAAAA,KAAa2J,IAC1Cm1D,EAAiB,CAAEY,KAAMzuC,OAAOtnB,OAC/B,CAACm1D,IAEEa,GAAiBplE,EAAAA,EAAAA,KAAQ,KAC7B,MAAMqlE,EAAqB5gB,EAAcpZ,MAAMrc,GAASm0C,EAAOn0C,GAAMs2C,YAErE,OAAOD,EAAqBlC,EAAOkC,QAAsB3mE,IACxD,CAACykE,EAAQ1e,IAEN8gB,GAAqBvlE,EAAAA,EAAAA,KAAQ,IAC1BykD,EAAch5B,QAAQuD,IAAUm0C,EAAOn0C,GAAMs2C,aACnD,CAACnC,EAAQ1e,IACN+gB,EAAmB/lE,QAAQ8lE,EAAmBroE,QAoGpD,OAlGAyc,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAiGR,0BAAKh1C,UAAU,yDACZi/D,IA/FyBtC,EA+FcsC,EA7FxC,0BAAKj/D,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjEqH,EAAK,gCAGR,mBAACukB,GAAA,EAAD,CAAUikC,QAAM,EAACC,UAAQ,EAACplD,KAAO,UAASy5D,GAAeC,kBACvD,0BAAK38D,UAAU,sBAAsBsF,IAAI,QACvC,2BAAMtF,UAAU,QAAQsF,IAAI,QAAQq3D,EAAQG,aAC5C,2BAAM98D,UAAU,wBACb28D,EAAQgB,QADX,IACqBhB,EAAQiB,WAD7B,KAC2CjB,EAAQC,SADnD,IAC8DD,EAAQI,eAEtE,2BAAM/8D,UAAU,YAAY28D,EAAQkB,GAApC,MAA2CG,GAAYrB,MAI1D0C,GACC,mBAACl7C,GAAA,EAAD,CACEnkB,UAAU,2BACViD,KAAK,OACL4F,QAAM,EACNu/C,QAAM,EACN/nD,QAASi+D,GAER1+D,EAAK,2BAuEXy/D,IAhEwBC,EAgEgBF,EA9DzC,0BAAKp/D,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjEqH,EAAK,kBAGP0/D,EAAc7/D,KAuBrB,SAAuB8/D,GACrB,MAAM5C,EAAUK,EAAOuC,GAEvB,OACE,mBAACp7C,GAAA,EAAD,CACEzgB,IAAKi5D,EAAQ9zC,KACbhgB,QAAM,EACNu/C,QAAM,EACNlU,eAAgB,CAAC,CACfj0C,MAAO,YACPgD,KAAM,OACNu3B,aAAa,EACbiuB,QAAS,KACP+U,EAA4Bb,EAAQ9zC,SAGxC5lB,KAAO,UAASy5D,GAAeC,iBAC/Bt8D,QAAS,KAAQw+D,EAAuBlC,EAAQ9zC,QAEhD,0BAAK7oB,UAAU,gCAAgCsF,IAAI,QACjD,2BAAMtF,UAAU,SAAQi2C,EAAAA,GAAAA,IAAoBr2C,EAA2B,IAArB+8D,EAAQe,aAC1D,2BAAM19D,UAAU,SAAS28D,EAAQG,aACjC,2BAAM98D,UAAU,wBACb28D,EAAQgB,QADX,IACqBhB,EAAQiB,WAD7B,KAC2CjB,EAAQC,SADnD,IAC8DD,EAAQI,eAEtE,2BAAM/8D,UAAU,YAAY28D,EAAQkB,GAApC,IAAyCG,GAAYrB,WAzCzD,0BAAK38D,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjEqH,EAAK,8BAGR,4BAAIA,EAAK,kBACT,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,cACL4iB,QAAS05B,EACTvP,SAAUsP,EACVx1D,SAAU61D,KA0CbM,GACC,mBAAC90C,GAAA,EAAD,CACEzrB,OAAQu/D,EACRp/D,QAASs/D,EACTn6D,KAAMxE,EAAK,sBACX4qB,aAAc5qB,EAAK,wBACnB6qB,eAAgBm0C,EAChBjjC,sBAAoB,IAGxB,mBAAC,GAAD,CAAuB78B,OAAQypB,EAAaM,KAAM21C,EAAmBv/D,QAAS6/D,KA5ElF,IAA6BQ,EAhCC3C,MC9IhC,GAAoH,uBCoGpH,IAAej/D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAD,KAAsB,IAAb,KAAEirB,GAAW,EAC7D,MAAM8zC,EAAU9zC,EAAOjrB,EAAOu6D,kBAAkB6E,OAAOn0C,QAAQtwB,EAE/D,MAAO,CACLokE,QAAAA,EACApxC,IAHUoxC,EAAU/+D,EAAOmoB,MAAMrB,KAAKi4C,EAAQ/0C,YAASrvB,EAIvD+X,eAAgB1S,EAAOod,SAASC,MAAM3K,kBANtB3S,EAtEqC,IAMnD,IANoD,OACxDmB,EADwD,QAExD69D,EAFwD,IAGxDpxC,EAHwD,eAIxDjb,EAJwD,QAKxDrR,GACI,EACJ,MAAM,0BAAEugE,IAA8BpgE,EAAAA,EAAAA,MAChCQ,GAAOC,EAAAA,EAAAA,KAEPs9D,GAAmBz2C,EAAAA,GAAAA,GAAiBi2C,GAAS,GAC7C8C,GAAe/4C,EAAAA,GAAAA,GAAiB6E,GAAK,GAErCiyC,GAA8Bl+D,EAAAA,EAAAA,KAAY,KAC9CkgE,EAA0B,CAAE32C,KAAM8zC,EAAS9zC,OAC3C5pB,MACC,CAACA,EAAS09D,EAAS6C,IAEtB,GAAKrC,EAqBL,OACE,mBAACr9D,EAAA,EAAD,CACE8jB,OAjBA,0BAAK5jB,UAAU,yBAAyBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChE,mBAAC2H,EAAA,EAAD,CAAQwC,OAAK,EAACvC,MAAM,cAAc5D,KAAK,UAAUoG,UAAW/C,EAAK,SAAUS,QAASpB,GAClF,wBAAGe,UAAU,gBAEf,0BAAKA,UAAU,eAAeJ,EAAK,qBACnC,mBAACM,EAAA,EAAD,CACEC,MAAM,SACNE,QAASm9D,EACTx9D,WAAWmF,EAAAA,EAAAA,GAAe,sBD9DgV,yBCgEzWvF,EAAK,yBAQVd,OAAQA,EACRy8B,gBAAc,EACdt8B,QAASA,EACTe,UD3EiB,wBC6EjB,mBAAC2b,GAAA,EAAD,CAAQ3b,UD7EyC,uBC6Ef4b,KAAM6jD,EAAcljE,KAAK,QAAQ+T,eAAgBA,EAAgBuL,WAAS,IAC3G4jD,GAAgB,mBAAC/tB,GAAA,EAAD,CAAe1xC,UD9EgD,uBC8EvB2xC,KAAM8tB,IAC/D,0BAAKz/D,UAAW7J,IACbgnE,MAAAA,OADH,EACGA,EAAkB/xC,QAGrB,yBAAIprB,UDnFuI,wBCoFzI,6BAAKJ,EAAK,8BACV,6BACGu9D,MAAAA,OADH,EACGA,EAAkBuC,SAGrB,6BAAK9/D,EAAK,sBACV,6BAAKu9D,MAAAA,OAAL,EAAKA,EAAkBU,IAEvB,6BAAKj+D,EAAK,4BACV,6BAAKu9D,MAAAA,OAAL,EAAKA,EAAkBW,SAEzB,wBAAG99D,UAAW7J,IAAcyJ,EAAK,wCC/FvC,IAAgB,OAAS,uBAAuB,aAAa,uBAAuB,UAAY,wBC+JhG,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEo/D,EAAF,cAAU1e,GAAkB1gD,EAAOu6D,kBACzC,MAAO,CACL6E,OAAAA,EACA1e,cAAAA,EACAhuC,eAAgB1S,EAAOod,SAASC,MAAM3K,kBANxB3S,EA7HsC,IAMpD,IANqD,SACzD0S,EADyD,OAEzD2sD,EAFyD,cAGzD1e,EAHyD,eAIzDhuC,EAJyD,QAKzD0kC,GACI,EACJ,MAAM,0BACJwqB,EADI,8BAEJG,IACEvgE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACNw+D,EAAiCC,EAA+BC,IAAkCt8D,EAAAA,EAAAA,MAClG29D,EAAmBC,IAAwBp7D,EAAAA,EAAAA,OAC3C8jB,EAAaC,EAAWC,IAAcxmB,EAAAA,EAAAA,KAEvC69D,GAA2BxgE,EAAAA,EAAAA,KAAaupB,IAC5C22C,EAA0B,CAAE32C,KAAAA,MAC3B,CAAC22C,IAEEO,GAAyBzgE,EAAAA,EAAAA,KAAY,KACzCi/D,IACAoB,MACC,CAACpB,EAAgCoB,IAE9Bd,GAAyBv/D,EAAAA,EAAAA,KAAaupB,IAC1Cg3C,EAAqBh3C,GACrBL,MACC,CAACA,IAEEw3C,GAA0B1gE,EAAAA,EAAAA,KAAY,KAC1CugE,OAAqBtnE,GACrBkwB,MACC,CAACA,IAcJ,IAAwB62C,EA6CxB,IAxDAljE,EAAAA,EAAAA,KAAU,KACHkiD,EAAcvnD,QACjBi+C,MAED,CAACA,EAASsJ,KAEb9qC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAgDLsJ,EAAcvnD,OAEnB,OACE,0BAAKiJ,UAAU,kCACb,0BAAKA,UAAU,iBACb,mBAACmkB,GAAA,EAAD,CACEnkB,UAAU,2BACViD,KAAK,OACL4F,QAAM,EACNu/C,QAAM,EACN/nD,QAASi+D,GAER1+D,EAAK,oCAER,wBAAGI,WAAWmF,EAAAA,EAAAA,GAAe,4BAA6BhP,GAAAA,YACvDyJ,EAAK,gCA5DU0/D,EA+DJhhB,EA7DhB,0BAAKt+C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjEqH,EAAK,qBAGP0/D,EAAc7/D,KAKrB,SAAuB8/D,GACrB,MAAM5C,EAAUK,EAAOuC,GACjBh0C,GAAM1F,EAAAA,EAAAA,MAAYE,MAAMrB,KAAKi4C,EAAQ/0C,OAE3C,OACE,mBAACzD,GAAA,EAAD,CACEzgB,IAAKi5D,EAAQ9zC,KACbhgB,QAAM,EACNu/C,QAAM,EACNlU,eAAgB,CAAC,CACfj0C,MAAO,YACPgD,KAAM,OACNu3B,aAAa,EACbiuB,QAAS,KACPqX,EAAyBnD,EAAQ9zC,SAIrCxoB,QAAS,IAAMw+D,EAAuBlC,EAAQ9zC,OAE9C,mBAAClN,GAAA,EAAD,CAAQ3b,UAAW7J,GAAAA,OAAeylB,KAAM2P,EAAKhvB,KAAK,OAAO+T,eAAgBA,EAAgBuL,WAAS,IAClG,0BAAK7b,UAAU,gCAAgCsF,IAAI,QACjD,2BAAMtF,UAAU,SAAQi2C,EAAAA,GAAAA,IAAoBr2C,EAA2B,IAArB+8D,EAAQe,aACzDnyC,GAAO,mBAACmmB,GAAA,EAAD,CAAe1xC,UAAW7J,GAAAA,MAAcw7C,KAAMpmB,IACtD,2BAAMvrB,WAAWmF,EAAAA,EAAAA,GAAe,WAAY,QAAS,QAAShP,GAAAA,WAC3DwmE,EAAQvxC,OADX,KACqBuxC,EAAQ+C,QAD7B,KACwC/C,EAAQC,UAEhD,2BAAM58D,UAAU,YAAY28D,EAAQkB,GAApC,IAAyClB,EAAQmB,eAyBrD,mBAACvzC,GAAA,EAAD,CACEzrB,OAAQu/D,EACRp/D,QAASs/D,EACTt+D,MAAOL,EAAK,mCACZwE,KAAMxE,EAAK,yBACX6qB,eAAgBs1C,EAChBpkC,sBAAoB,IAEtB,mBAAC,GAAD,CAAuB78B,OAAQypB,EAAaM,KAAM+2C,EAAmB3gE,QAAS+gE,SCpEpF,IAAetiE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEmoB,OACErB,KAAMoB,GAER8xC,SACElyC,IAAKu6C,GALH,YAOJ76C,EAPI,cAQJnJ,GACEre,EAEJ,MAAO,CACLkoB,UAAAA,EACAm6C,WAAAA,EACA96C,WAAYC,MAAAA,OAAF,EAAEA,EAAaC,QACzBqxB,gBAAiB94C,EAAOsiE,WAAWjpB,aACnCh7B,cAAAA,KAlBcte,EA5D8B,IAQ5C,IAR6C,UACjDmoB,EADiD,WAEjDm6C,EAFiD,WAGjD96C,EAHiD,gBAIjDuxB,EAJiD,cAKjDz6B,EALiD,OAMjDnd,EANiD,QAOjDG,GACI,EACJ,MAAM,mBACJkhE,EADI,aAEJC,IACEhhE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACN4iB,EAAQgD,IAAahhB,EAAAA,EAAAA,IAAS,KAErCrI,EAAAA,EAAAA,KAAU,KACR+jE,EAAmB,CAAEtoB,MAAOp1B,MAC3B,CAACA,EAAQ09C,IAEZ,MAAME,GAAqBxmE,EAAAA,EAAAA,KAAQ,KACjC,MAAMymE,GAAsB16C,EAAAA,GAAAA,IAAO,IAC7BT,GAAc,MACduxB,GAAmB,IACvBpxB,QAAQi7C,GACDA,IAActkD,IAAkBgkD,EAAWpqE,SAAS0qE,MAG7D,OAAOh6C,EAAAA,EAAAA,IAAkB+5C,EAAqBx6C,EAAWrD,GACtD61B,MAAK,CAACkoB,EAASC,KACd,MAAMhuC,GAAY3G,EAAAA,EAAAA,IAAgBhG,EAAU06C,KAAa,GACnDE,GAAa50C,EAAAA,EAAAA,IAAgBhG,EAAU26C,KAAc,GAE3D,OAAOhuC,EAAUkuC,cAAcD,QAElC,CAACT,EAAY96C,EAAYlJ,EAAewG,EAAQi0B,EAAiB5wB,IAE9D86C,GAAmBthE,EAAAA,EAAAA,KAAaglB,IACpC,MAAQ1uB,GAAI2qE,EAAN,WAAiBM,GAAe/6C,EAAUxB,IAAW,GACtDi8C,GAAcM,IAGnBT,EAAa,CAAEG,UAAAA,EAAWM,WAAAA,IAC1B5hE,OACC,CAACmhE,EAAcnhE,EAAS6mB,IAE3B,OACE,mBAAC,GAAD,CACEhnB,OAAQA,EACR0jB,cAAe69C,EACf39C,kBAAmB9iB,EAAK,0BACxB6iB,OAAQA,EACRG,eAAgB6C,EAChB5C,mBAAoB+9C,EACpB3hE,QAASA,QCmDf,IAAevB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE6mB,OACEC,KAAMo8C,GAER/6C,OACErB,KAAMq8C,GAERnJ,SAAS,IACPlyC,GAEFsM,aACEC,WAAYF,IAEZn0B,EAEJ,MAAO,CACLkjE,WAAAA,EACAC,WAAAA,EACAd,WAAYv6C,EACZqM,cAAAA,KArBcp0B,EAlG2C,IAOzD,IAP0D,SAC9D0S,EAD8D,QAE9D2kC,EAF8D,WAG9D8rB,EAH8D,WAI9DC,EAJ8D,WAK9Dd,EAL8D,cAM9DluC,GACI,EACJ,MAAM,eAAEivC,IAAmB5hE,EAAAA,EAAAA,MAErBQ,GAAOC,EAAAA,EAAAA,MACNohE,EAAsBC,EAAoBC,IAAuBl/D,EAAAA,EAAAA,KAClEm/D,GAAqB9hE,EAAAA,EAAAA,KAAaihE,IACtCS,EAAe,CAAET,UAAAA,MAChB,CAACS,IA+CJ,OA7CAxtD,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IA4CR,0BAAKh1C,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,2BACb,wBAAGA,UAAU,6CAA6CsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjFqH,EAAK,sBAIV,0BAAKI,UAAU,2BACZigE,MAAAA,GAAAA,EAAYlpE,OACX,0BAAKiJ,UAAU,oBACZigE,EAAYxgE,KAAI,CAAC8gE,EAAW5iD,IApDzC,SAAuB4iD,EAAmB5iD,EAAWgG,GACnD,MAAM09C,GAAY/iE,EAAAA,EAAAA,IAASiiE,GACrB3kD,EAAOylD,EAAYN,EAAWR,QAAahoE,EAC3C2F,EAAQmjE,OAAoC9oE,EAAxBuoE,EAAWP,GAC/Be,EAAa1lD,GAAQ1d,EAErB8B,GAAYmF,EAAAA,EAAAA,GAChB,wDACAk8D,EAAY,UAAY,SAG1B,OACE,mBAACl9C,GAAA,EAAD,CACEzgB,IAAK68D,EACLvgE,UAAWA,EACX6I,QAAM,EACNu/C,QAAM,EACNlU,eAAgB,CAAC,CACfj0C,MAAO,UACPgD,KAAM,SACNwlD,QAAS,KACP2Y,EAAmBb,MAGvBjqE,MAAQ,SA4B6D,EA5BpCqnB,GAAKuG,EAAAA,SAEtC,mBAACvI,GAAA,EAAD,CAAQpf,KAAK,SAASqf,KAAMA,EAAM1d,KAAMA,IACxC,0BAAK8B,UAAU,eAAesF,IAAI,QAC/Bg8D,GAAc,mBAAC5vB,GAAA,EAAD,CAAeC,KAAM2vB,KACnC1lD,MAAAA,OAAA,EAAAA,EAAMmX,cACL,0BAAK/yB,UAAU,gBAAgBsF,IAAI,SAAQguB,EAAAA,GAAAA,IAA0BvB,EAAenW,EAAKmX,cAE1FnX,IAASA,EAAKmX,aAAenX,EAAK+jC,UACjC,0BAAK3/C,UAAU,mBAAmBsF,IAAI,QAAtC,IAA+CsW,EAAK+jC,YAmBf4hB,CAAchB,EAAW5iD,MAE5DsiD,IAAeA,EAAWlpE,OAC5B,0BAAKiJ,UAAU,aAAasF,IAAI,QAAQ1F,EAAK,cAE7C,mBAAC4kB,GAAA,EAAD,CAAS9gB,IAAI,cAKnB,mBAACy/C,GAAA,EAAD,CACEl8B,SAAO,EACP5mB,QAAS6gE,EACTv+D,UAAW/C,EAAK,iBAEhB,wBAAGI,UAAU,cAEf,mBAAC,GAAD,CACElB,OAAQmiE,EACRhiE,QAASkiE,S,2BC1GjB,MAoDA,IAAezjE,EAAAA,EAAAA,KApD4B,IAErC,IAFsC,SAC1C2S,EAD0C,QAChC2kC,EADgC,eACvBmI,GACf,EACJ,MAAMv9C,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,yCACb,0BAAKA,UAAU,qCACb,mBAACwhE,GAAA,EAAD,CACEliC,OAAQ6S,GAAAA,EAAAA,KACRsvB,WAAYC,GACZnlE,KAAM,IACNyD,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,SAC/ChF,EAAAA,EAAAA,GAAWV,EAAK,uBAAwB,CAAC,SAI9C,0BAAKI,UAAU,sBACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,OAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,6BAE7Bh+C,EAAK,mBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,eAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,eAE7Bh+C,EAAK,oBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,QAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,oCAE7Bh+C,EAAK,0B,4BC3ChB,MAiEA,IAAelC,EAAAA,EAAAA,KA/D4B,IAYrC,IAZsC,SAC1C2S,EAD0C,QAE1C2kC,EAF0C,MAG1ChtB,EAH0C,UAI1CqxB,EAJ0C,6BAK1CsoB,EAL0C,iBAM1CC,EAN0C,YAO1Cl+C,EAAc,mBAP4B,KAQ1Ci5B,EAR0C,YAS1C7sB,EAT0C,WAU1C+xC,EAV0C,SAW1Cr0C,GACI,EACJ,MAAOs0C,EAAiBC,IAAsBt9D,EAAAA,EAAAA,IAAiB,KACxDu9D,EAAoBC,IAAyBx9D,EAAAA,EAAAA,KAAS,GAEvD0rB,GAAe7wB,EAAAA,EAAAA,KAAa4iE,IAC5BN,GAAoBM,IAAgBN,EACtCG,EApBuB,6BAsBvBv0C,EAAS00C,KAEV,CAAC10C,EAAUo0C,IAERO,GAAmB7iE,EAAAA,EAAAA,KAAY,KAC/BuiE,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEEjiE,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,gDACb,0BAAKA,UAAU,qCACb,mBAACoiE,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBN,KAG3C,0BAAKhiE,UAAU,sBACb,mBAACuiE,GAAA,EAAD,CACEv6C,MAAO85C,GAAmB95C,EAC1B20B,KAAMA,EACNj5B,YAAaA,EACbi+C,6BAA8BA,EAC9B7xC,YAAaA,GAAelwB,EAAK,QACjCiiE,WAAYM,EACZ9oB,UAAWA,EACXipB,kBAAmBN,EACnBQ,iBAAkBnyD,EAClBoyD,2BAA4BR,EAC5Bz0C,SAAU2C,SC/BpB,IAAezyB,EAAAA,EAAAA,KAhC0B,IAEnC,IAFoC,SACxC2S,EADwC,QAC9B2kC,EAD8B,QACrB0tB,GACf,EACJ,MAAM9iE,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,yCACb,0BAAKA,UAAU,qCACb,mBAACwhE,GAAA,EAAD,CACEliC,OAAQ6S,GAAAA,EAAAA,KACRsvB,WAAYC,GACZnlE,KAAM,IACNyD,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,QAC/C1F,EAAK,+BAIV,0BAAKI,UAAU,sBACb,mBAACE,EAAA,EAAD,CAAQG,QAASqiE,GAAU9iE,EAAK,sC,gBCPxC,MAAM+iE,GAAyB9/D,EAAAA,GAA0B,IAAM,IAgI/D,IAAenF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAD,KAAsB,IAAb,KAAEqF,GAAW,EAC7D,MAAO,CACL2/D,eAAeC,EAAAA,EAAAA,IAAoBjlE,EAAiB,UAATqF,EAAmB,KAAO,SAFrDtF,EA7H0C,IAWxD,IAXyD,cAC7DilE,EAD6D,KAE7DvhE,EAAO,OAFsD,UAG7Dg4C,EAH6D,MAI7DrxB,EAJ6D,YAK7DtE,EAL6D,cAM7Do/C,EAN6D,WAO7DjB,EAP6D,SAQ7Dr0C,EAR6D,SAS7Dnd,EAT6D,QAU7D2kC,GACI,EAEJ,MAAMxiB,GAAWt3B,EAAAA,EAAAA,IAAyB,OAEnC+N,EAAO85D,IAAYt+D,EAAAA,EAAAA,IAAiB,KACpCu+D,EAAgBC,EAAoBC,IAAwBjhE,EAAAA,EAAAA,IAAQ,IAE3E7F,EAAAA,EAAAA,KAAU,KACHiL,EAAAA,IACH1K,YAAW,KACT61B,EAASn3B,QAAS83B,UACjBwvC,MAEJ,IAEH,MAAMQ,GAAoB7jE,EAAAA,EAAAA,KAAa8F,IACjC4iB,GAAS65C,GACXA,IAGFkB,EAAS39D,EAAEwQ,OAAO3M,SACjB,CAAC44D,EAAY75C,IAYVo7C,GAAa9jE,EAAAA,EAAAA,KAAY,KAC7BkuB,MACC,CAACA,IAEE61C,GAAoB/jE,EAAAA,EAAAA,KAAY,KACpC4jE,IACA11C,MACC,CAACA,EAAU01C,IAERtjE,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,yCACb,0BAAKA,UAAU,qCACb,mBAACsjE,GAAA,EAAD,CAAyB5hC,QAASkhC,EAAermE,KAjEvC,IAiEwDyD,UAAU,2BAG9E,0BAAKA,UAAU,sBACb,2BAAM6pB,OAAO,GAAG2D,SAjCApoB,IACpBA,EAAE0J,iBAEG0jB,EAASn3B,SAIdmyB,EAASvkB,KA2BH,mBAACua,GAAA,EAAD,CACE/a,IAAK+pB,EACLvpB,MAAOA,EACPkoB,UAAW9vB,EACXwqB,MAAOnI,EACPsE,MAAOA,EACP9e,SAAUi6D,IAGXl6D,EACC,mBAAC/I,EAAA,EAAD,CAAQmB,KAAK,SAASg4C,UAAWA,EAAWxwC,QAAM,GAAEjJ,EAAK,aAEzD,mBAACM,EAAA,EAAD,CACEE,QAAM,EACNi5C,UAAWA,EACXxwC,QAAM,EACNxI,QAASyiE,EAAgBG,EAAqBG,GAE7CxjE,EAAK,mBAIXkjE,GACC,mBAAChjE,EAAA,EAAD,CACEE,UAAU,SACVlB,OAAQkkE,EACR/iE,MAAOL,EAAK,wBACZX,QAASikE,IAER5iE,EAAAA,EAAAA,GAAWV,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKI,UAAU,kBACb,mBAACE,EAAA,EAAD,CACEC,MAAM,SACN0I,QAAM,EACNzI,QAAM,EACNJ,UAAU,wBACVK,QAASgjE,GAERzjE,EAAK,kBAER,mBAACM,EAAA,EAAD,CACEC,MAAM,UACN0I,QAAM,EACNzI,QAAM,EACNJ,UAAU,wBACVK,QAAS6iE,GAERtjE,EAAK,mBCrGtB,IAAelC,EAAAA,EAAAA,KAnCoC,IAE7C,IAF8C,SAClD2S,EADkD,QACxC2kC,EADwC,eAC/BmI,GACf,EACJ,MAAMv9C,GAAOC,EAAAA,EAAAA,KAEPmO,GAAc1O,EAAAA,EAAAA,KAAY,KAC9B69C,EAAeS,EAAAA,GAAAA,WACd,CAACT,IAOJ,OALA3pC,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,yCACb,0BAAKA,UAAU,qCACb,mBAAC8nD,GAAA,EAAD,CACEvrD,KAAMgnE,EAAAA,GACNjkC,OAAQ6S,GAAAA,EAAAA,gBACRnyC,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,QAC/C1F,EAAK,wCAIV,0BAAKI,UAAU,sBACb,mBAACE,EAAA,EAAD,CAAQG,QAAS2N,GAAcpO,EAAK,mDCjBtC+iE,GAAyB9/D,EAAAA,GAA0B,IAAM,IAqE/D,IAAenF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLglE,eAAeC,EAAAA,EAAAA,IAAoBjlE,EAAQ,MAC3C4lE,WAAY5lE,EAAO6lE,cAAcC,0BAHjB/lE,EAlEsC,IASpD,IATqD,cACzDilE,EADyD,WAEzDY,EAFyD,UAGzDnqB,EAHyD,MAIzDrxB,EAJyD,WAKzD65C,EALyD,SAMzDr0C,EANyD,SAOzDnd,EAPyD,QAQzD2kC,GACI,EAEJ,MAAMxiB,GAAWt3B,EAAAA,EAAAA,IAAyB,OAEnC+N,EAAO85D,IAAYt+D,EAAAA,EAAAA,IAAiB,KAE3CrI,EAAAA,EAAAA,KAAU,KACHiL,EAAAA,IACH1K,YAAW,KACT61B,EAASn3B,QAAS83B,UACjBwvC,MAEJ,IAEH,MAAM/iE,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMmuB,GAAoB7jE,EAAAA,EAAAA,KAAa8F,IACjC4iB,GAAS65C,GACXA,IAGF,MAAM8B,EAAWv+D,EAAEwQ,OAAO3M,MAAMm3B,MAAM,EAAGojC,GAErCG,EAAS5sE,SAAWysE,GACtBh2C,EAASm2C,GAGXZ,EAASY,GACTv+D,EAAEwQ,OAAO3M,MAAQ06D,IAChB,CAAC9B,EAAY2B,EAAYx7C,EAAOwF,IAEnC,OACE,0BAAKxtB,UAAU,yCACb,0BAAKA,UAAU,qCACb,mBAACsjE,GAAA,EAAD,CAAyB5hC,QAASkhC,EAAermE,KAlDvC,IAkDwDyD,UAAU,2BAG9E,0BAAKA,UAAU,sBACb,mBAACwjB,GAAA,EAAD,CACEva,MAAOA,EACPR,IAAK+pB,EACLrB,UAAU,UACVtF,MAAOjsB,EAAK,iBACZooB,MAAOA,EACP9e,SAAUi6D,IAEX9pB,GAAa,mBAAC70B,GAAA,EAAD,YCsTtB,IAAe9mB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAO6lE,iBADnB9lE,EAvX6B,IAY3C,IAZ4C,cAChDq/C,EADgD,YAEhDmQ,EAFgD,MAGhDrQ,EAHgD,KAIhDH,EAJgD,UAKhDtD,EALgD,MAMhDrxB,EANgD,uBAOhD07C,EAPgD,SAQhDza,EARgD,SAShD54C,EATgD,eAUhD8sC,EAVgD,QAWhDnI,GACI,EACJ,MAAM,eACJ4uB,EADI,cAEJC,EAFI,gBAGJC,EAHI,oBAIJC,EAJI,sBAKJC,EALI,cAMJC,IACE7kE,EAAAA,EAAAA,OAEJhD,EAAAA,EAAAA,KAAU,KACJsnE,IACE1mB,IAAkBY,EAAAA,GAAAA,sBACpBT,EAAeS,EAAAA,GAAAA,2BACNZ,IAAkBY,EAAAA,GAAAA,oBAC3BT,EAAeS,EAAAA,GAAAA,2BAGlB,CAACZ,EAAeG,EAAgBumB,IAEnC,MAAMQ,GAAoB5kE,EAAAA,EAAAA,KAAY,KACpC2pD,EAAS,CAAE5nD,KAAM,UACjB87C,EAAeS,EAAAA,GAAAA,oBACd,CAACqL,EAAU9L,IAERgnB,GAAoB7kE,EAAAA,EAAAA,KAAa2J,IACrCggD,EAAS,CAAE5nD,KAAM,cAAe07C,QAAS9zC,IACzCk0C,EAAeS,EAAAA,GAAAA,2BACd,CAACqL,EAAU9L,IAERinB,GAA2B9kE,EAAAA,EAAAA,KAAY,KAC3C69C,EAAeS,EAAAA,GAAAA,wBACd,CAACT,IAEEknB,GAAwB/kE,EAAAA,EAAAA,KAAa2J,IACzCggD,EAAS,CAAE5nD,KAAM,UAAW07C,QAAS9zC,IACrCk0C,EAAeS,EAAAA,GAAAA,yBACd,CAACqL,EAAU9L,IAERmnB,GAAyBhlE,EAAAA,EAAAA,KAAa2J,IAC1CggD,EAAS,CAAE5nD,KAAM,WAAY07C,QAAS9zC,IACtC26D,EAAe,IACV9mB,EACHF,MAAO3zC,EACPs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,2BAGlB,CAACqL,EAAU9L,EAAgBL,EAAO8mB,IAE/BY,GAA8BllE,EAAAA,EAAAA,KAAa2J,IAC/CggD,EAAS,CAAE5nD,KAAM,qBAAsB07C,QAAS9zC,IAChD46D,EAAc,CACZpnB,gBAAiBxzC,EACjBs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,6BAGlB,CAACimB,EAAe5a,EAAU9L,IAEvBsnB,GAA0BnlE,EAAAA,EAAAA,KAAa2J,IAC3CggD,EAAS,CAAE5nD,KAAM,cAAe07C,QAAS9zC,IACzCk0C,EAAeS,EAAAA,GAAAA,8BACd,CAACqL,EAAU9L,IAERunB,GAA8BplE,EAAAA,EAAAA,KAAY,KAC9C69C,EAAeS,EAAAA,GAAAA,2BACd,CAACT,IAEEwnB,GAA2BrlE,EAAAA,EAAAA,KAAa2J,IAC5CggD,EAAS,CAAE5nD,KAAM,UAAW07C,QAAS9zC,IACrC26D,EAAe,IACV9mB,EACHH,KAAM1zC,EACNs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,2BAGlB,CAACqL,EAAU9L,EAAgBL,EAAO8mB,IAE/BgB,GAAgBtlE,EAAAA,EAAAA,KAAa2J,IACjCg7D,EAAc,CACZxnB,gBAAiBxzC,EACjBs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,cAGlB,CAACqmB,EAAe9mB,IAEb0nB,GAAqCvlE,EAAAA,EAAAA,KAAa2J,IACtDggD,EAAS,CAAE5nD,KAAM,qBAAsB07C,QAAS9zC,IAChD46D,EAAc,CACZpnB,gBAAiBxzC,EACjBs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,yBAGlB,CAACimB,EAAe5a,EAAU9L,IAEvB2nB,GAAsBxlE,EAAAA,EAAAA,KAAa2J,IACvCggD,EAAS,CAAE5nD,KAAM,WAAY07C,QAAS9zC,IACtC86D,EAAoB,IACfjnB,EACHF,MAAO3zC,EACPs7D,UAAW,KACTpnB,EAAeS,EAAAA,GAAAA,2BAGlB,CAACqL,EAAU9L,EAAgBL,EAAOinB,IAE/BgB,GAAkBzlE,EAAAA,EAAAA,KAAa0wB,IACnCg0C,EAAsB,CAAEh0C,KAAAA,MACvB,CAACg0C,IAEEpkE,GAAOC,EAAAA,EAAAA,KAEb,OAAQm9C,GACN,KAAKY,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE8kB,QAASwB,EACT7zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEl6B,YAAa9jB,EAAK,uBAClBkwB,YAAalwB,EAAK,YAClB4tB,SAAU22C,EACV9zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEgkB,iBAAkB9kB,EAAMJ,SACxBh5B,YAAa9jB,EAAK,yBAClBkwB,YAAalwB,EAAK,YAClB4tB,SAAU42C,EACV/zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACE36C,KAAK,OACLygB,YAAa9jB,EAAK,2BAClB4tB,SAAU62C,EACVh0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACE36C,KAAK,QACL5B,KAAK,QACLg4C,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZpgD,YAAa9jB,EAAK,sBAClBkjE,eAAa,EACbt1C,SAAU82C,EACVj0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZt2C,SAAUu3C,EACV10D,SAAUA,GAAY88C,IAAgBvP,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAUA,EACV2kC,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZnnB,KAAMA,EACNnvB,SAAUg3C,EACVn0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEl6B,YAAa9jB,EAAK,+BAClB4tB,SAAUi3C,EACVp0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEgkB,iBAAkB9kB,EAAMJ,SACxBh5B,YAAa9jB,EAAK,yBAClB4tB,SAAUk3C,EACVr0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZ7gE,KAAK,OACLygB,YAAa9jB,EAAK,2BAClB4tB,SAAUm3C,EACVt0D,SAAUA,GAAY88C,IAAgBvP,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZnnB,KAAMA,EACNnvB,SAAUo3C,EACVv0D,SAAUA,EACV2kC,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZnnB,KAAMA,EACNnvB,SAAUq3C,EACVx0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACE36C,KAAK,QACL5B,KAAK,QACLqiB,YAAa9jB,EAAK,sBAClB4tB,SAAUs3C,EACVz0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEvE,UAAWA,EACXrxB,MAAOA,EACP65C,WAAYiC,EACZt2C,SAAUu3C,EACV10D,SAAUA,GAAY88C,IAAgBvP,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,QACE,Y,gBCpRN,SAASgwB,GAA0BpnE,EAAqB89D,GACtD,MAAM,QAAE/D,GAAY/5D,EAAOod,SAC3B,OAAQ0gD,GACN,KAAK9d,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO+Z,EAAQ5kC,YACjB,KAAK6qB,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAO+Z,EAAQW,SACjB,KAAK1a,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO+Z,EAAQa,aACjB,KAAK5a,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,OAAO+Z,EAAQqB,UACjB,KAAKpb,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAO+Z,EAAQuB,SACjB,KAAKtb,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO+Z,EAAQe,SACjB,KAAK9a,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,OAAO+Z,EAAQiB,cACjB,KAAKhb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO+Z,EAAQmB,YAMrB,UAAep7D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE89D,GAAyB,EAClC,MAAO,CACLz/C,cAAere,EAAOqe,cACtBjB,SAAUgqD,GAA0BpnE,EAAQ89D,MAJ9B/9D,EA1HsD,IAQpE,IARqE,YACzEsnE,EADyE,OAEzEvJ,EAFyE,SAGzErrD,EAHyE,eAIzE8sC,EAJyE,QAKzEnI,EALyE,cAMzE/4B,EANyE,SAOzEjB,GACI,EACJ,MAAM,mBAAEkqD,IAAuB9lE,EAAAA,EAAAA,MAEzBQ,GAAOC,EAAAA,EAAAA,KAEPslE,GAAqBtrE,EAAAA,EAAAA,KAAQ,IAC5BmhB,EAIDiqD,EACK,IAAIjqD,EAASm/C,gBAAiBn/C,EAASk/C,cAEvC,IAAIl/C,EAASg/C,gBAAiBh/C,EAAS++C,cANvC,IAQR,CAACkL,EAAajqD,KACVy6B,EAAa2vB,IAAkB3gE,EAAAA,EAAAA,IAAiB,KAChD4gE,EAAeC,IAAoB7gE,EAAAA,EAAAA,KAAkB,IACrD8gE,EAAuBC,IAA4B/gE,EAAAA,EAAAA,IAAmB0gE,GAEvE5Y,GAAsBC,EAAAA,GAAAA,IAA8BlF,EAAAA,IACpDmF,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,IACzDC,GAAe9yD,EAAAA,EAAAA,KAAQ,KAE3B,MAAM8qB,GAAYkB,EAAAA,EAAAA,MAAYpB,MAAMC,KAE9BsB,GAAUJ,EAAAA,GAAAA,IAAO,IAAI2mC,GAAuB,MAAOE,GAA4B,KAClFnnC,QAAQlnB,IACP,MAAMF,EAAOymB,EAAUvmB,GAEvB,OAAOF,IAAQI,EAAAA,EAAAA,IAASJ,EAAKtI,KAAOsI,EAAKtI,KAAOqmB,KAGpD,OAAO2J,EAAAA,GAAAA,IAAO,IACTu/C,MACA7+C,EAAAA,EAAAA,IAAkB1mB,EAAMomB,EAASrB,EAAW8wB,OAEhD,CAAC8W,EAAqBE,EAA0B0Y,EAAoBvlE,EAAM61C,EAAax5B,IAEpFwpD,GAAiCnmE,EAAAA,EAAAA,KAAa2J,IAClDu8D,EAAyBv8D,GACzBq8D,GAAiB,KAChB,IAEGn1C,GAAe7wB,EAAAA,EAAAA,KAAY,KAC/B4lE,EAAmB,CACjBjJ,WAAYR,GAAcC,GAC1BuJ,YAAa3rE,QAAQ2rE,GACrBS,YAAaH,IAGfpoB,EAAeS,EAAAA,GAAAA,WACd,CAACqnB,EAAaM,EAAuBpoB,EAAgBue,EAAQwJ,IAOhE,OALA1xD,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,wBACb,mBAAC2lE,GAAA,EAAD,CACEC,QAASjZ,GAAgB,GACzBtB,YAAaka,EACbja,YAAa7V,EACbowB,kBAAiCjmE,EAAdqlE,EAAmB,yBAAiC,yBACvEa,cAAc,0BACdva,oBAAqBka,EACrBha,eAAgB2Z,IAGlB,mBAACjiB,GAAA,EAAD,CACEl8B,QAASo+C,EACThlE,QAAS8vB,EACTxtB,UAAyB/C,EAAdqlE,EAAmB,cAAsB,eAEpD,wBAAGjlE,UAAU,2BCvDrB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,mBAAE8hC,EAAF,UAAsB6I,GAAc3qC,EACpCuiC,GAAY8H,EAAAA,EAAAA,IAA2BrqC,GAE7C,MAAO,CACL8hC,mBAAAA,EACAqmC,iBAAkBx9B,MAAAA,OAAF,EAAEA,EAAWy9B,gBAC7B7lC,UAAAA,KARcxiC,EAvCqC,IAMnD,IANoD,SACxD0S,EADwD,mBAExDqvB,EAFwD,UAGxDS,EAHwD,iBAIxD4lC,EAJwD,QAKxD/wB,GACI,EACJ,MAAM,mBAAEixB,IAAuB7mE,EAAAA,EAAAA,OAE/BoU,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAM/P,GAAUvF,MAAAA,OAAA,EAAAA,EAAoBpa,QAAQ4a,KACxCA,EAAEgmC,aAAgB/lC,GAAaD,EAAEC,aAClC1gC,KAAKygC,IACC,CACLrU,MAAO,sCAAE,mBAAC4lB,GAAA,EAAD,CAAqBvT,SAAUgC,EAAEhC,WAAagC,EAAEjgC,OACzDgJ,MAAOi3B,EAAEhC,eAEP,GAEA8L,GAAe1qC,EAAAA,EAAAA,KAAa4+B,IAChC+nC,EAAmB,CAAE/nC,SAAAA,MACpB,CAAC+nC,IAEJ,OACE,0BAAKjmE,UAAU,wEACb,mBAACmvD,GAAA,EAAD,CACE9sC,KAAK,0BACL4iB,QAASA,EACTmqB,SAAU2W,EACV78D,SAAU8gC,S,gBCtClB,MAiCA,IAAetsC,EAAAA,EAAAA,KAjC6B,IAEtC,IAFuC,SAC3C2S,EAD2C,QACjC2kC,EADiC,QACxB0tB,GACf,EACJ,MAAM9iE,GAAOC,EAAAA,EAAAA,KAIb,OAFA2T,EAAAA,GAAAA,GAAe,CAAEnD,SAAAA,EAAUoD,OAAQuhC,IAGjC,0BAAKh1C,UAAU,iDACb,0BAAKA,UAAU,qCACb,mBAACwhE,GAAA,EAAD,CACEliC,OAAQ6S,GAAAA,EAAAA,KACRsvB,WAAYC,GACZnlE,KAAM4pE,EAAAA,GACNnmE,UAAU,0BAGZ,wBAAGA,UAAU,4BAA4BsF,IAAI,QAA7C,oIAIA,wBAAGtF,UAAU,iCAAiCsF,IAAI,QAAlD,uGAKF,0BAAKtF,UAAU,sBACb,mBAACE,EAAA,EAAD,CAAQG,QAASqiE,GAAU9iE,EAAK,wBCgBxC,IAAelC,EAAAA,EAAAA,KA1C+B,IAExC,IAFyC,SAC7C2S,EAD6C,QACnC2kC,EADmC,eAC1BmI,GACf,EACJ,MAAMv9C,GAAOC,EAAAA,EAAAA,KAIb,OAFA2T,EAAAA,GAAAA,GAAe,CAAEnD,SAAAA,EAAUoD,OAAQuhC,IAGjC,0BAAKh1C,UAAU,iDACb,0BAAKA,UAAU,qCACb,mBAACwhE,GAAA,EAAD,CACEliC,OAAQ6S,GAAAA,EAAAA,KACRsvB,WAAYC,GACZnlE,KAAM,IACNyD,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,QAAlD,+BAKF,0BAAKtF,UAAU,sBACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,OAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,gCAE7Bh+C,EAAK,oBAER,mBAACukB,GAAA,EAAD,CACElhB,KAAK,eAEL5C,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,kBAE7Bh+C,EAAK,0BCJhB,IAAelC,EAAAA,EAAAA,KAnCuC,IAEhD,IAFiD,SACrD2S,EADqD,QAC3C2kC,GACN,EACJ,MAAMp1C,GAAOC,EAAAA,EAAAA,KAEPumE,GAAY9mE,EAAAA,EAAAA,KAAY,KAC5B01C,GAAQ,KACP,CAACA,IAIJ,OAFAxhC,EAAAA,GAAAA,GAAe,CAAEnD,SAAAA,EAAUoD,OAAQuhC,IAGjC,0BAAKh1C,UAAU,iDACb,0BAAKA,UAAU,qCACb,mBAAC8nD,GAAA,EAAD,CACEvrD,KAAM4pE,EAAAA,GACN7mC,OAAQ6S,GAAAA,EAAAA,gBACRnyC,UAAU,0BAGZ,wBAAGA,UAAU,iCAAiCsF,IAAI,QAAlD,oBAGA,wBAAGtF,UAAU,iCAAiCsF,IAAI,QAAlD,2EAKF,0BAAKtF,UAAU,sBACb,mBAACE,EAAA,EAAD,CAAQG,QAAS+lE,GAAYxmE,EAAK,cCiL1C,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAOi6D,YADnBl6D,EAnMgC,IAU9C,IAV+C,SACnDk6D,EADmD,cAEnD7a,EAFmD,YAGnDmQ,EAHmD,MAInDnlC,EAJmD,SAKnD3X,EALmD,UAMnDgpC,EANmD,eAOnD8D,EAPmD,cAQnDkpB,EARmD,QASnDrxB,GACI,EACJ,MAAM,YACJsxB,EADI,cAEJC,EAFI,iBAGJC,EAHI,mBAIJC,IACErnE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,KAEPqkE,GAAoB5kE,EAAAA,EAAAA,KAAY,KACpC+mE,EAAc,IACdlpB,EAAeS,EAAAA,GAAAA,uBACd,CAACT,EAAgBkpB,IAEdlC,GAAoB7kE,EAAAA,EAAAA,KAAa2J,IACrCo9D,EAAcp9D,GACdk0C,EAAeS,EAAAA,GAAAA,8BACd,CAACT,EAAgBkpB,IAEdjC,GAA2B9kE,EAAAA,EAAAA,KAAY,KAC3CgnE,EAAY,CAAEzO,SAAAA,IACdwO,EAAc,IACdlpB,EAAeS,EAAAA,GAAAA,2BACd,CAACT,EAAgBkpB,EAAexO,EAAUyO,IAEvC9B,GAA8BllE,EAAAA,EAAAA,KAAaonE,IAC/CL,EAAc,KACdM,EAAAA,GAAAA,IAAeD,GAAiB5hC,MAAK,KACnCqY,EAAeS,EAAAA,GAAAA,8BACd,KACD4oB,EAAiB,CACfx+C,MAAOpoB,EAAK,2CAGf,CAACA,EAAMu9C,EAAgBkpB,EAAeG,IAEnC/B,GAA0BnlE,EAAAA,EAAAA,KAAa2J,IAC3Co9D,EAAcp9D,GACdk0C,EAAeS,EAAAA,GAAAA,iCACd,CAACT,EAAgBkpB,IAEdzB,GAAgBtlE,EAAAA,EAAAA,KAAaonE,KACjCC,EAAAA,GAAAA,IAAeD,GAAiB5hC,MAAK,KACnCyhC,IACAppB,EAAeS,EAAAA,GAAAA,YACd,KACD4oB,EAAiB,CACfx+C,MAAOpoB,EAAK,2CAGf,CAAC2mE,EAAe3mE,EAAMu9C,EAAgBqpB,IAEzC,OAAQxpB,GACN,KAAKY,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACE8kB,QAASwB,EACT7zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5Bj+C,YAAa9jB,EAAK,oBAClBkwB,YAAalwB,EAAK,YAClB4tB,SAAU22C,EACV9zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5BC,iBAAkB/J,EAClBn0C,YAAa9jB,EAAK,uBAClBkwB,YAAalwB,EAAK,YAClBy5C,UAAWA,EACX7rB,SAAU42C,EACV/zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEvtC,SAAUA,EACV2kC,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,iBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5B35C,MAAOA,EACP65C,WAAY4E,EACZ/iD,YAAa9jB,EAAK,0CAClB4tB,SAAUg3C,EACVn0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5Bj+C,YAAa9jB,EAAK,+BAClB4tB,SAAUi3C,EACVp0D,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5BC,iBAAkB/J,EAClBn0C,YAAa9jB,EAAK,kDAClBy5C,UAAWA,EACX7rB,SAAU42C,EACV/zD,SAAUA,GAAY,CACpButC,EAAAA,GAAAA,yBACA/nD,SAASs3D,GACXnY,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACE+jB,8BAA4B,EAC5B35C,MAAOA,EAAQpoB,EAAKooB,QAASzvB,EAC7BspE,WAAY4E,EACZ/iD,YAAa9jB,EAAK,0CAClB4tB,SAAUo3C,EACVv0D,SAAUA,EACV2kC,QAASA,IAIf,QACE,Y,cCzNN,MCoFA,IAAet3C,EAAAA,EAAAA,KAvDuB,IAMhC,IANiC,WACrCkpE,EADqC,KAErCrqE,EAAOsqE,EAAAA,GAF8B,UAGrCC,EAHqC,oBAIrCxsB,EAJqC,gBAKrCysB,GACI,EAEJ,MAAM/0D,GAAe9W,EAAAA,EAAAA,IAAuB,OAEtC,aAAE8rE,EAAF,SAAgBC,EAAUC,SAAU3tE,GAAYqtE,EAEhDO,GAAiBC,EAAAA,GAAAA,IAAkBp1D,EAAcsoC,GAEjD//C,GAAYJ,EAAAA,EAAAA,IAAU6sE,GAAgBC,IAAc,aAAYL,EAAWhxE,MAAOuxE,GAClFE,EAAU9sE,KAAehB,GAAW+tE,EAAAA,IACpC75D,GAAuBkwB,EAAAA,GAAAA,GAAmB0pC,GAE1Cr6D,GAASu6D,EAAAA,GAAAA,GAAwBv1D,EAAc+0D,GAErD,OACE,0BAAKt+D,IAAKuJ,EAAchS,UAAU,qBAC/BqnE,EACCJ,EACE,mBAAC5nC,GAAA,EAAD,CACEr/B,UAAWyN,EACX6xB,OAAQ/kC,EACRgC,KAAMA,GAAQyQ,EAAOzQ,KACrBgjC,KAAM4nC,IAAmBL,EACzBtnC,gBAAgBgoC,EAAAA,EAAAA,KAAgC3hD,EAAAA,EAAAA,MAAa+gD,GAC7Da,cAAcV,MAAAA,OAAA,EAAAA,EAAiB1rE,eAAW9C,EAC1CmvE,mBAAoB16D,EAAO26D,SAE3BpuE,EACF,mBAACskC,GAAA,EAAD,CACE79B,WAAWmF,EAAAA,EAAAA,GDhEC,uBCgE4BsI,GACxC5Y,IAAK0F,EACLujC,QAASqpC,IAAmBL,EAC5Bt3D,MAAI,EACJhD,yBAAuB,IAGzB,0BACE3X,IAAK0F,EACLyF,UAAWyN,EACX2D,IAAI,MAIRw2D,EAAAA,GAAAA,IAAgBhB,EAAW3mE,MAAO,O,gBCrD1C,MAoEA,IAAevC,EAAAA,EAAAA,KApEsB,IAM/B,UANgC,WACpCkpE,EADoC,UAEpCE,EAFoC,UAGpC9mE,EAHoC,oBAIpCs6C,EAJoC,QAKpCj6C,GACI,EACJ,MAAMT,GAAOC,EAAAA,EAAAA,KAEPgoE,EAAejB,MAAAA,GAAH,UAAGA,EAAYjlC,gBAAf,aAAG,EAAuB,GAEtCmmC,GAAkBxoE,EAAAA,EAAAA,KAAY,KAC9BuoE,GAAcxnE,EAAQwnE,KACzB,CAACA,EAAcxnE,IAElB,GAAKumE,GAAeA,EAAWjlC,SAqC/B,OACE,mBAACxd,GAAA,EAAD,CACEikC,QAAM,EACNpoD,WAAWmF,EAAAA,EAAAA,GAAe,iBAAkBnF,GAC5CqoD,UAAWwf,EACXxnE,QAASynE,GAtCb,WACE,GAAKlB,EACL,OAAIA,EAAWI,eAAiBa,EAE5B,mBAAC3nE,EAAA,EAAD,CACEyC,UAAWikE,EAAW3mE,MACtBE,MAAM,cACNua,MAAO9a,EAAK8a,OAEZ,mBAAC,GAAD,CACEksD,WAAYA,EACZrqE,KAAMwrE,EAAAA,GACNjB,UAAWA,EACXxsB,oBAAqBA,KAMzB,mBAAC0tB,GAAA,EAAD,CACEtmC,QAASmmC,EACTtrE,KAAMwrE,EAAAA,GACN9nE,MAAO2mE,EAAW3mE,MAClB6mE,UAAWA,EACXxsB,oBAAqBA,EACrB2tB,eAAa,EACblQ,sBAAoB,EACpB9e,cAAU1gD,IAab2vE,GACD,0BAAKloE,UAAU,uBACb,0BAAKA,UAAU,SAAS4mE,EAAW3mE,OACnC,0BAAKD,UAAU,YAAYJ,EAAK,2BAA4BgnE,EAAW5lC,MAAO,WCoDtF,IAAetjC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAO,KACF4rB,EAAAA,GAAAA,IAAK5rB,EAAOod,SAASC,MAAO,CAC7B,wBACA,uBAEFktD,YAAavqE,EAAO+jC,SAASymC,MAAMC,OACnCC,kBAAmB1qE,EAAO2qE,aAAaH,MAAMC,OAC7CG,gBAAiB5qE,EAAO+jC,SAAS8mC,SACjCzC,gBAAe,UAAEpoE,EAAO2qC,iBAAT,aAAE,EAAkBy9B,mBAVrBroE,EArGgC,IAU9C,IAV+C,SACnD0S,EADmD,YAEnD83D,EAFmD,kBAGnDG,EAHmD,gBAInDE,EAJmD,gBAKnDxC,EALmD,sBAMnD0C,EANmD,mBAOnDC,EAPmD,QAQnD3zB,EARmD,eASnDmI,GACI,EACJ,MAAM,iBACJgH,EADI,eAEJykB,IACExpE,EAAAA,EAAAA,MACEQ,GAAOC,EAAAA,EAAAA,KAGPgpE,GAAqB3tE,EAAAA,EAAAA,IAAuB,OAC1Cs+C,QAASsvB,IAAiCpvB,EAAAA,GAAAA,IAAwB,CAAEC,QAASkvB,IAE/EE,GAAwBzpE,EAAAA,EAAAA,KAAaoiC,IACzCknC,EAAe,CACbI,eAAgBtnC,EAAQsnC,mBAEzB,CAACJ,IAEEK,GAA8B3pE,EAAAA,EAAAA,KAAaqkE,IAC/Cxf,EAAiB,CAAEukB,sBAAuB/E,MACzC,CAACxf,IAEE+kB,GAAiC5pE,EAAAA,EAAAA,KAAaqkE,IAClDxf,EAAiB,CAAEwkB,mBAAoBhF,MACtC,CAACxf,IAEEglB,GAActvE,EAAAA,EAAAA,KAAQ,IAC1BsuE,GAAe/xE,OAAOgzE,QAAO5/C,EAAAA,GAAAA,IAAKg/C,EAAiBL,KAClD,CAACA,EAAaK,IAOjB,OALAh1D,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,kCACb,0BAAKA,UAAU,iBACb,mBAAC2rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,mBACZgsB,QAAS88C,EACT38C,QAASk9C,IAEX,mBAACt9C,GAAA,EAAD,CACEE,MAAOjsB,EAAK,wBACZgsB,QAAS+8C,EACT58C,QAASm9C,IAEX,mBAAC/kD,GAAA,EAAD,CACEnkB,UAAU,OAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,aAC9B36C,KAAK,SAEJrD,EAAK,0BACL0oE,GAAqB,2BAAMtoE,UAAU,gCAAgCsoE,EAAkBvxE,SAEzFivE,GACC,mBAAC7hD,GAAA,EAAD,CACEnkB,UAAU,0BAEVK,QAAS,IAAM88C,EAAeS,EAAAA,GAAAA,gBAE9B,mBAACnM,GAAA,EAAD,CAAqBvT,SAAU8nC,IAC/B,0BAAKhmE,UAAU,SAASJ,EAAK,uBAIlCupE,GACC,0BAAKnpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5DqH,EAAK,+BAER,0BAAK6I,IAAKogE,GACPM,EAAY1pE,KAAKmnE,GAChB,mBAAC,GAAD,CACEljE,IAAKkjE,EAAWhxE,GAChBgxE,WAAYA,EACZtsB,oBAAqBwuB,EACrBzoE,QAAS0oE,OAIf,wBAAG/oE,UAAU,iCAAiCsF,IAAI,SAC/ChF,EAAAA,EAAAA,GAAWV,EAAK,mBAAoB,CAAC,iBCxClD,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,KACF4rB,EAAAA,GAAAA,IAAK5rB,EAAOod,SAASC,MAAO,CAC7B,6BAEFqtD,kBAAmB1qE,EAAO2qE,aAAaH,MAAMC,OAC7CG,gBAAiB5qE,EAAO+jC,SAAS8mC,YAPnB9qE,EA7DmC,IAMjD,IANkD,SACtD0S,EADsD,kBAEtDi4D,EAFsD,gBAGtDE,EAHsD,yBAItDa,EAJsD,QAKtDr0B,GACI,EACJ,MAAM,eAAE4zB,EAAF,iBAAkBzkB,IAAqB/kD,EAAAA,EAAAA,MACvCQ,GAAOC,EAAAA,EAAAA,KAGPgpE,GAAqB3tE,EAAAA,EAAAA,IAAuB,OAC1Cs+C,QAASsvB,IAAiCpvB,EAAAA,GAAAA,IAAwB,CAAEC,QAASkvB,KAErFr1D,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAM+zB,GAAwBzpE,EAAAA,EAAAA,KAAaoiC,IACzCknC,EAAe,CACbI,eAAgBtnC,EAAQsnC,mBAEzB,CAACJ,IAEEU,GAAiChqE,EAAAA,EAAAA,KAAaqkE,IAClDxf,EAAiB,CAAEklB,yBAA0B1F,MAC5C,CAACxf,IAEEolB,GAAkB1vE,EAAAA,EAAAA,KAAQ,IAC9ByuE,GAAqBlyE,OAAOgzE,QAAO5/C,EAAAA,GAAAA,IAAKg/C,EAAiBF,KACxD,CAACA,EAAmBE,IAEvB,OACE,0BAAKxoE,UAAU,kCACZupE,GACC,0BAAKvpE,UAAU,iBACb,mBAAC2rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,wBACZgsB,QAASy9C,EACTt9C,QAASu9C,IAEX,0BAAKtpE,UAAU,OAAOyI,IAAKogE,GACxBU,EAAgB9pE,KAAKmnE,GACpB,mBAAC,GAAD,CACEljE,IAAKkjE,EAAWhxE,GAChBgxE,WAAYA,EACZtsB,oBAAqBwuB,EACrBzoE,QAAS0oE,OAIf,wBAAG/oE,UAAU,iCAAiCsF,IAAI,SAC/ChF,EAAAA,EAAAA,GAAWV,EAAK,gBAAiB,CAAC,iBC7B/C,IAAelC,EAAAA,EAAAA,KArC4B,IAGrC,IAHsC,SAC1C2S,EAD0C,QAE1C2kC,GACI,EACJ,MAAM,gBAAElM,IAAoB1pC,EAAAA,EAAAA,MACtBQ,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,kCACb,0BAAKA,UAAU,qCACb,mBAAC8nD,GAAA,EAAD,CACExoB,OAAQ6S,GAAAA,EAAAA,aACR51C,KAAM,IACNyD,UAAU,oBACVwpE,gBAAc,EACd/pC,QAAQ,IAEV,wBAAGz/B,UAAU,4BAA4BsF,IAAI,QAAQ1F,EAAK,qCAE5D,0BAAKI,UAAU,iBACb,mBAACmkB,GAAA,EAAD,CAEE9jB,QAAS,IAAMyoC,IACf7lC,KAAK,cAEL,0BAAKjD,UAAU,SAAf,+BCbJ07C,GAA0BtlD,OAAO87C,KAAK0L,EAAAA,IAAiB7mD,OAAS,EAGhE0yE,GAAiB,CACrB7rB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGI8rB,GAAmB,CACvB9rB,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,iBAGI+rB,GAAkB,CACtB/rB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGIgsB,GAAkB,CACtBhsB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,gBAGIisB,GAA+B,CACnCjsB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGIksB,GAAkC,CACtClsB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGImsB,GAAgC,CACpCnsB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGIosB,GAA6B,CACjCpsB,EAAAA,GAAAA,gCACAA,EAAAA,GAAAA,gCAGIqsB,GAA4B,CAChCrsB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIssB,GAA6B,CACjCtsB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGIusB,GAAiC,CACrCvsB,EAAAA,GAAAA,oCACAA,EAAAA,GAAAA,oCAGIwsB,GAA8B,CAClCxsB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCA+UF,IAAelgD,EAAAA,EAAAA,KAlUgB,IAQzB,IAR0B,SAC9B2S,EAD8B,cAE9B2sC,EAF8B,aAG9BqtB,EAH8B,gBAI9BC,EAJ8B,eAK9BntB,EAL8B,QAM9BnI,EAN8B,qBAO9Bu1B,GACI,EACJ,MAAOC,EAAYC,ItD7EZC,EAAAA,GAAAA,GAAW7tB,GAAcL,KsD8EzBmuB,EAAiBC,IAAsBnmE,EAAAA,EAAAA,IAAiB,IAEzD2oD,GAAc9tD,EAAAA,EAAAA,KAAaurE,KACD,IAA1BA,GAMF7tB,IAAkBY,EAAAA,GAAAA,qBACfZ,IAAkBY,EAAAA,GAAAA,mBAClBZ,IAAkBY,EAAAA,GAAAA,+BAErBjhD,YAAW,KACT2tE,EAAgB,CAAEjpE,KAAM,YApHJ,KAyHtB27C,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,qBAUvB5I,IAR4B,WAAtBq1B,EAAa9f,KACfpN,EAAeS,EAAAA,GAAAA,qBAEfT,EAAeS,EAAAA,GAAAA,oBArBjB5I,GAAQ,KA2BT,CACDq1B,EAAa9f,KAAM+f,EACnBttB,EAAehI,EAASmI,IAGpB2tB,GAAmBxrE,EAAAA,EAAAA,KAAY,KACnCgrE,EAAgB,CAAEjpE,KAAM,gBACxB+rD,MACC,CAACkd,EAAiBld,IAsPrB,SAAS2d,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACEluB,cAAeA,EACfhI,QAASoY,EACTlQ,aAAc4tB,EACd3tB,eAAgBA,EAChBF,eAAgBotB,EAAarsB,WA5PrC,SAAqCgtB,EAAyBtP,GAC5D,MAAMyP,EAA+C,CACnD,CAACvtB,EAAAA,GAAAA,oBAAqCisB,GAA6Bh0E,SAAS6lE,GAC5E,CAAC9d,EAAAA,GAAAA,iBAAkCksB,GAAgCj0E,SAAS6lE,GAC5E,CAAC9d,EAAAA,GAAAA,qBAAsCmsB,GAA8Bl0E,SAAS6lE,GAC9E,CAAC9d,EAAAA,GAAAA,kBAAmCosB,GAA2Bn0E,SAAS6lE,GACxE,CAAC9d,EAAAA,GAAAA,iBAAkCqsB,GAA0Bp0E,SAAS6lE,GACtE,CAAC9d,EAAAA,GAAAA,mBAAoCssB,GAA2Br0E,SAAS6lE,GACzE,CAAC9d,EAAAA,GAAAA,sBAAuCusB,GAA+Bt0E,SAAS6lE,GAChF,CAAC9d,EAAAA,GAAAA,mBAAoCwsB,GAA4Bv0E,SAAS6lE,IAGtE0P,EAAgB3B,GAAe5zE,SAAS6lE,GACxC2P,EAAmB3B,GAAiB7zE,SAAS6lE,GAC7C4P,EAAkB3B,GAAgB9zE,SAAS6lE,GAC3C6P,EAAkB3B,GAAgB/zE,SAAS6lE,IAC5C0P,GACAC,GACAj1E,OAAO87C,KAAKi5B,GAAqBt1E,SAAS6lE,EAAOj2B,aACjDrvC,OAAOgzE,OAAO+B,GAAqBjmC,MAAMxhC,IAAgB,IAARA,IAEtD,OAAQs5C,GACN,KAAKY,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcT,eAAgBA,EAAgB9sC,SAAUA,EAAU2kC,QAASoY,IAE/E,KAAKxP,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEvtC,SAAUA,GAAY26D,EACtBh2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAU26D,GACLtP,IAAW9d,EAAAA,GAAAA,4BACX8d,IAAW9d,EAAAA,GAAAA,uBACX8d,IAAW9d,EAAAA,GAAAA,eACX8d,IAAW9d,EAAAA,GAAAA,aACX2tB,GAAmBD,EACxBt2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBvtC,SAAU26D,EAAgBh2B,QAASoY,IAE9D,KAAKxP,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CAAqBvtC,SAAU26D,EAAgBh2B,QAASoY,IAE5D,KAAKxP,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBvtC,SAAU26D,EAAgBh2B,QAASoY,IAE9D,KAAKxP,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CAAqBvtC,SAAU26D,EAAgBh2B,QAASoY,IAE5D,KAAKxP,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAU26D,GAAkBO,EAC5Bv2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBvtC,SAAU26D,EAAgBh2B,QAASoY,IAEzD,KAAKxP,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBvtC,SAAU26D,EAAgBh2B,QAASoY,EAAajQ,eAAgBA,IAEtF,KAAKS,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CAAsBvtC,SAAU26D,EAAgBh2B,QAASoY,IAE7D,KAAKxP,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACET,eAAgBA,EAChB9sC,SAAU26D,GAAkBtP,IAAW9d,EAAAA,GAAAA,2BACvC5I,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,2BACH,OACE,mBAAC4tB,GAAD,CACEn7D,SAAU26D,EACVh2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACEvtC,SAAU26D,EACVh2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACEvtC,SAAU26D,EACVh2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEvtC,SAAU26D,EACVh2B,QAASoY,IAGf,KAAKxP,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACE8d,OAAQ1e,EACRG,eAAgBA,EAChB9sC,SAAU26D,GAAkBG,EAAoBnuB,GAChDhI,QAASoY,IAIf,KAAKxP,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEqnB,aAAW,EACXvJ,OAAQ1e,EACRG,eAAgBA,EAChB9sC,SAAU26D,GAAkBG,EAAoBnuB,GAChDhI,QAASoY,IAIf,KAAKxP,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACE8d,OAAQ1e,EACRG,eAAgBA,EAChB9sC,SAAU26D,EACVh2B,QAASoY,IAIf,KAAKxP,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEZ,cAAeA,EACfmQ,YAAauO,EACb5e,MAAOutB,EACPphB,SAAUqhB,EACVj6D,SAAU26D,EACV7tB,eAAgBA,EAChBnI,QAASoY,IAIf,KAAKxP,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEZ,cAAeA,EACfF,MAAO0tB,EACPvhB,SAAUwhB,EACVtd,YAAauO,EACbrrD,SAAU26D,EACV7tB,eAAgBA,EAChBnI,QAASoY,IAIf,KAAKxP,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEZ,cAAeA,EACf6a,SAAU8S,EACVtE,cAAeuE,EACfzd,YAAauO,EACbrrD,SAAU26D,EACV7tB,eAAgBA,EAChBnI,QAASoY,IAIf,QACE,QAcCqe,CAA4BT,EAAgBE,IAKnD,OACE,mBAAC/oD,EAAA,EAAD,CACEvsB,GAAG,WACHysB,KAAMkoD,EAAuB,OAASmB,EAAAA,GACtCtpD,UAAW46B,EACXT,YAAab,IAEZqvB,MCxVP,IAAertE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQynB,QAASF,GAAevnB,EAAOwnB,aAAe,IAC9CV,KAAMoB,EAAW6lD,aAAcC,GAAqBhuE,EAAOmoB,MAEnE,MAAO,CACLD,UAAAA,EACA8lD,iBAAAA,EACAzmD,WAAAA,EACA2M,iBAAkBl0B,EAAOk0B,oBATXn0B,EAtE2B,IAQzC,IAR0C,SAC9C0S,EAD8C,OAE9CiV,EAF8C,UAG9CQ,EAH8C,iBAI9C8lD,EAJ8C,WAK9CzmD,EAL8C,iBAM9C2M,EAN8C,QAO9CkjB,GACI,EACJ,MAAM,SACJngB,EADI,qBAEJg3C,IACEzsE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMhnC,GAAc1O,EAAAA,EAAAA,KAAa1J,IAC/Bi/B,EAAS,CAAEj/B,GAAAA,EAAI0/C,sBAAsB,MACpC,CAACzgB,IAEEjQ,GAAU/qB,EAAAA,EAAAA,KAAQ,KACtB,IAAKsrB,EACH,OAGF,MAAM2mD,GAAcvlD,EAAAA,EAAAA,IAAkBpB,EAAYW,EAAWR,GAE7D,OAAOymD,EAAAA,EAAAA,IAAYD,EAAahmD,EAAW8lD,OAAkBrzE,EAAWu5B,KACvE,CAAC3M,EAAYG,EAAQQ,EAAW8lD,EAAkB95C,KAE9C/O,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB1qB,EAAWqsB,EAAStrB,QAAQgsB,IAE7E,OACE,mBAACzB,GAAA,EAAD,CAAgBC,MAAOf,EAAagB,WAAYf,EAAShjB,UAAU,2BAChE+iB,MAAAA,GAAAA,EAAahsB,OACZgsB,EAAYtjB,KAAK7J,GACf,mBAACuuB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,sBAEVK,QAAS,IAAM2N,EAAYpY,GAC3BiT,QAAShG,EAAAA,IAET,mBAACuhB,GAAA,EAAD,CAAiBE,OAAQ1uB,EAAI+oD,eAAa,EAACpK,WAAW,aAGxDxxB,IAAgBA,EAAYhsB,OAC9B,wBAAGiJ,UAAU,aAAa0D,IAAI,aAAa4B,IAAI,QAC5CggB,EAAOvuB,OAAS,mCAAqC,0BAGxD,mBAACytB,GAAA,EAAD,CAAS9gB,IAAI,YAEf,mBAACy/C,GAAA,EAAD,CACEz/C,IAAI,qBACJujB,SAAO,EACP5mB,QAASwrE,EACTlpE,UAAW/C,EAAK,qBAEhB,wBAAGI,UAAU,+BCoCrB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQynB,QAASqxB,GAAoB94C,EAAOwnB,aAAe,IACnDV,KAAMC,GAAc/mB,EAAO6mB,OAGjCozB,MAAOpC,EADH,eAEJkB,EAFI,cAGJC,EAHI,aAIJC,GACEj5C,EAAOm3C,cACH1vB,QAAS0xB,GAAkBH,GAAiB,IAC5CvxB,QAAS4xB,GAAiBJ,GAAgB,GAElD,MAAO,CACLlyB,UAAAA,EACA+xB,gBAAAA,EACAjB,YAAAA,EACAu2B,YAAar1B,MAAAA,OAAF,EAAEA,EAAgBlyB,MAC7BsyB,cAAAA,EACAE,aAAAA,KApBct5C,EAlG4B,IAa1C,IAb2C,UAC/CqrB,EAD+C,SAE/C3Y,EAF+C,kBAG/C47D,EAH+C,0BAI/CC,EAJ+C,WAK/CC,EAL+C,QAM/Cn3B,EAN+C,UAO/CrwB,EAP+C,gBAQ/C+xB,EAR+C,YAS/CjB,EAT+C,YAU/Cu2B,EAV+C,aAW/C/0B,EAX+C,cAY/CF,GACI,EACJ,MAAM,qBACJq1B,IACEhtE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAMgX,GAAqB1sD,EAAAA,EAAAA,KAAau4C,IACtCu0B,EAAqB,CAAEv0B,MAAAA,MACtB,CAACu0B,IAEEzf,GAAe9yD,EAAAA,EAAAA,KAAQ,KAE3B,MAAMisB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9ByzB,EAAkBzB,GAAkBnwB,EAAAA,EAAAA,IAAkBmwB,EAAiB5wB,EAAW2vB,GAAe,GAEvG,OAAOpvB,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IACFuyB,KACClB,GAAgB,MAChBF,GAAiB,KACpBzxB,QAAQi7C,IACT,MAAM3kD,EAAOkK,EAAUy6C,GACvB,OAAK3kD,IAIGA,EAAKo6B,SAAWp6B,EAAKywD,uBAAwBC,EAAAA,EAAAA,IAAU1wD,OAEjE+I,GACA,EACAsnD,KAED,CAACv1B,EAAiB/xB,EAAW8wB,EAAawB,EAAcF,EAAek1B,IAEpEM,GAAiBjtE,EAAAA,EAAAA,KAAY,MAC7B2sE,EAAkBl1E,QAAUiyB,KAC9BojD,EAAqB,CAAEv0B,MAAO,KAC9Bs0B,OAED,CAACF,EAAkBl1E,OAAQiyB,EAAWojD,EAAsBD,IAE/D,OACE,0BAAKnsE,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAAS20C,EACTryC,UAAU,uBAEV,wBAAG3C,UAAU,qBAEf,6BAAKJ,EAAK,qBAEZ,0BAAKI,UAAU,wBACb,mBAAC2lE,GAAA,EAAD,CACEC,QAASjZ,EACTtB,YAAa4gB,EACb3gB,YAAa7V,EACbowB,kBAAmBjmE,EAAK,iBACxBkmE,cAAc,0BACdzsB,UAAW2yB,EACXzgB,oBAAqB2gB,EACrBzgB,eAAgBO,IAGlB,mBAAC7I,GAAA,EAAD,CACEl8B,QAAS3tB,QAAQ2yE,EAAkBl1E,QAAUiyB,GAC7C3oB,QAASksE,EACT5pE,UAAWqmB,EAAY,2BAA6B,0BAEpD,wBAAGhpB,UAAU,4BCwEvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEgG,SAAU4oE,EACVxkD,MAAOykD,GACL7uE,EAAO8uE,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,KATc9uE,EAlK6B,IAO3C,IAP4C,UAChDqrB,EADgD,SAEhD3Y,EAFgD,UAGhD8/B,EAHgD,QAIhD6E,EAJgD,iBAKhDw3B,EALgD,cAMhDC,GACI,EACJ,MAAM,gBACJE,EADI,cAEJC,IACExtE,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAGV,MAAO/0C,EAAO4sE,IAAYpoE,EAAAA,EAAAA,IAAS,KAC5BqkB,EAAOgkD,IAAYroE,EAAAA,EAAAA,IAAS,KAC5BpM,EAAOgqD,IAAY59C,EAAAA,EAAAA,OACnBujB,EAAOo6B,IAAY39C,EAAAA,EAAAA,MAEpBsoE,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExB5zB,EAAYmzB,IAAqBU,EAAAA,GAAAA,WAEjCC,GAAoB7tE,EAAAA,EAAAA,KAAa8F,IACrC,MAAM,MAAE6D,GAAU7D,EAAE+I,cACdw1D,EAAW16D,EAAMonB,QAAQ,OAAQ,IAEvCw8C,EAASlJ,GAELA,IAAa16D,IACf7D,EAAE+I,cAAclF,MAAQ06D,KAEzB,IAEGyJ,GAA0B9tE,EAAAA,EAAAA,KAAa8F,IAC3C0nE,EAAS1nE,EAAE+I,cAAclF,SACxB,IAEGokE,GAAoB/tE,EAAAA,EAAAA,KAAY,KAC/BW,EAAMlJ,OAKPo5C,EAAUp5C,OAtDgB,IAuD5BqrD,EAAS6qB,GAIXN,EAAgB,CACd1sE,MAAAA,EACA5H,MAAAA,EACA83C,UAAAA,IAZAiS,EAAS2qB,KAcV,CAAC9sE,EAAOkwC,EAAWw8B,EAAiBt0E,EAAO00E,EAAqBE,IAE7DK,GAAsBhuE,EAAAA,EAAAA,KAAY,KACjCW,EAAMlJ,OAKX61E,EAAc,CACZ3sE,MAAAA,EACA6oB,MAAAA,EACAzwB,MAAAA,EACA83C,UAAAA,IARAiS,EAAS4qB,KAUV,CAAC/sE,EAAO2sE,EAAe9jD,EAAOzwB,EAAO83C,EAAW68B,KAEnD5wE,EAAAA,EAAAA,KAAU,KACJowE,IAAqBU,EAAAA,GAAAA,UACvBl4B,GAAQ,KAET,CAACw3B,EAAkBx3B,IAEtB,MAAMu4B,EAAiBd,GAAiB7sE,EAAK6sE,KAC3CzkD,IAAU+kD,GAAuB/kD,IAAUglD,EACvChlD,OACAzvB,GAGN,OACE,0BAAKyH,UAAU,WACb,0BAAKA,UAAU,eACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cAENE,QAAS,IAAM20C,IACfryC,UAAU,8BAEV,wBAAG3C,UAAU,qBAEf,6BAAKJ,EAAKopB,EAAY,aAAe,cAEvC,0BAAKhpB,UAAU,wBACb,mBAACkjD,GAAA,EAAD,CACEh6C,SAAUm5C,EACVpiD,MAAOL,EAAK,cAEd,mBAAC4jB,GAAA,EAAD,CACEva,MAAOhJ,EACPiJ,SAAUikE,EACVthD,MAAOjsB,EAAKopB,EAAY,mBAAqB,aAC7ChB,MAAOA,IAAU+kD,GAAuB/kD,IAAUglD,EAAyBhlD,OAAQzvB,IAEpFywB,GACC,sCACE,mBAACxF,GAAA,EAAD,CACEva,MAAO6f,EACP5f,SAAUkkE,EACVvhD,MAAOjsB,EAAK,oCAEd,wBAAGI,UAAU,QAAQJ,EAAK,qBAI7B2tE,GACC,wBAAGvtE,UAAU,SAASutE,GAGvBp9B,EAAUp5C,OAAS,GAClB,sCACE,yBAAIiJ,UAAU,wBAAwBJ,EAAK,6BAA8BuwC,EAAUp5C,OAAQ,MAE3F,0BAAKiJ,UAAU,mCACZmwC,EAAU1wC,KAAK7J,GACd,mBAACuuB,GAAA,EAAD,CAAUkkC,UAAQ,EAACroD,UAAU,uBAC3B,mBAACokB,GAAA,EAAD,CAAiBE,OAAQ1uB,UAQrC,mBAACutD,GAAA,EAAD,CACEl8B,QAA0B,IAAjBhnB,EAAMlJ,OACfsJ,QAAS2oB,EAAYskD,EAAsBD,EAC3C3jE,SAAU2vC,EACV12C,UAAWqmB,EAAYppB,EAAK,8BAAgC,gBAE3Dy5C,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,2BCxKjBwtE,GAAep3E,OAAO87C,KAAKu7B,EAAAA,IAAmB12E,OAAS,EAsD7D,IAAe2G,EAAAA,EAAAA,KApDe,IAMxB,IANyB,SAC7B2S,EAD6B,UAE7B2Y,GAAY,EAFiB,QAG7BpU,EAH6B,gBAI7B84D,EAJ6B,QAK7B14B,GACI,EACJ,MAAO24B,EAAkBC,IAAuBnpE,EAAAA,EAAAA,IAAmB,IAE7D8nE,GAAiBjtE,EAAAA,EAAAA,KAAY,KACjCouE,EAAgB1kD,EAAYykD,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAACzkD,EAAW0kD,IAEf,OACE,mBAACvrD,EAAA,EAAD,CACEvsB,GAAG,UACHysB,KAAMqpD,EAAAA,GACNnvB,YAAaixB,GACbprD,UAAWxN,IAETi5D,IACA,OAAQj5D,GACN,KAAK64D,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEzkD,UAAWA,EACX3Y,SAAUA,EACV47D,kBAAmB0B,EACnBzB,0BAA2B0B,EAC3BzB,WAAYI,EACZv3B,QAASA,IAGf,KAAKy4B,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEzkD,UAAWA,EACX3Y,SAAUw9D,GAAgBx9D,EAC1B8/B,UAAWw9B,EACX34B,QAASA,IAGf,QACE,c,eClDZ,MA2BA,IAAet3C,EAAAA,EAAAA,KA3BqB,IAA2B,IAA1B,SAAE2S,EAAF,QAAY2kC,GAAc,EAC7D,MAAMp1C,GAAOC,EAAAA,EAAAA,KAOb,OALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQuhC,IAIR,0BAAKh1C,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAAS20C,EACTryC,UAAU,uBAEV,wBAAG3C,UAAU,qBAEf,6BAAKJ,EAAK,mBAEZ,mBAACkuE,GAAA,EAAD,CAAUC,WAAW,WAAW19D,SAAUA,Q,gBCbhD,MAuEA,IAAe3S,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ8mB,KAAMyhC,EAAatS,WAAYm6B,GAAqBpwE,EAAOg2C,YAEnE,MAAO,CACLuS,YAAAA,EACA6nB,iBAAAA,KANcrwE,EAvE+B,IAO7C,IAP8C,OAClDmB,EADkD,OAElDV,EAFkD,YAGlD+nD,EAHkD,iBAIlD6nB,EAJkD,QAKlD/uE,EALkD,oBAMlD6jB,GACI,EACJ,MAAM,gBAAEmrD,IAAoB7uE,EAAAA,EAAAA,MAEtBQ,GAAOC,EAAAA,EAAAA,KAEPquE,GAA2Br0E,EAAAA,EAAAA,KAAQ,IAClCssD,EAIE/vD,OAAO87C,KAAKiU,GAAalb,QAAO,CAACsxB,EAAQve,KAC9C,MAAM,gBAAE0L,EAAF,cAAmBykB,GAAkBhoB,EAAY51B,OAAOytB,IAK9D,OAJI0L,EAAgB7zD,SAASuI,IAAW+vE,MAAAA,GAAAA,EAAet4E,SAASuI,KAC9Dm+D,EAAOv5D,KAAKg7C,GAGPue,IACN,IAVM,IAWR,CAACn+D,EAAQ+nD,KAELioB,EAAmBC,IAAwB5pE,EAAAA,EAAAA,IAAmBypE,GAE/DI,GAAUz0E,EAAAA,EAAAA,KAAQ,KACfm0E,MAAAA,OAAA,EAAAA,EAAkB1oD,QAAQ04B,GAAaA,IAAasJ,EAAAA,KAAe7nD,KAAKu+C,IAAD,CAC5EnyB,MAAOs6B,EAAcA,EAAYnI,GAAU/9C,MAAQ,GACnDgJ,MAAO4jB,OAAOmxB,SACT,IACN,CAACgwB,EAAkB7nB,IAEhBh2B,GAAe7wB,EAAAA,EAAAA,KAAY,KAC/B,MAAMivE,EAAcL,EAAyB5oD,QAAQ1vB,IAAQw4E,EAAkBv4E,SAASD,KAAK6J,IAAI8wB,QAC3Fi+C,EAAWJ,EAAkB9oD,QAAQ1vB,IAAQs4E,EAAyBr4E,SAASD,KAAK6J,IAAI8wB,QAE9F09C,EAAgB,CAAE7vE,OAAAA,EAAQmwE,YAAAA,EAAaC,SAAAA,IACvCvvE,MACC,CAACb,EAAQ6vE,EAAiBC,EAA0BjvE,EAASmvE,IAEhE,GAAKjoB,GAAgB6nB,EAIrB,OACE,mBAACluE,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAASA,EACT6jB,oBAAqBA,EACrB/iB,QAASowB,EACTnwB,UAAU,SACVC,MAAOL,EAAK,gBAEZ,mBAAC6uE,GAAA,EAAD,CACExpC,QAASqpC,EACTlf,SAAUgf,EACVllE,SAAUmlE,EACV3rE,OAAK,IAEP,mBAACxC,EAAA,EAAD,CAAQC,MAAM,UAAUH,UAAU,wBAAwBI,QAAM,EAACC,QAAS8vB,GACvEvwB,EAAK,gBAER,mBAACM,EAAA,EAAD,CAAQF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUW,EAAK,gB,wCCoB/E,SAAS8uE,GAAaC,GACpB,OAAIA,EACK,4BAEF,wBCrHT,IAAIC,GACAr3D,GAEJ,MAAMs3D,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAkBMC,GAAavqE,GAChB,mBAAoBA,EAAIA,EAAEwqE,eAAe,GAAG1iE,QAAU,EAG1D4B,GAAkB1J,IACtB,MAAM8U,EAAS,WAAY9U,EAAIA,EAAE8U,OAASy1D,GAAUvqE,GAEpD,IACGwpE,KAEGA,GAAanuD,SAASrb,EAAEwQ,SAExBg5D,GAAa74E,WAAa,GAAKmkB,GAAU,GAEzC00D,GAAa74E,WAAc64E,GAAajqC,aAAeiqC,GAAa54E,cAAiBkkB,GAAU,EACnG,CACA,GAAI3C,IAA4BnS,EAAEwQ,OAAuBjgB,QAAQ4hB,IAA0B,OAC3FnS,EAAE0J,mBAIN,SAAS+gE,GAA4BzqE,GAC/BypE,GAAazpE,EAAE1B,OArCrB,SAAmBkS,GACjB,KAAKA,GAAYA,aAAkBk6D,aAAc,OAAO,EACxD,MAAM55E,EAAU0f,EACVm6D,EAAU75E,EAAQ65E,QAAQ5U,cAChC,GAAgB,aAAZ4U,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAM1uE,EAAOnL,EAAQ85E,aAAa,QAClC,QAAK3uE,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDyc,QAAQzc,EAAK85D,gBAAkB,EAyBrB8U,CAAU7qE,EAAEwQ,SACtCxQ,EAAE0J,iBAIC,SAASohE,GAAiBC,EAAyBC,GACxDxB,GAAeuB,EACf54D,GAA0B64D,EAE1Bh8E,SAAS4Q,iBAAiB,QAAS8J,GAAgB,CAAEuhE,SAAS,IAC9Dj8E,SAAS4Q,iBAAiB,YAAa8J,GAAgB,CAAEuhE,SAAS,IAClEj8E,SAASk8E,UAAYT,GAGhB,SAASU,KACd3B,QAAer2E,EACfgf,QAA0Bhf,EAC1BnE,SAAS6Q,oBAAoB,QAAS6J,IACtC1a,SAAS6Q,oBAAoB,YAAa6J,IAE1C1a,SAASk8E,UAAY,K,wCC/DvB,MAAME,GAAgBC,EAAAA,GAAkB,GAAK,GAUvCC,IAAKC,EAAAA,EAAAA,GAAuB,4BAqDlC,IAAejzE,EAAAA,EAAAA,KAnDgC,IAEzC,UAF0C,SAC9CwgC,EAD8C,aACpC0yC,EADoC,eACtBC,EADsB,QACNxJ,EADM,qBACGtP,GAC7C,EAEJ,MAAM/lD,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtCX,GAAYJ,EAAAA,EAAAA,GAAU,WAAD,UAAW+jC,EAAS4yC,uBAApB,aAAW,EAA0Bl7E,MAAOyxE,IAEhEppC,EAAa8yC,EAAUC,IAAc/uE,EAAAA,EAAAA,MACrCgvE,EAAmBC,IAAuBjvE,EAAAA,EAAAA,KAE3CkvE,GAAsB9J,IAAY4J,EAClCG,EAAuB93E,QAAQ+tE,GAAW9sE,GAShD,OACE,0BACEyF,UAAW0wE,GAAG,IAAKD,EAAAA,IAAmB,WACtCpwE,QAVJ,WACE,IAAK2R,EAAa3W,QAAS,OAC3B,MAAM,EAAE8W,EAAF,EAAKC,GAAMJ,EAAa3W,QAAQsM,wBAEtCkpE,EAAe3yC,EAASA,SAAU/rB,EAAGC,IAOnC3J,IAAKuJ,EACLq/D,aAAchK,EAAU0J,OAAWx4E,GAElC44E,GACC,0BACEnxE,UAAW0wE,GACT,SACA3Y,GAAwB,WAE1BzhE,MAAQ,0BAAyBs6E,GAAgBJ,UAGpDY,GACC,mBAAC/xC,GAAA,EAAD,CACEC,OAAQ/kC,EACRglC,KAAMtB,EACNwB,QAAM,EACNljC,KAAMi0E,GACNv9B,OAAQi+B,EACRxhE,QAASshE,QC3CbN,IAAKC,EAAAA,EAAAA,GAAuB,oBA2ElC,IAAejzE,EAAAA,EAAAA,KAzEwB,IAQjC,IARkC,mBACtCgiC,EADsC,iBAEtC4xC,EAFsC,eAGtCT,EAHsC,UAItCxP,EAJsC,QAKtCgG,EALsC,cAMtCh7B,EANsC,qBAOtC0rB,GACI,EACJ,MAAM,iBAAEvtB,IAAqBprC,EAAAA,EAAAA,MAEvBmyE,GAAiBr2E,EAAAA,EAAAA,IAAuB,OACvCs2E,EAA2BC,IAA0BxvE,EAAAA,EAAAA,IAAQ,IACpEozC,EAAAA,GAAAA,GAAoBk8B,EAAel2E,SAAUm2E,IAE7CxmE,EAAAA,EAAAA,KAAgB,KACdymE,MACC,CAACA,IAEJ,MAAMC,EAAetsE,IACdmsE,IACU,WAAYnsE,EAAIA,EAAE8U,OAASy1D,GAAUvqE,KAGlDA,EAAE0J,kBAIN,IAAMuyD,GAAciQ,MAAAA,GAAAA,EAAkBv6E,SAAY2oC,EAElD,OACE,0BAAK1/B,UAAW0wE,GAAG,IAAKD,EAAAA,IAAmB,WAAYkB,eAAgBD,EAAaE,YAAaF,GAC/F,0BAAK1xE,UAAW0wE,GAAG,gBACnB,0BAAK1wE,UAAW0wE,GAAG,kBACnB,0BAAK1wE,UAAW0wE,GAAG,kBACjB,0BAAK1wE,UAAW0wE,GAAG,QAAS,CAAC,iBAAkBjoE,IAAK8oE,GACjD7xC,MAAAA,OADH,EACGA,EAAoBjgC,KAAI,CAACy+B,EAAUvgB,KAClC,KAAIugB,EAASgoC,YAAehoC,EAASiC,YAAc43B,KAC5CsJ,GAAeiQ,GAAqBA,EAAiBz7E,SAASqoC,EAASA,WAC9E,OACE,mBAAC,GAAD,CACEx6B,IAAKw6B,EAASA,SACd0yC,aAAcjzD,EACd0pD,QAASA,EACTwJ,eAAgBA,EAChB3yC,SAAUA,EACV65B,qBAAsBA,OAI3B1rB,GAAiB/yC,QAChBomC,EACGpa,QAAQusD,GAAMA,EAAE1xC,aAAemxC,GAAoBA,EAAiBz7E,SAASg8E,EAAE3zC,aAC/EnnC,SAEH,mBAACmJ,EAAA,EAAD,CACEwC,OAAK,EACLvC,MAAM,cACNH,UAAW0wE,GAAG,kBAEdrwE,QAAS,IAAMmqC,EAAiB,CAC9B9G,eAAgB,sBAGlB,wBAAG1jC,UAAU,2BCqS3B,IAAetC,EAAAA,EAAAA,KAhS0B,IA6DnC,kBA7DoC,mBACxCgiC,EADwC,OAExC5gC,EAFwC,QAGxCtI,EAHwC,UAIxC6qE,EAJwC,qBAKxCtJ,EALwC,iBAMxCuZ,EANwC,OAOxCQ,EAPwC,WAQxCC,EARwC,cASxCC,EATwC,cAUxC3lC,EAVwC,SAWxC4lC,EAXwC,QAYxCC,EAZwC,OAaxCC,EAbwC,SAcxCC,EAdwC,UAexClxE,EAfwC,UAgBxCK,EAhBwC,WAiBxCgtC,EAjBwC,eAkBxC8jC,EAlBwC,iBAmBxCC,EAnBwC,QAoBxCC,EApBwC,YAqBxCC,EArBwC,UAsBxCC,EAtBwC,YAuBxCtkC,EAvBwC,WAwBxCukC,EAxBwC,UAyBxCC,EAzBwC,aA0BxCC,EA1BwC,cA2BxChyE,EA3BwC,cA4BxCiyE,EA5BwC,sBA6BxCC,EA7BwC,kBA8BxCC,EA9BwC,oBA+BxCC,EA/BwC,kBAgCxCC,EAhCwC,eAiCxCC,EAjCwC,gBAkCxC3J,EAlCwC,QAmCxC4J,EAnCwC,OAoCxCC,EApCwC,MAqCxCC,EArCwC,QAsCxCxlC,GAtCwC,UAuCxCjsC,GAvCwC,SAwCxC+tC,GAxCwC,SAyCxCluC,GAzCwC,cA0CxC6xE,GA1CwC,gBA2CxCC,GA3CwC,SA4CxCrgC,GA5CwC,OA6CxCsgC,GA7CwC,aA8CxCC,GA9CwC,QA+CxCx0E,GA/CwC,oBAgDxC6jB,GAhDwC,WAiDxC4wD,GAjDwC,aAkDxCC,GAlDwC,WAmDxCC,GAnDwC,UAoDxCC,GApDwC,aAqDxCC,GArDwC,YAsDxCC,GAtDwC,aAuDxCC,GAvDwC,eAwDxCC,GAxDwC,eAyDxCpD,GAzDwC,eA0DxCqD,GA1DwC,WA2DxCC,GA3DwC,gBA4DxCC,IACI,EACJ,MAAM,iBAAEptD,GAAF,eAAoB4hD,GAApB,oBAAoCyL,KAAwBj1E,EAAAA,EAAAA,MAE5Dk1E,IAAUp5E,EAAAA,EAAAA,IAAuB,MAEjCq5E,IAAgBr5E,EAAAA,EAAAA,IAAuB,MACvC0E,IAAOC,EAAAA,EAAAA,KACP20E,KAAenT,GAAciQ,MAAAA,GAAAA,EAAkBv6E,QAC/C09E,GAAgBzB,IAAwBwB,GACxCE,KAAuB,OAAQl+E,GAC/BskB,GAAa45D,GAAkC,GAAbl+E,EAAQZ,IAEzCyxE,GAASsN,GAAaC,KAAiB3yE,EAAAA,EAAAA,KAExC4yE,IAAkBv1E,EAAAA,EAAAA,KAAY,KAClC0nB,GAAiB,CACfxwB,QAASoJ,GAAK,uBAEhBX,OACC,CAACW,GAAMX,GAAS+nB,KAEb8tD,IAA4Bx1E,EAAAA,EAAAA,KAAY,KACvCiqE,IAC0B,IAA3BA,EAAgBxyE,OAClB6xE,GAAe,CACbI,eAAgB,CACd+L,UAAWxL,EAAgB,GAAGwL,aAIlCV,GAAoB,CAClBhM,OAAQkB,EAAgB9pE,KAAKhD,GAAQA,EAAI7G,OAG7CqJ,QACC,CAACsqE,EAAiBtqE,GAASo1E,GAAqBzL,KAE7CoM,GAAcN,GAChB,GJzKC,SACLl+E,EACAy+E,EACAvB,EACAQ,EACAP,GAEA,MAAM1uC,EAAwB,GACxB7gC,GAAO8wE,EAAAA,EAAAA,IAAe1+E,GACtB6B,GAAQC,EAAAA,EAAAA,IAAgB9B,MACvBoC,EAAAA,EAAAA,IAAuBpC,QAA6C+B,GAAlCG,EAAAA,EAAAA,IAAuBlC,IAC1D+yB,GAAU4rD,EAAAA,EAAAA,IAAkB3+E,GAC5B4+E,GAAYn7E,EAAAA,EAAAA,IAAoBzD,EAAS,UACzC6+E,EAAmBh9E,IAAU+8E,IAAaE,EAAAA,EAAAA,IAAuB9+E,KAAa++E,GAAAA,GAC9EC,EAAY94E,OAAO+4E,eAezB,GAbIJ,GACFpwC,EAAQjiC,KAAK,CACX6oB,MAAO,yBACP5oB,KAAM,aACNwlD,QAAS,KACPitB,QAAQC,QAAQP,EAAYQ,GAAAA,GAAkBR,EAAWh7E,EAAAA,GAAAA,SAA0B/B,EAAOwC,SACvFiqC,KAAK+wC,GAAAA,IAERZ,MAAAA,GAAAA,OAKF7wE,EAAM,OAER,MAAMuqE,EAAer1E,SACnBk8E,MAAAA,GAAA,UAAAA,EAAWM,kBAAX,eAAuBC,aACnBP,EAAUM,WAAWC,WAA2BpgF,QAAQ,4BACD,KAAxD6/E,EAAU/vC,WAAWpV,QAAQ,kBAAmB,KAGrD4U,EAAQjiC,KAAK,CACX6oB,MAAO6iD,GAAaC,GACpB1rE,KAAM,OACNwlD,QAAS,KACP,MAAMlpD,GAAay2E,EAAAA,GAAAA,KACnB,GAAIz2E,MAAAA,GAAAA,EAAYxI,QAAUm9E,EACxBA,EAAe30E,QACV,GAAIovE,EACTv6E,SAAS6hF,YAAY,YAChB,CACL,MAAMC,GAAgBplE,EAAAA,EAAAA,GACpBta,OAAS+B,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,GAE9D29E,IAAeC,EAAAA,GAAAA,IAAoBD,EAAcrmE,KAAK,KAAKumE,EAAAA,EAAAA,IAA2B5/E,IAG5Fy+E,MAAAA,GAAAA,OA6BN,OAxBIvB,GACFzuC,EAAQjiC,KAAK,CACX6oB,MAAO,gCACP5oB,KAAM,OACNwlD,QAAS,KACPirB,IAEAuB,MAAAA,GAAAA,OAKF1rD,GAAWoqD,GACb1uC,EAAQjiC,KAAK,CACX6oB,MAAO,yBACP5oB,KAAM,OACNwlD,QAAS,KACPkrB,IAEAsB,MAAAA,GAAAA,OAKChwC,EIwFHoxC,CACA7/E,EAASq+E,GAAiBrC,EAAckB,QAAan7E,EAAW27E,GAAgBP,IAG9E2C,IAAoBh3E,EAAAA,EAAAA,KAAY,IAC7Bo1E,GACHtgF,SAASe,cAAc,+DACvBf,SAASe,cAAe,kEAAiE2lB,SAC5F,CAAC45D,GAAoB55D,KAElBy7D,IAAiBj3E,EAAAA,EAAAA,KACrB,IAAMlL,SAASe,cAAc,8CAC7B,IAGIqhF,IAAiBl3E,EAAAA,EAAAA,KACrB,IAAMlL,SAASe,cAAc,gCAC7B,IAGIshF,IAAYn3E,EAAAA,EAAAA,KAAY,KAAM,MAClC,MAAMo3E,EAA0B7zE,EAAAA,KAAuB,UACjDzO,SAASe,cAA2B,+BADa,aAClD,EAA+Da,eAAiB,EAC/E2gF,EAAgBviF,SAASe,cAA2B,gCACpDyhF,GAAuB/zE,EAAAA,KAA4B6zE,IAClD7zE,EAAAA,KAA2B8zE,MAAAA,OAA5B,EAA4BA,EAAeriF,UAAUmsB,SAAS,kBAC/Dk2D,MAAAA,OAFsB,EAEtBA,EAAe3gF,eAAiB,EAErC,MAAO,CACL6gF,cArIkB,GAsIlBC,gBAAkB1iF,SAASe,cAA2B,iBAAmBa,aACzE+gF,YAAatC,GAtIiB,QAsI6Bl8E,EAC3Dy+E,eAAgBJ,EAAoBF,KAErC,CAACjC,KAEEwC,IAAuB33E,EAAAA,EAAAA,KAAY,KACvCuxE,QAAgBt4E,EAAW,EAAG,KAC7B,CAACs4E,MAEJz0E,EAAAA,EAAAA,KAAU,KACH0C,EAKLnC,YAAW,KACTg4E,OArJqB,KAgJrBC,OAOD,CAAC91E,EAAQ61E,GAAaC,KAEzB,MAAM,UACJpxE,GADI,UACO+F,GADP,iBACkB2tE,GADlB,iBACoCC,GADpC,MACsD7gF,GADtD,UAC6D8gF,GAD7D,WACwEC,KAC1EC,EAAAA,GAAAA,GAAuBxF,EAAQwE,GAAmBC,GAAgBC,GAAgBC,IAQtF,OANAr6E,EAAAA,EAAAA,KAAU,KACR8zE,GAAiBmH,GAAa9C,GAAcl5E,aAAU9C,EAAW,qBAE1Dg4E,KACN,CAAC8G,KAGF,mBAAC/tE,GAAA,EAAD,CACEb,IAAK6rE,GACLx1E,OAAQA,EACRo4E,iBAAkBA,GAClBC,iBAAkBA,GAClB3zE,UAAWA,GACX+F,UAAWA,GACXjT,MAAOA,GACPihF,YAAaH,GACbp3E,WAAWmF,EAAAA,EAAAA,GACT,qBAAsB,QAASsvE,IAAiB,kBAElDx1E,QAASA,GACT6jB,oBAAqBA,IAEpBkwD,GACC,mBAAC,GAAD,CACE1B,iBAAkBA,EAClBT,eAAgBA,GAChBxP,UAAWA,EACX3hC,mBAAoBA,EACpB2nC,QAASA,GACTh7B,cAAeA,EACf0rB,qBAAsBA,IAI1B,0BACE/3D,UAAU,mCACV1J,MAAO8gF,GACP3uE,IAAK8rE,IAEJxB,GAAqB,mBAACtvE,EAAA,EAAD,CAAUR,KAAK,gBAAgB5C,QAAS42E,IAAxC,mBACrBlF,GAAc,mBAACtuE,EAAA,EAAD,CAAUR,KAAK,eAAe5C,QAASmzE,IAAS5zE,GAAK,wBACnEoyE,GACC,mBAACvuE,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAASozE,IAAe7zE,GAAK,4BAExDqyE,GAAY,mBAACxuE,EAAA,EAAD,CAAUR,KAAK,QAAQ5C,QAAS8yE,GAAUvzE,GAAK,UAC3DsyE,GAAW,mBAACzuE,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAAS+yE,GAASxzE,GAAK,SACxDyyE,GACC,mBAAC5uE,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAASizE,IAAgB1zE,GAAK,mBAEzD0yE,GACC,mBAAC7uE,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAASkzE,IAAkB3zE,GAAK,iCAE3D2yE,GAAWyC,GAAYv1E,KAAK0lC,GAC3B,mBAAC1hC,EAAA,EAAD,CAAUC,IAAKyhC,EAAOtZ,MAAO5oB,KAAMkiC,EAAOliC,KAAM5C,QAAS8kC,EAAOsjB,SAAU7oD,GAAKulC,EAAOtZ,UAEvFsmD,GAAU,mBAAC1uE,EAAA,EAAD,CAAUR,KAAK,MAAM5C,QAASgzE,GAAQzzE,GAAK,cACrDwyE,GAAY,mBAAC3uE,EAAA,EAAD,CAAUR,KAAK,QAAQ5C,QAASwtC,IAAUjuC,GAAK,gBAC3D8yE,GAAc,mBAACjvE,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAASwzE,IAAYj0E,GAAK,yBAC9D+yE,GAAa,mBAAClvE,EAAA,EAAD,CAAUR,KAAK,SAAS5C,QAASyzE,IAAel0E,GAAK,sBAClEgzE,GAAgB,mBAACnvE,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAAS0zE,IAAcn0E,GAAK,mBAClEuuC,GACC,mBAAC1qC,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAASuzE,IAChBh0E,GAAhBgB,EAAqB,8BAAsC,uBAG/D2tC,GAAc,mBAAC9qC,EAAA,EAAD,CAAUR,KAAK,UAAU5C,QAASuB,IAAYhC,GAAK,YACjE6yE,GAAa,mBAAChvE,EAAA,EAAD,CAAUR,KAAK,SAAS5C,QAAS6yC,IAAWtzC,GAAK,kBAC9D2B,GAAa,mBAACkC,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAASoB,IAAW7B,GAAK,4BAC3DizE,GAAiBC,KAA2B4B,IAC5C,mBAACjxE,EAAA,EAAD,CACEzD,UAAU,8BACViD,KAAM6vE,EAAwB,gBAAkB,QAChDzyE,QAASyyE,EAAwBmB,GAAiBD,GAClDtqE,WAAWopE,GAAyB,UAACt8E,EAAQ45C,qBAAT,OAAC,EAAuBr5C,SAE5D,2BAAMiJ,UAAU,qCACb8yE,GAAqB,UAAIt8E,EAAQk6C,gBAAZ,OAAI,EAAkB1P,MAC1C6xC,GAAa,UAAIr8E,EAAQ45C,qBAAZ,OAAI,EAAuBr5C,OACpC6I,GACA,yCACA,CAACpJ,EAAQk6C,SAAS1P,MAAOxqC,EAAQ45C,cAAcr5C,SAE/C6I,GAAK,4BAA6BpJ,EAAQk6C,SAAS1P,MAAO,KAE5B,KAAlC,UAAAxqC,EAAQ45C,qBAAR,eAAuBr5C,SAAgBk8E,GACnC3yE,EAAAA,EAAAA,IAAWwrB,EAAAA,EAAAA,IAAgBmnD,EAAkB,KAC5C,UAAAz8E,EAAQ45C,qBAAR,SAAuBr5C,OACtB6I,GAAK,+BAAgCpJ,EAAQ45C,cAAcr5C,OAAQ,KACnE6I,GAAK,oCAIf,0BAAKI,UAAU,WACZizE,MAAAA,OADH,EACGA,EAAmBxzE,KAAKmc,GACvB,mBAACD,GAAA,EAAD,CACEpf,KAAK,QACLqf,KAAMA,QAMf1a,GAAa,mBAACuC,EAAA,EAAD,CAAU+2B,aAAW,EAACv3B,KAAK,SAAS5C,QAASsvC,IAAW/vC,GAAK,WAC1EszE,GACC,sCACE,mBAACsE,GAAA,EAAD,OACEjO,GACA,sCACE,mBAACkO,GAAA,EAAD,CAAUC,QAAM,EAAC13E,UAAU,qBAC3B,mBAACy3E,GAAA,EAAD,CAAUC,QAAM,EAAC13E,UAAU,sBAG9BupE,GAA8C,IAA3BA,EAAgBxyE,QAClC,mBAAC0M,EAAA,EAAD,CAAUk0E,UAAQ,EAACt3E,QAASy0E,GAA2B90E,UAAU,2BAC9DM,EAAAA,EAAAA,GAAWV,GAAK,2BAA4B2pE,EAAgB,GAAGtpE,OAAQ,CAAC,kBAAmB,WAG/FspE,GAAmBA,EAAgBxyE,OAAS,GAC3C,mBAAC0M,EAAA,EAAD,CAAUk0E,UAAQ,EAACt3E,QAASy0E,GAA2B90E,UAAU,2BAC9DM,EAAAA,EAAAA,GAAWV,GAAK,4BAA6B2pE,EAAgBxyE,QAAS,CAAC,sBAK/E29E,IAAsB,mBAACjxE,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAAS8zE,IAAav0E,GAAK,yBACvE80E,IAAsBN,IACrB,mBAAC3wE,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAAS+zE,IAAkBx0E,GAAK,gBChV1Dg4E,GAAa,EAAI/yE,EAAAA,GAkcvB,IAAenH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAsD,cAA7C,QAAEpH,EAAF,gBAAW4K,GAAkC,EACpD,MAAM,SAAEtD,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GACnDw7C,GAAkBy+B,EAAAA,EAAAA,IAAwBj6E,EAAQpH,EAAQ4H,QAC1DF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQpH,EAAQ4H,SAClC,gBAAE05E,EAAF,qBAAmBC,GAAyBn6E,EAAO2qC,WAAa,IAChE,UACJyvC,EADI,SAEJ/F,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJlxE,EALI,UAMJK,EANI,QAOJ2wE,EAPI,WAQJ3jC,EARI,eASJ8jC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,EAbI,YAcJtkC,EAdI,WAeJukC,EAfI,UAgBJC,EAhBI,aAiBJC,GACG90E,IAAYG,EAAAA,EAAAA,IAA4BL,EAAQpH,EAASsH,IAAc,GACtEw1C,EAA+B,WAApBlyC,EACX62E,EAAkC,cAApB72E,EACd4nB,EAAY9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,GAClCg6E,GAAUC,EAAAA,EAAAA,IAAe3hF,GACzBq8E,EAAgBv5E,QAAQ4E,GACzB65E,GACAD,IACAM,EAAAA,EAAAA,IAAYl6E,KACZm6E,EAAAA,EAAAA,IAAa7hF,KACZyhF,GACD/5E,EAAKs+D,cACLt+D,EAAKs+D,cAAgBub,GACrBvhF,EAAQulB,KAAOjH,KAAKC,MAAQ,IAAO+iE,GAClCzW,EAAYnjE,IAAQI,EAAAA,EAAAA,IAASJ,EAAKtI,IAClC0iF,GAAWC,EAAAA,EAAAA,IAAgB/hF,GAC3Bs8E,GAAyBoF,IAAYlvD,IAAcivD,IAAgBK,IAAajX,GAAa7qE,EAAQi6C,aACrG+nC,EAAAA,EAAAA,IAAkBhiF,EAAQi6C,YAAcj6C,EAAQi6C,UAAUgoC,WAC1D1F,EAAoB1R,IAAS,UAAI7qE,EAAQi6C,iBAAZ,iBAAI,EAAmBO,eAAvB,aAAI,EAA4B0nC,MAAMx4C,GAAMA,EAAEy4C,YAC3E73E,GAAcC,EAAAA,EAAAA,IAAyBnD,EAAQpH,GAC/CwK,GAAkBC,EAAAA,EAAAA,IAAsBrD,EAAQpH,EAAQ4H,QACxDw6E,EAAgBt/E,QAAQ9C,EAAQoe,QAAQ2U,SACxCwuC,GAAuB9vB,EAAAA,EAAAA,IAA2BrqC,GAElDi7E,GAAsBC,EAAAA,EAAAA,IAA6Bl7E,EAAQpH,GAC3DuiF,EAA6BF,MAAAA,OAAH,EAAGA,EAAqBp5E,KAAKhD,IAAQu8E,EAAAA,EAAAA,IAAiBp7E,EAAQnB,KACxF8sE,EAAkBwP,MAAAA,GAAAA,EAA4BE,MAAqB3/E,SACrEy/E,OAA6BxgF,EAEjC,MAAO,CACLmnC,mBAAoB9hC,EAAO8hC,mBAC3Bs4C,UAAAA,EACAjG,WAAYkG,EACZjG,cAAeiG,EACfhG,UAAW3+B,IAAa2kC,GAAehG,EACvCE,QAAS8F,GAAe9F,EACxBC,UAAW6F,GAAe7F,EAC1BlxE,UAAAA,EACAK,UAAAA,EACA2wE,SAAU5+B,GAAY4+B,EACtB3jC,WAAY/3C,EAAQuM,sBAAwB/B,IAAoBi3E,GAAe1pC,EAC/E8jC,gBAAiB4F,GAAe5F,EAChCC,kBAAmB2F,GAAe3F,EAClCC,QAASqG,IAAmB93E,GAAeyxE,EAC3CC,aAAcyF,GAAezF,EAC7BC,UAAAA,EACAtkC,aAAcrtC,GAAeqtC,EAC7BukC,YAAa5xE,GAAe4xE,EAC5BC,UAAAA,EACAC,cAAeqF,GAAerF,EAC9Bx5B,gBAAAA,EACAy5B,cAAAA,EACAvB,iBAAkBpzE,MAAAA,GAAAA,EAAMg7E,aAA0Bh7E,MAAAA,GAAhC,UAAgCA,EAAMosC,gBAAtC,WAAoB/xC,EAAY,EAAgB+4E,iBAClEjQ,UAAAA,EACAtJ,qBAAAA,EACAohB,YAAa7/E,QAAQ4E,MAAAA,OAAD,EAACA,EAAMosC,UAC3BwoC,sBAAAA,EACAE,qBAAsBkF,IAAYI,IAAaL,IAAe/5E,MAAAA,OAAA,EAAAA,EAAMtI,MAAOwjF,EAAAA,GAC3ErG,kBAAAA,EACA1mC,eAAgB0rB,KAAyBzrB,EAAAA,EAAAA,IAA+B1uC,GACxEi7E,oBAAAA,EACAtP,gBAAAA,KArFc5rE,EAlZoC,IAyClD,UAzCmD,mBACvD+hC,EADuD,OAEvD5gC,EAFuD,gBAGvDsC,EAHuD,aAIvDi4E,EAJuD,QAKvD7iF,EALuD,oBAMvDqiF,EANuD,gBAOvDtP,EAPuD,MAQvDxqE,EARuD,OASvD+yE,EATuD,QAUvD7yE,EAVuD,oBAWvD6jB,EAXuD,UAYvDk1D,EAZuD,WAavDjG,EAbuD,YAcvDoH,EAduD,cAevDnH,EAfuD,SAgBvDC,EAhBuD,OAiBvDE,EAjBuD,SAkBvDC,EAlBuD,UAmBvDlxE,EAnBuD,UAoBvDK,EApBuD,sBAqBvDuxE,EArBuD,oBAsBvDE,EAtBuD,kBAuBvDD,EAvBuD,QAwBvDb,EAxBuD,iBAyBvDZ,EAzBuD,UA0BvDjQ,EA1BuD,qBA2BvDtJ,EA3BuD,WA4BvDxpB,EA5BuD,cA6BvDlC,EA7BuD,eA8BvDgmC,EA9BuD,iBA+BvDC,EA/BuD,QAgCvDC,EAhCuD,YAiCvDC,EAjCuD,UAkCvDC,EAlCuD,YAmCvDtkC,EAnCuD,WAoCvDukC,EApCuD,UAqCvDC,EArCuD,aAsCvDC,EAtCuD,gBAuCvDx5B,EAvCuD,cAwCvDy5B,GACI,EACJ,MAAM,gBACJyG,EADI,aAEJC,EAFI,WAGJjsC,EAHI,gBAIJrwB,GAJI,YAKJu8D,GALI,cAMJC,GANI,uBAOJC,GAPI,sBAQJC,GARI,kBASJC,GATI,qBAUJ13E,GAVI,2BAWJC,GAXI,WAYJ03E,GAZI,gBAaJC,GAbI,aAcJC,GAdI,qBAeJC,GAfI,aAgBJC,GAhBI,aAiBJtpC,GAjBI,kBAkBJupC,GAlBI,QAmBJC,GAnBI,aAoBJC,GApBI,eAqBJC,GArBI,UAsBJC,KACEl7E,EAAAA,EAAAA,MAEEQ,IAAOC,EAAAA,EAAAA,MACP,qBAAE4N,KAAyBE,EAAAA,GAAAA,GAAkB7O,EAAQgkB,OAAqBvqB,GAAW,IACpF8hC,GAAYkgD,KAAiB91E,EAAAA,EAAAA,KAAS,IACtC3C,GAAmB04E,KAAwB/1E,EAAAA,EAAAA,KAAS,IACpD4Y,GAAmBo9D,KAAwBh2E,EAAAA,EAAAA,KAAS,IACpDi2E,GAAgBC,KAAqBl2E,EAAAA,EAAAA,KAAS,IAC9Cm2E,GAAgBC,GAAcC,KAAiB74E,EAAAA,EAAAA,MAC/C84E,GAAuBC,GAAqBC,KAAwBh5E,EAAAA,EAAAA,KAGrEixE,QAAyC36E,IAAxBsgF,GAAqCv/E,QAAQu/E,EAAoB9hF,SAExFqF,EAAAA,EAAAA,KAAU,KACJy2E,GAAiB/zE,GACnB+6E,GAAW,CAAEz7E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OAEzD,CAACikF,GAAY/6E,EAAQtI,EAAQ4H,OAAQ5H,EAAQZ,GAAIi9E,KAEpDz2E,EAAAA,EAAAA,KAAU,KACJ02E,GAAyBh0E,GAC3B6xC,GAAa,CAAEvyC,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OAE3D,CAACk9E,EAAuBh0E,EAAQ6xC,GAAcn6C,EAAQ4H,OAAQ5H,EAAQZ,MAEzEwG,EAAAA,EAAAA,KAAU,KACJy8E,MAAAA,GAAAA,EAAqB9hF,SAAUwyE,MAAAA,OAAA,EAAAA,EAAiBxyE,UAAW8hF,EAAoB9hF,QACjF8hF,EAAoB3rB,SAASzwD,IAC3B29E,GAAa,CAAEpR,eAAgBvsE,SAGlC,CAACo8E,EAAqBtP,EAAiB6Q,MAE1Ch+E,EAAAA,EAAAA,KAAU,KACH+8E,GAAgB9X,IAAaviE,GAChCm7E,GAAa,CAAE77E,OAAQ5H,EAAQ4H,WAEhC,CAAC+6E,EAAar6E,EAAQuiE,EAAW4Y,GAAczjF,EAAQ4H,SAE1D,MAAM60E,IAAoBp5E,EAAAA,EAAAA,KAAQ,KAAM,UACtC,aAAIrD,EAAQi6C,iBAAZ,iBAAI,EAAmByqC,uBAAvB,OAAI,EAAoCnkF,OAAQ,SAE9C,MAAM+uB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAEpC,iBAAOluB,EAAQi6C,iBAAf,iBAAO,EAAmByqC,uBAA1B,aAAO,EAAoC96C,MAAM,EAAG,GAAG3gC,KAAI,QAAC,OAAE6kB,GAAH,SAAgBwB,EAAUxB,MAASgB,OAAOhsB,SAGvG,IAAK9C,EAAQ45C,cACX,OAIF,MAAMtqB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KACpC,iBAAOluB,EAAQ45C,qBAAf,aAAO,EAAuBhQ,MAAM,EAAG,GAAG3gC,KAAK7J,GAAOkwB,EAAUlwB,KAAK0vB,OAAOhsB,WAC3E,WAAC9C,EAAQi6C,iBAAT,aAAC,EAAmByqC,gBAAiB1kF,EAAQ45C,gBAE1CxvC,GAAgB7B,EAAQA,EAAMS,SAASk5E,MAAMyC,GAAQ/hC,EAAgBvjD,SAASslF,EAAIvlF,MACpFwjD,EAAgBvjD,SAASW,EAAQZ,IAE/Bw+C,IAAe90C,EAAAA,EAAAA,KAAY,KAC/Bi7E,IAAc,GACdC,IAAqB,KACpB,IAEGY,IAAe97E,EAAAA,EAAAA,KAAY,KAC/Bi7E,IAAc,GACdE,IAAqB,KACpB,IAEGY,IAAY/7E,EAAAA,EAAAA,KAAY,KAC5Bi7E,IAAc,GACdt7E,MACC,CAACA,IAEE+C,IAAmB1C,EAAAA,EAAAA,KAAY,KACnCk7E,IAAqB,GACrBv7E,MACC,CAACA,IAEEse,IAAmBje,EAAAA,EAAAA,KAAY,KACnCm7E,IAAqB,GACrBx7E,MACC,CAACA,IAEEq8E,IAAgBh8E,EAAAA,EAAAA,KAAY,KAChCq7E,IAAkB,GAClB17E,MACC,CAACA,IAEEs8E,IAAsBj8E,EAAAA,EAAAA,KAAY,KACtCw7E,KACA77E,MACC,CAAC67E,GAAe77E,IAEbu8E,IAAcl8E,EAAAA,EAAAA,KAAY,KAC9Bg6E,EAAgB,CAAEx+D,UAAWtkB,EAAQZ,KACrCylF,OACC,CAAC/B,EAAiB9iF,EAAQZ,GAAIylF,KAE3BI,IAAan8E,EAAAA,EAAAA,KAAY,KAC7Bi6E,EAAa,CAAEz+D,UAAWtkB,EAAQZ,KAClCylF,OACC,CAAC9B,EAAc/iF,EAAQZ,GAAIylF,KAExBK,IAAYp8E,EAAAA,EAAAA,KAAY,KAC5Bi7E,IAAc,GACdI,IAAkB,KACjB,IAEGgB,IAAcr8E,EAAAA,EAAAA,KAAY,KAC9BguC,EAAW,CAAExyB,UAAWtkB,EAAQZ,GAAI43C,SAAS,IAC7C6tC,OACC,CAAC/tC,EAAY92C,EAAQZ,GAAIylF,KAEtB55D,IAAgBniB,EAAAA,EAAAA,KAAY,KAEhC,GADA+7E,KACIt8E,MAAAA,GAAAA,EAAOS,SAAU,CACnB,MAAMD,EAAaR,EAAMS,SAASC,KAAI,QAAC,GAAE7J,GAAH,SAAYA,KAClDqnB,GAAgB,CAAEyE,WAAYlrB,EAAQ4H,OAAQmB,WAAAA,SAE9C0d,GAAgB,CAAEyE,WAAYlrB,EAAQ4H,OAAQmB,WAAY,CAAC/I,EAAQZ,QAEpE,CAACqnB,GAAiBzmB,EAAS6kF,GAAWt8E,IAEnC68E,IAAoBt8E,EAAAA,EAAAA,KAAY,KACpC+7E,KACA7B,GAAY,CAAE93C,QAASlrC,EAAQoe,QAAQ8sB,YACtC,CAAC25C,GAAW7kF,EAAQoe,QAAQ8sB,QAAS83C,KAElCqC,IAAsBv8E,EAAAA,EAAAA,KAAY,KACtC+7E,KACA5B,GAAc,CAAE/3C,QAASlrC,EAAQoe,QAAQ8sB,YACxC,CAAC25C,GAAW7kF,EAAQoe,QAAQ8sB,QAAS+3C,KAElCqC,IAAmBx8E,EAAAA,EAAAA,KAAY,KACnC+7E,KACAhB,GAAe,CAAEj8E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OAC3D,CAACylF,GAAW7kF,EAAS6jF,KAElB0B,IAAkBz8E,EAAAA,EAAAA,KAAY,KAClC+7E,KACAf,GAAU,CAAEl8E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OACtD,CAACylF,GAAW7kF,EAAS8jF,KAElB0B,IAAsB18E,EAAAA,EAAAA,KAAY,KACtC,MAAM28E,EAASl9E,MAAAA,GAAAA,EAAOS,SAClB,CACAsb,UAAWtkB,EAAQZ,GACnBsmF,gBAAiBn9E,EAAMS,SAASC,KAAI,QAAC,GAAE7J,GAAH,SAAYA,KAChDumF,WAAW,GAEX,CAAErhE,UAAWtkB,EAAQZ,GAAIumF,WAAW,GAExCzC,GAAuBuC,GACvBZ,OACC,CAACA,GAAW7kF,EAAQZ,GAAI8jF,GAAwB36E,IAE7Cq9E,IAA6B98E,EAAAA,EAAAA,KAAY,KAC7Cq6E,GAAsB,CAAEv7E,OAAQ5H,EAAQ4H,OAAQxI,GAAIY,EAAQZ,KAC5DylF,OACC,CAACA,GAAW7kF,EAAQ4H,OAAQ5H,EAAQZ,GAAI+jF,KAErC0C,IAAqB/8E,EAAAA,EAAAA,KAAY,KACrCi7E,IAAc,GACdM,OACC,CAACA,KAEEyB,IAAwBh9E,EAAAA,EAAAA,KAAY,KACxC+7E,KACAvB,GAAgB,CAAE17E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OAC5D,CAACylF,GAAW7kF,EAAQ4H,OAAQ5H,EAAQZ,GAAIkkF,KAErCyC,IAA6Bj9E,EAAAA,EAAAA,KAAY,KAC7C+7E,KACArB,GAAqB,CAAE57E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,OACjE,CAACylF,GAAWrB,GAAsBxjF,EAAQ4H,OAAQ5H,EAAQZ,KAEvD4mF,IAA0Bl9E,EAAAA,EAAAA,KAAayc,IAC3C69D,GAAkB,CAChBx7E,OAAQ5H,EAAQ4H,OAChB0c,UAAWtkB,EAAQZ,GACnB6mF,YAAat5E,KAAKT,MAAMqZ,EAAK+S,UAAY,SAE1C,CAACt4B,EAAQ4H,OAAQ5H,EAAQZ,GAAIgkF,KAE1B8C,IAAqBp9E,EAAAA,EAAAA,KAAaC,IACtC26E,GAAkB,CAAE36E,WAAAA,IACpB87E,OACC,CAACA,GAAWnB,KAETyC,IAAiBr9E,EAAAA,EAAAA,KAAY,MACjCs9E,EAAAA,GAAAA,IAAqB,GAAEhmD,EAAAA,KAAkByiD,GAAiB,KAAI7iF,EAAQ4H,OAAOiyB,QAAQ,IAAK,SAAS75B,EAAQZ,MAC3GylF,OACC,CAAChC,EAAcgC,GAAW7kF,IAEvBqmF,IAAmBv9E,EAAAA,EAAAA,KAAY,MACnCs9E,EAAAA,GAAAA,IAAoBpmF,EAAQoe,QAAQ2U,QAASwJ,aAC7CsoD,OACC,CAACA,GAAW7kF,IAET6L,IAAsB/C,EAAAA,EAAAA,KAAY,OACrCP,MAAAA,OAAA,EAAAA,EAAOS,WAAY,CAAChJ,IAAU02D,SAASiuB,IAClCv6E,GACFuB,GAA2B,CAAE3L,QAAS2kF,IAEtCj5E,GAAqB,CAAE1L,QAAS2kF,OAGpCE,OACC,CAACt8E,EAAOvI,EAAS6kF,GAAWz6E,GAAeuB,GAA4BD,KAEpE46E,IAAgBx9E,EAAAA,EAAAA,KAAY,KAChC,MAAMlI,GAAQoB,EAAAA,EAAAA,IAAgBhC,GAC9B2jF,GAAQ,CAAE4C,IAAK3lF,IACfikF,OACC,CAACA,GAAW7kF,EAAS2jF,KAElB6C,IAAqB19E,EAAAA,EAAAA,KAAY,CAAC4+B,EAA8B/rB,EAAWC,KAC/E2nE,GAAa,CACX37E,OAAQ5H,EAAQ4H,OAAQ0c,UAAWtkB,EAAQZ,GAAIsoC,SAAAA,EAAU/rB,EAAAA,EAAGC,EAAAA,EAAGygC,UAAW+kC,KAE5EyD,OACC,CAACA,GAAW7kF,EAAQ4H,OAAQ5H,EAAQZ,GAAImkF,KAErCkD,IAAmBpjF,EAAAA,EAAAA,KAAQ,KAAOkF,EAAQA,EAAMS,SAAW,CAAChJ,IAAUiJ,KAAI,QAAC,GAAE7J,GAAH,SAAYA,MAAK,CAACmJ,EAAOvI,IAEzG,GAAIwhF,EAGF,YAFAqD,KAKF,MAAM6B,GAAmB,IAAIpoE,KAG7B,OAFAooE,GAAiB3tD,YAAY2tD,GAAiB/uD,cAAgB,GAG5D,0BAAKnuB,WAAWmF,EAAAA,EAAAA,GAAe,uBAAwBsI,KACrD,mBAAC,GAAD,CACEiyB,mBAAoBA,EACpBlpC,QAASA,EACT6qE,UAAWA,EACXtJ,qBAAsBA,EACtB1rB,cAAeA,EACfvtC,OAAQu7B,GACRi3C,iBAAkBA,EAClBQ,OAAQA,EACRgB,sBAAuBA,EACvBE,oBAAqBA,EACrBD,kBAAmBA,EACnBhB,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACV/wE,UAAWA,EACXK,UAAWA,EACX4wE,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACT3jC,WAAYA,EACZ8jC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXtkC,YAAaA,EACbukC,WAAYA,EACZC,UAAWA,EACXC,aAAcA,EACdC,cAAeA,EACfK,eAAgBA,GAChB3J,gBAAiBA,EACjB3oE,cAAeA,GACfqyE,kBAAmBA,GACnBE,QAASqI,GACTpI,OAAQqI,GACRpI,MAAOqI,GACP7tC,QAAS8tC,GACT/5E,UAAW6f,GACXkuB,SAAUyE,GACV3yC,SAAU25E,GACV9H,cAAesI,GACfrI,gBAAiBsI,GACjB3oC,SAAU8oC,GACVxI,OAAQ4I,GACR3I,aAAc4I,GACdp9E,QAASo8E,GACT3H,WAAYiJ,GACZzI,eAAgBwI,GAChB/I,aAAckJ,GACdjJ,WAAYvxE,GACZwxE,UAAWiJ,GACXhJ,aAAcgI,GACd/H,YAAaiH,GACbhH,aAAcsI,GACdzL,eAAgBmM,GAChB/I,eAAgBsI,KAElB,mBAAC,EAAD,CACEz9E,OAAQgD,GACRjE,WAAgC,cAApBuD,EACZnC,QAAS+C,GACTjD,MAAOA,EACPvI,QAASA,IAEX,mBAAC8rB,EAAA,EAAD,CACExjB,OAAQue,GACRpe,QAASse,GACThe,WAAY09E,KAEd,mBAAC,GAAD,CACEn+E,OAAQ47E,GACR5/D,UAAWtkB,EAAQZ,GACnBwI,OAAQ5H,EAAQ4H,OAChBa,QAASq8E,KAEX,mBAAC/wD,GAAA,EAAD,CACEzrB,OAAQi8E,GACR97E,QAASg8E,GACT72E,KAAMxE,GAAK,0BACX4qB,aAAc5qB,GAAK,uBACnB6qB,eAAgBsxD,KAEjB/J,GACC,mBAAC,GAAD,CACElzE,OAAQ87E,GACRvtD,gBAAc,EACdL,WAA2B,IAAfx2B,EAAQulB,KACpBmR,OAAOiwD,EAAAA,GAAAA,IAAcD,IACrB/vD,cAAY,EACZluB,QAASs8E,GACT/tD,SAAUgvD,UC/ZpB,IAAe9+E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLyuC,gBAAgBpE,EAAAA,EAAAA,IAA2BrqC,MAAY0uC,EAAAA,EAAAA,IAA+B1uC,MAHxED,EA3CoD,IAOlE,IAPmE,QACvEnH,EADuE,OAEvEs7E,EAFuE,WAGvEqC,EAHuE,QAIvEl1E,EAJuE,oBAKvE6jB,EALuE,cAMvEupB,GACI,EACJ,MAAM,iBAAE7B,IAAqBprC,EAAAA,EAAAA,OAEtBi7B,EAAD,CAAeghD,IAAap5E,EAAAA,EAAAA,IAAQ,IACpC,qBAAEwL,IAAyBE,EAAAA,GAAAA,GAAkB0sB,EAAYvX,OAAqBvqB,GAAW,GAEzF6kF,GAAqB99E,EAAAA,EAAAA,KAAY,KACrC60E,IACAkH,MACC,CAACA,EAAWlH,IAETkJ,GAAsB/9E,EAAAA,EAAAA,KAAY,KACtC+7E,IACA7wC,IACAvrC,MACC,CAACo8E,EAAWp8E,EAASurC,IAExB,GAAKsnC,EAIL,OACE,0BAAK9xE,WAAWmF,EAAAA,EAAAA,GAAe,uBAAwBsI,IACrD,mBAAC,GAAD,CACE3O,OAAQu7B,EACRy3C,OAAQA,EACRt7E,QAASA,EACTyI,QAASo8E,EACTv4D,oBAAqBu4D,EACrBlH,WAAYiJ,EACZhJ,gBAAiB/nC,EAAgBgxC,OAAsB9kF,S,gBChB/D,MA6IA,IAAemF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA8D,IAArD,YAAE0/E,EAAF,oBAAeC,GAAsC,EAC5D,MAAM58E,GAAqB5C,EAAAA,EAAAA,IAAyBH,IAC9C,OAAEQ,EAAF,SAAUN,GAAa6C,GAAsB,GAC7CzC,EAAOE,IAAUD,EAAAA,EAAAA,IAAWP,EAAQQ,GACpCo/E,EAAct/E,GAAOu/E,EAAAA,EAAAA,IAA4Bv/E,QAAQ3F,EACzDmlF,EAAkBpkF,QACtB4E,GAAQJ,IAAYooB,EAAAA,EAAAA,IAAiBhoB,EAAMJ,KAAa0/E,MAAAA,OAAxD,EAAwDA,EAAaE,kBAEjE3nC,EAAkBz8C,QAAQ8E,KAAWie,EAAAA,EAAAA,IAAqBze,EAAQQ,GAElE4qE,EAAiBsU,EAAcA,EAAYtU,eAC7CuU,EAAsB,CAAExI,UAAWwI,QAAwBhlF,EAEzDquE,EAAaoC,GAAiBgQ,EAAAA,EAAAA,IAAiBp7E,EAAQorE,QAAkBzwE,EACzEolF,EAAe/W,IAAcgX,EAAAA,EAAAA,IAAmBhX,GAEtD,MAAO,CACLiX,uBAAwBvkF,QAAQ8E,KAAW0/E,EAAAA,EAAAA,IAA6BlgF,EAAQQ,GAChFs/E,gBAAAA,EACA3nC,gBAAAA,EACAgoC,gBAAgBC,EAAAA,EAAAA,IAAqBpgF,GACrCgpE,WAAAA,EACA7O,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,GACjD+/E,aAAAA,KAxBchgF,EA3I+B,IAY7C,IAZ8C,OAClDmB,EADkD,YAElDw+E,EAFkD,oBAGlDC,EAHkD,WAIlD3W,EAJkD,gBAKlD8W,EALkD,uBAMlDG,EANkD,eAOlDE,EAPkD,gBAQlDhoC,EARkD,aASlD4nC,EATkD,qBAUlD5lB,EAVkD,QAWlD94D,GACI,EACJ,MAAM,aACJm7E,EADI,iBAEJ6D,EAFI,YAGJ31D,EAHI,iBAIJkiB,IACEprC,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC6rE,GAAkB7rE,EAAAA,EAAAA,IAA0B,MAE5C0E,GAAOC,EAAAA,EAAAA,KAEPq+E,GAAiBrrE,EAAAA,EAAAA,GAAY+zD,GAC7BuX,EAAsBvX,GAAcsX,EAEpCE,EAAUD,MAAAA,OAAH,EAAGA,EAAqBC,QAC/BC,IAAkBF,MAAAA,GAAAA,EAAqBG,gBAAiBX,IAAiB5lB,GAExEwmB,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYZ,IAG9CrkC,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc4nC,WAvCzB,IAuC4D99C,YAAagD,KAErG1C,EAAAA,EAAAA,KAAU,MACJ0C,GAAWq/E,MAAAA,GAAAA,EAAqBx8C,UAClCy4C,EAAa,CACXpR,eAAgBsU,EAAcA,EAAYtU,eAAiB,CAAE+L,UAAWwI,OAG3E,CAACz+E,EAAQw+E,EAAalD,EAAcmD,EAAqBY,IAE5D,MAAMruB,GAAexwD,EAAAA,EAAAA,KAAY,CAACoiC,EAAqBiM,EAAoB+wC,KACzEh9C,EAAU,IACLA,EACHi9C,qBAAqB,GAGnBZ,GAAkBW,EACpBH,GAAiB9B,IACfn0D,EAAY,CAAEoZ,QAAAA,EAASiM,SAAAA,EAAU8uC,YAAAA,IACjCx9E,QAGFqpB,EAAY,CAAEoZ,QAAAA,EAASiM,SAAAA,IACvB1uC,OAED,CAACA,EAASs/E,EAAiBj2D,EAAay1D,IAErCa,GAAoBt/E,EAAAA,EAAAA,KAAY,KACpC,GAAI6+E,EAAqB,CACvB,GAAIE,EAEF,YADA7zC,EAAiB,CAAE9G,eAAgB,mBAGrCu6C,EAAiB,CAAEY,aAAcV,EAAoBvoF,KACrDqJ,OAED,CAACo/E,EAAgBp/E,EAASurC,EAAkB2zC,EAAqBF,IAiBpE,OACE,mBAACn+E,EAAA,EAAD,CACEE,UAAU,kBACVlB,OAAQA,EACRG,QAASA,EACTs8B,gBAAc,EACdt7B,MAAOk+E,GACH79E,EAAAA,EAAAA,GAAW69E,EAAoBl+E,MAAO,CAAC,QAAS,UAAYL,EAAK,uBAEpEu+E,MAAAA,GAAAA,EAAqBx8C,SACpB,sCACE,0BAAKl5B,IAAKuJ,EAAchS,UAAU,0BAChC,0BAAKA,UAAU,2BACb,6BAAQyI,IAAKs+D,EAAiB/mE,UAAU,kBACvCm+E,EAAoBx8C,SAASliC,KAAKiiC,GACjC,mBAACsmC,GAAA,EAAD,CACEtmC,QAASA,EACTnlC,KAAM6hF,EAAUU,EAAAA,GAAmBC,EAAAA,GACnCzkC,oBAAqBA,EACrBj6C,QAASq9E,IAAoBU,EAAUtuB,OAAev3D,EACtD0gD,SAAUvX,EACVqU,gBAAiBA,EACjBgiB,qBAAsBA,EACtBgP,gBAAiBA,QAKzB,0BAAK/mE,UAAU,kBACb,mBAACE,EAAA,EAAD,CACE3D,KAAK,UACLq/B,OAAK,EACLz7B,MAAOg+E,EAAoBG,cAAgB,SAAW,UACtDj4C,QAASg4C,EACT/3C,oBAAqB+3C,EACrBh+E,QAASu+E,GAlDI,MACvB,IAAKT,EAAqB,OAAOv+E,EAAK,WACtC,GAAIy+E,EACF,OAAOz+E,EAAK,wBAAyBu+E,EAAoBl+E,OAG3D,MAAM++E,EAASZ,EAAU,QAAU,UAEnC,OAAOx+E,EACLu+E,EAAoBG,cAAiB,qBAAoBU,SAAiB,kBAAiBA,SAC3Fb,EAAoBn9C,MACpB,MAyCSi+C,MAKP,mBAACz6D,GAAA,EAAD,MAEDg6D,OCxLP,IAAgB,KAAO,uBAAuB,KAAO,wBCoErD,IAAe9gF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA+C,IAAtC,kBAAE0qE,GAAoC,EAG7C,MAAO,CACLiB,gBAHsBjB,MAAAA,OAAH,EAAGA,EAAmB7oE,KAAK7J,GAAOgI,EAAO+jC,SAAS8mC,SAAS7yE,QAFhE+H,EA1CoC,IAGlD,IAHmD,gBACvD4rE,EADuD,QAEvDtqE,GACI,EACJ,MAAM,eAAE2pE,IAAmBxpE,EAAAA,EAAAA,MAGrB8/E,GAAsBhkF,EAAAA,EAAAA,IAAuB,OAC3Cs+C,QAASsvB,IAAiCpvB,EAAAA,GAAAA,IAAwB,CAAEC,QAASulC,IAE/EC,GAAsBtsE,EAAAA,EAAAA,GAAY02D,GAClC6V,EAA2B7V,GAAmB4V,EAE9CE,GAAiB//E,EAAAA,EAAAA,KAAaoiC,IAClCknC,EAAe,CACbI,eAAgBtnC,EAAQsnC,mBAEzB,CAACJ,IAEJ,OACE,mBAAC9oE,EAAA,EAAD,CACEhB,OAAQxF,QAAQiwE,GAChBvpE,UAAW7J,GAAAA,KACX8I,QAASA,EACTs8B,gBAAc,EACdt7B,MAAM,sBAEN,0BAAKD,WAAWmF,EAAAA,EAAAA,GAAehP,GAAAA,KAAa,iBAAkBsS,IAAKy2E,GAChEE,MAAAA,OADH,EACGA,EAA0B3/E,KAAK6/E,GAC9B,mBAAC,GAAD,CACE57E,IAAK47E,EAAe1pF,GACpBoK,UAAW7J,GAAAA,QACXywE,WAAY0Y,EACZj/E,QAASg/E,EACT/kC,oBAAqBwuB,Y,gBChCjC,MAAMyW,GAA+D,CACnEvkE,SAAU,CACR/X,KAAM,OACN4oB,MAAO,eAET8rC,QAAS,CACP10D,KAAM,OACN4oB,MAAO,WAET2zD,KAAM,CACJv8E,KAAM,OACN4oB,MAAO,YAgXX,IAAenuB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,kBAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAChC,IAAKF,GAAQA,EAAKuhF,aAChB,MAAO,GAET,MAAMpe,GAAY/iE,EAAAA,EAAAA,IAASJ,EAAKtI,IAC1BgmB,EAAOylD,GAAY7iE,EAAAA,EAAAA,IAAWZ,EAAQQ,QAAU7F,EAChDmnF,EAAgB9jE,IAAQ+jE,EAAAA,EAAAA,IAAiB/jE,GACzCgkE,GAAgB1yC,EAAAA,EAAAA,IAAchvC,KAASk6E,EAAAA,EAAAA,IAAYl6E,IAAU0d,IAASA,EAAKo6B,OAE3E6pC,EAAUzhF,IAAW0hF,EAAAA,IAAkBC,EAAAA,EAAAA,IAAcniF,EAAQQ,QAAU7F,EACvEynF,EAAiB1mF,QACrBsE,EAAO23C,eACJ35B,MAAAA,GADH,UACGA,EAAM0uB,gBADT,iBACG,EAAgBC,oBADnB,aACG,EAA8BxzC,WAC7Bu1C,EAAAA,EAAAA,IAA+B1uC,IAGrC,MAAO,CACLM,KAAAA,EACAkI,SAASotC,EAAAA,EAAAA,IAAkBt1C,GAAMu1C,EAAAA,EAAAA,IAAqB71C,IAAS81C,EAAAA,EAAAA,IAAuB91C,IACtFyjE,UAAAA,EACAqe,cAAAA,EACAE,cAAAA,EACAK,eAAeC,EAAAA,EAAAA,IAAiBhiF,GAChC8hF,eAAAA,EACAG,cAAe7mF,QAAQ4E,MAAAA,GAAD,UAACA,EAAMosC,gBAAP,aAAC,EAAgB81C,cACvCC,YAAaR,MAAAA,GAAF,UAAEA,EAASv1C,gBAAX,iBAAE,EAAmBg2C,eAArB,aAAE,EAA4BC,YA3B3B5iF,EAzUmC,IA6BjD,IA7BkD,OACtDS,EADsD,OAEtDU,EAFsD,iBAGtD0hF,EAHsD,OAItD1O,EAJsD,UAKtD9oD,EALsD,YAMtDq3D,EANsD,YAOtDI,EAPsD,cAQtDC,EARsD,aAStDC,EATsD,UAUtDC,EAVsD,QAWtDC,EAXsD,QAYtDC,EAZsD,kBAatDC,EAbsD,SActDC,EAdsD,kBAetDC,EAfsD,mBAgBtDC,EAhBsD,KAiBtDhjF,EAjBsD,UAkBtDmjE,EAlBsD,QAmBtDj7D,EAnBsD,cAoBtDw5E,EApBsD,cAqBtDK,EArBsD,eAsBtDD,EAtBsD,cAuBtDG,EAvBsD,cAwBtDT,EAxBsD,mBAyBtDyB,EAzBsD,cA0BtDC,EA1BsD,QA2BtDniF,EA3BsD,oBA4BtD6jB,GACI,EACJ,MAAM,qBACJu+D,EADI,uBAEJC,EAFI,eAGJC,EAHI,WAIJC,EAJI,cAKJC,EALI,gBAMJC,EANI,eAOJC,EAPI,qBAQJC,EARI,YASJC,EATI,iBAUJC,EAVI,qBAWJC,IACE3iF,EAAAA,EAAAA,OACGi7B,EAAYkgD,IAAiB91E,EAAAA,EAAAA,KAAS,IACtC3C,EAAmB04E,IAAwB/1E,EAAAA,EAAAA,KAAS,IACpD4Y,EAAmBo9D,IAAwBh2E,EAAAA,EAAAA,KAAS,IACrD,EAAE0N,EAAF,EAAKC,GAAM0/D,GAEjBnkE,EAAAA,GAAAA,GAAkB7O,EAAQgkB,OAAqBvqB,GAAW,GAE1D,MAAM6iF,IAAe97E,EAAAA,EAAAA,KAAY,KAC/Bi7E,GAAc,GACdE,GAAqB,KACpB,IAEGl9D,IAAmBje,EAAAA,EAAAA,KAAY,KACnCm7E,GAAqB,GACrBx7E,MACC,CAACA,IAEEm1C,IAAe90C,EAAAA,EAAAA,KAAY,KAC/Bi7E,GAAc,GACdC,GAAqB,KACpB,IAEGa,IAAY/7E,EAAAA,EAAAA,KAAY,KAC5Bi7E,GAAc,GACdt7E,MACC,CAACA,IAEE+C,IAAmB1C,EAAAA,EAAAA,KAAY,KACnCk7E,GAAqB,GACrBv7E,MACC,CAACA,IAEE+iF,IAAiB1iF,EAAAA,EAAAA,KAAY,KACjCiiF,EAAe,CAAEU,QAAS,aACzB,CAACV,IAEEW,IAAmB5iF,EAAAA,EAAAA,KAAY,KACnCkiF,EAAW,CAAEpjF,OAAAA,MACZ,CAACA,EAAQojF,IAENW,IAAwB7iF,EAAAA,EAAAA,KAAY,KACxC+hF,EAAqB,CAAEjjF,OAAAA,EAAQgI,SAAUA,IACzCi1E,OACC,CAACj9E,EAAQi9E,GAAWj1E,EAASi7E,IAE1Be,IAA4B9iF,EAAAA,EAAAA,KAAY,KACxC4hF,EAEFQ,EAAgB,CACdtjF,OAAAA,IAGFqjF,EAAc,CACZrjF,OAAAA,IAGJi9E,OACC,CAACA,GAAW6F,EAAoB9iF,EAAQqjF,EAAeC,IAEpDW,IAAwB/iF,EAAAA,EAAAA,KAAY,KACxCqiF,EAAe,CAAE/rF,GAAIwI,IACrBi9E,OACC,CAACj9E,EAAQi9E,GAAWsG,IAEjBW,IAAyBhjF,EAAAA,EAAAA,KAAY,KACzCyiF,EAAqB,CAAE93C,UAAW7rC,IAClCi9E,OACC,CAAC0G,EAAsB3jF,EAAQi9E,KAE5BkH,IAAwBjjF,EAAAA,EAAAA,KAAY,KACxCsiF,EAAqB,CAAEt9D,OAAQlmB,IAC/Bi9E,OACC,CAACuG,EAAsBxjF,EAAQi9E,KAE5BmH,IAAkBljF,EAAAA,EAAAA,KAAY,KAClC6hF,IACA9F,OACC,CAACA,GAAW8F,IAETsB,IAAkBnjF,EAAAA,EAAAA,KAAY,KAClCuiF,EAAY,CAAEv9D,OAAQlmB,EAAQ7E,SAAS,IACvC8hF,OACC,CAACj9E,EAAQi9E,GAAWwG,IAEjBa,IAAapjF,EAAAA,EAAAA,KAAY,KAC7BuiF,EAAY,CAAEv9D,OAAQlmB,IACtBi9E,OACC,CAACj9E,EAAQi9E,GAAWwG,IAEjBc,IAAerjF,EAAAA,EAAAA,KAAY,KAC/B8hF,IACA/F,OACC,CAACA,GAAW+F,IAETwB,IAAwBtjF,EAAAA,EAAAA,KAAY,KACxCwiF,IACAzG,OACC,CAACA,GAAWyG,IAETe,IAAuBvjF,EAAAA,EAAAA,KAAY,KACvCgiF,IACAjG,OACC,CAACA,GAAWiG,KAEfllF,EAAAA,EAAAA,KAAU,KACR8zE,KAEOK,KACN,IAEH,MAAM3wE,IAAOC,EAAAA,EAAAA,KAEPijF,IAAajpF,EAAAA,EAAAA,KAAQ,IAClBwmF,MAAAA,OAAP,EAAOA,EAAa5gF,KAAI,IAAiB,IAAhB,QAAEwiF,GAAc,EACvC,MAAMc,EAAMxD,GAAY0C,GACxB,GAAKc,EAML,OACE,mBAACt/E,EAAA,EAAD,CACEC,IAAKu+E,EACLh/E,KAAM8/E,EAAI9/E,KAEV5C,QAVgB,KAClBkhF,EAAe,CAAEU,QAAU,IAAGA,MAC9B5G,OAUGz7E,GAAKmjF,EAAIl3D,YAIf,CAACw0D,EAAahF,GAAWz7E,GAAM2hF,IAElC,OACE,mBAACyB,GAAA,EAAD,KACE,0BAAKhjF,UAAU,uBACb,mBAACsJ,GAAA,EAAD,CACExK,OAAQu7B,EACR72B,UAAU,QACVlN,MAAQ,SAAQ6b,YAAYC,OAC5BnT,QAASo8E,IAERmF,GAAoBC,GACnB,mBAACh9E,EAAA,EAAD,CACER,KAAK,OACL5C,QAAS2hF,IAERpiF,GAAK,aAGT4gF,GAAoBE,GACnB,mBAACj9E,EAAA,EAAD,CACER,KAAK,OACL5C,QAAS6hF,IAERtiF,GAAK,eAGT4gF,GAAoBG,GACnB,mBAACl9E,EAAA,EAAD,CACER,KAAM+lB,EAAY,UAAY,QAC9B3oB,QAASmiF,IAER5iF,GAAKopB,EAAY,qBAAuB,qBAG5C02D,GACC,mBAACj8E,EAAA,EAAD,CACER,KAAK,WACL5C,QAASkiF,IAER3iF,GAAK,eAGTiD,EAAAA,IAA2Bg+E,GAC1B,mBAACp9E,EAAA,EAAD,CACER,KAAK,QACL5C,QAASqiF,IAER9iF,GAAK,SAGTihF,GACC,mBAACp9E,EAAA,EAAD,CACER,KAAK,iBACL5C,QAASoiF,IAER7iF,GAAK,cAGTiD,EAAAA,IAA2B+9E,GAC1B,mBAACn9E,EAAA,EAAD,CACER,KAAK,SACL5C,QAASsiF,IAER/iF,GAAK,WAGTkhF,GACC,mBAACr9E,EAAA,EAAD,CACER,KAAMmD,EAAU,SAAW,OAC3B/F,QAAS8hF,IAERviF,GAAKwG,EAAU,cAAgB,eAGlC66E,GAAqBC,IACrB,mBAACz9E,EAAA,EAAD,CACER,KAAK,aACL5C,QAAS+hF,IAERxiF,GAAKshF,EAAqB,gBAAkB,sBAGhDf,GACC,mBAAC18E,EAAA,EAAD,CACER,KAAM+lB,EAAY,WAAa,UAC/B3oB,QAASgiF,IAERziF,GAAKopB,EAAY,iBAAmB,6BAGzC,mBAACvlB,EAAA,EAAD,CACER,KAAK,SACL5C,QAASwiF,IAERjjF,GAAK,yBAEPmhF,GACC,mBAACt9E,EAAA,EAAD,CACER,KAAK,QACL5C,QAASuiF,IAERhjF,GAAK,eAGTggF,GACC,mBAACn8E,EAAA,EAAD,CACER,KAAK,OACL5C,QAAS+6E,IAERx7E,GAAK,sBAGTkjF,GACA9C,GACC,mBAACv8E,EAAA,EAAD,CACER,KAAK,OACL5C,QAASiiF,IAER1iF,GAAK,gBAGTohF,GACC,mBAACv9E,EAAA,EAAD,CACE+2B,aAAW,EACXv3B,KAAK,SACL5C,QAAS+zC,IAERx0C,GAAKyhE,EACF,iBACC4e,EAAgB,0BAA6Bj3D,EAAY,eAAiB,sBAIpF9qB,GACC,mBAACu2C,GAAA,EAAD,CACE31C,OAAQgD,EACR7C,QAAS+C,GACT9D,KAAMA,IAGT0hF,IAAiB1hF,MAAAA,OAAJ,EAAIA,EAAMtI,KACtB,mBAAC0sB,EAAA,EAAD,CACExjB,OAAQue,EACRpe,QAASse,GACTgF,QAAQ,OACRnkB,OAAQF,EAAKtI,W,gBClXzB,MAAMqtF,IAAwBhuE,EAAAA,GAAAA,KAAU0/B,GAAOA,KAAM,KAAK,GA0K1D,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMM,GAAOg2B,EAAAA,EAAAA,IAAkBt2B,GAC/B,IAAKM,EACH,MAAO,GAGT,MAAM,MAAE25C,EAAF,QAAS7G,IAAYkyC,EAAAA,EAAAA,IAAwBtlF,IAAW,IACxD,WAAEq6D,EAAF,SAAcp7C,GAAam0B,GAAW,GAE5C,MAAO,CACL9yC,KAAAA,EACA25C,MAAAA,EACAogB,WAAAA,EACAp7C,SAAAA,EACAsmE,sBAAuB7pF,QAAQsE,EAAO0zB,8BAfxB3zB,EAxKuB,IAOrC,IAPsC,SAC1C0S,EAD0C,KAE1CnS,EAF0C,MAG1C25C,EAH0C,WAI1CogB,EAJ0C,SAK1Cp7C,EAL0C,sBAM1CsmE,GACI,EACJ,MAAM,wBACJC,EADI,wBAEJC,EAFI,aAGJhoE,EAHI,qBAIJioE,EAJI,oBAKJC,IACEnkF,EAAAA,EAAAA,MAGEozB,GAAWt3B,EAAAA,EAAAA,IAAyB,OACnCsoF,EAAcC,IAAmBh/E,EAAAA,EAAAA,IAAS,IAGjDrI,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEsnF,GAAmBhnF,OAC3B,IAAKgnF,EACH,OAGF,MAAMC,EAASvvF,SAASysB,eAAe,QACjC/b,EAAe,KACnB,MAAM,cAAEsuC,GAAkBh/C,SAC1B,GAAIg/C,GAAkBA,IAAkB5gB,EAASn3B,QAAU,CACzD,MAAM,QAAEuoF,EAAF,OAAWjoF,GAAW+nF,EAC5BC,EAAOrtF,MAAMoiB,UAAa,cAAakrE,OACvCD,EAAOrtF,MAAMqF,OAAU,GAAEA,MACzBvH,SAASk6D,gBAAgBv4D,UAAY6tF,OAErCD,EAAOrtF,MAAMoiB,UAAY,GACzBirE,EAAOrtF,MAAMqF,OAAS,IAM1B,OAFA+nF,EAAe1+E,iBAAiB,SAAUF,GAEnC,KACL4+E,EAAez+E,oBAAoB,SAAUH,MAE9C,KAGH1I,EAAAA,EAAAA,KAAU,KACJ8B,MAAAA,GAAAA,EAAMtI,IAANsI,MAAY2e,GAAAA,EAAU9lB,QACxBskB,EAAa,CAAEjd,OAAQF,EAAKtI,GAAIklB,UAAW+B,EAAS,KACpD4mE,EAAgB,IAEhBA,GAAiB,KAElB,CAACvlF,MAAAA,OAAD,EAACA,EAAMtI,GAAIylB,EAAcwB,KAG5BzgB,EAAAA,EAAAA,KAAU,KACR6kC,MAAM1rB,KAAKnhB,SAASyC,iBAAmC,UAAUq2D,SAAS22B,IACxEA,EAAMn6E,SAAWpQ,QAAQ+W,GAAYwzE,IAAUrxD,EAASn3B,YAG1D4lC,MAAM1rB,KAAKnhB,SAASyC,iBAAiC,yBAAyBq2D,SAAS42B,IACrFA,EAAIC,gBAAkB1zE,EAAW,QAAU,YAE5C,CAACA,KAGJjU,EAAAA,EAAAA,KAAU,KACHiU,GACHmiB,EAASn3B,QAAS2oF,SAEnB,CAAC3zE,KAEJrF,EAAAA,EAAAA,KAAgB,KACM5W,SAASe,cAAgC,uBACjD6uF,SACX,CAACb,IAEJ,MAAMc,GAAiC3kF,EAAAA,EAAAA,KAAa4kF,IAClDd,EAAwB,CAAEvrC,MAAOqsC,IAE7BA,EAASntF,QACXksF,GAAsBI,KAEvB,CAACA,EAAyBD,IAEvBe,GAAW7kF,EAAAA,EAAAA,KAAY,KAC3B,GAAIpB,GAAQ2e,EAAU,CACpB,MAAMunE,EAAgBZ,EAAe,EACrCnoE,EAAa,CAAEjd,OAAQF,EAAKtI,GAAIklB,UAAW+B,EAASunE,KACpDX,EAAgBW,MAEjB,CAAClmF,EAAMslF,EAAcnoE,EAAcwB,IAEhCwnE,GAAa/kF,EAAAA,EAAAA,KAAY,KAC7B,GAAIpB,GAAQ2e,EAAU,CACpB,MAAMunE,EAAgBZ,EAAe,EACrCnoE,EAAa,CAAEjd,OAAQF,EAAKtI,GAAIklB,UAAW+B,EAASunE,KACpDX,EAAgBW,MAEjB,CAAClmF,EAAMslF,EAAcnoE,EAAcwB,IAEtC,OACE,0BAAKjnB,GAAG,eAAeoK,UAAWqQ,EAAW,SAAW,IACtD,0BAAKrQ,UAAU,UACb,mBAACE,EAAA,EAAD,CACE3D,KAAK,UACLmG,OAAK,EACLvC,MAAM,cACNE,QAASijF,GAET,wBAAGtjF,UAAU,qBAEf,mBAACskF,GAAA,EAAD,CACE77E,IAAK+pB,EACLvpB,MAAO4uC,EACP3uC,SAAU+6E,KAGd,0BAAKjkF,UAAU,UACb,0BAAKA,UAAU,WACZ63C,EACCh7B,MAAAA,GAAAA,EAAU9lB,OACP,GAAEysF,EAAe,QAAQvrB,IACxBp7C,IAAaA,EAAS9lB,OACxB,aAEA,GAGF,mBAACmJ,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cAENE,QAAS,IAAMkjF,EAAoB,CAAEv2D,YAAYmwD,EAAAA,GAAAA,IAAcroE,KAAKC,SACpEpS,UAAU,2BAEV,wBAAG3C,UAAU,oBAInB,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAAS8jF,EACTz6E,UAAWmT,IAAaA,EAAS9lB,QAAUysF,IAAiB3mE,EAAS9lB,OAAS,GAE9E,wBAAGiJ,UAAU,aAEf,mBAACE,EAAA,EAAD,CACEwC,OAAK,EACLnG,KAAK,UACL4D,MAAM,cACNE,QAASgkF,EACT36E,UAAWmT,IAAaA,EAAS9lB,QAA2B,IAAjBysF,GAE3C,wBAAGxjF,UAAU,qB,gHCjMR,SAASukF,GACtBjvF,EACAkvF,GAKA,IAJAC,EAIA,uDAJS,EACTC,EAGA,wDAFAC,EAEA,wDADAC,EACA,wDACA,MAAMC,EAAavvF,EAAUsvF,EAAe,aAAe,aACrDE,EAAaD,EAAavvF,EAAUsvF,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvBlvF,EAAUuB,iBAA8B2tF,GACxCA,GACE,OAAEztF,GAAWguF,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAItnE,EAAI,EAAGA,EAAI5mB,EAAQ4mB,IAAK,CAC/B,MAAMznB,EAAU6uF,EAAYpnE,GACtB5G,EAAK7gB,EAAQ0uF,EAAe,aAAe,aAC3CM,EAAKnuE,EAAK7gB,EAAQ0uF,EAAe,cAAgB,gBAKvD,GAJkBD,EACdO,GAAML,EAAaJ,GAAUS,GAAMJ,EAAaL,EAChD1tE,GAAM+tE,EAAaL,GAAUS,GAAML,EAAaJ,EAGlDO,EAAehiF,KAAK2a,GACpBsnE,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwB1vF,EAAwBY,GAA4C,IAAtB0uF,EAAsB,wDAC1F,MAAMC,EAAavvF,EAAUsvF,EAAe,aAAe,aACrDE,EAAaD,EAAavvF,EAAUsvF,EAAe,cAAgB,gBACnE7tE,EAAK7gB,EAAQ0uF,EAAe,aAAe,aAC3CM,EAAKnuE,EAAK7gB,EAAQ0uF,EAAe,cAAgB,gBACvD,OAAO7tE,EAAK8tE,GAAcK,EAAKJ,G,gBCElB,SAASK,GAAsBvqE,EAAkBmH,EAAe/P,GAC7E,MAAM1c,EAAY0c,EAAa3W,QAC/B,IAAK/F,GAAaysB,EAAQ,EACxB,OAEF,MAAM,eAAEijE,EAAF,YAAkBD,GAAgBR,GACtCjvF,EACAslB,EAVoB,GAYpB,GACA,GAGF,IAAKmqE,EAAYhuF,SAAWguF,EAAYhjE,GACtC,OAEF,MAAMqjE,EAAQJ,EAAe,GAC7B,IAAKA,EAAenvF,SAASksB,IACvBA,IAAUqjE,IAAUC,GAAe/vF,EAAWyvF,EAAYK,IAAU,CACxE,MAAM92E,EAAWyT,EAAQijE,EAAeA,EAAejuF,OAAS,GAAK,QAAU,OAC/EuuF,EAAAA,GAAAA,GAAiBhwF,EAAWyvF,EAAYhjE,GAAQzT,EAtB9B,KCDf,SAASi3E,GAAT,GAoBJ,IApBmC,SACpCl1E,EADoC,aAEpCu0E,EAFoC,iCAGpCY,EAHoC,6BAIpCC,EAJoC,kBAKpCC,EALoC,MAMpC5hE,EANoC,kBAOpC6hE,EAPoC,SAQpCzyC,EARoC,QASpCj0C,GAWC,EACD,MAAO2mF,EAAmBC,IAAwBphF,EAAAA,EAAAA,KAAU,GAEtDqhF,GAAmBxmF,EAAAA,EAAAA,KAAaymF,GAC/BjiE,GAIEuc,EAAAA,GAAAA,GAAcvc,EAAM/sB,OAAQgvF,IAHzB,GAIT,CAACjiE,IAEEkiE,GAAiB1mF,EAAAA,EAAAA,KAAY,CAAC2J,EAAe7D,KACjDA,EAAE0J,iBACF+2E,GAAsB9jE,GAAW+jE,EAAiB/jE,EAAQ9Y,OACzD,CAAC48E,EAAsBC,IAEpBG,GAAmB3mF,EAAAA,EAAAA,KAAa8F,IACpC,GAAI0e,GAASA,EAAM/sB,QAAU6uF,GAAqB,EAAG,CACnD,MAAMM,EAAOpiE,EAAM8hE,GACfM,IACF9gF,EAAE0J,iBACFokC,EAASgzC,OAGZ,CAACpiE,EAAOovB,EAAU0yC,IAEfO,GAAyBriE,GAAS8hE,EAAoB9hE,EAAM/sB,OAAS,EAmB3E,OAlBAqF,EAAAA,EAAAA,KAAU,KACHopF,IAAoCW,GACvCN,EAAqBJ,GAAgC,EAAI,KAE1D,CAACU,EAAuBV,EAA8BD,KAEzDppF,EAAAA,EAAAA,KAAU,IAAOiU,GAAWo/B,EAAAA,GAAAA,GAAyB,CACnDG,MAAO3wC,EACPmnF,KAAMV,GAAqBd,OAAersF,EAAa6M,GAAqB4gF,GAAgB,EAAG5gF,GAC/FihF,OAAQX,GAAqBd,OAAersF,EAAa6M,GAAqB4gF,EAAe,EAAG5gF,GAChGkhF,OAAQZ,IAAsBd,OAAersF,EAAa6M,GAAqB4gF,GAAgB,EAAG5gF,GAClGmhF,QAASb,IAAsBd,OAAersF,EAAa6M,GAAqB4gF,EAAe,EAAG5gF,GAClGohF,MAAOb,EAAoBM,OAAmB1tF,EAC9CwH,QAASkmF,SACN1tF,GAAY,CACfmtF,EAAmBM,EAAgBC,EAAkB51E,EAAUu0E,EAAc3lF,EAAS0mF,IAGjFC,EC3CT,MAoFA,IAAeloF,EAAAA,EAAAA,KApFsB,IAK/B,IALgC,OACpCoB,EADoC,QAEpCG,EAFoC,iBAGpCwnF,EAHoC,cAIpCC,GACI,EAEJ,MAAM10E,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GAEzFouF,GAAmBrnF,EAAAA,EAAAA,KAAY,SAACglB,GAAuC,IAAvBsiE,EAAuB,wDAE3E,MAAM9gE,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9B9I,EAAOkK,EAAUxB,GAClB1I,GAIL6qE,EAAiB7qE,EAAMgrE,KACtB,CAACH,IAEEI,GAAsBvnF,EAAAA,EAAAA,KAAawnF,IACvCH,EAAiBG,EAAOlxF,IAAI,KAC3B,CAAC+wF,IAEEI,EAAuBxB,GAAsB,CACjDl1E,SAAUvR,EACVglB,MAAO4iE,EACPxzC,SAAU2zC,EACVlB,mBAAmB,EACnBH,kCAAkC,EAClCvmF,QAAAA,KAGF7C,EAAAA,EAAAA,KAAU,KACR+oF,GAAsB,uBAAwB4B,EAAsB/0E,KACnE,CAAC+0E,KAEJ3qF,EAAAA,EAAAA,KAAU,KACJsqF,IAAkBA,EAAc3vF,QAClCkI,MAED,CAACynF,EAAeznF,IAEnB,MAAM+nF,GAAkBn0E,EAAAA,EAAAA,GACtB6zE,MAAAA,GAAAA,EAAe3vF,OACX2vF,OACAnuF,EACJgV,GAEI05E,EAAsBP,IAAkBA,EAAc3vF,OACxDiwF,EACAN,EAEJ,IAAKn5E,GAAiB05E,IAAwBA,EAAoBlwF,OAChE,OAGF,MAAMiJ,GAAYmF,EAAAA,EAAAA,GAChB,gDACAsI,GAGF,OACE,0BAAKzN,UAAWA,EAAWyI,IAAKuJ,GAC7Bi1E,MAAAA,OADH,EACGA,EAAqBxnF,KAAI,CAAC,EAAQsiB,KAAT,IAAC,GAAEnsB,GAAH,SACxB,mBAACuuB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,kCAEVK,QAAS,IAAMsmF,EAAiB/wF,GAChCu9B,MAAO4zD,IAAyBhlE,GAEhC,mBAACqC,GAAA,EAAD,CACEE,OAAQ1uB,EACR2+C,WAAW,QACXT,cAAY,Y,wCCtCxB,MAyRA,IAAep2C,EAAAA,EAAAA,KAvRuB,IAuBhC,IAvBiC,OACrCU,EADqC,SAErCN,EAFqC,YAGrCopF,EAHqC,QAIrCC,EAJqC,sBAKrCC,EALqC,aAMrCC,EANqC,QAOrChgB,EAPqC,eAQrCjrD,EARqC,cASrCH,EATqC,iBAUrCqrE,EAVqC,aAWrCC,EAXqC,kBAYrCC,EAZqC,cAarCC,EAbqC,eAcrC1J,EAdqC,yBAerC1U,EAfqC,oBAgBrCqe,EAhBqC,gBAiBrCC,EAjBqC,OAkBrCnU,EAlBqC,aAmBrCoU,EAnBqC,QAoBrCC,EApBqC,aAqBrCC,EArBqC,gBAsBrCC,GACI,EACJ,MAAM,qBAAEC,EAAF,eAAwBC,IAAmB7oF,EAAAA,EAAAA,MAC3C8oF,GAAaC,EAAAA,GAAAA,GAAYhB,GAEzBiB,GAAgBD,EAAAA,GAAAA,GAAsC,MACtDE,GAAiBntF,EAAAA,EAAAA,MACjBotF,GAAkBz1E,EAAAA,EAAAA,GAAYq0E,GAC9BqB,EAAuBrB,EAAYnwF,OAASmwF,EAAcoB,EAC1DxpF,EAASxF,QAAQ4tF,EAAYnwF,SAC5ByxF,EAAWC,EAAaC,IAAiBzmF,EAAAA,EAAAA,KAC1C0mF,EAAUrvF,QAAQivF,GAAwBA,EAAqBtP,OAAO1gC,GAAMA,EAAEqwC,SAC9EhpF,GAAOC,EAAAA,EAAAA,MAEP,qBACJgpF,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFnqF,EACC,IAAGoqF,EAAAA,KACJvB,EACAL,OACA/uF,EACA0jB,IAGI,yBAAEktE,EAAF,kBAA4BC,IAAsBC,EAAAA,GAAAA,GACtD/vF,QAAQ+vE,IAA6BvqE,EACpC,IAAGoqF,EAAAA,KACJ/B,EACAQ,EACAD,GACCrgB,IAGG,mBACJiiB,EADI,eAEJC,EAFI,qBAGJC,EAHI,YAIJC,GACAL,kBAAmBM,GALf,kBAMJC,KACEC,EAAAA,GAAAA,GACF9qF,EACAopF,EACAX,EACA2B,EAAAA,GACAvB,EACAH,EACAC,GACCpgB,IAGHjrE,EAAAA,EAAAA,KAAU,IAAO0C,GAAS8iB,EAAAA,EAAAA,GAAsBimE,QAAWtvF,GAAY,CAACuG,EAAQ+oF,IAEhF,MACEgC,kBAAmBC,GADf,kBAEJC,GAFI,uBAGJC,GAHI,sBAIJC,KACEC,EAAAA,GAAAA,GAAuB9B,GAAgBhB,IAA0BtoF,GAE/DqrF,IAAkB7qF,EAAAA,EAAAA,KAAY,KAC9BR,IACEi/E,EACFgK,IAEAvU,OAGH,CAAC10E,EAAQipF,EAAiBvU,EAAQuK,IAsB/BqM,IAAkB9qF,EAAAA,EAAAA,KAAY0lC,MAAAA,IAClC5/B,EAAE0J,iBACF45E,IAEA,MAAM,aAAE2B,GAAiBjlF,EAEnB0rD,QAAcw5B,EAAAA,GAAAA,GAA8BD,EAAavmE,OAC/D,GAAIgtC,MAAAA,GAAAA,EAAO/5D,OAAQ,CACjB,MAAMwzF,EAAW5B,EACb1nD,MAAM1rB,KAAKu7C,GAAOxrC,QAAQklE,GACnBA,EAAKnpF,MAAQopF,EAAAA,GAAAA,IAA+BD,EAAKnpF,QAExD4/B,MAAM1rB,KAAKu7C,GAEf82B,EAAa2C,EAAU5B,MAExB,CAACA,EAASf,EAAcc,IAW3B,IAAKH,EACH,OAGF,MAAMmC,GAAenC,EAAqBtP,OAAO1gC,GAAMoyC,EAAAA,GAAAA,IAAkCpyC,EAAEqyC,YACrFC,GAAetC,EAAqBtP,OAAO1gC,GAAMuyC,EAAAA,GAAAA,IAAkCvyC,EAAEqyC,YACrFG,GAAexC,EAAqBtP,OAAO1gC,GAAMyyC,EAAAA,GAAAA,IAAkCzyC,EAAEqyC,YAE3F,IAAI3qF,GAAQ,GAEVA,GAAQL,EADN8qF,GACW,0BACJG,GACI,0BACJE,GACI,0BAEA,yBAN2BxC,EAAqBxxF,OAAQ,KA+CvE,MAAMk0F,GAAa5D,EAAeF,EAAQpwF,QAAW,IAAMswF,EAAeF,EAAQpwF,YAASwB,EAE3F,OACE,mBAACuH,EAAA,EAAD,CACEhB,OAAQA,EACRG,QAAS4oF,EACTjkE,OA5CJ,WACE,GAAK2kE,EAIL,OACE,0BAAKvoF,UAAU,yBAAyBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChE,mBAAC2H,EAAA,EAAD,CAAQwC,OAAK,EAACvC,MAAM,cAAc5D,KAAK,UAAUoG,UAAU,qBAAqBtC,QAASwnF,GACvF,wBAAG7nF,UAAU,gBAEf,0BAAKA,UAAU,eAAeC,IAC9B,0BAAKD,UAAU,iCACb,mBAACE,EAAA,EAAD,CACEuI,IAAK2/E,EACLjoF,MAAM,UACN5D,KAAK,UACLyD,UAAU,sBACVK,QAAS8pF,GACTh7E,cAAei4E,EAAwB2C,QAAoBxxF,GAE1DqH,EAAK,SAEPwnF,GACC,mBAAC,KAAD,CACEtoF,OAAQgrF,GACRoB,gBAAc,EACdpD,aAAe1rE,OAAgC7jB,EAAfuvF,EAChCqD,eAAgBpD,EAChB9oF,QAAS+qF,GACTlnE,oBAAqBmnE,GACrBl0C,gBAAiB35B,MAcjBgvE,GACRprF,UAAY,oBAAkBwoF,EAAY,UAAY,KAEtD,0BACExoF,UAAU,cACVqrF,YAAa5C,EACb6C,OAAQlB,GACRmB,WA/EN,SAAwBnmF,GACtBA,EAAE0J,iBAEEu5E,EAAehtF,UACjBqB,OAAOP,aAAaksF,EAAehtF,SACnCgtF,EAAehtF,aAAU9C,IA2EvBizF,YAtHmBpmF,IACvB,MAAQqmF,cAAeC,EAAU91E,OAAQ+1E,GAAevmF,EAGnDumF,EAA8B9wE,QAAQ,kBAAoB6wE,IAC7DrD,EAAehtF,QAAUqB,OAAOC,WAAW+rF,EApGnB,MAwGtBiD,GAAeA,EAA2Bh2F,QAAQ,8BAIlD+1F,GACFtmF,EAAEC,kBAGJqjF,MAsGI,0BAAyB9oF,EAAK,4BAA6B,IAC3D,oBAEC+oF,EACC,0BAAK3oF,UAAU,+BACZuoF,EAAqB9oF,KAAKmsF,GACzBA,EAAWhB,SAAS5yC,WAAW,UAC3B,0BAAKnjD,IAAK+2F,EAAW/wF,QAASuW,IAAI,KAClC,4BAAOvc,IAAK+2F,EAAW/wF,QAASwU,UAAQ,EAACX,OAAK,EAACc,MAAI,EAAChD,yBAAuB,OAInF,0BAAKxM,UAAU,kCACZuoF,EAAqB9oF,KAAKmsF,GACzB,mBAACC,GAAA,EAAD,CACExpE,KAAMupE,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWhB,UAC5DqB,YAAaL,EAAWtxF,eACxBiC,KAAMqvF,EAAWrvF,KACjB0+C,SAAO,OAMf,0BAAKj7C,UAAU,8BACb,mBAAC,GAAD,CACElB,OAAQ+pF,EACR5pF,QAAS6pF,EACTrC,iBAAkBsC,EAClBrC,cAAesC,IAEjB,mBAAC,KAAD,CACElqF,OAAQwqF,EACR4C,OAAQ3C,EACRhhB,aAAcihB,EACdvqF,QAAS0qF,GACTwC,cAAe1C,GACf2C,oBAAqB1C,GACrBzB,eAAgBA,EAChBD,qBAAsBA,IAExB,mBAAC,KAAD,CACE5pF,OAAQA,EACRU,OAAQqqF,EACRiD,oBAAqBhD,EACrBpB,qBAAsBA,IAExB,mBAACqE,GAAA,EAAD,CACEz2F,GAAG,qBACHwI,OAAQA,EACRN,SAAUA,EACVwuF,wBAAsB,EACtBC,KAAMpF,EACNqF,gBAAiBtD,EAAAA,GACjBxlE,YAAa9jB,EAAK,WAClB8V,SAAUiyE,EACVnU,OAAQ2W,GACRsC,aAAcnzF,QAAQ+tE,GAAW6f,EAAYnwF,QAC7CswF,aAAc4D,W,gBCrT1B,MAyVA,IAAevtF,EAAAA,EAAAA,KAnViB,IAE1B,IAF2B,OAC/BoB,EAD+B,OACvB4tF,EADuB,kBACfC,EADe,OACInZ,EADJ,QACYqU,GACvC,EAEJ,MAAM+E,GAAmB1xF,EAAAA,EAAAA,IAAyB,MAE5C2xF,GAAiB3xF,EAAAA,EAAAA,IAAuB,MAExC4xF,GAAc5xF,EAAAA,EAAAA,IAAuB,OAEpC6xF,EAAUC,IAAevoF,EAAAA,EAAAA,IAAiB,KAC1CwgC,EAASgoD,IAAcxoF,EAAAA,EAAAA,IAAmB,CAAC,MAC3CyoF,EAAaC,IAAkB1oF,EAAAA,EAAAA,KAAS,IACxC2oF,EAAmBC,IAAwB5oF,EAAAA,EAAAA,KAAS,IACpD6oF,EAAYC,IAAiB9oF,EAAAA,EAAAA,IAASioF,IAAU,IAChDc,EAAUC,IAAehpF,EAAAA,EAAAA,IAAiB,KAC1CipF,EAAeC,IAAoBlpF,EAAAA,EAAAA,OACnCmpF,EAAWC,IAAgBppF,EAAAA,EAAAA,KAAkB,GAE9C7E,GAAOC,EAAAA,EAAAA,KAEPiuF,GAAaxuF,EAAAA,EAAAA,KAAamJ,IAC1B3J,GAAU2J,EAAIpN,SAChBoN,EAAIpN,QAAQ83B,UAEb,CAACr0B,KAEJ1C,EAAAA,EAAAA,KAAU,IAAO0C,GAAS8iB,EAAAA,EAAAA,GAAsBimE,QAAWtvF,GAAY,CAACuG,EAAQ+oF,KAChFzrF,EAAAA,EAAAA,KAAU,KACH0C,IACHkuF,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcb,IAAU,GACxBe,EAAY,IACZE,OAAiBp1F,GACjBs1F,GAAa,MAEd,CAACnB,EAAQ5tF,KAEZ1C,EAAAA,EAAAA,KAAU,IAAM0xF,EAAWlB,IAAmB,CAACkB,EAAYhvF,KAE3DkM,EAAAA,EAAAA,KAAgB,KACd,MAAM+iF,EAAajB,EAAYzxF,QAE3B0yF,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAe3uF,EAAAA,EAAAA,KAAY,WAA+B,IAA9B4uF,EAA8B,uDAAP,GACvDjB,EAAW,IAAIiB,EAAY,KAC3B3tE,uBAAsB,KACpB,MAAM4tE,EAAOtB,EAAexxF,QACvB8yF,IAILA,EAAK75F,UAAUypB,OAAO,YAAaowE,EAAKxpD,aAjEtB,KAkElBwpD,EAAKC,SAAS,CAAEjhF,IAAKghF,EAAKxpD,aAAc0pD,SAAU,iBAEnD,IAEGC,GAAehvF,EAAAA,EAAAA,KAAY,KAE/B,GADAuuF,GAAa,IACR/uF,EACH,OAGF,MAAMyvF,EAAkBxB,EAASx1D,OAAOi3D,UAAU,EAzE1B,KA0ElBC,EAAiBxpD,EAAQxlC,KAAKivF,GAAMA,EAAEn3D,OAAOi3D,UAAU,EA3EvC,OA2E8DlpE,QAAQopE,GAAMA,EAAE33F,SAEpG,IAAKw3F,GAAmBE,EAAe13F,OAAS,EAY9C,OAXAi2F,EAAYuB,GACRE,EAAe13F,OACb03F,EAAe13F,OAAS,EAC1Bk3F,EAAaQ,GAEbxB,EAAWwB,GAGbR,SAEFJ,GAAa,GAIf,GAAIP,SAAiC/0F,IAAlBm1F,IAAgCe,EAAef,IAEhE,YADAG,GAAa,GAIf,MAOM9wC,EAAsB,CAC1B4xC,QAAS,CACP5B,SAAUwB,EACVK,QAVYH,EACbhvF,KAAI,CAAC2E,EAAM2d,KAAP,CACH3d,KAAMA,EAAKmzB,OACX4N,OAAQtY,OAAO9K,MACXA,IAAU2rE,GAAiB,CAAEmB,SAAS,WAOrC3B,GAAe,CAAE4B,UAAU,MAC5B1B,GAAqB,CAAE2B,gBAAgB,MACvCzB,GAAc,CAAE0B,MAAM,KAI9B,GAAI1B,EAAY,CACd,MAAM,KAAElpF,EAAF,SAAQ6qF,GAAczB,IAAY0B,EAAAA,GAAAA,GAAkB1B,EAASgB,UAAU,EAjHvD,OAiHoF,GAE1GzxC,EAAQiyC,KAAO,CACbG,eAAgB,CAACtiE,OAAO6gE,OACpBtpF,GAAQ,CAAEopF,SAAUppF,MACpB6qF,GAAY,CAAEG,iBAAkBH,IAIxCzb,EAAOz2B,KACN,CACDj+C,EACAiuF,EACA9nD,EACAqoD,EACAI,EACAR,EACAE,EACA5Z,EACAya,EACAT,IAGI6B,GAAe/vF,EAAAA,EAAAA,KAAY,CAACyiB,EAAe3d,KAC/C,MAAM8pF,EAAa,IAAIjpD,GACvBipD,EAAWnsE,GAAS3d,EAChB8pF,EAAWA,EAAWn3F,OAAS,GAAGwgC,OAAOxgC,QAAUm3F,EAAWn3F,OA9I5C,GA+IpBk3F,EAAaC,GAEbjB,EAAWiB,KAEZ,CAACjpD,EAASgpD,IAEPqB,GAAehwF,EAAAA,EAAAA,KAAayiB,IAChC,MAAMmsE,EAAa,IAAIjpD,GACvBipD,EAAWvmC,OAAO5lC,EAAO,GACzBkrE,EAAWiB,QAEW31F,IAAlBm1F,IACEA,IAAkB3rE,EACpB4rE,OAAiBp1F,GACRwpB,EAAQ2rE,GACjBC,EAAiBD,EAAgB,IAIrCntE,uBAAsB,KACfssE,EAAexxF,SAIpBwxF,EAAexxF,QAAQ/G,UAAUypB,OAAO,YAAa8uE,EAAexxF,QAAQspC,aAxK1D,UA0KnB,CAAC+oD,EAAezoD,IAEbsqD,GAA4BjwF,EAAAA,EAAAA,KAAaqkE,IAC7CgqB,EAAiBp9D,OAAOozC,MACvB,CAACgqB,IAEE6B,GAA0BlwF,EAAAA,EAAAA,KAAa8F,IAC3C+nF,EAAe/nF,EAAEwQ,OAAOgW,WACvB,IAEG6jE,GAA8BnwF,EAAAA,EAAAA,KAAa8F,IAC/CioF,EAAqBjoF,EAAEwQ,OAAOgW,WAC7B,IAEG8jE,GAAuBpwF,EAAAA,EAAAA,KAAa8F,IACxCmoF,EAAcnoF,EAAEwQ,OAAOgW,WACtB,IAEG+jE,GAAiBrwF,EAAAA,EAAAA,KAAa8F,IAChB,KAAdA,EAAEwqF,SACJtB,MAED,CAACA,IAEEuB,GAAuBvwF,EAAAA,EAAAA,KAAa8F,IACxC4nF,EAAY5nF,EAAEwQ,OAAO3M,SACpB,IAEG6mF,GAAmBxwF,EAAAA,EAAAA,KAAY,KACnC,GAAIsuF,IAAcb,EAASx1D,OAAOxgC,OAChC,OAAO6I,EAAK,+BAIb,CAACguF,EAAWhuF,EAAMmtF,IAEfgD,GAAkBzwF,EAAAA,EAAAA,KAAayiB,IACnC,MAAM0sE,EAAiBxpD,EAAQxlC,KAAKivF,GAAMA,EAAEn3D,SAAQjS,QAAQopE,GAAMA,EAAE33F,SACpE,GAAI62F,GAAaa,EAAe13F,OAAS,IAAMkuC,EAAQljB,GAAOwV,OAAOxgC,OACnE,OAAO6I,EAAK,8BAGb,CAACguF,EAAWhuF,EAAMqlC,IAqBrB,SAAS+qD,IACP,OAAO/qD,EAAQxlC,KAAI,CAAC0lC,EAAQpjB,IAC1B,0BAAK/hB,UAAU,kBACb,mBAACwjB,GAAA,EAAD,CACEqI,MAAO9J,IAAUkjB,EAAQluC,OAAS,GA5OlB,KA4OuBkuC,EAAQluC,OAC3C6I,EAAK,cACLA,EAAK,wBACTooB,MAAO+nE,EAAgBhuE,GACvB9Y,MAAOk8B,EAEPj8B,SAAW9D,GAAMiqF,EAAattE,EAAO3c,EAAE+I,cAAclF,OACrD63C,WAAY6uC,IAEb5tE,IAAUkjB,EAAQluC,OAAS,GAC1B,mBAACmJ,EAAA,EAAD,CACEF,UAAU,uBACV0C,OAAK,EACLvC,MAAM,cACN5D,KAAK,UACLoG,UAAW/C,EAAK,UAEhBS,QAAS,IAAMivF,EAAavtE,IAE5B,wBAAG/hB,UAAU,mBAoBvB,OACE,mBAACF,EAAA,EAAD,CAAOhB,OAAQA,EAAQG,QAAS4oF,EAASjkE,OA7DvC,0BAAK5jB,UAAU,0BACb,mBAACE,EAAA,EAAD,CAAQwC,OAAK,EAACvC,MAAM,cAAc5D,KAAK,UAAUoG,UAAU,uBAAuBtC,QAASwnF,GACzF,wBAAG7nF,UAAU,gBAEf,0BAAKA,UAAU,eAAeJ,EAAK,YACnC,mBAACM,EAAA,EAAD,CACEC,MAAM,UACN5D,KAAK,UACLyD,UAAU,sBACVK,QAASiuF,GAER1uF,EAAK,YAkDqDI,UAAU,aACzE,mBAACwjB,GAAA,EAAD,CACE/a,IAAKmkF,EACL/gE,MAAOjsB,EAAK,gBACZqJ,MAAO8jF,EACP/kE,MAAO8nE,IACP5mF,SAAU2mF,EACV/uC,WAAY6uC,IAEd,0BAAK3vF,UAAU,oBAEf,0BAAKA,UAAU,6BAA6ByI,IAAKokF,GAC/C,yBAAI7sF,UAAU,kBAAkBJ,EAAK,gBAEpCguF,GAvBP,WACE,MAAMa,EAAiBxpD,EAAQxlC,KAAKivF,GAAMA,EAAEn3D,SAAQjS,QAAQopE,GAAMA,EAAE33F,SAEpE,OAAOu2F,SAAiC/0F,IAAlBm1F,IAAgCe,EAAef,KACnE,wBAAG1tF,UAAU,cAAcJ,EAAK,6BAmBhBqwF,GACb3C,EACC,mBAACn+B,GAAA,EAAD,CACE9sC,KAAK,gBACL4iB,QA/BD+qD,IACJvwF,KAAI,CAACosB,EAAO9J,KAAR,CAAqB9Y,MAAO4jB,OAAO9K,GAAQ8J,MAAAA,EAAOqkE,OAAQnuE,IAAUkjB,EAAQluC,OAAS,MA+BpFq4D,SAAUviC,OAAO6gE,GACjBxkF,SAAUqmF,IAGZS,KAKJ,0BAAKhwF,UAAU,oBAEf,0BAAKA,UAAU,cACX2sF,GACA,mBAAChhE,GAAA,EAAD,CACEE,MAAOjsB,EAAK,iBACZgsB,QAASshE,EACThkF,SAAUsmF,IAGd,mBAAC7jE,GAAA,EAAD,CACEE,MAAOjsB,EAAK,gBACZgsB,QAASwhE,EACT1jF,SAAU4jF,EACVpkF,SAAUumF,IAEZ,mBAAC9jE,GAAA,EAAD,CACEE,MAAOjsB,EAAK,YACZgsB,QAAS0hE,EACT5jF,SAAU0jF,QAAgC70F,IAAXm0F,EAC/BxjF,SAAUwmF,IAEXpC,GACC,sCACE,yBAAIttF,UAAU,kBAAkBJ,EAAK,6BACrC,0BACE6I,IAAKqkF,EACL9sF,UAAU,eACV+jF,iBAAe,EACfz+E,IAAI,OACJ4D,SAAW9D,GAAMqoF,EAAYroF,EAAE+I,cAAc6/E,aAE/C,0BAAKhuF,UAAU,QAAQJ,EAAK,qC,4BC7VxC,MAsCA,IAAelC,EAAAA,EAAAA,KAtCmB,IAE5B,IAF6B,MACjCyyF,EADiC,MAC1Bh9D,EAD0B,QACnB9yB,GACV,EACJ,MAAM2N,GAAc1O,EAAAA,EAAAA,KAAa8F,IAE/BA,EAAE0J,iBAEFzO,EAAQ8vF,EAAMC,OAAQD,EAAMv6F,MAC3B,CAACu6F,EAAO9vF,IAELL,GAAYmF,EAAAA,EAAAA,GAChB,cACAguB,GAAS,SAGLt+B,EAAO,kBAAiBs7F,EAAME,YAC9BC,EAAWC,GAAAA,GAAAA,IAAkB17F,GAEnC,OACE,0BACEmL,UAAWA,EACX+lD,YAAa/3C,EACb/N,MAAQ,IAAGkwF,EAAMK,MAAM,OAEtBC,EAAAA,GAAqBN,EAAMC,OAC1B,0BACEv7F,IAAKA,EACLmL,UAAYswF,OAAwC/3F,EAA7B,2BACvB6Y,IAAK++E,EAAMC,OACXM,QAAQ,OACR,YAAW77F,EACXo+C,OAASq9C,OAA6B/3F,EAAlBo4F,GAAAA,SCuC9B,IAAejzF,EAAAA,EAAAA,KAzDqB,IAE9B,IAF+B,SACnCkzF,EADmC,MACzB7uE,EADyB,UAClB8uE,EADkB,oBACPv2C,EADO,aACc/sC,EADd,cAC4B4+E,GAC3D,EAEJ,MAAM1jF,GAAMvN,EAAAA,EAAAA,IAAuB,OAEnC41F,EAAAA,GAAAA,IAAeroF,EAAK6xC,GAEpB,MAAM7sC,GAAuBkwB,EAAAA,GAAAA,GAAmBpwB,GAE1C3N,GAAOC,EAAAA,EAAAA,KAEPkxF,EAAeluF,EAAAA,GACjBM,KAAK2mC,OAAOhrB,EAAAA,EAAAA,MAAiBxjB,MAzBF,GAyBhB,IA3BiB,EA6B1BK,EAAS,GAAAwH,KAAKwiC,KAAKirD,EAAS1E,OAAOn1F,OAASg6F,GAElD,OACE,0BACEtoF,IAAKA,EACL/E,IAAKktF,EAASh7F,GACdA,GAAK,kBAAiBmsB,IACtB/hB,UAAU,cAEV,0BAAKA,UAAU,qBACb,wBAAGA,UAAU,kBAAkBsF,IAAI,QAChC1F,EAAKgxF,EAASh7F,KAAOo7F,EAAAA,GAAuB,iBAAoB,QAAOjvE,OAG5E,0BACE/hB,WAAWmF,EAAAA,EAAAA,GAAe,uBAAwBsI,GAClDnX,MAAQ,WAAUqF,OAClB2J,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAEzBgV,GAAgBqjF,EAAS1E,OAAOzsF,KAAK4iB,IACpC,MAAM8tE,EAAQU,EAAUxuE,GAExB,IAAK8tE,EACH,OAIF,MAAMc,EAAiB,OAAQd,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACEzsF,IAAKutF,EAAer7F,GACpBu6F,MAAOc,EACP5wF,QAAS8rF,YClCjB+E,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA0KJ,UAAer0F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB4rB,EAAAA,GAAAA,IAAK5rB,EAAQ,CAAC,kBADpBD,EAxK2B,IAIzC,IAJ0C,UAC9CqC,EAD8C,aAE9CunF,EAF8C,cAG9C4E,GACI,EAEJ,MAAMn6E,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC82F,GAAY92F,EAAAA,EAAAA,IAAuB,OAElC+2F,EAAYC,IAAiBztF,EAAAA,EAAAA,OAC7BynF,EAAQiG,IAAa1tF,EAAAA,EAAAA,OACrB2tF,EAAqBC,IAA0B5tF,EAAAA,EAAAA,IAAS,IAEvD+0C,QAASc,IAAwBZ,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS3nC,EACT4nC,WAxB0B,MAyBxB04C,IACFA,EAAQplC,SAASqlC,IACf,MAAM,GAAE38F,GAAO28F,EAAM38E,OACrB,IAAKhgB,IAAOA,EAAGoiD,WAAW,mBACxB,OAGF,MAAMj2B,EAAQwO,OAAO36B,EAAGy6B,QAAQ,kBAAmB,KACnDuhE,GAAsB7vE,GAASwwE,EAAMprB,kBAGvC,MAAMqrB,EAA0BZ,GAC7BnyF,KAAI,CAAC0nE,EAAgBplD,KAAjB,CAA8BA,MAAAA,EAAOolD,eAAAA,MACzC7hD,QAAO,QAAC,eAAE6hD,GAAH,SAAwBA,KAE7BqrB,EAAwBz7F,QAI7Bs7F,EAAuBG,EAAwBrvF,KAAK2mC,MAAM0oD,EAAwBz7F,OAAS,IAAIgrB,WAGjGszB,EAAAA,GAAAA,GAAoB28C,EAAU32F,SAAUwH,EAAAA,KAGxCzG,EAAAA,EAAAA,KAAU,KACR,IAAK61F,EACH,OAGF,MAAMruE,EAASouE,EAAU32F,QACzB,IAAKuoB,EACH,OAGF,MAAM6uE,EA7DkB,GA6DRL,EAA4CxuE,EAAO8hC,YAAc,EAAIgtC,IAErF7tD,EAAAA,GAAAA,GAA2BjhB,EAAQ6uE,KAClC,CAACR,EAAYG,IAEhB,MAAMxyF,GAAOC,EAAAA,EAAAA,KAEP8yF,GAAgB94F,EAAAA,EAAAA,KAAQ,KAC5B,IAAKo4F,EACH,OAAOh6C,GAAAA,EAET,MAAM26C,EAAkB,IAAIX,GAS5B,OARI1K,MAAAA,GAAAA,EAAcxwF,QAChB67F,EAAgBC,QAAQ,CACtBj9F,GAAIo7F,EAAAA,GACJ3uE,KAAMziB,EAAK,kBACXssF,OAAQ3E,IAILqL,IACN,CAACX,EAAYryF,EAAM2nF,KAGtBnrF,EAAAA,EAAAA,KAAU,KACRO,YAAW,KACT,MAAMm2F,EAAO,KACXZ,EAAcH,GAAUE,YAExBE,EAAUJ,GAAU7F,SAGlB6F,GACFe,IAwER9tD,iBAQE,OAPK6sD,KACHA,GAAmB,qCACnBC,UAAsBD,IAAkBkB,QAExChB,IAAYiB,EAAAA,GAAAA,IAAgBlB,KAGvBD,GA9EDoB,GACGnuD,KAAKguD,KArGa,OAwGxB,IAEH,MAAMI,GAAiB5zF,EAAAA,EAAAA,KAAayiB,IAClCswE,EAAuBtwE,GACvB,MAAMoxE,EAAa/+F,SAASysB,eAAgB,kBAAiBkB,MAC7DujE,EAAAA,GAAAA,GAAiBtzE,EAAa3W,QAAU83F,EAAY,QA1GnC,GADU,OA4G1B,IAEGC,GAAoB9zF,EAAAA,EAAAA,KAAY,CAAC6wF,EAAe9tE,KACpD8pE,EAAcgE,EAAO9tE,KACpB,CAAC8pE,IAEEryC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIs5C,EAAAA,IAoB1CC,GAAqBnuF,EAAAA,EAAAA,GAAe,cAAenF,GAEzD,OAAKksF,GAAWpyC,EASd,0BAAK95C,UAAWszF,GACd,0BAAK7qF,IAAKupF,EAAWhyF,UAAU,qBAAqBsF,IAAK1F,EAAK8a,MAAQ,MAAQ,IAC3Ei4E,EAAclzF,KA/BrB,SAA8BmxF,EAA6B7uE,GACzD,MAAM9e,EAAOiuF,GAAkBN,EAASh7F,IAExC,OAAOqN,GACL,mBAAC/C,EAAA,EAAD,CACEF,UAAY,sBAAoB+hB,IAAUqwE,EAAsB,YAAc,IAC9E1vF,OAAK,EACL6wF,OAAK,EACLpzF,MAAM,cAENE,QAAS,IAAM6yF,EAAenxE,GAC9Bpf,UAAWiuF,EAASvuE,MAEpB,wBAAGriB,UAAWiD,SAoBhB,0BACEwF,IAAKuJ,EACLhS,WAAWmF,EAAAA,EAAAA,GAAe,gCAAiCkC,EAAAA,GAAe,eAAiB,kBAE1FsrF,EAAclzF,KAAI,CAACmxF,EAAUjzE,IAC5B,mBAAC,GAAD,CACEizE,SAAUA,EACV7uE,MAAOpE,EACPkzE,UAAW3E,EACX5xC,oBAAqBA,EACrB/sC,aAAc6kF,GAAuBz0E,EAAI,GAAKy0E,GAAuBz0E,EAAI,EACzEwuE,cAAeiH,QAtBrB,0BAAKpzF,UAAWszF,GACd,mBAAC9uE,GAAA,EAAD,WCvJFgvE,GAAiB3wF,EAAAA,GAA0B,EAAI,GAC/C4wF,GAAe5wF,EAAAA,GAA0B,EAAI,GA8KnD,IAAenF,EAAAA,EAAAA,KA3KkB,IAc3B,UAd4B,WAChCkpE,EADgC,YAEhC8sB,EAFgC,MAGhC3xE,EAHgC,aAIhCxU,EAJgC,iBAKhComF,EALgC,gBAMhC59C,EANgC,qBAOhCgiB,EAPgC,oBAQhC67B,EARgC,oBAShCt5C,EATgC,gBAUhCu5C,EAVgC,gBAWhCC,EAXgC,cAYhCC,EAZgC,sBAahCC,GACI,EACJ,MAAM,oBACJC,EADI,uBAEJC,EAFI,iBAGJ1pD,EAHI,iBAIJyzC,IACE7+E,EAAAA,EAAAA,MAGEqJ,GAAMvN,EAAAA,EAAAA,IAAuB,MAG7B6rE,GAAkB7rE,EAAAA,EAAAA,IAA0B,MAE5Ci5F,GAAmBj5F,EAAAA,EAAAA,IAA0B,OAE5Ck5F,EAAoBC,EAAkBC,IAAqBryF,EAAAA,EAAAA,KAC5DrC,GAAOC,EAAAA,EAAAA,MAEbixF,EAAAA,GAAAA,IAAeroF,EAAK6xC,GAEpB,MAAM7sC,GAAuBkwB,EAAAA,GAAAA,GAAmBpwB,GAE1CgnF,EAAW3tB,EAAWhxE,KAAOo7F,EAAAA,GAC7BwD,EAAa5tB,EAAWhxE,KAAO6+F,EAAAA,EAC/BrW,EAAUxX,EAAWwX,QACrBsW,GAAgBH,IAAY3W,EAAAA,EAAAA,IAAmBhX,GAE/C+tB,GAAoBr1F,EAAAA,EAAAA,KAAY,KAChC8+E,EACF8V,IAEAD,IAEFK,MACC,CAACJ,EAAwBD,EAAqBK,EAAmBlW,IAE9DwW,GAAiBt1F,EAAAA,EAAAA,KAAY,KAC7Bo1F,IAAiB38B,EACnBvtB,EAAiB,CACf9G,eAAgB,mBAGlBu6C,EAAiB,CACfY,aAAcjY,EAAWhxE,OAG5B,CAACmiE,EAAsB28B,EAAclqD,EAAkBo8B,EAAYqX,IAEhE4W,GAAY9+C,IAAoBw+C,GAAYnW,IAAYrmB,IAA7C,UACZ6O,EAAWjlC,gBADC,aACZ,EAAqB+2C,MAAMx4C,IAAOA,EAAE40D,UACnCC,EAAW3W,EAAU4W,EAAAA,GAAoBC,EAAAA,EACzCC,EAAc9W,EAvEW,EADG,EAyE5BqG,EAASrG,EAAUqV,GAAeD,GAElC2B,EAAiBtyF,EAAAA,GACnBM,KAAK2mC,OAAOhrB,EAAAA,EAAAA,MAAiBxjB,MAxEF,IAwEuCy5F,EAAWtQ,IAC7EyQ,EAEEE,GAAUxuB,EAAW0X,eAAiB1X,EAAWhxE,KAAOo7F,EAAAA,IACvDqE,EAAD,CAAUC,IAAUrzF,EAAAA,EAAAA,GAAQmzF,GAC5BG,EAAqC,EAAjBJ,EAAqB,EACzCK,EAAgBryF,KAAKwiC,KAAKxiC,KAAK6E,IAAIutF,EAAmB3uB,EAAW5lC,OAASm0D,IAAmBJ,EAAWtQ,GACxG9oF,EAAS05F,EAAQG,EAAgBryF,KAAKwiC,KAAKihC,EAAW5lC,MAAQm0D,IAAmBJ,EAAWtQ,GAE5FgR,IAAwB57F,EAAAA,EAAAA,KAAQ,IACpC85F,EAAmB,IAAIxpC,IAAIwpC,EAAiBl0F,KAAI,QAAC,GAAE7J,GAAH,SAAYA,WAAO2C,GAClE,CAACo7F,IAEJ,OACE,0BACElrF,IAAKA,EACL/E,IAAKkjE,EAAWhxE,GAChBA,GAAK,GAAEg+F,EAAsB,mBAAqB,iBAAiB7xE,IACnE/hB,WACEmF,EAAAA,EAAAA,GAAe,aAAc0vF,GAAY,sBAG3C,0BAAK70F,UAAU,qBACb,wBAAGA,UAAU,mBACV60F,GAAY,wBAAG70F,UAAU,2CACzB4mE,EAAW3mE,OAEbs0F,GACC,wBAAGv0F,UAAU,+BAA+BK,QAASg0F,KAErDE,GAAYnW,IAAYxX,EAAW0X,eACnC,mBAACp+E,EAAA,EAAD,CACEF,UAAU,wBACVsmC,oBAAqBouD,IAAiB38B,EACtC13D,QAASu0F,EACT5sC,MAAI,EACJzrD,KAAK,OACLq/B,OAAK,GAEuBh8B,EAA3B80F,GAAgBG,EAAgB,SAAiB,SAIxD,0BACE70F,WAAWmF,EAAAA,EAAAA,GAAe,+CAAgDsI,GAC1EnX,MAAQ,WAAUqF,QAElB,6BACE8M,IAAKs+D,EACL/mE,UAAU,gBACV1J,MAAO8+F,EAAU,WAAUI,YAAqBj9F,KAEhDg8F,GAAYC,GAAcY,IAAW,6BAAQ3sF,IAAK0rF,EAAkBn0F,UAAU,kBAC/EuN,GAAgBq5D,EAAWjlC,UAAYilC,EAAWjlC,SAChDvB,MAAM,EAAGi1D,EAAQE,EAAoB3uB,EAAWjlC,SAAS5qC,QACzD0I,KAAI,CAACiiC,EAAS/jB,KACb,MAAM+3E,GAAanB,GAAYC,KAC1BhtB,EAAAA,EAAAA,KAAgC3hD,EAAAA,EAAAA,MAAa6b,EAAQsnC,gBACpD2sB,EAAaP,GAAUz3E,GAAK43E,GAAsBG,EACpDvB,EACAptB,EAEJ,OACE,mBAACiB,GAAA,EAAD,CACEtkE,IAAKg+B,EAAQ9rC,GACb8rC,QAASA,EACTnlC,KAAMw4F,EACNz6C,oBAAqBA,EACrBwsB,WAAY4sB,EACZ39C,gBAAiBA,EACjB6/C,YAAU,EACV79B,qBAAsBA,EACtBgP,gBAAiB4uB,EACjBt1F,QAASwzF,EACT56C,SAAUvX,EACVm0D,cAAerB,GAAAA,MAAciB,IAAAA,GAAuBK,IAAIp0D,EAAQ9rC,IAAMk+F,OAAkBv7F,EACxFw9F,YAAcN,MAAAA,IAAAA,GAAuBK,IAAIp0D,EAAQ9rC,SAAsB2C,EAAhBw7F,EACvDiC,oBAAqBzB,EAAWP,OAAwBz7F,OAI/D88F,GAASzuB,EAAW5lC,MAAQu0D,GAC3B,mBAACr1F,EAAA,EAAD,CAAQF,UAAU,wCAAwC0C,OAAK,EAACvC,MAAM,cAAcE,QAASi1F,GAA7F,IACI1uB,EAAW5lC,MAAQu0D,IAK1BhB,GACC,mBAAChqE,GAAA,EAAD,CACEnmB,KAAMxE,EAAK,mCACXd,OAAQs1F,EACRn1F,QAASq1F,EACT7pE,eAAgBkqE,EAChBh5D,sBAAoB,QCrJxBs6D,GAAqC,GAoO3C,IAAev4F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,SACJqqE,GACE7qE,EAAO+jC,SAELoU,GAAkB15B,EAAAA,EAAAA,IAAqBze,EAAQQ,GAE/C83F,EAAoB9/F,OAAOgzE,QAAO+sB,EAAAA,GAAAA,IAAWv4F,EAAO2qE,aAAa7jD,KAAM9mB,EAAOw4F,qBAEpF,MAAO,CACL5tB,gBAAiBC,EACjB4tB,oBAAqBz4F,EAAO2qE,aAAaH,MAAMC,OAC/CiuB,WAAY14F,EAAOod,SAASC,MAAM0tD,mBAClC5yB,gBAAAA,EACAgiB,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,GACjDs4F,kBAAAA,EACAK,uBAAwB34F,EAAO2qE,aAAaiuB,eAjB9B74F,EAlOiC,IAW/C,IAXgD,UACpDqC,EADoD,YAEpD0zF,EAFoD,oBAGpD2C,EAHoD,kBAIpDH,EAJoD,gBAKpD1tB,EALoD,uBAMpD+tB,EANoD,WAOpDD,EAPoD,gBAQpDvgD,EARoD,qBASpDgiB,EAToD,oBAUpDq0B,GACI,EAEJ,MAAMp6E,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC82F,GAAY92F,EAAAA,EAAAA,IAAuB,MAEnC6rE,GAAkB7rE,EAAAA,EAAAA,IAA0B,MAE5Cu7F,GAAoBv7F,EAAAA,EAAAA,IAA0B,OAE7Cw7F,EAAgBC,IAAqBlyF,EAAAA,EAAAA,IAAiB,IAErD+0C,QAASc,IAAwBZ,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS3nC,EACT4nC,WA7BkC,MA8BhC04C,IACFA,EAAQplC,SAASqlC,IACf,MAAM,GAAE38F,GAAO28F,EAAM38E,OACrB,IAAKhgB,IAAOA,EAAGoiD,WAAW,qBACxB,OAGF,MAAMj2B,EAAQwO,OAAO36B,EAAGy6B,QAAQ,oBAAqB,KACrD4lE,GAAwBl0E,GAASwwE,EAAMprB,kBAGzC,MAAMqrB,EAA0ByD,GAC7Bx2F,KAAI,CAAC0nE,EAAgBplD,KAAjB,CAA8BA,MAAAA,EAAOolD,eAAAA,MACzC7hD,QAAO,QAAC,eAAE6hD,GAAH,SAAwBA,KAE7BqrB,EAAwBz7F,QAI7B4/F,EAAkBnE,EAAwBrvF,KAAK2mC,MAAM0oD,EAAwBz7F,OAAS,IAAIgrB,WAEpFy3B,QAASsvB,IAAiCpvB,EAAAA,GAAAA,IAAwB,CAAEC,QAASq4C,IAE/EpyF,GAAOC,EAAAA,EAAAA,KAEP+2F,EAAiBt9F,QAAQ+8F,GAEzBQ,GAAUh9F,EAAAA,EAAAA,KAAQ,KACtB,IAAKw8F,EACH,OAAOp+C,GAAAA,EAGT,MAAM6+C,EAAc,GAEhBZ,EAAkBn/F,QACpB+/F,EAAY9zF,KAAK,CACfpN,GAAIo7F,EAAAA,GACJ/wF,MAAOL,EAAK,kBACZ+hC,SAAUu0D,EACVl1D,MAAOk1D,EAAkBn/F,OACzBqnF,SAAS,IAIb,MAAM2Y,EAAsB3gG,OAAOgzE,QAAO+sB,EAAAA,GAAAA,IAAW3tB,EAAiB6tB,IAEhEW,GAAsBT,MAAAA,OAAA,EAAAA,EAAwBjxE,QAAQ1vB,IAAQygG,EAAoBxgG,SAASD,OAAQ,GACnGqhG,EAAiB7gG,OAAOgzE,QAAO+sB,EAAAA,GAAAA,IAAW3tB,EAAiBwuB,IAEjE,MAAO,IACFF,KACAC,KACAE,KAEJ,CAACZ,EAAqBE,EAAwB32F,EAAMs2F,EAAmB1tB,IAEpE0uB,GAAkBr9F,EAAAA,EAAAA,KAAQ,IAC9B+8F,GAC4D,IAAzDC,EAAQvxE,QAAQ7oB,IAAD,uBAASA,EAAIklC,gBAAb,aAAS,EAAc5qC,UAAQA,QAChD,CAAC8/F,EAASD,KAEbvhD,EAAAA,GAAAA,GAAoB28C,EAAU32F,UAG9Be,EAAAA,EAAAA,KAAU,KACR,IAAKw6F,EACH,OAGF,MAAMhzE,EAASouE,EAAU32F,QACzB,IAAKuoB,EACH,OAGF,MAAM6uE,EAzGkB,GAyGRiE,GAAwC9yE,EAAO8hC,YAAc,EAAIgtC,KAEjF7tD,EAAAA,GAAAA,GAA2BjhB,EAAQ6uE,KAClC,CAACmE,EAAgBF,IAEpB,MAAM1d,GAAmB15E,EAAAA,EAAAA,KAAayiB,IACpC40E,EAAkB50E,GAClB,MAAMo1E,EAAe/iG,SAASysB,eAAgB,oBAAmBkB,MACjEujE,EAAAA,GAAAA,GAAiBtzE,EAAa3W,QAAU87F,EAAc,aAAS5+F,EAlHpC,OAmH1B,IAEG66F,GAAoB9zF,EAAAA,EAAAA,KAAa6wF,IACrC/D,EAAoB+D,KACnB,CAAC/D,IAEEtyC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GA8D1CkH,GAAgB/7C,EAAAA,EAAAA,GAAe,gBAAiB,oBAAqBnF,GAE3E,OAAK42F,GAAmB98C,IAAqBo9C,EAa3C,0BAAKl3F,UAAWkhD,GACd,0BACEz4C,IAAKupF,EACLhyF,UAAU,kDAEV,0BAAKA,UAAU,2BACb,6BAAQyI,IAAKs+D,EAAiB/mE,UAAU,kBACxC,6BAAQyI,IAAKguF,EAAmBz2F,UAAU,kBACzC62F,EAAQp3F,KAnFjB,SAAqBmnE,EAAgC7kD,GAAe,MAClE,MAAM8lD,EAAY,UAAGjB,EAAWjlC,gBAAd,aAAG,EAAsB,GACrCgF,GAAkBxhC,EAAAA,EAAAA,GACtB,uCACA4c,IAAU20E,GAAkB,aAGxBU,EAAmBr1E,EAAQs1E,EAAAA,EAC3BC,GAAO9vB,EAAAA,EAAAA,KAAgC3hD,EAAAA,EAAAA,MAAa+gD,GAE1D,OAAIA,EAAWhxE,KAAOo7F,EAAAA,IACjBpqB,EAAWhxE,KAAO6+F,EAAAA,GAClB7tB,EAAWhxE,KAAO2hG,EAAAA,IAClB3wB,EAAWhxE,KAAO4hG,EAAAA,IAClB5wB,EAAWI,eACVa,EAGF,mBAAC3nE,EAAA,EAAD,CACEwD,IAAKkjE,EAAWhxE,GAChBoK,UAAW2mC,EACXhkC,UAAWikE,EAAW3mE,MACtByC,OAAK,EACL6wF,MAAO3sB,EAAWhxE,KAAOo7F,EAAAA,IAAwBpqB,EAAWhxE,KAAO6+F,EAAAA,EACnEt0F,MAAM,cAENE,QAAS,IAAM24E,EAAiBj3D,IAE/B6kD,EAAWhxE,KAAOo7F,EAAAA,GACjB,wBAAGhxF,UAAU,gBAEb,mBAAC,GAAD,CACE4mE,WAAYA,EACZE,WAAYwvB,IAAe5C,EAC3Bp5C,oBAAqBwuB,EACrB/B,gBAAiBqwB,EAAoBE,EAAOb,EAAoB1vB,OAAmBxuE,KAOzF,mBAACyvE,GAAA,EAAD,CACEtkE,IAAKkjE,EAAWhxE,GAChB8rC,QAASmmC,EACTtrE,KAAMsqE,EAAAA,GACN5mE,MAAO2mE,EAAW3mE,MAClBD,UAAW2mC,EACXmgC,WAAYwvB,IAAe5C,EAC3Bp5C,oBAAqBwuB,EACrBb,eAAa,EACblQ,sBAAoB,EACpBgP,gBAAiBqwB,EAAoBE,EAAOb,EAAoB1vB,OAAmBxuE,EACnF8H,QAAS24E,EACT//B,SAAUl3B,SAgCd,0BACEtZ,IAAKuJ,EACLhS,WAAWmF,EAAAA,EAAAA,GAAe,kCAAmCkC,EAAAA,GAAe,eAAiB,kBAE5FwvF,EAAQp3F,KAAI,CAACmnE,EAAYjpD,IACxB,mBAAC,GAAD,CACEja,IAAKkjE,EAAWhxE,GAChBgxE,WAAYA,EACZ8sB,YAAap6F,QAAQg9F,GAAc5C,GACnC3xE,MAAOpE,EACP28B,oBAAqBA,EACrB/sC,aAAcmpF,GAAkB/4E,EAAI,GAAK+4E,GAAkB/4E,EAAI,EAC/Do4B,gBAAiBA,EACjB69C,qBAAmB,EACnB77B,qBAAsBA,EACtB87B,gBAAiBT,QArCvB,0BAAKpzF,UAAWkhD,GACbg2C,EACC,0BAAKl3F,UAAU,mBAAmBJ,EAAK,eAEvC,mBAAC4kB,GAAA,EAAD,W,gBC7LV,MAIMyxE,GAAqC,GAuT3C,IAAev4F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,SACJqqE,EADI,MAEJL,EAFI,OAGJ+oB,EAHI,SAIJsG,EAJI,WAKJC,GACE95F,EAAO+jC,SAELoU,GAAkB15B,EAAAA,EAAAA,IAAqBze,EAAQQ,GAGrD,MAAO,CACLF,MAHWC,EAAAA,EAAAA,IAAWP,EAAQQ,GAI9Bu5F,eAAgBxG,EAAOxvD,SACvBgyD,iBAAkB8D,EAAS91D,SAC3Bi2D,gBAAiBF,EAAW/1D,SAC5B6mC,gBAAiBC,EACjBN,YAAaC,EAAMC,OACnBiuB,WAAY14F,EAAOod,SAASC,MAAM0tD,mBAClC5yB,gBAAAA,EACAgiB,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,MAtBnCD,EArT6B,IAe3C,IAf4C,KAChDO,EADgD,SAEhDJ,EAFgD,UAGhDkC,EAHgD,YAIhD0zF,EAJgD,gBAKhDhW,EALgD,eAMhDia,EANgD,iBAOhDhE,EAPgD,gBAQhDiE,EARgD,YAShDzvB,EATgD,gBAUhDK,EAVgD,WAWhD8tB,EAXgD,gBAYhDvgD,EAZgD,qBAahDgiB,EAbgD,gBAchD87B,GACI,EACJ,MAAM,mBACJgE,EADI,iBAEJC,EAFI,cAGJre,EAHI,YAIJD,EAJI,oBAKJue,IACE34F,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC82F,GAAY92F,EAAAA,EAAAA,IAAuB,MAEnC6rE,GAAkB7rE,EAAAA,EAAAA,IAA0B,OAE3Cw7F,EAAgBC,IAAqBlyF,EAAAA,EAAAA,IAAiB,GAEvDuzF,GAAoBC,EAAAA,GAAAA,GAAqB/5F,EAAMtI,GAAIkI,IAEjD07C,QAASc,IAAwBZ,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS3nC,EACT4nC,WAzCkC,MA0ChC04C,IACFA,EAAQplC,SAASqlC,IACf,MAAM,GAAE38F,GAAO28F,EAAM38E,OACrB,IAAKhgB,IAAOA,EAAGoiD,WAAW,gBACxB,OAGF,MAAMj2B,EAAQwO,OAAO36B,EAAGy6B,QAAQ,eAAgB,KAChD4lE,GAAwBl0E,GAASwwE,EAAMprB,kBAGzC,MAAMqrB,EAA0ByD,GAC7Bx2F,KAAI,CAAC0nE,EAAgBplD,KAAjB,CAA8BA,MAAAA,EAAOolD,eAAAA,MACzC7hD,QAAO,QAAC,eAAE6hD,GAAH,SAAwBA,KAE7BqrB,EAAwBz7F,QAI7B4/F,EAAkBnE,EAAwBrvF,KAAK2mC,MAAM0oD,EAAwBz7F,OAAS,IAAIgrB,WAEpFy3B,QAASsvB,IAAiCpvB,EAAAA,GAAAA,IAAwB,CAAEC,QAASq4C,IAE/EpyF,GAAOC,EAAAA,EAAAA,KAEP+2F,EAAiBt9F,QAAQ6uE,GAEzB0uB,GAAUh9F,EAAAA,EAAAA,KAAQ,KAAM,MAC5B,IAAKsuE,EACH,OAAOlwB,GAAAA,EAGT,MAAM6+C,EAAc,GAEdC,EAAsB3gG,OAAOgzE,QAAO+sB,EAAAA,GAAAA,IAAW3tB,EAAiBL,IAoBtE,GAlBIwrB,EAAiB58F,QACnB+/F,EAAY9zF,KAAK,CACfpN,GAAI6+F,EAAAA,EACJx0F,MAAOL,EAAK,oBACZ+hC,SAAUgyD,EACV3yD,MAAO2yD,EAAiB58F,SAIxB4gG,EAAe5gG,QACjB+/F,EAAY9zF,KAAK,CACfpN,GAAIo7F,EAAAA,GACJ/wF,MAAOL,EAAK,kBACZ+hC,SAAUg2D,EACV32D,MAAO22D,EAAe5gG,SAItBghE,EAAsB,CACxB,MAAMmgC,EAAuBnB,EAC1Bt3F,KAAKygC,IAAD,uBAAOA,EAAEyB,gBAAT,aAAO,EAAYrc,QAAQoc,GAAYA,EAAQy2D,eACnDC,OACA9yE,OAAOhsB,SAEJ++F,GAAuBC,EAAAA,GAAAA,IAAc,IAAIJ,KAAyBN,GAAkB,MAEtFS,EAAqBthG,QACvB+/F,EAAY9zF,KAAK,CACfpN,GAAI4hG,EAAAA,GACJv3F,MAAOL,EAAK,mBACZ+hC,SAAU02D,EACVr3D,MAAOq3D,EAAqBthG,SAKlC,GAAImH,MAAAA,GAAJ,UAAIA,EAAMosC,gBAAV,OAAI,EAAgBs8B,WAAY,CAC9B,MAAM2xB,EAAU/vB,EAAgBtqE,EAAKosC,SAASs8B,WAAWhxE,IACrD2iG,GACFzB,EAAY9zF,KAAK,CACfpN,GAAI2hG,EAAAA,GACJt3F,MAAOL,EAAK,iBACZ+hC,SAAU42D,EAAQ52D,SAClBX,MAAOu3D,EAAQ52D,SAAU5qC,SAK/B,MAAO,IACF+/F,KACAC,KAEJ,CACD5uB,EAAaK,EAAiBmrB,EAAkBgE,EAAgB5/B,EAAsB75D,EAAM0B,EAAMg4F,IAG9FV,GAAkBr9F,EAAAA,EAAAA,KAAQ,IAC9B+8F,GAC4D,IAAzDC,EAAQvxE,QAAQ7oB,IAAD,uBAASA,EAAIklC,gBAAb,aAAS,EAAc5qC,UAAQA,QAChD,CAAC8/F,EAASD,KAEbx6F,EAAAA,EAAAA,KAAU,KACHs3F,IACLmE,IACKna,GACLsa,EAAkB,CAAE32F,KAAM,qBACzB,CAACq8E,EAAiBgW,EAAamE,EAAoBG,KAEtD3iD,EAAAA,GAAAA,GAAoB28C,EAAU32F,UAG9Be,EAAAA,EAAAA,KAAU,KACR,IAAKw6F,EACH,OAGF,MAAMhzE,EAASouE,EAAU32F,QACzB,IAAKuoB,EACH,OAGF,MAAM6uE,EAhKkB,GAgKRiE,GAAwC9yE,EAAO8hC,YAAc,EAAIgtC,KAEjF7tD,EAAAA,GAAAA,GAA2BjhB,EAAQ6uE,KAClC,CAACmE,EAAgBF,IAEpB,MAAM1d,GAAmB15E,EAAAA,EAAAA,KAAayiB,IACpC40E,EAAkB50E,GAClB,MAAMo1E,EAAe/iG,SAASysB,eAAgB,eAAckB,MAC5DujE,EAAAA,GAAAA,GAAiBtzE,EAAa3W,QAAU87F,EAAc,aAAS5+F,EAzKpC,OA0K1B,IAEGigG,GAAsBl5F,EAAAA,EAAAA,KAAY,CAACoiC,EAAqBiM,EAAoBowC,KAChF8V,EAAgBnyD,EAASiM,EAAUowC,GACnC+Z,EAAiB,CAAEp2D,QAAAA,MAClB,CAACo2D,EAAkBjE,IAEhB4E,GAAsBn5F,EAAAA,EAAAA,KAAaoiC,IACvC+3C,EAAc,CAAE/3C,QAAAA,MACf,CAAC+3C,IAEEif,GAAoBp5F,EAAAA,EAAAA,KAAaoiC,IACrC83C,EAAY,CAAE93C,QAAAA,MACb,CAAC83C,IAEE7zB,GAAkBrmD,EAAAA,EAAAA,KAAY,KAC7Bo+E,GACLsa,EAAkB,CAAE32F,KAAM,oBACzB,CAACq8E,EAAiBsa,IAEfW,GAA4Br5F,EAAAA,EAAAA,KAAaoiC,IAC7Cq2D,EAAoB,CAAEr2D,QAAAA,MACrB,CAACq2D,IAEEj+C,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAmE1CkH,GAAgB/7C,EAAAA,EAAAA,GAAe,gBAAiBnF,GAEtD,OAAK42F,GAAmB98C,IAAqBo9C,GAAoBxZ,EAe/D,0BAAK19E,UAAWkhD,GACd,0BACEz4C,IAAKupF,EACLhyF,UAAU,kDAEV,0BAAKA,UAAU,2BACb,6BAAQyI,IAAKs+D,EAAiB/mE,UAAU,kBACvC62F,EAAQp3F,KAzFjB,SAAqBmnE,EAAgC7kD,GAAe,MAClE,MAAM8lD,EAAY,UAAGjB,EAAWjlC,gBAAd,aAAG,EAAsB,GACrCgF,GAAkBxhC,EAAAA,EAAAA,GACtB,uCACA4c,IAAU20E,GAAkB,aAGxBU,EAAmBr1E,EAAQs1E,EAAAA,EAEjC,OAAIzwB,EAAWhxE,KAAOo7F,EAAAA,IACjBpqB,EAAWhxE,KAAO6+F,EAAAA,GAClB7tB,EAAWhxE,KAAO2hG,EAAAA,IAClB3wB,EAAWhxE,KAAO4hG,EAAAA,IAClB5wB,EAAWI,eACVa,EAGF,mBAAC3nE,EAAA,EAAD,CACEwD,IAAKkjE,EAAWhxE,GAChBoK,UAAW2mC,EACXhkC,UAAWikE,EAAW3mE,MACtByC,OAAK,EACL6wF,MAAO3sB,EAAWhxE,KAAOo7F,EAAAA,IAAwBpqB,EAAWhxE,KAAO6+F,EAAAA,EACnEt0F,MAAM,cAENE,QAAS,IAAM24E,EAAiBj3D,IAE/B6kD,EAAWhxE,KAAO4hG,EAAAA,GACjB,mBAACz4C,GAAA,EAAD,CAAaC,cAAY,EAACC,KAAG,IAC3B2nB,EAAWhxE,KAAOo7F,EAAAA,GACpB,wBAAGhxF,UAAU,gBACX4mE,EAAWhxE,KAAO6+F,EAAAA,EACpB,wBAAGz0F,UAAU,kBACX4mE,EAAWhxE,KAAO2hG,EAAAA,GACpB,mBAAC57E,GAAA,EAAD,CAAQzd,KAAMA,EAAM3B,KAAK,UAEzB,mBAAC,GAAD,CACEqqE,WAAYA,EACZE,WAAYwvB,IAAe5C,EAC3Bp5C,oBAAqBwuB,EACrB/B,gBAAiBqwB,EAAmBrwB,OAAkBxuE,KAO5D,mBAACyvE,GAAA,EAAD,CACEtkE,IAAKkjE,EAAWhxE,GAChB8rC,QAASmmC,EACTtrE,KAAMsqE,EAAAA,GACN5mE,MAAO2mE,EAAW3mE,MAClBD,UAAW2mC,EACXmgC,WAAYwvB,IAAe5C,EAC3Bp5C,oBAAqBwuB,EACrBb,eAAa,EACblQ,sBAAoB,EACpBgP,gBAAiBqwB,EAAmBrwB,OAAkBxuE,EACtD8H,QAAS24E,EACT//B,SAAUl3B,SAiCd,0BACEtZ,IAAKuJ,EACL/C,YAAa02C,EACb3lD,WAAWmF,EAAAA,EAAAA,GAAe,kCAAmCkC,EAAAA,GAAe,eAAiB,kBAE5FwvF,EAAQp3F,KAAI,CAACmnE,EAAYjpD,IACxB,mBAAC,GAAD,CACEja,IAAKkjE,EAAWhxE,GAChBgxE,WAAYA,EACZ8sB,YAAap6F,QAAQg9F,GAAc5C,GACnC3xE,MAAOpE,EACP28B,oBAAqBA,EACrB/sC,aAAcmpF,GAAkB/4E,EAAI,GAAK+4E,GAAkB/4E,EAAI,EAC/Dg2E,iBAAkBA,EAClB59C,gBAAiBA,EACjBgiB,qBAAsBA,EACtB87B,gBAAiB2E,EACjB1E,gBAAiB2E,EACjB1E,cAAe2E,EACf1E,sBAAuB2E,QA1C7B,0BAAK34F,UAAWkhD,GACZw8B,EAEEwZ,EACF,0BAAKl3F,UAAU,mBAAmBJ,EAAK,eAEvC,mBAAC4kB,GAAA,EAAD,MAJA,0BAAKxkB,UAAU,mBAAmBJ,EAAK,wC,mOClSjD,MAkLA,IAAelC,EAAAA,EAAAA,KAlLiB,IAQ1B,YAR2B,IAC/Bq/E,EAD+B,WAE/BjhF,EAF+B,UAG/BkE,EAH+B,oBAI/Bs6C,EAJ+B,QAK/Bj6C,EAL+B,cAM/Bu4F,EAN+B,gBAO/B7iD,GACI,EAEJ,MAAMttC,GAAMvN,EAAAA,EAAAA,IAAuB,MAE7B0E,GAAOC,EAAAA,EAAAA,KAEPyvD,EAAkB,MAAKytB,EAAInnF,KAE3B89F,GADiBtsB,EAAAA,GAAAA,IAAkB3+D,EAAK6xC,KACPx+C,EACjCxB,GAAiBH,EAAAA,EAAAA,GAAU,GAAEm1D,YAA0BokC,EAAat5F,EAAAA,GAAAA,UACnEy+F,IAAap0F,EAAAA,EAAAA,KAAS,UAAAs4E,EAAI32C,iBAAJ,eAAeprC,WAAYV,GAClDi1D,GAAW7xB,EAAAA,GAAAA,GAAa,UAACq/C,EAAI32C,iBAAL,aAAC,EAAeprC,SAAU69F,GAClDC,GAAY3+F,EAAAA,EAAAA,GAASm1D,GAAiBokC,EAAat5F,EAAAA,GAAAA,SACnD2+F,EAAoBz/F,QAAQo6F,GAAeoF,IAC3C,WAAE5yF,EAAF,kBAAcmH,IAAsBC,EAAAA,GAAAA,IAAa,GACjDE,EAAsBkmF,IAAgBxtF,EACtC8yF,EAAetF,GAAextF,GAE9B,kBACJ2jF,EADI,oBACeoP,EADf,wBAEJC,EAFI,kBAEqBnP,EAFrB,uBAGJC,EAHI,sBAGoBC,IACtBC,EAAAA,GAAAA,GAAuBzhF,GAErB6tE,GAAoBh3E,EAAAA,EAAAA,KAAY,IAAMmJ,EAAIpN,SAAS,IAEnDk7E,GAAiBj3E,EAAAA,EAAAA,KACrB,IAAMmJ,EAAIpN,QAAS1F,QAAQ,kCAC3B,IAGI6gF,GAAiBl3E,EAAAA,EAAAA,KACrB,IAAMmJ,EAAIpN,QAASlG,cAAc,8BACjC,KAGI,UACJqO,EADI,UACO+F,EADP,iBACkB2tE,EADlB,iBACoCC,EAAkB7gF,MAAO8gF,IAC/DE,EAAAA,GAAAA,GACF2hB,EACA3iB,EACAC,EACAC,GAGIxoE,GAAc1O,EAAAA,EAAAA,KAAY,MAC1BuqF,GAAsBxpF,GAC1BA,EAAQ,IACH08E,EACHliF,QAASi+F,MAEV,CAACjP,EAAmBxpF,EAAS08E,EAAK+b,IAE/BK,GAAoB75F,EAAAA,EAAAA,KAAa8F,IACrCA,EAAEC,kBACFD,EAAE0J,iBACF8pF,EAAe7b,KACd,CAAC6b,EAAe7b,IAEbqc,GAAsB95F,EAAAA,EAAAA,KAAY,KACtCs5F,MAAAA,GAAAA,EAAgB7b,KACf,CAACA,EAAK6b,IAEHS,GAAkB/5F,EAAAA,EAAAA,KAAY,KAClCe,EAAS,IACJ08E,EACHliF,QAASi+F,IACR,KACF,CAAC/b,EAAK18E,EAASy4F,IAEZQ,GAAsBh6F,EAAAA,EAAAA,KAAY,KACtCe,EAAS,IACJ08E,EACHliF,QAASi+F,QACRvgG,GAAW,KACb,CAACwkF,EAAK18E,EAASy4F,IAEZtzC,GAAkBlmD,EAAAA,EAAAA,KAAa8F,KACnCm0F,EAAAA,GAAAA,GAAoCn0F,GACpC8zF,EAAwB9zF,KACvB,CAAC8zF,KAEJ98F,EAAAA,EAAAA,KAAU,KACJN,GAAYkuF,MACf,CAACA,EAAwBluF,IAE5B,MAAMolD,GAAgB/7C,EAAAA,EAAAA,GACpB,YACA43E,EAAIzhF,OAASyhF,EAAIphF,QAAUohF,EAAIzhF,MAAQyhF,EAAIphF,OAAS,WAAa,aACjE0E,GAAW,cACXivD,EACAtvD,GAGF,OACE,0BACEyI,IAAKA,EACLzI,UAAWkhD,EACX6E,YAAaP,EACbnlD,QAAS2N,EACTmB,cAAe46E,IAEb1iF,EAAAA,IAAgBuxF,GAChB,mBAAC14F,EAAA,EAAD,CACEF,UAAU,oBACVG,MAAM,OACN6nD,MAAI,EACJ3nD,QAAS84F,GAET,wBAAGn5F,UAAU,uCAGhB64F,GACC,6BACEpwF,IAAK8mD,EACLvvD,UAAU,YAEV1J,MAAO0iG,EAAe,sBAAmBzgG,IAG5C+B,IAAmB0+F,GAClB,0BACEnkG,IAAKyF,EACL8W,IAAI,GACJpR,UAAU,YAGb+4F,GACC,mBAACl7D,GAAA,EAAD,IACEC,SAAO,EACPjpC,IAAKikG,EACLzpF,UAAQ,EACRG,MAAI,EACJd,OAAK,EACLlC,yBAAuB,EACvB+C,aAAW,EACXiqF,QAAQ,QAEJnsF,IAGPG,GACC,mBAAC0D,GAAA,EAAD,CAAS/Q,MAAO7F,GAAkBu+F,EAAY,QAAU,UAEzDx4F,QAAmC9H,IAAxB0gG,GACV,mBAAC3vF,GAAA,EAAD,CACExK,OAAQ+qF,EACR3S,iBAAkBA,EAClBC,iBAAkBA,EAClB3zE,UAAWA,EACX+F,UAAWA,EACXjT,MAAO8gF,EACPp3E,UAAU,mBACVwJ,WAAS,EACTvK,QAAS+qF,EACTlnE,oBAAqBmnE,IAEnBl0C,GAAmB,mBAACtyC,EAAA,EAAD,CAAUpD,QAASg5F,EAAiBp2F,KAAK,QAAQrD,EAAK,qBAC3E,mBAAC6D,EAAA,EAAD,CAAUpD,QAASi5F,EAAqBr2F,KAAK,YAC1CrD,EAAKm2C,EAAkB,cAAgB,oBAEzC6iD,GACC,mBAACn1F,EAAA,EAAD,CAAU+2B,aAAW,EAACv3B,KAAK,SAAS5C,QAAS+4F,GAAsBx5F,EAAK,gBCrHpF,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,IAAWL,EAAAA,EAAAA,IAAyBH,IAAW,GACjDm4C,EAAkBz8C,QAAQ8E,KAAWie,EAAAA,EAAAA,IAAqBze,EAAQQ,GACxE,MAAO,CACL8kC,UAAWtlC,EAAO67F,KAAKC,MAAMD,KAC7B1jD,gBAAAA,KANcp4C,EAzDyB,IAOvC,IAPwC,UAC5CqC,EAD4C,YAE5C0zF,EAF4C,YAG5CiG,EAH4C,UAI5Cz2D,EAJ4C,gBAK5C6S,EAL4C,YAM5C6jD,GACI,EACJ,MAAM,cAAEC,EAAF,QAAiB1f,IAAY/6E,EAAAA,EAAAA,MAG7B4S,GAAe9W,EAAAA,EAAAA,IAAuB,OAG1Cs+C,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc8nF,WAjBzB,OAmB5B19F,EAAAA,EAAAA,KAAU,KACJs3F,GACFmG,MAED,CAACnG,EAAamG,IAEjB,MAAMV,GAAoB75F,EAAAA,EAAAA,KAAay9E,IACrC5C,EAAQ,CAAE4C,IAAAA,EAAKgd,cAAc,MAC5B,CAAC5f,IAEErgC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACEvxC,IAAKuJ,EACLhS,WAAWmF,EAAAA,EAAAA,GAAe,YAAanF,EAAWqH,EAAAA,GAAe,eAAiB,kBAEhFsyF,EAEE7/C,GAAqB5W,GAAaA,EAAUnsC,OAC9CmsC,EAAUzjC,KAAKs9E,GACb,mBAAC,GAAD,CACEr5E,IAAKq5E,EAAInnF,GACTmnF,IAAKA,EACLziC,oBAAqBA,EACrBx+C,YAAa43F,EACbrzF,QAASs5F,EAAcC,OAAcrhG,EACrCqgG,cAAeO,EACfpjD,gBAAiBA,MAGnB+D,GAAqB5W,EACvB,0BAAKljC,UAAU,mBAAf,kBAEA,mBAACwkB,GAAA,EAAD,MAhBA,0BAAKxkB,UAAU,mBAAf,kDCxDD,IAAKg6F,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAOL,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAeG,aAAc,yBAC9B,CAACH,GAAeI,UAAW,mBAC3B,CAACJ,GAAeK,MAAO,WAGnBC,GAAwB,CAC5B,CAACN,GAAeE,OAAQ,aACxB,CAACF,GAAeG,aAAc,gBAC9B,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAoEzB,IAAe38F,EAAAA,EAAAA,KAjEwB,IAEjC,IAFkC,UACtCo+C,EADsC,YAC3BQ,EAD2B,eACdi+C,EADc,aACEC,GACpC,EACJ,MAAM56F,GAAOC,EAAAA,EAAAA,KAEb,SAAS46F,EAAgBv+C,GACvB,OACE,mBAACh8C,EAAA,EAAD,CACEF,UAAY,sBAAoB87C,IAAcI,EAAM,YAAc,IAElE77C,QAAS,IAAMi8C,EAAYJ,GAC3Bv5C,UAAW/C,EAAKq6F,GAAuB/9C,IACvCx5C,OAAK,EACL6wF,OAAK,EACLpzF,MAAM,eAEN,wBAAGH,UAAWs6F,GAAsBp+C,MAK1C,MAAMw+C,GAAmBp7F,EAAAA,EAAAA,KAAY,KACnCk7F,EAAa1+C,IAAck+C,GAAeI,SAAW,WAAa,UACjE,CAACt+C,EAAW0+C,IAMf,OACE,0BAAKx6F,UAAU,oBAAoBK,QALrC,SAAyBuX,GACvBA,EAAMvS,mBAIuDC,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACpFujD,IAAck+C,GAAeE,OAASp+C,IAAck+C,GAAeG,aAClE,mBAACj6F,EAAA,EAAD,CACEF,UAAU,uBACV2C,UAAWm5C,IAAck+C,GAAeI,SAAW,kBAAoB,cACvE13F,OAAK,EACL6wF,OAAK,EACLpzF,MAAM,cACNE,QAASq6F,GAET,wBAAG16F,UAAU,iBAIhBy6F,EAAgBT,GAAeE,OAC/BO,EAAgBT,GAAeG,aAC/BM,EAAgBT,GAAeI,UAC/BK,EAAgBT,GAAeK,MAE/Bv+C,IAAck+C,GAAeE,OAC5B,mBAACh6F,EAAA,EAAD,CACEF,UAAU,uBACVK,QAASk6F,EACT53F,UAAU,gBACVD,OAAK,EACL6wF,OAAK,EACLpzF,MAAM,eAEN,wBAAGH,UAAU,0BCnCvB,IAAIi+B,IAAc,EAElB,MA2OA,IAAevgC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL+8F,kBAAmB/8F,EAAO+8F,kBAC1B5iC,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,GACjD23C,aAAc33C,EAAO23C,gBALP53C,EA3O0B,IAmBxC,IAnByC,OAC7CS,EAD6C,SAE7CN,EAF6C,OAG7CgB,EAH6C,gBAI7C4+E,EAJ6C,YAK7Cic,EAL6C,kBAM7CgB,EAN6C,qBAO7C5iC,EAP6C,aAQ7CxiB,EAR6C,OAS7CtC,EAT6C,QAU7Ch0C,EAV6C,cAW7CktF,EAX6C,oBAY7CC,EAZ6C,gBAa7CyH,EAb6C,YAc7C+F,EAd6C,eAe7CW,EAf6C,aAgB7CC,EAhB6C,eAiB7CvS,EAjB6C,qBAkB7CD,GACI,EACJ,MAAM,uBAAE4S,EAAF,0BAA0BC,IAA8Bz7F,EAAAA,EAAAA,OACvD08C,EAAWC,IAAgBt3C,EAAAA,EAAAA,IAAiB,IAC5C8iF,EAAcuT,IAAmBr2F,EAAAA,EAAAA,IAAmB,KACpD2xF,EAAoB2E,IAAyBt2F,EAAAA,EAAAA,IAAmB,KAEhEu2F,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep8F,EAAQG,OAAS1G,EAAWsK,EAAAA,KAClF,aAAE0K,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,EAAQG,GAAS,GAAO,IAEpFg/B,IAAen/B,IAClBm/B,IAAc,IAGhB7hC,EAAAA,EAAAA,KAAU,KACR62C,MACC,CAACA,KAEJ72C,EAAAA,EAAAA,KAAU,KACHm5C,IACDwiB,GACF6iC,IAEFC,OACC,CAAC9iC,EAAsBxiB,EAAcslD,EAA2BD,KAEnE5vF,EAAAA,EAAAA,KAAgB,KACd,GAAKnI,EAAAA,GASL,OALI/D,IACF1K,SAASmT,KAAKjT,UAAUC,IAAI,iCAC5BH,SAASmT,KAAKjT,UAAUC,IAAI,wBAGvB,KACDuK,IACFq8F,EAAAA,GAAAA,KAAQ,KACN/mG,SAASmT,KAAKjT,UAAUkT,OAAO,uBAC/B7K,YAAW,KACTvI,SAASmT,KAAKjT,UAAUkT,OAAO,mCAzFhB,WA8FtB,CAAC1I,IAEJ,MAAMs8F,GAAkBlgG,EAAAA,EAAAA,IAAOqsF,GAC/B6T,EAAgB//F,QAAUksF,GAC1BnrF,EAAAA,EAAAA,KAAU,KACHg/F,EAAgB//F,QAAQtE,SAAU+H,IAIvCs8F,EAAgB//F,QAAQ6xD,SAAS7qC,IAC/B4lE,EAAe,CAAEkI,MAAO9tE,OAG1By4E,EAAgB,OACf,CAACh8F,EAAQmpF,IAEZ,MAAMmL,GAAoB9zF,EAAAA,EAAAA,KAAY,CAAC6wF,EAAe9tE,KACpDy4E,GAAiB5O,GAAW,IAAIA,EAAQ7pE,KAExC8pE,EAAcgE,KACb,CAAChE,IAEEkP,GAAwBngG,EAAAA,EAAAA,IAAOk7F,GACrCiF,EAAsBhgG,QAAU+6F,GAChCh6F,EAAAA,EAAAA,KAAU,KACHi/F,EAAsBhgG,QAAQtE,SAAU+H,IAI7Cu8F,EAAsBhgG,QAAQ6xD,SAASouC,IACrCtT,EAAqB,CACnBsT,WAAAA,OAIJR,EAAgB,OACf,CAACh8F,EAAQkpF,IAEZ,MAAMuT,GAA0Bj8F,EAAAA,EAAAA,KAAa6wF,IAC3C4K,GAAuBr1E,GAAQ,IAAIA,EAAKyqE,EAAMv6F,MAE9Cw2F,EAAoB+D,KACnB,CAAC/D,IAEEzJ,GAAerjF,EAAAA,EAAAA,KAAa+B,IAChCpC,IACAu7F,EAAan5F,KACZ,CAACpC,EAASu7F,IAEPhC,GAAsBl5F,EAAAA,EAAAA,KAAY,CAACoiC,EAAqBiM,EAAoBowC,KAChF8V,EAAgBnyD,EAASiM,EAAUowC,GAAgB,KAClD,CAAC8V,IAEEj0F,GAAOC,EAAAA,EAAAA,KAEb,SAAS27F,EAAcnrF,EAAmB46D,GACxC,OAAQnvB,GACN,KAAKk+C,GAAeE,MAClB,OACE,mBAAC,GAAD,CACEl6F,UAAU,aACVmsF,cAAeiH,IAGrB,KAAK4G,GAAeG,YAClB,OACE,mBAAC,GAAD,CACEn6F,UAAU,aACV0zF,YAAa50F,IAAWuR,GAAY46D,GACpCmhB,oBAAqBmP,EACrBn9F,OAAQA,IAGd,KAAK47F,GAAeI,SAClB,OACE,mBAAC,GAAD,CACEp6F,UAAU,aACV0zF,cAAahW,GAAkB5+E,IAAWuR,GAAY46D,GACtDyS,gBAAiBA,EACjBmW,gBAAiB2E,EACjBp6F,OAAQA,EACRN,SAAUA,IAGhB,KAAKk8F,GAAeK,KAClB,OACE,mBAAC,GAAD,CACEr6F,UAAU,aACV0zF,cAAaiG,GAAc76F,IAAWuR,GAAY46D,GAClD0uB,YAAaA,EACbC,YAAaA,KAYvB,MAAMhlF,EACJ,sCACE,0BAAK5U,UAAU,kBAAkBK,QANrC,SAAyBuX,GACvBA,EAAMvS,oBAMD44B,IACC,mBAAC9b,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAW05B,EAAWS,YAAanmD,OAAOgzE,OAAO6wB,IAAwBljG,QAC/FykG,IAIN34F,EAAAA,IACC,mBAAC3C,EAAA,EAAD,CACEwC,OAAK,EACL6wF,OAAK,EACLpzF,MAAM,cACNwC,UAAW/C,EAAK,SAChBI,UAAU,sBACVzD,KAAK,OACL8D,QAASpB,GAET,wBAAGe,UAAU,gBAGjB,mBAAC,GAAD,CACE87C,UAAWA,EACXQ,YAAaP,EACbw+C,eAAgBA,EAChBC,aAAc7X,KAKpB,GAAI9/E,EAAAA,GAAyB,CAC3B,IAAK0K,EACH,OAGF,MAAMvN,GAAYmF,EAAAA,EAAAA,GAChB,yBACAsI,EACAktF,GAAqB,oBAGvB,OACE,mBAAC3X,GAAA,EAAD,KACE,0BAAKhjF,UAAWA,GACb4U,IAMT,OACE,mBAACtL,GAAA,EAAD,CACExK,OAAQA,EACR0E,UAAU,OACV+F,UAAU,SACVtK,QAASA,EACTe,UAAU,aACV8iB,oBAAqB7jB,EACrBoyE,aAAehqE,EAAAA,QAAkC9O,EAAnByiG,EAC9BS,aAAep0F,EAAAA,QAAkC9O,EAAnB0iG,EAC9BS,mBAAoBr0F,EAAAA,GACpBs0F,WAAS,GAER/mF,OClPP,IAAelX,EAAAA,EAAAA,KA3BkB,IAM3B,IAN4B,WAChCk+F,EADgC,MAEhCzoE,EAFgC,WAGhC0oE,EAHgC,IAIhCtwE,EAJgC,QAKhClrB,GACI,EACJ,OACE,mBAAC8jB,GAAA,EAAD,CACEzgB,IAAKm4F,EAAW5Z,QAChBjiF,WAAWmF,EAAAA,EAAAA,GAAe,6CAA8Cy2F,GAAc,eACtFtzC,WAAS,EAETjoD,QAAS,IAAMA,EAAQw7F,GACvB1oE,MAAOA,GAENyoE,GACC,mBAACjgF,GAAA,EAAD,CAAQpf,KAAK,QAAQqf,KAAM2P,IAE7B,0BAAKvrB,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0B67F,EAAW5Z,SACrC,2BAAMjiF,UAAU,aAAYM,EAAAA,EAAAA,GAAWu7F,EAAW3+D,mBCwD1D,IAAex/B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAD,CACEkoB,UAAWloB,EAAOmoB,MAAMrB,QAFR/mB,EApEiC,IAO/C,IAPgD,UACpDmoB,EADoD,OAEpDhnB,EAFoD,aAGpDg1C,EAHoD,YAIpDusC,EAJoD,QAKpDhgF,EALoD,QAMpDpB,GACI,EACJ,MAAM,eAAEsiF,IAAmBniF,EAAAA,EAAAA,MAGrB4S,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GAEzFujG,GAAoBx8F,EAAAA,EAAAA,KAAY,IAAuC,IAAtC,MAAEsoB,EAAF,QAASq6D,GAA6B,EAC3E,MAAM12D,EAAMzF,EAAU8B,GACtB25D,EAAe,CACbU,QAAU,IAAGA,IAAUnuC,GAAgBvoB,EAAO,IAAGA,EAAIo0B,WAAa,KAClE/3B,MAAAA,IAEFvnB,MACC,CAACA,EAASkhF,EAAgBz7D,EAAWguB,IAElCioD,EAAuBxW,GAAsB,CACjDl1E,SAAUvR,EACVglB,MAAOu8D,EACPntC,SAAU4oD,EACV78F,QAAAA,KAGF7C,EAAAA,EAAAA,KAAU,KACJikF,IAAgBA,EAAYtpF,QAC9BkI,MAED,CAACohF,EAAaphF,KAEjB7C,EAAAA,EAAAA,KAAU,KACR+oF,GAAsB,uBAAwB4W,EAAsB/pF,KACnE,CAAC+pF,IAEJ,MAAMC,GAAenpF,EAAAA,EAAAA,GAAYwtE,GAAeA,EAAYtpF,OAASspF,OAAc9nF,EAAWgV,GACxF0uF,EAAmB5b,IAAgBA,EAAYtpF,OAASilG,EAAe3b,EAE7E,IAAK9yE,GAAiB0uF,IAAqBA,EAAiBllG,OAC1D,OAGF,MAAMiJ,GAAYmF,EAAAA,EAAAA,GAChB,mDACAsI,GAGF,OACE,0BAAKzN,UAAWA,EAAWyI,IAAKuJ,GAC7BiqF,GAAoBA,EAAiBx8F,KAAI,CAACy8F,EAAgBn6E,IACzD,mBAAC,GAAD,CACEre,IAAM,GAAEw4F,EAAet0E,SAASs0E,EAAeja,UAC/C4Z,WAAYK,EACZ3wE,IAAKzF,EAAUo2E,EAAet0E,OAC9Bg0E,YAAU,EACVv7F,QAASy7F,EACT3oE,MAAO4oE,IAAyBh6E,WChC1C,IAAerkB,EAAAA,EAAAA,KAvCsB,IAE/B,IAFgC,OACpCoB,EADoC,YAC5BuhF,EAD4B,QACfphF,GACjB,EACJ,MAAM,eAAEsiF,IAAmBniF,EAAAA,EAAAA,OAEpB47F,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep8F,EAAQG,OAAS1G,EAAWsK,EAAAA,IAElFmL,GAAc1O,EAAAA,EAAAA,KAAau8F,IAC/Bta,EAAe,CACbU,QAAU,IAAG4Z,EAAW5Z,UACxBr6D,MAAOi0E,EAAWj0E,QAEpB3oB,MACC,CAACA,EAASsiF,IAEb,OACE,mBAACj4E,GAAA,EAAD,CACExK,OAAQA,EACR0E,UAAU,OACV+F,UAAU,SACVtK,QAASA,EACTe,UAAU,iBACV8iB,oBAAqB7jB,EACrBoyE,aAAehqE,EAAAA,QAAkC9O,EAAnByiG,EAC9BS,aAAep0F,EAAAA,QAAkC9O,EAAnB0iG,EAC9BS,mBAAoBr0F,EAAAA,GACpBs0F,WAAS,GAERtb,EAAY5gF,KAAKo8F,GAChB,mBAAC,GAAD,CACEn4F,IAAKm4F,EAAW5Z,QAChB4Z,WAAYA,EACZx7F,QAAS2N,UC4CnB,IAAetQ,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,SAAEujC,GAAa/jC,EAAO+jC,SAASw6D,SAGrC,MAAO,CAAEx6D,SAAAA,EAAUoU,iBAFK15B,EAAAA,EAAAA,IAAqBze,EAAQQ,GAEjB25D,sBADP9vB,EAAAA,EAAAA,IAA2BrqC,MAJxCD,EA7D8B,IAQ5C,IAR6C,OACjDS,EADiD,SAEjDN,EAFiD,OAGjDgB,EAHiD,SAIjD6iC,EAJiD,gBAKjDoU,EALiD,gBAMjD89C,EANiD,qBAOjD97B,GACI,EACJ,MAAM,sBAAEqkC,IAA0Bh9F,EAAAA,EAAAA,MAG5B4S,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GACzF8jG,GAAexpF,EAAAA,EAAAA,GAAY8uB,GAAU,GACrC26D,EAAoB36D,GAAY06D,EAChCrE,GAAoBC,EAAAA,GAAAA,GAAqB75F,EAAQN,IAGrD07C,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc4nC,WAtBzB,OAwB5Bx9C,EAAAA,EAAAA,KAAU,IAAO0C,GAAS8iB,EAAAA,EAAAA,GAAsBw6E,QAAyB7jG,GAAY,CAACuG,EAAQs9F,IAE9F,MAIMp8F,GAAYmF,EAAAA,EAAAA,GAChB,gDACAsI,IACE6uF,MAAAA,GAAAA,EAAmBvlG,SAAW,UAGlC,OACE,0BACE0R,IAAKuJ,EACLhS,UAAWA,EACXiP,YAdoB,KACtB+oF,EAAkB,CAAE32F,KAAM,oBAevBkM,GAAgB+uF,EACfA,EAAkB78F,KAAKiiC,GACrB,mBAACsmC,GAAA,EAAD,CACEtkE,IAAKg+B,EAAQ9rC,GACb8rC,QAASA,EACTnlC,KAAM04F,EAAAA,EACN36C,oBAAqBA,EACrBj6C,QAASvB,EAAS+0F,OAAkBt7F,EACpC0gD,SAAUvX,EACVqU,gBAAiBA,EACjB6/C,YAAU,EACV79B,qBAAsBA,MAGxBxqD,EACF,mBAACiX,GAAA,EAAD,WACEjsB,OC1FV,IAAgB,KAAO,uBAAuB,YAAc,wBC2G5D,IAAemF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAQujC,SAAU46D,GAAgB3+F,EAAO2qE,aAAa4zB,SAGtD,MAAO,CAAEI,YAAAA,EAAaxmD,iBAFE15B,EAAAA,EAAAA,IAAqBze,EAAQQ,GAEd25D,sBADV9vB,EAAAA,EAAAA,IAA2BrqC,MAJxCD,EArEkC,IAOhD,IAPiD,OACrDmB,EADqD,YAErDy9F,EAFqD,gBAGrDxmD,EAHqD,qBAIrDgiB,EAJqD,oBAKrDq0B,EALqD,qBAMrDpE,GACI,EACJ,MAAM,yBAAEwU,IAA6Bp9F,EAAAA,EAAAA,MAG/B4S,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GACzF8jG,GAAexpF,EAAAA,EAAAA,GAAY0pF,GAAa,GACxCD,EAAoBC,GAAeF,GAEzChnD,EAAAA,GAAAA,GAAoBrjC,EAAa3W,SAEjC,MACEm+C,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc4nC,WAtBzB,OAwB5Bx9C,EAAAA,EAAAA,KAAU,IACR0C,GAAS8iB,EAAAA,EAAAA,GAAsB46E,QAA4BjkG,GAC1D,CAACuG,EAAQ09F,IAEZ,MAAMjB,GAA0Bj8F,EAAAA,EAAAA,KAAam9F,IACtC39F,IACLstF,EAAoBqQ,GACpBzU,EAAqB,CACnBsT,WAAYmB,EAAG7mG,KAEjB4mG,OACC,CAACxU,EAAsBwU,EAA0B19F,EAAQstF,IAEtDpsF,GAAYmF,EAAAA,EAAAA,GAChBhP,GAAAA,KACA,mCACAsX,IACC6uF,MAAAA,GAAAA,EAAmBvlG,SAAUZ,GAAAA,QAGhC,OACE,0BACEsS,IAAKuJ,EACLhS,UAAWA,GAEVuN,GAAgB+uF,EACfA,EAAkB78F,KAAKiiC,GACrB,mBAACsmC,GAAA,EAAD,CACEtkE,IAAKg+B,EAAQ9rC,GACb8rC,QAASA,EACT1hC,UAAW7J,GAAAA,YACXoG,KAAMmgG,EAAAA,GACNpiD,oBAAqBA,EACrBj6C,QAASk7F,EACTtiD,SAAUvX,EACVqU,gBAAiBA,EACjB6/C,YAAU,EACV79B,qBAAsBA,MAGxBxqD,EACF,mBAACiX,GAAA,EAAD,WACEjsB,OC7CV,IAAemF,EAAAA,EAAAA,KApCsB,IAQ/B,IARgC,OACpCoB,EADoC,eAEpCosF,GAAiB,EAFmB,gBAGpCn1C,EAHoC,aAIpC+xC,EAJoC,eAKpCqD,EALoC,QAMpClsF,EANoC,oBAOpC6jB,GACI,EACJ,MAAOk4E,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep8F,EAAQG,GAE9DW,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACyJ,GAAA,EAAD,CACExK,OAAQA,EACR0K,WAAS,EACThG,UAAU,QACV+F,UAAW2hF,EAAiB,MAAQ,SACpClrF,UAAU,iBACVf,QAASA,EACT6jB,oBAAqBA,EACrBuuD,aAAehqE,EAAAA,QAAkC9O,EAAnByiG,EAC9BS,aAAep0F,EAAAA,QAAkC9O,EAAnB0iG,EAC9BS,mBAAoBr0F,EAAAA,IAEnBygF,GAAgB,mBAACrkF,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAASynF,GAAeloF,EAAK,qBACnEurF,GACC,mBAAC1nF,EAAA,EAAD,CAAUR,KAAK,WAAW5C,QAAS8qF,GAChCvrF,EAAKm2C,EAAkB,cAAgB,wB,oDCxClD,MAkCA,IAAer4C,EAAAA,EAAAA,KA1ByB,IAElC,IAFmC,MACvCyyF,EADuC,MAChCh9D,EADgC,QACzB9yB,GACV,EACJ,MAAM2N,GAAc1O,EAAAA,EAAAA,KAAa8F,IAE/BA,EAAE0J,iBAEFzO,MAAAA,GAAAA,EAAU8vF,KACT,CAACA,EAAO9vF,IAELL,GAAYmF,EAAAA,EAAAA,GAChB,cACAguB,GAAS,SAGX,OACE,0BACEnzB,UAAWA,EACX+lD,YAAa/3C,EACb/N,MAAOkwF,EAAMA,OAEb,mBAACgK,GAAA,EAAD,CAAamB,WAAYnL,EAAMv6F,GAAI2G,KA7Bf,GA6BwCogG,qBAAmB,EAACC,sBAAoB,QCwH1G,IAAel/F,EAAAA,EAAAA,KA9FoB,IAS7B,IAT8B,OAClCoB,EADkC,OAElCotF,EAFkC,aAGlC3jB,EAHkC,QAIlCtpE,EAJkC,cAKlCktF,EALkC,oBAMlCC,EANkC,eAOlCnE,EAPkC,qBAQlCD,GACI,EAEJ,MAAMh2E,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GACzFskG,GAAqCC,EAAAA,GAAAA,GACzC5Q,EAAOn1F,OAAS,IAAIwxE,KAAiB2jB,QAAU3zF,EAvD5B,MAwDhB,IAEL88C,EAAAA,GAAAA,GAAoBrjC,EAAa3W,SAEjC,MAAM0hG,GAAoBz9F,EAAAA,EAAAA,KAAa6wF,IACrChE,EAAcgE,EAAMC,QACpBnI,EAAe,CAAEkI,MAAOA,EAAMv6F,OAC7B,CAACqyF,EAAgBkE,IAEdoP,GAA0Bj8F,EAAAA,EAAAA,KAAa6wF,IAC3C/D,EAAoB+D,GACpBnI,EAAqB,CAAEsT,WAAYnL,EAAMv6F,OACxC,CAACoyF,EAAsBoE,IAEpBt8B,GAAexwD,EAAAA,EAAAA,KAAa6wF,IAC5B,WAAYA,EACd4M,EAAkB5M,GAElBoL,EAAwBpL,KAEzB,CAACoL,EAAyBwB,IAEvB/uF,GAAc1O,EAAAA,EAAAA,KAAY,CAAC8wF,EAAgBx6F,KAC/Cu2F,EAAciE,GACdnI,EAAe,CAAEkI,MAAOv6F,MACvB,CAACqyF,EAAgBkE,IAEd6Q,GAAyB19F,EAAAA,EAAAA,KAAa6wF,IAC1C/D,EAAoB+D,GACpBnI,EAAqB,CAAEsT,WAAYnL,EAAMv6F,OACxC,CAACoyF,EAAsBoE,IAEpB6Q,EAAgB1X,GAAsB,CAC1Cl1E,SAAUvR,EACV8lF,cAAc,EACd9gE,MAAO+4E,EACP3pD,SAAU4c,EACV7wD,QAAAA,KAGF7C,EAAAA,EAAAA,KAAU,MA9FZ,SAAwB2lB,EAAe/P,GACrC,MAAM1c,EAAY0c,EAAa3W,QAC/B,IAAK/F,EACH,OAGF,MAAM,eAAE0vF,EAAF,YAAkBD,GAAgBR,GACtCjvF,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKyvF,EAAYhuF,SAAWguF,EAAYhjE,GACtC,OAEF,MAAMqjE,EAAQJ,EAAe,GAC7B,IAAKA,EAAenvF,SAASksB,IACvBA,IAAUqjE,IAAUC,GAAe/vF,EAAWyvF,EAAYK,IAAQ,GAAQ,CAC9E,MACMqN,EAAuB,UADZ1wE,EAAQijE,EAAeA,EAAejuF,OAAS,GAAK,QAAU,OAxBxD,GAyBgBgrB,EAA6B,GAEpE8iB,EAAAA,GAAAA,GAA2BvvC,EAAWm9F,IAuEtCyK,CAAeD,EAAejrF,KAC7B,CAACirF,IAEJ,MAAMj9F,GAAYmF,EAAAA,EAAAA,GAChB,gDACAsI,GAGF,OACE,0BACEhF,IAAKuJ,EACLhS,UAAWA,GAEVuN,GAAgBsvF,EACfA,EAAWp9F,KAAI,CAAC0wF,EAAOpuE,IACrB,WAAYouE,EACV,mBAAC,GAAD,CACEzsF,IAAKysF,EAAMv6F,GACXu6F,MAAOA,EACPh9D,MAAO8pE,IAAkBl7E,EACzB1hB,QAAS2N,IAGX,mBAAC,GAAD,CACEtK,IAAKysF,EAAMv6F,GACXu6F,MAAOA,EACPh9D,MAAO8pE,IAAkBl7E,EACzB1hB,QAAS28F,MAIbzvF,EACF,mBAACiX,GAAA,EAAD,WACEjsB,MC3FV,IAAemF,EAAAA,EAAAA,KAxCkB,IAQ3B,IACAkX,GAT4B,MAChC3U,EADgC,YAEhCi9B,EAFgC,UAGhCkJ,EAHgC,SAIhC+2D,EAJgC,MAKhChqE,EALgC,qBAMhC1lB,EAAuB,GANS,QAOhCpN,GACI,EAGJ,MAAM+8F,GAAmBjjG,EAAAA,EAAAA,GAASisC,EAAa,eAAcA,EAAUz8B,WAAQpR,GAW/E,OAVA4kG,EAAWA,GAAYC,EAEnBD,EACFvoF,EACE,0BAAK/f,IAAKsoG,EAAUn9F,UAAWyN,EAAsB2D,IAAI,GAAGisF,SAAS,QAAQ3oG,WAAW,IAEjFuL,IACT2U,GAAUgzD,EAAAA,GAAAA,IAAgB3nE,EAAO,IAIjC,mBAACkkB,GAAA,EAAD,CACEgP,MAAOA,EACPnzB,UAAU,iCACV+lD,YAAawzC,GAAAA,EACbl5F,QAASA,GAET,2BAAML,UAAU,SACM,iBAAZ4U,GAAuBtU,EAAAA,EAAAA,GAAWsU,GAAWA,GAEvD,0BAAK5U,UAAU,iBACZC,GAAU,0BAAKD,UAAU,SAASC,GAClCi9B,GAAgB,0BAAKl9B,UAAU,eAAek9B,QCavD,IAAex/B,EAAAA,EAAAA,KAjDmB,IAE5B,UACArF,EACA+tC,EACAk3D,GAL6B,MACjCnqE,EADiC,aAC1BoqE,EAD0B,aACZC,EADY,QACEn9F,GAC/B,EAKA,UAAWm9F,IACbnlG,EAAQmlG,EAAanlG,OAGnB,cAAemlG,IACjBp3D,EAAYo3D,EAAap3D,WAEvB,iBAAkBo3D,GAAgBD,IACpCD,EAAeE,EAAaF,cAG9B,MAAMF,GAAmBjjG,EAAAA,EAAAA,GAASmjG,EAAgB,eAAcA,EAAa3zF,WAAQpR,GAC/Eq9C,GAAez7C,EAAAA,EAAAA,GAAS9B,GAAU,QAAOA,EAAMzC,aAC/C6X,GAAuBkwB,EAAAA,GAAAA,GAAmBiY,GAE1C5nC,GAAc1O,EAAAA,EAAAA,KAAY,KAC9Be,EAAQm9F,KACP,CAACA,EAAcn9F,IAEA,QAAlB,GAAIk9F,EACF,OACE,0BAAKv9F,UAAU,kCAAkCK,QAAS2N,GACxD,0BAAKnZ,KAAK,UAACwD,SAAD,iBAAC,EAAO+tC,iBAAR,aAAC,EAAkBprC,UAAYoiG,EAAkBhsF,IAAI,KAC/D,0BAAKvc,IAAK+gD,EAAc51C,WAAWmF,EAAAA,EAAAA,GAAe,aAAcsI,GAAuB2D,IAAI,MAKjG,MAAM,MAAEnR,EAAF,YAASi9B,GAAgBsgE,EAE/B,OACE,mBAAC,GAAD,CACErqE,MAAOA,EACPgqE,SAAUvnD,IAA0B,QAAT,EAAAxP,SAAA,eAAWprC,UAAWoiG,EACjD3vF,qBAAsBA,EACtBxN,MAAOA,EACPi9B,YAAaA,EACb78B,QAAS2N,OCjCf,IAAetQ,EAAAA,EAAAA,KApBqB,IAAsC,IAArC,MAAEy1B,EAAF,aAASqqE,EAAT,QAAuBn9F,GAAc,EACxE,MAAM,MACJJ,EADI,IACG0J,EADH,YACQuzB,EADR,aACqBogE,GACvBE,EAEExvF,GAAc1O,EAAAA,EAAAA,KAAY,KAC9Be,EAAQm9F,KACP,CAACA,EAAcn9F,IAElB,OACE,mBAAC,GAAD,CACE8yB,MAAOA,EACPiT,UAAWk3D,EACXr9F,MAAOA,GAAS0J,EAChBuzB,YAAaA,EACb78B,QAAS2N,OCaf,IAAetQ,EAAAA,EAAAA,KAxBiB,IAE1B,IAF2B,aAC/B8/F,EAD+B,gBACjBznD,EADiB,YACA4jD,EADA,oBACar/C,EADb,QACkCj6C,GAC7D,EACJ,MAAM,IAAE08E,GAAQygB,EAEVxvF,GAAc1O,EAAAA,EAAAA,KAAY,CAACm+F,EAAgB9vD,EAAoBowC,KACnE19E,EAAQm9F,EAAc7vD,EAAUowC,KAC/B,CAACyf,EAAcn9F,IAElB,GAAK08E,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACLziC,oBAAqBA,EACrBt6C,UAAU,sBACVK,QAASs5F,EAAc3rF,OAAczV,EACrCw9C,gBAAiBA,OCWvB,IAAer4C,EAAAA,EAAAA,KA7BqB,IAM9B,IAN+B,aACnC8/F,EADmC,gBAEnCznD,EAFmC,oBAGnCuE,EAHmC,QAInCj6C,EAJmC,qBAKnC03D,GACI,EACJ,MAAM,QAAEr2B,GAAY87D,EAEpB,GAAK97D,EAIL,OACE,mBAACsmC,GAAA,EAAD,CACEtmC,QAASA,EACTnlC,KAAMmhG,EAAAA,GACNpjD,oBAAqBA,EACrBr6C,MAAOyhC,EAAQyuD,MACfnwF,UAAU,sBACVK,QAASA,EACT44C,SAAUukD,EACVznD,gBAAiBA,EACjB6/C,YAAU,EACV79B,qBAAsBA,OCbtBrjB,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAK,GAoLjD,IAAej3C,EAAAA,EAAAA,KAlKwB,IAYjC,IAZkC,OACtCoB,EADsC,MAEtC8oB,EAFsC,UAGtC+1E,EAHsC,iBAItCC,EAJsC,SAKtCC,EALsC,gBAMtC9nD,EANsC,YAOtC4jD,EAPsC,SAQtCh3E,EARsC,QAStC1jB,EATsC,eAUtC6+F,EAVsC,qBAWtC/lC,GACI,EACJ,MAAM,SACJljC,EADI,SAEJkpE,IACE3+F,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,OACtC,aAAEqS,EAAF,qBAAgBE,IAAyBE,EAAAA,GAAAA,GAAkB7O,OAAQvG,OAAWA,GAAW,GACzFylG,GAAoBt3E,EAAAA,GAAAA,GAAiBi3E,EAAWpwF,IAEpDisC,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3nC,EACT8nF,WA7C6B,IA8C7Bh+F,YAAagD,IAGTqyC,GAAiB7xC,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAE6V,GAAkD,EAClFA,IAAco8B,EAAAA,GAAAA,WAChBmD,GAAa/xB,KAEd,CAACA,IAEEs6E,EAAgB1X,GAAsB,CAC1Cl1E,SAAUvR,EACV2mF,6BAA8BuY,EAC9BtY,kBAAmBsY,EACnBl6E,MAAO85E,EACP1qD,SAAU4qD,EACV7+F,QAAAA,KAGF7C,EAAAA,EAAAA,KAAU,KACR+oF,GAAsB,uBAAwB8X,EAAejrF,KAC5D,CAACirF,IAEJ,MAAMgB,GAAe3+F,EAAAA,EAAAA,KAAY,KAC/Bu1B,EAAS,CAAEj/B,GAAIgyB,IACfm2E,EAAS,CAAEn2E,MAAOA,EAAQs2E,MAAOL,EAAUh2E,eAC1C,CAACD,EAAOiN,EAAUkpE,EAAUF,IAEzBM,GAAuBtrF,EAAAA,EAAAA,GAC3B+qF,MAAAA,GAAAA,EAAkB7mG,OACd6mG,OACArlG,EACJgV,GAEI6wF,EAA2BR,MAAAA,GAAAA,EAAkB7mG,OAAS6mG,EAAmBO,EAE/E,IAAK5wF,KAAkB6wF,MAAAA,GAAAA,EAA0BrnG,QAAU8mG,GACzD,OAGF,MAAM79F,GAAYmF,EAAAA,EAAAA,GAChB,oCACAkC,EAAAA,GAAe,eAAiB,gBAChC22F,GAAqB,UACrBvwF,GA4EF,OACE,mBAACoW,GAAA,EAAD,CACEpb,IAAKuJ,EACLhS,UAAWA,EACX8jB,MAAOs6E,EACPjkD,aAAa,uBACbtB,YAAU,EACV90B,WAAYotB,EACZktD,cAAe,KAEdR,GAjFD,mBAAC15E,GAAA,EAAD,CAAUtb,QAAM,EAAC7I,UAAU,wBAAwBK,QAAS49F,GAC1D,2BAAMj+F,UAAU,SAAS69F,EAAUz5F,QAiFpCg6F,MAAAA,OAAA,EAAAA,EAA0BrnG,SA3EtBqnG,EAA0B3+F,KAAI,CAAC6+F,EAAiBv8E,KACrD,OAAQu8E,EAAgBj9F,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACEqC,IAAK46F,EAAgB1oG,GACrB4nG,aAAcc,EACdhkD,oBAAqBA,EACrBj6C,QAASy9F,EACT/nD,gBAAiBA,EACjB4jD,YAAaA,IAInB,IAAK,QACH,OACE,mBAAC,GAAD,CACEj2F,IAAK46F,EAAgB1oG,GACrB2nG,aAAcS,EACdR,aAAcc,EACdj+F,QAASy9F,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACEp6F,IAAK46F,EAAgB1oG,GACrB4nG,aAAcc,EACdhkD,oBAAqBA,EACrBj6C,QAASy9F,EACT/nD,gBAAiBA,EACjBgiB,qBAAsBA,IAI5B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACE,mBAAC,GAAD,CACEr0D,IAAK46F,EAAgB1oG,GACrBu9B,MAAO8pE,IAAkBl7E,EACzBy7E,aAAcc,EACdj+F,QAASy9F,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACEp6F,IAAK46F,EAAgB1oG,GACrBu9B,MAAO8pE,IAAkBl7E,EACzBy7E,aAAcc,EACdj+F,QAASy9F,IAIf,QACE,eC9CV,IAAepgG,EAAAA,EAAAA,KA9GkB,IAO3B,IAP4B,OAChCoB,EADgC,OAEhCV,EAFgC,iBAGhCmgG,EAHgC,cAIhCC,EAJgC,qBAKhCzmC,EALgC,QAMhC94D,GACI,EACJ,MAAM,kBAAEw/F,EAAF,iBAAqBz3E,EAArB,iBAAuCwjB,IAAqBprC,EAAAA,EAAAA,MAG5D0mB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9BC,GAAYkB,EAAAA,EAAAA,MAAYpB,MAAMC,KAE9B9kB,GAAOC,EAAAA,EAAAA,KAEPmS,GAAe9W,EAAAA,EAAAA,IAAuB,OAErC8/F,EAAkBC,EAAkByD,IAAmBxD,EAAAA,GAAAA,GAAep8F,EAAQG,OAAS1G,IAE9F6D,EAAAA,EAAAA,KAAU,KACJ0C,GACF4/F,MAED,CAAC5/F,EAAQ4/F,IAEZ,MAAM/X,GAAmBrnF,EAAAA,EAAAA,KAAa1J,IACpCqJ,IACAw/F,EAAkB,CAAErgG,OAAAA,EAAQugG,SAAU/oG,MACrC,CAACwI,EAAQa,EAASw/F,IAEfG,EAAsBrZ,GAAsB,CAChDl1E,SAAUvR,EACVglB,MAAO06E,EACPtrD,SAAUyzC,EACVhB,mBAAmB,EACnBH,kCAAkC,EAClCvmF,QAAAA,IAaF,OAVA7C,EAAAA,EAAAA,KAAU,KACR+oF,GAAsB,uBAAwByZ,EAAqB5sF,KAClE,CAAC4sF,KAEJxiG,EAAAA,EAAAA,KAAU,KACJoiG,IAAkBA,EAAcznG,QAClCkI,MAED,CAACu/F,EAAev/F,IAGjB,mBAACqK,GAAA,EAAD,CACExK,OAAQA,EACR0E,UAAU,OACV+F,UAAU,SACVtK,QAASA,EACTe,UAAU,aACV8iB,oBAAqB7jB,EACrBoyE,aAAehqE,EAAAA,QAAkC9O,EAAnByiG,EAC9BS,aAAep0F,EAAAA,QAAkC9O,EAAnB0iG,EAC9BS,mBAAoBr0F,EAAAA,GACpBs0F,WAAS,GAET,0BAAK37F,UAAU,gBAAgBsF,IAAI,QAAQ1F,EAAK,uBAC/CkmB,GAAanB,IAAa65E,MAAAA,OAA1B,EAA0BA,EAAe/+F,KAAI,CAAC,EAAmBsiB,KAAU,IAA7B,GAAEnsB,EAAF,UAAMuqC,GAAuB,EAC1E,MAAMvkB,GAAOtd,EAAAA,EAAAA,IAAS1I,GAAMkwB,EAAUlwB,QAAM2C,EACtC2F,EAAQ0d,OAAuBrjB,EAAhBosB,EAAU/uB,GACzB0rE,EAAa1lD,GAAQ1d,EAc3B,OACE,mBAACimB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,yDAEVK,QAjBgB,MACb8/B,GAAa43B,EAChB4uB,EAAiB/wF,GAEjBoxB,EAAiB,CACfxwB,QAASoJ,EAAK,+BACdkqB,WAAYlqB,EAAK,QACjBiqB,OAAQ,IAAM2gB,OAWhBrX,MAAOyrE,IAAwB78E,EAC/Bw4C,cAAexC,GAAwB53B,GAAa,wBAAGngC,UAAU,yCAEjE,mBAAC2b,GAAA,EAAD,CACEpf,KAAK,QACLqf,KAAMA,EACN1d,KAAMA,EACN8B,WAAWmF,EAAAA,EAAAA,GAAeo5F,IAAqB3oG,GAAM,cAEvD,0BAAKoK,UAAU,QACZshE,GAAc,mBAAC5vB,GAAA,EAAD,CAAeC,KAAM2vB,EAAYu9B,QAAM,IACtD,2BAAM7+F,UAAU,YAAY4b,EACxBhc,EAAK,4BACLA,EAAK,cAAe1B,MAAAA,OAAhB,EAAgBA,EAAMs+D,aAAc,gB,gBCrF1D,MA+HA,IAAe9+D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B0gG,EAAe5gG,IAAQse,EAAAA,EAAAA,IAAmB5e,EAAQM,EAAKtI,IAC7D,IAAKsI,IAAS4gG,EACZ,MAAO,GAGT,MAAM,MAAEjnD,EAAF,QAAS7G,IAAYkyC,EAAAA,EAAAA,IAAwBtlF,IAAW,IACxD,WAAEq6D,EAAF,SAAcp7C,GAAam0B,GAAW,GAE5C,MAAO,CACL9yC,KAAAA,EACA4gG,aAAAA,EACAjnD,MAAAA,EACAogB,WAAAA,EACAp7C,SAAAA,EACAvM,eAAgB1S,EAAOod,SAASC,MAAM3K,kBAjBxB3S,EA/H2B,IAWzC,IAX0C,OAC9CS,EAD8C,SAE9CN,EAF8C,SAG9CuS,EAH8C,KAI9CnS,EAJ8C,aAK9C4gG,EAL8C,MAM9CjnD,EAN8C,WAO9CogB,EAP8C,SAQ9Cp7C,EAR8C,eAS9CvM,EAT8C,QAU9CrR,GACI,EACJ,MAAM,wBACJokF,EADI,aAEJhoE,IACEjc,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC0E,GAAOC,EAAAA,EAAAA,MACb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAO8jB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBogE,EAAyBxmE,GAEpEkiF,GAAkBllG,EAAAA,EAAAA,KAAQ,IACzBg+C,GAAU90B,MAAAA,GAAAA,EAAahsB,QAAW+nG,EAIhC/7E,EAAYtjB,KAAK7J,IACtB,MAAMY,EAAUsoG,EAAalpG,GAC7B,IAAKY,EACH,OAGF,MAAMwoG,EAAaxoG,EAAQ0Z,UAAW1R,EAAAA,EAAAA,KAAWqnB,EAAAA,EAAAA,MAAarvB,EAAQ0Z,eAAY3X,EAElF,IAAI0mG,EACJ,GAAI/gG,IAAQgvC,EAAAA,EAAAA,IAAchvC,GACxB+gG,EAAa/gG,OACR,GAAI1H,EAAQ0oG,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiBz9E,GAAelrB,EAAQ0oG,YAC9CD,EAAaE,GAAiBz9E,GAAavjB,EAAAA,EAAAA,KAAW0nB,EAAAA,EAAAA,MAAanE,QAAcnpB,OAEjF0mG,EAAazoG,EAAQ0Z,UAAW/R,EAAAA,EAAAA,KAAW0nB,EAAAA,EAAAA,MAAarvB,EAAQ0Z,eAAY3X,EAG9E,MAAO,CACL/B,QAAAA,EACAwoG,WAAAA,EACAC,WAAAA,EACA5+F,QAAS,IAAMgb,EAAa,CAAEjd,OAAAA,EAAQN,SAAAA,EAAUgd,UAAWllB,QAE5D0vB,OAAOhsB,SA3BD2+C,GAAAA,GA4BR,CAACJ,EAAO90B,EAAa+7E,EAAc5gG,EAAMmd,EAAcjd,EAAQN,IAE5D+X,GAAgByN,EAAAA,GAAAA,GAA0BtR,GAAc,GAAO+P,IACnE,MAAMq9E,EAAcL,MAAAA,OAAH,EAAGA,GAA6B,IAAXh9E,EAAe,EAAIA,GACrDq9E,GACFA,EAAY/+F,YAEb,oBAAoB,GAiCjBg/F,GAAUt8E,MAAAA,OAAA,EAAAA,EAAc,OAAOlG,MAAAA,OAArB,EAAqBA,EAAW,IAEhD,OACE,mBAACgH,GAAA,EAAD,CACEpb,IAAKuJ,EACLhS,UAAU,4BACV8jB,MAAOi7E,EACPO,iBAAkB,EAClBv7E,WAAYf,EACZS,UAAW5N,GAEVwpF,GACC,wBAAG37F,IAAI,cAAc1D,UAAU,cAAcsF,IAAI,QAC7CuyC,EAEkB,IAAfogB,GAAqB8mC,EAAgBhoG,OAEvB,IAAfkhE,EACF,kBAEC,GAAG8mC,EAAgBhoG,SAAWkhE,GAAc8mC,EAAgBhoG,yBAJ7D6I,EAAK,yBAFLA,EAAK,gCAUVm/F,EAAgBt/F,KAvDM,IAOrB,IAPsB,QAC1BjJ,EAD0B,WACjBwoG,EADiB,WACLC,EADK,QACO5+F,GAM7B,EACJ,MAAM+D,GAAO8xC,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,OAAS+B,EAAWs/C,GAE5D,OACE,mBAAC1zB,GAAA,EAAD,CACEzgB,IAAKlN,EAAQZ,GACb2pG,eAAgB/oG,EAAQulB,KACxB/b,UAAU,gDACVK,QAASA,GAET,mBAACsb,GAAA,EAAD,CAAQzd,KAAM+gG,EAAYrjF,KAAMojF,EAAY1uF,eAAgBA,EAAgBuL,WAAS,IACrF,0BAAK7b,UAAU,QACb,0BAAKA,UAAU,6BACb,mBAAC0xC,GAAA,EAAD,CAAeC,KAAOqtD,GAAcC,IACpC,mBAACO,GAAA,EAAD,CAAiBhpG,QAASA,KAE5B,0BAAKwJ,UAAU,WAAWsF,IAAI,QAC3BlB,aChBb,IAAe1G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA0C,IAAjC,aAAEihF,GAA+B,EACxC,MAAO,CACLpiF,KAAKu8E,EAAAA,EAAAA,IAAiBp7E,EAAQihF,GAC9B4gB,YAAYC,EAAAA,EAAAA,IAAyB9hG,GACrCm6D,sBAAsB9vB,EAAAA,EAAAA,IAA2BrqC,MALnCD,EA1FgC,IAG9C,IAH+C,aACnDkhF,EADmD,oBACrCvkC,EADqC,IAChB79C,EADgB,WACXgjG,EADW,YAEnDl3E,EAFmD,qBAEtCwvC,GACT,EACJ,MAAM,aAAEqiB,EAAF,iBAAgB6D,EAAhB,eAAkCrV,IAAmBxpE,EAAAA,EAAAA,MAGrD2nE,GAAkB7rE,EAAAA,EAAAA,IAA0B,MAE5C0E,GAAOC,EAAAA,EAAAA,KACP8/F,EAAUljG,GAAOnD,QAAQmD,EAAI6hF,eAC7BshB,EAAoBtmG,QAAQmD,MAAAA,OAAD,EAACA,EAAKklC,UAEjC26D,GAAoBziG,EAAAA,EAAAA,KAAQ,KAAM,QACtC,IAAK4C,EACH,MAAO,GAGT,MAAMojG,GAAoB,oBAACpjG,EAAIklC,gBAAL,aAAC,EAAcrc,QAAO,QAAC,UAAE6yE,GAAH,SAAmBA,YAAzC,QAAuD,IAC9E/3D,MAAM,EAtBuB,GAuB1B0/D,GAAmBrjG,EAAIsjG,QAAU,IAAItgG,KAAI,QAAC,GAAE7J,GAAH,SAAYA,KACrDoqG,EAAgBvjG,EAAIklC,SAAWllC,EAAIklC,SAASrc,QAAO,QAAC,GAAE1vB,GAAH,SAAakqG,EAAgBjqG,SAASD,MAAO,GAEtG,MAAO,IAAIiqG,KAAuBpjG,EAAIsjG,QAAU,MAAQC,GAAe5/D,MAAM,EAzBrD,KA0BvB,CAAC3jC,KAEJL,EAAAA,EAAAA,KAAU,MAEHwjG,GAAqBtD,EAAkBvlG,OA9BpB,GA8BoD0F,GAC1E29E,EAAa,CACXpR,eAAgB,CACd+L,UAAWt4E,EAAIs4E,eAIpB,CAAC6qB,EAAmBtD,EAAkBvlG,OAAQqjF,EAAc39E,EAAKoiF,IAEpE,MAAM+V,GAAiBt1F,EAAAA,EAAAA,KAAY,KACjC2+E,EAAiB,CAAEY,aAAAA,MAClB,CAACZ,EAAkBY,IAEhBohB,GAAqB3gG,EAAAA,EAAAA,KAAaoiC,IACtCknC,EAAe,CAAEI,eAAgBtnC,EAAQsnC,mBACxC,CAACJ,IAEJ,IAAKnsE,EACH,OAGF,MAAMyjG,EAAoB5D,EAAkBvlG,OAAS,EAErD,OACE,0BAAK2M,IAAKjH,EAAI7G,GAAIoK,UAAU,cAAcsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAClE,0BAAKyH,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQsF,IAAI,QAAQ7I,EAAIwD,OACtC,wBAAGD,UAAU,QAAQsF,IAAI,QAAQ1F,EAAK,WAAYnD,EAAIukC,MAAO,OAE/D,mBAAC9gC,EAAA,EAAD,CACEF,UAAW2/F,EAAU,gBAAapnG,EAClC4H,MAAM,UACN5D,KAAK,OACLyrD,MAAI,EACJpsB,OAAK,EACLv7B,QAASu0F,GAERh1F,EAAK+/F,EAAU,qBAAuB,sBAG3C,0BAAK3/F,UAAU,4CACb,6BAAQyI,IAAKs+D,EAAiB/mE,UAAU,mBACtCkgG,GAAqB,mBAAChvF,GAAA,EAAD,MACtBgvF,GAAqB5D,EAAkB78F,KAAKiiC,GAC3C,mBAACsmC,GAAA,EAAD,CACEtmC,QAASA,EACTnlC,KAAM4jG,EAAAA,GACN7lD,oBAAqBA,EACrBwsB,WAAY24B,GAAcl3E,EAC1B0wB,SAAUvX,EACVrhC,QAAS4/F,EACTh4B,eAAa,EACblQ,qBAAsBA,EACtBgP,gBAAiBA,YCnFvBryB,IAAe3vC,EAAAA,GAAAA,KAAU4vC,GAAOA,KAAM,KAAO,GA2EnD,IAAej3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM+e,GAAgByjF,EAAAA,EAAAA,IAA2BxiG,IAC3C,MAAEi6C,EAAF,UAASwoD,GAAc1jF,GAAiB,IACxC,SAAE2jF,GAAa1iG,EAAO+jC,SAE5B,MAAO,CACLkW,MAAAA,EACA2+C,YAAa8J,EAASj4B,OACtBg4B,UAAAA,EACA93E,YAAajvB,QAAQsE,EAAO2iG,8BAVd5iG,EAzE6B,IAO3C,IAP4C,SAChD0S,EADgD,MAEhDwnC,EAFgD,YAGhD2+C,EAHgD,UAIhD6J,EAJgD,YAKhD93E,EALgD,QAMhDtpB,GACI,EACJ,MAAM,qBAAEuhG,IAAyBphG,EAAAA,EAAAA,MAG3B4S,GAAe9W,EAAAA,EAAAA,IAAuB,MAEtC0E,GAAOC,EAAAA,EAAAA,MAGX25C,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc4nC,WArBzB,MAsE5B,OA7CAx9C,EAAAA,EAAAA,KAAU,KACRs4C,IAAa,KACX8rD,WAIJhtF,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAsCR,0BAAKwJ,IAAKuJ,EAAchS,UAAU,8BAA8BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAnC5F,WACE,QAAcA,IAAVs/C,EAIJ,OAAKA,GAAS2+C,EACLA,EAAY/2F,KAAK7J,GACtB,mBAAC,GAAD,CACE8N,IAAK9N,EACLipF,aAAcjpF,EACd0kD,oBAAqBA,EACrB/xB,YAAaA,MAKf83E,EACGA,EAAUtpG,OAIRspG,EAAU5gG,KAAK7J,GACpB,mBAAC,GAAD,CACE8N,IAAK9N,EACLipF,aAAcjpF,EACd0kD,oBAAqBA,EACrB/xB,YAAaA,MARR,wBAAGvoB,UAAU,cAAcsF,IAAI,QAA/B,kBAaJ,mBAACkf,GAAA,EAAD,MAKJg3E,QC4CP,IAAe99F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM+e,GAAgB8jF,EAAAA,EAAAA,IAAuB7iG,IACvC,MAAEi6C,EAAF,QAAS7G,GAAYr0B,GAAiB,IACtC,OAAEve,EAAF,SAAUN,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,GAC3DM,EAAOE,GAASD,EAAAA,EAAAA,IAAWP,EAAQQ,QAAU7F,EAKnD,MAAO,CACLs/C,MAAAA,EACA7G,QAAAA,EACA9yC,KAAAA,EACAwiG,cARoBxiG,GAAOyiG,EAAAA,EAAAA,IAAoB/iG,EAAQM,QAAQ3F,EAS/Dw9C,gBARsBz8C,QAAQ8E,KAAWie,EAAAA,EAAAA,IAAqBze,EAAQQ,GAStEwiG,cARoBtnG,QAAQ4E,IAAS5E,QAAQwE,KAAaooB,EAAAA,EAAAA,IAAiBhoB,EAAMJ,GASjF+/E,uBAAwBvkF,QAAQ8E,KAAW0/E,EAAAA,EAAAA,IAA6BlgF,EAAQQ,MAjBlET,EAnGyB,IAUvC,IAVwC,SAC5C0S,EAD4C,MAE5CwnC,EAF4C,QAG5C7G,EAH4C,KAI5C9yC,EAJ4C,cAK5CwiG,EAL4C,uBAM5C7iB,EAN4C,gBAO5C9nC,EAP4C,cAQ5C6qD,EAR4C,QAS5C3hG,GACI,EACJ,MAAM,eACJ4hG,EADI,YAEJv4E,EAFI,kBAGJw4E,IACE1hG,EAAAA,EAAAA,MAGE4S,GAAe9W,EAAAA,EAAAA,IAAuB,OAErCqjF,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYZ,IAG9CrkC,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS3nC,EAAc8nF,WA1BzB,MA4BtBH,EAAciH,IAAiBnjB,EAAAA,EAAAA,IAA4Bv/E,EAAMwiG,GAAe/G,YAEhFoH,GAAiBzhG,EAAAA,EAAAA,KAAY,CAACy9E,EAAepvC,EAAoBowC,KACjE4b,IACE5b,EACFQ,GAAiB9B,IACfn0D,EAAY,CAAEy0D,IAAAA,EAAKN,YAAAA,EAAa9uC,SAAAA,OAGlCrlB,EAAY,CAAEy0D,IAAAA,EAAKpvC,SAAAA,KAInBtmC,EAAAA,IACFy5F,EAAkB,CAAEjpD,WAAOt/C,MAE5B,CAACohG,EAAapb,EAAiBj2D,EAAaw4E,IAEzClhG,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IA+BV,MAAM+hG,EAAa1nG,aAAkBf,IAAVs/C,GAAuB7G,GAAWA,EAAQj6C,QAErE,OACE,0BAAKiJ,UAAU,YAAYsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACnD,mBAACsrB,GAAA,EAAD,CACEpb,IAAKuJ,EACLhS,WAAWmF,EAAAA,EAAAA,GAAe,8BAA+B67F,GAAc,QACvEl9E,MAAOktB,EACPmJ,aAAa,aACbmlD,iBA3FkB,GA4FlBzmD,YAAU,EACV90B,WAAY88E,GAvClB,WACE,QAActoG,IAAVs/C,EAIJ,OAAK7G,EAMAA,EAAQj6C,OAMNi6C,EAAQvxC,KAAKs9E,GAClB,mBAAC,GAAD,CACEr5E,IAAKq5E,EAAInnF,GACTmnF,IAAKA,EACLziC,oBAAqBA,EACrBj6C,QAASs5F,EAAcoH,OAAiBxoG,EACxCw9C,gBAAiBA,MAVjB,wBAAG/1C,UAAU,cAAcsF,IAAI,QAAQ1F,EAAK,gBAN5C,mBAAC4kB,GAAA,EAAD,MAkCCg3E,IAEFhd,O,gBCtHP,MAAMyiB,GAAqC,CACzC,CACE,CAAE5+E,KAAM,YAAapiB,MAAO,mCAC5B,CAAEoiB,KAAM,uBAAwBpiB,MAAO,6CAA8CihG,cAAc,IAErG,CACE,CAAE7+E,KAAM,eAAgBpiB,MAAO,sCAC/B,CAAEoiB,KAAM,gBAAiBpiB,MAAO,yCAI9BkhG,GAAmC,CACvC,CACE,CAAE9+E,KAAM,UAAWpiB,MAAO,sBAC1B,CAAEoiB,KAAM,WAAYpiB,MAAO,wBAE7B,CACE,CAAEoiB,KAAM,UAAWpiB,MAAO,sBAC1B,CAAEoiB,KAAM,UAAWpiB,MAAO,wBAIxBmhG,GAAqC,CACzC,CACE,CAAE/+E,KAAM,QAASpiB,MAAO,sBAAuBohG,SAAS,GACxD,CACEh/E,KAAM,WAAYpiB,MAAO,8BAA+BohG,SAAS,EAAMC,eAAe,IAG1F,CACE,CAAEj/E,KAAM,iBAAkBpiB,MAAO,6BAA8BohG,SAAS,KA2F5E,IAAe3jG,EAAAA,EAAAA,KAjF0B,IAAwC,IAAvC,QAAEyvC,EAAF,UAAWo0D,EAAX,WAAsBC,GAAiB,EAC/E,MAAM5hG,GAAOC,EAAAA,EAAAA,MAsBP,OAAE4hG,GAAYD,EAEpB,OACE,0BAAKxhG,UAAU,sBACb,0BAAKA,UAAU,8BACb,0BAAKA,UAAU,6BAA6BJ,EAAK,sBAEhD6hG,GACC,0BAAKzhG,UAAU,gCACZ0hG,EAAAA,GAAAA,IAAe9hG,EAAuB,IAAjB6hG,EAAOn1E,SAD/B,OACmDo1E,EAAAA,GAAAA,IAAe9hG,EAAuB,IAAjB6hG,EAAOl1E,WAKnF,4BAAOvsB,UAAU,8BACbuhG,EAAYH,GAAmBj0D,EAAUg0D,GAAiBF,IAAkBxhG,KAAKkiG,GACjF,6BACGA,EAAIliG,KAAKmiG,IACR,MAAMC,EAASL,EAAmBI,EAAKv/E,MAEvC,OAAIu/E,EAAKP,QAEL,yBAAIrhG,UAAU,kCACZ,wBAAGA,UAAU,mCACV4hG,EAAKN,cAAiB,KAAGQ,EAAAA,GAAAA,IAAcD,MAAWC,EAAAA,GAAAA,IAAcD,IAEnE,yBAAI7hG,UAAU,qCAAqCJ,EAAKgiG,EAAK3hG,SAK/D2hG,EAAKV,aAEL,yBAAIlhG,UAAU,kCACZ,wBAAGA,UAAU,mCAAmC6hG,EAAME,WAAtD,KACA,yBAAI/hG,UAAU,qCAAqCJ,EAAKgiG,EAAK3hG,SAMjE,yBAAID,UAAU,kCACZ,wBAAGA,UAAU,oCACVwxC,EAAAA,GAAAA,IAAqBqwD,EAAMxmG,UAE7B,IAjEe,KAAoD,IAAnD,OAAE2mG,EAAF,WAAUD,GAAyC,EAClF,IAAKC,EACH,OAGF,MAAMC,EAAmB1xE,OAAOyxE,GAAU,EAE1C,OACE,2BAAMhiG,WAAWmF,EAAAA,EAAAA,GAAe,4BAA6B88F,GAAoB,aAC9EA,EAAoB,KAAGzwD,EAAAA,GAAAA,IAAqBruC,KAAKuT,IAAIsrF,MAAc,KAAGxwD,EAAAA,GAAAA,IAAqBwwD,KAC3FD,GACC,sCACG,IADH,IAEIA,EAFJ,QAuDSG,CAAwBL,GACzB,yBAAI7hG,UAAU,qCAAqCJ,EAAKgiG,EAAK3hG,oBCnD/E,IAAevC,EAAAA,EAAAA,KAvD+B,IAAiB,IAAhB,QAAElH,GAAc,EAC7D,MAAMoJ,GAAOC,EAAAA,EAAAA,MACP,wBAAEsiG,IAA4B/iG,EAAAA,EAAAA,MAE9Bs2C,GAAiB54C,EAAAA,EAAAA,IAA4BtG,GAC7Co/C,GAAez7C,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoBzD,EAAS,UACrDq/C,EAAev8C,SAAQw8C,EAAAA,EAAAA,IAAqBt/C,IAE5CwX,GAAc1O,EAAAA,EAAAA,KAAY,KAC9B6iG,EAAwB,CAAErnF,UAAWtkB,EAAQZ,OAC5C,CAACusG,EAAyB3rG,EAAQZ,KAErC,OACE,0BACEoK,WAAWmF,EAAAA,EAAAA,GACT,0BACA7L,QAAQs8C,GAAgBF,IAAmB,uCAE7Cr1C,QAAS2N,GAET,0BAAKhO,UAAU,kCACb,0BAAKA,UAAU,oCAoBvB,SAAuBJ,EAAcpJ,EAAqBqE,EAAkBg7C,GAC1E,OAAKh7C,EAKH,2BAAMmF,UAAU,iBACd,0BAAKnL,IAAKgG,EAASuW,IAAI,GAAGpR,WAAWmF,EAAAA,EAAAA,GAAe,uBAAwB0wC,GAAgB,YAC3Fr9C,EAAAA,EAAAA,IAAgBhC,IAAY,wBAAGwJ,UAAU,eACzCk2C,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,GAAS,KAPhC0/C,EAAAA,EAAAA,GAAqBt2C,EAAMpJ,GArB3B2/C,CAAcv2C,EAAMpJ,EAASo/C,GAAgBF,EAAgBG,IAEhE,0BAAK71C,UAAU,iCACZJ,EAAK,0BAA2BpJ,EAAQ4rG,MAAO,OAIpD,0BAAKpiG,UAAU,iCACb,0BAAKA,UAAU,kCACZy9D,EAAAA,GAAAA,IAAsC,IAAfjnE,EAAQulB,KAAanc,EAAKowB,OAEpD,0BAAKhwB,UAAU,iCACZxJ,EAAQkiE,SAAW94D,EAAK,2BAA4BpJ,EAAQkiE,UAAY,kBCjCnF,IAAI2pC,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,mCAEfC,GAAiB5sG,OAAO87C,KAAKqwD,IAE7BU,GAAsB,CAC1BT,YAAa,yBACbU,aAAc,0BACdJ,eAAgB,4BAChBK,cAAe,2BACfC,aAAc,0BACdT,cAAe,4BAEXU,GAAejtG,OAAO87C,KAAK+wD,IA8IjC,IAAevlG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMojG,GAAa8B,EAAAA,EAAAA,IAAiB1lG,EAAQQ,GACtCF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAIhC,MAAO,CACLojG,WAAAA,EAAY+B,KAJDrlG,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgBk5D,eAITr2D,QAHW,wBAAfjvC,MAAAA,OAAA,EAAAA,EAAMmD,SALN1D,EAlI0B,IAKxC,UALyC,OAC7CS,EAD6C,WAE7CojG,EAF6C,KAG7C+B,EAH6C,QAI7Cp2D,GACI,EACJ,MAAMvtC,GAAOC,EAAAA,EAAAA,KAEPmS,GAAe9W,EAAAA,EAAAA,IAAuB,OACrCmsE,EAASo8B,IAAch/F,EAAAA,EAAAA,KAAS,GACjCi/F,GAAexoG,EAAAA,EAAAA,IAAiB,KAEhC,eAAEyoG,EAAF,yBAAkBC,IAA6BxkG,EAAAA,EAAAA,MAC/CnD,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACRunG,EAAe,CAAEvlG,OAAAA,EAAQ+uC,QAAAA,MACxB,CAAC/uC,EAAQulG,EAAgBx2D,IAE5B,MAAM02D,GAAShqG,EAAAA,EAAAA,KAAQ,IACdszC,EAAUk2D,GAAeL,IAC/B,CAAC71D,IAEE22D,GAAcjqG,EAAAA,EAAAA,KAAQ,IACnBszC,EAAU81D,GAAsBV,IACtC,CAACp1D,IA4EJ,OAzEA/wC,EAAAA,EAAAA,KAAU,KACHolG,GAILqC,EAAO32C,SAAS7qC,IACd,MAAM0hF,EAAQvC,EAAWn/E,GACQ,iBAAV0hF,GAGrBH,EAAyB,CACvBvhF,KAAAA,EACAjkB,OAAAA,EACA4lG,MAAOD,EAEP7C,aAAuB,mBAAT7+E,SAInB,CAACwhF,EAAQzlG,EAAQojG,EAAYoC,KAEhCxnG,EAAAA,EAAAA,KAAU,KACR,iBA3FJ4oC,iBAME,OALKq9D,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,GAsFG4B,GAED58B,EAKAm6B,GAAexvF,EAAa3W,UAIjCwoG,EAAO32C,SAAQ,CAAC7qC,EAAMN,KACpB,MAAMgiF,EAAQvC,EAAWn/E,GAGzB,GAFiC,iBAAV0hF,GAERL,EAAaroG,QAAQxF,SAASwsB,GAC3C,OAGF,IAAK0hF,EAGH,YAFAL,EAAaroG,QAAQ2H,KAAKqf,GAK5B,MAAM,UAAE6hF,GAAcH,EAEtBzB,GAAY6B,OACVnyF,EAAa3W,QAAS6H,SAAS6e,GAC/B,CACE9hB,MAAOL,EAAMkkG,EAAuCzhF,OACjD6hF,EAAY,CACbvrF,OAASxG,IAAciyF,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEJ,MAAOE,EAAW/xF,EAAAA,EAAGoxF,KAAAA,IACnFc,aAAczkG,EAAK,kBACjB,MACDmkG,IAIPL,EAAaroG,QAAQ2H,KAAKqf,GAE1BrQ,EAAa3W,QAAS6H,SAAS6e,GAAOztB,UAAUkT,OAAO,aAGzDvL,KAzCEwnG,GAAW,IAJf,KA+CC,CACDI,EAAQC,EAAaz8B,EAASm6B,EAAY5hG,EAAMxB,EAAQwlG,EAA0BL,EAAMtnG,IAGrForE,GAAYm6B,EAKf,0BAAKxhG,WAAWmF,EAAAA,EAAAA,GAAe,2BAA4BkiE,GAAW,UACpE,mBAAC,GAAD,CAAoBm6B,WAAYA,EAAYr0D,QAASA,KAEnDu2D,EAAaroG,QAAQtE,QAAU,mBAACytB,GAAA,EAAD,MAEjC,0BAAK/b,IAAKuJ,GACP6xF,EAAOpkG,KAAKskG,GACX,0BAAKrgG,IAAKqgG,EAAO/jG,UAAU,gCAI9B1G,QAAO,QAAE,EAAAkoG,EAAoC8C,yBAAtC,aAAC,EAAwDvtG,SAC/D,0BAAKiJ,UAAU,wBACb,yBAAIA,UAAU,8BAA8BJ,EAAK,+BAE/C4hG,EAAoC8C,kBAAkB7kG,KAAKjJ,GAC3D,mBAAC,GAAD,CAAyBA,QAASA,QApBnC,mBAACguB,GAAA,EAAD,UCrIX,IAAe9mB,EAAAA,EAAAA,KAzB+B,IAAc,IAAb,KAAEy5B,GAAW,EAC1D,MAAMv3B,GAAOC,EAAAA,EAAAA,MACP,mBAAE0kG,IAAuBnlG,EAAAA,EAAAA,MAEzB4O,GAAc1O,EAAAA,EAAAA,KAAY,KAC9BilG,EAAmB,CAAE5kD,SAAUxoB,EAAKj5B,KAAKyhD,SAAU7kC,UAAWqc,EAAKrc,cAClE,CAACqc,EAAMotE,IAEV,OACE,0BAAKvkG,UAAU,0BAA0BK,QAAS2N,GAChD,mBAAC2N,GAAA,EAAD,CAAQpf,KAAK,SAAS2B,KAAMi5B,EAAKj5B,OAEjC,0BAAK8B,UAAU,iCACb,0BAAKA,UAAU,kCACZm3B,EAAKl3B,OAGR,0BAAKD,UAAU,kCACZJ,EAAK,0BAA2Bu3B,EAAKirE,MAAO,WCZvD,IAAIC,GACAC,GAWJ,MAAMkC,GAAe,CACnBC,WAAY,kCAERC,GAAStuG,OAAO87C,KAAKsyD,IAyI3B,IAAe9mG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1BmlG,EAAOrlG,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgBk5D,eAI7B,MAAO,CAAEhC,WAHU5jG,EAAO4jG,WAAWmD,eAGhBpB,KAAAA,EAAMzoF,UAFTld,EAAO4jG,WAAWoD,oBALpBjnG,EA5H0B,IAMxC,IANyC,OAC7CS,EAD6C,SAE7CiS,EAF6C,WAG7CmxF,EAH6C,KAI7C+B,EAJ6C,UAK7CzoF,GACI,EACJ,MAAMlb,GAAOC,EAAAA,EAAAA,KAEPmS,GAAe9W,EAAAA,EAAAA,IAAuB,OACrCmsE,EAASo8B,IAAch/F,EAAAA,EAAAA,KAAS,GACjCi/F,GAAexoG,EAAAA,EAAAA,IAAiB,KAEhC,sBAAE2pG,EAAF,yBAAyBjB,IAA6BxkG,EAAAA,EAAAA,MACtDnD,GAAcC,EAAAA,EAAAA,KAiFpB,OA/EAE,EAAAA,EAAAA,KAAU,KACJ0e,GACF+pF,EAAsB,CAAEzmG,OAAAA,EAAQ0c,UAAAA,MAEjC,CAAC1c,EAAQymG,EAAuB/pF,KAEnC1e,EAAAA,EAAAA,KAAU,KACHiU,IAAYyK,IACf4oF,EAAaroG,QAAU,GACvBooG,GAAW,MAEZ,CAACpzF,EAAUyK,KAGd1e,EAAAA,EAAAA,KAAU,KACHolG,GAILkD,GAAOx3C,SAAS7qC,IACd,MAAM0hF,EAAQvC,EAAWn/E,GACQ,iBAAV0hF,GAGrBH,EAAyB,CAAEvhF,KAAAA,EAAMjkB,OAAAA,EAAQ4lG,MAAOD,SAGnD,CAAC3lG,EAAQojG,EAAYoC,KAExBxnG,EAAAA,EAAAA,KAAU,KACR,iBAvEJ4oC,iBAME,OALKq9D,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,GAkEG4B,GAED58B,EAKAm6B,GAAexvF,EAAa3W,UAIjCqpG,GAAOx3C,SAAQ,CAAC7qC,EAAMN,KACpB,MAAMgiF,EAAQvC,EAAWn/E,GAGzB,GAFiC,iBAAV0hF,GAERL,EAAaroG,QAAQxF,SAASwsB,GAC3C,OAGF,IAAK0hF,EAGH,YAFAL,EAAaroG,QAAQ2H,KAAKqf,GAK5B,MAAM,UAAE6hF,GAAcH,EAEtBzB,GAAY6B,OACVnyF,EAAa3W,QAAS6H,SAAS6e,GAC/B,CACE9hB,MAAOL,EAAM4kG,GAAwCniF,OAClD6hF,EAAY,CACbvrF,OAASxG,IAAciyF,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEJ,MAAOE,EAAW/xF,EAAAA,EAAGoxF,KAAAA,IACnFc,aAAczkG,EAAK,kBACjB,MACDmkG,IAIPL,EAAaroG,QAAQ2H,KAAKqf,MAG5BpmB,KAvCEwnG,GAAW,IAJf,KA6CC,CACDp8B,EAASm6B,EAAY5hG,EAAMxB,EAAQ0c,EAAW8oF,EAA0BL,EAAMtnG,IAG3EorE,GAAYm6B,GAAe1mF,EAK9B,0BAAK9a,WAAWmF,EAAAA,EAAAA,GAAe,2BAA4BkiE,GAAW,UACpE,mBAAC,GAAD,CAAoBm6B,WAAYA,EAAYD,WAAS,KAEnDmC,EAAaroG,QAAQtE,QAAU,mBAACytB,GAAA,EAAD,MAEjC,0BAAK/b,IAAKuJ,GACP0yF,GAAOjlG,KAAKskG,GACX,0BAAK/jG,WAAWmF,EAAAA,EAAAA,GAAe,qBAAsBu+F,EAAaroG,QAAQxF,SAASkuG,IAAU,eAIhGzqG,QAAQkoG,EAAWsD,iBAClB,0BAAK9kG,UAAU,+BACb,yBAAIA,UAAU,qCAAqCJ,EAAK,+BAEvD4hG,EAAWuD,mBAAoBtlG,KAAKymF,GACnC,mBAAC,GAAD,CAAyB/uD,KAAM+uD,QApBhC,mBAAC1hE,GAAA,EAAD,UCXX,IAAe9mB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA8C,IAArC,OAAEonG,GAAmC,EAC5C,MAAM,OAAEC,EAAF,QAAUC,GAAYtnG,EAAOunG,YAEnC,MAAO,CACLF,OAAQA,MAAAA,OAAF,EAAEA,EAASD,EAAO7/D,QACxB9vB,QAAS6vF,MAAAA,OAAD,EAACA,EAAUF,EAAO7/D,UAAY,MANxBxnC,EAhGiC,IAQ/C,IARgD,KACpDO,EADoD,QAEpD1H,EAFoD,OAGpDwuG,EAHoD,WAIpDI,EAJoD,YAKpDC,EALoD,OAMpDJ,EANoD,OAOpD5vF,GACI,EACJ,MAAM,sBACJiwF,EADI,SAEJzwE,EAFI,iBAGJ0wE,IACEnmG,EAAAA,EAAAA,MAEEomG,GAAkB3yF,EAAAA,EAAAA,GAAoBuyF,EAAWK,cAChDpsD,EAAWqsD,IAAgBjhG,EAAAA,EAAAA,KAAkB,GAC9CkhG,EAAkBrsG,QAAQ2rG,IAC1B,OAAE9/D,EAAF,KAAU/gC,GAAS4gG,EACnBplG,GAAOC,EAAAA,EAAAA,MAEbzD,EAAAA,EAAAA,KAAU,KAEHupG,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpBpnG,KAAAA,EAAM4c,UAAWtkB,EAAQZ,GAAIuvC,OAAAA,EAAQ9vB,OAAAA,EAAQkD,MA5B/B,EA4BqDqtF,mBAAmB,MAIzF,CAACR,EAAWK,YAAaE,IAE5B,MAAME,GAAsBvmG,EAAAA,EAAAA,KAAY,KACtComG,GAAa,GACbJ,EAAsB,CACpBpnG,KAAAA,EAAM4c,UAAWtkB,EAAQZ,GAAIuvC,OAAAA,EAAQ9vB,OAAAA,EAAQkD,MApC3B,OAsCnB,CAACra,EAAMonG,EAAuB9uG,EAAQZ,GAAIyf,EAAQ8vB,KAErD/oC,EAAAA,EAAAA,KAAU,KACRspG,GAAa,KACZ,CAACT,IAEJ,MAAMa,GAAoBxmG,EAAAA,EAAAA,KAAa1J,IACrCi/B,EAAS,CAAEj/B,GAAAA,IACX2vG,MACC,CAACA,EAAkB1wE,IAetB,OACE,0BAAK70B,UAAU,qBACb,0BAAKA,UAAU,eACZilG,EACGA,EAAOxlG,KAAK7J,GACZ,mBAACuuB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,sBAEVK,QAAS,IAAMylG,EAAkBlwG,IAEjC,mBAACwuB,GAAA,EAAD,CACEmwB,WAAW,OACXjwB,OAAQ1uB,EACR+oD,eAAa,EACbpO,kBAAgB,OAIpB,mBAAC/rB,GAAA,EAAD,MACHygF,GAjCP,WACE,MAAMc,EAAkBX,EAAWK,YAAcR,EAAQluG,OAEzD,OAAOquG,EAAWK,YArDA,GAqD+BM,EAAkB,GACjE,mBAAC,GAAD,CACE/kE,MAAO+kE,EACPr9C,SAAS,QACTrP,UAAWA,EACXh5C,QAASwlG,IAyBEG,IAEb,0BAAKhmG,UAAU,cAAcsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACrD,2BAAMyH,UAAU,eAAesF,IAAI,QAAQlB,GAC3C,2BAAMpE,UAAU,iBAAiBsF,IAAK1F,EAAK8a,MAAQ,YAASniB,IAQ7C0Q,EAPEm8F,EAAWK,aAOErrC,EAPWirC,GAQhC,GAAMp8F,EAAQmxD,EAAS,KAAKz/C,UAAY,GATjD,OAQR,IAAuB1R,EAAemxD,MC1DtC,IAAe18D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEunG,aAAa,OAAE/mG,EAAF,UAAU0c,GADnB,aAEJy6B,GACE33C,EAEJ,OAAKQ,GAAW0c,EAOT,CACL5c,MAJWC,EAAAA,EAAAA,IAAWP,EAAQQ,GAK9B5H,SAJcyZ,EAAAA,EAAAA,IAAkBrS,EAAQQ,EAAQ0c,GAKhDy6B,aAAAA,GATO,KARO53C,EA5C2B,IAMzC,IAN0C,QAC9CsB,EAD8C,SAE9CoR,EAF8C,KAG9CnS,EAH8C,QAI9C1H,EAJ8C,aAK9C++C,GACI,EACJ,MAAM31C,GAAOC,EAAAA,EAAAA,KAMb,IALA2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGLzI,IAAY0H,EACf,OAAO,mBAACsmB,GAAA,EAAD,MAGT,MAAM,QAAEmqE,EAAF,QAAW39C,IAAYi1D,EAAAA,EAAAA,IAAezvG,GAC5C,IAAKw6C,EAAQA,QACX,OAGF,MAAMk1D,GAAkBC,EAAAA,GAAAA,IAAqBn1D,EAAQA,QAAS,UAE9D,OACE,0BAAKhxC,UAAU,cAAcsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACrD,yBAAIyH,UAAU,gBAAgBsF,IAAI,SAAQhF,EAAAA,EAAAA,GAAWquF,EAAQ5B,SAAU,CAAC,QAAS,QACjF,0BAAK/sF,UAAU,mCACZu1C,GAAgBo5C,EAAQC,QAAQnvF,KAAKulG,GACpC,mBAAC,GAAD,CACEthG,IAAM,GAAElN,EAAQZ,MAAMovG,EAAO7/D,SAC7BjnC,KAAMA,EACN1H,QAASA,EACTwuG,OAAQA,EACRI,WAAYc,EAAgBlB,EAAO7/D,QACnCkgE,YAAar0D,EAAQq0D,iBAGvB9vD,GAAgB,mBAAC/wB,GAAA,EAAD,YC1BpB68B,GAA2B,4BAkKjC,IAAe3jD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0mB,GAAyB,EAClC,MAAM1I,GAAOpd,EAAAA,EAAAA,IAAWZ,EAAQ0mB,GAC1BpmB,GAAOC,EAAAA,EAAAA,IAAWP,EAAQ0mB,IAC1B,SAAE1gB,GAAahG,EAAOwoG,WAG5B,MAAO,CACLxqF,KAAAA,EAAMhY,SAAAA,EAAUwC,SAHFotC,EAAAA,EAAAA,IAAkBt1C,GAAMu1C,EAAAA,EAAAA,IAAqB71C,IAAS81C,EAAAA,EAAAA,IAAuB91C,OAL7ED,EAhK0B,IAOxC,IAPyC,OAC7C2mB,EAD6C,KAE7C1I,EAF6C,SAG7ChY,EAH6C,QAI7CwC,EAJ6C,QAK7CnH,EAL6C,SAM7CoR,GACI,EACJ,MAAM,cACJ8hB,EADI,cAEJk0E,EAFI,gBAGJC,IACElnG,EAAAA,EAAAA,OAEGmnG,EAAoBC,EAAkBC,IAAqBxkG,EAAAA,EAAAA,MAC3DigD,EAAwBC,IAA6B19C,EAAAA,EAAAA,KAAS,IAC9DujB,EAAOo6B,IAAY39C,EAAAA,EAAAA,MACpB7E,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMwiD,EAAmB7lC,GAAQA,EAAK6W,WAAmB,GACnDivB,EAAkB9lC,GAAQA,EAAK+W,UAAkB,IAEhDF,EAAWC,IAAgBjuB,EAAAA,EAAAA,IAASg9C,IACpC9uB,EAAUC,IAAenuB,EAAAA,EAAAA,IAASi9C,IAClCglD,EAAwBC,IAA6BliG,EAAAA,EAAAA,KAAU2B,IAEtEhK,EAAAA,EAAAA,KAAU,KACRuqG,GAA2BvgG,KAC1B,CAACA,KAEJhK,EAAAA,EAAAA,KAAU,KACR+lD,GAA0B,GAC1BskD,MACC,CAACA,EAAmBniF,KAEvBloB,EAAAA,EAAAA,KAAU,KACRs2B,EAAa+uB,GACb7uB,EAAY8uB,KACX,CAACD,EAAkBC,EAAiB9lC,KAEvCxf,EAAAA,EAAAA,KAAU,KACJwH,IAAagjG,EAAAA,GAAAA,WACfzkD,GAA0B,GAC1BC,OAAS7pD,GACTkuG,OAED,CAACA,EAAmB7iG,IAEvB,MAAMwvB,GAAwB9zB,EAAAA,EAAAA,KAAa8F,IACzCstB,EAAattB,EAAEwQ,OAAO3M,OACtBk5C,GAA0B,KACzB,IAEG5uB,GAAuBj0B,EAAAA,EAAAA,KAAa8F,IACxCwtB,EAAYxtB,EAAEwQ,OAAO3M,OACrBk5C,GAA0B,KACzB,IAEG0kD,GAA2BvnG,EAAAA,EAAAA,KAAa8F,IAC5CuhG,EAA0BvhG,EAAEwQ,OAAOgW,SACnCu2B,GAA0B,KACzB,IAEGW,GAAoBxjD,EAAAA,EAAAA,KAAY,KACpC,MAAMyjD,EAAmBtwB,EAAU8E,OAC7ByrB,EAAkBrwB,EAAS4E,OAE5BwrB,EAAiBhsD,QACpBqrD,EAASf,IAGXlvB,EAAc,CACZ7N,OAAAA,EACAle,SAAUsgG,EACVj0E,UAAWswB,EACXpwB,SAAUqwB,MAEX,CAACvwB,EAAWE,EAAUR,EAAe7N,EAAQoiF,IAE1CI,GAAsBxnG,EAAAA,EAAAA,KAAY,KACtC+mG,EAAc,CAAE/hF,OAAAA,IAChBmiF,IACAH,MACC,CAACG,EAAmBH,EAAiBD,EAAe/hF,IAEvD,IAAK1I,EACH,OAGF,MAAMy9B,EAAYz1C,IAAagjG,EAAAA,GAAAA,WAE/B,OACE,0BAAK5mG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACokB,GAAA,EAAD,CACEE,OAAQ1I,EAAKhmB,GACb2+C,WAAW,QACXlwB,OAAO,gBACP0iF,cAAY,IAEd,mBAACvjF,GAAA,EAAD,CACE5tB,GAAG,kBACHi2B,MAAOjsB,EAAK,iCACZsJ,SAAUkqB,EACVnqB,MAAOwpB,EACPzK,MAAOA,IAAUq5B,GAA2Br5B,OAAQzvB,IAEtD,mBAACirB,GAAA,EAAD,CACE5tB,GAAG,iBACHi2B,MAAOjsB,EAAK,gCACZsJ,SAAUqqB,EACVtqB,MAAO0pB,IAET,0BAAK3yB,UAAU,gCACb,mBAAC2rB,GAAA,EAAD,CACEC,QAAS86E,EACT76E,MAAOjsB,EAAK,iBACZouD,SAAUpuD,EAAK8mG,EACX,gCACA,kCACJx9F,SAAU29F,MAIhB,0BAAK7mG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUlhB,KAAK,SAAS4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAASmmG,GACjD5mG,EAAK,oBAIZ,mBAACujD,GAAA,EAAD,CACEl8B,QAASi7B,EACT7hD,QAASyiD,EACTp5C,SAAU2vC,EACV12C,UAAW/C,EAAK,SAEfy5C,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,gBAGjB,mBAACuqB,GAAA,EAAD,CACEzrB,OAAQynG,EACRtnG,QAASwnG,EACTriG,KAAMxE,EAAK,2BACX4qB,aAAc5qB,EAAK,iBACnB6qB,eAAgBq8E,EAChBnrE,sBAAoB,SChJtBqrE,GAAoB,6BA0W1B,IAAetpG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,cAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,SAAEwF,GAAahG,EAAOwoG,WACtBa,EAAmB3tG,QAAO,UAAC4E,EAAKosC,gBAAN,aAAC,EAAe81C,cAC1C8mB,GAAevoG,EAAAA,EAAAA,IAAiBT,IAChC,QAAEipG,GAAYvpG,EAAOwoG,WAAWlvD,SAAS94C,IAAW,GAE1D,MAAO,CACLF,KAAAA,EACA0F,SAAAA,EACAsjG,aAAAA,EACAD,iBAAAA,EACAG,cAAeF,EAAehpG,EAAKmpG,WAAYC,EAAAA,EAAAA,IAAiBppG,EAAM,cACtEqpG,YAAaL,EAAehpG,EAAKmpG,WAAYC,EAAAA,EAAAA,IAAiBppG,EAAM,YACpEspG,UAAWN,EAAehpG,EAAKmpG,WAAYC,EAAAA,EAAAA,IAAiBppG,EAAM,eAClEupG,gBAAiBN,EACjB5xD,aAAc33C,EAAO23C,aACrBmyD,wBAAuB,UAAE9pG,EAAO8hC,0BAAT,aAAE,EAA2Bpa,QAAQ4a,IAAOA,EAAEgmC,aAAYnvE,OACjF4wG,8BAAmE,cAApC,UAAA/pG,EAAOgqG,yBAAP,eAA0BrvF,UAnB3C5a,EAnW2B,IAgBzC,sBAhB0C,OAC9CS,EAD8C,KAE9CF,EAF8C,SAG9C0F,EAH8C,aAI9CsjG,EAJ8C,iBAK9CD,EAL8C,cAM9CG,EAN8C,YAO9CG,EAP8C,UAQ9CC,EAR8C,eAS9CrqD,EAT8C,QAU9Cl+C,EAV8C,SAW9CoR,EAX8C,gBAY9Co3F,EAZ8C,aAa9ClyD,EAb8C,wBAc9CmyD,EAd8C,8BAe9CC,GACI,EACJ,MAAM,uBACJE,EADI,WAEJC,EAFI,WAGJC,EAHI,aAIJC,EAJI,cAKJC,EALI,gBAMJ3B,EANI,SAOJzxE,EAPI,wBAQJqzE,EARI,qBASJC,IACE/oG,EAAAA,EAAAA,OAEGmnG,EAAoBC,EAAkBC,IAAqBxkG,EAAAA,EAAAA,KAC5DmmG,EAAelqG,EAAK+B,MACpBooG,EAAenqG,EAAKosC,UAAYpsC,EAAKosC,SAASxhB,OAAe,IAE5Do5B,EAAwBC,IAA6B19C,EAAAA,EAAAA,KAAS,IAC9DxE,EAAO4sE,IAAYpoE,EAAAA,EAAAA,IAAS2jG,GAAgB,KAC5Ct/E,EAAOgkD,IAAYroE,EAAAA,EAAAA,IAAS4jG,IAC5BhwG,EAAOgqD,IAAY59C,EAAAA,EAAAA,OACnBujB,GAAOo6B,KAAY39C,EAAAA,EAAAA,MACpB6jG,IAAYtuG,EAAAA,EAAAA,IAAkBkE,GAC9BqkD,IAAuBpoD,EAAAA,EAAAA,GAASmuG,IAAW,EAAOluG,EAAAA,GAAAA,SAClDmuG,GAAgBrqG,EAAKyhD,UAAYsnD,EACjCrnG,IAAOC,EAAAA,EAAAA,KAEP2oG,IAAgCttG,EAAAA,EAAAA,IAAuB,OAE7DsY,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7C,EAAAA,EAAAA,KAAU,KACJm5C,GAAgBiyD,IAClBU,EAAwB,CAAE9pG,OAAAA,IAC1B8pG,EAAwB,CAAE9pG,OAAAA,EAAQqqG,WAAW,IAC7CN,EAAqB,CAAE/pG,OAAAA,OAExB,CAACA,EAAQ8pG,EAAyB3yD,EAAciyD,EAAWW,KAE9D/rG,EAAAA,EAAAA,KAAU,KACJwH,IAAagjG,EAAAA,GAAAA,WACfzkD,GAA0B,GAC1BC,QAAS7pD,MAEV,CAACqL,IAEJ,MAAM8kG,IAAsBppG,EAAAA,EAAAA,KAAY,KACtC69C,EAAewrD,EAAAA,GAAAA,mBACd,CAACxrD,IAEEyrD,IAAwBtpG,EAAAA,EAAAA,KAAY,KACxC69C,EAAewrD,EAAAA,GAAAA,cACd,CAACxrD,IAEE0rD,IAAuBvpG,EAAAA,EAAAA,KAAY,KACvC69C,EAAewrD,EAAAA,GAAAA,aACd,CAACxrD,IAEE2rD,IAAyBxpG,EAAAA,EAAAA,KAAY,KACzC69C,EAAewrD,EAAAA,GAAAA,oBACd,CAACxrD,IAEE4rD,IAA4BzpG,EAAAA,EAAAA,KAAY,KAC5C69C,EAAewrD,EAAAA,GAAAA,sBACd,CAACxrD,IAEE6rD,IAAqB1pG,EAAAA,EAAAA,KAAY,KACrC69C,EAAewrD,EAAAA,GAAAA,WACd,CAACxrD,IAEE8rD,IAAsB3pG,EAAAA,EAAAA,KAAY,KACtC69C,EAAewrD,EAAAA,GAAAA,gBACd,CAACxrD,IAEE+rD,IAAiB5pG,EAAAA,EAAAA,KAAakrF,IAClCnoC,EAASmoC,GACTroC,GAA0B,KACzB,IAEGgrB,IAAoB7tE,EAAAA,EAAAA,KAAa8F,IACrCynE,EAASznE,EAAEwQ,OAAO3M,OAClBk5C,GAA0B,KACzB,IAEGgnD,IAAoB7pG,EAAAA,EAAAA,KAAa8F,IACrC0nE,EAAS1nE,EAAEwQ,OAAO3M,OAClBk5C,GAA0B,KACzB,IAEGinD,IAAoB9pG,EAAAA,EAAAA,KAAY,KACpC,MAAM+pG,EAAeppG,EAAMs3B,OACrB+xE,EAAexgF,EAAMyO,OAEtB8xE,EAAatyG,OAKlB+wG,EAAW,CACT1pG,OAAAA,EACA6B,MAAOopG,EACPvgF,MAAOwgF,EACPjxG,MAAAA,IARA+pD,GAAS4kD,MAUV,CAACl+E,EAAO1qB,EAAQ/F,EAAO4H,EAAO6nG,IAE3ByB,IAAqBjqG,EAAAA,EAAAA,KAAY,KACrC69C,EAAewrD,EAAAA,GAAAA,gBACd,CAACxrD,IAEEqsD,IAAyBlqG,EAAAA,EAAAA,KAAY,KACzC,IAAKpB,EAAKosC,SACR,OAGF,MAAM,mBAAEm/D,GAAuBvrG,EAAKosC,SAEpCu9D,EAAuB,CAAEzpG,OAAQF,EAAKtI,GAAIsV,WAAYu+F,MACrD,CAACvrG,EAAM2pG,KAEVzrG,EAAAA,EAAAA,KAAU,KAAM,QACTurG,KAMS,UAAGa,GAA8BntG,eAAjC,aAAG,EAAuClG,cAAc,UAC7Dy2B,UAAU,UAAC1tB,EAAKosC,gBAAN,OAAC,EAAem/D,uBAClC,CAAC9B,EAAD,UAAgCzpG,EAAKosC,gBAArC,aAAgC,EAAem/D,qBAElD,MAAMC,IAAwB,UAAAxrG,EAAKosC,gBAAL,mBAAegnC,wBAAf,eAAiCv6E,SAAU,EAEnE4yG,IAA0B9vG,EAAAA,EAAAA,KAAQ,KACtC,IAAKqE,EAAK0rG,oBACR,OAAO,EAGT,IAAI3xC,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACA3yC,QACC5hB,IAASxF,EAAK0rG,oBAAqBlmG,KACpC3M,OAEF,MAAM,aAAE8yG,EAAF,SAAgBC,GAAa5rG,EAAK0rG,oBAOxC,OAJKC,GAAiBC,IACpB7xC,GAAc,GAGTA,IACN,CAAC/5D,IAEE6rG,IAAc,UAAC7rG,EAAKosC,gBAAN,iBAAC,EAAe0/D,oBAAhB,aAAC,EAA6BjzG,SAAW,EAEvDkzG,IAAoB3qG,EAAAA,EAAAA,KAAY,KAChC4nG,EACFa,EAAW,CAAE3pG,OAAQF,EAAKtI,KAChBsI,EAAKmpG,UAGfY,EAAc,CAAE7pG,OAAQF,EAAKtI,KAF7BoyG,EAAa,CAAE5pG,OAAQF,EAAKtI,KAI9B6wG,IACAH,IACAzxE,EAAS,CAAEj/B,QAAI2C,MACd,CACD2uG,EAAchpG,EAAKmpG,UAAWnpG,EAAKtI,GACnC6wG,EAAmBH,EAAiB0B,EAAcC,EAAeF,EAAYlzE,IAG/E,GAAI32B,EAAKuhF,cAAgBvhF,EAAKg7E,YAC5B,OAGF,MAAM7/B,GAAYz1C,IAAagjG,EAAAA,GAAAA,WAE/B,OACE,0BAAK5mG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACkjD,GAAA,EAAD,CACEX,qBAAsBA,GACtBr5C,SAAUggG,GACVx/F,UAAW09F,IAEb,mBAAC5jF,GAAA,EAAD,CACE5tB,GAAG,cACHi2B,MAAOjsB,GAAK,aACZsJ,SAAUikE,GACVlkE,MAAOhJ,EACP+nB,MAAOA,KAAUg/E,GAAoBh/E,QAAQzvB,EAC7CmR,UAAW09F,IAEb,mBAAC,GAAD,CACExxG,GAAG,cACHoK,UAAU,OACV6rB,MAAOjsB,GAAK,0BACZu+B,UAtOkB,IAuOlByiB,oBAvOkB,IAuO2B93B,EAAM/xB,QAAQ0uC,WAC3Dv8B,SAAUigG,GACVlgG,MAAO6f,EACPpf,UAAW09F,IAEZlpG,EAAKmpG,WACJ,mBAACljF,GAAA,EAAD,CAAUlhB,KAAK,OAAOqlD,WAAS,EAACjoD,QAASqoG,IACvC,2BAAM1oG,UAAU,SAASJ,GAAK,cAC9B,2BAAMI,UAAU,YAAY9B,EAAKyhD,SAAW//C,GAAK,cAAgBA,GAAK,iBAGzEqnG,GACC,mBAAC9iF,GAAA,EAAD,CACElhB,KAAK,UACLqlD,WAAS,EACTjoD,QAASuoG,IAET,2BAAM5oG,UAAU,SAASJ,GAAK,kBAC9B,2BAAMI,UAAU,YAAYJ,GAAK,sBAGrC,mBAACukB,GAAA,EAAD,CACElhB,KAAK,cACLqlD,WAAS,EACTjoD,QAASyoG,GACTp/F,UAAW69F,GAEX,2BAAMvnG,UAAU,SAASJ,GAAK,uBAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5BqkG,GADH,IA/PoB,IAoQtB,mBAACxlF,GAAA,EAAD,CACElhB,KAAK,gBACLqlD,WAAS,EACTjoD,QAASwoG,GACTn/F,UAAW09F,GAEX,2BAAMpnG,UAAU,SAASJ,GAAK,cAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5BokG,GADH,IAC2BhC,IAG7B,mBAACvjF,GAAA,EAAD,CACElhB,KAAK,QACLqlD,WAAS,EACTjoD,QAAS0oG,IAET,2BAAM/oG,UAAU,SAASJ,GAAK,0BAC9B,2BAAMI,UAAU,aAAY8hG,EAAAA,GAAAA,IAAciI,MAE3CvC,GACC,mBAACrjF,GAAA,EAAD,CACElhB,KAAK,OACL5C,QAAS2oG,GACT1gD,WAAS,EACT5+C,UAAW+9F,GAEX,2BAAMznG,UAAU,SAASJ,GAAK,0BAC9B,2BAAMI,UAAU,YACbynG,GAAkB3F,EAAAA,GAAAA,IAAc2F,EAAgB1wG,QAAU6I,GAAK,aAIrEtG,QAAO,UAAC4E,EAAKgsG,oBAAN,aAAC,EAAmBnzG,SAC1B,mBAACotB,GAAA,EAAD,CACElhB,KAAK,kBACL5C,QAAS4oG,GACT3gD,WAAS,GAET,2BAAMtoD,UAAU,SAASJ,GAAK,mBAC9B,2BAAMI,UAAU,aACb8hG,EAAAA,GAAAA,IAAc5jG,EAAKgsG,aAAcnzG,WAK1C,0BAAKiJ,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUlhB,KAAK,QAAQqlD,WAAS,EAACjoD,QAASkpG,IACxC,2BAAMvpG,UAAU,SAASJ,GAAK,iBAC9B,2BAAMI,UAAU,aAAY8hG,EAAAA,GAAAA,IAAa,UAAC5jG,EAAKs+D,oBAAN,QAAsB,MAG/D+rC,IAAiBrqG,EAAKosC,UACtB,0BAAKtqC,UAAU,+BAA+ByI,IAAK+/F,IACjD,mBAAC78E,GAAA,EAAD,CACEC,SAAU1tB,EAAKosC,SAASm/D,mBACxB59E,MAAOjsB,GAAK,eACZsJ,SAAUsgG,GACV9/F,UAAW69F,MAKnB,0BAAKvnG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUlhB,KAAK,SAAS4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAASmmG,GACjD5mG,GAAK,iBAIZ,mBAACujD,GAAA,EAAD,CACEl8B,QAASi7B,EACT7hD,QAAS+oG,GACT1/F,SAAU2vC,GACV12C,UAAW/C,GAAK,SAEfy5C,GACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,gBAGjB,mBAACuqB,GAAA,EAAD,CACEzrB,OAAQynG,EACRtnG,QAASwnG,EACT51F,WAAWvQ,EAAAA,EAAAA,GACT4mG,IAAiBhpG,EAAKmpG,UAClBznG,GAAK,2BACLA,GAAK,oCAAqC1B,EAAK+B,OACnD,CAAC,KAAM,oBAETuqB,aAAc08E,IAAiBhpG,EAAKmpG,UAAYznG,GAAK,cAAgBA,GAAK,qBAC1E6qB,eAAgBw/E,GAChBtuE,sBAAoB,SCzG5B,IAAej+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAGlC,MAAO,CAAEF,MAFIC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEjB6d,cAAere,EAAOqe,iBAJrBte,EAtPsC,IAOpD,IAPqD,eACzDw/C,EADyD,mBAEzDgtD,EAFyD,KAGzDjsG,EAHyD,cAIzD+d,EAJyD,QAKzDhd,EALyD,SAMzDoR,GACI,EACJ,MAAM,8BAAE+5F,IAAkChrG,EAAAA,EAAAA,OAEnCirG,EAAaC,IAAkB7lG,EAAAA,EAAAA,IAA8B,KAC7D8lG,EAAuBC,IAA4B/lG,EAAAA,EAAAA,KAAS,IAC5D40C,EAAWqsD,IAAgBjhG,EAAAA,EAAAA,KAAS,GACrC7E,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMwrG,GAA0BnrG,EAAAA,EAAAA,KAAY,KAC1C69C,EAAewrD,EAAAA,GAAAA,qBACd,CAACxrD,IAEEutD,GAA0BprG,EAAAA,EAAAA,KAAY,KAC1C69C,EAAewrD,EAAAA,GAAAA,8BACd,CAACxrD,IAEEwtD,GAA6BrrG,EAAAA,EAAAA,KAAawnF,IAC9CqjB,EAAmBrjB,EAAOxiE,OAAQwiE,EAAO8jB,mBAAqB3uF,GAC9DkhC,EAAewrD,EAAAA,GAAAA,wBACd,CAAC1sF,EAAekuF,EAAoBhtD,KAEvC/gD,EAAAA,EAAAA,KAAU,KACRkuG,GAAgBpsG,MAAAA,OAAD,EAACA,EAAM0rG,sBAAwB,IAC9CY,GAAyB,GACzB7tG,YAAW,KACT+oG,GAAa,KA9D0B,OAgExC,CAACxnG,IAEJ,MAAM2sG,GAAyBvrG,EAAAA,EAAAA,KAAa8F,IAC1C,MAAM,KAAEid,GAASjd,EAAEwQ,OAEnB,SAASk1F,EAA0B7hG,GACjC,OAAOA,QAAQ1Q,EAGjB+xG,GAAgB5sF,IAAD,IACVA,EACH,CAAC2E,GAAOyoF,EAA0BptF,EAAE2E,OACvB,iBAATA,GAA2B,CAC7BynF,SAAUgB,EAA0BptF,EAAE2E,SAG1CmoF,GAAyB,KACxB,IAEGO,GAAwBzrG,EAAAA,EAAAA,KAAY,KACnCpB,IAILwnG,GAAa,GACb0E,EAA8B,CAAEhsG,OAAQF,EAAKtI,GAAIo1G,aAAcX,OAC9D,CAACnsG,EAAMmsG,EAAaD,IAEjBa,GAAoBpxG,EAAAA,EAAAA,KAAQ,IAC3BqE,GAASA,EAAKosC,UAAapsC,EAAKosC,SAAS4gE,cAIvChtG,EAAKosC,SAAS4gE,cAAcn0G,OAH1B,GAIR,CAACmH,IAEEitG,GAAmBtxG,EAAAA,EAAAA,KAAQ,IAC1BqE,GAASA,EAAKosC,UAAapsC,EAAKosC,SAAS8gE,QAIvCltG,EAAKosC,SAAS8gE,QAAQ9lF,QAAO,QAAC,aAAE0lF,GAAH,SAAsB1xG,QAAQ0xG,MAHzD,IAIR,CAAC9sG,IAEEmtG,GAAsB/rG,EAAAA,EAAAA,KAAawnF,IACvC,MAAM,aAAEkkB,GAAiBlkB,EACzB,IAAKkkB,IAAiB9sG,EACpB,OAGF,MAAM,oBAAE0rG,GAAwB1rG,EAEhC,OAAO9H,OAAO87C,KAAK84D,GAAc//D,QAAO,CAACsxB,EAAQ74D,KAC/C,IACGsnG,EAAatnG,IACVkmG,MAAAA,GAAAA,EAAsBlmG,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO64D,EAGT,MAAM+uC,EA3HZ,SAAqC5nG,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAwGgB6nG,CAA4B7nG,GAE5C,IAAK4nG,EACH,OAAO/uC,EAGT,MAAMivC,EAAmB5rG,EAAK0rG,GAE9B,MAAQ,GAAE/uC,IAAUA,EAAOxlE,OAA6B,KAAIy0G,IAAxBA,MACnC,MACF,CAACttG,EAAM0B,IAEV,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBsF,IAAI,QAAQ1F,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,SAAUy+E,EAAYoB,aACtB5/E,MAAOjsB,EAAK,wBACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,SAAUy+E,EAAYsB,UACtB9/E,MAAOjsB,EAAK,6BACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,SAAUy+E,EAAYR,eAAiBQ,EAAYP,SACnDj+E,MAAOjsB,EAAK,gCACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,SAAUy+E,EAAYuB,UACtB//E,MAAOjsB,EAAK,6BACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAUy+E,EAAYwB,WACtBhgF,MAAOjsB,EAAK,8BACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,SAAUy+E,EAAYyB,YACtBjgF,MAAOjsB,EAAK,+BACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,SAAUy+E,EAAY0B,YACtBlgF,MAAOjsB,EAAK,+BACZ8rG,UAAQ,EACRxiG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAUy+E,EAAY2B,WACtBngF,MAAOjsB,EAAK,8BACZ8rG,UAAQ,EACRxiG,SAAU2hG,MAKhB,0BAAK7qG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,cACLqlD,WAAS,EACTF,QAAM,EACN/nD,QAASoqG,GAET,2BAAMzqG,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,YAAYirG,KAIhC,0BAAKjrG,UAAU,WACb,yBAAIA,UAAU,kBAAkBsF,IAAI,QAAQ1F,EAAK,sBAEjD,mBAACukB,GAAA,EAAD,CACElhB,KAAK,WACL5C,QAASqqG,GAER9qG,EAAK,wBAGPurG,EAAiB1rG,KAAKqnF,GACrB,mBAAC3iE,GAAA,EAAD,CACEzgB,IAAKojF,EAAOxiE,OACZtkB,UAAU,wCAEVK,QAAS,IAAMsqG,EAA2B7jB,IAE1C,mBAAC1iE,GAAA,EAAD,CACEE,OAAQwiE,EAAOxiE,OACfD,OAAQgnF,EAAoBvkB,UAOtC,mBAAC3jC,GAAA,EAAD,CACEl8B,QAASsjF,EACTlqG,QAAS0qG,EACTpoG,UAAW/C,EAAK,QAChB8J,SAAU2vC,GAETA,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,qBCjOvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEqe,GAAkBre,EAE1B,MAAO,CAAEqe,cAAAA,KAJOte,EAhDoC,IAKlD,UALmD,KACvDO,EADuD,cAEvD+d,EAFuD,OAGvDnd,EAHuD,QAIvDG,GACI,EACJ,MAAM,gBACJgtG,EADI,iBAEJC,IACE9sG,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACN4iB,EAAQgD,IAAahhB,EAAAA,EAAAA,IAAS,IAE/B0nG,GAAUtyG,EAAAA,EAAAA,KAAQ,KAAM,MAC5B,MAAMuyG,IAAsB,UAAAluG,EAAKosC,gBAAL,eAAe8gE,UAAW,IACnDngE,QAAO,CAACC,EAAe47C,KACjBA,EAAOulB,SAAYvlB,EAAOwlB,SAAWxlB,EAAOxiE,SAAWrI,GAC1DivB,EAAIloC,KAAK8jF,EAAOxiE,QAEX4mB,IACN,IAGCplB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAEpC,OAAO6B,EAAAA,EAAAA,IAAkB6lF,EAAoBtmF,EAAWrD,KACvD,WAACvkB,EAAKosC,gBAAN,aAAC,EAAe8gE,QAASnvF,EAAewG,IAErCm+C,GAAmBthE,EAAAA,EAAAA,KAAaglB,IACpC4nF,EAAiB,CAAE9tG,OAAQF,EAAKtI,GAAI0uB,OAAAA,IACpCrlB,MACC,CAACf,EAAKtI,GAAIs2G,EAAkBjtG,IAE/B,OACE,mBAAC,GAAD,CACEH,OAAQA,EACR0jB,cAAe2pF,EACfzpF,kBAAmB9iB,EAAK,oBACxB6iB,OAAQA,EACRG,eAAgB6C,EAChB9C,SAAUspF,EACVppF,mBAAoB+9C,EACpB3hE,QAASA,QC6Df,IAAevB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBsmB,KAAMoB,GAAcloB,EAAOmoB,MAGnC,MAAO,CACL7nB,KAAAA,EACA4nB,UAAAA,EACAymF,iBALuBruG,KAASopG,EAAAA,EAAAA,IAAiBppG,EAAM,aAAeA,EAAKmpG,WAM3Er+E,UAAW9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,MAVnBP,EAjGsC,IAOpD,IAPqD,KACzDO,EADyD,UAEzD4nB,EAFyD,iBAGzDymF,EAHyD,UAIzDvjF,EAJyD,QAKzD/pB,EALyD,SAMzDoR,GACI,EACJ,MAAM,6BAAEm8F,IAAiCptG,EAAAA,EAAAA,MAEnCQ,GAAOC,EAAAA,EAAAA,MACN4sG,EAAuBC,EAAqBC,IAAwB1qG,EAAAA,EAAAA,MAE3EuR,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAM2tG,GAAiB/yG,EAAAA,EAAAA,KAAQ,IACxBqE,GAASA,EAAKosC,UAAapsC,EAAKosC,SAAS4gE,cAIvChtG,EAAKosC,SAAS4gE,cAHZ,IAIR,CAAChtG,IAEE2uG,GAAevtG,EAAAA,EAAAA,KAAawnF,IAChC,IAAKA,EAAOgmB,eACV,OAGF,MAAMC,EAAejnF,EAAUghE,EAAOgmB,gBACtC,OAAKC,EAIEntG,EAAK,iBAAiBksB,EAAAA,EAAAA,IAAgBihF,SAJ7C,IAKC,CAACntG,EAAMkmB,IAEJknF,GAAoB1tG,EAAAA,EAAAA,KAAawnF,IACrC,GAAK5oF,EAIL,MAAO,CAAC,CACN+B,MAAOL,EAAK,WACZqD,KAAM,SACNu3B,aAAa,EACbiuB,QAAS,IAAM+jD,EAA6B,CAC1CpuG,OAAQF,EAAKtI,GACb0uB,OAAQwiE,EAAOxiE,OACf0mF,aAAc,SAGjB,CAACprG,EAAM1B,EAAMsuG,IAEhB,OACE,0BAAKxsG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjD,wBAAGyH,UAAU,cAAcJ,EAAKopB,EAAY,oBAAsB,oBAEjE4jF,EAAentG,KAAKqnF,GACnB,mBAAC3iE,GAAA,EAAD,CACEzgB,IAAKojF,EAAOxiE,OACZtkB,UAAU,sBACV6I,QAAM,EACNqrC,eAAgB84D,EAAkBlmB,IAElC,mBAAC1iE,GAAA,EAAD,CACEE,OAAQwiE,EAAOxiE,OACfD,OAAQwoF,EAAa/lB,QAI1BylB,GACC,mBAACppD,GAAA,EAAD,CACEl8B,SAAO,EACP5mB,QAASqsG,EACT/pG,UAAW/C,EAAK,0CAEhB,wBAAGI,UAAU,0BAGhB9B,GAAQquG,GACP,mBAAC,GAAD,CACEruG,KAAMA,EACNY,OAAQ2tG,EACRxtG,QAAS0tG,WCtEjBM,GAAsB,+BAwS5B,IAAevvG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,SAAEwF,GAAahG,EAAOwoG,WACtB8G,EAAoB5zG,QAAQ4E,MAAAA,OAAD,EAACA,EAAMgvG,oBAClC,QAAE/F,GAAYvpG,EAAOwoG,WAAWlvD,SAAS94C,IAAW,GAE1D,MAAO,CACLF,KAAAA,EACA0F,SAAAA,EACAspG,kBAAAA,EACA9F,eAAeE,EAAAA,EAAAA,IAAiBppG,EAAM,cACtCspG,WAAWF,EAAAA,EAAAA,IAAiBppG,EAAM,eAClCq3C,aAAc33C,EAAO23C,aACrBkyD,gBAAiBN,EACjBO,wBAAuB,UAAE9pG,EAAO8hC,0BAAT,aAAE,EAA2Bpa,QAAQ4a,IAAOA,EAAEgmC,aAAYnvE,UAfnE4G,EArS6B,IAa3C,0BAb4C,OAChDS,EADgD,KAEhDF,EAFgD,SAGhD0F,EAHgD,kBAIhDspG,EAJgD,cAKhD9F,EALgD,UAMhDI,EANgD,gBAOhDC,EAPgD,aAQhDlyD,EARgD,wBAShDmyD,EATgD,eAUhDvqD,EAVgD,QAWhDl+C,EAXgD,SAYhDoR,GACI,EACJ,MAAM,WACJy3F,EADI,iBAEJqF,EAFI,gBAGJ7G,EAHI,aAIJ0B,EAJI,cAKJC,EALI,SAMJpzE,EANI,wBAOJqzE,EAPI,qBAQJC,IACE/oG,EAAAA,EAAAA,MAEEgpG,EAAelqG,GAAQA,EAAK+B,OAAe,GAC3CooG,EAAenqG,MAAAA,GAAAA,EAAMosC,UAAYpsC,EAAKosC,SAASxhB,OAAe,GAC9Dq3D,EAAgBjiF,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgB81C,cAE/BmmB,EAAoBC,EAAkBC,IAAqBxkG,EAAAA,EAAAA,MAC3DigD,EAAwBC,IAA6B19C,EAAAA,EAAAA,KAAS,IAC9DxE,EAAO4sE,IAAYpoE,EAAAA,EAAAA,IAAS2jG,IAC5Bt/E,EAAOgkD,IAAYroE,EAAAA,EAAAA,IAAS4jG,IAC5BhwG,EAAOgqD,IAAY59C,EAAAA,EAAAA,OACnBujB,EAAOo6B,IAAY39C,EAAAA,EAAAA,MACpB6jG,GAAYpqG,IAAQlE,EAAAA,EAAAA,IAAkBkE,GACtCqkD,IAAuBpoD,EAAAA,EAAAA,GAASmuG,IAAW,EAAOluG,EAAAA,GAAAA,SAClDwF,IAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7C,EAAAA,EAAAA,KAAU,KACJm5C,IACF2yD,EAAwB,CAAE9pG,OAAAA,IAC1B8pG,EAAwB,CAAE9pG,OAAAA,EAAQqqG,WAAW,IAC7CN,EAAqB,CAAE/pG,OAAAA,OAExB,CAACA,EAAQ8pG,EAAyB3yD,EAAc4yD,KAEnD/rG,EAAAA,EAAAA,KAAU,KACJwH,IAAagjG,EAAAA,GAAAA,WACfzkD,GAA0B,GAC1BC,OAAS7pD,MAEV,CAACqL,IAEJ,MAAMmmG,IAAe7rG,MAAAA,GAAD,UAACA,EAAMosC,gBAAP,iBAAC,EAAgB0/D,oBAAjB,aAAC,EAA8BjzG,SAAW,EACxDk0G,IAAqB/sG,MAAAA,GAAD,UAACA,EAAMosC,gBAAP,iBAAC,EAAgB4gE,qBAAjB,aAAC,EAA+Bn0G,SAAW,EAE/D2xG,IAAsBppG,EAAAA,EAAAA,KAAY,KACtC69C,EAAewrD,EAAAA,GAAAA,mBACd,CAACxrD,IAEEyrD,IAAwBtpG,EAAAA,EAAAA,KAAY,KACxC69C,EAAewrD,EAAAA,GAAAA,cACd,CAACxrD,IAEE0rD,IAAuBvpG,EAAAA,EAAAA,KAAY,KACvC69C,EAAewrD,EAAAA,GAAAA,aACd,CAACxrD,IAEE4rD,IAA4BzpG,EAAAA,EAAAA,KAAY,KAC5C69C,EAAewrD,EAAAA,GAAAA,sBACd,CAACxrD,IAEE6rD,IAAqB1pG,EAAAA,EAAAA,KAAY,KACrC69C,EAAewrD,EAAAA,GAAAA,WACd,CAACxrD,IAEE8rD,IAAsB3pG,EAAAA,EAAAA,KAAY,KACtC69C,EAAewrD,EAAAA,GAAAA,gBACd,CAACxrD,IAEE+rD,IAAiB5pG,EAAAA,EAAAA,KAAakrF,IAClCnoC,EAASmoC,GACTroC,GAA0B,KACzB,IAEGgrB,IAAoB7tE,EAAAA,EAAAA,KAAa8F,IACrCynE,EAASznE,EAAEwQ,OAAO3M,OAClBk5C,GAA0B,KACzB,IAEGgnD,IAAoB7pG,EAAAA,EAAAA,KAAa8F,IACrC0nE,EAAS1nE,EAAEwQ,OAAO3M,OAClBk5C,GAA0B,KACzB,IAEGirD,IAAsB9tG,EAAAA,EAAAA,KAAY,KACtC,MAAM+pG,EAAeppG,EAAMs3B,OACrB+xE,EAAexgF,EAAMyO,OAEtB8xE,EAAatyG,OAKlB+wG,EAAW,CACT1pG,OAAAA,EACA6B,MAAOopG,EACPvgF,MAAOwgF,EACPjxG,MAAAA,IARA+pD,EAAS6qD,MAUV,CAACnkF,EAAO1qB,EAAQ/F,EAAO4H,EAAO6nG,IAE3BuF,IAAyB/tG,EAAAA,EAAAA,KAAY,KACzC6tG,EAAiB,CAAE/uG,OAAAA,EAAQ8M,WAAYgiG,MACtC,CAAC9uG,EAAQ8uG,EAAmBC,IAEzBG,IAAyBhuG,EAAAA,EAAAA,KAAY,KACzC69C,EAAewrD,EAAAA,GAAAA,sBACd,CAACxrD,IAEEstD,IAA0BnrG,EAAAA,EAAAA,KAAY,KAC1C69C,EAAewrD,EAAAA,GAAAA,uBACd,CAACxrD,IAEEowD,IAAsBjuG,EAAAA,EAAAA,KAAY,KAClCpB,EAAKmpG,UACPY,EAAc,CAAE7pG,OAAQF,EAAKtI,KAE7BoyG,EAAa,CAAE5pG,OAAQF,EAAKtI,KAG9B6wG,IACAH,IACAzxE,EAAS,CAAEj/B,QAAI2C,MACd,CAAC2F,EAAKmpG,UAAWnpG,EAAKtI,GAAI6wG,EAAmBH,EAAiB0B,EAAcC,EAAepzE,IAExF60E,IAAwB,UAAAxrG,EAAKosC,gBAAL,mBAAegnC,wBAAf,eAAiCv6E,SAAU,EAEzE,GAAImH,EAAKuhF,cAAgBvhF,EAAKg7E,YAC5B,OAGF,MAAM7/B,GAAYz1C,IAAagjG,EAAAA,GAAAA,WAE/B,OACE,0BAAK5mG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACkjD,GAAA,EAAD,CACEX,qBAAsBA,GACtBr5C,SAAUggG,GACVx/F,UAAW09F,IAEb,mBAAC5jF,GAAA,EAAD,CACE5tB,GAAG,gBACHi2B,MAAOjsB,GAAK,oBACZsJ,SAAUikE,GACVlkE,MAAOhJ,EACP+nB,MAAOA,IAAUilF,GAAsBjlF,OAAQzvB,EAC/CmR,UAAW09F,IAEb,mBAAC,GAAD,CACExxG,GAAG,gBACHoK,UAAU,OACV6rB,MAAOjsB,GAAK,0BACZsJ,SAAUigG,GACVlgG,MAAO6f,EACPqV,UA/KoB,IAgLpByiB,oBAhLoB,IAgL2B93B,EAAM/xB,QAAQ0uC,WAC7D/7B,UAAW09F,IAEZlpG,EAAKmpG,WACJ,mBAACljF,GAAA,EAAD,CAAUlhB,KAAK,OAAOqlD,WAAS,EAACjoD,QAASqoG,IACvC,2BAAM1oG,UAAU,SAASJ,GAAK,gBAC9B,2BAAMI,UAAU,YAAY9B,EAAKyhD,SAAW//C,GAAK,cAAgBA,GAAK,iBAG1E,mBAACukB,GAAA,EAAD,CACElhB,KAAK,UACLqlD,WAAS,EACTjoD,QAASuoG,GACTl/F,UAAW09F,GAEX,2BAAMpnG,UAAU,SAASJ,GAAK,eAC9B,2BAAMI,UAAU,YAA4BJ,GAAhBugF,EAAqB,mBAA2B,SAE7EqnB,GACC,mBAACrjF,GAAA,EAAD,CACElhB,KAAK,OACL5C,QAAS2oG,GACT1gD,WAAS,EACT5+C,UAAW+9F,GAEX,2BAAMznG,UAAU,SAASJ,GAAK,0BAC9B,2BAAMI,UAAU,YACbynG,GAAkB3F,EAAAA,GAAAA,IAAc2F,EAAgB1wG,QAAU6I,GAAK,aAIrEtG,QAAO,UAAC4E,EAAKgsG,oBAAN,aAAC,EAAmBnzG,SAC1B,mBAACotB,GAAA,EAAD,CACElhB,KAAK,kBACL5C,QAAS4oG,GACT3gD,WAAS,GAET,2BAAMtoD,UAAU,SAASJ,GAAK,sBAC9B,2BAAMI,UAAU,aACb8hG,EAAAA,GAAAA,IAAc5jG,EAAKgsG,aAAcnzG,UAIxC,mBAACotB,GAAA,EAAD,CACElhB,KAAK,gBACLqlD,WAAS,EACTjoD,QAASwoG,GACTn/F,UAAW09F,GAEX,2BAAMpnG,UAAU,SAASJ,GAAK,cAC9B,2BAAMI,UAAU,WAAWsF,IAAI,QAC5BokG,GADH,IAC2BhC,IAG7B,0BAAK1nG,UAAU,gCACb,mBAAC2rB,GAAA,EAAD,CACEC,QAASshF,EACTrhF,MAAOjsB,GAAK,uBACZsJ,SAAUmkG,OAIhB,0BAAKrtG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,QACLqlD,WAAS,EACTjoD,QAAS0oG,IAET,2BAAM/oG,UAAU,SAASJ,GAAK,0BAC9B,2BAAMI,UAAU,YAAY+pG,KAE9B,mBAAC5lF,GAAA,EAAD,CACElhB,KAAK,QACLqlD,WAAS,EACTjoD,QAASitG,IAET,2BAAMttG,UAAU,QAAQsF,IAAI,QAAQ1F,GAAK,uBACzC,2BAAMI,UAAU,WAAWsF,IAAI,QAAQ1F,GAAK,cAAD,UAAgB1B,EAAKs+D,oBAArB,QAAqC,EAAG,OAErF,mBAACr4C,GAAA,EAAD,CACElhB,KAAK,cACLqlD,WAAS,EACTF,QAAM,EACN/nD,QAASoqG,IAET,2BAAMzqG,UAAU,SAASJ,GAAK,wBAC9B,2BAAMI,UAAU,YAAYirG,MAGhC,0BAAKjrG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUlhB,KAAK,SAAS4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAASmmG,GACjDtoG,EAAKmpG,UAAYznG,GAAK,iBAAmBA,GAAK,mBAIrD,mBAACujD,GAAA,EAAD,CACEl8B,QAASi7B,EACT7hD,QAAS+sG,GACT1jG,SAAU2vC,GACV12C,UAAW/C,GAAK,SAEfy5C,GACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,gBAGjB,mBAACuqB,GAAA,EAAD,CACEzrB,OAAQynG,EACRtnG,QAASwnG,EACTriG,KAAMlG,EAAKmpG,UAAYznG,GAAK,sBAAwBA,GAAK,qBACzD4qB,aAActsB,EAAKmpG,UAAYznG,GAAK,iBAAmBA,GAAK,gBAC5D6qB,eAAgB8iF,GAChB5xE,sBAAoB,SClH5B,IAAej+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,oBAAEmhD,EAAF,gBAAuBC,IAAoBguD,EAAAA,EAAAA,IAAiB5vG,EAAQQ,GAE1E,MAAO,CACLF,KAAAA,EACA8qB,WAAWkkB,EAAAA,EAAAA,IAAchvC,GACzB0F,SAAUhG,EAAOwoG,WAAWxiG,SAC5B27C,oBAAAA,EACAC,gBAAAA,EACA1+C,YAAa5C,MAAAA,OAAF,EAAEA,EAAM4C,YACnB2sG,gBAAgBjsD,EAAAA,GAAAA,GAAmB5jD,EAAQ,qBAZ7BD,EAlLqC,IAUnD,UAVoD,KACxDO,EADwD,SAExDmS,EAFwD,UAGxD2Y,EAHwD,SAIxDplB,EAJwD,oBAKxD27C,EALwD,gBAMxDC,EANwD,YAOxD1+C,EAPwD,eAQxD2sG,EARwD,QASxDxuG,GACI,EACJ,MAAM,iBACJyuG,EADI,kBAEJC,EAFI,kBAGJC,EAHI,sBAIJjnD,IACEvnD,EAAAA,EAAAA,MAEE0vF,EAAWx1F,QAAQ4E,EAAKyhD,UACxBkuD,EAAW,UAAG3vG,EAAKosC,gBAAR,aAAG,EAAewjE,YAE5BC,EAAaC,IAAkBvpG,EAAAA,EAAAA,IAAsBqqF,EAAW,SAAW,YAC3EnvC,EAAUC,IAAen7C,EAAAA,EAAAA,OACzBwpG,EAA2BC,EAAyBC,IAA4BlsG,EAAAA,EAAAA,KAEjF69C,GAA8BjtC,EAAAA,EAAAA,GAAY0sC,GAG1C6uD,EAAY90G,QACC,WAAhBy0G,GAA4BpuD,IAHMJ,MAAAA,EAAAA,EAAuBO,IAItC,YAAhBiuD,GAA6Bjf,IAGnCt7E,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7C,EAAAA,EAAAA,KAAU,KACJ2xG,IAAgBF,GAClBF,MAED,CAACI,EAAaF,EAAaF,IAE9B,MAAMU,GAAqB/uG,EAAAA,EAAAA,KAAY,CAAC2J,EAAe7D,KAErD,GADgBhP,OAAOgzE,QAAOvjD,EAAAA,EAAAA,MAAYpB,MAAMC,MAAMY,QAAQ4a,GAAMA,EAAEmnE,WAAannE,EAAEyf,WACzE5oD,QAAU02G,GAA4B,WAAVxkG,EAAoB,CAC1D09C,EAAsB,CAAEpuC,MAAO,mBAC/B,MAAM+1F,EAAalpG,EAAE+I,cAAcxY,QAAQ,gBAK3C,OAFC24G,EAAWn5G,cAAc,kBAAuCy2B,SAAU,OAC1E0iF,EAAWn5G,cAAc,mBAAwCy2B,SAAU,GAG9EoiF,EAAe/kG,KACd,CAACwkG,EAAgB9mD,IAEd4nD,GAA+BjvG,EAAAA,EAAAA,KAAa2J,IAChD2kG,EAAkB,CAChBxvG,OAAQF,EAAKtI,GACbkL,YAAuB,cAAVmI,MAEd,CAAC/K,EAAKtI,GAAIg4G,IAEPY,GAAalvG,EAAAA,EAAAA,KAAY,KAC7BouG,EAAiB,CAAE/tD,SAA0B,WAAhBouD,EAA2BpuD,EAAW,OAClE,CAACouD,EAAaL,EAAkB/tD,IAE7B8uD,GAA0BnvG,EAAAA,EAAAA,KAAY,KAC1C6uG,IACAR,MACC,CAACQ,EAA0BR,IAExB/tG,GAAOC,EAAAA,EAAAA,KACP6uG,EAAc1lF,EAAY,UAAY,OACtC2lF,EAAc3lF,EAAY,UAAY,QAEtCic,EAAU,CACd,CAAEh8B,MAAO,UAAW4iB,MAAOjsB,EAAM,GAAE8uG,YAAuB1gD,SAAUpuD,EAAM,GAAE8uG,iBAC5E,CAAEzlG,MAAO,SAAU4iB,MAAOjsB,EAAM,GAAE8uG,WAAsB1gD,SAAUpuD,EAAM,GAAE8uG,iBAGtEE,EAAoB,CAAC,CACzB3lG,MAAO,UACP4iB,MAAOjsB,EAAK,yCACX,CACDqJ,MAAO,YACP4iB,MAAOjsB,EAAK,2CAGRy5C,EAAYz1C,IAAagjG,EAAAA,GAAAA,WAE/B,OACE,0BAAK5mG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjD,yBAAIyH,UAAU,mBAAmBJ,EAAM,GAAE+uG,UACzC,mBAACx/C,GAAA,EAAD,CACEC,SAAU2+C,EACV1rF,KAAK,eACL4iB,QAASA,EACT/7B,SAAUmlG,KAGG,YAAhBN,EACC,0BAAK/tG,UAAU,UAAUsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChDs1G,EACC,sCACE,mBAAC7gE,GAAA,EAAD,CAAUrjC,IAAKkkG,EAAa7tG,UAAU,aAAaoE,KAAMypG,IACzD,wBAAG7tG,UAAU,eAAesF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACnDqH,EAAM,GAAE8uG,qBAGX,mBAACvqF,GAAA,EAAD,CAAUlhB,KAAK,SAAS4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAAS6tG,GACjDtuG,EAAK,eAER,mBAAC2qB,GAAA,EAAD,CACEzrB,OAAQmvG,EACRhvG,QAASkvG,EACT/pG,KAAMxE,EAAK,eACX4qB,aAAc5qB,EAAK,gBACnB6qB,eAAgBgkF,EAChB9yE,sBAAoB,KAIxB,mBAACnX,GAAA,EAAD,OAIJ,0BAAKxkB,UAAU,qBACb,mBAAC,GAAD,CACEs/C,QAAM,EACND,gBAAiBnhD,EAAKyhD,SACtBtG,UAAWA,EACXkG,oBAAqBA,EACrBC,gBAAiBA,EACjBt2C,SAAU02C,IAEZ,wBAAG5/C,UAAU,eAAesF,IAAI,QAC7B1F,EAAM,GAAE+uG,qCAIf,0BAAK3uG,UAAU,UAAUsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjD,yBAAIyH,UAAU,mBACXJ,EAAKopB,EAAY,4CAA8C,4CAElE,mBAACmmC,GAAA,EAAD,CACEC,SAAUtuD,EAAc,YAAc,UACtCuhB,KAAK,kBACL4iB,QAAS2pE,EACT1lG,SAAUqlG,IAEZ,wBAAGvuG,UAAU,gBAEPJ,EADHopB,EACQ,2CACA,6CAIf,mBAACm6B,GAAA,EAAD,CACEl8B,QAASmnF,EACT1kG,SAAU2vC,EACV12C,UAAW/C,EAAK,QAChBS,QAASmuG,GAERn1D,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,qBCsEvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,iBAAEywG,EAAkBnqF,KAAMo8C,GAAeljE,EAAO6mB,MAKtD,MAAO,CACLvmB,KAAAA,EACA4iE,WAAAA,EACA+tC,iBAAAA,EACAC,WARiB5wG,MAAAA,GAAA,UAAAA,EAAMosC,gBAAN,SAAgB81C,cAC/BjiF,EAAAA,EAAAA,IAAWP,EAAQM,EAAKosC,SAAS81C,mBACjC7nF,EAOFywB,UAAW9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,MAbnBP,EAtPgC,IAU9C,IAV+C,KACnDO,EADmD,QAEnDe,EAFmD,SAGnDoR,EAHmD,OAInDjS,EAJmD,WAKnD0iE,EALmD,WAMnDguC,EANmD,iBAOnDD,EAPmD,UAQnD7lF,EARmD,eASnDm0B,GACI,EACJ,MAAM,wBACJ4xD,EADI,oBAEJC,EAFI,sBAGJC,EAHI,kBAIJC,EAJI,iBAKJC,IACE/vG,EAAAA,EAAAA,OAEGgwG,EAAeC,IAAoB5qG,EAAAA,EAAAA,OACnC6qG,EAAgCC,EAA8BC,IAAiCvtG,EAAAA,EAAAA,MAC/FwtG,EAA8BC,EAA4BC,IAA+B1tG,EAAAA,EAAAA,MACzF2tG,EAAcC,IAAmBprG,EAAAA,EAAAA,IAASqqG,MAAAA,OAAD,EAACA,EAAYc,eACtDE,EAAeC,IAAoBtrG,EAAAA,EAAAA,IAASqqG,MAAAA,OAAD,EAACA,EAAYgB,eACzDlwG,GAAOC,EAAAA,EAAAA,KACPugF,EAAe0uB,MAAAA,OAAH,EAAGA,EAAYl5G,IAEjC4d,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7C,EAAAA,EAAAA,KAAU,KACR2yG,MACC,CAACA,KAEJ3yG,EAAAA,EAAAA,KAAU,KACJiU,IACFw/F,GAAgBf,MAAAA,OAAA,EAAAA,EAAYc,gBAAgB,GAC5CG,GAAiBjB,MAAAA,OAAA,EAAAA,EAAYgB,iBAAiB,MAE/C,CAAChB,EAAYz+F,IAEhB,MAAM2/F,GAA4B1wG,EAAAA,EAAAA,KAAY,KAC5CkwG,IACAP,EAAsB,CAAEgB,UAAWjnF,EAAY5qB,EAASgiF,IACnDp3D,GACHm0B,EAAewrD,EAAAA,GAAAA,WAEhB,CAAC6G,EAA+BP,EAAuBjmF,EAAW5qB,EAAQgiF,EAAcjjC,IAErF+yD,GAA0B5wG,EAAAA,EAAAA,KAAY,KAC1CqwG,IACAX,EAAoB,CAAEiB,UAAW7xG,EAAQA,OAAQgxG,MAChD,CAACO,EAA6BX,EAAqB5wG,EAAQgxG,IAExDe,GAAwB7wG,EAAAA,EAAAA,KAAassB,IACzCikF,EAAgBjkF,GAChBujF,EAAiB,CAAE/wG,OAAQgiF,EAAel1E,UAAW0gB,IAChDA,GACHmkF,GAAiB,KAElB,CAAC3vB,EAAc+uB,IAEZiB,GAAyB9wG,EAAAA,EAAAA,KAAassB,IAC1CmkF,EAAiBnkF,GACjBsjF,EAAkB,CAAE9wG,OAAQgiF,EAAel1E,UAAW0gB,MACrD,CAACw0D,EAAc8uB,IA8IlB,OACE,0BAAKlvG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8nD,GAAA,EAAD,CACExoB,OAAQ6S,GAAAA,EAAAA,iBACR51C,KAAM8zG,EAAAA,GACNrwG,UAAU,iBAEX8uG,GAvFL,8BACE,mBAAC3qF,GAAA,EAAD,CACEnkB,UAAU,sBACVqoD,UAAQ,GAER,mBAAC9jC,GAAA,EAAD,CAAenmB,OAAQ0wG,EAAYl5G,MAErC,mBAACuuB,GAAA,EAAD,CACElhB,KAAK,SACL4F,QAAM,EACN2xB,aAAW,EACXn6B,QAASkvG,GAER3vG,EAAKopB,EAAY,wBAA0B,4BAE9C,mBAACuB,GAAA,EAAD,CACEzrB,OAAQwwG,EACRrwG,QAASuwG,EACT5rF,OAzEJ,0BAAK5jB,UAAU,gBACb,mBAAC2b,GAAA,EAAD,CACEpf,KAAK,OACL2B,KAAM4wG,IAER,0BAAK9uG,UAAU,eACZJ,EAAKopB,EAAY,wBAA0B,6BAoE5CnY,WAAWvQ,EAAAA,EAAAA,GACTV,EAAKopB,EAAY,+BAAiC,6BAA8B8lF,EAAY7uG,OAC5F,CAAC,KAAM,oBAETuqB,aAAc5qB,EAAKopB,EAAY,wBAA0B,2BACzDyB,eAAgBulF,EAChBr0E,sBAAoB,MA+DlBmzE,GAvDN,8BACE,wBAAG9uG,UAAU,eAAesF,IAAI,QAAQ1F,EAAK,0BAE7C,0BAAK0wG,eAAa,GAChB,mBAACnsF,GAAA,EAAD,CACEzgB,IAAI,eACJT,KAAK,QACL4F,QAAM,EACN02F,cAAe,EACfv/F,UAAU,mBAETJ,EAAK,0BAEPivG,EACCA,EAAiBpvG,KAAI,CAAC7J,EAAI+nB,IACxB,mBAACwG,GAAA,EAAD,CACEzgB,IAAK9N,EACL2pG,cAAe5hF,EAAI,EACnB3d,UAAU,kCAEVK,QAAS,KAlHrBgvG,EAmHgCz5G,GAlHhC85G,MAqHY,mBAACnrF,GAAA,EAAD,CAAenmB,OAAQxI,OAI3B,mBAACkjD,GAAA,EAAD,CAAcp1C,IAAI,gBAAgB67F,cAAe,EAAGn7F,KAAK,gCAG7D,wBAAGpE,UAAU,yBAAyBsF,IAAI,QAAQ1F,EAAK,2BACvD,mBAAC2qB,GAAA,EAAD,CACEzrB,OAAQ2wG,EACRxwG,QAAS0wG,EACT/rF,OA/GR,WACE,MAAM2sF,EAAczvC,EAAWsuC,GAE/B,GAAKmB,EAIL,OACE,0BAAKvwG,UAAU,gBACb,mBAAC2b,GAAA,EAAD,CACEpf,KAAK,OACL2B,KAAMqyG,IAER,0BAAKvwG,UAAU,eACZJ,EAAK,uCAiGE4wG,GACR3/F,UA5FR,WACE,MAAM0/F,EAAczvC,EAAWsuC,GAE/B,GAAKmB,EAIL,OAAIA,EAAYE,gBACPnwG,EAAAA,EAAAA,GACJ,yBAAwBiwG,EAAYtwG,sCAAsC/B,EAAM+B,WACjF,CAAC,KAAM,qBAIJK,EAAAA,EAAAA,GAEJ,yBAAwBiwG,EAAYtwG,sCAAsC/B,EAAM+B,kFACjF,CAAC,KAAM,oBA2EQywG,GACXlmF,aAAc5qB,EAAK,uBACnB6qB,eAAgBylF,EAChBS,mBAAiB,MAkBlB7B,GACC,0BAAK9uG,UAAU,WACb,yBAAIA,UAAU,mBAAmBJ,EAAK,6BACtC,mBAAC+rB,GAAA,EAAD,CACEC,QAASgkF,EACT7jF,QAASokF,EACTtkF,MAAOjsB,EAAK,+BAEbgwG,GACC,mBAACjkF,GAAA,EAAD,CACEC,QAASkkF,EACT/jF,QAASqkF,EACTvkF,MAAOjsB,EAAK,gCAGhB,wBAAGI,UAAU,cACKJ,EAAfgwG,EAAoB,iCAAyC,yCChB5E,IAAelyG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA6D,IAApD,OAAEQ,EAAF,wBAAUwyG,GAA0C,EAC3D,MAAM1yG,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAGhC,MAAO,CAAEF,KAAAA,EAAM2yG,sBAFe3yG,EAAKmpG,WAAauJ,MAHhCjzG,EAnO0C,IAOxD,IAPyD,KAC7DO,EAD6D,qBAE7D4yG,EAF6D,eAG7D3zD,EAH6D,oBAI7D0zD,EAJ6D,QAK7D5xG,EAL6D,SAM7DoR,GACI,EACJ,MAAM,6BAAEm8F,IAAiCptG,EAAAA,EAAAA,OAElCirG,EAAaC,IAAkB7lG,EAAAA,EAAAA,IAA8B,KAC7D8lG,EAAuBC,IAA4B/lG,EAAAA,EAAAA,KAAS,IAC5D40C,EAAWqsD,IAAgBjhG,EAAAA,EAAAA,KAAS,IACpCssG,EAA6BC,EAA2BC,IAA8BhvG,EAAAA,EAAAA,KACvFrC,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMiyG,GAAqBr3G,EAAAA,EAAAA,KAAQ,KACjC,GAAKqE,GAASA,EAAKosC,UAAapsC,EAAKosC,SAAS8gE,QAI9C,OAAOltG,EAAKosC,SAAS8gE,QAAQlmE,MAAK,QAAC,OAAE5gB,GAAH,SAAgBA,IAAWwsF,OAC5D,CAAC5yG,EAAM4yG,KAEV10G,EAAAA,EAAAA,KAAU,KACJ8B,MAAAA,GAAAA,EAAMosC,UAAYwmE,IAAyBI,GAC7C/zD,EAAewrD,EAAAA,GAAAA,oBAEhB,CAACzqG,EAAMi/C,EAAgB+zD,EAAoBJ,KAE9C10G,EAAAA,EAAAA,KAAU,KACRkuG,GAAgB4G,MAAAA,OAAD,EAACA,EAAoBlG,gBAAkB9sG,MAAAA,OAAvC,EAAuCA,EAAM0rG,sBAAwB,IACpFY,GAAyB,GACzB9E,GAAa,KACZ,CAACxnG,EAAMgzG,IAEV,MAAMrG,GAAyBvrG,EAAAA,EAAAA,KAAa8F,IAC1C,MAAM,KAAEid,GAASjd,EAAEwQ,OAEnB,SAASk1F,EAA0B7hG,GACjC,OAAOA,QAAQ1Q,EAGjB+xG,GAAgB5sF,IAAD,IACVA,EACH,CAAC2E,GAAOyoF,EAA0BptF,EAAE2E,OACvB,iBAATA,GAA2B,CAC7BynF,SAAUgB,EAA0BptF,EAAE2E,SAG1CmoF,GAAyB,KACxB,IAEGO,GAAwBzrG,EAAAA,EAAAA,KAAY,KACnCpB,GAAS4yG,IAIdpL,GAAa,GACb8G,EAA6B,CAC3BpuG,OAAQF,EAAKtI,GACb0uB,OAAQwsF,EACR9F,aAAcX,OAEf,CAACnsG,EAAM4yG,EAAsBzG,EAAamC,IAEvC2E,GAAqB7xG,EAAAA,EAAAA,KAAY,KAChCpB,GAAS4yG,GAIdtE,EAA6B,CAC3BpuG,OAAQF,EAAKtI,GACb0uB,OAAQwsF,EACR9F,aAAc,CACZoG,cAAc,OAGjB,CAAClzG,EAAM4yG,EAAsBtE,IAE1B6E,GAAuB/xG,EAAAA,EAAAA,KAAaoE,KACpCmtG,MAIC3yG,IAASA,EAAK0rG,sBAIZ1rG,EAAK0rG,oBAAoBlmG,IAC/B,CAACxF,EAAM2yG,IAEV,GAAKK,EAIL,OACE,0BAAKlxG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUkkC,UAAQ,EAACroD,UAAU,uBAC3B,mBAACokB,GAAA,EAAD,CAAiBE,OAAQ4sF,EAAmB5sF,UAG9C,yBAAItkB,UAAU,uBAAuBsF,IAAI,QAAQ1F,EAAK,0BAEtD,0BAAKI,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,SAAUy+E,EAAYoB,aACtB5/E,MAAOjsB,EAAK,wBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,gBAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,SAAUy+E,EAAYsB,UACtB9/E,MAAOjsB,EAAK,6BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,aAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,SAAUy+E,EAAYR,eAAiBQ,EAAYP,SACnDj+E,MAAOjsB,EAAK,gCACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,gBAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,SAAUy+E,EAAYuB,UACtB//E,MAAOjsB,EAAK,6BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,aAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAUy+E,EAAYwB,WACtBhgF,MAAOjsB,EAAK,8BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,cAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,SAAUy+E,EAAYyB,YACtBjgF,MAAOjsB,EAAK,+BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,eAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,SAAUy+E,EAAY0B,YACtBlgF,MAAOjsB,EAAK,+BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,eAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAUy+E,EAAY2B,WACtBngF,MAAOjsB,EAAK,8BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,cAC/BnoG,SAAU2hG,OAKdgG,GACA,0BAAK7wG,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUlhB,KAAK,cAAc4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAAS2wG,GACtDpxG,EAAK,4BAMd,mBAACujD,GAAA,EAAD,CACEl8B,QAASsjF,EACTlqG,QAAS0qG,EACTpoG,UAAW/C,EAAK,QAChB8J,SAAU2vC,GAETA,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,gBAIjB,mBAACuqB,GAAA,EAAD,CACEzrB,OAAQiyG,EACR9xG,QAASgyG,EACT7sG,KAAK,oEACLomB,aAAa,SACbC,eAAgB0mF,EAChBx1E,sBAAoB,SCpH5B,IAAej+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLF,KAAAA,EACA+d,cAAere,EAAOqe,cACtB+M,WAAWkkB,EAAAA,EAAAA,IAAchvC,MAPXP,EA9GwC,IAQtD,IARuD,KAC3DO,EAD2D,UAE3D8qB,EAF2D,cAG3D/M,EAH2D,eAI3DkhC,EAJ2D,mBAK3DgtD,EAL2D,QAM3DlrG,EAN2D,SAO3DoR,GACI,EACJ,MAAMzQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMqyG,GAA2BhyG,EAAAA,EAAAA,KAAY,KAC3C69C,EAAewrD,EAAAA,GAAAA,sBACd,CAACxrD,IAEE6sD,GAAenwG,EAAAA,EAAAA,KAAQ,IACtBqE,EAAKosC,UAAapsC,EAAKosC,SAAS0/D,aAI9B9rG,EAAKosC,SAAS0/D,aAAa1xD,MAAK,CAACC,EAAGC,IACrCD,EAAE+zD,SACI,EACC9zD,EAAE8zD,QACJ,EAGF,IAVA,IAYR,CAACpuG,IAEEqzG,GAAyBjyG,EAAAA,EAAAA,KAAawnF,IAC1CqjB,EAAmBrjB,EAAOxiE,OAAQwiE,EAAO8jB,mBAAqB3uF,GAC9DkhC,EAAewrD,EAAAA,GAAAA,mBACd,CAAC1sF,EAAekuF,EAAoBhtD,IAEjCq0D,GAAsBlyG,EAAAA,EAAAA,KAAY,KACtC69C,EAAewrD,EAAAA,GAAAA,kBACd,CAACxrD,IAEEs0D,GAAkBnyG,EAAAA,EAAAA,KAAawnF,IACnC,GAAIA,EAAOwlB,QACT,OAAO1sG,EAAK,kBAId,MAAMkmB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9BgtF,EAAiB5qB,EAAO8jB,iBAAmB9kF,EAAUghE,EAAO8jB,uBAAoBryG,EAEtF,OAAIm5G,EACK9xG,EAAK,uBAAuBksB,EAAAA,EAAAA,IAAgB4lF,IAG9C9xG,EAAK,kBACX,CAACA,IAEJ,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmkB,GAAA,EAAD,CACElhB,KAAK,SACLqlD,WAAS,EACTjoD,QAASixG,GAET,2BAAMtxG,UAAU,SAASJ,EAAK,aAC9B,2BAAMI,UAAU,YAAYJ,EAAKopB,EAAY,4BAA8B,yBAI/E,0BAAKhpB,UAAU,UAAUsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjD,wBAAGyH,UAAU,aAAasF,IAAI,QAC3B0jB,EACG,8DACA,6DAGLghF,EAAavqG,KAAKqnF,GACjB,mBAAC3iE,GAAA,EAAD,CACEzgB,IAAKojF,EAAOxiE,OACZtkB,UAAU,sBAEVK,QAAS,IAAMkxG,EAAuBzqB,IAEtC,mBAAC1iE,GAAA,EAAD,CACEE,OAAQwiE,EAAOxiE,OACfD,OAAQotF,EAAgB3qB,GACxBnoC,eAAa,OAKnB,mBAACwE,GAAA,EAAD,CACEl8B,SAAO,EACP5mB,QAASmxG,EACT7uG,UAAW/C,EAAK,oCAEhB,wBAAGI,UAAU,iCCoBzB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAGlC,MAAO,CAAEF,MAFIC,EAAAA,EAAAA,IAAWP,EAAQQ,MAFhBT,EAjIwC,IAAiC,IAAhC,KAAEO,EAAF,QAAQe,EAAR,SAAiBoR,GAAe,EAC3F,MAAMzQ,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAM+qG,GAAenwG,EAAAA,EAAAA,KAAQ,IACtBqE,GAASA,EAAKosC,UAAapsC,EAAKosC,SAAS0/D,aAIvC9rG,EAAKosC,SAAS0/D,aAAa1xD,MAAK,CAACC,EAAGC,IACrCD,EAAE+zD,SACI,EACC9zD,EAAE8zD,QACJ,EAGF,IAVA,IAYR,CAACpuG,IAEEuzG,GAAkBnyG,EAAAA,EAAAA,KAAawnF,GAC/BA,EAAOwlB,QACF1sG,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjE,yBAAIyH,UAAU,kBAAkBsF,IAAI,QAApC,WAEA,0BAAKtF,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,qBACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,2BACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,4BACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,6BACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,iCACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,gCACZsJ,cAAU3Q,KAGd,0BAAKyH,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,gCACZsJ,cAAU3Q,MAKhB,0BAAKyH,UAAU,0BAA0BsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GACjE,yBAAIyH,UAAU,kBAAkBsF,IAAI,QAAQ1F,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,SAAS,EACTC,MAAOjsB,EAAK,qBACZsJ,cAAU3Q,KAIbyxG,EAAavqG,KAAKqnF,GACjB,mBAAC3iE,GAAA,EAAD,CACEzgB,IAAKojF,EAAOxiE,OACZtkB,UAAU,uCACVK,aAAS9H,EACTsQ,QAAM,GAEN,mBAAC8iB,GAAA,EAAD,CAAUE,MAAM,GAAGD,SAAS,IAC5B,mBAACxH,GAAA,EAAD,CACEE,OAAQwiE,EAAOxiE,OACfD,OAAQotF,EAAgB3qB,GACxBnoC,eAAa,cCkO7B,IAAejhD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA6D,IAApD,OAAEQ,EAAF,wBAAUwyG,GAA0C,EAC3D,MAAM1yG,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBsmB,KAAMoB,GAAcloB,EAAOmoB,OAC7B,cAAE9J,GAAkBre,EAI1B,MAAO,CACLM,KAAAA,EACA4nB,UAAAA,EACA7J,cAAAA,EACA+M,WAPgBkkB,EAAAA,EAAAA,IAAchvC,GAQ9B2yG,sBAP4B3yG,EAAKmpG,WAAauJ,GAQ9Ce,cAAezzG,EAAK0zG,eAdNj0G,EApUsC,IAYpD,UAZqD,WACzDk0G,EADyD,eAEzDC,EAFyD,cAGzDH,EAHyD,eAIzDx0D,EAJyD,KAKzDj/C,EALyD,UAMzD4nB,EANyD,cAOzD7J,EAPyD,UAQzD+M,EARyD,oBASzD6nF,EATyD,QAUzD5xG,EAVyD,SAWzDoR,GACI,EACJ,MAAM,gBAAE0hG,IAAoB3yG,EAAAA,EAAAA,OAErBirG,EAAaC,IAAkB7lG,EAAAA,EAAAA,IAA6B,KAC5D0mD,EAAW6mD,IAAgBvtG,EAAAA,EAAAA,IAASnL,QAAQu4G,KAC5Cx4D,EAAWqsD,IAAgBjhG,EAAAA,EAAAA,KAAS,IACpCwtG,EAAiCC,EAA+BC,IAAkClwG,EAAAA,EAAAA,MAClGmwG,EAAaC,IAAkB5tG,EAAAA,EAAAA,IAAS,IACzC7E,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMiyG,GAAqBr3G,EAAAA,EAAAA,KAAQ,KAAM,QACvC,MAAMy4G,EAAmB,UAAGp0G,EAAKosC,gBAAR,iBAAG,EAAe0/D,oBAAlB,aAAG,EAA6B9kE,MAAK,QAAC,OAAE5gB,GAAH,SAAgBA,IAAWwtF,KAIzF,IAAID,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAMj2F,GAAOiK,EAAAA,EAAAA,MAAYE,MAAMrB,KAAKotF,GAEpC,OAAOl2F,EAAO,CACZ0I,OAAQ1I,EAAKhmB,GACbg8G,YAAaD,EACbS,YAAaxyG,EAAK,gBAClB0sG,SAAS,EACT1B,sBAAkBryG,QAChBA,EAGN,OAAO+5G,KACN,WAACp0G,EAAKosC,gBAAN,aAAC,EAAe0/D,aAAc2H,EAAeE,EAAYjyG,EAAMkyG,KAElE11G,EAAAA,EAAAA,KAAU,KACJ8B,MAAAA,GAAAA,EAAMosC,UAAYwnE,IAAmBZ,GACvC/zD,EAAewrD,EAAAA,GAAAA,sBAEhB,CAACzqG,EAAMi/C,EAAgB+zD,EAAoBY,KAE9C11G,EAAAA,EAAAA,KAAU,KACRkuG,GAAe4G,MAAAA,OAAA,EAAAA,EAAoBU,cAAe,IAClDS,IAAgBnB,MAAAA,OAAA,EAAAA,EAAoBkB,cAAe,IAAI/2C,OAAO,EA7DlC,KA8D5B22C,EAAa14G,QAAQu4G,IACrBnM,GAAa,KACZ,CAACiM,EAAeE,EAAYX,IAE/B,MAAMrG,GAAyBvrG,EAAAA,EAAAA,KAAa8F,IAC1C,MAAM,KAAEid,GAASjd,EAAEwQ,OAMnB00F,GAAgB5sF,IAAD,UACVA,EACH,CAAC2E,IANgCpZ,EAMCyU,EAAE2E,IAL7BpZ,QAAQ1Q,IADjB,IAAmC0Q,KAQnC+oG,GAAa,KACZ,IAEGjH,GAAwBzrG,EAAAA,EAAAA,KAAY,KACnCwyG,IAILpM,GAAa,GACbqM,EAAgB,CACd3zG,OAAQF,EAAKtI,GACb0uB,OAAQwtF,EACRF,YAAavH,EACb+H,YAAAA,OAED,CAACN,EAAgBC,EAAiB7zG,EAAKtI,GAAIy0G,EAAa+H,IAErDG,GAAqBjzG,EAAAA,EAAAA,KAAY,KAChCwyG,IAILC,EAAgB,CACd3zG,OAAQF,EAAKtI,GACb0uB,OAAQwtF,EACRF,YAAa,KAEfO,OACC,CAACj0G,EAAKtI,GAAIu8G,EAAgCL,EAAgBC,IAEvDV,GAAuB/xG,EAAAA,EAAAA,KAAaoE,MACpC/E,EAAAA,EAAAA,IAAiBT,KAIjB2yG,GAAwB3yG,EAAK0zG,aAIzB1zG,EAAK0zG,YAAaluG,KACzB,CAACxF,EAAM2yG,IAEJ2B,GAAe34G,EAAAA,EAAAA,KAAQ,KAC3B,GAAIg4G,IAAeX,EACjB,OAGF,GAAIA,EAAmB5E,QACrB,OAAO1sG,EAAK,kBAGd,MAAM8xG,EAAiBR,EAAmBtG,iBACtC9kF,EAAUorF,EAAmBtG,uBAC7BryG,EAEJ,OAAIm5G,EACK9xG,EAAK,uBAAuBksB,EAAAA,EAAAA,IAAgB4lF,IAG9C9xG,EAAK,kBACX,CAACiyG,EAAYX,EAAoBprF,EAAWlmB,IAEzC6yG,GAA0BnzG,EAAAA,EAAAA,KAAa8F,IAC3C,MAAM,MAAE6D,GAAU7D,EAAEwQ,OACpBy8F,EAAeppG,GACf+oG,GAAa,KACZ,IAEH,GAAKd,EAIL,OACE,0BAAKlxG,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmkB,GAAA,EAAD,CAAUkkC,UAAQ,EAACroD,UAAU,uBAC3B,mBAACokB,GAAA,EAAD,CACEE,OAAQ4sF,EAAmB5sF,OAC3BD,OAAQmuF,EACR7zD,eAAa,KAIjB,yBAAI3+C,UAAU,uBAAuBsF,IAAI,QAAQ1F,EAAK,uBAEtD,0BAAKI,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,QAAStyB,QAAQ+wG,EAAY2B,YAC7BngF,MAAOjsB,EAAKopB,EAAY,6BAA+B,4BACvD0iF,UAAQ,EACRhiG,SAAU2nG,EAAqB,cAC/BnoG,SAAU2hG,KAGb7hF,GACC,0BAAKhpB,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,QAAStyB,QAAQ+wG,EAAYqI,cAC7B7mF,MAAOjsB,EAAK,yBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,gBAC/BnoG,SAAU2hG,KAIf7hF,GACC,0BAAKhpB,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,eACLuJ,QAAStyB,QAAQ+wG,EAAYsI,cAC7B9mF,MAAOjsB,EAAK,yBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,gBAC/BnoG,SAAU2hG,KAIhB,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,iBACLuJ,QAAStyB,QAAQ+wG,EAAYnrG,gBAC7B2sB,MAAOjsB,EAAKopB,EAAY,0BAA4B,gCACpD0iF,UAAQ,EACRhiG,SAAU2nG,EAAqB,kBAC/BnoG,SAAU2hG,MAGZ7hF,GACA,0BAAKhpB,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,WACLuJ,QAAStyB,QAAQ+wG,EAAYuI,UAC7B/mF,MAAOjsB,EAAK,qBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,YAC/BnoG,SAAU2hG,KAIhB,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,QAAStyB,QAAQ+wG,EAAYyB,aAC7BjgF,MAAOjsB,EAAK,qBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,eAC/BnoG,SAAU2hG,MAGZ7hF,GACA,0BAAKhpB,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,cACLuJ,QAAStyB,QAAQ+wG,EAAY0B,aAC7BlgF,MAAOjsB,EAAK,wBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,eAC/BnoG,SAAU2hG,KAIhB,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,QAAStyB,QAAQ+wG,EAAYwI,WAC7BhnF,MAAOjsB,EAAK,sBACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,aAC/BnoG,SAAU2hG,KAGd,0BAAK7qG,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,aACLuJ,QAAStyB,QAAQ+wG,EAAYyI,YAC7BjnF,MAAOjsB,EAAK,2BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,cAC/BnoG,SAAU2hG,MAGZ7hF,GACA,0BAAKhpB,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,YACLuJ,QAAStyB,QAAQ+wG,EAAY0I,WAC7BlnF,MAAOjsB,EAAK,4BACZ8rG,UAAQ,EACRhiG,SAAU2nG,EAAqB,aAC/BnoG,SAAU2hG,KAKfgG,GACC,wBAAG7wG,UAAU,oBAAoBsF,IAAI,QAClC1F,EAAK,kCAIRopB,GACA,mBAACxF,GAAA,EAAD,CACE5tB,GAAG,cACHi2B,MAAOjsB,EAAK,iBACZsJ,SAAUupG,EACVxpG,MAAOmpG,EACP1oG,SAAUmnG,EACV1yE,UA/RkB,KAmSrBliB,IAAkB61F,IAAmBjB,IAAwBgB,GAC5D,mBAAC1tF,GAAA,EAAD,CAAUlhB,KAAK,SAAS4F,QAAM,EAAC2xB,aAAW,EAACn6B,QAAS6xG,GACjDtyG,EAAK,2BAMd,mBAACujD,GAAA,EAAD,CACEl8B,QAASkkC,EACT9qD,QAAS0qG,EACTpoG,UAAW/C,EAAK,QAChB8J,SAAU2vC,GAETA,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,iBAIf6xG,GACA,mBAACtnF,GAAA,EAAD,CACEzrB,OAAQmzG,EACRhzG,QAASkzG,EACT/tG,KAAK,+CACLomB,aAAc5qB,EAAK,yBACnB6qB,eAAgB8nF,EAChB52E,sBAAoB,S,gBCtT9B,MAmLA,IAAej+B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,YAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxButE,aAAcC,GAAqBhuE,EAAOmoB,MAC5CqlF,EAAUltG,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgB8gE,QAC1BpB,EAAe9rG,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgB0/D,aAC/BhhF,EAAY9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,IAChCmnB,QAASqxB,GAAoB94C,EAAOwnB,aAAe,IAGzDyyB,MAAOpC,EADH,eAEJkB,EAFI,cAGJI,EAHI,aAIJE,GACEr5C,EAAOsiE,WAIX,MAAO,CACLkrC,QAAAA,EACApB,aAAAA,EACAp+B,iBAAAA,EACA5iD,UAAAA,EACA0tB,gBAAAA,EACAjB,YAAAA,EACAu2B,YAAar1B,EACbI,cAAAA,EACAE,aAAAA,EACAs1D,iBAZuBruG,IAASA,EAAKmpG,YAAaC,EAAAA,EAAAA,IAAiBppG,EAAM,aAazE4zB,iBAAkBl0B,EAAOk0B,iBACzB7V,cAAere,EAAOqe,iBA9BRte,EAnLkC,IAkBhD,IAlBiD,SACrDq1G,EADqD,QAErD5H,EAFqD,aAGrDpB,EAHqD,iBAIrDp+B,EAJqD,UAKrD5iD,EALqD,SAMrD3Y,EANqD,cAOrD0mC,EAPqD,gBAQrDL,EARqD,aASrDO,EATqD,YAUrD+0B,EAVqD,YAWrDv2B,EAXqD,iBAYrD3jB,EAZqD,cAarD7V,EAbqD,iBAcrDswF,EAdqD,QAerDttG,EAfqD,eAgBrDk+C,EAhBqD,mBAiBrDgtD,GACI,EACJ,MAAM,SAAEt1E,EAAF,mBAAYsrC,EAAZ,gBAAgCmmC,IAAoBlnG,EAAAA,EAAAA,MACpDQ,GAAOC,EAAAA,EAAAA,KAEP2yB,GAAWt3B,EAAAA,EAAAA,IAAyB,MAEpC8W,GAAe9W,EAAAA,EAAAA,IAAuB,OAErC+3G,EAAgBC,IAAqBzuG,EAAAA,EAAAA,MAEtC0uG,GAAWt5G,EAAAA,EAAAA,KAAQ,IAChBm5G,IAAWhJ,MAAAA,OAAA,EAAAA,EAAcvqG,KAAI,QAAC,OAAE6kB,GAAH,SAAgBA,OAAgB,IACnE,CAAC0lF,EAAcgJ,IAEZ7iE,GAAYt2C,EAAAA,EAAAA,KAAQ,KAExB,MAAMisB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KACpC,IAAK0mF,IAAYtlF,EACf,MAAO,GAGT,MAAMT,GAAU0mD,EAAAA,EAAAA,IACdq/B,EAAQ3rG,KAAI,QAAC,OAAE6kB,GAAH,SAAgBA,KAC5BwB,EACA8lD,OACArzE,EACAu5B,GAGF,OAAOkhF,EAAW3tF,EAAQC,QAAQhB,IAAY6uF,EAASt9G,SAASyuB,KAAWe,IAC1E,CAAC+lF,EAASx/B,EAAkB95C,EAAkBkhF,EAAUG,IAErDxmD,GAAe9yD,EAAAA,EAAAA,KAAQ,KAE3B,MAAMisB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMrB,KAC9BC,GAAYkB,EAAAA,EAAAA,MAAYpB,MAAMC,KAC9B0uF,EAAyB95G,QAAQm8C,GACjC49D,EAAaD,EAEd18D,GAAkBnwB,EAAAA,EAAAA,IAAkBmwB,EAAiB5wB,EAAW2vB,GAAe,GADhFtF,EAGJ,OAAO9pB,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IACFytF,KACCD,GAAyBn8D,GAAqB,MAC9Cm8D,GAAyBr8D,GAAsB,KAClDzxB,QAAQi7C,IACT,MAAM3kD,EAAOkK,EAAUy6C,GACvB,OAAK3kD,IAIGoN,GAAapN,EAAKywD,uBAAwBC,EAAAA,EAAAA,IAAU1wD,OACrDo3F,IAAaG,EAASt9G,SAAS0qE,OAExC57C,GACA,KAED,CAACwrB,EAAWuG,EAAiBjB,EAAawB,EAAcF,EAAe/tB,EAAWgqF,EAAUG,KAExFpwF,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB1qB,EAAWo0D,EAAcrzD,QAAQm8C,IAE5EqwD,GAAoBxmG,EAAAA,EAAAA,KAAa1J,IACjCo9G,GACF7I,EAAoBv0G,GAAI,GACxBunD,EAAgBwrD,EAAAA,GAAAA,sBAEhBrC,IACAzxE,EAAS,CAAEj/B,GAAAA,OAEZ,CAAC0wG,EAAiB0M,EAAU7I,EAAoBhtD,EAAgBtoB,IAE7Dm3B,GAAqB1sD,EAAAA,EAAAA,KAAa8F,IACtC+6D,EAAmB,CAAEtoB,MAAOzyC,EAAEwQ,OAAO3M,UACpC,CAACk3D,IACEtqD,GAAgByN,EAAAA,GAAAA,GAA0BtR,EAAc3B,GAAW0R,IACnEgB,GAAeA,EAAYhsB,OAAS,GACtC+uG,EAAkB/iF,GAAuB,IAAXhB,EAAe,EAAIA,MAElD,oBAAoB,GAEjBuxF,GAAgCh0G,EAAAA,EAAAA,KAAY,KAChD4zG,OAAkB36G,KACjB,IA8BH,OA5BAib,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IA2BR,0BAAKe,UAAU,cACZgzG,GAbD,0BAAKhzG,UAAU,qBAAqBsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAC5D,mBAACirB,GAAA,EAAD,CACE/a,IAAK+pB,EACLvpB,MAAOwsC,EACPvsC,SAAU8iD,EACVtoC,YAAa9jB,EAAK,aAStB,0BAAKI,UAAU,iBACb,0BAAKA,UAAU,WACZ+iB,MAAAA,GAAAA,EAAahsB,OACZ,mBAAC8sB,GAAA,EAAD,CACE7jB,UAAU,4BACV8jB,MAAO6oC,EACP5oC,WAAYf,EACZuwF,gBAAiBj6G,QAAQm8C,GACzBhtC,IAAKuJ,EACLyR,UAAW5N,GAEVkN,EAAYtjB,KAAK7J,IAChB,0BAACuuB,GAAA,EAAD,CACEzgB,IAAK9N,EACLoK,UAAU,kCAEVK,QAAS,IAAMylG,EAAkBlwG,GACjCs+C,gBA3CgBs/D,EA2CuB59G,EA1C9C49G,IAAav3F,GAAkBswF,EAA+B,CAAC,CACpEtsG,MAAOL,EAAK,iCACZqD,KAAM,OACNwlD,QAAS,KACPyqD,EAAkBM,WAJmCj7G,IA4C3C,mBAAC6rB,GAAA,EAAD,CAAiBE,OAAQ1uB,EAAI+oD,eAAa,KA7C1D,IAAgC60D,MAiDnBxnC,IAAejpD,GAAgBA,EAAYhsB,OAO9C,mBAACytB,GAAA,EAAD,MANA,mBAACs0B,GAAA,EAAD,CACEymD,cAAe,EACf77F,IAAI,gBACJU,KAAM4kB,EAAY,uBAAyB,uBAOlDujF,GACC,mBAACkH,GAAA,EAAD,CACE30G,OAAQxF,QAAQ25G,GAChB3uF,OAAQ2uF,EACRh0G,QAASq0G,SChInB,IAAe51G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBsmB,KAAMoB,EAAW6lD,aAAcC,GAAqBhuE,EAAOmoB,MAInE,MAAO,CACLqlF,QAJcltG,MAAAA,GAAH,UAAGA,EAAMosC,gBAAT,aAAG,EAAgB8gE,QAK9BtlF,UAAAA,EACA8lD,iBAAAA,EACA5iD,UANgB9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,GAOtC4zB,iBAAkBl0B,EAAOk0B,oBAZXn0B,EAhEgD,IAU9D,IAV+D,UACnEmoB,EADmE,iBAEnE8lD,EAFmE,QAGnEw/B,EAHmE,UAInEpiF,EAJmE,eAKnEm0B,EALmE,mBAMnEgtD,EANmE,QAOnElrG,EAPmE,SAQnEoR,EARmE,iBASnEyhB,GACI,GACJte,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMkxC,GAAYt2C,EAAAA,EAAAA,KAAQ,KACxB,GAAKuxG,GAAYtlF,EAIjB,OAAOimD,EAAAA,EAAAA,IACLq/B,EAAQ9lF,QAAQwhE,IAAYA,EAAOwlB,UAAS7sG,KAAI,QAAC,OAAE6kB,GAAH,SAAgBA,KAChEwB,EACA8lD,OACArzE,EACAu5B,KAED,CAACs5E,EAASt5E,EAAkBhM,EAAW8lD,IAEpC++B,GAA6BrrG,EAAAA,EAAAA,KAAak0G,IAC9CrJ,EAAmBqJ,GACnBr2D,EAAewrD,EAAAA,GAAAA,wBACd,CAACwB,EAAoBhtD,IAExB,OACE,0BAAKn9C,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUswG,eAAa,GACnCngE,EACCA,EAAU1wC,KAAI,CAAC7J,EAAI+nB,IACjB,mBAACwG,GAAA,EAAD,CACEzgB,IAAK9N,EACL2pG,cAAe5hF,EACf3d,UAAU,kCAEVK,QAAS,IAAMsqG,EAA2B/0G,IAE1C,mBAACwuB,GAAA,EAAD,CAAiBE,OAAQ1uB,EAAI+oD,eAAa,OAI9C,mBAAC7F,GAAA,EAAD,CACEymD,cAAe,EACf77F,IAAI,gBACJU,KAAM4kB,EAAY,uBAAyB,4B,gBCtCzD,SAAS0qF,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeC,MAAOC,EAAU,EAAGj4F,KAAMk4F,GAAWN,GACjEE,YAAaK,EAAeH,MAAOI,EAAU,EAAGp4F,KAAMq4F,GAAWR,EACzE,OAAIE,GAAiBI,EAAsB3jF,OAAOujF,GAAiBvjF,OAAO2jF,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,EAGlB,MAwWA,IAAev2G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,QAAE+oG,EAAF,eAAWkN,GAAmBz2G,EAAOwoG,WAAWlvD,SAAS94C,GACzDF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B4qB,EAAY9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,GAExC,MAAO,CACLupG,gBAAiBN,EACjBmN,uBAAwBD,EACxBn2G,KAAAA,EACA4zB,iBAAkBl0B,EAAOk0B,iBACzB9I,UAAAA,KAXcrrB,EAxW6B,IAU3C,IAV4C,OAChDS,EADgD,KAEhDF,EAFgD,gBAGhDupG,EAHgD,uBAIhD6M,EAJgD,SAKhDjkG,EALgD,UAMhD2Y,EANgD,iBAOhD8I,EAPgD,QAQhD7yB,EARgD,eAShDk+C,GACI,EACJ,MAAM,yBACJo3D,EADI,iBAEJvtF,EAFI,uBAGJwtF,EAHI,yBAIJC,EAJI,iCAKJC,EALI,oBAMJC,IACEv1G,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAEN+0G,EAA6BC,EAA2BC,IAA8B7yG,EAAAA,EAAAA,MACtF8yG,EAAoBC,EAAkBC,IAAqBhzG,EAAAA,EAAAA,MAC3DizG,EAAgBC,IAAqB1wG,EAAAA,EAAAA,OACrC8hG,EAAoBC,EAAkBC,IAAqBxkG,EAAAA,EAAAA,MAC3DmzG,EAAgBC,IAAqB5wG,EAAAA,EAAAA,OAE5C+O,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMq2G,GAAuBz7G,EAAAA,EAAAA,KAAQ,KACnC,GAAK4tG,EACL,OAAOA,EACJ/uB,MAAK,QAAC,WAAE68B,GAAH,SACJA,GAAeA,GAAaC,EAAAA,GAAAA,GAAc1jF,GAAoB2jF,GAAAA,GAAsB,SAEvF,CAAChO,EAAiB31E,IACf71B,GAAcC,EAAAA,EAAAA,MACpBq9B,EAAAA,GAAAA,IAAY,KACVt9B,MACCq5G,EAAuB,SAAO/8G,GAEjC,MAAMm9G,EAAgBjO,MAAAA,OAAH,EAAGA,EAAiBviE,MAAK,QAAC,YAAE2uE,GAAH,SAAqBA,KAC3D8B,EAAoBz3G,MAAAA,GAAAA,EAAMyhD,SAAY,GAAE/oB,EAAAA,KAAkB14B,EAAKyhD,WAAa+1D,MAAAA,OAAxD,EAAwDA,EAAeE,KAC3FC,GAAkBh8G,EAAAA,EAAAA,KAAQ,KAC9B,MAAMstG,EAAUjpG,MAAAA,GAAAA,EAAMyhD,SAAW8nD,EAAkBA,MAAAA,OAAnC,EAAmCA,EAAiBniF,QAAO,QAAC,YAAEuuF,GAAH,SAAsBA,KACjG,OAAO1M,MAAAA,OAAP,EAAOA,EAAS7uD,KAAKo7D,MACpB,CAACx1G,MAAAA,OAAD,EAACA,EAAMyhD,SAAU8nD,IAOdqO,GAAex2G,EAAAA,EAAAA,KAAaspB,IAChC,MAAM,KACJgtF,EADI,MACE31G,EADF,gBACSgpB,EADT,WAC0BssF,EAD1B,WACsCQ,GACxCntF,EACJ4rF,EAAuB,CACrBp2G,OAAAA,EACAw3G,KAAAA,EACA31G,MAAAA,EACAgpB,gBAAAA,EACAssF,WAAAA,EACAQ,WAAAA,EACAtN,WAAW,MAEZ,CAACrqG,EAAQo2G,IAENwB,GAAc12G,EAAAA,EAAAA,KAAaspB,IAC/BusF,EAAkBvsF,GAClBosF,MACC,CAACA,IAEEiB,GAAe32G,EAAAA,EAAAA,KAAY,KAC1B41G,IACLY,EAAaZ,GACbC,OAAkB58G,GAClB08G,OACC,CAACA,EAAmBa,EAAcZ,IAE/BgB,GAAuB52G,EAAAA,EAAAA,KAAY,KACvC69C,EAAewrD,EAAAA,GAAAA,cACd,CAACxrD,IAEEg5D,GAAsB72G,EAAAA,EAAAA,KAAY,KAClCo2G,GACFM,EAAYN,KAEb,CAACM,EAAaN,IAEXU,GAAyB92G,EAAAA,EAAAA,KAAY,KACzCo1G,EAAiC,CAAEt2G,OAAAA,IACnC02G,MACC,CAAC12G,EAAQ02G,EAA4BJ,IAElC2B,GAAiB/2G,EAAAA,EAAAA,KAAaspB,IAClC+rF,EAAoB,CAAEv2G,OAAAA,EAAQwqB,OAAAA,IAC9Bu0B,EAAewrD,EAAAA,GAAAA,cACd,CAACvqG,EAAQ++C,EAAgBw3D,IAEtB2B,GAAeh3G,EAAAA,EAAAA,KAAaspB,IAChC6rF,EAAyB,CAAEr2G,OAAAA,EAAQw3G,KAAMhtF,EAAOgtF,SAC/C,CAACx3G,EAAQq2G,IAEN8B,IAAcj3G,EAAAA,EAAAA,KAAaspB,IAC/BysF,EAAkBzsF,GAClB49E,MACC,CAACA,IAEEpyD,IAAe90C,EAAAA,EAAAA,KAAY,KAC1B81G,IACLkB,EAAalB,GACbC,OAAkB98G,GAClBkuG,OACC,CAACA,EAAmB6P,EAAclB,IAE/BoB,IAAWl3G,EAAAA,EAAAA,KAAas2G,KAC5Bh5B,EAAAA,GAAAA,IAAoBg5B,GACpB5uF,EAAiB,CACfxwB,QAASoJ,EAAK,kBAEf,CAACA,EAAMonB,IAEJyvF,IAA2Bn3G,EAAAA,EAAAA,KAAY,KAC3Ck3G,GAASb,KACR,CAACa,GAAUb,IAERe,GAAoB9tF,IACxB,MAAM,MACJmrF,EAAQ,EADJ,WACOgC,EADP,WACmBR,EADnB,YAC+B1B,EAD/B,UAC4C8C,EAD5C,UACuDlO,GACzD7/E,EACJ,IAAIxkB,EAAO,GASX,GAPEA,GADGqkG,GAAasN,GAAchC,EAAQgC,EAC/Bn2G,EAAK,UAAWm2G,EAAahC,GAC3BA,EACFn0G,EAAK,eAAgBm0G,GAErBn0G,EAAK,eAGV6oG,EAEF,OADArkG,GAAS,MAAaxE,EAAK,aACpBwE,EAOT,GAJIuyG,IACFvyG,GAAS,MAAaxE,EAAK,eAAgB+2G,WAG1Bp+G,IAAfw9G,GAA4BhC,IAAUgC,EACxC3xG,GAAS,MAAaxE,EAAK,2BACtB,GAAI21G,EAAY,CACrB,MAAMqB,EAAwD,KAAhDrB,GAAaC,EAAAA,GAAAA,GAAc1jF,IACzC1tB,GAAS,MAEPA,GADEwyG,EAAO,EACDh3G,EAAK,wBAAwBi3G,EAAAA,GAAAA,GAAgBj3G,EAAMg3G,IAEnDh3G,EAAK,2BAENi0G,IACTzvG,GAAS,MAAaxE,EAAK,gBAG7B,OAAOwE,GAGH0yG,GAAsBluF,IAC1B,MAAM,MACJmrF,EAAQ,EADJ,WACOgC,EADP,UACmBtN,EADnB,WAC8B8M,GAChC3sF,EACJ,OAAI6/E,EACK,wBAELsN,GAAchC,EAAQgC,EACjB,yBAELR,GAC4D,KAAhDA,GAAaC,EAAAA,GAAAA,GAAc1jF,KAC7B,EACH,uBAGJ,yBAGHilF,GAAyBnuF,IAC7B,MAAMouF,EAAU,GA8BhB,OA7BAA,EAAQh0G,KAAK,CACX/C,MAAOL,EAAK,QACZqD,KAAM,OACNwlD,QAAS,IAAM+tD,GAAS5tF,EAAOgtF,QAG5BhtF,EAAOirF,aAAgBjrF,EAAO6/E,WACjCuO,EAAQh0G,KAAK,CACX/C,MAAOL,EAAK,QACZqD,KAAM,OACNwlD,QAAS,IArJK7/B,CAAAA,IAClB2rF,EAAyB,CAAEn2G,OAAAA,EAAQwqB,OAAAA,IACnCu0B,EAAewrD,EAAAA,GAAAA,aAmJIsO,CAAWruF,KAIzBA,EAAO6/E,UAQVuO,EAAQh0G,KAAK,CACX/C,MAAOL,EAAK,cACZqD,KAAM,SACNwlD,QAAS,IAAM8tD,GAAY3tF,GAC3B4R,aAAa,IAXfw8E,EAAQh0G,KAAK,CACX/C,MAAOL,EAAK,gBACZqD,KAAM,SACNwlD,QAAS,IAAMutD,EAAYptF,GAC3B4R,aAAa,IAUVw8E,GAGHE,IAAyEr9G,EAAAA,EAAAA,KAAQ,IAC9E,QAAC,UAAE4I,EAAF,OAAa3D,GAAd,SACL,mBAACoB,EAAA,EAAD,CACEwC,OAAK,EACLmG,QAAShG,EAAAA,GACTtG,KAAK,UACL4D,MAAM,cACNH,UAAWlB,EAAS,SAAW,GAC/BuB,QAASoC,EACTE,UAAU,WAEV,wBAAG3C,UAAU,iBAGhB,IAEH,OACE,0BAAKA,UAAU,4BACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8nD,GAAA,EAAD,CACExoB,OAAQ6S,GAAAA,EAAAA,OACR51C,KAAM46G,EAAAA,GACNn3G,UAAU,iBAEZ,wBAAGA,UAAU,cAA0BJ,EAAZopB,EAAiB,yBAAiC,qBAE9E2sF,GACC,0BAAK31G,UAAU,WACb,wBAAGA,UAAU,cACV9B,MAAAA,GAAAA,EAAMyhD,SAAW//C,EAAK,cAAgBA,EAAK,oCAE9C,0BAAKI,UAAU,gBACb,4BACEA,UAAU,kCACViJ,MAAO0sG,EACPl1D,UAAQ,EACRpgD,QAASo2G,KAEX,mBAACnzG,EAAA,EAAD,CACEtD,UAAU,yBACVuD,QAAS2zG,GACT1zG,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUR,KAAK,OAAO5C,QAASo2G,IAA2B72G,EAAK,WAC7D1B,MAAAA,GAAAA,EAAMyhD,WACN,mBAACl8C,EAAA,EAAD,CAAUR,KAAK,SAAS5C,QAAS81G,EAAqB37E,aAAW,GAAE56B,EAAK,mBAI9E,mBAACM,EAAA,EAAD,CAAQG,QAASo2G,IAA2B72G,EAAK,cAGrD,0BAAKI,UAAU,UAAUswG,eAAa,GACpC,mBAACpwG,EAAA,EAAD,CAAQE,QAAM,EAACsD,IAAI,SAAS1D,UAAU,cAAcK,QAAS61G,GAC1Dt2G,EAAK,oBAELi2G,IAAoBA,EAAgB9+G,SAAW,mBAAC+hD,GAAA,EAAD,CAAc10C,KAAK,iBAAiBV,IAAI,YACzFmyG,MAAAA,OALH,EAKGA,EAAiBp2G,KAAKmpB,GACrB,mBAACzE,GAAA,EAAD,CACE26B,YAAa,wBAAG9+C,UAAY,8BAA6B82G,GAAmBluF,OAC5E4/B,cAAc,OACdF,WAAS,EAETjoD,QAAS,IAAMg2G,EAAeztF,GAC9BsrB,eAAgB6iE,GAAsBnuF,GACtCllB,IAAKklB,EAAOgtF,MAEZ,2BAAM51G,UAAU,sBAAsB4oB,EAAO3oB,OAAS2oB,EAAOgtF,MAC7D,2BAAM51G,UAAU,WAAWsF,IAAI,QAC5BoxG,GAAiB9tF,OAIxB,wBAAG5oB,UAAU,kBAAkB0D,IAAI,cAAc9D,EAAK,yBAEvD00G,GAA0Bh7G,QAAQg7G,EAAuBv9G,SACxD,0BAAKiJ,UAAU,UAAUswG,eAAa,GACpC,wBAAGtwG,UAAU,aAAa0D,IAAI,SAAS9D,EAAK,iBAC5C,mBAACukB,GAAA,EAAD,CACElhB,KAAK,SACLu3B,aAAW,EACX92B,IAAI,SACJrD,QAASw0G,GAET,2BAAM70G,UAAU,SAASJ,EAAK,2BAE/B00G,MAAAA,OAVH,EAUGA,EAAwB70G,KAAKmpB,GAC5B,mBAACzE,GAAA,EAAD,CACE26B,YAAa,wBAAG9+C,UAAY,8BAA6B82G,GAAmBluF,OAC5E4/B,cAAc,OACdF,WAAS,EAETjoD,QAAS,IAAMg2G,EAAeztF,GAC9BsrB,eAAgB6iE,GAAsBnuF,GACtCllB,IAAKklB,EAAOgtF,MAEZ,2BAAM51G,UAAU,SAAS4oB,EAAO3oB,OAAS2oB,EAAOgtF,MAChD,2BAAM51G,UAAU,WAAWsF,IAAI,QAC5BoxG,GAAiB9tF,SAO9B,mBAAC2B,GAAA,EAAD,CACEzrB,OAAQ81G,EACR31G,QAAS61G,EACT70G,MAAOL,EAAK,yBACZwE,KAAMxE,EAAK,4BACX+7B,sBAAoB,EACpBnR,aAAc5qB,EAAK,aACnB6qB,eAAgB2rF,IAElB,mBAAC7rF,GAAA,EAAD,CACEzrB,OAAQi2G,EACR91G,QAASg2G,EACTh1G,MAAOL,EAAK,cACZwE,KAAMxE,EAAK,eACX+7B,sBAAoB,EACpBnR,aAAc5qB,EAAK,gBACnB6qB,eAAgBwrF,IAElB,mBAAC1rF,GAAA,EAAD,CACEzrB,OAAQynG,EACRtnG,QAASwnG,EACTxmG,MAAOL,EAAK,cACZwE,KAAMxE,EAAK,kBACX+7B,sBAAoB,EACpBnR,aAAc5qB,EAAK,UACnB6qB,eAAgB2pB,UCpYlBgjE,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACNjrF,IAAK,MACLkrF,KAAM,QAEFC,GAA6BH,GAAoBC,KAgPvD,IAAe55G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,cAAEq5G,GAAkB75G,EAAOwoG,WAAWlvD,SAAS94C,GAErD,MAAO,CACLq5G,cAAAA,EACA3lF,iBAAkBl0B,EAAOk0B,oBANXn0B,EAlO4B,IAO1C,IAP2C,OAC/CS,EAD+C,cAE/Cq5G,EAF+C,SAG/CpnG,EAH+C,iBAI/CyhB,EAJ+C,QAK/C7yB,EAL+C,eAM/Ck+C,GACI,EACJ,MAAM,uBAAEq3D,EAAF,iBAA0BkD,IAAqBt4G,EAAAA,EAAAA,MAE/CQ,GAAOC,EAAAA,EAAAA,MACN83G,EAAkB98B,EAAcC,IAAiB74E,EAAAA,EAAAA,MACjDgnB,EAAiB2uF,IAAsBnzG,EAAAA,EAAAA,KAAS,IAChDxE,EAAO4sE,IAAYpoE,EAAAA,EAAAA,IAAS,KAC5BozG,EAAkBC,IAAuBrzG,EAAAA,EAAAA,IAAiBqQ,KAAKC,MAAQyiG,KACvEO,EAAsBC,IAA2BvzG,EAAAA,EAAAA,IAAS,cAC1DwzG,EAAkBC,IAAuBzzG,EAAAA,EAAAA,IAA6B,KACtE0zG,EAAqBC,IAA0B3zG,EAAAA,EAAAA,IAAS,MACxD4zG,EAAiBC,IAAsB7zG,EAAAA,EAAAA,KAAS,IAEvD+O,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7D,EAAAA,EAAAA,IAAY,IAAwB,IAAtBm9G,GAAsB,EAClC,GAAIA,IAAqBd,EACzB,GAAKA,EAOE,CACL,MACEx3G,MAAOu4G,EADH,WACiBzC,EADjB,WAC6BR,EAAYtsF,gBAAiBwvF,GAC5DhB,EAMJ,GALIe,GAAc3rC,EAAS2rC,GACvBzC,IACFqC,EAAuBhB,GAAqBvhH,SAASkgH,GAAcA,EAAWtwE,WAAa,UAC3FyyE,EAAoBnC,IAElBR,EAAY,CACd,MAAMmD,GAAclD,EAAAA,GAAAA,GAAc1jF,GAAoB0lF,GACtDQ,EAAwB,UACxBF,EAAwD,IAApC30G,KAAK4E,IAAIwtG,EAAYmD,IAEvCD,GACFb,GAAmB,QArBrB/qC,EAAS,IACTmrC,EAAwB,aACxBI,EAAuB,KACvBN,EAAsD,KAAlCtC,EAAAA,GAAAA,GAAc1jF,GAA2B0lF,IAC7DU,EAAoB,IACpBN,GAAmB,KAmBpB,CAACH,EAAe3lF,IAEnB,MAAM6mF,GAAwBr5G,EAAAA,EAAAA,KAAa8F,IACzCwyG,EAAmBxyG,EAAEwQ,OAAOgW,WAC3B,IAEGuhD,GAAoB7tE,EAAAA,EAAAA,KAAa8F,IACrCynE,EAASznE,EAAEwQ,OAAO3M,SACjB,IAEG2vG,GAA+Bt5G,EAAAA,EAAAA,KAAa8F,IAChD8yG,EAAoB3nF,OAAOsoF,SAASzzG,EAAEwQ,OAAO3M,MAAO,OACnD,IAEG6vG,GAAyBx5G,EAAAA,EAAAA,KAAayc,IAC1C+7F,EAAoB/7F,EAAK+S,WACzBgsD,MACC,CAACA,IAEEi+B,GAAkBz5G,EAAAA,EAAAA,KAAY,KAClCg5G,GAAmB,GACnB,MAAMvC,EAAqC,WAAxBoC,EAAmCF,EAAmBE,EACzE,IAAI5C,EACJ,OAAQwC,GACN,IAAK,SACHxC,GAAaC,EAAAA,GAAAA,GAAc1jF,IAAqB+lF,EAAmB/iG,KAAKC,OAAS,IACjF,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACHwgG,GAAaC,EAAAA,GAAAA,GAAc1jF,GAAoBulF,GAAoBU,GAAwB,IAC3F,MACF,IAAK,YACHxC,EAAa,EACb,MACF,QACEA,OAAah9G,EAGbk/G,EACFjD,EAAuB,CACrBoB,KAAM6B,EAAc7B,KACpBx3G,OAAAA,EACA6B,MAAAA,EACAgpB,gBAAAA,EACAssF,WAAAA,EACAQ,WAAAA,IAGF2B,EAAiB,CACft5G,OAAAA,EACA6B,MAAAA,EACAgpB,gBAAAA,EACAssF,WAAAA,EACAQ,WAAAA,IAGJ54D,EAAewrD,EAAAA,GAAAA,WACd,CACDvqG,EAAQy5G,EAAkBI,EAAkBzD,EAAwBiD,EACpEC,EAAkBzuF,EAAiB8uF,EAAsBI,EAAqBl4G,EAAOk9C,EACrFrrB,IAGF,OACE,0BAAK9xB,UAAU,2BACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC2rB,GAAA,EAAD,CACEE,MAAOjsB,EAAK,qBACZouD,SAAUpuD,EAAK,gCACfgsB,QAAS3C,EACT/f,SAAUyvG,KAGd,0BAAK34G,UAAU,WACb,mBAACwjB,GAAA,EAAD,CACExjB,UAAU,YACV0jB,YAAa9jB,EAAK,gBAClBqJ,MAAOhJ,EACPiJ,SAAUikE,IAEZ,wBAAGntE,UAAU,mBAAmBJ,EAAK,kBAEvC,0BAAKI,UAAU,WACb,0BAAKA,UAAU,kBAAkBJ,EAAK,kBACtC,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,gBACL4iB,QAAS,CACP,CACEh8B,MAAO,OACP4iB,MAAOjsB,EAAK,QAAS,IAEvB,CACEqJ,MAAO,MACP4iB,MAAOjsB,EAAK,OAAQ,IAEtB,CACEqJ,MAAO,OACP4iB,MAAOjsB,EAAK,QAAS,IAEvB,CACEqJ,MAAO,YACP4iB,MAAOjsB,EAAK,YAEd,CACEqJ,MAAO,SACP4iB,MAAOjsB,EAAK,oCAGhBsJ,SAAU8uG,EACV5oD,SAAU2oD,IAEc,WAAzBA,GACC,mBAAC73G,EAAA,EAAD,CAAQF,UAAU,eAAeI,QAAM,EAACC,QAASw6E,IAC9C6mB,EAAAA,GAAAA,IAAe9hG,EAAMi4G,GADxB,KAC4C5nF,EAAAA,GAAAA,IAAWrwB,EAAMi4G,IAG/D,wBAAG73G,UAAU,mBAAmBJ,EAAK,oBAErCqpB,GACA,0BAAKjpB,UAAU,WACb,0BAAKA,UAAU,kBAAkBJ,EAAK,sBACtC,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,eACL4iB,QAAS,IACJmyE,GAAqB33G,KAAKu5G,IAAD,CAAU/vG,MAAO+vG,EAAEvzE,WAAY5Z,MAAOmtF,MAClE,CACE/vG,MAAO,IACP4iB,MAAOjsB,EAAK,YAEd,CACEqJ,MAAO,SACP4iB,MAAOjsB,EAAK,mCAGhBsJ,SAAUkvG,EACVhpD,SAAU+oD,IAEa,WAAxBA,GACC,4BACEn4G,UAAU,2BACVqB,KAAK,SACL2G,IAAI,IACJD,IAAI,QACJkB,MAAOgvG,EACP/uG,SAAU0vG,IAGd,wBAAG54G,UAAU,mBAAmBJ,EAAK,mBAGzC,mBAACujD,GAAA,EAAD,CACEl8B,SAAO,EACP5mB,QAAS04G,EACTrvG,SAAU2uG,EACV11G,UAA2B/C,EAAhB63G,EAAqB,WAAmB,eAEnD,wBAAGz3G,UAAU,iBAGjB,mBAAC,GAAD,CACElB,OAAQ64G,EACRxqF,cAAY,EACZE,gBAAc,EACdpuB,QAAS67E,EACTttD,SAAUsrF,EACV9rF,WAAY6qF,EACZvqF,kBAAmB1tB,EAAK,eCrIhC,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLkzE,iBAAgB,UAAEpzE,EAAKosC,gBAAP,aAAE,EAAegnC,iBACjC5xC,mBAAoB9hC,EAAO8hC,mBAC3BxhC,KAAAA,KAPcP,EApG+B,IAM7C,IAN8C,mBAClD+hC,EADkD,iBAElD4xC,EAFkD,KAGlDpzE,EAHkD,SAIlDmS,EAJkD,QAKlDpR,GACI,EACJ,MAAM,wBAAEg6G,IAA4B75G,EAAAA,EAAAA,MAE9BQ,GAAOC,EAAAA,EAAAA,MACNsrD,EAAW6mD,IAAgBvtG,EAAAA,EAAAA,KAAS,IACpC40C,EAAWqsD,IAAgBjhG,EAAAA,EAAAA,KAAS,IACpCy0G,EAAuBC,IAA4B10G,EAAAA,EAAAA,IAAS6sE,GAAoB,KAEvF99D,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IAGV,MAAMm6G,GAAsB95G,EAAAA,EAAAA,KAAY,KACjCpB,IACLwnG,GAAa,GAEbuT,EAAwB,CACtB76G,OAAQF,EAAKtI,GACb07E,iBAAkB4nC,OAEnB,CAACh7G,EAAMg7G,EAAuBD,KAEjC78G,EAAAA,EAAAA,KAAU,KACRspG,GAAa,GACbsM,GAAa,GACbmH,EAAyB7nC,GAAoB,MAC5C,CAACA,IAEJ,MAAM+nC,GAA2Bx/G,EAAAA,EAAAA,KAC/B,IAAM6lC,MAAAA,OAAN,EAAMA,EAAoBpa,QAAQ4a,IAAOA,EAAEgmC,cAC3C,CAACxmC,IAGG45E,GAAuBh6G,EAAAA,EAAAA,KAAa8F,IACxC,IAAKlH,IAASm7G,EAA0B,OAExC,MAAM,KAAEh3F,EAAF,QAAQuJ,GAAYxmB,EAAE+I,cACtBorG,EAA+B,QAATl3F,EAAkBuJ,EAAUytF,EAAyB55G,KAAKygC,GAAMA,EAAEhC,WAAY,GACpGtS,EAEA,IAAIstF,EAAuB72F,GAD3B62F,EAAsB5zF,QAAQ4a,GAAMA,IAAM7d,IAGhD82F,EAAyBI,GACzBvH,GAAa,KACZ,CAACqH,EAA0Bn7G,EAAMg7G,IAEpC,OACE,0BAAKl5G,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAK,MACLuJ,SAAUstF,GAAyBA,EAAsBniH,OAAS,EAClE80B,MAAOjsB,EAAK,mBACZsJ,SAAUowG,KAGbD,MAAAA,OATH,EASGA,EAA0B55G,KAAI,QAAC,SAAEy+B,EAAF,MAAYj+B,GAAb,SAC7B,0BAAKD,UAAU,yBACb,mBAAC2rB,GAAA,EAAD,CACEtJ,KAAM6b,EACNtS,SAAUstF,IAAyBA,MAAAA,OAA1B,EAA0BA,EAAuBrjH,SAASqoC,IACnEx0B,SAA4C,KAAlCwvG,MAAAA,OAAA,EAAAA,EAAuBniH,QACjC80B,MACE,0BAAK7rB,UAAU,YACb,mBAACyxC,GAAA,EAAD,CAAqBvT,SAAUA,IAC9Bj+B,GAGLiJ,SAAUowG,UAOpB,mBAACn2D,GAAA,EAAD,CACEl8B,QAASkkC,EACT9qD,QAAS+4G,EACTz2G,UAAW/C,EAAK,QAChB8J,SAAU2vC,GAETA,EACC,mBAACnoC,GAAA,EAAD,CAAS/Q,MAAM,UAEf,wBAAGH,UAAU,qBC2DvB,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAM,WAAEo7G,GAAe57G,EAAOwoG,WAAWlvD,SAAS94C,IAC5C,OAAEwqB,EAAF,UAAU6wF,EAAV,WAAqBC,GAAeF,GAAc,GAClDt7G,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAGhC,MAAO,CACLwqB,OAAAA,EACA6wF,UAAAA,EACAC,WAAAA,EACA1wF,UANgB9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,GAOtC4zB,iBAAkBl0B,EAAOk0B,oBAZXn0B,EAnJgC,IAS9C,IAT+C,OACnDS,EADmD,OAEnDwqB,EAFmD,UAGnD6wF,EAHmD,WAInDC,EAJmD,UAKnD1wF,EALmD,SAMnD3Y,EANmD,iBAOnDyhB,EAPmD,QAQnD7yB,GACI,EACJ,MAAM,iBACJ+nB,EADI,wBAEJ2yF,EAFI,yBAGJC,EAHI,SAIJ/kF,IACEz1B,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MACP,MACJk0G,EAAQ,EADJ,WACOgC,EADP,KACmBH,EADnB,QACyBiE,GAC3BjxF,GAAU,GACR2sF,GAAa3sF,MAAAA,OAAA,EAAAA,EAAQ2sF,aAAsE,KAAvD3sF,EAAO2sF,YAAaC,EAAAA,GAAAA,GAAc1jF,IAA4Bhd,KAAKC,MACvG+kG,IAAclxF,MAAAA,OAAA,EAAAA,EAAQ2sF,aAAc,IAAKC,EAAAA,GAAAA,GAAc1jF,GAAqB,GAElF11B,EAAAA,EAAAA,KAAU,KACJw5G,IACF+D,EAAwB,CAAEv7G,OAAAA,EAAQw3G,KAAAA,IAClCgE,EAAyB,CAAEx7G,OAAAA,EAAQw3G,KAAAA,OAEpC,CAACx3G,EAAQw3G,EAAM+D,EAAyBC,IAE3C,MAAMG,GAAoBz6G,EAAAA,EAAAA,KAAY,MACpCs9E,EAAAA,GAAAA,IAAoBh0D,EAAQgtF,MAC5B5uF,EAAiB,CACfxwB,QAASoJ,EAAK,kBAEf,CAACgpB,EAAQhpB,EAAMonB,IA6DlB,OA3DAxT,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,IA0DR,0BAAKe,UAAU,+BACb,0BAAKA,UAAU,kBACX4oB,GACA,wBAAG5oB,UAAU,cAAcJ,EAAK,YAEjCgpB,GACC,sCACE,0BAAK5oB,UAAU,WACb,yBAAIA,UAAU,cAAc4oB,EAAO3oB,OAAS2oB,EAAOgtF,MACnD,4BACE51G,UAAU,eACViJ,MAAO2f,EAAOgtF,KACdn1D,UAAQ,EACRpgD,QAAS05G,IAEX,mBAAC75G,EAAA,EAAD,CAAQF,UAAU,YAAYK,QAAS05G,GAAoBn6G,EAAK,aAC/D21G,GACC,wBAAGv1G,UAAU,cACV85G,EACGl6G,EAAK,eACLA,EAAK,gBAAkB,IAAE8hG,EAAAA,GAAAA,IAAe9hG,EAAM21G,OAAetlF,EAAAA,GAAAA,IAAWrwB,EAAM21G,QAIvFsE,GACC,0BAAK75G,UAAU,WACb,4BAAIJ,EAAK,mBACT,mBAACukB,GAAA,EAAD,CACEnkB,UAAU,6CAEVK,QAAS,IAAMw0B,EAAS,CAAEj/B,GAAIikH,KAE9B,mBAACz1F,GAAA,EAAD,CACEE,OAAQu1F,EACRx1F,QAAQvI,EAAAA,GAAAA,IAAoBlc,EAAoB,IAAdgpB,EAAO7M,MAAa,GACtD4iC,eAAa,MA1FP,MACtB,GAAK86D,MAAAA,GAAAA,EAAW1iH,QAAZ,MAAsB2iH,IAAAA,EAAY3iH,OACtC,OAAK0iH,EAEH,0BAAKz5G,UAAU,WACb,4BAAIy5G,EAAU1iH,OAAS6I,EAAK,eAAgBm0G,GAASn0G,EAAK,gBAC1D,wBAAGI,UAAU,eACTy5G,EAAU1iH,SACVg/G,EAAan2G,EAAK,4BAA6Bm2G,EAAahC,GAASn0G,EAAK,mBAE3E65G,EAAUh6G,KAAKu6G,GACd,mBAAC71F,GAAA,EAAD,CACEnkB,UAAU,6CAEVK,QAAS,IAAMw0B,EAAS,CAAEj/B,GAAIokH,EAAS11F,UAEvC,mBAACF,GAAA,EAAD,CACEE,OAAQ01F,EAAS11F,OACjBD,QAAQvI,EAAAA,GAAAA,IAAoBlc,EAAsB,IAAhBo6G,EAASj+F,MAAa,GACxD4iC,eAAa,SAjBF,mBAACztC,GAAA,EAAD,OA6Fd+oG,GAnEc,MACvB,GAAIrxF,MAAAA,IAAAA,EAAQ6/E,UAAZ,CACA,IAAKiR,GAAcD,EAAW,OAAO,mBAACvoG,GAAA,EAAD,MACrC,GAAKwoG,MAAAA,GAAAA,EAAY3iH,OACjB,OACE,0BAAKiJ,UAAU,WACb,4BAAgBJ,EAAZopB,EAAiB,oBAA4B,mBACjD,wBAAGhpB,UAAU,cACV05G,EAAWj6G,KAAKy6G,GACf,mBAAC/1F,GAAA,EAAD,CACEnkB,UAAU,6CAEVK,QAAS,IAAMw0B,EAAS,CAAEj/B,GAAIskH,EAAU51F,UAExC,mBAACF,GAAA,EAAD,CACEE,OAAQ41F,EAAU51F,OAClBD,QAAQvI,EAAAA,GAAAA,IAAoBlc,EAAuB,IAAjBs6G,EAAUn+F,MAAa,GACzD4iC,eAAa,WAmDhBw7D,UC5Eb,IAAez8G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0mB,GAAyB,EAGlC,MAAO,CACL1I,MAHWpd,EAAAA,EAAAA,IAAWZ,EAAQ0mB,GAI9BhU,eAAgB1S,EAAOod,SAASC,MAAM3K,eACtCwhB,iBAAkBl0B,EAAOk0B,oBAPXn0B,EA/D2B,IASzC,IAT0C,OAC9C2mB,EAD8C,OAE9ClmB,EAF8C,MAG9C0qB,EAH8C,KAI9C/M,EAJ8C,UAK9CiN,EAL8C,KAM9CpN,EAN8C,eAO9CtL,EAP8C,iBAQ9CwhB,GACI,EACJ,MAAM,SAAE+C,EAAF,oBAAYulF,IAAwBh7G,EAAAA,EAAAA,MAEpC+F,GAAiBwrE,EAAAA,EAAAA,GAAuB,eACxC/wE,GAAOC,EAAAA,EAAAA,KAEPw6G,GAAWvuF,EAAAA,EAAAA,IAAgBlQ,GAC3B0+F,EAAuD,KAA1Cv+F,GAAOy5F,EAAAA,GAAAA,GAAc1jF,IAA4Bhd,KAAKC,MAEnEwlG,GAAaC,EAAAA,GAAAA,IAAQ,IAAI1lG,KAAKwlG,KAChCrqF,EAAAA,GAAAA,IAAWrwB,EAAM06G,IAAaG,EAAAA,GAAAA,IAAgB76G,EAAM06G,GAAW,GAAM,GAAO,GAM1EI,GAAsBp7G,EAAAA,EAAAA,KAAY,KACtC86G,EAAoB,CAAEh8G,OAAAA,EAAQkmB,OAAAA,EAAQq2F,YAAY,MACjD,CAACv8G,EAAQg8G,EAAqB91F,IAE3Bs2F,GAAsBt7G,EAAAA,EAAAA,KAAY,KACtC86G,EAAoB,CAAEh8G,OAAAA,EAAQkmB,OAAAA,EAAQq2F,YAAY,MACjD,CAACv8G,EAAQg8G,EAAqB91F,IAEjC,OACE,0BAAKtkB,UAAWmF,EAAe,MAC7B,0BAAKnF,UAAWmF,EAAe,QAC7B,0BAAKnF,UAAWmF,EAAe,QAAS9E,QAftB,KACtBw0B,EAAS,CAAEj/B,GAAI0uB,MAeT,mBAAC3I,GAAA,EAAD,CACEjY,IAAK4gB,EACL/nB,KAAK,SACLqf,KAAMA,EACNtL,eAAgBA,EAChBuL,WAAS,IAEX,0BAAK7b,UAAWmF,EAAe,cAC7B,0BAAKnF,UAAWmF,EAAe,cAAek1G,GAC9C,0BAAKr6G,UAAWmF,EAAe,kBAAmB2jB,KAGtD,0BAAK9oB,UAAWmF,EAAe,SAAUo1G,IAE3C,0BAAKv6G,UAAWmF,EAAe,YAC7B,mBAACjF,EAAA,EAAD,CAAQF,UAAWmF,EAAe,UAAW9E,QAASq6G,GACvC96G,EAAZopB,EAAiB,sBAA8B,sBAElD,mBAAC9oB,EAAA,EAAD,CAAQF,UAAWmF,EAAe,UAAW/E,QAAM,EAACC,QAASu6G,GAC1Dh7G,EAAK,yBCmChB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEQ,GAAyB,EAClC,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLF,KAAAA,EACA4zB,iBAAkBl0B,EAAOk0B,iBACzB9I,UAAW9qB,IAAQgvC,EAAAA,EAAAA,IAAchvC,MAPnBP,EA7FkC,IAMhD,cANiD,KACrDO,EADqD,OAErDE,EAFqD,SAGrDiS,EAHqD,UAIrD2Y,EAJqD,QAKrD/pB,GACI,EACJ,MAAM,wBAAE47G,EAAF,qBAA2B1S,IAAyB/oG,EAAAA,EAAAA,OACnD07G,EAAuBC,EAAqBC,IAAwB/4G,EAAAA,EAAAA,MACpEg5G,EAAuBC,EAAqBC,IAAwBl5G,EAAAA,EAAAA,KAErErC,GAAOC,EAAAA,EAAAA,MAEb2T,EAAAA,GAAAA,GAAe,CACbnD,SAAAA,EACAoD,OAAQxU,KAGV7C,EAAAA,EAAAA,KAAU,KACH8B,MAAAA,GAAAA,EAAMgsG,eAAiB5rG,EAAAA,EAAAA,IAASF,IACnC+pG,EAAqB,CAAE/pG,OAAAA,MAExB,CAACF,EAAME,EAAQ+pG,IAElB,MAAMiT,GAA0B97G,EAAAA,EAAAA,KAAY,KAC1Cu7G,EAAwB,CAAEz8G,OAAAA,EAAQu8G,YAAY,IAC9CK,MACC,CAACH,EAAyBz8G,EAAQ48G,IAE/BK,GAA0B/7G,EAAAA,EAAAA,KAAY,KAC1Cu7G,EAAwB,CAAEz8G,OAAAA,EAAQu8G,YAAY,IAC9CQ,MACC,CAACN,EAAyBz8G,EAAQ+8G,IAErC,OACE,0BAAKn7G,UAAU,iCACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8nD,GAAA,EAAD,CACExoB,OAAQ6S,GAAAA,EAAAA,YACR51C,KAAM++G,EAAAA,GACNt7G,UAAU,iBAEX1G,QAAQ4E,MAAAA,GAAD,UAACA,EAAMgsG,oBAAP,aAAC,EAAoBnzG,SAC3B,0BAAKiJ,UAAU,gBACb,mBAACE,EAAA,EAAD,CAAQF,UAAU,qBAAqBK,QAAS06G,GAAhD,cACA,mBAAC76G,EAAA,EAAD,CAAQF,UAAU,qBAAqBK,QAAS66G,EAAqB96G,QAAM,GAA3E,iBAIN,0BAAKJ,UAAU,UAAUswG,eAAa,GACpC,wBAAG5sG,IAAI,SACHxF,MAAAA,GAAAA,EAAMgsG,aAAiChsG,EAAKgsG,aAAanzG,OACvD6I,EAAK,eAAgB1B,EAAKgsG,aAAanzG,QAAU6I,EAAK,oBADnCA,EAAK,cAG5B1B,MAAAA,GAAAA,EAAMgsG,eACN,mBAACh5F,GAAA,EAAD,CAASxN,IAAI,YAEiB,KAA/BxF,MAAAA,GAAA,UAAAA,EAAMgsG,oBAAN,eAAoBnzG,SACnB,wBAAGiJ,UAAU,aAAa0D,IAAI,SACf9D,EAAZopB,EAAiB,iCAAyC,gCAG9D9qB,MAAAA,GAbH,UAaGA,EAAMgsG,oBAbT,aAaG,EAAoBzqG,KAAI,QAAC,OAAE6kB,EAAF,MAAUwE,EAAV,KAAiB/M,GAAlB,SACvB,mBAAC,GAAD,CACEuI,OAAQA,EACRwE,MAAOA,EACP/M,KAAMA,EACNiN,UAAWA,EACX5qB,OAAQA,EACRsF,IAAK4gB,SAKb,mBAACiG,GAAA,EAAD,CACEzrB,OAAQg8G,EACR77G,QAAS+7G,EACT/6G,MAAM,uBACNmE,KAAK,gDACLqmB,eAAgB2wF,IAElB,mBAAC7wF,GAAA,EAAD,CACEzrB,OAAQm8G,EACRh8G,QAASk8G,EACTl7G,MAAM,uBACNmE,KAAK,gDACLqmB,eAAgB4wF,SCuKxB,IAAe39G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAGQ,CACL29G,gBAHqBC,EAAAA,EAAAA,IAA4B59G,MAFnCD,EAnP0B,IAUxC,IAVyC,OAC7CS,EAD6C,cAE7C4+C,EAF6C,qBAG7C8zD,EAH6C,wBAI7CF,EAJ6C,eAK7CzzD,EAL6C,mBAM7CgtD,EAN6C,QAO7ClrG,EAP6C,SAQ7CoR,EAR6C,eAS7CkrG,GACI,EACJ,OAAQv+D,GACN,KAAK2rD,EAAAA,GAAAA,QACH,OAAQ4S,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACE73G,IAAKtF,EACLkmB,OAAQlmB,EACRa,QAASA,EACToR,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACE3M,IAAKtF,EACLA,OAAQA,EACR++C,eAAgBA,EAChBl+C,QAASA,EACToR,SAAUA,GAAY,CACpBs4F,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA9yG,SAASmnD,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEt5C,IAAKtF,EACLA,OAAQA,EACR++C,eAAgBA,EAChBl+C,QAASA,EACToR,SAAUA,GAAY,CACpBs4F,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA9yG,SAASmnD,KAKnB,MAGF,KAAK2rD,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR++C,eAAgBA,EAChB9sC,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR++C,eAAgBA,EAChBgtD,mBAAoBA,EACpB95F,SAAUA,GAAY,CACpBs4F,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACA9yG,SAASmnD,GACX/9C,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR+rG,mBAAoBA,EACpBhtD,eAAgBA,EAChB9sC,SAAUA,GAAY,CACpBs4F,EAAAA,GAAAA,sBACA9yG,SAASmnD,GACX/9C,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR0yG,qBAAsBA,EACtBF,wBAAyBA,EACzBzzD,eAAgBA,EAChB9sC,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR++C,eAAgBA,EAChBgtD,mBAAoBA,EACpB95F,SAAUA,GAAY,CACpBs4F,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA9yG,SAASmnD,GACX/9C,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRyzG,WAAY70D,IAAkB2rD,EAAAA,GAAAA,mBAC9BmJ,eAAgBhB,EAChBF,wBAAyBA,EACzBzzD,eAAgBA,EAChB9sC,SAAUA,EACVpR,QAASA,IAIf,KAAK0pG,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAGf,KAAK0pG,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,EACTk+C,eAAgBA,IAGtB,KAAKwrD,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,EACTk+C,eAAgBA,IAGtB,KAAKwrD,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACR40G,UAAQ,EACR3iG,SAAUA,EACVpR,QAASA,EACTk+C,eAAgBA,EAChBgtD,mBAAoBA,IAI1B,KAAKxB,EAAAA,GAAAA,UACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAGf,KAAK0pG,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,IAGf,KAAK0pG,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEvqG,OAAQA,EACRiS,SAAUA,EACVpR,QAASA,SCtRbw8G,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,IAAAA,GAAAA,M,CAAAA,KAAAA,GAAAA,KAOZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW/rF,QAAQ,MAAO,IACnCorF,GAAKt7D,KAAKi8D,GACLP,GAASG,KAEdJ,GAAIz7D,KAAKi8D,GACJP,GAASK,IAEdR,GAAYv7D,KAAKi8D,IAAeT,GAAYx7D,KAAKi8D,GAC5CP,GAASI,WAEXJ,GAASE,QCMlB,MAAMv/D,GAA2B,CAC/B6/D,YAAa,GACbC,YAAa,GACbC,KAAM,GACNz/D,MAAO,GACP0/D,YAAa,GACbC,SAAU,GACVpC,SAAU,GACVz9D,MAAO,GACP/pB,MAAO,GACP6pF,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,GACZC,UAAW,EACXC,kBAAmB,IAGfC,GAAgD,CAACvgE,EAAOjzB,KAC5D,OAAQA,EAAOxoB,MACb,IAAK,iBACH,MAAO,IACFy7C,EACHu/D,YAAaxyF,EAAOkzB,QACpBmgE,WAAY,IACPpgE,EAAMogE,WACTb,iBAAa9jH,IAGnB,IAAK,iBACH,MAAO,IACFukD,EACHw/D,YAAazyF,EAAOkzB,QACpBmgE,WAAY,IACPpgE,EAAMogE,WACTZ,iBAAa/jH,IAGnB,IAAK,aACH,MAAO,IACFukD,EACHy/D,KAAM1yF,EAAOkzB,QACbmgE,WAAY,IACPpgE,EAAMogE,WACTX,UAAMhkH,IAGZ,IAAK,cACH,MAAO,IACFukD,EACHA,MAAOjzB,EAAOkzB,QACdmgE,WAAY,IACPpgE,EAAMogE,WACTpgE,WAAOvkD,IAGb,IAAK,gBACH,MAAO,IACFukD,EACH0/D,YAAa3yF,EAAOkzB,QAAQugE,KAC5BR,eAAgBjzF,EAAOkzB,QAAQwgE,YAC/BL,WAAY,IACPpgE,EAAMogE,WACTV,iBAAajkH,IAGnB,IAAK,iBACH,MAAO,IACFukD,EACH2/D,SAAU5yF,EAAOkzB,QACjBmgE,WAAY,IACPpgE,EAAMogE,WACTT,cAAUlkH,IAGhB,IAAK,iBACH,MAAO,IACFukD,EACHu9D,SAAUxwF,EAAOkzB,QACjBmgE,WAAY,IACPpgE,EAAMogE,WACT7C,cAAU9hH,IAGhB,IAAK,cACH,MAAO,IACFukD,EACHF,MAAO/yB,EAAOkzB,QACdmgE,WAAY,IACPpgE,EAAMogE,WACTtgE,WAAOrkD,IAGb,IAAK,cACH,MAAO,IACFukD,EACHjqB,MAAOhJ,EAAOkzB,QACdmgE,WAAY,IACPpgE,EAAMogE,WACTrqF,WAAOt6B,IAGb,IAAK,iBACH,MAAO,IAAKukD,EAAO4/D,SAAU7yF,EAAOkzB,SACtC,IAAK,mBACH,MAAO,IACFD,EACHs/D,WAAYvyF,EAAOkzB,QACnBmgE,WAAY,IACPpgE,EAAMogE,WACTd,gBAAY7jH,IAGlB,IAAK,mBACH,MAAO,IACFukD,EACH6/D,WAAY9yF,EAAOkzB,QACnBmgE,WAAY,IACPpgE,EAAMogE,WACTP,gBAAYpkH,IAGlB,IAAK,mBACH,MAAO,IACFukD,EACH8/D,OAAQ/yF,EAAOkzB,QACfmgE,WAAY,IACPpgE,EAAMogE,WACTN,YAAQrkH,IAGd,IAAK,gBACH,MAAO,IACFukD,EACH+/D,IAAKhzF,EAAOkzB,QACZmgE,WAAY,IACPpgE,EAAMogE,WACTL,SAAKtkH,IAGX,IAAK,uBACH,MAAO,IACFukD,EACHggE,eAAgBjzF,EAAOkzB,QACvBmgE,WAAY,IACPpgE,EAAMogE,WACTJ,oBAAgBvkH,IAGtB,IAAK,mBACH,MAAO,IACFukD,EACHigE,WAAYlzF,EAAOkzB,QACnBmgE,WAAY,IACPpgE,EAAMogE,WACTH,gBAAYxkH,IAGlB,IAAK,iBACH,MAAO,IAAKukD,EAAOkgE,SAAUnzF,EAAOkzB,SACtC,IAAK,wBACH,MAAO,IAAKD,EAAOmgE,gBAAiBpzF,EAAOkzB,SAC7C,IAAK,iBACH,OAAIlzB,EAAOkzB,QAAQghB,QACV,IACFjhB,KACAjzB,EAAOkzB,QACV+/D,eAAgBjzF,EAAOkzB,QAAQghB,SAG5B,IAAKjhB,KAAUjzB,EAAOkzB,SAC/B,IAAK,gBACH,MAAO,IACFD,EACHogE,WAAY,IACPpgE,EAAMogE,cACNrzF,EAAOkzB,UAGhB,IAAK,eACH,MAAO,IACFD,EACHqgE,UAAWtzF,EAAOkzB,SAEtB,IAAK,0BACH,MAAO,IACFD,EACHsgE,kBAAmBvzF,EAAOkzB,SAE9B,IAAK,aACH,MAAO,IACFP,IAEP,QACE,OAAOM,ICpOE,SAAS0gE,GACtB/0G,GACA,IADkCg1G,EAClC,uDAJuB,KAKvBrhH,EAAAA,EAAAA,KAAU,KACJiL,EAAAA,IAIJ1K,YAAW,MACTw+F,EAAAA,GAAAA,KAAQ,KACF1yF,EAAIpN,SACNoN,EAAIpN,QAAQ83B,aAGfsqF,KACF,CAACh1G,EAAKg1G,ICJX,MA2CA,IAAe//G,EAAAA,EAAAA,KA3Ce0S,IAC5B,MAAM,GACJxa,EADI,MAEJqT,EAFI,MAGJ4iB,EAHI,SAIJ6xF,EAJI,MAKJ11F,EALI,IAMJvf,EANI,YAOJib,EAPI,SAQJuN,EARI,SASJ/nB,EATI,SAUJhG,GACEkN,EACE6wC,EAAYj5B,GAAS6D,EACrBq1B,GAAgB/7C,EAAAA,EAAAA,GACpB,cACA8D,GAAS,UACT+e,GAAS,QACTi5B,GAAa,aACby8D,GAAY,aACZ,eAGF,OACE,0BAAK19G,UAAWkhD,GACd,6BACElhD,UAAU,eACVpK,GAAIA,EACJqT,MAAOA,GAAS,GAChBC,SAAUA,EACVwa,YAAaA,GAAemI,EAC5BoF,SAAUA,EACVxoB,IAAKA,GAEJvF,GAEF+9C,GAAarrD,GACZ,4BAAOwrD,QAASxrD,GAAKqrD,OCgK7B,IAAevjD,EAAAA,EAAAA,KA7LoB,IAQ7B,IAR8B,MAClCo/C,EADkC,UAElC6gE,EAFkC,UAGlCC,EAHkC,SAIlCC,EAJkC,YAKlCC,EALkC,YAMlC9rF,EANkC,SAOlCi3B,GACI,EAEJ,MAAMz2B,GAAWt3B,EAAAA,EAAAA,IAAyB,MAEpC6iH,GAAW7iH,EAAAA,EAAAA,IAAyB,MAEpC8iH,GAAmB9iH,EAAAA,EAAAA,IAA0B,OAEnDkB,EAAAA,EAAAA,KAAU,KACJ4hH,EAAiB3iH,SAChB2iH,EAAiB3iH,QAAQ4N,QAAU6zC,EAAM0/D,cAC5CwB,EAAiB3iH,QAAQ4N,MAAQ6zC,EAAM0/D,eAExC,CAAC1/D,EAAM0/D,cAEV,MAAM58G,GAAOC,EAAAA,EAAAA,KAEb29G,GAAuBhrF,GAEvB,MAAMyrF,GAAuB3+G,EAAAA,EAAAA,KAAa8F,IACxC6jD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS33C,EAAEwQ,OAAO3M,UACpD,CAACggD,IAEEi1D,GAAuB5+G,EAAAA,EAAAA,KAAa8F,IACxC6jD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS33C,EAAEwQ,OAAO3M,UACpD,CAACggD,IAEEk1D,GAAmB7+G,EAAAA,EAAAA,KAAa8F,IACpC6jD,EAAS,CAAE5nD,KAAM,aAAc07C,QAAS33C,EAAEwQ,OAAO3M,UAChD,CAACggD,IAEEm1D,GAAoB9+G,EAAAA,EAAAA,KAAa8F,IACrC6jD,EAAS,CAAE5nD,KAAM,cAAe07C,QAAS33C,EAAEwQ,OAAO3M,UACjD,CAACggD,IAEEo1D,GAAsB/+G,EAAAA,EAAAA,KAAa8F,IACvC6jD,EAAS,CAAE5nD,KAAM,gBAAiB07C,QAAS/qB,EAAYkT,MAAM64B,GAAYA,EAAQu/C,OAASl4G,EAAEwQ,OAAO3M,YAClG,CAAC+oB,EAAai3B,IAEXq1D,GAAuBh/G,EAAAA,EAAAA,KAAa8F,IACxC6jD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS33C,EAAEwQ,OAAO3M,UACpD,CAACggD,IAEEs1D,GAAuBj/G,EAAAA,EAAAA,KAAa8F,IACxC6jD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS33C,EAAEwQ,OAAO3M,UACpD,CAACggD,IAEEu1D,GAAoBl/G,EAAAA,EAAAA,KAAa8F,IACrC6jD,EAAS,CAAE5nD,KAAM,cAAe07C,QAAS33C,EAAEwQ,OAAO3M,UACjD,CAACggD,IAEE51B,GAAoB/zB,EAAAA,EAAAA,KAAa8F,IACrC,IAAI,MAAE6D,GAAU7D,EAAEwQ,OAClB3M,EAAS,IAAGA,EAAMonB,QAAQ,MAAO,MAC7B0tF,EAAS1iH,UACX0iH,EAAS1iH,QAAQ4N,MAAQA,GAE3BggD,EAAS,CAAE5nD,KAAM,cAAe07C,QAAS9zC,MACxC,CAACggD,IAEEw1D,GAAuBn/G,EAAAA,EAAAA,KAAa8F,IACxC6jD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS33C,EAAEwQ,OAAO3M,UACpD,CAACggD,KAEE,WAAEi0D,GAAepgE,EACvB,OACE,0BAAK98C,UAAU,gBACb,+BACG89G,EACC,8BACE,6BAAKl+G,EAAK,2BACV,mBAAC4jB,GAAA,EAAD,CACE/a,IAAK+pB,EACL3G,MAAOjsB,EAAK,sCACZsJ,SAAU+0G,EACVh1G,MAAO6zC,EAAMu/D,YACblrF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAWb,cAEpB,mBAAC74F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,sCACZsJ,SAAUg1G,EACVj1G,MAAO6zC,EAAMw/D,YACbnrF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAWZ,cAEpB,mBAAC94F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,kCACZsJ,SAAUi1G,EACVl1G,MAAO6zC,EAAMy/D,KACbprF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAWX,OAEpB,mBAAC/4F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,mCACZsJ,SAAUk1G,EACVn1G,MAAO6zC,EAAMA,MACb3rB,UAAU,OACVnJ,MAAOk1F,EAAWpgE,QAEpB,mBAAC,GAAD,CACEjxB,MAAOjsB,EAAK,0BACZ8jB,YAAa9jB,EAAK,0BAClBsJ,SAAUm1G,EACVp1G,MAAO6zC,EAAM0/D,YACbkB,SAAUpkH,SAAQ,GAClB1D,GAAG,mBACHoyB,MAAOk1F,EAAWV,YAClB/zG,IAAKu1G,EACL/sF,SAAU,GAETe,EAAYvyB,KAAI,QAAC,YAAE89G,EAAF,KAAel7F,EAAf,KAAqBi7F,GAAtB,SACf,6BACEr0G,MAAOq0G,EACPt9G,UAAU,cACVovD,SAAUkuD,IAASxgE,EAAM0/D,aAExBe,GAAel7F,OAKtB,mBAACmB,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,iCACZsJ,SAAUo1G,EACVr1G,MAAO6zC,EAAM2/D,SACbtrF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAWT,iBAGpBlkH,EACFslH,GAAYF,GAAaC,EACzB,6BAAKh+G,EAAK,iCACRrH,EACFslH,GACA,mBAACr6F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,uBACZsJ,SAAUq1G,EACVt1G,MAAO6zC,EAAMu9D,SACblpF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAW7C,WAGpBsD,GACA,mBAACn6F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,mCACZsJ,SAAUs1G,EACVv1G,MAAO6zC,EAAMF,MACbzrB,UAAU,QACVF,SAAU,EACVjJ,MAAOk1F,EAAWtgE,QAGpBghE,GACA,mBAACp6F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,8BACZsJ,SAAUmqB,EACVpqB,MAAO6zC,EAAMjqB,MACb1B,UAAU,MACVF,SAAU,EACVjJ,MAAOk1F,EAAWrqF,MAClBpqB,IAAKs1G,IAGT,mBAACpyF,GAAA,EAAD,CACEE,MAAOjsB,EAAK,uBACZouD,SAAUpuD,EAAK,2BACfgsB,QAAStyB,QAAQwjD,EAAMkgE,UACvB/rF,SAAU,EACV/nB,SAAUu1G,SCnJpB,IAAe/gH,EAAAA,EAAAA,KAxCgB,IAKzB,IAL0B,MAC9Bo/C,EAD8B,gBAE9B4hE,EAF8B,SAG9Bj4E,EAH8B,SAI9BwiB,GACI,EACJ,MAAMrpD,GAAOC,EAAAA,EAAAA,MAEbzD,EAAAA,EAAAA,KAAU,KACHsiH,GAAoBA,EAAgB3nH,SAAU+lD,EAAM4/D,UAGzDzzD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS2hE,EAAgB,GAAG9oH,OAC9D,CAAC8oH,EAAiB5hE,EAAM4/D,SAAUzzD,IAErC,MAAM01D,GAAuBr/G,EAAAA,EAAAA,KAAa2J,IACxCggD,EAAS,CAAE5nD,KAAM,iBAAkB07C,QAAS9zC,MAC3C,CAACggD,IAEEhkB,GAAUprC,EAAAA,EAAAA,KAAQ,IAAO6kH,EAAgBj/G,KAAI,QAAG7J,GAAIqT,EAAOhJ,MAAO4rB,EAApB,OAA2B2a,GAA5B,QAA0C,CAC3F3a,MAAAA,EACAmiC,UAAUznB,EAAAA,GAAAA,GAAeC,EAAQC,EAAU7mC,EAAKowB,MAChD/mB,MAAAA,OACI,CAACy1G,EAAiBj4E,EAAU7mC,EAAKowB,OAEvC,OACE,0BAAKhwB,UAAU,YACb,+BACE,4BAAIJ,EAAK,0BACT,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,mBACL4iB,QAASA,EACT/7B,SAAUy1G,EACVvvD,SAAUtS,EAAM4/D,gBCtD1B,IAAgB,KAAO,uBAAuB,YAAc,uBAAuB,mBAAmB,uBAAuB,gBAAkB,uBAAuB,KAAO,uBAAuB,iBAAiB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,oBAAsB,uBAAuB,aAAa,uBAAuB,UAAY,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,kBAAoB,uBAAuB,wBAAwB,uBAAuB,mBAAqB,uBAAuB,SAAW,uBAAuB,SAAW,uBAAuB,gBAAkB,uBAAuB,eAAiB,uBAAuB,eAAe,uBAAuB,YAAc,uBAAuB,SAAW,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,gCAAgC,uBAAuB,0BAA4B,uBAAuB,+BAA+B,uBAAuB,yBAA2B,uBAAuB,eAAe,uBAAuB,YAAc,wBCgOtwC,IAAeh/G,EAAAA,EAAAA,KAjLgB,IAezB,YAf0B,KAC9BQ,EAD8B,QAE9B0gH,EAF8B,OAG9BC,EAH8B,eAI9BC,EAJ8B,aAK9BC,EAL8B,SAM9Bt4E,EAN8B,WAO9Bu4E,EAP8B,cAQ9BC,EAR8B,SAS9Bh2D,EAT8B,YAU9Bi2D,EAV8B,UAW9B/B,EAX8B,YAY9BW,EAZ8B,mBAa9BqB,EAb8B,iBAc9BC,GACI,EACJ,MAAM,eAAEC,IAAmBjgH,EAAAA,EAAAA,MAErBQ,GAAOC,EAAAA,EAAAA,KACPy/G,EAAgBhmH,QAAQ2vD,IAExB,MACJ5wD,EADI,MACG4H,EADH,KACUmE,EADV,YACgBm7G,EADhB,kBAC6BC,EAD7B,oBACgDC,EADhD,aACqEC,GACvEd,GAAW,IACT,cACJe,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJx9F,EAJI,MAKJwQ,EALI,eAMJitF,GACGf,GAAgB,GAEfgB,GAAW5lH,EAAAA,EAAAA,IAAS6lH,EAAAA,EAAAA,IAAmB3nH,IAEvC4nH,GAAkB3gH,EAAAA,EAAAA,KAAa4gH,IACnCj3D,EAAU,CAAE5nD,KAAM,eAAgB07C,QAAS2iE,EAAev8G,KAAK6E,IAAIk4G,EAAMR,GAAgBQ,MACxF,CAACj3D,EAAUy2D,IAERS,GAA2B7gH,EAAAA,EAAAA,KAAY,KAC3C+/G,EAAe,CAAEe,KAAMhB,MAAAA,GAAAA,EAAkBroH,OAASspH,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,gBAC7E,CAACjB,MAAAA,OAAD,EAACA,EAAkBroH,OAAQsoH,IAExBiB,GAA6BhhH,EAAAA,EAAAA,KAAY,KAC7C+/G,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,iBACtB,CAAChB,IAEEkB,GAA4BjhH,EAAAA,EAAAA,KAAY,KAC5C+/G,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,aACtB,CAAChB,IA2DJ,OACE,0BAAKr/G,UAAW7J,GAAAA,MACd,0BAAK6J,UAAW7J,GAAAA,aACb4pH,GAAY,0BAAK//G,UAAW7J,GAAAA,gBAAwBtB,IAAKkrH,EAAU3uG,IAAI,MACtE2uG,GAAY1nH,GACZ,mBAACo/E,GAAA,EAAD,CACEn8E,MAAK,UAAEjD,EAAM6E,kBAAR,aAAE,EAAkB5B,MACzBK,OAAM,UAAEtD,EAAM6E,kBAAR,aAAE,EAAkBvB,OAC1BqE,UAAW7J,GAAAA,gBACXqqH,kBAAgB,IAGpB,0BAAKxgH,UAAW7J,GAAAA,MACd,yBAAI6J,UAAW7J,GAAAA,eAAuB8J,GACrCmE,GAAQ,0BAAKpE,UAAW7J,GAAAA,sBAA6BmK,EAAAA,EAAAA,GAAW8D,EAAM,CAAC,KAAM,QAAS,aAG3F,0BAAKpE,UAAW7J,GAAAA,WACb0oH,GAAUA,EAAOp/G,KAAKymF,GACrBu6B,GAAkB7gH,EAAKowB,KAAMk2D,EAAKr6D,MAAOq6D,EAAK1/C,OAAQC,KAEvDq4E,GAAkBA,EAAer/G,KAAKymF,GACrCu6B,GAAkB7gH,EAAKowB,KAAMk2D,EAAKr6D,MAAOq6D,EAAK1/C,OAAQC,KAEvDg5E,GAAuBA,EAAoB1oH,OAAS,GA/EvD,sCACE,0BAAKiJ,UAAW7J,GAAAA,eACd,0BAAK6J,UAAW7J,GAAAA,oBACb8J,GAEH,+BACGsmC,EAAAA,GAAAA,GAAe42E,EAAY12E,EAAU7mC,EAAKowB,QAG/C,0BAAKhwB,UAAW7J,GAAAA,UACbspH,EAAqBhgH,KAAKihH,GACzB,0BACEh9G,IAAKg9G,EACL1gH,WAAWmF,EAAAA,EAAAA,GAAehP,GAAAA,SAAiBuqH,IAAQvD,GAAahnH,GAAAA,iBAChEkK,QAAS4oD,EAAW,IAAMg3D,EAAgBS,IAAQvD,EAAY,EAAIuD,QAAOnoH,IAExEguC,EAAAA,GAAAA,GAAem6E,EAAKj6E,EAAU7mC,EAAKowB,MAAM,aAgEhCz3B,IAAfymH,GACCyB,GAAkB7gH,EAAKowB,KAAMpwB,EAAK,wBAAyBo/G,EAAYv4E,GAAU,IAGrF,0BAAKzmC,UAAW7J,GAAAA,aACbwqH,GAAmB,CAClB1gH,MAAO0/G,IAAiBP,MAAAA,OAAJ,EAAIA,EAAmB,GAAGn/G,OAC9C4rB,MAAOjsB,EAAK,yBACZqD,KAAM,OACN5C,QAASi/G,EAAgBa,OAA2B5nH,IAErDqnH,GAAmBe,GAAmB,CACrC1gH,MAAO2/G,EACP/zF,MAAOjsB,EAAK,2BACZghH,YAAYz7G,EAAAA,EAAAA,GAAehP,GAAAA,SAAiBA,GAAOypH,EAAgBzkD,mBAEnE2iD,IAAgBwB,IAAkBqB,GAAmB,CACrD1gH,MAAO4/G,EACPh0F,MAAOjsB,EAAK,0BACZqD,KAAM,WACN5C,QAASi/G,EAAgBgB,OAA6B/nH,IAEvD8pB,GAAQs+F,GAAmB,CAC1B1gH,MAAOoiB,EACPwJ,MAAOjsB,EAAK,uBACZqD,KAAM,SAEP4vB,GAAS8tF,GAAmB,CAC3B1gH,MAAO4yB,EACPhH,MAAOjsB,EAAK,8BACZqD,KAAM,WAENk8G,IAAuBG,IAAkBqB,GAAmB,CAC5D1gH,MAAO6/G,EACPj0F,MAAOjsB,EAAK,iCACZqD,KAAM,QACN5C,QAASi/G,EAAgBiB,OAA4BhoH,IAEtDgnH,IA5EY51G,EA4Ea61G,EA1E5B,mBAAC7zF,GAAA,EAAD,CACEE,MArBN,SAAuBliB,EAAa+Q,GAClC,MACMmmG,EADajhH,EAAK,iCAAkC1B,MAAAA,OAAnC,EAAmCA,EAAM+B,OAC7Bo4C,MAAM,KACzC,OACE,sCACGwoE,EAAgB,GACjB,mBAAC7zE,GAAA,EAAD,CACErjC,IAAKA,EACLvF,KAAK,GACLsW,MAAOA,GAENmmG,EAAgB,IAElBA,EAAgBzgF,MAAM,IAQhB0gF,CAAcn3G,EAAK/J,EAAK8a,OAC/B2H,KAAK,eACLuJ,QAAStyB,QAAQ2lH,GACjBj/G,UAAW7J,GAAAA,YACX86B,SAAU,EACVlF,QAASmzF,OARf,IAAmBv1G,KAoFrB,SAAS82G,GACP1lD,EAAgC96D,EAAegJ,EAAew9B,GAC9D,IADgFs6E,EAChF,wDACA,OACE,0BAAK/gH,WAAWmF,EAAAA,EAAAA,GAAehP,GAAAA,cAAsB4qH,GAAQ5qH,GAAAA,oBAC3D,0BAAK6J,UAAW7J,GAAAA,oBACb8J,GAEH,+BACGsmC,EAAAA,GAAAA,GAAet9B,EAAOw9B,EAAUs0B,KAMzC,SAAS4lD,GAAT,GAYG,IAZyB,MAC1B1gH,EAD0B,MAE1B4rB,EAF0B,KAG1B5oB,EAH0B,WAI1B29G,EAJ0B,QAK1BvgH,GAOC,EACD,OACE,mBAAC8jB,GAAA,EAAD,CACEmkC,UAAWhvD,QAAQ2G,GAAS4rB,IAAU5rB,GACtCgD,KAAMA,EACNolD,UAAWhoD,EACXA,QAASA,GAERugH,GAAc,wBAAG5gH,UAAW4gH,IAC7B,0BAAK5gH,UAAW7J,GAAAA,2BACb8J,GAAS4rB,GAEX5rB,GAAS4rB,IAAU5rB,GAClB,wBAAGD,UAAW7J,GAAAA,0BACX01B,ICpQX,MAmCA,IAAenuB,EAAAA,EAAAA,KA3BoB,IAAgC,IAA/B,MAAEuL,EAAF,MAAS+e,EAAT,SAAgB9e,GAAe,EACjE,MAAMtJ,GAAOC,EAAAA,EAAAA,KAEPmqC,GAAe1qC,EAAAA,EAAAA,KAAa8F,IAChC,MAAMu+D,EAAWv+D,EAAEwQ,OAAO3M,MAEtBA,EAAM+3G,SAAS,MAAQ/3G,EAAMlS,OAAS4sE,EAAS5sE,OACjDmS,EAASy6D,GAETz6D,ECzBC,SAA0B26E,GAE/B,MAAMt4C,GADNs4C,EAAQA,EAAMxzD,QAAQ,SAAU,IAAI+P,MAAM,EAAG,IACzBoL,MAAM,WAO1B,OANID,MAAAA,GAAAA,EAAQ,IAAMhb,OAAOgb,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,MAAAA,GAAAA,EAAQ,IAA0B,IAApBA,EAAM,GAAGx0C,SAAiBw0C,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAM17B,KAAK,KAAO,GDgBpBoxG,CAAiB77G,EAAEwQ,OAAO3M,UAEpC,CAACC,EAAUD,IAEd,OACE,mBAACua,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,yBACZsJ,SAAU8gC,EACV/gC,MAAOA,EACP+e,MAAOA,EACPmJ,UAAU,UACVF,SAAU,EACVkN,UA7BmB,EA8BnBuiB,2BAAyB,O,0HE8B/B,IAAehjD,EAAAA,EAAAA,KA1CkB,IAAgC,IAA/B,MAAEuL,EAAF,MAAS+e,EAAT,SAAgB9e,GAAe,EAC/D,MAAMtJ,GAAOC,EAAAA,EAAAA,KAEPqhH,GAAgBhmH,EAAAA,EAAAA,IAAyB,MAE/CsiH,GAAuB0D,GAEvB,MAAOC,EAAUC,IAAe38G,EAAAA,EAAAA,IAAiBo3G,GAASE,UAC1D3/G,EAAAA,EAAAA,KAAU,KACR,MAAMilH,EAAclF,GAAelzG,GACnCm4G,EAAYC,KAEX,IAEH,MAAMr3E,GAAe1qC,EAAAA,EAAAA,KAAa8F,IAChC,MAAMu+D,ED7BH,SAA0BkgB,GAE/B,MAAMt4C,GADNs4C,EAAQA,EAAMxzD,QAAQ,SAAU,KACZmb,MAAM,WAC1B,OAAOD,EAAQA,EAAM17B,KAAK,KAAO,GC0BdyxG,CAAiBl8G,EAAEwQ,OAAO3M,OACrCo4G,EAAclF,GAAe/2G,EAAEwQ,OAAO3M,OAC5Cm4G,EAAYC,GACZn4G,EAASy6D,KACR,CAACz6D,IAEEq4G,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKtF,GAASI,WACZ,OAAO,0BAAKpnH,IAAK2sH,GAAoBpwG,IAAI,KAC3C,KAAKyqG,GAASG,KACZ,OAAO,0BAAKnnH,IAAK4sH,GAAcrwG,IAAI,KACrC,KAAKyqG,GAASK,IACZ,OAAO,0BAAKrnH,IAAK6sH,GAAatwG,IAAI,KACpC,QACE,QAhCauwG,CAAYR,GAE7B,OACE,0BAAKnhH,UAAU,aACb,mBAACwjB,GAAA,EAAD,CACE/a,IAAKy4G,EACLr1F,MAAOjsB,EAAK,qBACZsJ,SAAU8gC,EACV/gC,MAAOA,EACPkoB,UAAU,UACVnxB,UAAWmhH,EAAW,kBAAoB,GAC1Cn5F,MAAOA,EACPiJ,SAAU,EACVkN,UA1CuB,GA2CvBuiB,2BAAyB,IAE3B,2BAAM1gD,UAAU,eAAeuhH,OC2GrC,IAAe7jH,EAAAA,EAAAA,KA9ImB,IAQ5B,IAR6B,MACjCo/C,EADiC,mBAEjC8kE,EAFiC,mBAGjCC,EAHiC,YAIjCC,EAJiC,QAKjCC,EALiC,YAMjC/vF,EANiC,SAOjCi3B,GACI,EAEJ,MAAM+0D,GAAmB9iH,EAAAA,EAAAA,IAA0B,OAEnDkB,EAAAA,EAAAA,KAAU,KACJ4hH,EAAiB3iH,SAChB2iH,EAAiB3iH,QAAQ4N,QAAU6zC,EAAMggE,iBAC5CkB,EAAiB3iH,QAAQ4N,MAAQ6zC,EAAMggE,kBAExC,CAAChgE,EAAMggE,iBAEV,MAAMkF,GAAyB1iH,EAAAA,EAAAA,KAAa2J,IAC1CggD,EAAS,CAAE5nD,KAAM,mBAAoB07C,QAAS9zC,MAC7C,CAACggD,IAEEg5D,GAAyB3iH,EAAAA,EAAAA,KAAa8F,IAC1C6jD,EAAS,CAAE5nD,KAAM,mBAAoB07C,QAAS33C,EAAEwQ,OAAO3M,MAAMi5G,kBAC5D,CAACj5D,IAEEk5D,GAAqB7iH,EAAAA,EAAAA,KAAa2J,IACtCggD,EAAS,CAAE5nD,KAAM,mBAAoB07C,QAAS9zC,MAC7C,CAACggD,IAEEm5D,GAAkB9iH,EAAAA,EAAAA,KAAa8F,IACnC,MAAMu+D,EAAWv+D,EAAEwQ,OAAO3M,MAAMonB,QAAQ,UAAW,IACnD44B,EAAS,CAAE5nD,KAAM,gBAAiB07C,QAAS4mB,MAC1C,CAAC1a,IAEEo1D,GAAsB/+G,EAAAA,EAAAA,KAAa8F,IACvC6jD,EAAS,CAAE5nD,KAAM,uBAAwB07C,QAAS33C,EAAEwQ,OAAO3M,UAC1D,CAACggD,IAEEo5D,GAA8B/iH,EAAAA,EAAAA,KAAa8F,IAC/C6jD,EAAS,CAAE5nD,KAAM,mBAAoB07C,QAAS33C,EAAEwQ,OAAO3M,UACtD,CAACggD,IAEEq5D,GAA8BhjH,EAAAA,EAAAA,KAAa8F,IAC/C6jD,EAAS,CAAE5nD,KAAM,wBAAyB07C,QAAS33C,EAAEwQ,OAAO3M,UAC3D,CAACggD,IAEErpD,GAAOC,EAAAA,EAAAA,MAEP,WAAEq9G,EAAa,IAAOpgE,EAE5B,OACE,0BAAK98C,UAAU,eACb,+BACE,6BAAKJ,EAAK,qBACV,mBAAC,GAAD,CACEsJ,SAAU84G,EACV/4G,MAAO6zC,EAAMs/D,WACbp0F,MAAOk1F,EAAWd,aAElByF,GACA,mBAACr+F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,8CACZsJ,SAAU+4G,EACVh5G,MAAO6zC,EAAM6/D,WACbxrF,UAAU,OACVF,SAAU,EACVjJ,MAAOk1F,EAAWP,aAGtB,8BAAS38G,UAAU,iBACjB,mBAAC,GAAD,CACEiJ,MAAO6zC,EAAM8/D,OACb1zG,SAAUi5G,EACVn6F,MAAOk1F,EAAWN,SAEpB,mBAACp5F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,yBACZsJ,SAAUk5G,EACVn5G,MAAO6zC,EAAM+/D,IACb1rF,UAAU,UACVgN,UAAW,EACXlN,SAAU,EACVjJ,MAAOk1F,EAAWL,IAClBn8D,2BAAyB,KAG3BohE,GAAeC,EACf,6BAAKniH,EAAK,+BACRrH,EACFupH,GACA,mBAAC,GAAD,CACEj2F,MAAOjsB,EAAK,0BACZ8jB,YAAa9jB,EAAK,0BAClBsJ,SAAUm1G,EACVp1G,MAAO6zC,EAAMggE,eACbY,SAAUpkH,SAAQ,GAClB1D,GAAG,kBACHoyB,MAAOk1F,EAAWJ,eAClB7rF,SAAU,EACVxoB,IAAKu1G,GAGHhsF,EAAYvyB,KAAI,QAAC,YAAE89G,EAAF,KAAel7F,GAAhB,SACd,6BACEpZ,MAAOs0G,EACPv9G,UAAU,cACVovD,SAAUmuD,IAAgBzgE,EAAMggE,gBAE/BS,GAAel7F,OAMxB0/F,GACA,mBAACv+F,GAAA,EAAD,CACEqI,MAAOjsB,EAAK,iCACZsJ,SAAUm5G,EACVp5G,MAAO6zC,EAAMigE,WACb5rF,UAAU,OACVF,SAAU,EACVkN,UAAW,GACXnW,MAAOk1F,EAAWH,aAGtB,mBAACpxF,GAAA,EAAD,CACEE,MAAOjsB,EAAK,qCACZgsB,UAASg2F,GAAqB9kE,EAAMmgE,gBACpChsF,SAAU,EACV/nB,SAAUo5G,EACV54G,UAAWk4G,IAEb,wBAAG5hH,UAAU,eACVJ,EAAKgiH,EAAqB,gCAAkC,2BCjGvE,IAAelkH,EAAAA,EAAAA,KA3CsB,IAAkC,IAAjC,IAAEiM,EAAF,WAAO44G,EAAP,QAAmBtjH,GAAc,EACrE,MAAM,iBAAE21B,IAAqBx1B,EAAAA,EAAAA,MAEvBQ,GAAOC,EAAAA,EAAAA,KAEPm5B,GAAgB15B,EAAAA,EAAAA,KAAasY,IACjC,IACE,MAAMuf,EAAOsB,KAAKQ,MAAMrhB,EAAMuf,OACxB,UAAEX,EAAF,UAAaC,GAAcU,EAEjC,GAAkB,yBAAdX,EACF,OAGF,IAAK+rF,EAAY,CACf,MAAM5rF,EAAUC,EAAAA,GAAkBH,EAAUI,UAC5CjC,EAAiB,CAAEjrB,IAAKgtB,IAG1B13B,IACA,MAAOtH,OAGR,CAACsH,EAASsjH,EAAY3tF,IAOzB,OALAx4B,EAAAA,EAAAA,KAAU,KACRM,OAAOsI,iBAAiB,UAAWg0B,GAC5B,IAAMt8B,OAAOuI,oBAAoB,UAAW+zB,KAClD,CAACA,IAGF,0BAAKh5B,UAAU,kBACb,6BACEnL,IAAK8U,EACL1J,MAAOL,EAAK,kCACZ67B,MAAM,UACND,QAAQ,gFACRx7B,UAAU,gCCHlB,IAAetC,EAAAA,EAAAA,KAtC+B,IAKxC,IALyC,MAC7Co/C,EAD6C,iBAE7CsiE,EAF6C,SAG7Cn2D,EAH6C,eAI7Cu5D,GACI,EACJ,MAAM5iH,GAAOC,EAAAA,EAAAA,KAEPolC,GAAUprC,EAAAA,EAAAA,KAAQ,IACfulH,MAAAA,GAAAA,EAAkBroH,OACrBqoH,EAAiB3/G,KAAI,QAAC,GAAE7J,EAAF,MAAMqK,GAAP,QAAoB,CAAE4rB,MAAO5rB,EAAOgJ,MAAOrT,MAChEqiD,GAAAA,GACH,CAACmnE,IAEEl2G,GAAW5J,EAAAA,EAAAA,KAAa2J,IAC5BggD,EAAS,CAAE5nD,KAAM,0BAA2B07C,QAAS9zC,MACpD,CAACggD,IAEJ,OACE,0BAAKjpD,UAAU,eACb,+BACE,6BAAKJ,EAAK,qBAEV,mBAACuvD,GAAA,EAAD,CACE9sC,KAAK,oBACL4iB,QAASA,EACTmqB,SAAUtS,EAAMsgE,kBAChBl0G,SAAUA,IAGZ,mBAAChJ,EAAA,EAAD,CAAQE,QAAM,EAACC,QAASmiH,GACrB5iH,EAAK,sCCahB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IAAuB,MAC/D,MAAO,CACLoqB,MAAK,UAAEpqB,EAAO02B,QAAQtM,aAAjB,aAAE,EAAsBxxB,QAC7BisH,aAAc7kH,EAAO6lE,cAAc9mB,KACnCyiE,iBAAkBxhH,EAAO02B,QAAQ8qF,oBAJjBzhH,EAtC+B,IAO7C,IAP8C,SAClD0S,EADkD,MAElD2X,EAFkD,MAGlD80B,EAHkD,iBAIlDsiE,EAJkD,aAKlDqD,EALkD,iBAMlDC,GACI,EACJ,MAAM,kBAAEC,IAAsBvjH,EAAAA,EAAAA,MAExBQ,GAAOC,EAAAA,EAAAA,MACNmiE,EAAoBC,IAAyBx9D,EAAAA,EAAAA,KAAS,GACvDm+G,GAAW/oH,EAAAA,EAAAA,KAAQ,KAAM,MAC7B,OAAOulH,MAAAA,GAAAA,EAAkBroH,QAAU+lD,EAAMsgE,kBAAlC,UACHgC,EAAiBl6E,MAAK,QAAC,GAAEtvC,GAAH,SAAYA,IAAOknD,EAAMsgE,4BAD5C,aACH,EAAmEn9G,WACnE1H,IACH,CAAC6mH,EAAkBtiE,EAAMsgE,oBAE5B,OACE,0BAAKp9G,UAAU,eACb,mBAACoiE,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBN,IAEzC,mBAACO,GAAA,EAAD,CACEv6C,MAAOA,EAAQpoB,EAAKooB,QAASzvB,EAC7BokD,KAAM8lE,EACNvlF,YAAat9B,EAAK,6BAA8BgjH,GAChDl/F,YAAa9jB,EAAK,YAClBiiE,WAAY8gD,EACZE,kBAAkB,EAClBrgD,iBAAkBnyD,EAClBiyD,kBAAmBN,EACnBS,2BAA4BR,EAC5B6gD,cAAeJ,SCtBjBK,GAAmB,SACnBC,GAAkB,cAClBC,GAAsB,IAAI94D,IAAI,CAAC44D,GAAkBC,KA2hBvD,IAAetlH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJwiH,EADI,gBAEJ1B,EAFI,UAGJwE,EAHI,mBAIJtB,EAJI,QAKJhD,EALI,iBAMJuE,EANI,eAOJC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJt7F,EAVI,kBAWJu7F,EAXI,aAYJC,EAZI,UAaJC,EAbI,kBAcJC,EAdI,uBAeJC,EAfI,iBAgBJvE,EAhBI,kBAiBJwE,EAjBI,gBAkBJC,GACEjmH,EAAO02B,QAELp2B,EAAOslH,GAAgB,WAAYA,GAAerlH,EAAAA,EAAAA,IAAWP,EAAQ4lH,EAAaplH,aAAU7F,EAC5FurH,EAAkBxqH,QAAQslH,KAAawE,IAAmBH,GAAoBntB,IAAIstB,MAClF,mBAAEvB,EAAF,YAAsBC,EAAtB,QAAmCC,GAAasB,GAAgB,IAChE,gBACJU,EADI,2BAEJC,EAFI,iBAGJC,EAHI,iBAIJC,EAJI,0BAKJC,EALI,0BAMJC,EANI,SAOJ39E,EAPI,OAQJo4E,GACGsE,GAAoB,GAEzB,MAAO,CACL/C,KAAAA,EACAliH,KAAAA,EACAwgH,gBAAAA,EACAwE,UAAAA,EACAtB,mBAAAA,EACAwB,eAAAA,EACAE,gBAAAA,EACAS,gBAAAA,EACAC,2BAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,0BAAAA,EACAC,0BAAAA,EACA39E,SAAAA,EACAo4E,OAAAA,EACAiF,gBAAAA,EACAlF,QAAAA,EACAiD,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA/5F,MAAAA,EACAu7F,kBAAAA,EACAvxF,YAAap0B,EAAOo0B,YAAYqyF,QAChCZ,UAAAA,EACAtE,mBAAoB7lH,QAAQolH,MAAAA,OAAD,EAACA,EAAiB3nH,QAC7CutH,iBAAkBX,MAAAA,OAAF,EAAEA,EAAwB3f,MAC1CugB,SAAUb,MAAAA,OAAF,EAAEA,EAAmB9tH,GAC7BwpH,iBAAAA,EACAoF,mBAAoBZ,MAAAA,OAAF,EAAEA,EAAmBa,WACvCZ,gBAAAA,KAnEclmH,EApf+C,IAiC7D,IAjC8D,OAClEmB,EADkE,QAElEG,EAFkE,KAGlEmhH,EAHkE,KAIlEliH,EAJkE,gBAKlEwgH,EALkE,UAMlEwE,EANkE,mBAOlEtB,EAPkE,gBAQlEmC,EARkE,2BASlEC,EATkE,iBAUlEC,EAVkE,iBAWlEC,EAXkE,0BAYlEC,EAZkE,0BAalEC,EAbkE,SAclE39E,EAdkE,gBAelE68E,EAfkE,gBAgBlEQ,EAhBkE,QAiBlElF,EAjBkE,eAkBlEwE,EAlBkE,OAmBlEvE,EAnBkE,mBAoBlEgD,EApBkE,YAqBlEC,EArBkE,QAsBlEC,EAtBkE,kBAuBlEwB,EAvBkE,MAwBlEv7F,EAxBkE,YAyBlEgK,EAzBkE,mBA0BlEmtF,EA1BkE,UA2BlEsE,EA3BkE,iBA4BlEa,EA5BkE,SA6BlEC,EA7BkE,iBA8BlEnF,EA9BkE,mBA+BlEoF,EA/BkE,gBAgClEX,GACI,EACJ,MAAM,iBACJa,EADI,sBAEJC,EAFI,gBAGJC,EAHI,eAIJvF,EAJI,oBAKJwF,EALI,kBAMJlC,EANI,wBAOJmC,IACE1lH,EAAAA,EAAAA,MAEEQ,GAAOC,EAAAA,EAAAA,MAEN0oB,EAAaC,EAAWC,IAAcxmB,EAAAA,EAAAA,MACtC8iH,EAAcC,KdsHdt6C,EAAAA,GAAAA,GAAW2yC,GAAS7gE,KcrHpBnD,GAAWqsD,KAAgBjhG,EAAAA,EAAAA,KAAS,IACpCw6G,GAAegG,KAAoBxgH,EAAAA,EAAAA,KAAS,IAC5CygH,GAAeC,KAAoB1gH,EAAAA,EAAAA,IAAS,IAE7C2gH,GAAkBhF,IAASC,EAAAA,GAAAA,eAE3BgF,IAAU/lH,EAAAA,EAAAA,KAAagmH,IAC3BjG,EAAe,CAAEe,KAAMkF,MACtB,CAACjG,KAEJjjH,EAAAA,EAAAA,KAAU,KACJ0C,IACFqmH,GAAiB,IACjBT,IACAl8F,OAED,CAAC1pB,EAAQ4lH,EAAkBl8F,KAG9BpsB,EAAAA,EAAAA,KAAU,MACH0C,GAAUypB,GACbE,MAED,CAACA,EAAYF,EAAazpB,KAE7B1C,EAAAA,EAAAA,KAAU,WACK7D,IAAT6nH,GAAsBp4F,IACxB09E,IAAa,KAEd,CAAC0a,EAAMp4F,KAEV5rB,EAAAA,EAAAA,KAAU,KACJ4rB,MAAAA,GAAAA,EAAO65E,OACTmjB,GAAgB,CACd3jH,KAAM,gBACN07C,QAAS,CACP,CAAC/0B,EAAM65E,OAAQ75E,EAAMxxB,aAI1B,CAACwxB,EAAOg9F,MAEX5oH,EAAAA,EAAAA,KAAU,KACR,GAAI8mH,EAAW,CACb,MACE7gG,KAAMg4F,EADF,MACYxnF,EADZ,MACmB+pB,EADnB,gBAC0BijE,GAC5BqD,GACE,YACJ1G,KAAgB+I,GACd1F,GAAmB,GACjB2F,EAAkBhJ,GAAexqF,EAAYkT,MAAK,QAAC,KAAEo4E,GAAH,SAAcA,IAASd,KAAce,YAC7FyH,GAAgB,CACd3jH,KAAM,iBACN07C,QAAS,CACPs9D,SAAAA,EACAxnF,MAAOA,GAA6B,MAApBA,EAAM4yF,OAAO,GACxB,IAAG5yF,IACJA,EACJ+pB,MAAAA,KACI4oE,GAAmB,CACrBznD,QAASynD,EACThJ,YAAAA,KACG+I,SAKV,CAACrC,EAAW8B,GAAiBhzF,KAEhC51B,EAAAA,EAAAA,KAAU,KACJgjH,MAAAA,GAAAA,EAAkBroH,QACpBiuH,GAAgB,CACd3jH,KAAM,0BACN07C,QAASqiE,EAAiB,GAAGxpH,OAGhC,CAACovH,GAAiB5F,IAErB,MAAMsG,IAAwBpmH,EAAAA,EAAAA,KAAY,KACxCqjH,MACC,CAACA,IAEE3D,IAAanlH,EAAAA,EAAAA,KAAQ,IACrBumH,IAASC,EAAAA,GAAAA,SACJ,EAicb,WAKE,IAJAxB,EAIA,uDAJkB,GAClBH,EAGA,uCAFAiH,EAEA,uCADAxI,EACA,uCACA,MAAM2B,EAAiBJ,EACnBkH,GAAkBlH,EAAiBiH,GACnC,GACJ,IAAIvrD,EAAQ+iD,EACZ,MAAM0I,EAAchH,EAAOxtE,OAAOytE,GAAkB,IAIpD,OAHA1kD,EAAQyrD,EAAY56E,QAAO,CAACC,EAAK46E,IACxB56E,EAAM46E,EAAIt/E,QAChB4zB,GACIA,EA5cE2rD,CAAclH,EAAQH,EAAiBqG,EAAarI,SAAUqI,EAAa5H,YACjF,CAACiD,EAAMvB,EAAQH,EAAiBqG,EAAarI,SAAUqI,EAAa5H,YAEjE4B,IAAellH,EAAAA,EAAAA,KAAQ,KAC3B,GAAIumH,IAASC,EAAAA,GAAAA,SAGb,OAwcJ,SAAyBvjE,EAAkB4hE,EAA+CkB,GACxF,MAAMoG,EfloBD,SAA4B5J,GACjC,MAAM+E,EAAWhF,GAAeC,GAChC,OAAON,GAAMqF,IAAuB,GegoBf8E,CAAmBnpE,EAAMs/D,YACxCuD,EAAgBqG,GAAgBlpE,EAAMs/D,WAAc,GAAE4J,MAAiBlpE,EAAMs/D,WAAWh8E,OAAO,UAAO7nC,EACtGsnH,EAAkB/iE,EAAMu/D,YACzB,GAAEv/D,EAAMu/D,gBAAgBv/D,EAAMy/D,SAASz/D,EAAM0/D,mBAC9CjkH,GACE,MAAEs6B,EAAOwnF,SAAUh4F,GAASy6B,EAC5B6oE,EAAiBjH,EAAkBwH,GAAmBxH,EAAiB5hE,EAAM4/D,eAAYnkH,EAE/F,MAAO,CACLonH,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAx9F,KAAAA,EACAwQ,MAAAA,EACAitF,eAPqB6F,MAAAA,OAAH,EAAGA,EAAgB1lH,OAhd9BkmH,CAAgBpB,EAAcrG,EAAiB0E,GAAkB,MACvE,CAAChD,EAAM2E,EAAcrG,EAAiB0E,IAEnCgD,IAAqB9mH,EAAAA,EAAAA,KAAY,KACrC+lH,GAAQhF,EAAAA,GAAAA,eACP,CAACgF,KA+GEgB,IAAkB/mH,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAE09G,GAAa+H,EACfuB,EAqWV,SAAwBvB,GACtB,MAAM,YACJ1I,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJz/D,EAJI,YAKJ0/D,EALI,SAMJC,EACApC,SAAUh4F,EAPN,MAQJwQ,EARI,MASJ+pB,GACEmoE,EAWJ,MAAO,CACL1iG,KAAAA,EACAwQ,MAAAA,EACA+pB,MAAAA,EACAijE,gBAbsB,CACtBxD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAz/D,MAAAA,EACA0/D,YAAAA,EACAC,SAAAA,IAxXoB8J,CAAexB,GACnCJ,EAAsB,CAAE2B,YAAAA,EAAatJ,SAAAA,MACpC,CAAC2H,EAAuBI,IAErByB,IAAkBlnH,EAAAA,EAAAA,KAAY,KAClC,MAAMmnH,EA8XV,SAAwB1B,GACtB,MAAM,WACJ3I,EADI,WACQO,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnDgI,GACG2B,EAAaC,GAAc/J,EAAOvkE,MAAM,KAW/C,MAAO,CACLlhB,KAXW,CACXilF,WAAAA,EACAO,WAAAA,EACA+J,YAAAA,EACAC,WAAAA,EACA9J,IAAAA,EACA9+C,QAAS++C,EACT8J,IAAK7J,IA1Ye8J,CAAe9B,GACnCF,EAAoB,CAClB4B,YAAAA,MAED,CAAC5B,EAAqBE,IAEnB+B,IAAWxnH,EAAAA,EAAAA,KAAY,KAC3BslH,EAAgB,CACdmC,iBAAkBhC,EAAarI,SAC/BO,gBAAiB8H,EAAa9H,gBAC9BG,kBAAmB2H,EAAa3H,kBAChCD,UAAW4H,EAAa5H,cAEzB,CAACyH,EAAiBG,IAEfnmC,IAAoBt/E,EAAAA,EAAAA,KAAY,KACpC,OAAQ8gH,GACN,KAAKC,EAAAA,GAAAA,aACH3a,IAAa,GACb2gB,KACA,MAEF,KAAKhG,EAAAA,GAAAA,SACHgF,GAAQhF,EAAAA,GAAAA,UACR,MAEF,KAAKA,EAAAA,GAAAA,cACHgF,GAAQhF,EAAAA,GAAAA,iBACR,MAEF,KAAKA,EAAAA,GAAAA,gBACH,GAAsB,KAAlB6E,GACF,OAGFxf,IAAa,GACbof,EAAwB,CAAEpoE,SAAUwoE,KACpC,MAEF,KAAK7E,EAAAA,GAAAA,YACH3a,IAAa,GACb8gB,KACAxB,GAAgB,CAAE3jH,KAAM,0BAA2B07C,QAAS,KAC5D,MAEF,KAAKsjE,EAAAA,GAAAA,SAAsB,CACzB,GAAI6C,IAAcO,IAAcsB,EAAarI,SAG3C,OAFAhX,IAAa,QACb2gB,KAIF,GACEtB,EAAa3H,qBACRoH,GAAsBA,GAAuB1vG,KAAKC,MAAQ,IAjUvC,GAoUxB,YADAswG,GAAQhF,EAAAA,GAAAA,iBAIV,IACG0E,EAAa3H,oBAEXgG,IAAmBL,KAAqBwB,GACrCnB,IAAmBJ,KAAoBsB,GAI7C,YADAe,GAAQhF,EAAAA,GAAAA,aAIV,MAAM,MAAExtF,EAAF,MAAS+pB,EAAT,SAAgBy9D,GAAa0K,EAC7BiC,EAA2B9C,IAAqBtnE,GAChDqnE,IAAqBpxF,GACrBkxF,IAAoB1J,EAE1B,GAAK2J,IAA+BP,GAAcuD,EAEhD,YADA3B,GAAQhF,EAAAA,GAAAA,cAIV,GAAI2D,IAA+Be,EAAarI,SAE9C,YADA2I,GAAQhF,EAAAA,GAAAA,UAIV3a,IAAa,GACbohB,KACA,UAGH,CACD5C,EAAkBH,EAAiBE,EAAkBD,EAA4BZ,EAAgBoB,EACjGQ,GAAiBD,EAActB,EAAWP,EAAWsD,GAAiBM,GAAUzB,GAASf,EAAkBlE,EAC3GmE,EAAUW,GAAeJ,EAAyBuB,MAGpDjqH,EAAAA,EAAAA,KAAU,IACDgkH,IAASC,EAAAA,GAAAA,iBACZ5wE,EAAAA,GAAAA,GAAyB,CAAE1vC,QAAS6+E,UACpCrmF,GAEN,CAACqmF,GAAmBwhC,IAEpB,MAAM6G,IAAmB3nH,EAAAA,EAAAA,KAAY,KACnC0lH,GAAgB,CACd3jH,KAAM,eAER4jH,IAAiB,GACjBhmH,MACC,CAACA,EAAS+lH,KAEP9qF,IAAkB56B,EAAAA,EAAAA,KAAY,KAClC+lH,GAAQjF,IAASC,EAAAA,GAAAA,gBAA8BA,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,YAC1E,CAACgF,GAASjF,IAEP78F,IAAc1pB,EAAAA,EAAAA,KAAQ,KAC1B,OAAQumH,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAOzgH,EAAK,mBACd,KAAKygH,EAAAA,GAAAA,aACH,OAAOzgH,EAAK,uBACd,KAAKygH,EAAAA,GAAAA,SACH,OAAOzgH,EAAK,yBACd,KAAKygH,EAAAA,GAAAA,cACH,OAAOzgH,EAAK,yBACd,KAAKygH,EAAAA,GAAAA,gBACH,OAAOzgH,EAAK,gCACd,KAAKygH,EAAAA,GAAAA,YACH,OAAOzgH,EAAK,mBACd,KAAKygH,EAAAA,GAAAA,eACH,OAAOzgH,EAAK,kCACd,QACE,MAAO,MAEV,CAACwgH,EAAMxgH,IAEJw2B,GAAagqF,IAASC,EAAAA,GAAAA,SACxBzgH,EAAK,qBAAqB2mC,EAAAA,GAAAA,GAAey4E,GAAYv4E,EAAW7mC,EAAKowB,OACrEpwB,EAAK,QAwBT,GAAIkkH,EACF,OACE,mBAAChkH,EAAA,EAAD,CACEE,UAAU,QACVlB,OAAQypB,EACRtpB,QAASwpB,EACT3F,oBAAqBmkG,IAErB,qGAC6E,8BAD7E,iDAIA,mBAAC/mH,EAAA,EAAD,CACEE,QAAM,EACNC,QAASooB,GAER7oB,EAAK,QAMd,MAAMsnH,GA5CN,WACE,GAAI7tE,GACF,OAAO,EAGT,OAAQ+mE,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAO/mH,SAAQslH,MAAAA,OAAA,EAAAA,EAASW,eAAgBN,IAE1C,KAAKoB,EAAAA,GAAAA,YACH,OAAO/mH,QACuB,KAA5ByrH,EAAa3I,YACTyF,GAAkD,KAA5BkD,EAAapI,YACf,KAArBoI,EAAalI,KACW,KAAxBkI,EAAanI,QAGpB,QACE,OAAO,GA0BYuK,GAEzB,OACE,mBAACrnH,EAAA,EAAD,CACEE,WAAWmF,EAAAA,EAAAA,GAAe,gBAAgBy5G,MAAAA,OAAA,EAAAA,EAASW,cAAe,aAClEzgH,OAAQypB,EACRtpB,QAASwpB,EACT3F,oBAAqBmkG,IAErB,0BAAKjnH,UAAU,SAASsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChD,mBAAC2H,EAAA,EAAD,CACEF,UAAU,eACVG,MAAM,cACNuC,OAAK,EACLnG,KAAK,UACL8D,QAAS+/G,IAASC,EAAAA,GAAAA,SAAuB53F,EAAayR,GACtDv3B,UAAU,SAEV,wBAAG3C,UAAWogH,IAASC,EAAAA,GAAAA,SAAuB,aAAe,qBAE/D,6BAAK98F,UAEGhrB,IAAT6nH,EACC,mBAACj+F,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWg+F,GAClC,0BAAKpgH,UAAU,yBA/SvB,SAA4BonH,GAC1B,OAAQA,GACN,KAAK/G,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEniH,KAAMA,EACN2gH,OAAQA,EACR51D,SAAU+7D,GACVlG,eAAgBiG,EAAarI,UAAYgC,EACrCkH,GAAkBlH,EAAiBqG,EAAarI,eAChDnkH,EACJymH,WAAYA,GACZJ,QAASA,EACTG,aAAcA,GACdt4E,SAAUA,EACV04E,mBAAoBA,EACpBhC,UAAW4H,EAAa5H,UACxBW,YAAaxkH,QAAQ0qH,GACrB5E,iBAAkBA,EAClBH,cAAeA,GACfC,YAAa+F,KAGnB,KAAK5E,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEvjE,MAAOioE,EACP3F,iBAAkBA,EAClBn2D,SAAU+7D,GACVxC,eAAgB4D,KAGtB,KAAK/F,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEvjE,MAAOioE,EACP3F,iBAAkBA,EAClBsD,iBAAkByC,GAClB90G,SAAU+2G,IAAgBhH,IAGhC,KAAKC,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEvjE,MAAOioE,EACP97D,SAAU+7D,GACVpD,mBAAoBtoH,SAASgqH,GAAmB1B,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACT/vF,YAAaA,IAGnB,KAAKquF,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEvjE,MAAOioE,EACP97D,SAAU+7D,GACVlH,YAAaxkH,QAAQ0qH,GACrBrG,UAAWrkH,QAAQ4qH,GAAoBE,GACvCxG,UAAWtkH,QAAQ2qH,GAAoBE,GACvCtG,SAAUvkH,QAAQyqH,GAClB/xF,YAAaA,IAGnB,KAAKquF,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEvjE,MAAOioE,EACP97D,SAAU+7D,GACVtG,gBAAiBA,GAAmB,GACpCj4E,SAAUA,IAGhB,KAAK45E,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACE12G,IAAK45G,EACLhB,WAAYsB,EACZ5kH,QAASwpB,IAGf,QACE,QA6NK4+F,CAAmBjH,KAIxB,0BAAKpgH,UAAU,iBACb,mBAACkR,GAAA,EAAD,CAAS/Q,MAAM,UAGlBilH,IACC,0BAAKplH,UAAU,UACb,mBAACE,EAAA,EAAD,CACEmB,KAAK,SACLhB,QAASu+E,GACTl1E,SAAUw9G,GACV7tE,UAAWA,IAEVjjB,KAINpO,IAAUA,EAAM65E,OA1VrB,WACE,GAAK75E,EAGL,OACE,mBAACloB,EAAA,EAAD,CACEE,UAAU,QACVlB,OAAQxF,QAAQ0uB,GAChB/oB,QAASymH,IAET,6BAAK19F,EAAMkV,aAAe,SAC1B,4BAAIlV,EAAMkV,aAAe,SACzB,mBAACh9B,EAAA,EAAD,CACEE,QAAM,EACNC,QAASsiH,GAER/iH,EAAK,QA0UgB0nH,QA6EhC,SAASpB,GAAmBxH,EAAmC6I,GAC7D,OAAO7I,EAAgBx5E,MAAK,QAAC,GAAEtvC,GAAH,SAAYA,IAAO2xH,KAGjD,SAAS3B,GAAkBlH,EAAmCiH,GAC5D,MAAMxgF,EAAS+gF,GAAmBxH,EAAiBiH,GACnD,OAAOxgF,MAAAA,OAAP,EAAOA,EAAQ05E,OCtmBjB,MA4EA,IAAenhH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE4pH,GAAY5pH,EAAO02B,SACrB,SACJmS,EADI,OAEJo4E,EAFI,KAGJ4I,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJ7I,EANI,eAOJgB,EAPI,MAQJznH,EARI,KASJ+L,EATI,MAUJnE,EAVI,UAWJk9G,GACGqK,GAAW,GAEhB,MAAO,CACL/gF,SAAAA,EACAo4E,OAAAA,EACA4I,KAAAA,EACAtK,UAAAA,EACAuK,YAAAA,EACAC,iBAAAA,EACA7I,eAAAA,EACAgB,eAAAA,EACAznH,MAAAA,EACA+L,KAAAA,EACAnE,MAAAA,KA5BctC,EA5E4B,IAc1C,IAd2C,OAC/CmB,EAD+C,QAE/CG,EAF+C,OAG/C4/G,EAH+C,eAI/CC,EAJ+C,UAK/C3B,EAL+C,YAM/CuK,EAN+C,SAO/CjhF,EAP+C,KAQ/CghF,EAR+C,MAS/CpvH,EAT+C,KAU/C+L,EAV+C,MAW/CnE,EAX+C,iBAY/C0nH,EAZ+C,eAa/C7H,GACI,EACJ,MAAMlgH,GAAOC,EAAAA,EAAAA,MAEN0oB,EAAaC,EAAWC,IAAcxmB,EAAAA,EAAAA,MAE7C7F,EAAAA,EAAAA,KAAU,KACJ0C,GACF0pB,MAED,CAAC1pB,EAAQ0pB,IAEZ,MAAMu2F,GAAellH,EAAAA,EAAAA,KAAQ,IAoF/B,SAAyB8lH,EACvB8H,EAKA3H,GACA,IAAK2H,EACH,MAAO,CAAE9H,cAAAA,GAEX,MAAM,gBAAEE,GAAoB4H,EACtBG,EAAc/H,MAAAA,GAAAA,EAAiBxD,YAChC,GAAEwD,EAAgBxD,gBAAgBwD,EAAgBtD,SAASsD,EAAgBrD,mBAC5EjkH,GACE,MAAEs6B,EAAF,KAASxQ,GAASolG,EACxB,MAAO,CACL9H,cAAAA,EACAE,gBAAiB+H,EACjBvlG,KAAAA,EACAwQ,MAAAA,EACAitF,eAAAA,GAvGOqG,CAAgBwB,EAAkBF,EAAM3H,IAC9C,CAAC2H,EAAM3H,EAAgB6H,IAEpB/I,GAAU/kH,EAAAA,EAAAA,KAAQ,KACf,CACLxB,MAAAA,EACA+L,KAAMA,EACNnE,MAAOA,EACPumC,OAAQkhF,EACRjhF,SAAUA,KAEX,CAACA,EAAUpuC,EAAO+L,EAAMnE,EAAOynH,IAElC,OACE,mBAAC5nH,EAAA,EAAD,CACEE,UAAU,oCACVlB,OAAQypB,EACRtpB,QAASwpB,EACT3F,oBAAqB7jB,GAErB,8BACE,0BAAKe,UAAU,SAASsF,IAAK1F,EAAK8a,MAAQ,WAAQniB,GAChD,mBAAC2H,EAAA,EAAD,CACEF,UAAU,eACVG,MAAM,cACNuC,OAAK,EACLnG,KAAK,UACL8D,QAASooB,EACT9lB,UAAU,SAEV,wBAAG3C,UAAU,gBAEf,iCAAMJ,EAAK,kBAAX,MAEF,0BAAKI,UAAU,iCACb,mBAAC,GAAD,CACE6+G,OAAQA,EACRC,eAAgBA,EAChBE,WAAY0I,EACZvK,UAAWA,EACXyB,QAASA,EACTG,aAAcA,EACdt4E,SAAUA,Y,kHCzFtB,MACMohF,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAenlH,EAAAA,GAA0BolH,EAAAA,GAA2BC,EAAAA,GAiC1E,GAAexqH,EAAAA,EAAAA,KA/BsB,IAAkC,IAAjC,kBAAE4kE,EAAF,MAAqBD,GAAY,EACrE,MAAO8lD,EAAqBC,IAAyBnmH,EAAAA,EAAAA,IAAQ,IACtDomH,EAAaC,IAAiBrmH,EAAAA,EAAAA,IAAQ,IAE7CqS,EAAAA,EAAAA,GAAWg0G,EAVkB,KAW7B,MAAMC,GAAwBjpH,EAAAA,EAAAA,IAAY8oH,EAAuB,CAACA,IAElE,OACE,0BAAKxyH,GAAG,SAASoK,UAAWqiE,EAAQ,MAAQ,KACxC8lD,GACA,0BAAKnoH,UAAU,mBAEjB,mBAAC,IAAD,CACEzD,KAAM8lE,EAAQkB,EAAAA,GAAsBykD,EACpChoH,UAAWqoH,EAAc,SAAW,QACpC/oF,OAAQ6S,EAAAA,EAAAA,YACRq2E,YAAaX,EACbpoF,QAAM,EACNwT,OAAQs1E,IAEV,mBAAC,IAAD,CACEhsH,KAAM8lE,EAAQkB,EAAAA,GAAsBykD,EACpChoH,UAAWqoH,EAAc,QAAU,SACnC/oF,OAAQ6S,EAAAA,EAAAA,WACRq2E,YAAalmD,EAAoBwlD,EAAsBC,EACvDtoF,QAAM,S,2HClCd,MAAMgpF,EAAiE,CACrEpnH,KAAM,OACN0xC,QAAS,EACT21E,OAAQ,OACRC,QAAQ,EACRpsH,KAAM,CAAEjB,MAAO,KAAMK,OAAQ,OAI/B,IAAIitH,EACAC,EAWAC,EAwCJ,MAwDA,GAAeprH,EAAAA,EAAAA,KAxDiB,IAA2C,IAA1C,KAAE8sF,EAAF,SAAQthF,EAAR,QAAkBjK,GAAwB,EACzE,MAAO8pH,EAAgBC,IAAqBvkH,EAAAA,EAAAA,KAAS,IAErDrI,EAAAA,EAAAA,KAAU,KACHouF,IAIAu+B,EA9CT/jF,eAA2BikF,GACzB,IACE,MAAMC,EAAgB90H,SAASysB,eAAe,eAC9C,IAAKqoG,EACH,OAGF,MAAM,YAAExjE,EAAF,aAAe1vD,GAAiBkzH,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACR9tH,MAAOoqD,EACP/pD,OAAQ3F,GAEVqzH,SAAU,CACR/tH,MAAOoqD,EAAc,GACrB/pD,OAAQ3F,EAAe,GACvBqL,KAAM,YAIV,MAAMrG,QAAgBsuH,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQvxH,KAAK,CAAEoS,IAAK3O,IAC1B,MAAOrD,GACHC,EAAAA,IAEFC,QAAQmwB,MAAMrwB,IAyBhB4xH,CAAY/+B,GA/DhBxlD,iBAME,OALK6jF,IACHA,EAAiB,yDACjBD,SAAiBC,GAAgB91B,SAG5B81B,EAoDHW,GAAgB1kF,MAAK,IAAMkkF,GAAkB,QAM9C,CAACx+B,EAAMu+B,IAEV,MAAMnpH,GAAOC,EAAAA,EAAAA,KAEP4pH,GAAkBnqH,EAAAA,EAAAA,KAAY0lC,UAClC,IAAK8jF,EACH,OAGF,MAAMvsD,QAA8BusD,EAAQvsD,OAAOksD,GAC7CiB,EAA+B,iBAAXntD,EAAsBA,GAASotD,EAAAA,EAAAA,IAAWptD,EAAQ,cAE5ErzD,EAASwgH,KACR,CAACxgH,IAEJ,OACE,mBAACpJ,EAAA,EAAD,CACEhB,OAAQxF,QAAQkxF,GAChBvrF,QAASA,EACTgB,MAAM,qBACND,UAAU,YACVu7B,gBAAc,GAEbwtF,EACC,0BAAKnzH,GAAG,gBAER,mBAAC4uB,EAAA,EAAD,MAEF,mBAACtkB,EAAA,EAAD,CACEF,UAAU,iBACV0C,OAAK,EACLvC,MAAM,UACNE,QAASopH,EACT9mH,UAAW/C,EAAK,cAEhB,wBAAGI,UAAU,oBC5CrB,GAAetC,EAAAA,EAAAA,KAhEsB,IAK/B,IALgC,MACpCuC,EAAQ,8BAD4B,SAEpCyJ,EAFoC,qBAGpC64C,EAHoC,SAIpCr5C,GACI,EACJ,MAAO0gH,EAAcC,IAAmBplH,EAAAA,EAAAA,OACjCqlH,EAAgBC,IAAqBtlH,EAAAA,EAAAA,IAA6B89C,IAEzEnmD,EAAAA,EAAAA,KAAU,KACR2tH,EAAkBxnE,KACjB,CAACA,IAaJ,MAAMynE,GAAmB1qH,EAAAA,EAAAA,KAAaoqH,IACpCG,OAAgBtxH,GAChB2Q,EAASwgH,GAELI,GAAkBA,IAAmBvnE,GACvC0nE,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,MACrC,CAACI,EAAgBvnE,EAAsBr5C,IAEpC+9G,GAAmB3nH,EAAAA,EAAAA,KAAY,KACnCuqH,OAAgBtxH,KACf,IAEG6xH,GAAiBjlH,EAAAA,EAAAA,GACrB2kH,GAAkB,SAClBpgH,GAAY,YAGd,OACE,0BAAK1J,UAAU,kBACb,4BACEA,UAAWoqH,EACXp5F,KAAK,SACLC,SAAU,EACVhxB,MAAOA,GAEP,4BACEoB,KAAK,OACL6H,SAxCR,SAA0B0O,GACxB,MAAMhC,EAASgC,EAAMhC,OAEhBA,GAAWA,EAAOk7C,OAAUl7C,EAAOk7C,MAAM,KAI9C+4D,EAAgBj0G,EAAOk7C,MAAM,IAC7Bl7C,EAAO3M,MAAQ,KAiCTohH,OAAO,0BAET,wBAAGrqH,UAAU,oBACZ8pH,GAAkB,0BAAKj1H,IAAKi1H,EAAgB14G,IAAI,YAEnD,mBAAC,EAAD,CAAWo5E,KAAMo/B,EAAc3qH,QAASgoH,EAAkB/9G,SAAU8gH","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    deleteProfilePhoto({ photo, profileId });\n    onClose();\n  }, [onConfirm, deleteProfilePhoto, photo, profileId, onClose]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete\"\n      title=\"Are you sure?\"\n    >\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n        {lang('Preview.DeletePhoto')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canDeleteAvatar?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwnerId?: string;\n  fileName?: string;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  messageListType,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, canDeleteAvatar }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      messageListType,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) return;\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canDeleteMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canDeleteMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          canDeleteAvatar={canDeleteMedia && !!avatarPhoto}\n          avatarPhoto={avatarPhoto}\n          avatarOwnerId={avatarOwner?.id}\n          fileName={fileName}\n          canReport={canReport}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations, currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canDeleteMedia = false;\n      if (user) canDeleteMedia = avatarOwnerId === currentUserId;\n      // TODO Support deleting chat photos\n      // if (chat) canDeleteMedia = isChatAdmin(chat);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canDeleteMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners small-icon\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatId({ id: recipientId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatId, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport, windowSize]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <FullNameTitle peer={user} withEmojiStatus />\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^[^\\d]([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  checkedUsername,\n  isUsernameAvailable,\n  maxBioLength,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable, checkedUsername } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const mediaData = useMedia((hasThumbnail || isLottie) && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const isReady = mediaData && (!isVideo || IS_WEBM_SUPPORTED);\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : isVideo ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsChatProtected, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = selectIsChatProtected(global, message.chatId);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: message.isForwardingAllowed && !isChatProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji } = getActions();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    onCaptionUpdate,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvas2Ref = useRef<HTMLCanvasElement>(null);\n\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const canCut = !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = stickersPerRow * 3 - 1;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, stickerSet.count) / stickersPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(stickerSet.count / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n        {!isRecent && isEmoji && !stickerSet.installedDate && (\n          <Button\n            className=\"symbol-set-add-button\"\n            withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n            onClick={handleAddClick}\n            pill\n            size=\"tiny\"\n            fluid\n          >\n            {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n          </Button>\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvas2Ref} className=\"shared-canvas\" />}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvas2Ref\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              />\n            );\n          })}\n        {isCut && stickerSet.count > itemsBeforeCutout && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className: string;\n  loadAndPlay: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedCustomEmojiIds));\n\n    const filteredFeaturedIds = featuredCustomEmojiIds?.filter((id) => !addedCustomEmojiIds.includes(id)) || [];\n    const featuredSetIds = Object.values(pickTruthy(stickerSetsById, filteredFeaturedIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n      ...featuredSetIds,\n    ];\n  }, [addedCustomEmojiIds, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    error: global.payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: global.payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","handleDeletePhoto","canDeleteAvatar","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","downloadMessageMedia","cancelMessageMediaDownload","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","IS_SINGLE_COLUMN_LAYOUT","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","canDeleteMedia","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatId","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","lastFrameSizeRef","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","userOrChat","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","sharedCanvasRef","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","isReady","IS_WEBM_SUPPORTED","useBoundsInSharedCanvas","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","mediaHash","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","copyTextToClipboard","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","customEmojiForEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","isCustomEmojiPicker","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","sharedCanvas2Ref","isConfirmModalOpen","openConfirmModal","closeConfirmModal","isRecent","isFavorite","FAVORITE_SYMBOL_SET_ID","isPremiumSet","handleClearRecent","handleAddClick","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","canCut","isCut","expand","itemsBeforeCutout","heightWhenCut","favoriteStickerIdsSet","isHqEmoji","canvasRef","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","sharedCanvasHqRef","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","filteredFeaturedIds","featuredSetIds","noPopulatedSets","stickerSetEl","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","withSharedAnimation","shouldPreloadPreview","listEmojis","usePrevDuringAnimation","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}